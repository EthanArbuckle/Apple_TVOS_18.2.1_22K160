LABEL_157:
      free(backtrace_string);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    else {
      v20 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    v242 = "nw_flow_add_read_request";
    v243 = 2082;
    id_str = (char *)v20;
    v245 = 2082;
    v246 = "flow";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v239 = 0;
    if (__nwlog_fault(v21, &type, &v239))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (os_log_s *)(id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          else {
            v24 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          v243 = 2082;
          id_str = (char *)v24;
          v245 = 2082;
          v246 = "flow";
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v239)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (os_log_s *)(id)gLogObj;
        v26 = type;
        v27 = os_log_type_enabled(v22, type);
        if (v25)
        {
          if (v27)
          {
            else {
              v28 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            v242 = "nw_flow_add_read_request";
            v243 = 2082;
            id_str = (char *)v28;
            v245 = 2082;
            v246 = "flow";
            v247 = 2082;
            v248 = v25;
            _os_log_impl( &dword_181A5C000,  v22,  v26,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v25);
          if (!v21) {
            return 0LL;
          }
          goto LABEL_120;
        }

        if (v27)
        {
          else {
            v34 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          v243 = 2082;
          id_str = (char *)v34;
          v245 = 2082;
          v246 = "flow";
          _os_log_impl( &dword_181A5C000,  v22,  v26,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (os_log_s *)(id)gLogObj;
        v29 = type;
        if (os_log_type_enabled(v22, type))
        {
          else {
            v30 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          v243 = 2082;
          id_str = (char *)v30;
          v245 = 2082;
          v246 = "flow";
          _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_118;
    }
  }

    free(backtrace_string);
    goto LABEL_194;
  }

  v64 = (os_log_s *)__nwlog_obj();
  v65 = type[0];
  if (os_log_type_enabled(v64, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    v108 = "nw_protocol_udp_updated_path";
    v66 = "%{public}s called with null path";
    goto LABEL_193;
  }

        v3 = 1;
        if ((a1 & 0x20) == 0) {
          goto LABEL_196;
        }
LABEL_158:
        if ((v3 & 1) != 0)
        {
          if (!v2)
          {
            __nwlog_obj();
            v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v135, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            v140 = "_strict_strlcat";
            v136 = (void *)_os_log_send_and_compose_impl();

            result = __nwlog_abort((uint64_t)v136);
            if (result) {
              goto LABEL_268;
            }
            free(v136);
          }

          v72 = 0LL;
          v73 = 107LL;
          while (1)
          {
            v74 = &v2[v72];
            if (!v2[v72]) {
              break;
            }
            ++v72;
            if (!--v73) {
              goto LABEL_184;
            }
          }

          if (v73 >= 2)
          {
            v77 = v73 - 2;
            v78 = 106 - v72;
            v79 = 105 - v72;
            if (v79 >= 2) {
              v79 = 2LL;
            }
            memcpy(v74, ", ", v79 + 1);
            v74 = v2 + 106;
            while (v77 <= 1)
            {
              if (!--v78) {
                goto LABEL_183;
              }
            }

            goto LABEL_184;
          }
        }

        else
        {
          if (!v2)
          {
            __nwlog_obj();
            v137 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v137, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            v140 = "_strict_strlcat";
            v138 = (void *)_os_log_send_and_compose_impl();

            result = __nwlog_abort((uint64_t)v138);
            if (result) {
              goto LABEL_268;
            }
            free(v138);
          }

          v75 = 0LL;
          v76 = 107LL;
          while (1)
          {
            v74 = &v2[v75];
            if (!v2[v75]) {
              break;
            }
            ++v75;
            if (!--v76) {
              goto LABEL_184;
            }
          }

          if (v76 >= 2)
          {
            v80 = v76 - 2;
            v81 = 106 - v75;
            if (v75 == 105) {
              v82 = 1LL;
            }
            else {
              v82 = 2LL;
            }
            memcpy(v74, "<", v82);
            v74 = v2 + 106;
            while (!v80)
            {
              if (!--v81) {
                goto LABEL_183;
              }
            }

            goto LABEL_184;
          }
        }

    free(backtrace_string);
    goto LABEL_208;
  }

  v61 = (os_log_s *)__nwlog_obj();
  v62 = type;
  if (os_log_type_enabled(v61, type))
  {
    *(_DWORD *)buf = 136446210;
    v102 = "nw_protocol_plugin_retry_connect";
    v63 = "%{public}s called with null other_protocol";
    goto LABEL_207;
  }

                  v75 = 0LL;
                  goto LABEL_158;
                }

                v154 = *(_OWORD *)a3->flow_id;
                if (v9[405] < 0) {
                  goto LABEL_157;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v52 = (id)gLogObj;
                *(_DWORD *)buf = 136447234;
                *(void *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                v148 = 2082;
                v149 = v9 + 407;
                v150 = 2080;
                v151 = " ";
                v152 = 1042;
                *(_DWORD *)v153 = 16;
                *(_WORD *)&v153[4] = 2098;
                *(void *)&v153[6] = &v154;
                v53 = (const char *)_os_log_send_and_compose_impl();

                type = OS_LOG_TYPE_ERROR;
                v144 = 0;
                if (__nwlog_fault(v53, &type, &v144))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v54 = (os_log_s *)(id)gLogObj;
                    v55 = type;
                    if (os_log_type_enabled(v54, type))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(void *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 1042;
                      *(_DWORD *)v153 = 16;
                      *(_WORD *)&v153[4] = 2098;
                      *(void *)&v153[6] = &v154;
                      _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P",  buf,  0x30u);
                    }
                  }

                  else if (v144)
                  {
                    v58 = __nw_create_backtrace_string();
                    if (v58)
                    {
                      v59 = (char *)v58;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v60 = (os_log_s *)(id)gLogObj;
                      v61 = type;
                      if (os_log_type_enabled(v60, type))
                      {
                        *(_DWORD *)buf = 136447490;
                        *(void *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                        v148 = 2082;
                        v149 = v9 + 407;
                        v150 = 2080;
                        v151 = " ";
                        v152 = 1042;
                        *(_DWORD *)v153 = 16;
                        *(_WORD *)&v153[4] = 2098;
                        *(void *)&v153[6] = &v154;
                        *(_WORD *)&v153[14] = 2082;
                        *(void *)&v153[16] = v59;
                        _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public ,uuid_t}.16P, dumping backtrace:%{public}s",  buf,  0x3Au);
                      }

                      free(v59);
                      if (!v53) {
                        goto LABEL_157;
                      }
LABEL_150:
                      v89 = (char *)v53;
                      goto LABEL_156;
                    }

                    __nwlog_obj();
                    v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v96 = type;
                    if (os_log_type_enabled(v54, type))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(void *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 1042;
                      *(_DWORD *)v153 = 16;
                      *(_WORD *)&v153[4] = 2098;
                      *(void *)&v153[6] = &v154;
                      _os_log_impl( &dword_181A5C000,  v54,  v96,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,u uid_t}.16P, no backtrace",  buf,  0x30u);
                    }
                  }

                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v54 = (os_log_s *)(id)gLogObj;
                    v90 = type;
                    if (os_log_type_enabled(v54, type))
                    {
                      *(_DWORD *)buf = 136447234;
                      *(void *)&buf[4] = "nw_protocol_implementation_replace_input_handler";
                      v148 = 2082;
                      v149 = v9 + 407;
                      v150 = 2080;
                      v151 = " ";
                      v152 = 1042;
                      *(_DWORD *)v153 = 16;
                      *(_WORD *)&v153[4] = 2098;
                      *(void *)&v153[6] = &v154;
                      _os_log_impl( &dword_181A5C000,  v54,  v90,  "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,u uid_t}.16P, backtrace limit exceeded",  buf,  0x30u);
                    }
                  }
                }

    if (v60) {
      free(v60);
    }
    goto LABEL_159;
  }

  v10 = nw_protocol_implementation_lookup_path((NWConcrete_nw_protocol_instance *)v7, a2, &v78);
  if (!v10)
  {
    if (((char)v7[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        v86 = 2082;
        v87 = v7 + 407;
        v88 = 2080;
        v89 = " ";
        v90 = 2048;
        v91 = v78;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sNo path found for %lx",  buf,  0x2Au);
      }
    }

    v9[2](v9, 0LL);
    goto LABEL_150;
  }

  v11 = v10;
  if ((*(_BYTE *)(v10 + 137) & 2) == 0)
  {
    v81 = 0LL;
    v82 = (id *)&v81;
    v12 = *(void **)(v10 + 32);
    if (v12)
    {
      v13 = v12[3];
      if (v13)
      {
        v14 = *(uint64_t (**)(void))(v13 + 88);
        if (v14)
        {
          v15 = (void *)v12[5];
          if (v15 == &nw_protocol_ref_counted_handle)
          {
            v31 = v12[11];
            if (v31) {
              v12[11] = v31 + 1;
            }
            v16 = -1;
          }

          else
          {
            v16 = 0;
          }

          *(void *)buf = v12;
          buf[8] = v16;
          v32 = (void *)*((void *)v7 - 7);
          if (v32 == &nw_protocol_ref_counted_handle)
          {
            v34 = *((void *)v7 - 1);
            if (v34) {
              *((void *)v7 - 1) = v34 + 1;
            }
            v33 = -1;
          }

          else
          {
            v33 = 0;
          }

          *(void *)type = v7 - 96;
          v84 = v33;
          v21 = v14();
          if (v32 == &nw_protocol_ref_counted_handle)
          {
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            if (v15 != &nw_protocol_ref_counted_handle)
            {
LABEL_53:
              if ((_DWORD)v21)
              {
LABEL_54:
                v35 = v81;
                *(void *)(v11 + 56) = nw_frame_get_finalizer_context((uint64_t)v35);
                ((void (**)(void, char *))v9)[2](v9, v35);

LABEL_150:
                v21 = 1LL;
                goto LABEL_161;
              }

              goto LABEL_57;
            }
          }

          else if (v15 != &nw_protocol_ref_counted_handle)
          {
            goto LABEL_53;
          }

          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
          if ((_DWORD)v21) {
            goto LABEL_54;
          }
LABEL_57:
          v22 = *(_BYTE *)(v11 + 137) | 1;
          goto LABEL_22;
        }
      }
    }

    if (((char)v7[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&buf[4] = "nw_protocol_service_requested_outbound_data";
        v86 = 2082;
        v87 = v7 + 407;
        v88 = 2080;
        v89 = " ";
        v90 = 2048;
        v91 = v78;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sOutput handler is torn down for path %lx",  buf,  0x2Au);
      }
    }

          if (*(_BYTE *)(a2 + *v8)) {
            v151 = 0LL;
          }
LABEL_159:
          *(_BYTE *)(a1 + 41) = v151 != 0;
          goto LABEL_5;
        case 8u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v105 = *v3;
          v106 = *(void *)(a2 + v105);
          if (v106 == -1LL || v106 >= *(void *)(a2 + *v6))
          {
            v109 = 0LL;
LABEL_146:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_147;
          }

          v107 = v106 + 1;
          v108 = *(_BYTE *)(*(void *)(a2 + *v10) + v106);
          *(void *)(a2 + v105) = v107;
          v109 = v108 & 0x7F;
          if ((v108 & 0x80) == 0) {
            goto LABEL_147;
          }
          v110 = *v3;
          v111 = *(void *)(a2 + v110);
          if (v111 == -1LL || v111 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          v112 = v111 + 1;
          v113 = *(char *)(*(void *)(a2 + *v10) + v111);
          *(void *)(a2 + v110) = v112;
          v109 |= (unint64_t)(v113 & 0x7F) << 7;
          if ((v113 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          v114 = *v3;
          v115 = *(void *)(a2 + v114);
          if (v115 == -1LL || v115 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          v116 = v115 + 1;
          v117 = *(char *)(*(void *)(a2 + *v10) + v115);
          *(void *)(a2 + v114) = v116;
          v109 |= (unint64_t)(v117 & 0x7F) << 14;
          if ((v117 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          v118 = *v3;
          v119 = *(void *)(a2 + v118);
          if (v119 == -1LL || v119 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          v120 = v119 + 1;
          v121 = *(char *)(*(void *)(a2 + *v10) + v119);
          *(void *)(a2 + v118) = v120;
          v109 |= (unint64_t)(v121 & 0x7F) << 21;
          if ((v121 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          v122 = *v3;
          v123 = *(void *)(a2 + v122);
          if (v123 == -1LL || v123 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          v124 = v123 + 1;
          v125 = *(char *)(*(void *)(a2 + *v10) + v123);
          *(void *)(a2 + v122) = v124;
          v109 |= (unint64_t)(v125 & 0x7F) << 28;
          if ((v125 & 0x80000000) == 0) {
            goto LABEL_147;
          }
          v177 = *v3;
          v178 = *(void *)(a2 + v177);
          if (v178 == -1LL || v178 >= *(void *)(a2 + *v6)) {
            goto LABEL_146;
          }
          v179 = v178 + 1;
          v180 = *(char *)(*(void *)(a2 + *v10) + v178);
          *(void *)(a2 + v177) = v179;
          v109 |= (unint64_t)(v180 & 0x7F) << 35;
          if (v180 < 0)
          {
            v221 = *v3;
            v222 = *(void *)(a2 + v221);
            if (v222 == -1LL || v222 >= *(void *)(a2 + *v6)) {
              goto LABEL_146;
            }
            v223 = v222 + 1;
            v224 = *(char *)(*(void *)(a2 + *v10) + v222);
            *(void *)(a2 + v221) = v223;
            v109 |= (unint64_t)(v224 & 0x7F) << 42;
            if (v224 < 0)
            {
              v225 = *v3;
              v226 = *(void *)(a2 + v225);
              if (v226 == -1LL || v226 >= *(void *)(a2 + *v6)) {
                goto LABEL_146;
              }
              v227 = v226 + 1;
              v228 = *(char *)(*(void *)(a2 + *v10) + v226);
              *(void *)(a2 + v225) = v227;
              v109 |= (unint64_t)(v228 & 0x7F) << 49;
              if (v228 < 0)
              {
                v229 = *v3;
                v230 = *(void *)(a2 + v229);
                if (v230 == -1LL || v230 >= *(void *)(a2 + *v6)) {
                  goto LABEL_146;
                }
                v231 = v230 + 1;
                v232 = *(char *)(*(void *)(a2 + *v10) + v230);
                *(void *)(a2 + v229) = v231;
                v109 |= (unint64_t)(v232 & 0x7F) << 56;
                if (v232 < 0)
                {
                  v233 = *v3;
                  v234 = *(void *)(a2 + v233);
                  if (v234 == -1LL || v234 >= *(void *)(a2 + *v6)) {
                    goto LABEL_146;
                  }
                  v235 = v234 + 1;
                  v236 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v234);
                  *(void *)(a2 + v233) = v235;
                  if ((v236 & 0x80) != 0)
                  {
                    v109 = 0LL;
                    goto LABEL_149;
                  }

                  v109 |= v236 << 63;
                }
              }
            }
          }

              default_input_handler = a1->default_input_handler;
              if (!default_input_handler)
              {
                if ((handle[276] & 0x10) != 0) {
                  return;
                }
                v84 = (os_log_s *)__nwlog_obj();
                if (!os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
                  return;
                }
                v85 = *((void *)handle + 11);
                if (v85) {
                  v86 = *(_DWORD *)(v85 + 460);
                }
                else {
                  v86 = -1;
                }
                v87 = *((void *)handle + 8);
                *(_DWORD *)buf = 136447234;
                v101 = "nw_protocol_webtransport_http3_stream_connected";
                v102 = 2082;
                v103 = (char *)(handle + 192);
                v104 = 2080;
                v105 = " ";
                v106 = 1024;
                v107 = v86;
                v108 = 2048;
                v109 = v87;
                v45 = "%{public}s %{public}s%s<i%u:s%lld> No input handler found, ignoring connected call";
                v46 = v84;
                v47 = OS_LOG_TYPE_ERROR;
LABEL_177:
                v48 = 48;
LABEL_178:
                _os_log_impl(&dword_181A5C000, v46, v47, v45, buf, v48);
                return;
              }

              if ((handle[276] & 4) != 0)
              {
                v80 = 3;
                if ((handle[276] & 2) != 0) {
                  goto LABEL_163;
                }
                *((_DWORD *)handle + 46) = 3;
              }

              if (*((_DWORD *)handle + 47)) {
                goto LABEL_164;
              }
              v80 = 2;
LABEL_163:
              *((_DWORD *)handle + 47) = v80;
LABEL_164:
              if (!*((_DWORD *)handle + 46)) {
                *((_DWORD *)handle + 46) = 2;
              }
              nw_protocol_connected(default_input_handler, (uint64_t)a1);
              if ((handle[276] & 0x10) == 0)
              {
                if (*((_BYTE *)v6 + 1537))
                {
                  v81 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
                  {
                    v82 = *((void *)handle + 11);
                    if (v82) {
                      v83 = *(_DWORD *)(v82 + 460);
                    }
                    else {
                      v83 = -1;
                    }
                    v97 = (nw_protocol_identifier *)*((void *)handle + 8);
                    *(_DWORD *)buf = 136448002;
                    v101 = "nw_protocol_webtransport_http3_stream_connected";
                    v102 = 2082;
                    v103 = (char *)(handle + 192);
                    v104 = 2080;
                    v105 = " ";
                    v106 = 1024;
                    v107 = v83;
                    v108 = 2048;
                    v109 = (uint64_t)v97;
                    v110 = 2048;
                    v111 = a1;
                    v112 = 2048;
                    v113 = v97;
                    v114 = 2048;
                    v115 = a2;
                    v45 = "%{public}s %{public}s%s<i%u:s%lld> webtransport http3 stream %p with id %llu connected with output_handler %p";
                    v46 = v81;
                    v47 = OS_LOG_TYPE_DEBUG;
                    v48 = 78;
                    goto LABEL_178;
                  }
                }
              }

              return;
            }

            *(void *)(v68 + 424) = handle;
          }

          else
          {
            no_lock = *(void *)(v68 + 184);
            if (!no_lock)
            {
              no_lock = nw_hash_table_create_no_lock( 0x11u,  0,  (const void *(*)(const void *, unsigned int *))nw_webtransport_stream_get_key,  (unsigned int (*)(const void *, unsigned int))nw_webtransport_stream_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_webtransport_stream_matches_key,  0LL);
              *(void *)(v68 + 184) = no_lock;
            }

            type = OS_LOG_TYPE_DEFAULT;
            nw_hash_table_add_object(no_lock, (uint64_t)handle, (char *)&type);
            if (type == OS_LOG_TYPE_DEFAULT)
            {
              if ((*(_BYTE *)(v68 + 548) & 2) != 0) {
                goto LABEL_157;
              }
              v76 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
                goto LABEL_157;
              }
              v77 = *(_DWORD *)(v68 + 460);
              v78 = *((void *)handle + 8);
              *(_DWORD *)buf = 136447234;
              v101 = "nw_webtransport_session_add_stream";
              v102 = 2082;
              v103 = (char *)(v68 + 464);
              v104 = 2080;
              v105 = " ";
              v106 = 1024;
              v107 = v77;
              v108 = 2048;
              v109 = v78;
              v71 = "%{public}s %{public}s%s<i%u> WebTransport already has stream id registered for %llu";
              v72 = v76;
              v73 = OS_LOG_TYPE_ERROR;
LABEL_152:
              v74 = 48;
              goto LABEL_153;
            }
          }

          if ((*(_BYTE *)(v68 + 548) & 2) != 0) {
            goto LABEL_157;
          }
          if (!gLogDatapath) {
            goto LABEL_157;
          }
          v92 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_157;
          }
          v93 = *(_DWORD *)(v68 + 460);
          v94 = *((void *)handle + 8);
          *(_DWORD *)buf = 136447234;
          v101 = "nw_webtransport_session_add_stream";
          v102 = 2082;
          v103 = (char *)(v68 + 464);
          v104 = 2080;
          v105 = " ";
          v106 = 1024;
          v107 = v93;
          v108 = 2048;
          v109 = v94;
          v71 = "%{public}s %{public}s%s<i%u> Added stream %llu to WebTransport streams";
          v72 = v92;
          v73 = OS_LOG_TYPE_DEBUG;
          goto LABEL_152;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v101 = "nw_webtransport_session_add_stream";
        v88 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v98 = 0;
        if (__nwlog_fault(v88, &type, &v98))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v89 = (os_log_s *)__nwlog_obj();
            v90 = type;
            if (os_log_type_enabled(v89, type))
            {
              *(_DWORD *)buf = 136446210;
              v101 = "nw_webtransport_session_add_stream";
              v91 = "%{public}s called with null webtransport_session";
LABEL_196:
              _os_log_impl(&dword_181A5C000, v89, v90, v91, buf, 0xCu);
            }
          }

          else if (v98)
          {
            v95 = (char *)__nw_create_backtrace_string();
            v89 = (os_log_s *)__nwlog_obj();
            v90 = type;
            v96 = os_log_type_enabled(v89, type);
            if (v95)
            {
              if (v96)
              {
                *(_DWORD *)buf = 136446466;
                v101 = "nw_webtransport_session_add_stream";
                v102 = 2082;
                v103 = v95;
                _os_log_impl( &dword_181A5C000,  v89,  v90,  "%{public}s called with null webtransport_session, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v95);
              goto LABEL_197;
            }

            if (v96)
            {
              *(_DWORD *)buf = 136446210;
              v101 = "nw_webtransport_session_add_stream";
              v91 = "%{public}s called with null webtransport_session, no backtrace";
              goto LABEL_196;
            }
          }

          else
          {
            v89 = (os_log_s *)__nwlog_obj();
            v90 = type;
            if (os_log_type_enabled(v89, type))
            {
              *(_DWORD *)buf = 136446210;
              v101 = "nw_webtransport_session_add_stream";
              v91 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
              goto LABEL_196;
            }
          }
        }

  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v107 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v108 = *(void *)(v11 + 256);
      v109 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
      if (v108) {
        LODWORD(v108) = *(_DWORD *)(v108 + 860);
      }
      v110 = *(_DWORD *)(v11 + 424);
      *(_DWORD *)buf = 136448258;
      *(void *)&buf[4] = "nw_http1_start_new_connection_for_stream";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      v268 = (uint64_t)" ";
      v269 = 1024;
      *(_DWORD *)v270 = v109;
      *(_WORD *)&v270[4] = 1024;
      *(_DWORD *)&v270[6] = v108;
      LOWORD(v271) = 1024;
      *(_DWORD *)((char *)&v271 + 2) = v110;
      HIWORD(v271) = 2048;
      *(void *)v272 = v16;
      *(_WORD *)&v272[8] = 1024;
      *(_DWORD *)v273 = v110;
      *(_WORD *)&v273[4] = 2048;
      *(void *)&v273[6] = v11;
      _os_log_impl( &dword_181A5C000,  v107,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
    }
  }

  nw_http_transaction_metadata_set_first_on_connection(*(void **)(v11 + 352));
  v111 = nw_protocol_copy_info((uint64_t)v13, 255);
  v112 = (void *)v111;
  if (v111 && (v113 = *(void *)(v111 + 24), *(void *)(v111 + 16) != v113) && (v114 = *(void **)(v113 - 8)) != 0LL)
  {
    v115 = (nw_protocol_metadata *)os_retain(v114);
    v116 = v115;
    if (v115 && nw_protocol_metadata_is_tls(v115))
    {
      v116 = v116;
      nw_http_connection_metadata_set_sec_metadata(*((void **)v16 + 96), v116);
      os_release(v116);
      nw_protocol_connect((uint64_t)v13, (uint64_t)v16);
LABEL_171:
      os_release(v116);
      goto LABEL_172;
    }
  }

  else
  {
    v116 = 0LL;
  }

  if (v16)
  {
    nw_protocol_connect((uint64_t)v13, (uint64_t)v16);
    if (!v116) {
      goto LABEL_172;
    }
    goto LABEL_171;
  }

  v188 = v4;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http1_get_output_protocol";
  v189 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(aBlock[0]) = 0;
  if (__nwlog_fault(v189, type, aBlock))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v190 = (os_log_s *)__nwlog_obj();
      v191 = type[0];
      if (!os_log_type_enabled(v190, type[0])) {
        goto LABEL_460;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_get_output_protocol";
      v192 = "%{public}s called with null connection";
LABEL_459:
      _os_log_impl(&dword_181A5C000, v190, v191, v192, buf, 0xCu);
      goto LABEL_460;
    }

    if (!LOBYTE(aBlock[0]))
    {
      v190 = (os_log_s *)__nwlog_obj();
      v191 = type[0];
      if (!os_log_type_enabled(v190, type[0])) {
        goto LABEL_460;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_get_output_protocol";
      v192 = "%{public}s called with null connection, backtrace limit exceeded";
      goto LABEL_459;
    }

    v226 = (char *)__nw_create_backtrace_string();
    v190 = (os_log_s *)__nwlog_obj();
    v191 = type[0];
    v227 = os_log_type_enabled(v190, type[0]);
    if (!v226)
    {
      if (!v227) {
        goto LABEL_460;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_get_output_protocol";
      v192 = "%{public}s called with null connection, no backtrace";
      goto LABEL_459;
    }

    if (v227)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_http1_get_output_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v226;
      _os_log_impl( &dword_181A5C000,  v190,  v191,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v226);
  }

  if (v15) {
    free(v15);
  }
}

              goto LABEL_158;
            }

            if (!v87)
            {
              __nwlog_obj();
              v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v79 = v88;
              if (os_log_type_enabled(v46, v88))
              {
                *(_DWORD *)type = 136446722;
                v94 = "-[nw_listener_inbox_socket start]";
                v95 = 1024;
                v96 = sockfd_from_client;
                v97 = 1024;
                *(_DWORD *)v98 = v44;
                _os_log_impl( &dword_181A5C000,  v46,  v79,  "%{public}s getsockopt(%d, IP_BOUND_IF) failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)type,  0x18u);
              }

              goto LABEL_157;
            }

            v26 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v75 = v88;
            v76 = os_log_type_enabled(v46, v88);
            if (!v26)
            {
              if (v76)
              {
                *(_DWORD *)type = 136446722;
                v94 = "-[nw_listener_inbox_socket start]";
                v95 = 1024;
                v96 = sockfd_from_client;
                v97 = 1024;
                *(_DWORD *)v98 = v44;
                _os_log_impl( &dword_181A5C000,  v46,  v75,  "%{public}s getsockopt(%d, IP_BOUND_IF) failed %{darwin.errno}d, no backtrace",  (uint8_t *)type,  0x18u);
              }

              goto LABEL_157;
            }

            if (v76)
            {
              *(_DWORD *)type = 136446978;
              v94 = "-[nw_listener_inbox_socket start]";
              v95 = 1024;
              v96 = sockfd_from_client;
              v97 = 1024;
              *(_DWORD *)v98 = v44;
              *(_WORD *)&v98[4] = 2082;
              *(void *)&v98[6] = v26;
              _os_log_impl( &dword_181A5C000,  v46,  v75,  "%{public}s getsockopt(%d, IP_BOUND_IF) failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)type,  0x22u);
            }

    free(backtrace_string);
    goto LABEL_306;
  }

  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = v2;
  *(void *)&buf[16] = __nw_http_alt_svc_options_set_assumes_http3_capable_block_invoke;
  *(void *)&v434 = &__block_descriptor_33_e9_B16__0_v8l;
  BYTE8(v434) = v25;
  nw_protocol_options_access_handle(v27, buf);
  v30 = protocol;
LABEL_21:

  nw_protocol_stack_prepend_application_protocol(stack, protocol);
  if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_56_74791);
  }
  v31 = nw_protocol_create_options((void *)nw_protocol_copy_http_client_bottom_definition_definition);
  nw_protocol_stack_prepend_application_protocol(stack, (nw_protocol_options_t)v31);

  v32 = *(void *)(a1 + 40);
  if (!v32) {
    goto LABEL_109;
  }
  v33 = *(void *)(v32 + 24);
  if (!v33 || !*(_BYTE *)(v33 + 20))
  {
    if (*(void *)(v32 + 32)) {
      v79 = (const void *)CFURLRequestCopyHTTPCookieStorage();
    }
    else {
      v79 = 0LL;
    }
    objc_msgSend(MEMORY[0x189601E98], "sharedHTTPCookieStorage", v388, v389);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = v92;
    if (v79)
    {
      if (v79 != (const void *)[v92 _cookieStorage])
      {
        v94 = (void *)[objc_alloc(MEMORY[0x189601E98]) _initWithCFHTTPCookieStorage:v79];
        CFRelease(v79);
        v95 = v94;
        v96 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_http_cookie_storage);
        cookieStorage = v96->cookieStorage;
        v96->cookieStorage = v95;

        goto LABEL_108;
      }

      CFRelease(v79);
    }

    v98 = *(void *)(v32 + 24);
    if (!v98) {
      goto LABEL_726;
    }
    v99 = (NSHTTPCookieStorage *)*(id *)(v98 + 400);
    v95 = v99;
    if (v99)
    {
      isa = v99[3].super.isa;
      if (!isa)
      {
        v101 = -[objc_class HTTPCookieStorage](v99[6].super.isa, "HTTPCookieStorage");
        v102 = v101;
        if (v101)
        {
          v103 = v101;
          v104 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_http_cookie_storage);
          v105 = v104->cookieStorage;
          v104->cookieStorage = v103;

          v106 = v95[3].super.isa;
          v95[3].super.isa = (Class)v104;
        }

        isa = v95[3].super.isa;
      }

      v96 = isa;
    }

    else
    {
      v96 = 0LL;
    }

    goto LABEL_108;
  }

  v34 = (NWConcrete_nw_http_cookie_storage *)*(id *)(v33 + 432);
  if (!v34) {
    goto LABEL_109;
  }
LABEL_27:
  v404 = v34;
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
  }
  v35 = nw_protocol_create_options((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition);
  nw_http_cookie_options_set_cookie_storage(v35, v404);
  v36 = *(void *)(a1 + 40);
  if (!v36)
  {
    v47 = 0LL;
    v37 = 0LL;
    goto LABEL_47;
  }

  [*(id *)(v36 + 24) _cookieTransformCallback];
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    v38 = v35;
    v39 = v37;
    if (v38)
    {
      v40 = v38;
      v41 = v40[1];

      if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
      }
      v42 = nw_protocol_definition_is_equal_unsafe( (uint64_t)v41,  nw_protocol_copy_http_cookie_definition_http_cookie_definition);

      if (v42)
      {
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = v2;
        *(void *)&buf[16] = __nw_http_cookie_options_set_transform_callback_block_invoke;
        *(void *)&v434 = &unk_189BC6110;
        *((void *)&v434 + 1) = v39;
        nw_protocol_options_access_handle(v40, buf);

LABEL_36:
        goto LABEL_37;
      }

      __nwlog_obj();
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
      LODWORD(v389) = 12;
      v388 = buf;
      v141 = (char *)_os_log_send_and_compose_impl();

      v427 = OS_LOG_TYPE_ERROR;
      v426 = 0;
      if (v427 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v157 = v427;
        if (os_log_type_enabled(v142, v427))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
          _os_log_impl(&dword_181A5C000, v142, v157, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
      }

      else if (v426)
      {
        v188 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v189 = v427;
        v190 = os_log_type_enabled(v142, v427);
        if (v188)
        {
          if (v190)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v188;
            _os_log_impl( &dword_181A5C000,  v142,  v189,  "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v188);
          if (!v141) {
            goto LABEL_36;
          }
          goto LABEL_371;
        }

        if (v190)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
          _os_log_impl( &dword_181A5C000,  v142,  v189,  "%{public}s protocol options are not http_cookie, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v230 = v427;
        if (os_log_type_enabled(v142, v427))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
          _os_log_impl( &dword_181A5C000,  v142,  v230,  "%{public}s protocol options are not http_cookie, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    else
    {
      __nwlog_obj();
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
      LODWORD(v389) = 12;
      v388 = buf;
      v141 = (char *)_os_log_send_and_compose_impl();

      v427 = OS_LOG_TYPE_ERROR;
      v426 = 0;
      if (v427 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v143 = v427;
        if (os_log_type_enabled(v142, v427))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
          _os_log_impl(&dword_181A5C000, v142, v143, "%{public}s called with null options", buf, 0xCu);
        }
      }

      else if (v426)
      {
        v176 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v177 = v427;
        v178 = os_log_type_enabled(v142, v427);
        if (v176)
        {
          if (v178)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v176;
            _os_log_impl( &dword_181A5C000,  v142,  v177,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v176);
LABEL_370:
          if (!v141) {
            goto LABEL_36;
          }
LABEL_371:
          free(v141);
          goto LABEL_36;
        }

        if (v178)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
          _os_log_impl(&dword_181A5C000, v142, v177, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v226 = v427;
        if (os_log_type_enabled(v142, v427))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_cookie_options_set_transform_callback";
          _os_log_impl( &dword_181A5C000,  v142,  v226,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_370;
  }

      free(v118);
    }
  }

                      nw::release_if_needed<nw_protocol *>((uint64_t *)v347);
                      goto LABEL_158;
                    }
                  }

                  else
                  {
                    __nwlog_obj();
                    v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446466;
                      v355 = "nw_protocol_utilities_add_input_handler";
                      v356 = 2048;
                      v357 = (char *)internal;
                      _os_log_impl( &dword_181A5C000,  v111,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
                    }
                  }

      if (!v64) {
        return 4294966394LL;
      }
      v38 = (char *)v64;
      goto LABEL_68;
    }

    if (!v85)
    {
      v65 = (os_log_s *)__nwlog_obj();
      v66 = type[0];
      if (os_log_type_enabled(v65, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "on_frame_send_callback";
        v67 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
        goto LABEL_156;
      }

      goto LABEL_157;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v65 = (os_log_s *)__nwlog_obj();
    v66 = type[0];
    v69 = os_log_type_enabled(v65, type[0]);
    if (!backtrace_string)
    {
      if (v69)
      {
        *(_DWORD *)buf = 136446210;
        v87 = "on_frame_send_callback";
        v67 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
        goto LABEL_156;
      }

      goto LABEL_157;
    }

    if (v69) {
      goto LABEL_142;
    }
    goto LABEL_143;
  }

  if (!*(void *)(a3 + 160))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v17 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    v87 = "on_frame_send_callback";
    v88 = 2082;
    *(void *)v89 = a3 + 390;
    *(_WORD *)&v89[8] = 2080;
    *(void *)v90 = " ";
    *(_WORD *)&v90[8] = 1024;
    *(_DWORD *)v91 = v17;
    v18 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v85 = 0;
    if (__nwlog_fault(v18, type, &v85))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v19 = (os_log_s *)gconnectionLogObj;
        v20 = type[0];
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
        {
          v21 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136446978;
          v87 = "on_frame_send_callback";
          v88 = 2082;
          *(void *)v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)v91 = v21;
          v22 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection";
LABEL_65:
          _os_log_impl(&dword_181A5C000, v19, v20, v22, buf, 0x26u);
        }
      }

      else if (v85)
      {
        v30 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v19 = (os_log_s *)gconnectionLogObj;
        v20 = type[0];
        v31 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
        if (!v30)
        {
          if (!v31) {
            goto LABEL_66;
          }
          v37 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136446978;
          v87 = "on_frame_send_callback";
          v88 = 2082;
          *(void *)v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)v91 = v37;
          v22 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, no backtrace";
          goto LABEL_65;
        }

        if (v31)
        {
          v32 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136447234;
          v87 = "on_frame_send_callback";
          v88 = 2082;
          *(void *)v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)v91 = v32;
          *(_WORD *)&v91[4] = 2082;
          *(void *)&v91[6] = v30;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s",  buf,  0x30u);
        }

        free(v30);
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v19 = (os_log_s *)gconnectionLogObj;
        v20 = type[0];
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
        {
          v36 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136446978;
          v87 = "on_frame_send_callback";
          v88 = 2082;
          *(void *)v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)v91 = v36;
          v22 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, backtrace limit exceeded";
          goto LABEL_65;
        }
      }
    }

void sub_181B8E3A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL nw_flow_has_final_read(nw_flow_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_flow_has_final_read";
    v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_has_final_read";
        v7 = "%{public}s called with null flow_protocol";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_flow_has_final_read";
            __int16 v14 = 2082;
            v15 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null flow_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_has_final_read";
        v7 = "%{public}s called with null flow_protocol, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_has_final_read";
        v7 = "%{public}s called with null flow_protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_read_request_list_append(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    char v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_read_request_list_append";
    v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v11, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null request", buf, 0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "nw_read_request_list_append";
            __int16 v34 = 2082;
            v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s called with null request, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }

        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_181A5C000, v12, v27, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_read_request_list_append";
          _os_log_impl( &dword_181A5C000,  v12,  v29,  "%{public}s called with null request, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_read_request_get_next_max_size(void *a1)
{
  id v1 = a1;
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = 0xFFFFFFFFLL;
  while (1)
  {
    v4 = (char *)v2;
    v5 = v4;
    if ((v4[176] & 1) != 0) {
      goto LABEL_4;
    }
    int v6 = *((_DWORD *)v4 + 17);
    if ((v6 - 1) >= 2)
    {
      if (v6 == 3)
      {
        if (*((void *)v4 + 10) > *((void *)v4 + 11)) {
          goto LABEL_16;
        }
        goto LABEL_4;
      }

      if (v6 != 4) {
        goto LABEL_4;
      }
    }

    unint64_t v7 = *((void *)v4 + 10);
    unint64_t v8 = *((void *)v4 + 11);
    BOOL v9 = v7 >= v8;
    uint64_t v10 = v7 - v8;
    if (v10 != 0 && v9) {
      break;
    }
    if (*(_OWORD *)(v4 + 72) == 0LL)
    {
      uint64_t v3 = 0LL;
      goto LABEL_16;
    }

BOOL nw_read_request_is_metadata_only(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_read_request_is_metadata_only";
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v6, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v16 = "nw_read_request_is_metadata_only";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null request", buf, 0xCu);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v16 = "nw_read_request_is_metadata_only";
            __int16 v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null request, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v16 = "nw_read_request_is_metadata_only";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v16 = "nw_read_request_is_metadata_only";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null request, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_flow_passthrough_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_input_frames";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_input_frames";
        v15 = "%{public}s called with null protocol";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v18 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_flow_passthrough_get_input_frames";
          __int16 v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v12) {
          return 0LL;
        }
LABEL_39:
        free(v12);
        return 0LL;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_input_frames";
        v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_input_frames";
        v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
    }

BOOL nw_flow_process_input_frames( NWConcrete_nw_endpoint_handler *a1, NWConcrete_nw_endpoint_flow *a2, nw_protocol *a3, nw_frame_array_s *a4, int a5, char a6, int a7)
{
  uint64_t v285 = *MEMORY[0x1895F89C0];
  v229 = a1;
  v248 = a2;
  handle = (char *)a3->handle;
  v225 = a4;
  tqh_first = a4->tqh_first;
  v251 = handle;
  if (!a4->tqh_first)
  {
    if ((*((_WORD *)handle + 166) & 0x10) == 0) {
      goto LABEL_361;
    }
    BOOL v28 = (void *)*((void *)handle + 33);
    if (!v28)
    {
      uint64_t v187 = *((void *)handle + 32);
      if (v187 && nw_dictionary_get_count(v187))
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        v273 = __Block_byref_object_copy__16468;
        *(void *)v274 = __Block_byref_object_dispose__16469;
        *(void *)&v274[8] = 0LL;
        uint64_t v188 = *((void *)handle + 32);
        v269[0] = MEMORY[0x1895F87A8];
        v269[1] = 3221225472LL;
        v269[2] = ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke;
        v269[3] = &unk_189BB8468;
        v269[4] = buf;
        v269[5] = out;
        nw_dictionary_apply(v188, (uint64_t)v269);
        nw_dictionary_set_value(*((void *)handle + 32), out, 0LL);

        if (nw_content_context_get_is_final(*(nw_content_context_t *)(*(void *)&buf[8] + 40LL))) {
          *((_WORD *)handle + 166) |= 0x80u;
        }
        _Block_object_dispose(buf, 8);
      }

      else
      {

        *((_WORD *)handle + 166) |= 0x80u;
      }

      goto LABEL_342;
    }

    id v29 = v28;
    char v30 = (void *)*((void *)handle + 33);
    *((void *)handle + 33) = 0LL;

    v31 = v29;
    v32 = v31;
    if (v31 == (_BYTE *)&__block_literal_global_41831 || v31 == (_BYTE *)&__block_literal_global_5_41854)
    {

      goto LABEL_342;
    }

    if (v31 == (_BYTE *)&__block_literal_global_3_41839 || v31 == (_BYTE *)&__block_literal_global_4)
    {
    }

    else
    {
      char v35 = v31[118];

      if ((v35 & 1) == 0)
      {
LABEL_38:

LABEL_342:
        request_list_report = nw_read_request_list_report(*((void **)handle + 27));
        v199 = (dispatch_data_s *)*((void *)handle + 27);
        *((void *)handle + 27) = request_list_report;
        goto LABEL_360;
      }
    }

    *((_WORD *)handle + 166) |= 0x80u;
    goto LABEL_38;
  }

  BOOL is_inline = nw_context_is_inline(*((void **)handle + 23));
  BOOL v11 = a4->tqh_first;
  id v12 = v11;
  BOOL v268 = 0LL;
  char v13 = (void *)*((void *)handle + 27);
  if (v13) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14 || (*((_WORD *)v11 + 102) & 1) != 0)
  {
LABEL_19:
    LODWORD(v16) = 0;
    uint64_t alloc = 0LL;
    goto LABEL_20;
  }

  uint64_t alloc = 0LL;
  LODWORD(v16) = 0;
  if (!*((void *)v11 + 13) && (a5 & 1) == 0)
  {
    __int16 v17 = v13;
    int v18 = v17[17];

    if (v18 != 3)
    {
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)a4, 1, buf);
      unsigned int v19 = *(_DWORD *)buf;
      unsigned int next_max_size = nw_read_request_get_next_max_size(*((void **)handle + 27));
      if (next_max_size)
      {
        if (v19 >= next_max_size) {
          size_t v16 = next_max_size;
        }
        else {
          size_t v16 = v19;
        }
        if (is_inline) {
          goto LABEL_18;
        }
        uint64_t buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(*((void **)handle + 23), v16);
        if (!buffer_manager_with_context) {
          goto LABEL_18;
        }
        uint64_t v22 = buffer_manager_with_context;
        BOOL v23 = nw_mem_buffer_allocate(buffer_manager_with_context);
        BOOL v268 = v23;
        if (!v23) {
          goto LABEL_18;
        }
        v24 = (const void *)v23;
        BOOL v25 = nw_queue_copy_current_workloop();
        destructor[0] = MEMORY[0x1895F87A8];
        destructor[1] = 3221225472LL;
        destructor[2] = ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_2;
        destructor[3] = &__block_descriptor_48_e5_v8__0l;
        destructor[4] = v22;
        destructor[5] = v268;
        uint64_t alloc = (uint64_t)dispatch_data_create(v24, v16, (dispatch_queue_t)v25, destructor);

        handle = v251;
        if (!alloc) {
LABEL_18:
        }
          uint64_t alloc = dispatch_data_create_alloc();
        goto LABEL_20;
      }
    }

    goto LABEL_19;
  }

LABEL_218:
        }
      }

      v44 = v63;
      if (v121) {
        goto LABEL_262;
      }
      goto LABEL_263;
    }

    if (nw_frame_buffer_used_malloc(v37)
      && (char *)nw_frame_get_buffer(v37, 0LL) == buffer
      && !v64
      && (_DWORD)v73 == v249)
    {
      v76 = dispatch_data_create(buffer, size, 0LL, v221);
      v77 = v76;
      if (data1 && v76)
      {
        v78 = data1;
        dispatch_data_t concat = dispatch_data_create_concat(data1, v76);
      }

      else
      {
        dispatch_data_t concat = v76;
        v78 = data1;
      }

      nw_frame_will_free_buffer_externally(v37);
      goto LABEL_149;
    }

    if (nw_frame_buffer_used_manager(v37)
      && (char *)nw_frame_get_buffer(v37, 0LL) == buffer
      && !v64
      && (_DWORD)v73 == v249)
    {
      uint64_t finalizer_context = nw_frame_get_finalizer_context(v37);
      char v81 = is_inline;
      if (!finalizer_context) {
        char v81 = 1;
      }
      if ((v81 & 1) == 0)
      {
        uint64_t manager = nw_frame_buffer_get_manager(v37);
        nw_frame_will_free_buffer_externally(v37);
        BOOL v93 = nw_queue_copy_current_workloop();
        v262[0] = MEMORY[0x1895F87A8];
        v262[1] = 3221225472LL;
        v262[2] = ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_81;
        v262[3] = &__block_descriptor_48_e5_v8__0l;
        v262[4] = manager;
        v262[5] = buffer;
        v94 = dispatch_data_create(buffer, size, (dispatch_queue_t)v93, v262);

        if (data1 && v94)
        {
          v95 = data1;
          dispatch_data_t concat = dispatch_data_create_concat(data1, v94);
        }

        else
        {
          dispatch_data_t concat = v94;
          v95 = data1;
        }

LABEL_149:
        unint64_t v75 = size;
        goto LABEL_150;
      }
    }

    if (v64 || (_DWORD)v73 != v249)
    {
      v83 = &buffer[v64];
      if (!data1)
      {
        *(void *)buf = 0LL;
        data1 = (dispatch_data_s *)dispatch_data_create_alloc();
        memcpy(*(void **)buf, v83, v73);
        unint64_t v75 = v73;
        dispatch_data_t v74 = 0LL;
        goto LABEL_152;
      }

      *(void *)buf = 0LL;
      v84 = (dispatch_data_s *)dispatch_data_create_alloc();
      memcpy(*(void **)buf, v83, v73);
      dispatch_data_t concat = dispatch_data_create_concat(data1, v84);

      unint64_t v75 = v73;
LABEL_150:
      data1 = concat;
      goto LABEL_151;
    }

    if (is_inline)
    {
      size_t v82 = size;
      goto LABEL_135;
    }

    uint64_t v85 = nw_frame_get_buffer_manager_with_context(*((void **)handle + 23), v249);
    size_t v82 = size;
    if (v85)
    {
      uint64_t v86 = v85;
      BOOL v87 = nw_mem_buffer_allocate(v85);
      *(void *)buf = v87;
      if (v87)
      {
        v88 = (const void *)v87;
        BOOL v89 = nw_queue_copy_current_workloop();
        v261[0] = MEMORY[0x1895F87A8];
        v261[1] = 3221225472LL;
        v261[2] = ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_2_82;
        v261[3] = &__block_descriptor_48_e5_v8__0l;
        v261[4] = v86;
        v261[5] = *(void *)buf;
        v90 = dispatch_data_create(v88, size, (dispatch_queue_t)v89, v261);

        size_t v82 = size;
        goto LABEL_137;
      }
    }

    else
    {
LABEL_135:
      *(void *)buf = 0LL;
    }

    v90 = (dispatch_data_s *)dispatch_data_create_alloc();
LABEL_137:
    memcpy(*(void **)buf, buffer, v82);
    if (data1)
    {
      dispatch_data_t v91 = dispatch_data_create_concat(data1, v90);

      data1 = v91;
    }

    else
    {
      data1 = v90;
    }

    unint64_t v75 = size;
LABEL_151:
    dispatch_data_t v74 = 0LL;
    handle = v251;
    v44 = v63;
LABEL_152:
    v248->received_application_byte_count += v75;
    if ((*((_BYTE *)v248 + 34) & 0x20) == 0) {
      nw_context_count_input_bytes(*((void **)handle + 23), v75);
    }
    v64 += v73;
    v252 += v73;
    if (v74)
    {
      unsigned int v41 = v249;
      if (v246 && v252 < v238) {
        goto LABEL_234;
      }
LABEL_161:
      if (v243) {
        BOOL v97 = v64 >= v41;
      }
      else {
        BOOL v97 = 0;
      }
      int v98 = v97;
      if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v229) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v110 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
        {
          v111 = nw_endpoint_handler_get_id_string(v229);
          v112 = nw_endpoint_handler_dry_run_string(v229);
          nw_endpoint_t v113 = nw_endpoint_handler_copy_endpoint(v229);
          v114 = nw_endpoint_get_logging_description(v113);
          loga = nw_endpoint_handler_state_string(v229);
          v218 = nw_endpoint_handler_mode_string(v229);
          id v115 = nw_endpoint_handler_copy_current_path(v229);
          *(_DWORD *)buf = 136448770;
          *(void *)&uint8_t buf[4] = "nw_flow_process_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v111;
          *(_WORD *)&buf[22] = 2082;
          v273 = (uint64_t (*)(uint64_t, uint64_t))v112;
          *(_WORD *)v274 = 2082;
          *(void *)&v274[2] = v114;
          *(_WORD *)&v274[10] = 2082;
          *(void *)&v274[12] = loga;
          __int16 v275 = 2082;
          v276 = v218;
          __int16 v277 = 2114;
          id v278 = v115;
          __int16 v279 = 1024;
          *(_DWORD *)v280 = v98;
          *(_WORD *)&v280[4] = 1024;
          *(_DWORD *)&v280[6] = v243;
          *(_WORD *)&v280[10] = 1024;
          *(_DWORD *)&v280[12] = v64;
          *(_WORD *)&v280[16] = 1024;
          *(_DWORD *)&v280[18] = v249;
          _os_log_impl( &dword_181A5C000,  v110,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] mark_complete: %u, context_ complete: %u, amount_read: %u, frame_length: %u",  buf,  0x60u);
        }

        dispatch_data_t v74 = data;
        handle = v251;
        v44 = v63;
      }

      v99 = (void *)*((void *)handle + 40);
      if (v99 && (*((_BYTE *)v248 + 36) & 1) != 0)
      {
        *((void *)handle + 40) = 0LL;

        v100 = v248->last_error;
        v248->last_error = 0LL;

        *((_BYTE *)v248 + 36) &= ~1u;
        dispatch_data_t v74 = data;
        handle = v251;
        v44 = v63;
      }

      if (v74)
      {
        request_receive = nw_read_request_receive(*((void **)handle + 27), v74, v44, v98, *((void **)handle + 40));
        goto LABEL_173;
      }

      if (data1)
      {
        request_receive = nw_read_request_receive(*((void **)handle + 27), data1, v44, v98, *((void **)handle + 40));
        dispatch_data_t v74 = data1;
        data1 = 0LL;
LABEL_173:

        handle = v251;
        v44 = v63;
      }

      else
      {
        data1 = 0LL;
      }

      if (v44) {
        int v102 = v98;
      }
      else {
        int v102 = 0;
      }
      if (v102 == 1)
      {
        v103 = v44;
        if (v231)
        {

          handle = v251;
          v44 = v63;
        }

        else if (v230)
        {

          handle = v251;
          v44 = v63;
LABEL_183:
          *((_WORD *)handle + 166) |= 0x80u;
        }

        else
        {
          BOOL v104 = (*((_BYTE *)v44 + 118) & 1) == 0;

          handle = v251;
          v44 = v63;
          if (!v104) {
            goto LABEL_183;
          }
        }
      }

      dispatch_data_t data = 0LL;
      v62 = (void *)*((void *)handle + 27);
      if (!v62) {
        goto LABEL_233;
      }
      unsigned int v41 = v249;
      if (v64 >= v249) {
        goto LABEL_234;
      }
      continue;
    }

    break;
  }

  int v96 = v227;
  if (v72 >= v71) {
    int v96 = 1;
  }
  unsigned int v41 = v249;
  if (v96 == 1) {
    goto LABEL_161;
  }
  dispatch_data_t data = 0LL;
  if (v64 >= v249) {
    goto LABEL_235;
  }
LABEL_305:
  char v171 = nw_endpoint_handler_get_logging_disabled(v229);
  if (v44)
  {
    if ((v171 & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v173 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG))
      {
        v174 = nw_endpoint_handler_get_id_string(v229);
        v175 = nw_endpoint_handler_dry_run_string(v229);
        nw_endpoint_t v253 = nw_endpoint_handler_copy_endpoint(v229);
        v176 = nw_endpoint_get_logging_description(v253);
        v177 = nw_endpoint_handler_state_string(v229);
        v178 = nw_endpoint_handler_mode_string(v229);
        id v179 = nw_endpoint_handler_copy_current_path(v229);
        *(_DWORD *)buf = 136448514;
        *(void *)&uint8_t buf[4] = "nw_flow_process_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v174;
        *(_WORD *)&buf[22] = 2082;
        v273 = (uint64_t (*)(uint64_t, uint64_t))v175;
        *(_WORD *)v274 = 2082;
        *(void *)&v274[2] = v176;
        *(_WORD *)&v274[10] = 2082;
        *(void *)&v274[12] = v177;
        __int16 v275 = 2082;
        v276 = v178;
        __int16 v277 = 2114;
        id v278 = v179;
        __int16 v279 = 1024;
        *(_DWORD *)v280 = v64;
        *(_WORD *)&v280[4] = 1024;
        *(_DWORD *)&v280[6] = v249;
        *(_WORD *)&v280[10] = 2082;
        *(void *)&v280[12] = out;
        _os_log_impl( &dword_181A5C000,  v173,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Could not read entire frame(requests only took %u, had %u), saving for context %{public}s",  buf,  0x5Eu);
      }

      v44 = v63;
    }

    nw_frame_claim(v37, v172, v64, 0);
    if (a7)
    {
      do
      {
        v181 = (void *)(v37 + 32);
        v180 = *(void **)(v37 + 32);
        if (!v180 && !*(void *)(v37 + 40)) {
          v180 = 0LL;
        }
        id v182 = v180;

        if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v229) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v250 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v250, OS_LOG_TYPE_DEBUG))
          {
            v244 = nw_endpoint_handler_get_id_string(v229);
            bufferb = nw_endpoint_handler_dry_run_string(v229);
            nw_endpoint_t v237 = nw_endpoint_handler_copy_endpoint(v229);
            v239 = nw_endpoint_get_logging_description(v237);
            v235 = nw_endpoint_handler_state_string(v229);
            sizea = nw_endpoint_handler_mode_string(v229);
            id v247 = nw_endpoint_handler_copy_current_path(v229);
            int v186 = nw_frame_unclaimed_length((_DWORD *)v37);
            *(_DWORD *)buf = 136448514;
            *(void *)&uint8_t buf[4] = "nw_flow_process_input_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v244;
            *(_WORD *)&buf[22] = 2082;
            v273 = (uint64_t (*)(uint64_t, uint64_t))bufferb;
            *(_WORD *)v274 = 2082;
            *(void *)&v274[2] = v239;
            *(_WORD *)&v274[10] = 2082;
            *(void *)&v274[12] = v235;
            __int16 v275 = 2082;
            v276 = sizea;
            __int16 v277 = 2114;
            id v278 = v247;
            __int16 v279 = 2048;
            *(void *)v280 = v37;
            *(_WORD *)&v280[8] = 1024;
            *(_DWORD *)&v280[10] = v186;
            *(_WORD *)&v280[14] = 2082;
            *(void *)&v280[16] = out;
            _os_log_impl( &dword_181A5C000,  v250,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Saving frame %p of length %u for context %{public}s",  buf,  0x62u);
          }
        }

        uint64_t v183 = *(void *)(v37 + 32);
        v184 = *(nw_frame ***)(v37 + 40);
        if (v183)
        {
          *(void *)(v183 + 40) = v184;
          v184 = *(nw_frame ***)(v37 + 40);
        }

        else
        {
          v225->tqh_last = v184;
        }

        *v184 = (nw_frame *)v183;
        void *v181 = 0LL;
        *(void *)(v37 + 40) = 0LL;
        v185 = (uint64_t *)*((void *)v251 + 35);
        *(void *)(v37 + 40) = v185;
        uint64_t *v185 = v37;
        *((void *)v251 + 35) = v181;
        id v246 = v182;

        uint64_t v37 = (uint64_t)v246;
      }

      while (v246);
      id v246 = 0LL;
      v44 = v63;
    }
  }

  else
  {
    if ((v171 & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v189 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
      {
        v190 = nw_endpoint_handler_get_id_string(v229);
        v191 = nw_endpoint_handler_dry_run_string(v229);
        nw_endpoint_t v254 = nw_endpoint_handler_copy_endpoint(v229);
        v192 = nw_endpoint_get_logging_description(v254);
        v193 = nw_endpoint_handler_state_string(v229);
        v194 = nw_endpoint_handler_mode_string(v229);
        id v195 = nw_endpoint_handler_copy_current_path(v229);
        *(_DWORD *)buf = 136448258;
        *(void *)&uint8_t buf[4] = "nw_flow_process_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v190;
        *(_WORD *)&buf[22] = 2082;
        v273 = (uint64_t (*)(uint64_t, uint64_t))v191;
        *(_WORD *)v274 = 2082;
        *(void *)&v274[2] = v192;
        *(_WORD *)&v274[10] = 2082;
        *(void *)&v274[12] = v193;
        __int16 v275 = 2082;
        v276 = v194;
        __int16 v277 = 2114;
        id v278 = v195;
        __int16 v279 = 1024;
        *(_DWORD *)v280 = v64;
        *(_WORD *)&v280[4] = 1024;
        *(_DWORD *)&v280[6] = v249;
        _os_log_impl( &dword_181A5C000,  v189,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Could not read entire frame(requests only took %u, had %u)",  buf,  0x54u);
      }

      v44 = v63;
    }

    uint64_t v196 = *(void *)(v37 + 32);
    v197 = *(nw_frame ***)(v37 + 40);
    if (v196)
    {
      *(void *)(v196 + 40) = v197;
      v197 = *(nw_frame ***)(v37 + 40);
    }

    else
    {
      v225->tqh_last = v197;
    }

    *v197 = (nw_frame *)v196;
    void *v236 = 0LL;
    *(void *)(v37 + 40) = 0LL;
    nw_frame_finalize(v37);
  }

  handle = v251;
  v26 = (void *)*((void *)v251 + 27);
  id v12 = (id)v37;
LABEL_346:
  uint64_t alloc = (uint64_t)data;
LABEL_347:
  dispatch_data_t dataa = (dispatch_data_t)alloc;
  v200 = nw_read_request_list_report(v26);
  v201 = (void *)*((void *)handle + 27);
  *((void *)handle + 27) = v200;

  if (a7)
  {
    v202 = v225->tqh_first;
    if (v225->tqh_first)
    {
      *(void *)uuid_string_t out = 0LL;
      *(void *)&out[8] = out;
      *(_DWORD *)&out[24] = 0;
      *(void *)&out[16] = 0x2020000000LL;
      v257[0] = MEMORY[0x1895F87A8];
      v257[1] = 3221225472LL;
      v258 = ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_83;
      v259 = &unk_189BB84D8;
      v260 = out;
      do
      {
        if (!v202) {
          break;
        }
        v203 = (nw_frame *)*((void *)v202 + 4);
        char v204 = ((uint64_t (*)(void *))v258)(v257);
        v202 = v203;
      }

      while ((v204 & 1) != 0);
      if ((nw_endpoint_handler_get_logging_disabled(v229) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v205 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
        {
          v206 = nw_endpoint_handler_get_id_string(v229);
          v207 = nw_endpoint_handler_dry_run_string(v229);
          nw_endpoint_t v208 = nw_endpoint_handler_copy_endpoint(v229);
          v209 = nw_endpoint_get_logging_description(v208);
          v210 = nw_endpoint_handler_state_string(v229);
          v211 = nw_endpoint_handler_mode_string(v229);
          id v212 = nw_endpoint_handler_copy_current_path(v229);
          int v213 = *(_DWORD *)(*(void *)&out[8] + 24LL);
          *(_DWORD *)buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_flow_process_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v206;
          *(_WORD *)&buf[22] = 2082;
          v273 = (uint64_t (*)(uint64_t, uint64_t))v207;
          *(_WORD *)v274 = 2082;
          *(void *)&v274[2] = v209;
          *(_WORD *)&v274[10] = 2082;
          *(void *)&v274[12] = v210;
          __int16 v275 = 2082;
          v276 = v211;
          __int16 v277 = 2114;
          id v278 = v212;
          __int16 v279 = 1024;
          *(_DWORD *)v280 = v213;
          _os_log_impl( &dword_181A5C000,  v205,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to use %u frames, marking as failed",  buf,  0x4Eu);
        }
      }

      _Block_object_dispose(out, 8);
    }
  }

  v199 = data1;
LABEL_360:

LABEL_361:
  return tqh_first != 0LL;
}

      if (v62) {
        free(v62);
      }
      BOOL v28 = 22;
      goto LABEL_76;
    }

    if ((v14 & 4) != 0) {
      v15 = 18;
    }
    else {
      v15 = 66;
    }
    if (a2)
    {
      if ((*(_WORD *)(a2 + 204) & 0x100) != 0) {
        *(_BYTE *)(a2 + 203) |= v15;
      }
      else {
        *(_WORD *)(v13 + 94) = v14 & 0xFEFF;
      }
      goto LABEL_44;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v97 = "__nw_frame_add_internet_csum_flags";
    v46 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v94 = 0;
    if (__nwlog_fault(v46, &type, &v94))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v47 = (os_log_s *)__nwlog_obj();
        v48 = type;
        if (os_log_type_enabled(v47, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v97 = "__nw_frame_add_internet_csum_flags";
          v49 = "%{public}s called with null frame";
LABEL_183:
          _os_log_impl(&dword_181A5C000, v47, v48, v49, buf, 0xCu);
        }
      }

      else if (v94)
      {
        v66 = (char *)__nw_create_backtrace_string();
        v47 = (os_log_s *)__nwlog_obj();
        v48 = type;
        BOOL v67 = os_log_type_enabled(v47, type);
        if (v66)
        {
          if (v67)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v97 = "__nw_frame_add_internet_csum_flags";
            int v98 = 2082;
            v99 = v66;
            _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v66);
          goto LABEL_184;
        }

        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v97 = "__nw_frame_add_internet_csum_flags";
          v49 = "%{public}s called with null frame, no backtrace";
          goto LABEL_183;
        }
      }

      else
      {
        v47 = (os_log_s *)__nwlog_obj();
        v48 = type;
        if (os_log_type_enabled(v47, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v97 = "__nw_frame_add_internet_csum_flags";
          v49 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_183;
        }
      }
    }

        v33 = 0;
        goto LABEL_219;
      }

      BOOL v23 = nw_http_metadata_copy_request(*(void **)(v5 + 560));
      if (v23)
      {
        v24 = v23;
        if (v14 > 1)
        {
          if (status_code == 303)
          {
            __int16 v34 = v23;
            has_method = _nw_http_request_has_method((uint64_t)v34);

            if ((has_method & 1) == 0)
            {
              uint64_t v36 = v34;
              uint64_t v37 = _nw_http_request_has_method((uint64_t)v36);

              if ((v37 & 1) == 0) {
                goto LABEL_35;
              }
            }
          }
        }

        else
        {
          BOOL v25 = v23;
          v26 = _nw_http_request_has_method((uint64_t)v25);

          if ((v26 & 1) != 0)
          {
LABEL_35:
            *(_BYTE *)(v5 + 692) &= ~8u;
            BOOL v27 = 1;
            goto LABEL_47;
          }
        }

        BOOL v27 = 0;
LABEL_47:
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3802000000LL;
        dispatch_data_t v118 = __Block_byref_object_copy__12;
        v119 = __Block_byref_object_dispose__13;
        v38 = (nw_endpoint *)v100[5];
        if (v38)
        {
          uint64_t v39 = *(void **)(v5 + 560);
          if (v39)
          {
            *(void *)os_log_type_t type = 0LL;
            v111 = type;
            v112 = 0x3802000000LL;
            nw_endpoint_t v113 = __Block_byref_object_copy__32;
            v114 = __Block_byref_object_dispose__33;
            object = 0LL;
            v116 = -1;
            int v40 = nw_http_metadata_copy_request(v39);
            unsigned int v41 = v40;
            if (v27)
            {
              url = nw_endpoint_get_url(v38);
              uint64_t v43 = nw_http_request_create_from_url((uint64_t)"GET", (uint64_t)url);
              v44 = v111;
              id v45 = *((_BYTE *)v111 + 48);
              if ((v45 & 1) != 0)
              {
                v46 = (void *)*((void *)v111 + 5);
                if (v46)
                {
                  os_release(v46);
                  id v45 = *((_BYTE *)v44 + 48);
                }
              }

              *((void *)v44 + 5) = v43;
              *((_BYTE *)v44 + 48) = v45 | 1;
            }

            else
            {
              v109[0] = v16;
              v109[1] = 0x40000000LL;
              v109[2] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke;
              v109[3] = &unk_189BB5DD8;
              v109[4] = type;
              v109[5] = v38;
              nw_http_request_access_method(v40, v109);
            }

            v107[0] = 0LL;
            v107[1] = v107;
            v107[2] = 0x2000000000LL;
            v108 = 0;
            v106[0] = v16;
            v106[1] = 0x40000000LL;
            v106[2] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_2;
            v106[3] = &unk_189BB5E28;
            v106[4] = type;
            v106[5] = v107;
            nw_http_request_access_authority(v41, v106);
            *(void *)v122 = v16;
            *(void *)&v122[8] = 0x40000000LL;
            *(void *)&v122[16] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_4;
            os_log_type_t v123 = (const char *)&unk_189BB5E50;
            BOOL v127 = v27;
            BOOL v125 = type;
            v126 = v5;
            v124 = (os_log_type_t *)v107;
            nw_http_fields_enumerate(v41, v122);
            metadata_for_request = nw_http_create_metadata_for_request(*((void **)v111 + 5));
            _Block_object_dispose(v107, 8);
            if (v41) {
              os_release(v41);
            }
            _Block_object_dispose(type, 8);
            if ((v116 & 1) != 0 && object) {
              os_release(object);
            }
            goto LABEL_60;
          }

          __nwlog_obj();
          *(_DWORD *)v122 = 136446210;
          *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
          v84 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v109[0]) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v85 = (os_log_s *)__nwlog_obj();
            uint64_t v86 = type[0];
            if (os_log_type_enabled(v85, type[0]))
            {
              *(_DWORD *)v122 = 136446210;
              *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
              BOOL v87 = "%{public}s called with null orig_request_metadata";
              goto LABEL_208;
            }

            goto LABEL_210;
          }

          if (!LOBYTE(v109[0]))
          {
            uint64_t v85 = (os_log_s *)__nwlog_obj();
            uint64_t v86 = type[0];
            if (os_log_type_enabled(v85, type[0]))
            {
              *(_DWORD *)v122 = 136446210;
              *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
              BOOL v87 = "%{public}s called with null orig_request_metadata, backtrace limit exceeded";
              goto LABEL_208;
            }

            goto LABEL_210;
          }

          v90 = (char *)__nw_create_backtrace_string();
          v94 = (os_log_s *)__nwlog_obj();
          uint64_t v86 = type[0];
          log = v94;
          v95 = os_log_type_enabled(v94, type[0]);
          if (v90)
          {
            if (v95)
            {
              *(_DWORD *)v122 = 136446466;
              *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
              *(_WORD *)&v122[12] = 2082;
              *(void *)&v122[14] = v90;
              BOOL v93 = "%{public}s called with null orig_request_metadata, dumping backtrace:%{public}s";
              goto LABEL_200;
            }

            goto LABEL_201;
          }

          if (!v95) {
            goto LABEL_210;
          }
          *(_DWORD *)v122 = 136446210;
          *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
          BOOL v87 = "%{public}s called with null orig_request_metadata, no backtrace";
        }

        else
        {
          __nwlog_obj();
          *(_DWORD *)v122 = 136446210;
          *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
          v84 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v109[0]) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v85 = (os_log_s *)__nwlog_obj();
            uint64_t v86 = type[0];
            if (os_log_type_enabled(v85, type[0]))
            {
              *(_DWORD *)v122 = 136446210;
              *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
              BOOL v87 = "%{public}s called with null endpoint";
LABEL_208:
              int v96 = v85;
LABEL_209:
              _os_log_impl(&dword_181A5C000, v96, v86, v87, v122, 0xCu);
            }

        if (v100) {
          free(v100);
        }
        v26 = 0LL;
        goto LABEL_112;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
      v84 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v138) = 16;
      LOBYTE(v137) = 0;
      if (__nwlog_fault(v84, &v138, &v137))
      {
        if (v138 == 17)
        {
          uint64_t v85 = (os_log_s *)__nwlog_obj();
          uint64_t v86 = v138;
          if (!os_log_type_enabled(v85, (os_log_type_t)v138)) {
            goto LABEL_210;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
          BOOL v87 = "%{public}s called with null aead_key_length";
          goto LABEL_209;
        }

        if (!(_BYTE)v137)
        {
          uint64_t v85 = (os_log_s *)__nwlog_obj();
          uint64_t v86 = v138;
          if (!os_log_type_enabled(v85, (os_log_type_t)v138)) {
            goto LABEL_210;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
          BOOL v87 = "%{public}s called with null aead_key_length, backtrace limit exceeded";
          goto LABEL_209;
        }

        BOOL v104 = (char *)__nw_create_backtrace_string();
        uint64_t v85 = (os_log_s *)__nwlog_obj();
        uint64_t v86 = v138;
        v105 = os_log_type_enabled(v85, (os_log_type_t)v138);
        if (v104)
        {
          if (v105)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v104;
            _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s called with null aead_key_length, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v104);
          if (!v84) {
            goto LABEL_212;
          }
          goto LABEL_211;
        }

        if (v105)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
          BOOL v87 = "%{public}s called with null aead_key_length, no backtrace";
LABEL_209:
          _os_log_impl(&dword_181A5C000, v85, v86, v87, buf, 0xCu);
        }
      }
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
      v84 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v138) = 16;
      LOBYTE(v137) = 0;
      if (v138 == 17)
      {
        uint64_t v85 = (os_log_s *)__nwlog_obj();
        uint64_t v86 = v138;
        if (!os_log_type_enabled(v85, (os_log_type_t)v138)) {
          goto LABEL_210;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        BOOL v87 = "%{public}s called with null aead_key_buffer";
        goto LABEL_209;
      }

      if (!(_BYTE)v137)
      {
        uint64_t v85 = (os_log_s *)__nwlog_obj();
        uint64_t v86 = v138;
        if (!os_log_type_enabled(v85, (os_log_type_t)v138)) {
          goto LABEL_210;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        BOOL v87 = "%{public}s called with null aead_key_buffer, backtrace limit exceeded";
        goto LABEL_209;
      }

      int v98 = (char *)__nw_create_backtrace_string();
      uint64_t v85 = (os_log_s *)__nwlog_obj();
      uint64_t v86 = v138;
      v99 = os_log_type_enabled(v85, (os_log_type_t)v138);
      if (!v98)
      {
        if (!v99) {
          goto LABEL_210;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        BOOL v87 = "%{public}s called with null aead_key_buffer, no backtrace";
        goto LABEL_209;
      }

      if (v99)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v98;
        _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s called with null aead_key_buffer, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v98);
    }

        if (v66) {
          free(v66);
        }
        *(_DWORD *)(v60 + 368) = -1;
      }

      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v211 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v211, OS_LOG_TYPE_DEBUG))
          {
            id v212 = *(void *)(v9 + 488);
            int v213 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
            v214 = *(_DWORD *)(v9 + 860);
            if (v212) {
              LODWORD(v212) = *(_DWORD *)(v212 + 424);
            }
            v215 = *(_DWORD *)(v60 + 368) + *(_DWORD *)(v60 + 364);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v213;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v214;
            LOWORD(v262) = 1024;
            *(_DWORD *)((char *)&v262 + 2) = v212;
            WORD3(v262) = 1024;
            DWORD2(v262) = v215;
            _os_log_impl( &dword_181A5C000,  v211,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
          }
        }
      }

      v137 = *(void **)(v9 + 496);
      if (v137)
      {
        v138 = *(void *)(v9 + 480);
        if (v138)
        {
          nw_endpoint_t v139 = *(void *)(v138 + 200);
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
          *(void *)&_BYTE buf[24] = &unk_189BBD540;
          *(void *)&buf[32] = v139;
          nw_queue_context_async(v137, buf);
          goto LABEL_226;
        }

        __nwlog_obj();
        *(_DWORD *)v265 = 136446210;
        *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v201 = (char *)_os_log_send_and_compose_impl();
        v257[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (v257[0] == OS_LOG_TYPE_FAULT)
        {
          v202 = (os_log_s *)__nwlog_obj();
          v203 = v257[0];
          if (os_log_type_enabled(v202, v257[0]))
          {
            *(_DWORD *)v265 = 136446210;
            *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            char v204 = "%{public}s called with null http1";
            goto LABEL_463;
          }

          goto LABEL_465;
        }

        if (type)
        {
          v219 = (char *)__nw_create_backtrace_string();
          v202 = (os_log_s *)__nwlog_obj();
          v203 = v257[0];
          v222 = os_log_type_enabled(v202, v257[0]);
          if (v219)
          {
            if (v222)
            {
              *(_DWORD *)v265 = 136446466;
              *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              *(_WORD *)&v265[12] = 2082;
              *(void *)&v265[14] = v219;
              dispatch_block_t v221 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_443:
              _os_log_impl(&dword_181A5C000, v202, v203, v221, v265, 0x16u);
            }

            goto LABEL_444;
          }

          if (!v222) {
            goto LABEL_465;
          }
          *(_DWORD *)v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          char v204 = "%{public}s called with null http1, no backtrace";
        }

        else
        {
          v202 = (os_log_s *)__nwlog_obj();
          v203 = v257[0];
          if (!os_log_type_enabled(v202, v257[0])) {
            goto LABEL_465;
          }
          *(_DWORD *)v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          char v204 = "%{public}s called with null http1, backtrace limit exceeded";
        }

        if (v121) {
          free(v121);
        }
        v4 = v120;
        goto LABEL_84;
      }

      BOOL v27 = *(_DWORD *)(v3 + 368);
      *(_DWORD *)(v3 + 368) = v27 - 1;
      if (v27)
      {
LABEL_61:
        if ((*(_BYTE *)(v3 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v111 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
            {
              v112 = *(_DWORD *)(v3 + 372);
              nw_endpoint_t v113 = *(_DWORD *)(v3 + 368) + *(_DWORD *)(v3 + 364);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v3 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v112;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v113;
              *(_WORD *)&v138[12] = 2048;
              *(void *)&v138[14] = v2;
              _os_log_impl( &dword_181A5C000,  v111,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusable connection %p",  buf,  0x36u);
            }
          }
        }

        goto LABEL_63;
      }

      BOOL v28 = v4;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v29 = *(unsigned int *)(v3 + 368);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      v137 = 1LL;
      *(_WORD *)v138 = 2048;
      *(void *)&v138[2] = v29;
      char v30 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v141) = 16;
      v131 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v30, &v141, &v131))
      {
        if (v141 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (os_log_s *)gLogObj;
          v32 = v141;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141))
          {
            v33 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v137 = 1LL;
            *(_WORD *)v138 = 2048;
            *(void *)&v138[2] = v33;
            __int16 v34 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_57:
            _os_log_impl(&dword_181A5C000, v31, v32, v34, buf, 0x2Au);
          }
        }

        else if (v131)
        {
          char v35 = (char *)__nw_create_backtrace_string();
          v31 = (os_log_s *)__nwlog_obj();
          v32 = v141;
          uint64_t v36 = os_log_type_enabled(v31, (os_log_type_t)v141);
          if (v35)
          {
            if (v36)
            {
              uint64_t v37 = *(unsigned int *)(v3 + 368);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v137 = 1LL;
              *(_WORD *)v138 = 2048;
              *(void *)&v138[2] = v37;
              *(_WORD *)&v138[10] = 2082;
              *(void *)&v138[12] = v35;
              _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v35);
            goto LABEL_58;
          }

          if (v36)
          {
            uint64_t v39 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v137 = 1LL;
            *(_WORD *)v138 = 2048;
            *(void *)&v138[2] = v39;
            __int16 v34 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_57;
          }
        }

        else
        {
          v31 = (os_log_s *)__nwlog_obj();
          v32 = v141;
          if (os_log_type_enabled(v31, (os_log_type_t)v141))
          {
            v38 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v137 = 1LL;
            *(_WORD *)v138 = 2048;
            *(void *)&v138[2] = v38;
            __int16 v34 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_57;
          }
        }
      }

        int v18 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        char v204 = "nw_http_copy_metadata_from_binary_message";
        unsigned int v19 = "%{public}s Failed to decode integer";
        goto LABEL_25;
      }

      if (v34 < 8) {
        goto LABEL_218;
      }
      BOOL v27 = bswap64(*(void *)v58 & 0xFFFFFFFFFFFFFF3FLL);
      v59 = 8LL;
    }

    if (v27 >= 0x10000)
    {
      char v30 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_515;
    }

        goto LABEL_40;
      }

      __nwlog_obj();
      id v115 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)key = 136446210;
      *(void *)&key[4] = "nwsc_get_remote_pub_key";
      int v18 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(buffer[0]) = 16;
      buf[0] = 0;
      if (LOBYTE(buffer[0]) == 17)
      {
        __nwlog_obj();
        int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v116 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(void *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl( &dword_181A5C000,  v96,  v116,  "%{public}s called with null serviceConnector->remotePubKeys",  (uint8_t *)key,  0xCu);
        }

        goto LABEL_218;
      }

      if (!buf[0])
      {
        __nwlog_obj();
        int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v128 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(void *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl( &dword_181A5C000,  v96,  v128,  "%{public}s called with null serviceConnector->remotePubKeys, backtrace limit exceeded",  (uint8_t *)key,  0xCu);
        }

        goto LABEL_218;
      }

      char v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v122 = buffer[0];
      os_log_type_t v123 = os_log_type_enabled(v96, buffer[0]);
      if (!v21)
      {
        if (v123)
        {
          *(_DWORD *)key = 136446210;
          *(void *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl( &dword_181A5C000,  v96,  v122,  "%{public}s called with null serviceConnector->remotePubKeys, no backtrace",  (uint8_t *)key,  0xCu);
        }

        goto LABEL_218;
      }

      if (v123)
      {
        *(_DWORD *)key = 136446466;
        *(void *)&key[4] = "nwsc_get_remote_pub_key";
        *(_WORD *)&key[12] = 2082;
        *(void *)&key[14] = v21;
        _os_log_impl( &dword_181A5C000,  v96,  v122,  "%{public}s called with null serviceConnector->remotePubKeys, dumping backtrace:%{public}s",  (uint8_t *)key,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)key = 136446210;
      *(void *)&key[4] = "nwsc_get_remote_pub_key";
      int v18 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(buffer[0]) = 16;
      buf[0] = 0;
      if (LOBYTE(buffer[0]) == 17)
      {
        __nwlog_obj();
        int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v97 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(void *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl(&dword_181A5C000, v96, v97, "%{public}s called with null serviceConnector", (uint8_t *)key, 0xCu);
        }

        goto LABEL_218;
      }

      if (!buf[0])
      {
        __nwlog_obj();
        int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v127 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(void *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl( &dword_181A5C000,  v96,  v127,  "%{public}s called with null serviceConnector, backtrace limit exceeded",  (uint8_t *)key,  0xCu);
        }

        goto LABEL_218;
      }

      char v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v120 = buffer[0];
      v121 = os_log_type_enabled(v96, buffer[0]);
      if (!v21)
      {
        if (v121)
        {
          *(_DWORD *)key = 136446210;
          *(void *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl( &dword_181A5C000,  v96,  v120,  "%{public}s called with null serviceConnector, no backtrace",  (uint8_t *)key,  0xCu);
        }

        goto LABEL_218;
      }

      if (v121)
      {
        *(_DWORD *)key = 136446466;
        *(void *)&key[4] = "nwsc_get_remote_pub_key";
        *(_WORD *)&key[12] = 2082;
        *(void *)&key[14] = v21;
        _os_log_impl( &dword_181A5C000,  v96,  v120,  "%{public}s called with null serviceConnector, dumping backtrace:%{public}s",  (uint8_t *)key,  0x16u);
      }
    }

    goto LABEL_26;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v16 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)key = 136446722;
    *(void *)&key[4] = "nwsc_process_incoming_request";
    *(_WORD *)&key[12] = 2114;
    *(void *)&key[14] = v132;
    *(_WORD *)&key[22] = 2114;
    *(void *)&key[24] = v5;
    _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ already processed incoming request %{public}@",  (uint8_t *)key,  0x20u);
  }

LABEL_170:
}

    if (v27) {
      free(v27);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v317 = "nw_protocol_http2_get_input_frames";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v312) = 16;
    LOBYTE(v308) = 0;
    if (__nwlog_fault(v27, &v312, &v308))
    {
      if (v312 == 17)
      {
        BOOL v28 = (os_log_s *)__nwlog_obj();
        id v29 = v312;
        if (os_log_type_enabled(v28, (os_log_type_t)v312))
        {
          *(_DWORD *)buf = 136446210;
          v317 = "nw_protocol_http2_get_input_frames";
          char v30 = "%{public}s called with null http2";
          goto LABEL_217;
        }
      }

      else if ((_BYTE)v308)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v28 = (os_log_s *)__nwlog_obj();
        id v29 = v312;
        v209 = os_log_type_enabled(v28, (os_log_type_t)v312);
        if (backtrace_string)
        {
          if (!v209) {
            goto LABEL_38;
          }
          *(_DWORD *)buf = 136446466;
          v317 = "nw_protocol_http2_get_input_frames";
          v318 = 2082;
          v319 = backtrace_string;
          v33 = "%{public}s called with null http2, dumping backtrace:%{public}s";
          goto LABEL_37;
        }

        if (v209)
        {
          *(_DWORD *)buf = 136446210;
          v317 = "nw_protocol_http2_get_input_frames";
          char v30 = "%{public}s called with null http2, no backtrace";
          goto LABEL_217;
        }
      }

      else
      {
        BOOL v28 = (os_log_s *)__nwlog_obj();
        id v29 = v312;
        if (os_log_type_enabled(v28, (os_log_type_t)v312))
        {
          *(_DWORD *)buf = 136446210;
          v317 = "nw_protocol_http2_get_input_frames";
          char v30 = "%{public}s called with null http2, backtrace limit exceeded";
          goto LABEL_217;
        }
      }
    }

    goto LABEL_218;
  }

  if ((*((__int16 *)handle + 194) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v204 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v205 = *((_DWORD *)handle + 92);
      *(_DWORD *)buf = 136447746;
      v317 = "nw_protocol_http2_get_input_frames";
      v318 = 2082;
      v319 = handle + 390;
      v320 = 2080;
      v321 = (uint64_t)" ";
      v322 = 1024;
      *(_DWORD *)v323 = v205;
      *(_WORD *)&v323[4] = 1024;
      *(_DWORD *)&v323[6] = a3;
      *(_WORD *)&v323[10] = 1024;
      *(_DWORD *)&v323[12] = a4;
      *(_WORD *)&v323[16] = 1024;
      *(_DWORD *)&v323[18] = a5;
      _os_log_impl( &dword_181A5C000,  v204,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called min_bytes: %u, max_bytes: %u, max_frame_count: %u",  buf,  0x38u);
    }
  }

  a6->tqh_first = 0LL;
  a6->tqh_last = &a6->tqh_first;
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v317 = "nw_protocol_http2_get_input_frames";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v312) = 16;
    LOBYTE(v308) = 0;
    if (v312 == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v28 = (os_log_s *)gLogObj;
      id v29 = v312;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v312)) {
        goto LABEL_218;
      }
      *(_DWORD *)buf = 136446210;
      v317 = "nw_protocol_http2_get_input_frames";
      char v30 = "%{public}s called with null input_protocol";
      goto LABEL_217;
    }

    if (!(_BYTE)v308)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v28 = (os_log_s *)gLogObj;
      id v29 = v312;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v312)) {
        goto LABEL_218;
      }
      *(_DWORD *)buf = 136446210;
      v317 = "nw_protocol_http2_get_input_frames";
      char v30 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_217;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v28 = (os_log_s *)gLogObj;
    id v29 = v312;
    v32 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v312);
    if (!backtrace_string)
    {
      if (!v32) {
        goto LABEL_218;
      }
      *(_DWORD *)buf = 136446210;
      v317 = "nw_protocol_http2_get_input_frames";
      char v30 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_217;
    }

    if (!v32)
    {
LABEL_38:
      free(backtrace_string);
      goto LABEL_218;
    }

    *(_DWORD *)buf = 136446466;
    v317 = "nw_protocol_http2_get_input_frames";
    v318 = 2082;
    v319 = backtrace_string;
    v33 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_181A5C000, v28, v29, v33, buf, 0x16u);
    goto LABEL_38;
  }

  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    BOOL v14 = output_handler_context[4];
    if (v14)
    {
      v312 = 0LL;
      v313 = &v312;
      v315 = 0;
      v314 = 0x2000000000LL;
      v308 = 0LL;
      v309 = &v308;
      v311 = 0;
      v310 = 0x2000000000LL;
      if (nw_array_is_empty(*(void *)(v14 + 160)))
      {
        v15 = MEMORY[0x1895F87A8];
        v235 = a4;
        if (((*(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16)) & 0x20000) == 0)
        {
          v236[0] = MEMORY[0x1895F87A8];
          v236[1] = 0x40000000LL;
          nw_endpoint_t v237 = ___ZL34nw_protocol_http2_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_66;
          unsigned int v238 = &unk_189BC7F20;
          v239 = &v312;
          v240 = &v308;
          v244 = a5;
          v245 = a4;
          v241 = v14;
          v242 = handle;
          int v243 = a6;
          size_t v16 = *(void *)v14;
          do
          {
            if (!v16) {
              break;
            }
            __int16 v17 = *(void *)(v16 + 32);
            int v18 = ((uint64_t (*)(void *))v237)(v236);
            size_t v16 = v17;
          }

          while ((v18 & 1) != 0);
          if (*((_DWORD *)v309 + 6) < a3)
          {
            unsigned int v19 = *(unsigned __int16 *)(v14 + 188);
            BOOL v20 = v19 | (*(unsigned __int8 *)(v14 + 190) << 16);
            if ((v19 & 0x1000) == 0)
            {
              if (*((_DWORD *)v313 + 6))
              {
                nw_frame_array_prepend_array((void *)v14, a6, 1);
                a6->tqh_first = 0LL;
                a6->tqh_last = &a6->tqh_first;
                BOOL v20 = *(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16);
              }

              char v21 = 0LL;
              if ((v20 & 0x80000) == 0 && gLogDatapath)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                uint64_t v22 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                {
                  v24 = *(_DWORD *)(v14 + 176);
                  BOOL v23 = *(_DWORD *)(v14 + 180);
                  *(_DWORD *)buf = 136447490;
                  v317 = "nw_protocol_http2_get_input_frames";
                  v318 = 2082;
                  v319 = (const char *)(v14 + 191);
                  v320 = 2080;
                  v321 = (uint64_t)" ";
                  v322 = 1024;
                  *(_DWORD *)v323 = v23;
                  *(_WORD *)&v323[4] = 1024;
                  *(_DWORD *)&v323[6] = v24;
                  *(_WORD *)&v323[10] = 1024;
                  *(_DWORD *)&v323[12] = a3;
                  _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> failed to find enough (%u) bytes to return, returning 0 frames",  buf,  0x32u);
                }

                char v21 = 0LL;
              }

              goto LABEL_287;
            }
          }

        free(v53);
        goto LABEL_219;
      }

      if (!v78) {
        goto LABEL_217;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v93 = "__nw_protocol_finalize_output_frames";
      nw_endpoint_t v57 = "%{public}s called with null frames, no backtrace";
    }

    else
    {
      v62 = (os_log_s *)__nwlog_obj();
      v63 = type;
      if (!os_log_type_enabled(v62, type)) {
        goto LABEL_217;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v93 = "__nw_protocol_finalize_output_frames";
      nw_endpoint_t v57 = "%{public}s called with null frames, backtrace limit exceeded";
    }

    v83 = v62;
    v84 = v63;
    uint64_t v85 = 12;
    goto LABEL_216;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v93 = "__nw_protocol_finalize_output_frames";
  v58 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v90 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v90)
    {
      v59 = (os_log_s *)__nwlog_obj();
      v60 = type;
      if (os_log_type_enabled(v59, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v93 = "__nw_protocol_finalize_output_frames";
        id v61 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_209;
      }

      goto LABEL_210;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v59 = (os_log_s *)__nwlog_obj();
    v60 = type;
    v76 = os_log_type_enabled(v59, type);
    if (!backtrace_string)
    {
      if (v76)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v93 = "__nw_protocol_finalize_output_frames";
        id v61 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_209;
      }

      goto LABEL_210;
    }

    if (v76)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v93 = "__nw_protocol_finalize_output_frames";
      v94 = 2082;
      v95 = (nw_protocol_identifier *)backtrace_string;
      unsigned int v72 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_162;
    }

  if (v63) {
    free(v63);
  }
  char v21 = 0LL;
  if (v17 != &nw_protocol_ref_counted_handle) {
    goto LABEL_36;
  }
LABEL_221:
  if (a2->handle != &nw_protocol_ref_counted_handle)
  {
    BOOL v23 = 0;
    goto LABEL_223;
  }

  dispatch_data_t v118 = a2[1].callbacks;
  if (v118)
  {
    v119 = (nw_protocol_callbacks *)((char *)v118 - 1);
    a2[1].callbacks = v119;
    if (!v119)
    {
      id v120 = *(void (***)(void))a2[1].flow_id;
      if (v120)
      {
        *(void *)a2[1].flow_id = 0LL;
        v120[2](v120);
        _Block_release(v120);
      }

      if ((a2[1].flow_id[8] & 1) != 0)
      {
        v121 = *(const void **)a2[1].flow_id;
        if (v121) {
          _Block_release(v121);
        }
      }

      free(a2);
    }
  }

void sub_181B9197C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, void *a42, uint64_t a43, void *a44, void *a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *a52)
{
  _Unwind_Resume(a1);
}

void nw_protocol_default_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v16 = "nw_protocol_default_output_available";
    v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      size_t v16 = "nw_protocol_default_output_available";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          size_t v16 = "nw_protocol_default_output_available";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v5) {
          return;
        }
        goto LABEL_35;
      }

      if (!v10) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      size_t v16 = "nw_protocol_default_output_available";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      size_t v16 = "nw_protocol_default_output_available";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_flow_passthrough_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        output_available = (void (*)(void))callbacks->output_available;
        if (output_available) {
          output_available();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_flow_passthrough_output_available";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        BOOL v9 = "%{public}s called with null protocol";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_flow_passthrough_output_available";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

void nw_flow_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  handle = (nw_flow_protocol *)a1->handle;
  BOOL v3 = handle->handler;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v29 = "nw_flow_output_available";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v11, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          id v29 = "nw_flow_output_available";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            id v29 = "nw_flow_output_available";
            __int16 v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          id v29 = "nw_flow_output_available";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          id v29 = "nw_flow_output_available";
          _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B92770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_frame_get_buffer_manager_with_context(void *a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v12 = "nw_frame_get_buffer_manager_with_context";
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v9 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_frame_get_buffer_manager_with_context";
      int v6 = "%{public}s called with null context";
    }

    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v12 = "nw_frame_get_buffer_manager_with_context";
          __int16 v13 = 2082;
          BOOL v14 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }

      if (!v8)
      {
LABEL_31:
        if (v3) {
          free(v3);
        }
        return 0LL;
      }

      *(_DWORD *)buf = 136446210;
      char v12 = "nw_frame_get_buffer_manager_with_context";
      int v6 = "%{public}s called with null context, no backtrace";
    }

    else
    {
      v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_frame_get_buffer_manager_with_context";
      int v6 = "%{public}s called with null context, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_31;
  }

  if (dword_18C58F2D8 >= a2) {
    return nw_context_2k_buffer_manager(a1);
  }
  if (dword_18C58F320 >= a2) {
    return nw_context_8k_buffer_manager(a1);
  }
  if (dword_18C58F368 >= a2) {
    return nw_context_16k_buffer_manager(a1);
  }
  if (dword_18C58F3B0 >= a2) {
    return nw_context_64k_buffer_manager(a1);
  }
  if (dword_18C58F3F8 >= a2) {
    return nw_context_128k_buffer_manager(a1);
  }
  if (dword_18C58F440 >= a2) {
    return nw_context_512k_buffer_manager(a1);
  }
  if (dword_18C58F488 < a2) {
    return 0LL;
  }
  return nw_context_1024k_buffer_manager(a1);
}

uint64_t nw_frame_create(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  objc_opt_class();
  uint64_t v10 = _os_object_alloc();
  uint64_t v11 = v10;
  if (v10)
  {
    if (a1) {
      *(_WORD *)(v10 + 204) |= 4u;
    }
    nw_frame_reset(v10, a2, a3, a4, a5);
    return v11;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_frame_create";
  char v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_frame_create";
      uint64_t v15 = "%{public}s nw_frame_obj_alloc failed";
      goto LABEL_18;
    }

    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_frame_create";
      uint64_t v15 = "%{public}s nw_frame_obj_alloc failed, backtrace limit exceeded";
      goto LABEL_18;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v13 = (os_log_s *)gLogObj;
    os_log_type_t v14 = type;
    BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_frame_create";
        __int16 v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s nw_frame_obj_alloc failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_19;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_frame_create";
      uint64_t v15 = "%{public}s nw_frame_obj_alloc failed, no backtrace";
LABEL_18:
      _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
    }
  }

void nw_frame_set_buffer_used_manager(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(void *)(a1 + 104) = a2;
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v11 = "__nw_frame_set_buffer_used_manager";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_frame_set_buffer_used_manager";
      os_log_type_t v5 = "%{public}s called with null frame";
      goto LABEL_17;
    }

    if (!v8)
    {
      BOOL v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_frame_set_buffer_used_manager";
      os_log_type_t v5 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v11 = "__nw_frame_set_buffer_used_manager";
        __int16 v12 = 2082;
        __int16 v13 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v11 = "__nw_frame_set_buffer_used_manager";
      os_log_type_t v5 = "%{public}s called with null frame, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
    }
  }

void nw_flow_passthrough_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_available = (void (*)(void))callbacks->input_available;
        if (input_available) {
          input_available();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_flow_passthrough_input_available";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_flow_passthrough_input_available";
        char v9 = "%{public}s called with null protocol";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v15 = "nw_flow_passthrough_input_available";
            __int16 v16 = 2082;
            BOOL v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_flow_passthrough_input_available";
        char v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_flow_passthrough_input_available";
        char v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

void nw_flow_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  handle = (nw_flow_protocol *)a1->handle;
  BOOL v3 = handle->handler;
  os_log_type_t v4 = v3;
  if (v3)
  {
    os_log_type_t v5 = v3;
    uint64_t mode = v5->mode;

    if ((_DWORD)mode == 2)
    {
      BOOL v7 = nw_endpoint_handler_copy_flow(v5);
      nw_flow_service_reads(v5, (NWConcrete_nw_endpoint_flow *)v7, handle, 0);
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        else {
          char v9 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        char v21 = "nw_flow_input_available";
        __int16 v22 = 2082;
        __int16 v23 = (void *)v9;
        __int16 v24 = 2082;
        uint64_t v25 = "flow";
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    goto LABEL_10;
  }

  __nwlog_obj();
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v21 = "nw_flow_input_available";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_flow_input_available";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          char v21 = "nw_flow_input_available";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_flow_input_available";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_flow_input_available";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B93654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  id v2 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_content_context);
  if (!v2) {
    return 0LL;
  }
  v48.receiver = v2;
  v48.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_content_context;
  BOOL v3 = objc_msgSendSuper2(&v48, sel_init);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v36 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v50 = "-[NWConcrete_nw_content_context initWithIdentifier:]";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if ((__nwlog_fault(v37, &type, &v46) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v38 = (os_log_s *)(id)gLogObj;
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "-[NWConcrete_nw_content_context initWithIdentifier:]";
          _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v38 = (os_log_s *)(id)gLogObj;
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v38, type);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v50 = "-[NWConcrete_nw_content_context initWithIdentifier:]";
            __int16 v51 = 2082;
            v52 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v38,  v43,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_56;
        }

        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v50 = "-[NWConcrete_nw_content_context initWithIdentifier:]";
          _os_log_impl(&dword_181A5C000, v38, v43, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v38 = (os_log_s *)(id)gLogObj;
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "-[NWConcrete_nw_content_context initWithIdentifier:]";
          _os_log_impl( &dword_181A5C000,  v38,  v45,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B93BC0(_Unwind_Exception *exception_object)
{
}

void nw_content_context_set_is_final(nw_content_context_t context, BOOL is_final)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_content_context_t v3 = context;
  nw_content_context_t v4 = v3;
  if (v3)
  {
    if (v3 != (nw_content_context_t)&__block_literal_global_5_41854
      && v3 != (nw_content_context_t)&__block_literal_global_4
      && v3 != (nw_content_context_t)&__block_literal_global_3_41839
      && v3 != (nw_content_context_t)&__block_literal_global_41831)
    {
      *((_BYTE *)v3 + 118) = *((_BYTE *)v3 + 118) & 0xFE | is_final;
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_content_context_set_is_final";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_content_context_set_is_final";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_content_context_set_is_final";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_content_context_set_is_final";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_content_context_set_is_final";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_frame_foreach_protocol_metadata(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
    int v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
      int v24 = "%{public}s called with null frame";
      goto LABEL_63;
    }

    if (v46 == OS_LOG_TYPE_DEFAULT)
    {
      int v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
      int v24 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_63;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type[0];
    BOOL v26 = os_log_type_enabled(v22, type[0]);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
      int v24 = "%{public}s called with null frame, no backtrace";
      goto LABEL_63;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_64:
    if (!v21) {
      return;
    }
    goto LABEL_65;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
    int v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
      int v24 = "%{public}s called with null block";
      goto LABEL_63;
    }

    if (v46 == OS_LOG_TYPE_DEFAULT)
    {
      int v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type[0];
      if (!os_log_type_enabled(v22, type[0])) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
      int v24 = "%{public}s called with null block, backtrace limit exceeded";
      goto LABEL_63;
    }

    int v27 = (char *)__nw_create_backtrace_string();
    int v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type[0];
    BOOL v28 = os_log_type_enabled(v22, type[0]);
    if (v27)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v27;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null block, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v27);
      if (!v21) {
        return;
      }
LABEL_65:
      free(v21);
      return;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_foreach_protocol_metadata";
      int v24 = "%{public}s called with null block, no backtrace";
LABEL_63:
      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
      goto LABEL_64;
    }

    goto LABEL_64;
  }

  int v6 = *(void **)(a1 + 64);
  if (v6)
  {
    char v7 = 0;
    while (1)
    {
      os_log_type_t v8 = (void *)*v6;
      uint64_t v9 = v6[6];
      if (v9)
      {
        BOOL v10 = nw_protocol_metadata_matches_definition(v9, g_ip_definition);
        v7 |= v10;
      }

      int v6 = v8;
      if (!v8) {
        goto LABEL_13;
      }
    }
  }

  char v7 = 0;
LABEL_13:
  if ((v7 & 1) == 0 && a2)
  {
    if ((*(_WORD *)(a1 + 204) & 0x10) != 0) {
      uint64_t v11 = 0LL;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 152);
    }
    int v12 = *(unsigned __int8 *)(a1 + 185);
    uint64_t v13 = *(_BYTE *)(a1 + 186) & 3;
    if (!v11 && !v12)
    {
      if ((_DWORD)v13) {
        __asm { BR              X9 }
      }

      return;
    }

    singleton = nw_protocol_metadata_create_singleton((void *)g_ip_definition);
    nw_ip_metadata_set_ecn_flag((nw_protocol_metadata_t)singleton, (nw_ip_ecn_flag_t)v13);
    int v15 = singleton;
    int v16 = v15;
    if (v15)
    {
      uint64_t v17 = MEMORY[0x1895F87A8];
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_ip_metadata_set_receive_time_block_invoke;
      objc_super v48 = &__block_descriptor_40_e9_B16__0_v8l;
      uint64_t v49 = v11;
      int v18 = v15[4];
      if (v18) {
        __nw_ip_metadata_set_receive_time_block_invoke((uint64_t)buf, v18);
      }

      uint64_t v19 = v16;
      *(void *)buf = v17;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_ip_metadata_set_hop_limit_block_invoke;
      objc_super v48 = &__block_descriptor_33_e9_B16__0_v8l;
      LOBYTE(v49) = v12;
      uint64_t v20 = (uint64_t)v16[4];
      if (v20) {
        __nw_ip_metadata_set_hop_limit_block_invoke((uint64_t)buf, v20);
      }
LABEL_29:

      (*(void (**)(uint64_t, id *))(a3 + 16))(a3, v16);
      if (v16) {
        os_release(v16);
      }
      return;
    }

    __nwlog_obj();
    int v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t type = 136446210;
    __int16 v51 = "nw_ip_metadata_set_receive_time";
    int v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v46 = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v30, &v46, &v45))
    {
      if (v46 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = v46;
        if (os_log_type_enabled(v31, v46))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          __int16 v51 = "nw_ip_metadata_set_receive_time";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null metadata", (uint8_t *)type, 0xCu);
        }

void nw_content_context_set_metadata_for_protocol( nw_content_context_t context, nw_protocol_metadata_t protocol_metadata)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  nw_content_context_t v3 = context;
  nw_content_context_t v4 = protocol_metadata;
  int v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    int v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v37) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if ((_BYTE)v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type[0];
      BOOL v20 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v13) {
          goto LABEL_19;
        }
LABEL_54:
        free(v13);
        goto LABEL_19;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_metadata_for_protocol";
        _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_protocol_metadata_supports_replies(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 1);
    if (v3)
    {
      uint64_t v4 = (*(unsigned __int8 *)(v3 + 184) >> 1) & 1;
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_protocol_metadata_supports_replies";
    char v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_protocol_metadata_supports_replies";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null metadata->definition", buf, 0xCu);
        }

uint64_t nw_frame_buffer_used_malloc(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1) {
    return *(_WORD *)(a1 + 204) & 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_frame_buffer_used_malloc";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_frame_buffer_used_malloc";
        int v5 = "%{public}s called with null frame";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "nw_frame_buffer_used_malloc";
          __int16 v12 = 2082;
          os_log_type_t v13 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_frame_buffer_used_malloc";
        int v5 = "%{public}s called with null frame, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_frame_buffer_used_malloc";
        int v5 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

BOOL nw_frame_buffer_used_manager(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1) {
    return *(void *)(a1 + 104) != 0LL;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "__nw_frame_buffer_used_manager";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_frame_buffer_used_manager";
        int v5 = "%{public}s called with null frame";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "__nw_frame_buffer_used_manager";
          __int16 v12 = 2082;
          os_log_type_t v13 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_frame_buffer_used_manager";
        int v5 = "%{public}s called with null frame, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "__nw_frame_buffer_used_manager";
        int v5 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

uint64_t nw_frame_get_buffer(uint64_t a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if ((*(_WORD *)(a1 + 204) & 0x100) != 0
      && g_channel_check_validity
      && (g_channel_check_validity(a1, *(void *)(a1 + 88)) & 1) == 0)
    {
      uint64_t result = 0LL;
      if (a2) {
        *a2 = 0;
      }
    }

    else
    {
      if (a2) {
        *a2 = *(_DWORD *)(a1 + 48);
      }
      return *(void *)(a1 + 112);
    }

    return result;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "__nw_frame_get_buffer";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "__nw_frame_get_buffer";
        char v8 = "%{public}s called with null frame";
LABEL_24:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "__nw_frame_get_buffer";
          __int16 v15 = 2082;
          BOOL v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "__nw_frame_get_buffer";
        char v8 = "%{public}s called with null frame, no backtrace";
        goto LABEL_24;
      }
    }

    else
    {
      int v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "__nw_frame_get_buffer";
        char v8 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
  }

uint64_t nw_frame_buffer_get_manager(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1) {
    return *(void *)(a1 + 104);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v11 = "__nw_frame_buffer_get_manager";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        char v11 = "__nw_frame_buffer_get_manager";
        int v5 = "%{public}s called with null frame";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          char v11 = "__nw_frame_buffer_get_manager";
          __int16 v12 = 2082;
          os_log_type_t v13 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        char v11 = "__nw_frame_buffer_get_manager";
        int v5 = "%{public}s called with null frame, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        char v11 = "__nw_frame_buffer_get_manager";
        int v5 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

void nw_frame_will_free_buffer_externally(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (*(void *)(a1 + 104))
    {
      *(void *)(a1 + 104) = 0LL;
      *(void *)(a1 + 112) = 0LL;
      return;
    }

    int v1 = *(unsigned __int16 *)(a1 + 204);
    int v2 = v1 | (*(unsigned __int8 *)(a1 + 206) << 16);
    if ((v1 & 1) != 0)
    {
      *(_BYTE *)(a1 + 206) = BYTE2(v2);
      *(_WORD *)(a1 + 204) = v2 & 0xFFFE;
      *(void *)(a1 + 112) = 0LL;
      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_frame_will_free_buffer_externally";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v3, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v4 = (os_log_s *)gLogObj;
        os_log_type_t v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_frame_will_free_buffer_externally";
        int v6 = "%{public}s Frame buffer cannot be freed externally";
        goto LABEL_19;
      }

      if (!v11)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v4 = (os_log_s *)gLogObj;
        os_log_type_t v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_frame_will_free_buffer_externally";
        int v6 = "%{public}s Frame buffer cannot be freed externally, backtrace limit exceeded";
        goto LABEL_19;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v4 = (os_log_s *)gLogObj;
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v8) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_frame_will_free_buffer_externally";
        int v6 = "%{public}s Frame buffer cannot be freed externally, no backtrace";
        goto LABEL_19;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_frame_will_free_buffer_externally";
        __int16 v15 = 2082;
        BOOL v16 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s Frame buffer cannot be freed externally, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

BOOL nw_queue_copy_current_workloop()
{
  uint64_t v0 = dispatch_workloop_copy_current();
  if (v0) {
    return v0;
  }
  __nwlog_obj();
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  uint64_t v3 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
    return v0;
  }

  __break(1u);
  return result;
}

void nw_context_count_input_bytes(void *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  os_log_type_t v4 = v3;
  if (g_some_context_has_cap == 1)
  {
    nw_context_assert_queue(v3);
    BOOL v15 = nw_context_copy_globals_context(v4);

    uint64_t v3 = (NWConcrete_nw_context *)v15;
    uint64_t v5 = *(void *)(v15 + 32);
    unint64_t v6 = *(void *)(v5 + 76);
    if (v6)
    {
      BOOL v7 = v6 > a2;
      unint64_t v8 = v6 - a2;
      if (v7)
      {
        *(void *)(v5 + 76) = v8;
      }

      else
      {
        *(void *)(v5 + 76) = 0LL;
        os_log_type_t v9 = _Block_copy(*(const void **)(v5 + 92));
        uint64_t v10 = *(void *)(v15 + 32);
        char v11 = *(void **)(v10 + 84);
        *(void *)(v10 + 84) = 0LL;
        __int16 v12 = v11;

        uint64_t v13 = *(void *)(v15 + 32);
        uint64_t v14 = *(void **)(v13 + 92);
        *(void *)(v13 + 92) = 0LL;

        dispatch_async(v12, v9);
        uint64_t v3 = (NWConcrete_nw_context *)v15;
      }
    }
  }
}

void sub_181B9646C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_content_context_set_metadata_for_protocol_block_invoke(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  unint64_t v6 = (nw_protocol_metadata *)a1[4];
  if (v6 == v5)
  {
    uint64_t v11 = 0LL;
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    if (!v7)
    {
      nw_protocol_definition_t v8 = nw_protocol_metadata_copy_definition(v6);
      uint64_t v9 = *(void *)(a1[6] + 8LL);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      uint64_t v7 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    }

    if (nw_protocol_metadata_matches_definition((uint64_t)v5, v7))
    {
      objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), a3);
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v11 = 1LL;
    }
  }

  return v11;
}

void sub_181B96540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

dispatch_data_s *nw_read_request_receive(void *a1, void *a2, void *a3, int a4, void *a5)
{
  uint64_t v126 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  uint64_t v10 = a2;
  id obj = a3;
  id v11 = a3;
  id v91 = a5;
  id v12 = a5;
  if (v9)
  {
    int v90 = a4;
    int v93 = a4 ^ 1;
    char v13 = 1;
    while (1)
    {
      uint64_t v14 = (id *)v9;
      BOOL v15 = v14;
      if (((_BYTE)v14[22] & 1) == 0) {
        break;
      }
LABEL_158:
      id v9 = v15[1];

      if (!v9) {
        goto LABEL_159;
      }
    }

    uint64_t v17 = v14 + 17;
    id v16 = v14[17];
    if (v16 != v11 && ((v16 == 0LL) & v13) == 0)
    {
LABEL_141:
      if (!v11 || *v17 == v11)
      {
        unsigned int v83 = *((_DWORD *)v15 + 17);
        BOOL v84 = v83 != 4 && v10 == 0LL;
        int v85 = v93;
        if (!v84) {
          int v85 = 1;
        }
        if (v85 != 1 || v83 == 4 && (v15[10] <= v15[11] || v90))
        {
          *((_BYTE *)v15 + 176) |= 2u;
          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_51910);
          }
        }
      }

      v13 |= v10 != 0LL;
      goto LABEL_158;
    }

    objc_storeStrong(v14 + 17, obj);
    if (v12) {
      objc_storeStrong(v15 + 19, v91);
    }
    if (!v10 || (size_t size = dispatch_data_get_size(v10)) == 0)
    {
LABEL_140:
      char v13 = 0;
      goto LABEL_141;
    }

    unsigned int v20 = *((_DWORD *)v15 + 17);
    if (v20 - 1 >= 2)
    {
      if (v20 == 3)
      {
        if (v15[11] >= v15[10]) {
          goto LABEL_135;
        }
        nw_array_append((uint64_t)v15[20], v10);
        nw_array_append((uint64_t)v15[21], v11);
        v15[11] = (char *)v15[11] + 1;

        id v80 = v15[17];
        v15[17] = 0LL;

        if (_nw_signposts_once != -1) {
          dispatch_once(&_nw_signposts_once, &__block_literal_global_51910);
        }
        if (!_nw_signposts_enabled)
        {
          uint64_t v10 = 0LL;
LABEL_137:
          goto LABEL_140;
        }

        if (kdebug_is_enabled())
        {
          uint64_t v10 = 0LL;
          kdebug_trace();
          goto LABEL_135;
        }

LABEL_159:
  uint64_t v86 = v10;
  return v86;
}

    if (v73) {
      free(v73);
    }
    int v2 = 0LL;
    goto LABEL_86;
  }

  uint64_t v3 = v1;
  os_log_type_t v4 = v3[29];

  if ((_DWORD)v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      else {
        unsigned int v20 = off_189BBBBC0[v4];
      }
      *(_DWORD *)buf = 136446722;
      v166 = "nw_endpoint_proxy_start_next_child";
      v167 = 2082;
      os_log_type_t v168 = (void *)v20;
      BOOL v169 = 2082;
      os_log_type_t v170 = "proxy";
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    goto LABEL_30;
  }

  uint64_t v5 = v3;
  state = v5->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    int v21 = nw_endpoint_handler_copy_proxy(v5);
    unint64_t v23 = v21;
    id v157 = v2;
    if (v21)
    {
      BOOL v24 = *((void *)v21 + 1);
      if (!v24 || (size_t v25 = *(void *)(v24 + 24) - *(void *)(v24 + 16)) == 0)
      {
        nw_endpoint_handler_handle_failure(v5);
        BOOL v35 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 50);
        v5->event = (nw_endpoint_handler_event_s)327684;
        nw_endpoint_handler_report(v5, 0LL, &v5->event.domain, v35);

LABEL_85:
        int v2 = v157;
        goto LABEL_86;
      }

      size_t v26 = *((unsigned int *)v23 + 6);
      int v27 = *((_DWORD *)v23 + 6);
      if (v26 >= v25 >> 3)
      {
        int v39 = v5;
        id v40 = *((_BYTE *)v39 + 268);

        if ((v40 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v41 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v42 = v39;

            BOOL v43 = v42;
            dispatch_time_t v44 = *((_BYTE *)v39 + 268);

            if ((v44 & 1) != 0) {
              uint64_t v45 = "dry-run ";
            }
            else {
              uint64_t v45 = "";
            }
            id v46 = nw_endpoint_handler_copy_endpoint(v43);
            logging_description = nw_endpoint_get_logging_description(v46);
            v152 = v45;
            id_str = v42->id_str;
            objc_super v48 = v43;
            os_log_type_t v49 = v48;
            uint64_t v50 = v5->state;
            else {
              __int16 v51 = off_189BBBBF0[v50];
            }

            size_t v55 = v49;
            v56 = v55;
            nw_endpoint_t v57 = "path";
            switch(v3[29])
            {
              case 0u:
                break;
              case 1u:
                nw_endpoint_t v57 = "resolver";
                break;
              case 2u:
                nw_endpoint_t v57 = nw_endpoint_flow_mode_string(v55[31]);
                break;
              case 3u:
                nw_endpoint_t v57 = "proxy";
                break;
              case 4u:
                nw_endpoint_t v57 = "fallback";
                break;
              case 5u:
                nw_endpoint_t v57 = "transform";
                break;
              default:
                nw_endpoint_t v57 = "unknown-mode";
                break;
            }

            unint64_t v70 = v56;
            os_unfair_lock_lock((os_unfair_lock_t)v70 + 28);
            unint64_t v71 = v70[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v70 + 28);

            *(_DWORD *)buf = 136448002;
            v166 = "nw_endpoint_proxy_start_next_child";
            v167 = 2082;
            os_log_type_t v168 = id_str;
            BOOL v169 = 2082;
            os_log_type_t v170 = v152;
            char v171 = 2082;
            uint64_t v172 = logging_description;
            v173 = 2082;
            v174 = v51;
            v175 = 2082;
            v176 = v57;
            v177 = 2114;
            v178 = v71;
            id v179 = 1024;
            LODWORD(v180) = v27;
            _os_log_impl( &dword_181A5C000,  v41,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u",  buf,  0x4Eu);
          }
        }

        goto LABEL_85;
      }

      if (*((void *)v23 + 11))
      {
        nw_queue_cancel_source(*((void *)v23 + 11), v22);
        *((void *)v23 + 11) = 0LL;
        int v27 = *((_DWORD *)v23 + 6);
        BOOL v24 = *((void *)v23 + 1);
      }

      *((_DWORD *)v23 + 6) = v27 + 1;
      nw_array_get_object_at_index(v24, v26);
      BOOL v28 = (NWConcrete_nw_endpoint_handler *)objc_claimAutoreleasedReturnValue();
      size_t v29 = nw_endpoint_handler_copy_parameters(v28);
      size_t v30 = v29;
      if (v29)
      {
        int v31 = (id *)v29;
        os_log_type_t v32 = v31[23];

        if (v32)
        {
          is_privacy_proxy = nw_proxy_config_is_privacy_proxy(v32, 0LL);
          uint64_t v34 = nw_proxy_config_has_fallback_proxy_agent(v32) || nw_proxy_config_has_fallback_proxy_config(v32);
          int v52 = nw_proxy_config_use_fast_fallback(v32);
        }

        else
        {
          is_privacy_proxy = 0;
          uint64_t v34 = 0;
          int v52 = 0;
        }
      }

      else
      {
        is_privacy_proxy = 0;
        uint64_t v34 = 0;
        int v52 = 0;
      }

      if ((*((_BYTE *)v23 + 96) & 1) != 0)
      {
        BOOL v59 = (*((_BYTE *)v23 + 96) & 0x18) != 0 ? is_privacy_proxy : 0;
        if ((v59 & 1) != 0) {
          goto LABEL_66;
        }
      }

      else if ((*((_BYTE *)v23 + 96) & 2) != 0)
      {
        os_log_type_t v58 = v5;
        v58->privacy_stance = 3;

LABEL_66:
        nw_endpoint_handler_cancel(v28, 0LL, 1);
LABEL_67:

        goto LABEL_85;
      }

      os_log_type_t v60 = (void *)*((void *)v23 + 10);
      *((void *)v23 + 10) = 0LL;

      *((_BYTE *)v23 + 97) &= 0xF3u;
      nw_endpoint_handler_start(v28);
      if (!(v34 | v52)) {
        goto LABEL_67;
      }
      if ((*((_BYTE *)v23 + 97) & 8) != 0) {
        goto LABEL_67;
      }
      if (*((void *)v23 + 4)) {
        goto LABEL_67;
      }
      id v61 = *((void *)v23 + 1);
      if (!v61) {
        goto LABEL_67;
      }
      v62 = *((unsigned int *)v23 + 6);
      nw_array_get_object_at_index(v61, v62);
      v63 = (NWConcrete_nw_endpoint_handler *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = v63;
      if (!v63)
      {
LABEL_185:

        goto LABEL_67;
      }

      int v65 = nw_endpoint_handler_copy_parameters(v63);
      v66 = v65;
      if (v65)
      {
        os_log_type_t v67 = nw_parameters_copy_effective_proxy_config(v65);
        BOOL v68 = v67;
        if (v67) {
          uint64_t mode = nw_proxy_config_get_mode(v67);
        }
        else {
          uint64_t mode = 4;
        }
      }

      else
      {
        uint64_t mode = 0;
      }

      nw_endpoint_t v153 = v64;
      v155 = v66;
      if ((*((_BYTE *)v23 + 97) & 4) == 0)
      {
        int v93 = &nw_setting_proxy_fast_failure_threshold;
        if (v52)
        {
          v94 = 2LL;
        }

        else
        {
          int v93 = &nw_setting_proxy_failure_threshold;
          v94 = 5LL;
        }

        if ((int64_with_default = networkd_settings_get_int64_with_default(*v93, v94),
              nw_endpoint_proxy_get_success_count(v64))
          && (!nw_endpoint_proxy_get_success_count(v28)
           || int64_with_default < nw_endpoint_proxy_get_failure_count(v28))
          || (mode == 4 ? (int v96 = v52) : (int v96 = 0),
              v96 == 1 && int64_with_default < nw_endpoint_proxy_get_failure_count(v28)))
        {
          int minimize_logging = nw_endpoint_handler_get_minimize_logging(v5);
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(v5);
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0) {
              goto LABEL_133;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            size_t v99 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v5);
              v148 = nw_endpoint_handler_dry_run_string(v5);
              deltab = nw_endpoint_handler_copy_endpoint(v5);
              nw_endpoint_t v139 = nw_endpoint_get_logging_description(deltab);
              v140 = nw_endpoint_handler_state_string(v5);
              v141 = nw_endpoint_handler_mode_string(v5);
              v142 = nw_endpoint_handler_copy_current_path(v5);
              *(_DWORD *)buf = 136447746;
              v166 = "nw_endpoint_proxy_start_next_child";
              v167 = 2082;
              os_log_type_t v168 = (void *)id_string;
              BOOL v169 = 2082;
              os_log_type_t v170 = v148;
              char v171 = 2082;
              uint64_t v172 = v139;
              v173 = 2082;
              v174 = v140;
              v175 = 2082;
              v176 = v141;
              v177 = 2114;
              v178 = v142;
              _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child end point immediately",  buf,  0x48u);
            }
          }

          else
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_133:
              char v105 = nw_endpoint_handler_copy_context(v5);
              v161[0] = MEMORY[0x1895F87A8];
              v161[1] = 3221225472LL;
              v161[2] = ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke;
              v161[3] = &unk_189BC93A0;
              v162 = v5;
              nw_queue_context_async(v105, v161);
              v106 = (id *)&v162;
LABEL_184:

              os_log_type_t v64 = v153;
              goto LABEL_185;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            size_t v99 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
            {
              int v100 = nw_endpoint_handler_get_id_string(v5);
              v145 = nw_endpoint_handler_dry_run_string(v5);
              deltaa = nw_endpoint_handler_copy_endpoint(v5);
              uint64_t v101 = nw_endpoint_get_logging_description(deltaa);
              int v102 = nw_endpoint_handler_state_string(v5);
              uint64_t v103 = nw_endpoint_handler_mode_string(v5);
              int v104 = nw_endpoint_handler_copy_current_path(v5);
              *(_DWORD *)buf = 136447746;
              v166 = "nw_endpoint_proxy_start_next_child";
              v167 = 2082;
              os_log_type_t v168 = (void *)v100;
              BOOL v169 = 2082;
              os_log_type_t v170 = v145;
              char v171 = 2082;
              uint64_t v172 = v101;
              v173 = 2082;
              v174 = v102;
              v175 = 2082;
              v176 = v103;
              v177 = 2114;
              v178 = v104;
              _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child end point immediately",  buf,  0x48u);
            }
          }

          goto LABEL_133;
        }
      }

      if ((*((_BYTE *)v23 + 97) & 4) != 0) {
        v107 = 0;
      }
      else {
        v107 = v52;
      }
      delta = nw_endpoint_proxy_get_timeout_nanos(v28, v107);
      uint64_t v108 = nw_endpoint_handler_get_minimize_logging(v5);
      uint64_t v109 = nw_endpoint_handler_get_logging_disabled(v5);
      if (v108)
      {
        if ((v109 & 1) != 0)
        {
LABEL_144:
          v116 = nw_endpoint_handler_copy_context(v5);
          v158[0] = MEMORY[0x1895F87A8];
          v158[1] = 3221225472LL;
          v158[2] = ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_153;
          v158[3] = &unk_189BC9238;
          v159 = v23;
          v160 = v5;
          *((void *)v23 + 11) = nw_queue_context_create_source(v116, 2, 3, 0, v158, 0LL);

          uint64_t v117 = *((void *)v23 + 11);
          if (v117)
          {
            uint64_t v118 = dispatch_time(0x8000000000000000LL, delta);
            nw_queue_set_timer_values(v117, v118, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
            nw_queue_activate_source(*((void *)v23 + 11), v119);
LABEL_183:
            v106 = (id *)&v159;
            char v105 = v160;
            goto LABEL_184;
          }

          __nwlog_obj();
          id v120 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          v121 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v163 = 0;
          if (__nwlog_fault(v121, &type, &v163))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v122 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v123 = type;
              if (os_log_type_enabled(v122, type))
              {
                *(_DWORD *)buf = 136446210;
                v166 = "nw_endpoint_proxy_start_next_child";
                _os_log_impl( &dword_181A5C000,  v122,  v123,  "%{public}s nw_queue_context_create_source(timer) failed",  buf,  0xCu);
              }
            }

            else
            {
              if (v163)
              {
                BOOL v127 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                uint64_t v129 = type;
                v130 = os_log_type_enabled(v128, type);
                if (v127)
                {
                  if (v130)
                  {
                    *(_DWORD *)buf = 136446466;
                    v166 = "nw_endpoint_proxy_start_next_child";
                    v167 = 2082;
                    os_log_type_t v168 = v127;
                    _os_log_impl( &dword_181A5C000,  v128,  v129,  "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v127);
                }

                else
                {
                  if (v130)
                  {
                    *(_DWORD *)buf = 136446210;
                    v166 = "nw_endpoint_proxy_start_next_child";
                    _os_log_impl( &dword_181A5C000,  v128,  v129,  "%{public}s nw_queue_context_create_source(timer) failed, no backtrace",  buf,  0xCu);
                  }
                }

                goto LABEL_181;
              }

              __nwlog_obj();
              v122 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v132 = type;
              if (os_log_type_enabled(v122, type))
              {
                *(_DWORD *)buf = 136446210;
                v166 = "nw_endpoint_proxy_start_next_child";
                _os_log_impl( &dword_181A5C000,  v122,  v132,  "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

                      nw_http_connect_destroy((uint64_t)handle);
                      if (v10) {
                        os_release(v10);
                      }
                      return 0LL;
                    }

                    uint64_t v41 = (void *)*((void *)handle + 20);
                    if (v41)
                    {
                      os_release(v41);
                      *((void *)handle + 20) = 0LL;
                    }

                    os_log_type_t v42 = (void *)*((void *)handle + 19);
                    if (v42)
                    {
                      os_release(v42);
                      *((void *)handle + 19) = 0LL;
                    }

                    if (!v10)
                    {
                      id v46 = 0;
                      *((void *)handle + 19) = nw_endpoint_copy_without_proxy_parent(*((void **)handle + 17));
                      goto LABEL_101;
                    }

                    BOOL v43 = v10;
                    dispatch_time_t v44 = v43 + 3;
                    uint64_t v45 = v43[3];

                    *((void *)handle + 20) = v45;
                    id v46 = v45 != 0LL;
                    v47 = v43;
                    objc_super v48 = v47;
                    if (*v44)
                    {
                      os_log_type_t v49 = *((_BYTE *)v47 + 152) == 0;

                      if (!v49)
                      {
                        uint64_t v50 = (void *)*((void *)handle + 20);
                        if (v50) {
                          uint64_t v50 = os_retain(v50);
                        }
                        *((void *)handle + 19) = v50;
                        goto LABEL_98;
                      }
                    }

                    else
                    {
                    }

                    uint64_t v50 = (void *)*((void *)handle + 19);
LABEL_98:
                    if (!v50) {
                      *((void *)handle + 19) = nw_endpoint_copy_without_proxy_parent(*((void **)handle + 17));
                    }
                    os_release(v48);
LABEL_101:
                    unint64_t v53 = (void *)*((void *)handle + 18);
                    if (v53)
                    {
                      os_release(v53);
                      *((void *)handle + 18) = 0LL;
                    }

                    unint64_t v54 = (void *)nw_endpoint_copy_proxy_original_endpoint(*((void **)handle + 17));
                    *((void *)handle + 18) = v54;
                    if (!v54)
                    {
                      if (!v46)
                      {
                        if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                          goto LABEL_82;
                        }
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&buf[22] = 2080;
                        nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        size_t v55 = (const char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        v111 = 0;
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          v56 = (os_log_s *)__nwlog_obj();
                          nw_endpoint_t v57 = type[0];
                          if (!os_log_type_enabled(v56, type[0])) {
                            goto LABEL_176;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          os_log_type_t v58 = "%{public}s %{public}s%sNo proxy original endpoint";
                          goto LABEL_175;
                        }

                        if (!v111)
                        {
                          v56 = (os_log_s *)__nwlog_obj();
                          nw_endpoint_t v57 = type[0];
                          if (!os_log_type_enabled(v56, type[0])) {
                            goto LABEL_176;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          os_log_type_t v58 = "%{public}s %{public}s%sNo proxy original endpoint, backtrace limit exceeded";
                          goto LABEL_175;
                        }

                        uint64_t v86 = (char *)__nw_create_backtrace_string();
                        v56 = (os_log_s *)__nwlog_obj();
                        nw_endpoint_t v57 = type[0];
                        BOOL v87 = os_log_type_enabled(v56, type[0]);
                        if (!v86)
                        {
                          if (!v87) {
                            goto LABEL_176;
                          }
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          os_log_type_t v58 = "%{public}s %{public}s%sNo proxy original endpoint, no backtrace";
                          goto LABEL_175;
                        }

                        if (v87)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          LOWORD(v114) = 2082;
                          *(void *)((char *)&v114 + 2) = v86;
                          _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s %{public}s%sNo proxy original endpoint, dumping backtrace:%{public}s",  buf,  0x2Au);
                        }

                        free(v86);
                        goto LABEL_176;
                      }

                      unint64_t v54 = (void *)*((void *)handle + 17);
                      if (v54) {
                        unint64_t v54 = os_retain(v54);
                      }
                      *((void *)handle + 18) = v54;
                    }

                    if (nw_endpoint_get_type((nw_endpoint_t)v54) - 3 <= 0xFFFFFFFD)
                    {
                      if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                        goto LABEL_82;
                      }
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = handle + 284;
                      *(_WORD *)&buf[22] = 2080;
                      nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                      size_t v55 = (const char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      v111 = 0;
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v56 = (os_log_s *)gLogObj;
                        nw_endpoint_t v57 = type[0];
                        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                          goto LABEL_176;
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&buf[22] = 2080;
                        nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        os_log_type_t v58 = "%{public}s %{public}s%sProxy original endpoint is wrong type";
                        goto LABEL_175;
                      }

                      if (!v111)
                      {
                        v56 = (os_log_s *)__nwlog_obj();
                        nw_endpoint_t v57 = type[0];
                        if (!os_log_type_enabled(v56, type[0])) {
                          goto LABEL_176;
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&buf[22] = 2080;
                        nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        os_log_type_t v58 = "%{public}s %{public}s%sProxy original endpoint is wrong type, backtrace limit exceeded";
                        goto LABEL_175;
                      }

                      int v65 = (char *)__nw_create_backtrace_string();
                      v56 = (os_log_s *)__nwlog_obj();
                      nw_endpoint_t v57 = type[0];
                      v66 = os_log_type_enabled(v56, type[0]);
                      if (v65)
                      {
                        if (v66)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 284;
                          *(_WORD *)&buf[22] = 2080;
                          nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                          LOWORD(v114) = 2082;
                          *(void *)((char *)&v114 + 2) = v65;
                          _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s %{public}s%sProxy original endpoint is wrong type, dumping backtrace:%{public}s",  buf,  0x2Au);
                        }

                        free(v65);
                        if (!v55) {
                          goto LABEL_82;
                        }
LABEL_177:
                        __int16 v51 = (char *)v55;
                        goto LABEL_81;
                      }

                      if (v66)
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_http_connect_add_input_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = handle + 284;
                        *(_WORD *)&buf[22] = 2080;
                        nw_endpoint_t v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                        os_log_type_t v58 = "%{public}s %{public}s%sProxy original endpoint is wrong type, no backtrace";
LABEL_175:
                        _os_log_impl(&dword_181A5C000, v56, v57, v58, buf, 0x20u);
                      }

  if (*(_DWORD *)(v9 + 864) == 1)
  {
    if (v13)
    {
      char v105 = *(void *)(v9 + 488);
      if (v105) {
        nw_protocol_input_available(*(void **)(v105 + 48), v105);
      }
    }
  }

    if (v25) {
      free(v25);
    }
    *((void *)v85 + 3) = 0LL;
    goto LABEL_162;
  }

  if (!(a2 >> 14))
  {
    __src = bswap32(a2 | 0x4000) >> 16;
    id v11 = 2LL;
    id v12 = a6 - 2;
    if (a6 < 2) {
      goto LABEL_30;
    }
    goto LABEL_7;
  }

  if (!(a2 >> 30))
  {
    __src = bswap32(a2 | 0x80000000);
    id v11 = 4LL;
    id v12 = a6 - 4;
    if (a6 < 4) {
      goto LABEL_30;
    }
    goto LABEL_7;
  }

  if (!(a2 >> 62))
  {
    __src = bswap64(a2 | 0xC000000000000000LL);
    id v11 = 8LL;
    id v12 = a6 - 8;
    if (a6 < 8) {
      goto LABEL_30;
    }
LABEL_7:
    memcpy(__dst, &__src, v11);
    unsigned int v83 = v12;
    char v13 = &v6[v11];
    BOOL v87 = v13;
    uint64_t v14 = &v80;
    if (a1)
    {
LABEL_8:
      if (v14[3] >= a2)
      {
        memcpy(v13, a1, a2);
        BOOL v15 = v14[3];
        v14[3] = v15 - a2;
        if (v15 < a2)
        {
          if (gLogDatapath)
          {
            __int16 v51 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              int v52 = v14[3];
              *(_DWORD *)buf = 136446978;
              id v91 = "_http_safe_append";
              v92 = 2082;
              int v93 = "*remaining";
              v94 = 2048;
              v95 = a2;
              int v96 = 2048;
              BOOL v97 = v52;
              _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
            }
          }

          v14[3] = 0LL;
        }

        unint64_t v6 = &v13[a2];
        *((void *)v85 + 3) = v6;
LABEL_13:
        if (!a3)
        {
LABEL_25:
          unint64_t v23 = 1LL;
LABEL_26:
          _Block_object_dispose(&v80, 8);
          _Block_object_dispose(type, 8);
          return v23;
        }

        id v16 = v81;
        if (v81[3])
        {
          *unint64_t v6 = 0;
          uint64_t v17 = v16[3];
          v16[3] = v17 - 1;
          if (!v17)
          {
            if (gLogDatapath)
            {
              os_log_type_t v58 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                BOOL v59 = v16[3];
                *(_DWORD *)buf = 136446978;
                id v91 = "_http_safe_append";
                v92 = 2082;
                int v93 = "*remaining";
                v94 = 2048;
                v95 = 1LL;
                int v96 = 2048;
                BOOL v97 = v59;
                _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
              }
            }

            v16[3] = 0LL;
          }

          os_log_type_t v18 = v6 + 1;
          *((void *)v85 + 3) = v6 + 1;
          if (!a4) {
            goto LABEL_20;
          }
          v78[0] = MEMORY[0x1895F87A8];
          v78[1] = 0x40000000LL;
          v78[2] = __nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke;
          v78[3] = &unk_189BBF778;
          v78[4] = type;
          v78[5] = &v80;
          char v19 = a4;
          unsigned int v20 = v78;
          _nw_http_fields_enumerate_const_field((uint64_t)v19, v20);

          os_log_type_t v18 = (_BYTE *)*((void *)v85 + 3);
          if (!v18)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            id v91 = "_http_safe_append";
            uint64_t v45 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            id v89 = OS_LOG_TYPE_DEFAULT;
            if (__src == 17)
            {
              id v46 = (os_log_s *)__nwlog_obj();
              v47 = __src;
              if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                goto LABEL_204;
              }
              *(_DWORD *)buf = 136446210;
              id v91 = "_http_safe_append";
              objc_super v48 = "%{public}s called with null buffer";
              goto LABEL_203;
            }

            if (v89 == OS_LOG_TYPE_DEFAULT)
            {
              id v46 = (os_log_s *)__nwlog_obj();
              v47 = __src;
              if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                goto LABEL_204;
              }
              *(_DWORD *)buf = 136446210;
              id v91 = "_http_safe_append";
              objc_super v48 = "%{public}s called with null buffer, backtrace limit exceeded";
              goto LABEL_203;
            }

            v62 = (char *)__nw_create_backtrace_string();
            id v46 = (os_log_s *)__nwlog_obj();
            v47 = __src;
            v63 = os_log_type_enabled(v46, (os_log_type_t)__src);
            if (!v62)
            {
              if (!v63) {
                goto LABEL_204;
              }
              *(_DWORD *)buf = 136446210;
              id v91 = "_http_safe_append";
              objc_super v48 = "%{public}s called with null buffer, no backtrace";
              goto LABEL_203;
            }

            if (v63)
            {
              *(_DWORD *)buf = 136446466;
              id v91 = "_http_safe_append";
              v92 = 2082;
              int v93 = v62;
              _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v62);
          }

          else
          {
LABEL_20:
            int v21 = v81;
            if (v81[3])
            {
              void *v18 = 0;
              unint64_t v22 = v21[3];
              v21[3] = v22 - 1;
              if (!v22)
              {
                if (gLogDatapath)
                {
                  os_log_type_t v64 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
                    int v65 = v21[3];
                    *(_DWORD *)buf = 136446978;
                    id v91 = "_http_safe_append";
                    v92 = 2082;
                    int v93 = "*remaining";
                    v94 = 2048;
                    v95 = 1LL;
                    int v96 = 2048;
                    BOOL v97 = v65;
                    _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
                  }
                }

                v21[3] = 0LL;
              }

              *((void *)v85 + 3) = v18 + 1;
              goto LABEL_25;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            id v91 = "_http_safe_append";
            uint64_t v45 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            id v89 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v45, &__src, &v89))
            {
              if (__src == 17)
              {
                id v46 = (os_log_s *)__nwlog_obj();
                v47 = __src;
                if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                  goto LABEL_204;
                }
                *(_DWORD *)buf = 136446210;
                id v91 = "_http_safe_append";
                objc_super v48 = "%{public}s called with null (*remaining >= length)";
                goto LABEL_203;
              }

              if (v89 == OS_LOG_TYPE_DEFAULT)
              {
                id v46 = (os_log_s *)__nwlog_obj();
                v47 = __src;
                if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                  goto LABEL_204;
                }
                *(_DWORD *)buf = 136446210;
                id v91 = "_http_safe_append";
                objc_super v48 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
                goto LABEL_203;
              }

              v66 = (char *)__nw_create_backtrace_string();
              id v46 = (os_log_s *)__nwlog_obj();
              v47 = __src;
              os_log_type_t v67 = os_log_type_enabled(v46, (os_log_type_t)__src);
              if (v66)
              {
                if (v67)
                {
                  *(_DWORD *)buf = 136446466;
                  id v91 = "_http_safe_append";
                  v92 = 2082;
                  int v93 = v66;
                  _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v66);
                if (!v45) {
                  goto LABEL_206;
                }
                goto LABEL_205;
              }

              if (v67)
              {
                *(_DWORD *)buf = 136446210;
                id v91 = "_http_safe_append";
                objc_super v48 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_203:
                _os_log_impl(&dword_181A5C000, v46, v47, v48, buf, 0xCu);
              }
            }
          }

          object = 0LL;
        }

        goto LABEL_21;
      case 158:
        if (object)
        {
          *(void *)buf = 0LL;
          asprintf((char **)buf, "%.*s", v18, (const char *)v29);
          nw_endpoint_set_device_id(object, *(const char **)buf);
          if (*(void *)buf) {
            free(*(void **)buf);
          }
          goto LABEL_21;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v72 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply endpoint device id to",  buf,  0xCu);
        }

        goto LABEL_159;
      case 159:
        if (object)
        {
          [MEMORY[0x189603F48] dataWithBytes:v29 length:v18];
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
          nw_endpoint_append_public_key(object, v34);

          goto LABEL_21;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v72 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply public key to",  buf,  0xCu);
        }

        goto LABEL_159;
      case 200:
        uint64_t v37 = nw_path_copy_endpoint_from_tlv(200, v18, v29);

        object = v37;
        if (object) {
          objc_storeStrong(location, v37);
        }

        goto LABEL_21;
      case 201:
        uint64_t v41 = nw_path_copy_endpoint_from_tlv(201, v18, v29);

        os_log_type_t v42 = v41;
        object = v42;
        if (v42)
        {
          endpoint = v4->endpoint;
          dispatch_time_t v44 = v42;
          if (endpoint)
          {
            is_equal = nw_endpoint_is_equal(v42, endpoint, 0LL);
            id v46 = v4->endpoint;
            if ((is_equal & 1) != 0)
            {
              dispatch_time_t v44 = v4->endpoint;
            }

            else
            {
              dispatch_time_t v44 = object;
              if (v46)
              {
                dispatch_time_t v44 = object;
                nw_endpoint_clone_parent_endpoint_properties(object, v46);
              }
            }
          }

          v78 = v44;
          v79 = v10->remote_endpoint;
          v10->remote_endpoint = v78;

          os_log_type_t v42 = object;
        }

        goto LABEL_21;
      case 202:
        v56 = nw_path_copy_endpoint_from_tlv(202, v18, v29);

        nw_endpoint_t v57 = v56;
        os_log_type_t v32 = v57;
        object = v57;
        if (v57)
        {
          nw_endpoint_set_interface(v57, v10->interface);
          discovered_endpoints = (uint64_t)v10->discovered_endpoints;
          if (!discovered_endpoints)
          {
            BOOL v59 = nw_array_create();
            os_log_type_t v60 = v10->discovered_endpoints;
            v10->discovered_endpoints = (OS_nw_array *)v59;

            discovered_endpoints = (uint64_t)v10->discovered_endpoints;
          }

          os_log_type_t v32 = object;
          nw_array_append(discovered_endpoints, object);
        }

        goto LABEL_20;
      case 203:
        __int16 v51 = nw_path_copy_endpoint_from_tlv(203, v18, v29);

        int v52 = v51;
        if (v52)
        {
          resolved_endpoints = (uint64_t)v10->resolved_endpoints;
          if (!resolved_endpoints)
          {
            unint64_t v54 = nw_array_create();
            size_t v55 = v10->resolved_endpoints;
            v10->resolved_endpoints = (OS_nw_array *)v54;

            resolved_endpoints = (uint64_t)v10->resolved_endpoints;
          }

          nw_array_append(resolved_endpoints, v52);
        }

        object = v52;

        goto LABEL_21;
      case 204:
        if ((_DWORD)v18 == 6) {
          goto LABEL_57;
        }
        if (v18 >= 7)
        {
          __nwlog_obj();
          uint64_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 204;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v18;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 6;
            _os_log_impl( &dword_181A5C000,  v101,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_57:
          v175 = *(_DWORD *)v29;
          v176 = *((_WORD *)v29 + 2);
        }

        BYTE4(v170) = 1;
        goto LABEL_21;
      case 205:
        if ((_DWORD)v18 == 6) {
          goto LABEL_83;
        }
        if (v18 >= 7)
        {
          __nwlog_obj();
          int v104 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 205;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v18;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 6;
            _os_log_impl( &dword_181A5C000,  v104,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_83:
          v173 = *(_DWORD *)v29;
          v174 = *((_WORD *)v29 + 2);
        }

        LOBYTE(v170) = 1;
        goto LABEL_21;
      case 216:
        if ((_DWORD)v18 == 8) {
          goto LABEL_125;
        }
        uint64_t v110 = v4;
        __nwlog_obj();
        uint64_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v118 = v117;
        if (v18 >= 9)
        {
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 216;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v18;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 8;
            _os_log_impl( &dword_181A5C000,  v118,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_125:
          id v61 = *(_DWORD *)v29;
          if (*(_DWORD *)v29 >> 8 == 16776959)
          {
            dns_error = (OS_nw_error *)nw_error_create_dns_error(v61);
          }

          else if ((v61 + 9899) > 0x63)
          {
            dns_error = (OS_nw_error *)nw_error_create_posix_error(v61);
          }

          else
          {
            dns_error = (OS_nw_error *)nw_error_create_tls_error(v61);
          }

          error = v10->error;
          v10->error = dns_error;

          goto LABEL_21;
        }

        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v18;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = 8LL;
        nw_endpoint_t v113 = (char *)_os_log_send_and_compose_impl();

        v178[0] = 16;
        v177 = 0;
        if (v178[0] == 17)
        {
          __nwlog_obj();
          size_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v121 = v178[0];
          if (os_log_type_enabled(v114, (os_log_type_t)v178[0]))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v18;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = 8LL;
            _os_log_impl( &dword_181A5C000,  v114,  v121,  "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu",  buf,  0x1Cu);
          }

          goto LABEL_302;
        }

        if (v177)
        {
          BOOL v125 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v127 = v178[0];
          uint64_t v128 = os_log_type_enabled(v126, (os_log_type_t)v178[0]);
          if (v125)
          {
            if (v128)
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v18;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = 8LL;
              *(_WORD *)&buf[28] = 2082;
              *(void *)&buf[30] = v125;
              _os_log_impl( &dword_181A5C000,  v126,  v127,  "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu, dumping backtrace:%{public}s",  buf,  0x26u);
            }

            free(v125);
          }

          else
          {
            if (v128)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v18;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = 8LL;
              _os_log_impl( &dword_181A5C000,  v126,  v127,  "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu, no backtrace",  buf,  0x1Cu);
            }
          }

          goto LABEL_306;
        }

        __nwlog_obj();
        size_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v130 = v178[0];
        if (os_log_type_enabled(v114, (os_log_type_t)v178[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v18;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = 8LL;
          _os_log_impl( &dword_181A5C000,  v114,  v130,  "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu, backtrace limit exceeded",  buf,  0x1Cu);
        }

        goto LABEL_302;
      case 222:
        if (v10->assigned_protocol)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v32 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            assigned_protocol = v10->assigned_protocol;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = assigned_protocol;
            _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s Flow already has protocol %@ assigned, ignoring extra protocol",  buf,  0x16u);
          }

    if (v64) {
      free(v64);
    }
    goto LABEL_50;
  }

  v78 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
  *(_DWORD *)aBlock = 136446722;
  *(void *)&aBlock[4] = "strict_calloc";
  *(_WORD *)&aBlock[12] = 2048;
  *(void *)&aBlock[14] = 1LL;
  *(_WORD *)&aBlock[22] = 2048;
  uint64_t v128 = 136LL;
  v79 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v79);
  if (!result)
  {
    free(v79);
    goto LABEL_43;
  }

  __break(1u);
  return result;
}

          goto LABEL_160;
        }
      }

      else if (v9)
      {
        goto LABEL_19;
      }

      v95 = *(void *)(a1 + 40);
      if (v95)
      {
        int v96 = *(id *)(v95 + 88);
        if (v96)
        {
LABEL_175:
          if (gLogDatapath)
          {
            v111 = v96;
            if (__nwlog_url_log::onceToken != -1) {
              dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
            }
            v112 = (os_log_s *)(id)gurlLogObj;
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
            {
              nw_endpoint_t v113 = *(void *)(a1 + 40);
              if (v113 && (size_t v114 = *(id *)(v113 + 48)) != 0LL)
              {
                uint64_t v115 = v114;
                [v114 logDescription];
              }

              else
              {
                uint64_t v115 = 0LL;
                v143[0] = 0LL;
                v143[1] = 0LL;
                v144 = 0;
              }

              v116 = *(void *)(a1 + 40);
              if (v116 && (uint64_t v117 = *(id *)(v116 + 48)) != 0LL)
              {
                uint64_t v118 = v117;
                [v117 logDescription];
                v119 = v142;
              }

              else
              {
                v119 = 0;
                uint64_t v118 = 0LL;
                v140 = 0LL;
                v141 = 0LL;
                v142 = 0;
              }

              *(_DWORD *)os_log_type_t v135 = 136447234;
              *(void *)&v135[4] = "-[NWURLLoaderHTTP readResponse]_block_invoke";
              *(_WORD *)&v135[12] = 1042;
              *(_DWORD *)&v135[14] = 16;
              *(_WORD *)&v135[18] = 2098;
              *(void *)&v135[20] = v143;
              *(_WORD *)&v135[28] = 1024;
              *(_DWORD *)&v135[30] = v119;
              *(_WORD *)&v135[34] = 2112;
              *(void *)&v135[36] = v126;
              _os_log_impl( &dword_181A5C000,  v112,  OS_LOG_TYPE_DEBUG,  "%{public}s Task <%{public,uuid_t}.16P>.<%u> received no response with error: %@",  v135,  0x2Cu);
            }

            int v96 = v111;
          }

          __int16 v124 = (nw_protocol_metadata_t)v96;
          (*((void (**)(id, void, id))newValue + 2))(newValue, 0LL, v96);
          goto LABEL_71;
        }

        BOOL v97 = *(id **)(a1 + 40);
        if (v10) {
          goto LABEL_129;
        }
      }

      else
      {
        BOOL v97 = 0LL;
        if (v10)
        {
LABEL_129:
          int v98 = -[NWURLLoaderHTTP errorForNWError:](v97, v10);
LABEL_174:
          int v96 = (id)v98;
          goto LABEL_175;
        }
      }

      int v98 = -[NWURLLoaderHTTP errorForErrorCode:](v97, -1011LL);
      goto LABEL_174;
    }

        goto LABEL_229;
      }

      if (!v162)
      {
        __nwlog_obj();
        __int16 v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v151 = v163;
        if (os_log_type_enabled(v124, v163))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_used_tfo";
          _os_log_impl( &dword_181A5C000,  v124,  v151,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_159;
      }

      v140 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      HIDWORD(v159) = v163;
      v142 = os_log_type_enabled(v141, v163);
      if (v140)
      {
        if (v142)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_used_tfo";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v140;
          _os_log_impl( &dword_181A5C000,  v141,  BYTE4(v159),  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v140);
      }

      else
      {
        if (v142)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_used_tfo";
          _os_log_impl( &dword_181A5C000,  v141,  BYTE4(v159),  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
        }
      }

            if (v51) {
              free(v51);
            }
LABEL_16:
            if (v14)
            {
              int v21 = *(void *)(v14 + 24);
              if (v21)
              {
                unint64_t v22 = *(void (**)(uint64_t, void))(v21 + 24);
                if (v22)
                {
                  v22(v14, 0LL);
LABEL_20:

LABEL_21:
                  return;
                }
              }

              __nwlog_obj();
              size_t v29 = (void *)objc_claimAutoreleasedReturnValue();
              size_t v30 = *(const char **)(v14 + 16);
              if (!v30) {
                size_t v30 = "invalid";
              }
            }

            else
            {
              __nwlog_obj();
              size_t v29 = (void *)objc_claimAutoreleasedReturnValue();
              size_t v30 = "invalid";
            }

            *(_DWORD *)buf = 136446466;
            v94 = "nw_agent_client_attach_protocol_block_invoke";
            v95 = 2082;
            *(void *)int v96 = v30;
            BOOL v59 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            id v91 = 0;
            if (__nwlog_fault(v59, &type, &v91))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                id v61 = type;
                if (os_log_type_enabled(v60, type))
                {
                  v62 = "invalid";
                  if (v14 && *(void *)(v14 + 16)) {
                    v62 = *(const char **)(v14 + 16);
                  }
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(void *)int v96 = v62;
                  _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s protocol %{public}s has invalid connect callback",  buf,  0x16u);
                }
              }

              else if (v91)
              {
                v63 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v64 = type;
                int v65 = os_log_type_enabled(v60, type);
                if (v63)
                {
                  if (v65)
                  {
                    v66 = "invalid";
                    if (v14 && *(void *)(v14 + 16)) {
                      v66 = *(const char **)(v14 + 16);
                    }
                    *(_DWORD *)buf = 136446722;
                    v94 = "nw_agent_client_attach_protocol_block_invoke";
                    v95 = 2082;
                    *(void *)int v96 = v66;
                    *(_WORD *)&v96[8] = 2082;
                    *(void *)&v96[10] = v63;
                    _os_log_impl( &dword_181A5C000,  v60,  v64,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
                  }

                  free(v63);
                  goto LABEL_167;
                }

                if (v65)
                {
                  uint64_t v86 = "invalid";
                  if (v14 && *(void *)(v14 + 16)) {
                    uint64_t v86 = *(const char **)(v14 + 16);
                  }
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(void *)int v96 = v86;
                  _os_log_impl( &dword_181A5C000,  v60,  v64,  "%{public}s protocol %{public}s has invalid connect callback, no backtrace",  buf,  0x16u);
                }
              }

              else
              {
                __nwlog_obj();
                os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                unint64_t v71 = type;
                if (os_log_type_enabled(v60, type))
                {
                  BOOL v72 = "invalid";
                  if (v14 && *(void *)(v14 + 16)) {
                    BOOL v72 = *(const char **)(v14 + 16);
                  }
                  *(_DWORD *)buf = 136446466;
                  v94 = "nw_agent_client_attach_protocol_block_invoke";
                  v95 = 2082;
                  *(void *)int v96 = v72;
                  _os_log_impl( &dword_181A5C000,  v60,  v71,  "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded",  buf,  0x16u);
                }
              }
            }

    goto LABEL_160;
  }

  uint64_t v17 = (unsigned int *)v14;
  os_log_type_t v18 = v17[29];

  if ((_DWORD)v18 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v27 = (id)gLogObj;
    else {
      BOOL v28 = off_189BBBBC0[v18];
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    int v104 = 2082;
    char v105 = (void *)v28;
    v106 = 2082;
    v107 = "flow";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (__nwlog_fault(v35, &type, &v100))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)(id)gLogObj;
        uint64_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          else {
            v38 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          int v104 = 2082;
          char v105 = (void *)v38;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v100)
      {
        int v39 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)(id)gLogObj;
        id v40 = type;
        uint64_t v41 = os_log_type_enabled(v36, type);
        if (v39)
        {
          if (v41)
          {
            else {
              os_log_type_t v42 = off_189BBBBC0[v18];
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
            int v104 = 2082;
            char v105 = (void *)v42;
            v106 = 2082;
            v107 = "flow";
            uint64_t v108 = 2082;
            uint64_t v109 = v39;
            _os_log_impl( &dword_181A5C000,  v36,  v40,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v39);
          if (!v35) {
            goto LABEL_73;
          }
LABEL_71:
          id v46 = (char *)v35;
LABEL_72:
          free(v46);
          goto LABEL_73;
        }

        if (v41)
        {
          else {
            uint64_t v45 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          int v104 = 2082;
          char v105 = (void *)v45;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v40,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)(id)gLogObj;
        BOOL v43 = type;
        if (os_log_type_enabled(v36, type))
        {
          else {
            dispatch_time_t v44 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          int v104 = 2082;
          char v105 = (void *)v44;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v43,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v35)
    {
LABEL_73:
      registered_endpoint = 0LL;
      goto LABEL_74;
    }

    goto LABEL_71;
  }

  if (!identifier)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    BOOL v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v63, "%{public}s called with null identifier", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (!v100)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v79 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v79,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_159;
    }

    unint64_t v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v72 = type;
    size_t v73 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v72, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (v73)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
      int v104 = 2082;
      char v105 = v71;
      _os_log_impl( &dword_181A5C000,  v60,  v72,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_126;
  }

  if (!v15)
  {
    __nwlog_obj();
    os_log_type_t v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    BOOL v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v68 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v68, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (!v100)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v80 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v80,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_159;
    }

    unint64_t v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v74 = type;
    size_t v75 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v74, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (v75)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
      int v104 = 2082;
      char v105 = v71;
      _os_log_impl( &dword_181A5C000,  v60,  v74,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_126;
  }

  if (!v16)
  {
    __nwlog_obj();
    os_log_type_t v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    BOOL v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v70 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v70, "%{public}s called with null parameters", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (!v100)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v81 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v81,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_159;
    }

    unint64_t v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    dispatch_data_t v76 = type;
    v77 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v77)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v76, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (v77)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
      int v104 = 2082;
      char v105 = v71;
      _os_log_impl( &dword_181A5C000,  v60,  v76,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_160;
  }

  uint64_t v17 = (unsigned int *)v14;
  os_log_type_t v18 = v17[29];

  if ((_DWORD)v18 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v27 = (id)gLogObj;
    else {
      BOOL v28 = off_189BBBBC0[v18];
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    int v104 = 2082;
    char v105 = (void *)v28;
    v106 = 2082;
    v107 = "flow";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (__nwlog_fault(v35, &type, &v100))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)(id)gLogObj;
        uint64_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          else {
            v38 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          int v104 = 2082;
          char v105 = (void *)v38;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v100)
      {
        int v39 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)(id)gLogObj;
        id v40 = type;
        uint64_t v41 = os_log_type_enabled(v36, type);
        if (v39)
        {
          if (v41)
          {
            else {
              os_log_type_t v42 = off_189BBBBC0[v18];
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
            int v104 = 2082;
            char v105 = (void *)v42;
            v106 = 2082;
            v107 = "flow";
            uint64_t v108 = 2082;
            uint64_t v109 = v39;
            _os_log_impl( &dword_181A5C000,  v36,  v40,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v39);
          if (!v35) {
            goto LABEL_73;
          }
LABEL_71:
          id v46 = (char *)v35;
LABEL_72:
          free(v46);
          goto LABEL_73;
        }

        if (v41)
        {
          else {
            uint64_t v45 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          int v104 = 2082;
          char v105 = (void *)v45;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v40,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)(id)gLogObj;
        BOOL v43 = type;
        if (os_log_type_enabled(v36, type))
        {
          else {
            dispatch_time_t v44 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
          int v104 = 2082;
          char v105 = (void *)v44;
          v106 = 2082;
          v107 = "flow";
          _os_log_impl( &dword_181A5C000,  v36,  v43,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v35)
    {
LABEL_73:
      registered_endpoint = 0LL;
      goto LABEL_74;
    }

    goto LABEL_71;
  }

  if (!identifier)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    BOOL v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v63, "%{public}s called with null identifier", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (!v100)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v79 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v79,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_159;
    }

    unint64_t v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v72 = type;
    size_t v73 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v72, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (v73)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
      int v104 = 2082;
      char v105 = v71;
      _os_log_impl( &dword_181A5C000,  v60,  v72,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_126;
  }

  if (!v15)
  {
    __nwlog_obj();
    os_log_type_t v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    BOOL v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v68 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v68, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (!v100)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v80 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v80,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_159;
    }

    unint64_t v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v74 = type;
    size_t v75 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v74, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (v75)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
      int v104 = 2082;
      char v105 = v71;
      _os_log_impl( &dword_181A5C000,  v60,  v74,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_126;
  }

  if (!v16)
  {
    __nwlog_obj();
    os_log_type_t v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
    BOOL v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v100 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v70 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v70, "%{public}s called with null parameters", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (!v100)
    {
      __nwlog_obj();
      os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v81 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v60,  v81,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_159;
    }

    unint64_t v71 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    dispatch_data_t v76 = type;
    v77 = os_log_type_enabled(v60, type);
    if (!v71)
    {
      if (v77)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v60, v76, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }

      goto LABEL_159;
    }

    if (v77)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v103 = "nw_endpoint_flow_find_protocol_to_join";
      int v104 = 2082;
      char v105 = v71;
      _os_log_impl( &dword_181A5C000,  v60,  v76,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v68) {
      free(v68);
    }
    goto LABEL_46;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v117 = "__nw_protocol_finalize_output_frames";
  BOOL v35 = _os_log_send_and_compose_impl();
  uint64_t v115 = OS_LOG_TYPE_ERROR;
  size_t v114 = 0;
  if (!__nwlog_fault((const char *)v35, &v115, &v114))
  {
LABEL_166:
    if (!v35) {
      goto LABEL_48;
    }
    goto LABEL_76;
  }

  if (v115 == OS_LOG_TYPE_FAULT)
  {
    v77 = (os_log_s *)__nwlog_obj();
    v78 = v115;
    if (!os_log_type_enabled(v77, v115)) {
      goto LABEL_166;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v117 = "__nw_protocol_finalize_output_frames";
    v79 = "%{public}s called with null protocol";
LABEL_165:
    _os_log_impl(&dword_181A5C000, v77, v78, v79, buf, 0xCu);
    goto LABEL_166;
  }

  if (!v114)
  {
    v77 = (os_log_s *)__nwlog_obj();
    v78 = v115;
    if (!os_log_type_enabled(v77, v115)) {
      goto LABEL_166;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v117 = "__nw_protocol_finalize_output_frames";
    v79 = "%{public}s called with null protocol, backtrace limit exceeded";
    goto LABEL_165;
  }

  v88 = (char *)__nw_create_backtrace_string();
  v77 = (os_log_s *)__nwlog_obj();
  v78 = v115;
  id v89 = os_log_type_enabled(v77, v115);
  if (!v88)
  {
    if (!v89) {
      goto LABEL_166;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v117 = "__nw_protocol_finalize_output_frames";
    v79 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_165;
  }

  if (v89)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v117 = "__nw_protocol_finalize_output_frames";
    uint64_t v118 = 2082;
    v119 = v88;
    _os_log_impl( &dword_181A5C000,  v77,  v78,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v88);
  if (!v35) {
    goto LABEL_48;
  }
LABEL_76:
  free((void *)v35);
LABEL_48:
  _Block_object_dispose(v111, 8);
LABEL_49:
  nw_frame_free_buffer((uint64_t)a1);
  id v40 = *((void *)a1 + 2);
  uint64_t v41 = (void *)*((void *)a1 + 3);
  if (v40)
  {
    *(void *)(v40 + 24) = v41;
    uint64_t v41 = (void *)*((void *)a1 + 3);
  }

  else
  {
    a3[16] = v41;
  }

  *uint64_t v41 = v40;
  *((void *)a1 + 2) = 0LL;
  *((void *)a1 + 3) = 0LL;
  os_release(a1);
}

void sub_181B97404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id *location, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, id a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
  _Unwind_Resume(a1);
}

BOOL nw_read_request_list_remove_head(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unsigned int v20 = "nw_read_request_list_remove_head";
    nw_protocol_definition_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v20 = "nw_read_request_list_remove_head";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null head", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v20 = "nw_read_request_list_remove_head";
            __int16 v21 = 2082;
            unint64_t v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null head, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v20 = "nw_read_request_list_remove_head";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null head, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v20 = "nw_read_request_list_remove_head";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null head, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B97844( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_read_request;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_endpoint_enumerate_cnames(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v26 = "nw_endpoint_enumerate_cnames";
    nw_protocol_definition_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v26 = "nw_endpoint_enumerate_cnames";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          size_t v26 = "nw_endpoint_enumerate_cnames";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        size_t v26 = "nw_endpoint_enumerate_cnames";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v26 = "nw_endpoint_enumerate_cnames";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL __nw_endpoint_enumerate_cnames_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = nw_endpoint_get_type(v4) != nw_endpoint_type_host

  return v5;
}

void sub_181B97E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_increment_estimated_bytes(void *a1, char a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  unint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_connection_increment_estimated_bytes";
    nw_protocol_definition_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_connection_increment_estimated_bytes";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v24 = "nw_connection_increment_estimated_bytes";
          __int16 v25 = 2082;
          size_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_connection_increment_estimated_bytes";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_connection_increment_estimated_bytes";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181B9835C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_modify_estimated_bytes(void *a1, char a2, char a3, uint64_t a4)
{
  id v7 = a1;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  v9[2] = __nw_connection_modify_estimated_bytes_block_invoke;
  v9[3] = &unk_189BC9418;
  char v12 = a2;
  id v8 = v7;
  char v13 = a3;
  id v10 = v8;
  uint64_t v11 = a4;
  nw_connection_async_if_needed(v8, v9);
}

void sub_181B983FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_connection_modify_estimated_bytes_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 48))
  {
    unint64_t v4 = *(void *)(v2 + 304);
    if (*(_BYTE *)(a1 + 49))
    {
      *(void *)(v2 + 304) = v4 + v3;
      if (!__CFADD__(v4, v3)) {
        goto LABEL_22;
      }
      if (!gLogDatapath)
      {
        uint64_t v5 = -1LL;
LABEL_20:
        unint64_t v6 = &OBJC_IVAR___NWConcrete_nw_connection_estimated_bytes_upload;
        goto LABEL_21;
      }

      __nwlog_obj();
      v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = *(void *)(a1 + 40);
        uint64_t v42 = *(void *)(*(void *)(a1 + 32) + 304LL);
        int v47 = 136446978;
        objc_super v48 = "nw_connection_modify_estimated_bytes_block_invoke";
        __int16 v49 = 2082;
        *(void *)uint64_t v50 = "connection->estimated_bytes_upload";
        *(_WORD *)&v50[8] = 2048;
        *(void *)&v50[10] = v41;
        *(_WORD *)&v50[18] = 2048;
        *(void *)&v50[20] = v42;
        _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  (uint8_t *)&v47,  0x2Au);
      }

      uint64_t v5 = -1LL;
    }

    else
    {
      *(void *)(v2 + 304) = v4 - v3;
      if (v4 >= v3)
      {
LABEL_22:
        unint64_t v6 = &OBJC_IVAR___NWConcrete_nw_connection_estimated_bytes_upload;
        goto LABEL_23;
      }

      if (!gLogDatapath)
      {
        uint64_t v5 = 0LL;
        goto LABEL_20;
      }

      __nwlog_obj();
      v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v45 = *(void *)(a1 + 40);
        uint64_t v46 = *(void *)(*(void *)(a1 + 32) + 304LL);
        int v47 = 136446978;
        objc_super v48 = "nw_connection_modify_estimated_bytes_block_invoke";
        __int16 v49 = 2082;
        *(void *)uint64_t v50 = "connection->estimated_bytes_upload";
        *(_WORD *)&v50[8] = 2048;
        *(void *)&v50[10] = v45;
        *(_WORD *)&v50[18] = 2048;
        *(void *)&v50[20] = v46;
        _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  (uint8_t *)&v47,  0x2Au);
      }

      uint64_t v5 = 0LL;
    }

    unint64_t v6 = &OBJC_IVAR___NWConcrete_nw_connection_estimated_bytes_upload;
    goto LABEL_87;
  }

  unint64_t v4 = *(void *)(v2 + 296);
  if (*(_BYTE *)(a1 + 49))
  {
    *(void *)(v2 + 296) = v4 + v3;
    if (!__CFADD__(v4, v3)) {
      goto LABEL_16;
    }
    if (!gLogDatapath)
    {
      uint64_t v5 = -1LL;
LABEL_15:
      unint64_t v6 = &OBJC_IVAR___NWConcrete_nw_connection_estimated_bytes_download;
LABEL_21:
      *(void *)(*(void *)(a1 + 32) + *v6) = v5;
      goto LABEL_23;
    }

    __nwlog_obj();
    v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = *(void *)(a1 + 40);
      uint64_t v40 = *(void *)(*(void *)(a1 + 32) + 296LL);
      int v47 = 136446978;
      objc_super v48 = "nw_connection_modify_estimated_bytes_block_invoke";
      __int16 v49 = 2082;
      *(void *)uint64_t v50 = "connection->estimated_bytes_download";
      *(_WORD *)&v50[8] = 2048;
      *(void *)&v50[10] = v39;
      *(_WORD *)&v50[18] = 2048;
      *(void *)&v50[20] = v40;
      _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  (uint8_t *)&v47,  0x2Au);
    }

    uint64_t v5 = -1LL;
LABEL_82:
    unint64_t v6 = &OBJC_IVAR___NWConcrete_nw_connection_estimated_bytes_download;
LABEL_87:

    goto LABEL_21;
  }

  *(void *)(v2 + 296) = v4 - v3;
  if (v4 < v3)
  {
    if (!gLogDatapath)
    {
      uint64_t v5 = 0LL;
      goto LABEL_15;
    }

    __nwlog_obj();
    v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = *(void *)(a1 + 40);
      uint64_t v44 = *(void *)(*(void *)(a1 + 32) + 296LL);
      int v47 = 136446978;
      objc_super v48 = "nw_connection_modify_estimated_bytes_block_invoke";
      __int16 v49 = 2082;
      *(void *)uint64_t v50 = "connection->estimated_bytes_download";
      *(_WORD *)&v50[8] = 2048;
      *(void *)&v50[10] = v43;
      *(_WORD *)&v50[18] = 2048;
      *(void *)&v50[20] = v44;
      _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  (uint8_t *)&v47,  0x2Au);
    }

    uint64_t v5 = 0LL;
    goto LABEL_82;
  }

id nw_connection_copy_metadata(void *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    uint64_t v27 = __Block_byref_object_copy__24148;
    uint64_t v28 = __Block_byref_object_dispose__24149;
    id v29 = 0LL;
    *(void *)os_log_type_t type = 0LL;
    id v22 = type;
    uint64_t v23 = 0x2020000000LL;
    char v24 = 0;
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 3221225472LL;
    v17[2] = __nw_connection_copy_metadata_block_invoke;
    v17[3] = &unk_189BC16A8;
    unint64_t v3 = v1;
    BOOL v18 = v3;
    os_log_type_t v19 = type;
    unint64_t v20 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_metadata_block_invoke(v17);
    os_unfair_lock_unlock(v2 + 34);
    uint64_t v4 = *(void *)&buf[8];
    if (*((_BYTE *)v22 + 24) && !*(void *)(*(void *)&buf[8] + 40LL))
    {
      id v5 = nw_parameters_copy_metadata(v3[2]);
      unint64_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
      *(void *)(*(void *)&buf[8] + 40LL) = v5;

      uint64_t v4 = *(void *)&buf[8];
    }

    id v7 = *(id *)(v4 + 40);

    _Block_object_dispose(type, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_metadata";
  id v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v10, type, &v25))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_metadata";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_metadata";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_metadata";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_connection_copy_metadata_block_invoke(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1[4];
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
    unint64_t v6 = (os_unfair_lock_s *)*(id *)(a1[4] + 144LL);
    id v7 = v6;
    if (v6)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      id v29 = __Block_byref_object_copy__31072;
      uint64_t v30 = __Block_byref_object_dispose__31073;
      id v31 = 0LL;
      os_unfair_lock_lock(v6 + 28);
      int v8 = nw_endpoint_flow_uses_flow_divert(*(void **)&v7[62]._os_unfair_lock_opaque);
      os_unfair_lock_unlock(v7 + 28);
      if (v8)
      {
        uint64_t v9 = v7;
        os_unfair_lock_lock(v7 + 28);
        if (v9[29]._os_unfair_lock_opaque == 2) {
          id v10 = nw_endpoint_flow_copy_connected_socket_wrapper(*(void **)&v7[62]._os_unfair_lock_opaque);
        }
        else {
          id v10 = 0LL;
        }
        os_unfair_lock_unlock(v7 + 28);

        if (v10)
        {
          *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
          uint64_t v23 = 3221225472LL;
          char v24 = __nw_endpoint_handler_copy_metadata_block_invoke;
          char v25 = &unk_189BC78E8;
          uint64_t v26 = buf;
          nw_fd_wrapper_get_fd(v10, type);
        }
      }

      id v11 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

LABEL_19:
      uint64_t v12 = *(void *)(a1[6] + 8LL);
      int v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_metadata";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v15, type, &v27))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_metadata";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type[0];
        BOOL v20 = os_log_type_enabled(v16, type[0]);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_metadata";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_metadata";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_metadata";
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B99440( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_uses_flow_divert(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 220);
    if ((v2[8]._os_unfair_lock_opaque & 2) != 0 || (v2[8]._os_unfair_lock_opaque & 0x100) != 0)
    {
      uint64_t v5 = (BYTE2(v2[8]._os_unfair_lock_opaque) >> 2) & 1;
    }

    else
    {
      uint64_t v3 = *(NWConcrete_nw_endpoint_handler **)&v2[234]._os_unfair_lock_opaque;
      if (v3)
      {
        uint64_t v4 = nw_endpoint_handler_copy_flow(v3);
        uint64_t v5 = nw_endpoint_flow_uses_flow_divert();
      }

      else
      {
        uint64_t v5 = 0LL;
      }
    }

    os_unfair_lock_unlock(v2 + 220);
    goto LABEL_8;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_endpoint_flow_uses_flow_divert";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_endpoint_flow_uses_flow_divert";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_endpoint_flow_uses_flow_divert";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_endpoint_flow_uses_flow_divert";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_endpoint_flow_uses_flow_divert";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B99764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_metadata(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[27];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_copy_metadata";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_metadata";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_copy_metadata";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_metadata";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_establishment_report_get_attempt_started_after_milliseconds(nw_establishment_report_t report)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_establishment_report_t v1 = report;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_establishment_report_get_resolution_started_after_milliseconds(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 3);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_establishment_report_get_flow_started_after_milliseconds(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 4);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_establishment_report_enumerate_resolution_reports( nw_establishment_report_t report, nw_report_resolution_report_enumerator_t enumerate_block)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_establishment_report_t v3 = report;
  nw_report_resolution_report_enumerator_t v4 = enumerate_block;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_establishment_report_enumerate_resolution_reports";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_resolution_reports";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_establishment_report_enumerate_resolution_reports";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_resolution_reports";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_resolution_reports";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_establishment_report_enumerate_resolution_reports_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t nw_resolution_report_get_milliseconds(nw_resolution_report_t resolution_report)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_resolution_report_t v1 = resolution_report;
  nw_resolution_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_resolution_report_get_milliseconds";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_resolution_report_get_milliseconds";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null resolution_report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_milliseconds";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null resolution_report, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_resolution_report_get_milliseconds";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null resolution_report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_establishment_report_enumerate_protocols( nw_establishment_report_t report, nw_report_protocol_enumerator_t enumerate_block)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_establishment_report_t v3 = report;
  nw_report_protocol_enumerator_t v4 = enumerate_block;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_establishment_report_enumerate_protocols";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_protocols";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_establishment_report_enumerate_protocols";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_protocols";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_protocols";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_establishment_report_enumerate_protocols_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t nw_establishment_report_get_duration_milliseconds(nw_establishment_report_t report)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_establishment_report_t v1 = report;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_establishment_report_get_duration_milliseconds";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_duration_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_establishment_report_get_duration_milliseconds";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_duration_milliseconds";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_duration_milliseconds";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_activity_complete_with_reason(void *a1, uint32_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_report_protocol_enumerator_t v4 = v3;
  if (v3)
  {
    nw_activity_complete_with_reason_and_underlying_error_string_internal(v3, a2, 0LL, 0, 0);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_activity_complete_with_reason";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_complete_with_reason";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_activity_complete_with_reason";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_complete_with_reason";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_activity_complete_with_reason";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B9B3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_activity_complete_with_reason_and_underlying_error(void *a1, uint32_t a2, int a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (v7)
  {
    nw_activity_complete_with_reason_and_underlying_error_string_internal(v7, a2, 0LL, a3, a4);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_activity_complete_with_reason_and_underlying_error";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_activity_complete_with_reason_and_underlying_error";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B9B678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_duration_exceeds_threshold(void *a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  nw_establishment_report_t v1 = a1;
  nw_establishment_report_t v2 = (int *)v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v31 = "nw_activity_duration_exceeds_threshold";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null activity", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (!v28)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl( &dword_181A5C000,  v12,  v25,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }

      goto LABEL_71;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      id v31 = "nw_activity_duration_exceeds_threshold";
      __int16 v32 = 2082;
      unint64_t v33 = (unint64_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_53;
  }

  if ((v1[140] & 4) == 0)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v31 = "nw_activity_duration_exceeds_threshold";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s Activity not activated, cannot check duration threshold",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (!v28)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl( &dword_181A5C000,  v12,  v26,  "%{public}s Activity not activated, cannot check duration threshold, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s Activity not activated, cannot check duration threshold, no backtrace",  buf,  0xCu);
      }

      goto LABEL_71;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      id v31 = "nw_activity_duration_exceeds_threshold";
      __int16 v32 = 2082;
      unint64_t v33 = (unint64_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s Activity not activated, cannot check duration threshold, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_53;
  }

  if ((v1[140] & 8) == 0)
  {
    __nwlog_obj();
    os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v31 = "nw_activity_duration_exceeds_threshold";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s Activity not completed, cannot check duration threshold",  buf,  0xCu);
      }

void sub_181B9BEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_get_duration(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_establishment_report_t v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_activity_get_duration";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v18 = "nw_activity_get_duration";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_activity_get_duration";
            __int16 v19 = 2082;
            BOOL v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v12,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_34;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v18 = "nw_activity_get_duration";
          _os_log_impl(&dword_181A5C000, v8, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v18 = "nw_activity_get_duration";
          _os_log_impl( &dword_181A5C000,  v8,  v14,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_activity_duration_threshold_for_label(int a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!nw_activity_label_is_valid(a1, a2))
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    uint64_t v4 = (os_log_s *)(id)gactivityLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_27;
    }
    LOWORD(v13) = 0;
    unint64_t v6 = "Returning NW_ACTIVITY_DURATION_INVALID for invalid label";
    uint64_t v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_26;
  }

  if (a1 == 11 && a2 == 5)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    uint64_t v4 = (os_log_s *)(id)gactivityLogObj;
    uint64_t v5 = 2LL;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 134218242;
      uint64_t v5 = 2LL;
      uint64_t v14 = 2LL;
      __int16 v15 = 2082;
      os_log_type_t v16 = "libnetcore:test_activity_five";
LABEL_23:
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "Returning threshold %llu for activity %{public}s",  (uint8_t *)&v13,  0x16u);
      goto LABEL_28;
    }

    goto LABEL_28;
  }

  BOOL v10 = a1 == 11 && a2 == 6;
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  uint64_t v4 = (os_log_s *)(id)gactivityLogObj;
  BOOL v11 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (!v10)
  {
    if (!v11)
    {
LABEL_27:
      uint64_t v5 = -1LL;
      goto LABEL_28;
    }

    int v13 = 136446210;
    uint64_t v14 = (uint64_t)nw_activity_domain_and_label_to_string(a1, a2);
    unint64_t v6 = "No threshold for %{public}s, returning NW_ACTIVITY_DURATION_INVALID";
    uint64_t v7 = v4;
    uint32_t v8 = 12;
LABEL_26:
    _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v13, v8);
    goto LABEL_27;
  }

  uint64_t v5 = 200000LL;
  if (v11)
  {
    int v13 = 134218242;
    uint64_t v14 = 200000LL;
    __int16 v15 = 2082;
    os_log_type_t v16 = "libnetcore:test_activity_six";
    goto LABEL_23;
  }

void sub_181B9D0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181B9D5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  unint64_t v6 = v5;
  if (!a2)
  {
    __nwlog_obj();
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint64_t v40 = "%{public}s called with null key";
LABEL_67:
        _os_log_impl(&dword_181A5C000, v38, v39, v40, applier, 0xCu);
      }
    }

    else if (v48)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      BOOL v43 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)applier = 136446466;
          *(void *)&void applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s called with null key, dumping backtrace:%{public}s",  applier,  0x16u);
        }

        free(backtrace_string);
LABEL_69:
        if (!v37) {
          goto LABEL_38;
        }
LABEL_70:
        free(v37);
        goto LABEL_38;
      }

      if (v43)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint64_t v40 = "%{public}s called with null key, no backtrace";
        goto LABEL_67;
      }
    }

    else
    {
      __nwlog_obj();
      v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint64_t v40 = "%{public}s called with null key, backtrace limit exceeded";
        goto LABEL_67;
      }
    }

id NWUtilsCreateNSObjectFromSimpleXPCObject(void *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  Class Class = object_getClass(v1);
  if (Class == (Class)MEMORY[0x1895F9228])
  {
    BOOL value = xpc_BOOL_get_value(v1);
    id v12 = (void *)MEMORY[0x189604A80];
    if (value) {
      id v12 = (void *)MEMORY[0x189604A88];
    }
    id v13 = v12;
  }

  else
  {
    Class v3 = Class;
    if (Class == (Class)MEMORY[0x1895F92E8])
    {
      string_ptr = xpc_string_get_string_ptr(v1);
      if (!string_ptr)
      {
LABEL_39:
        id v13 = 0LL;
        goto LABEL_40;
      }

      [NSString stringWithUTF8String:string_ptr];
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }

    else if (Class == (Class)MEMORY[0x1895F9240])
    {
      __int16 v15 = (void *)MEMORY[0x189603F48];
      bytes_ptr = xpc_data_get_bytes_ptr(v1);
      [v15 dataWithBytes:bytes_ptr length:xpc_data_get_length(v1)];
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }

    else if (Class == (Class)MEMORY[0x1895F9280])
    {
      [MEMORY[0x189607968] numberWithLongLong:xpc_int64_get_value(v1)];
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }

    else if (Class == (Class)MEMORY[0x1895F92F0])
    {
      [MEMORY[0x189607968] numberWithUnsignedLongLong:xpc_uint64_get_value(v1)];
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }

    else if (Class == (Class)MEMORY[0x1895F9258])
    {
      [MEMORY[0x189607968] numberWithDouble:xpc_double_get_value(v1)];
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      if (Class != (Class)MEMORY[0x1895F92F8])
      {
        uint64_t v4 = (objc_class *)MEMORY[0x1895F92B8];
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (os_log_s *)(id)gLogObj;
        unint64_t v6 = v5;
        if (v3 == v4)
        {
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Cannot encode pointer types, skipping value",  buf,  0xCu);
          }

          goto LABEL_39;
        }

        *(_DWORD *)buf = 136446466;
        os_log_type_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
        __int16 v24 = 2048;
        Class v25 = v3;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v20 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          Class v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v9 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            __int16 v24 = 2048;
            Class v25 = v3;
            id v10 = "%{public}s Cannot handle XPC type %p";
LABEL_35:
            _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0x16u);
          }
        }

        else if (v20)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          Class v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v9 = type;
          BOOL v18 = os_log_type_enabled(v8, type);
          if (backtrace_string)
          {
            if (v18)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
              __int16 v24 = 2048;
              Class v25 = v3;
              __int16 v26 = 2082;
              id v27 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Cannot handle XPC type %p, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(backtrace_string);
            goto LABEL_37;
          }

          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            __int16 v24 = 2048;
            Class v25 = v3;
            id v10 = "%{public}s Cannot handle XPC type %p, no backtrace";
            goto LABEL_35;
          }
        }

        else
        {
          __nwlog_obj();
          Class v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v9 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            __int16 v24 = 2048;
            Class v25 = v3;
            id v10 = "%{public}s Cannot handle XPC type %p, backtrace limit exceeded";
            goto LABEL_35;
          }
        }

LABEL_37:
        if (v7) {
          free(v7);
        }
        goto LABEL_39;
      }

      id v13 = (id)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:xpc_uuid_get_bytes(v1)];
    }
  }

void sub_181B9E34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_establishment_report_copy_dictionary(void *a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
    Class v3 = v2;
    uint64_t v4 = *((void *)v1 + 1);
    if (v4) {
      xpc_dictionary_set_uint64(v2, "attempt_started_after_milliseconds", v4);
    }
    uint64_t v5 = *((void *)v1 + 2);
    if (v5) {
      xpc_dictionary_set_uint64(v3, "duration_milliseconds", v5);
    }
    uint64_t v6 = *((void *)v1 + 3);
    if (v6) {
      xpc_dictionary_set_uint64(v3, "resolution_started_after_milliseconds", v6);
    }
    uint64_t v7 = *((void *)v1 + 4);
    if (v7) {
      xpc_dictionary_set_uint64(v3, "flow_started_after_milliseconds", v7);
    }
    xpc_object_t v8 = xpc_array_create(0LL, 0LL);
    os_log_type_t v9 = (unsigned __int8 *)*((void *)v1 + 5);
    uint64_t v10 = MEMORY[0x1895F87A8];
    v38[0] = MEMORY[0x1895F87A8];
    v38[1] = 3221225472LL;
    v38[2] = __nw_establishment_report_copy_dictionary_block_invoke;
    v38[3] = &unk_189BC85B0;
    id v11 = v8;
    id v39 = v11;
    nw_array_apply(v9, (uint64_t)v38);
    xpc_dictionary_set_value(v3, "proxy_endpoints", v11);
    xpc_object_t v12 = xpc_array_create(0LL, 0LL);
    id v13 = (unsigned __int8 *)*((void *)v1 + 6);
    v36[0] = v10;
    v36[1] = 3221225472LL;
    v36[2] = __nw_establishment_report_copy_dictionary_block_invoke_2;
    v36[3] = &unk_189BC85B0;
    id v14 = v12;
    id v37 = v14;
    nw_array_apply(v13, (uint64_t)v36);
    xpc_dictionary_set_value(v3, "proxied_next_hop_endpoints", v14);
    uint64_t v15 = v1[20];
    if ((_DWORD)v15) {
      xpc_dictionary_set_uint64(v3, "previous_attempt_count", v15);
    }
    char v16 = *((_BYTE *)v1 + 84);
    if ((v16 & 1) != 0)
    {
      xpc_dictionary_set_BOOL(v3, "proxy_configured", 1);
      char v16 = *((_BYTE *)v1 + 84);
    }

    if ((v16 & 2) != 0) {
      xpc_dictionary_set_BOOL(v3, "used_proxy", 1);
    }
    xpc_object_t v17 = xpc_array_create(0LL, 0LL);
    BOOL v18 = (unsigned __int8 *)*((void *)v1 + 8);
    v34[0] = v10;
    v34[1] = 3221225472LL;
    v34[2] = __nw_establishment_report_copy_dictionary_block_invoke_3;
    v34[3] = &unk_189BC85B0;
    id v19 = v17;
    id v35 = v19;
    nw_array_apply(v18, (uint64_t)v34);
    xpc_dictionary_set_value(v3, "protocol_reports", v19);
    xpc_object_t v20 = xpc_array_create(0LL, 0LL);
    uint64_t v21 = (unsigned __int8 *)*((void *)v1 + 9);
    v32[0] = v10;
    v32[1] = 3221225472LL;
    v32[2] = __nw_establishment_report_copy_dictionary_block_invoke_4;
    v32[3] = &unk_189BC85B0;
    id v22 = v20;
    id v33 = v22;
    nw_array_apply(v21, (uint64_t)v32);
    xpc_dictionary_set_value(v3, "resolution_reports", v22);

    goto LABEL_17;
  }

  __nwlog_obj();
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v43 = "nw_establishment_report_copy_dictionary";
  Class v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v41 = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (__nwlog_fault(v25, &v41, &v40))
  {
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = v41;
      if (os_log_type_enabled(v26, v41))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_establishment_report_copy_dictionary";
        _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = v41;
      BOOL v30 = os_log_type_enabled(v26, v41);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v43 = "nw_establishment_report_copy_dictionary";
          __int16 v44 = 2082;
          BOOL v45 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v29,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_establishment_report_copy_dictionary";
        _os_log_impl(&dword_181A5C000, v26, v29, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = v41;
      if (os_log_type_enabled(v26, v41))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_establishment_report_copy_dictionary";
        _os_log_impl( &dword_181A5C000,  v26,  v31,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B9E840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33)
{
  id v39 = v38;

  _Unwind_Resume(a1);
}

void sub_181B9E8A0()
{
}

void sub_181B9E8A8()
{
}

void sub_181B9E8B0()
{
}

void sub_181B9E8B8()
{
}

uint64_t __nw_establishment_report_copy_dictionary_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  xpc_object_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  identifier = nw_protocol_definition_get_identifier(*((void **)v4 + 4));
  if (identifier) {
    xpc_dictionary_set_string(v5, "protocol", identifier);
  }
  uint64_t v7 = *((void *)v4 + 1);
  if (v7) {
    xpc_dictionary_set_uint64(v5, "handshake_milliseconds", v7);
  }
  uint64_t v8 = *((void *)v4 + 2);
  if (v8) {
    xpc_dictionary_set_uint64(v5, "handshake_rtt_milliseconds", v8);
  }
  uint64_t v9 = v4[6];
  if ((_DWORD)v9) {
    xpc_dictionary_set_uint64(v5, "client_accurate_ecn_state", v9);
  }
  uint64_t v10 = v4[7];
  if ((_DWORD)v10) {
    xpc_dictionary_set_uint64(v5, "server_accurate_ecn_state", v10);
  }
  if ((v4[10] & 1) != 0) {
    xpc_dictionary_set_BOOL(v5, "l4s_enabled", 1);
  }
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v5);

  return 1LL;
}

void sub_181B9E9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_copy_dictionary_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  xpc_object_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)v4 + 1);
  if (v7) {
    xpc_dictionary_set_uint64(v5, "milliseconds", v7);
  }
  uint64_t v8 = (void *)[*((id *)v4 + 4) copyDictionary];
  if (v8) {
    xpc_dictionary_set_value(v6, "successful_endpoint", v8);
  }

  uint64_t v9 = (void *)[*((id *)v4 + 5) copyDictionary];
  if (v9) {
    xpc_dictionary_set_value(v6, "preferred_endpoint", v9);
  }

  uint64_t v10 = v4[14];
  if ((_DWORD)v10) {
    xpc_dictionary_set_uint64(v6, "endpoint_count", v10);
  }
  uint64_t v11 = v4[15];
  if ((_DWORD)v11) {
    xpc_dictionary_set_uint64(v6, "source", v11);
  }
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v6);

  return 1LL;
}

void sub_181B9EAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181B9EB04()
{
}

BOOL nw_content_context_has_metadata(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    BOOL v3 = 0LL;
    if (v1 != (os_unfair_lock_s *)&__block_literal_global_5_41854
      && v1 != (os_unfair_lock_s *)&__block_literal_global_4
      && v1 != (os_unfair_lock_s *)&__block_literal_global_3_41839
      && v1 != (os_unfair_lock_s *)&__block_literal_global_41831)
    {
      os_unfair_lock_lock(v1 + 28);
      uint64_t v4 = *(void *)&v2[22]._os_unfair_lock_opaque;
      if (v4) {
        BOOL v3 = *(void *)(v4 + 24) != *(void *)(v4 + 16);
      }
      else {
        BOOL v3 = 0LL;
      }
      os_unfair_lock_unlock(v2 + 28);
    }

    goto LABEL_10;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  xpc_object_t v17 = "nw_content_context_has_metadata";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        xpc_object_t v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          xpc_object_t v17 = "nw_content_context_has_metadata";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        xpc_object_t v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        xpc_object_t v17 = "nw_content_context_has_metadata";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_default_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v19 = "nw_protocol_default_output_finished";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      id v19 = "nw_protocol_default_output_finished";
      os_log_type_t v11 = "%{public}s called with null protocol";
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v19 = "nw_protocol_default_output_finished";
          __int16 v20 = 2082;
          uint64_t v21 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          return;
        }
        goto LABEL_39;
      }

      if (!v13) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      id v19 = "nw_protocol_default_output_finished";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      id v19 = "nw_protocol_default_output_finished";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_connection_cancel(nw_connection_t connection)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  id v1 = connection;
  if (v1)
  {
    if (_nw_signposts_once != -1) {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_229);
    }
    nw_connection_cancel_inner((NWConcrete_nw_connection *)v1, 0);
    goto LABEL_8;
  }

  __nwlog_obj();
  xpc_object_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v13 = "nw_connection_cancel";
  BOOL v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_connection_cancel";
        _os_log_impl(&dword_181A5C000, v4, v5, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v13 = "nw_connection_cancel";
          __int16 v14 = 2082;
          BOOL v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_connection_cancel";
        _os_log_impl(&dword_181A5C000, v4, v7, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v13 = "nw_connection_cancel";
        _os_log_impl( &dword_181A5C000,  v4,  v9,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B9F59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_minimize_logging(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[100] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_parameters_get_minimize_logging";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_parameters_get_minimize_logging";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_prohibit_privacy_proxy(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_parameters_get_prohibit_privacy_proxy";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_parameters_get_prohibit_privacy_proxy";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v22 = "nw_parameters_get_prohibit_privacy_proxy";
            __int16 v23 = 2082;
            __int16 v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_parameters_get_prohibit_privacy_proxy";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_parameters_get_prohibit_privacy_proxy";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B9FB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_send_stats_report_on_nw_queue(void *a1)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
    *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats"
                                                                                                "_report_on_nw_queue";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    char v70 = 0;
    if (__nwlog_fault(v22, type, &v70))
    {
      if (type[0] == 17)
      {
        __nwlog_obj();
        __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v64 = type[0];
        if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v23, v64, "%{public}s called with null connection", (uint8_t *)&buf, 0xCu);
        }

        goto LABEL_79;
      }

      if (!v70)
      {
        __nwlog_obj();
        __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v68 = type[0];
        if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v23,  v68,  "%{public}s called with null connection, backtrace limit exceeded",  (uint8_t *)&buf,  0xCu);
        }

        goto LABEL_79;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v66 = type[0];
      BOOL v67 = os_log_type_enabled(v23, (os_log_type_t)type[0]);
      if (!backtrace_string)
      {
        if (v67)
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v23,  v66,  "%{public}s called with null connection, no backtrace",  (uint8_t *)&buf,  0xCu);
        }

        goto LABEL_79;
      }

      if (v67)
      {
        LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
        WORD2(buf.u.nw_connection_report.bytes_out) = 2082;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = (unint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v23,  v66,  "%{public}s called with null connection, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
      }

      free(backtrace_string);
    }

void sub_181BA0A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_fillout_data_transfer_snapshot_on_nw_queue( void *a1, uint64_t *a2, void *a3, _BYTE *a4, int a5)
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  unsigned int v9 = a1;
  unint64_t v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    __int16 v51 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v96 = "nw_connection_fillout_data_transfer_snapshot_on_nw_queue";
    id v52 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v93 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v96 = "nw_connection_fillout_data_transfer_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v53, v54, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v93)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v58 = type;
      BOOL v59 = os_log_type_enabled(v53, type);
      if (backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          int v96 = "nw_connection_fillout_data_transfer_snapshot_on_nw_queue";
          __int16 v97 = 2082;
          uint64_t v98 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v53,  v58,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_165:
        if (!v52) {
          goto LABEL_88;
        }
LABEL_166:
        free(v52);
        goto LABEL_88;
      }

      if (v59)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v96 = "nw_connection_fillout_data_transfer_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v53, v58, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v73 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v96 = "nw_connection_fillout_data_transfer_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v53,  v73,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181BA1FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_fillout_data_transfer_snapshot( void *a1, uint64_t *a2, void *a3, _BYTE *a4, int a5)
{
  uint64_t v68 = *MEMORY[0x1895F89C0];
  unsigned int v9 = a1;
  unint64_t v10 = v9;
  if (v9)
  {
    *(void *)v63 = 0LL;
    *(void *)&v63[8] = v63;
    *(void *)&v63[16] = 0x2020000000LL;
    char v64 = 0;
    os_unfair_lock_lock(v9 + 28);
    unint64_t v11 = *(void **)&v10[62]._os_unfair_lock_opaque;
    if (v10[29]._os_unfair_lock_opaque != 2)
    {
      v59[0] = MEMORY[0x1895F87A8];
      v59[1] = 3221225472LL;
      v59[2] = __nw_endpoint_handler_fillout_data_transfer_snapshot_block_invoke;
      v59[3] = &unk_189BBBA58;
      v59[6] = a3;
      v59[7] = a4;
      int v60 = a5;
      v59[4] = v63;
      v59[5] = a2;
      [v11 applyWithHandler:v10 toChildren:v59];
LABEL_33:
      os_unfair_lock_unlock(v10 + 28);
      BOOL v26 = *(_BYTE *)(*(void *)&v63[8] + 24LL) != 0;
      _Block_object_dispose(v63, 8);
      goto LABEL_34;
    }

    float v12 = v11;
    id v13 = v12;
    if (v12)
    {
      if (a2)
      {
        if (a3)
        {
          if (a4)
          {
            *a4 = 0;
            uint64_t v14 = v12[101];
            if (v14)
            {
              *a2 = v14;
              *a3 = v12[102];
              if (a5 != 1) {
                goto LABEL_9;
              }
              goto LABEL_24;
            }

            os_log_type_t v16 = (void *)v12[51];
            if (v16)
            {
              uint64_t v17 = v16[3];
              if (v17)
              {
                uint64_t v18 = *(uint64_t (**)(void))(v17 + 224);
                if (v18)
                {
                  id v19 = (void *)v16[5];
                  if (v19 == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v21 = v16[11];
                    if (v21) {
                      v16[11] = v21 + 1;
                    }
                    char v20 = -1;
                  }

                  else
                  {
                    char v20 = 0;
                  }

                  *(void *)netcore_stats_tcp_report buf = v16;
                  buf[8] = v20;
                  uint64_t v22 = v18();
                  if (v19 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                  }
                  *a2 = v22;
                  if (v22)
                  {
                    *a4 = 1;
                    if (a5 != 1)
                    {
LABEL_9:
                      if (!a5)
                      {
                        int v15 = v13[206] + 1;
LABEL_26:
                        v13[206] = v15;
                        goto LABEL_27;
                      }

                      goto LABEL_27;
                    }

uint64_t nw_endpoint_handler_stack_uses_tls(void *a1)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v47 = "nw_endpoint_handler_stack_uses_tls";
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v36, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v47 = "nw_endpoint_handler_stack_uses_tls";
          _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v37, type);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            BOOL v47 = "nw_endpoint_handler_stack_uses_tls";
            __int16 v48 = 2082;
            BOOL v49 = (os_unfair_lock_s *)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v37,  v40,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_87;
        }

        if (v41)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v47 = "nw_endpoint_handler_stack_uses_tls";
          _os_log_impl(&dword_181A5C000, v37, v40, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v47 = "nw_endpoint_handler_stack_uses_tls";
          _os_log_impl( &dword_181A5C000,  v37,  v42,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181BA35F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_endpoint_get_description(void *a1)
{
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v8 = 0LL;
    nw_endpoint_t v9 = &v8;
    uint64_t v10 = 0x2020000000LL;
    uint64_t v11 = 0LL;
    v5[0] = MEMORY[0x1895F87A8];
    v5[1] = 3221225472LL;
    v5[2] = __nw_endpoint_get_description_block_invoke;
    v5[3] = &unk_189BC9210;
    int v6 = v1;
    os_log_type_t v7 = &v8;
    os_unfair_lock_lock(v2 + 45);
    __nw_endpoint_get_description_block_invoke((uint64_t)v5);
    os_unfair_lock_unlock(v2 + 45);
    uint64_t v3 = (const char *)v9[3];

    _Block_object_dispose(&v8, 8);
  }

  else
  {
    uint64_t v3 = "<NULL>";
  }

  return v3;
}

void *__nw_endpoint_get_description_block_invoke(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 32);
  uint64_t v3 = result[8];
  if (!v3)
  {
    BOOL result = (void *)[result createDescription:0];
    *(void *)(*(void *)(a1 + 32) + 64LL) = result;
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 64LL);
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
  *(_BYTE *)(*(void *)(a1 + 32) + 231LL) |= 8u;
  return result;
}

void nw_read_request_report_error_with_override(void *a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    while (v5)
    {
      uint64_t v8 = (id *)v5;
      objc_storeStrong(v8 + 19, a3);
      nw_read_request_report(v8, v6);
      id v5 = (id)nw_read_request_list_remove_head(v8);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  nw_endpoint_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v20 = "nw_read_request_report_error_with_override";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null error", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v20 = "nw_read_request_report_error_with_override";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null error, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_read_request_report_error_with_override";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null error, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BA3CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_write_request_report_error_with_override(void *a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    while (v5)
    {
      id v8 = v5;
      nw_write_request_report(v8, v6, v7);
      id v5 = (id)nw_write_request_list_remove_head(v8);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  nw_endpoint_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v20 = "nw_write_request_report_error_with_override";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null error", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v20 = "nw_write_request_report_error_with_override";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null error, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_write_request_report_error_with_override";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null error, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BA3FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_association_unregister(void *a1, void *a2)
{
  uint64_t v91 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v70 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v84 = "nw_association_unregister";
    os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v38, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v71 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v84 = "nw_association_unregister";
          _os_log_impl(&dword_181A5C000, v39, v71, "%{public}s called with null association", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (!v81)
      {
        __nwlog_obj();
        int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v79 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v84 = "nw_association_unregister";
          _os_log_impl( &dword_181A5C000,  v39,  v79,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_119;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v75 = type;
      BOOL v76 = os_log_type_enabled(v39, type);
      if (!backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v84 = "nw_association_unregister";
          _os_log_impl(&dword_181A5C000, v39, v75, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (v76)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        BOOL v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        BOOL v86 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v39,  v75,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    goto LABEL_120;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v84 = "nw_association_unregister";
    os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v38, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v73 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v84 = "nw_association_unregister";
          _os_log_impl(&dword_181A5C000, v39, v73, "%{public}s called with null handle", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (!v81)
      {
        __nwlog_obj();
        int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v80 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v84 = "nw_association_unregister";
          _os_log_impl( &dword_181A5C000,  v39,  v80,  "%{public}s called with null handle, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_119;
      }

      BOOL v47 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v77 = type;
      BOOL v78 = os_log_type_enabled(v39, type);
      if (!v47)
      {
        if (v78)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v84 = "nw_association_unregister";
          _os_log_impl(&dword_181A5C000, v39, v77, "%{public}s called with null handle, no backtrace", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (v78)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        BOOL v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        BOOL v86 = v47;
        _os_log_impl( &dword_181A5C000,  v39,  v77,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_85;
    }

    goto LABEL_120;
  }

  id v6 = nw_path_parameters_copy_context(*((void **)v3 + 2));
  nw_context_assert_queue(v6);

  uint64_t v7 = *((void *)v3 + 6);
  if (v7)
  {
    BOOL node = nw_hash_table_get_node(v7, (uint64_t)v5, 0LL);
    if (node)
    {
      BOOL v9 = node;
      if (!nw_hash_table_remove_node(*((void *)v3 + 6), node)
        && !nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v10 = (id)gconnectionLogObj;
        logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        BOOL v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        BOOL v86 = (void *)logging_description;
        __int16 v87 = 2048;
        uint64_t v88 = v9;
        os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v81 = 0;
        if (__nwlog_fault(v12, &type, &v81))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v13 = (os_log_s *)(id)gconnectionLogObj;
            os_log_type_t v14 = type;
            if (os_log_type_enabled(v13, type))
            {
              BOOL v15 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
              BOOL v84 = "nw_association_unregister";
              __int16 v85 = 2082;
              BOOL v86 = (void *)v15;
              __int16 v87 = 2048;
              uint64_t v88 = v9;
              _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p",  buf,  0x20u);
            }
          }

          else if (v81)
          {
            os_log_type_t v16 = __nw_create_backtrace_string();
            if (v16)
            {
              char v17 = (char *)v16;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v18 = (os_log_s *)(id)gconnectionLogObj;
              os_log_type_t v19 = type;
              if (os_log_type_enabled(v18, type))
              {
                os_log_type_t v20 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
                *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                BOOL v84 = "nw_association_unregister";
                __int16 v85 = 2082;
                BOOL v86 = (void *)v20;
                __int16 v87 = 2048;
                uint64_t v88 = v9;
                __int16 v89 = 2082;
                os_log_type_t v90 = v17;
                _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, dumping backtrace:%{public}s",  buf,  0x2Au);
              }

              free(v17);
              if (!v12) {
                goto LABEL_36;
              }
              goto LABEL_35;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v13 = (os_log_s *)(id)gconnectionLogObj;
            os_log_type_t v23 = type;
            if (os_log_type_enabled(v13, type))
            {
              BOOL v24 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
              BOOL v84 = "nw_association_unregister";
              __int16 v85 = 2082;
              BOOL v86 = (void *)v24;
              __int16 v87 = 2048;
              uint64_t v88 = v9;
              _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, no backtrace",  buf,  0x20u);
            }
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v13 = (os_log_s *)(id)gconnectionLogObj;
            os_log_type_t v21 = type;
            if (os_log_type_enabled(v13, type))
            {
              uint64_t v22 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
              BOOL v84 = "nw_association_unregister";
              __int16 v85 = 2082;
              BOOL v86 = (void *)v22;
              __int16 v87 = 2048;
              uint64_t v88 = v9;
              _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, backtrace limit exceeded",  buf,  0x20u);
            }
          }
        }

        if (v12) {
LABEL_35:
        }
          free(v12);
      }
    }
  }

void sub_181BA52D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181BA66E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_default_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    output_handler = a1->output_handler;
    if (output_handler)
    {
      callbacks = output_handler->callbacks;
      if (callbacks)
      {
        disconnect = (void (*)(void))callbacks->disconnect;
        if (disconnect) {
          disconnect();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v14 = "nw_protocol_default_disconnect";
  id v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v14 = "nw_protocol_default_disconnect";
      id v8 = "%{public}s called with null protocol";
      goto LABEL_19;
    }

    if (!v11)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v14 = "nw_protocol_default_disconnect";
      id v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_19;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        os_log_type_t v14 = "nw_protocol_default_disconnect";
        __int16 v15 = 2082;
        os_log_type_t v16 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_20;
    }

    if (v10)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v14 = "nw_protocol_default_disconnect";
      id v8 = "%{public}s called with null protocol, no backtrace";
LABEL_19:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    }
  }

const char *nw_connection_client_accurate_ecn_state_to_string(unsigned int a1)
{
  if (a1 > 9) {
    return "Unknown";
  }
  else {
    return off_189BB7000[a1];
  }
}

const char *nw_connection_server_accurate_ecn_state_to_string(unsigned int a1)
{
  if (a1 > 0xA) {
    return "Unknown";
  }
  else {
    return off_189BB7050[a1];
  }
}

void nw_protocol_default_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        disconnected = (void (*)(void))callbacks->disconnected;
        if (disconnected) {
          disconnected();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v14 = "nw_protocol_default_disconnected";
  id v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v14 = "nw_protocol_default_disconnected";
      id v8 = "%{public}s called with null protocol";
      goto LABEL_19;
    }

    if (!v11)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v14 = "nw_protocol_default_disconnected";
      id v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_19;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        os_log_type_t v14 = "nw_protocol_default_disconnected";
        __int16 v15 = 2082;
        os_log_type_t v16 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_20;
    }

    if (v10)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v14 = "nw_protocol_default_disconnected";
      id v8 = "%{public}s called with null protocol, no backtrace";
LABEL_19:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    }
  }

void nw_flow_passthrough_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v126 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (id *)a1->handle;
    id v4 = handle[20];
    id v5 = v4;
    if (v4)
    {
      id v6 = (NWConcrete_nw_endpoint_handler *)v4;
      uint64_t mode = v6->mode;

      if ((_DWORD)mode != 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v28 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          else {
            int v29 = off_189BBBBC0[mode];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          nw_endpoint_t v113 = "nw_flow_passthrough_disconnected";
          __int16 v114 = 2082;
          id_str = (void *)v29;
          __int16 v116 = 2082;
          uint64_t v117 = "flow";
          _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }

        goto LABEL_55;
      }

      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          disconnected = (void (*)(void))callbacks->disconnected;
          if (disconnected) {
            disconnected();
          }
        }
      }

      *((_WORD *)handle + 166) |= 0x210u;
      char v11 = nw_endpoint_handler_copy_flow(v6);
      int v104 = v11;
      if (handle == (id *)((char *)v11 + 376))
      {
        id v30 = handle[40];
        if (v30)
        {
          os_log_type_t v31 = v30;
          int v32 = v31[3];

          if (v32 == 35)
          {
            id v33 = a1->default_input_handler;
            if (v33)
            {
              name = v33->identifier->name;
              if (name)
              {
                if (!strcmp(name, "flow_replay"))
                {
                  uint64_t v35 = (uint64_t)v33->default_input_handler;
                  if (v35)
                  {
                    if (!nw_protocol_input_handler_is_connection_flow(v35))
                    {
                      int minimize_logging = nw_endpoint_handler_get_minimize_logging(v6);
                      char logging_disabled = nw_endpoint_handler_get_logging_disabled(v6);
                      if (minimize_logging)
                      {
                        if ((logging_disabled & 1) != 0) {
                          goto LABEL_37;
                        }
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        os_log_type_t v38 = (os_log_s *)(id)gconnectionLogObj;
                        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                        {
                          id_string = nw_endpoint_handler_get_id_string(v6);
                          logb = nw_endpoint_handler_dry_run_string(v6);
                          nw_endpoint_t v96 = nw_endpoint_handler_copy_endpoint(v6);
                          logging_description = nw_endpoint_get_logging_description(v96);
                          uint64_t v98 = nw_endpoint_handler_state_string(v6);
                          __int16 v99 = nw_endpoint_handler_mode_string(v6);
                          id v100 = nw_endpoint_handler_copy_current_path(v6);
                          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                          nw_endpoint_t v113 = "nw_flow_passthrough_disconnected";
                          __int16 v114 = 2082;
                          id_str = (void *)id_string;
                          __int16 v116 = 2082;
                          uint64_t v117 = logb;
                          __int16 v118 = 2082;
                          v119 = logging_description;
                          __int16 v120 = 2082;
                          v121 = v98;
                          __int16 v122 = 2082;
                          os_log_type_t v123 = v99;
                          __int16 v124 = 2114;
                          id v125 = v100;
                          _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received EA GAIN, rebuilding stack",  buf,  0x48u);
                        }
                      }

                      else
                      {
                        if ((logging_disabled & 1) != 0)
                        {
LABEL_37:
                          os_log_type_t v46 = v104;
                          nw_endpoint_flow_rebuild_stack(v6, a1);
                          v6->event = (nw_endpoint_handler_event_s)262147;
                          nw_endpoint_handler_report(v6, 0LL, &v6->event.domain, 0LL);
LABEL_54:

LABEL_55:
                          return;
                        }

                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        os_log_type_t v38 = (os_log_s *)(id)gconnectionLogObj;
                        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
                        {
                          log = v38;
                          int v39 = nw_endpoint_handler_get_id_string(v6);
                          os_log_type_t v40 = nw_endpoint_handler_dry_run_string(v6);
                          nw_endpoint_t v41 = nw_endpoint_handler_copy_endpoint(v6);
                          id v42 = nw_endpoint_get_logging_description(v41);
                          os_log_type_t v43 = nw_endpoint_handler_state_string(v6);
                          os_log_type_t v44 = nw_endpoint_handler_mode_string(v6);
                          id v45 = nw_endpoint_handler_copy_current_path(v6);
                          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                          nw_endpoint_t v113 = "nw_flow_passthrough_disconnected";
                          __int16 v114 = 2082;
                          id_str = (void *)v39;
                          __int16 v116 = 2082;
                          uint64_t v117 = v40;
                          __int16 v118 = 2082;
                          v119 = v42;
                          __int16 v120 = 2082;
                          v121 = v43;
                          __int16 v122 = 2082;
                          os_log_type_t v123 = v44;
                          __int16 v124 = 2114;
                          id v125 = v45;
                          os_log_type_t v38 = log;
                          _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received EA GAIN, rebuilding stack",  buf,  0x48u);
                        }
                      }

                      goto LABEL_37;
                    }
                  }
                }
              }
            }
          }
        }
      }

      os_log_type_t v12 = v11;
      id v13 = v12;
      if (v12)
      {
        uint64_t v14 = *((void *)v12 + 53);

        if (!v14)
        {
          id v47 = handle[40];
          id v48 = handle[23];
          v105[0] = MEMORY[0x1895F87A8];
          v105[1] = 3221225472LL;
          v105[2] = ___ZL32nw_flow_passthrough_disconnectedP11nw_protocolS0__block_invoke;
          v105[3] = &unk_189BB8638;
          v106 = v6;
          uint64_t v109 = handle;
          v107 = v13;
          id v108 = v47;
          id v49 = v47;
          nw_queue_context_async(v48, v105);

LABEL_53:
          os_log_type_t v46 = v104;
          goto LABEL_54;
        }

void sub_181BA7A90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void nw_flow_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  handle = (nw_flow_protocol *)a1->handle;
  id v3 = handle->handler;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v90 = "nw_flow_disconnected";
    nw_endpoint_t v59 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v87 = 0;
    if (__nwlog_fault(v59, &type, &v87))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v61 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v90 = "nw_flow_disconnected";
          _os_log_impl(&dword_181A5C000, v60, v61, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v87)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type;
        BOOL v64 = os_log_type_enabled(v60, type);
        if (backtrace_string)
        {
          if (v64)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v90 = "nw_flow_disconnected";
            __int16 v91 = 2082;
            os_log_type_t v92 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v60,  v63,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_70;
        }

        if (v64)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v90 = "nw_flow_disconnected";
          _os_log_impl(&dword_181A5C000, v60, v63, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v65 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v90 = "nw_flow_disconnected";
          _os_log_impl( &dword_181A5C000,  v60,  v65,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181BA8504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_cleanup_protocol(void *a1, uint64_t a2, int a3)
{
  uint64_t v97 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = *(void **)(a2 + 176);
  *(void *)(a2 + 176) = 0LL;

  id v6 = *(void **)(a2 + 248);
  *(void *)(a2 + 248) = 0LL;

  os_log_type_t v7 = *(void **)(a2 + 232);
  *(void *)(a2 + 232) = 0LL;

  id v8 = *(void **)(a2 + 240);
  *(void *)(a2 + 240) = 0LL;

  uint64_t v9 = *(void **)(a2 + 224);
  *(void *)(a2 + 224) = 0LL;

  *(_WORD *)(a2 + 332) &= ~2u;
  BOOL v10 = *(void **)(a2 + 256);
  *(void *)(a2 + 256) = 0LL;

  char v11 = *(void **)(a2 + 264);
  *(void *)(a2 + 264) = 0LL;

  *(_WORD *)(a2 + 332) &= 0xFD2Fu;
  uint64_t v12 = MEMORY[0x1895F87A8];
  v77[0] = MEMORY[0x1895F87A8];
  v77[1] = 3221225472LL;
  os_log_type_t v78 = __nw_endpoint_flow_cleanup_protocol_block_invoke;
  os_log_type_t v79 = &__block_descriptor_40_e31_B16__0__NSObject_OS_nw_frame__8l;
  uint64_t v80 = a2;
  uint64_t v13 = *(void *)(a2 + 272);
  do
  {
    if (!v13) {
      break;
    }
    uint64_t v14 = *(void *)(v13 + 32);
    char v15 = ((uint64_t (*)(void *))v78)(v77);
    uint64_t v13 = v14;
  }

  while ((v15 & 1) != 0);
  BOOL v16 = *(char **)(a2 + 288);
  if (v16)
  {
    v76[0] = v12;
    v76[1] = 3221225472LL;
    v76[2] = __nw_endpoint_flow_cleanup_protocol_block_invoke_2;
    v76[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
    v76[4] = a2;
    nw_hash_table_apply(v16, (uint64_t)v76);
    uint64_t v18 = *(os_unfair_lock_s **)(a2 + 288);
    if (v18)
    {
      _nw_hash_table_release(v18, v17);
      *(void *)(a2 + 288) = 0LL;
    }
  }

  *(_WORD *)(a2 + 332) &= ~0x800u;
  uint64_t v19 = *(void *)(a2 + 296);
  if (v19)
  {
    do
    {
      uint64_t v20 = *(void *)(v19 + 16);
      nw_frame_finalize(v19);
      uint64_t v19 = v20;
    }

    while (v20);
  }

  if (!v4)
  {
    id v4 = (NWConcrete_nw_endpoint_handler *)*(id *)(a2 + 160);
    if (!v4)
    {
      os_log_type_t v74 = 0LL;
      goto LABEL_19;
    }
  }

  os_log_type_t v74 = v4;
  uint64_t v21 = nw_endpoint_handler_copy_flow(v4);
  if (!v21 || (*((_BYTE *)v21 + 33) & 8) != 0)
  {

    goto LABEL_19;
  }

  char v22 = *((_BYTE *)v21 + 32);

  if ((v22 & 1) == 0)
  {
LABEL_19:
    id v33 = *(void **)(a2 + 216);
    os_log_type_t v34 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 89);
    nw_read_request_report_error_with_override(v33, 0LL, v34);

    uint64_t v35 = *(void **)(a2 + 216);
    *(void *)(a2 + 216) = 0LL;

    id v36 = *(void **)(a2 + 200);
    os_log_type_t v37 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 89);
    nw_write_request_report_error_with_override(v36, 0LL, v37);

    os_log_type_t v38 = *(void **)(a2 + 200);
    *(void *)(a2 + 200) = 0LL;

    int v39 = *(void **)(a2 + 208);
    os_log_type_t v40 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 89);
    nw_write_request_report_error_with_override(v39, 0LL, v40);

    nw_endpoint_t v41 = *(void **)(a2 + 208);
    *(void *)(a2 + 208) = 0LL;

    id v42 = *(void **)(a2 + 192);
    os_log_type_t v43 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 89);
    nw_write_request_report_error_with_override(v42, 0LL, v43);

    os_log_type_t v44 = *(void **)(a2 + 192);
    *(void *)(a2 + 192) = 0LL;
    char v26 = v74;
LABEL_20:

    goto LABEL_21;
  }

  os_log_type_t v23 = *(void **)(a2 + 200);
  BOOL v24 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 89);
  nw_write_request_report_error_with_override(v23, 0LL, v24);

  uint64_t v25 = *(void **)(a2 + 208);
  char v26 = v74;
  if (v25)
  {
    uint64_t v27 = v25;
    uint64_t v28 = nw_write_request_create_clone(v27);
    BOOL v29 = nw_write_request_list_append(0LL, v28);

    id v30 = (void *)v27[1];
    if (v30)
    {
      do
      {
        nw_endpoint_t v31 = nw_write_request_create_clone(v30);
        BOOL v32 = nw_write_request_list_append((void *)v29, v31);

        id v30 = (void *)v30[1];
        BOOL v29 = v32;
      }

      while (v30);
    }

    else
    {
      BOOL v32 = v29;
    }

    os_log_type_t v44 = *(void **)(a2 + 200);
    *(void *)(a2 + 200) = v32;
    goto LABEL_20;
  }

void sub_181BA8C10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_get_association_dormant_delay(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  BOOL v16 = "nw_context_get_association_dormant_delay";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          BOOL v16 = "nw_context_get_association_dormant_delay";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BA95E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181BA9CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_cancel_read_write_requests(void *a1, void *a2)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    int v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
        _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else
    {
      if (v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v29, type);
        if (!backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
            _os_log_impl(&dword_181A5C000, v29, v47, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }

          goto LABEL_43;
        }

        if (v48)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
          __int16 v63 = 2082;
          BOOL v64 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v29,  v47,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v28) {
          goto LABEL_46;
        }
LABEL_45:
        free(v28);
        goto LABEL_46;
      }

      __nwlog_obj();
      os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
        _os_log_impl( &dword_181A5C000,  v40,  v53,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_44;
  }

  uint64_t mode = v3->mode;
  if ((_DWORD)mode == 2)
  {
    id v6 = nw_endpoint_handler_copy_flow(v3);
    if (v6)
    {
      os_log_type_t v7 = v3;
      uint64_t v58 = v6;
      os_log_type_t v8 = v6;
      id v9 = v4;
      if ((nw_endpoint_handler_get_logging_disabled(v7) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v10 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          id v56 = v4;
          id v57 = v3;
          id_string = nw_endpoint_handler_get_id_string(v7);
          os_log_type_t v12 = nw_endpoint_handler_dry_run_string(v7);
          id v55 = v9;
          nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v7);
          logging_description = nw_endpoint_get_logging_description(v13);
          char v15 = nw_endpoint_handler_state_string(v7);
          BOOL v16 = nw_endpoint_handler_mode_string(v7);
          id v17 = nw_endpoint_handler_copy_current_path(v7);
          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
          os_log_type_t v62 = "nw_flow_cancel_read_write_requests";
          __int16 v63 = 2082;
          BOOL v64 = (void *)id_string;
          __int16 v65 = 2082;
          os_log_type_t v66 = v12;
          __int16 v67 = 2082;
          os_log_type_t v68 = (void *)logging_description;
          __int16 v69 = 2082;
          id v70 = v15;
          __int16 v71 = 2082;
          os_log_type_t v72 = v16;
          __int16 v73 = 2114;
          id v74 = v17;
          _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cancelling read/write requests",  buf,  0x48u);

          id v4 = v56;
          uint64_t v3 = v57;
          id v9 = v55;
        }
      }

      id v18 = v8[74];
      id v19 = v8[74];
      v8[74] = 0LL;

      uint64_t v20 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 89);
      nw_read_request_report_error_with_override(v18, v9, v20);

      id v21 = v8[71];
      id v22 = v8[71];
      v8[71] = 0LL;

      os_log_type_t v23 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 89);
      nw_write_request_report_error_with_override(v21, v9, v23);

      id v24 = v8[86];
      v8[86] = 0LL;

      uint64_t v25 = v58;
LABEL_11:

      goto LABEL_46;
    }

    uint64_t v25 = 0LL;
    __nwlog_obj();
    id v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
    os_log_type_t v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (__nwlog_fault(v43, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
          _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }

      else
      {
        if (v59)
        {
          id v49 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          unsigned int v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v51 = type;
          BOOL v52 = os_log_type_enabled(v50, type);
          if (v49)
          {
            if (v52)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
              __int16 v63 = 2082;
              BOOL v64 = v49;
              _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v49);
          }

          else
          {
            if (v52)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
              os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
              _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s called with null endpoint_flow, no backtrace",  buf,  0xCu);
            }
          }

          goto LABEL_79;
        }

        __nwlog_obj();
        os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v54 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v62 = "nw_endpoint_handler_cancel_read_write_requests";
          _os_log_impl( &dword_181A5C000,  v44,  v54,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181BAA724( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_181BAB22C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, objc_super a22)
{
  a22.receiver = a12;
  a22.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_endpoint_handler;
  -[_Unwind_Exception dealloc](&a22, sel_dealloc);
  _Unwind_Resume(a1);
}

BOOL nw_resolver_cancel(void *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    if ((v1[346] & 0x20) != 0)
    {
LABEL_12:
      os_unfair_lock_lock((os_unfair_lock_t)v2 + 3);
      nw_resolver_cancel_delayed_reporting_timer((NWConcrete_nw_resolver *)v2);
      if (!*((void *)v2 + 16)) {
        nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v2, 0);
      }
      os_log_type_t v8 = (void *)*((void *)v2 + 12);
      *((void *)v2 + 12) = 0LL;

      id v9 = (const void *)*((void *)v2 + 13);
      if (v9)
      {
        os_log_type_t v10 = _Block_copy(v9);
        BOOL v11 = (void *)*((void *)v2 + 13);
        *((void *)v2 + 13) = 0LL;

        os_log_type_t v12 = (dispatch_queue_s *)*((void *)v2 + 14);
        if (v12) {
          dispatch_async(v12, v10);
        }
        else {
          nw_queue_context_async(*((void **)v2 + 4), v10);
        }
      }

      nw_endpoint_t v13 = (void *)*((void *)v2 + 14);
      *((void *)v2 + 14) = 0LL;

      uint64_t v14 = (void *)*((void *)v2 + 27);
      *((void *)v2 + 27) = 0LL;

      os_unfair_lock_unlock((os_unfair_lock_t)v2 + 3);
      goto LABEL_20;
    }

    if (v1[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v3 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_11;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v27 = "nw_resolver_cancel";
      __int16 v28 = 2082;
      *(void *)BOOL v29 = v2 + 256;
      *(_WORD *)&v29[8] = 2048;
      *(void *)&v29[10] = v2;
      id v4 = "%{public}s [C%{public}s] %p";
      id v5 = v3;
      uint32_t v6 = 32;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

        goto LABEL_12;
      }

      int v7 = *((_DWORD *)v2 + 85);
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v27 = "nw_resolver_cancel";
      __int16 v28 = 1024;
      *(_DWORD *)BOOL v29 = v7;
      *(_WORD *)&v29[4] = 2048;
      *(void *)&v29[6] = v2;
      id v4 = "%{public}s [R%u] %p";
      id v5 = v3;
      uint32_t v6 = 28;
    }

    _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEBUG, v4, buf, v6);
    goto LABEL_11;
  }

  __nwlog_obj();
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v27 = "nw_resolver_cancel";
  id v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v27 = "nw_resolver_cancel";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null resolver", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v27 = "nw_resolver_cancel";
          __int16 v28 = 2082;
          *(void *)BOOL v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v21,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_37;
      }

      if (v22)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v27 = "nw_resolver_cancel";
        _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v27 = "nw_resolver_cancel";
        _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BAB7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181BAC4A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13)
{
  a13.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_resolver;
  -[_Unwind_Exception dealloc](&a13, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_failed_with_error(void *a1, int a2, void *a3)
{
  uint64_t v378 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v355 = a3;
  v356 = v4;
  if (v4)
  {
    id v5 = nw_endpoint_handler_copy_flow(v4);
    uint32_t v6 = v5;
    if (v5)
    {
      if ((*((_BYTE *)v5 + 36) & 2) != 0)
      {
        os_log_type_t v12 = v4;
        char v13 = *((_BYTE *)v12 + 268);

        if ((v13 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v14 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            char v15 = v12;

            BOOL v16 = v15;
            char v17 = *((_BYTE *)v12 + 268);

            if ((v17 & 1) != 0) {
              id v18 = "dry-run ";
            }
            else {
              id v18 = "";
            }
            nw_endpoint_t v19 = nw_endpoint_handler_copy_endpoint(v16);
            logging_description = nw_endpoint_get_logging_description(v19);
            id_str = v15->id_str;
            BOOL v22 = v16;
            os_log_type_t v23 = v22;
            uint64_t v24 = v22[30];
            else {
              uint64_t v25 = off_189BBBBF0[v24];
            }
            v353 = v25;

            id v26 = v23;
            uint64_t v27 = v26;
            __int16 v28 = "path";
            switch(*((_DWORD *)v26 + 29))
            {
              case 0:
                break;
              case 1:
                __int16 v28 = "resolver";
                break;
              case 2:
                __int16 v28 = nw_endpoint_flow_mode_string(v26[31]);
                break;
              case 3:
                __int16 v28 = "proxy";
                break;
              case 4:
                __int16 v28 = "fallback";
                break;
              case 5:
                __int16 v28 = "transform";
                break;
              default:
                __int16 v28 = "unknown-mode";
                break;
            }

            os_log_type_t v66 = v27;
            os_unfair_lock_lock((os_unfair_lock_t)v66 + 28);
            id v67 = v66[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v66 + 28);

            *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
            __int16 v364 = 2082;
            v365 = id_str;
            __int16 v366 = 2082;
            v367 = v18;
            __int16 v368 = 2082;
            v369 = (void *)logging_description;
            __int16 v370 = 2082;
            v371 = v353;
            __int16 v372 = 2082;
            v373 = v28;
            __int16 v374 = 2114;
            id v375 = v67;
            _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already failing, returning",  buf,  0x48u);
          }
        }

        goto LABEL_337;
      }

      int v7 = (const char *)*((void *)v5 + 51);
      *((_BYTE *)v5 + 36) |= 2u;
      if (*((_DWORD *)v5 + 206))
      {
        if (v7)
        {
          uint64_t v8 = *((void *)v7 + 3);
          if (v8)
          {
            id v9 = *(uint64_t (**)(const char *, uint64_t, os_log_type_t *))(v8 + 224);
            if (v9)
            {
              *(void *)os_log_type_t type = 0LL;
              os_log_type_t v10 = (void *)*((void *)v7 + 5);
              if (v10 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v29 = *((void *)v7 + 11);
                if (v29) {
                  *((void *)v7 + 11) = v29 + 1;
                }
                char v11 = -1;
              }

              else
              {
                char v11 = 0;
              }

              *(void *)netcore_stats_tcp_report buf = v7;
              buf[8] = v11;
              uint64_t v30 = v9(v7, 5LL, type);
              if (v10 == &nw_protocol_ref_counted_handle) {
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              }
              if (v30)
              {
                nw_endpoint_t v31 = (void *)*((void *)v6 + 101);
                if (v31)
                {
                  free(v31);
                  *((void *)v6 + 101) = 0LL;
                }

                *((void *)v6 + 101) = v30;
                *((void *)v6 + 102) = *(void *)type;
              }
            }
          }
        }
      }

      BOOL v32 = (void *)*((void *)v6 + 104);
      if (v32)
      {
        BOOL v33 = nw_path_flow_registration_copy_path(v32);
        lock = (os_unfair_lock_s *)((char *)v6 + 880);
        os_unfair_lock_lock((os_unfair_lock_t)v6 + 220);
        if (!v33)
        {
          v349 = 0LL;
          if (!*((void *)v6 + 90))
          {
LABEL_71:
            os_unfair_lock_unlock(lock);
            unsigned int v50 = (os_unfair_lock_s *)*((void *)v6 + 108);
            if (v50)
            {
              _nw_hash_table_release(v50, v49);
              *((void *)v6 + 108) = 0LL;
            }

            if (*((void *)v6 + 53))
            {
              if (nw_endpoint_handler_get_minimize_logging(v356))
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v53 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_endpoint_handler_get_id_string(v356);
                  v288 = nw_endpoint_handler_dry_run_string(v356);
                  nw_endpoint_t v289 = nw_endpoint_handler_copy_endpoint(v356);
                  v290 = nw_endpoint_get_logging_description(v289);
                  v291 = nw_endpoint_handler_state_string(v356);
                  v292 = nw_endpoint_handler_mode_string(v356);
                  id v293 = nw_endpoint_handler_copy_current_path(v356);
                  *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                  __int16 v364 = 2082;
                  v365 = (void *)id_string;
                  __int16 v366 = 2082;
                  v367 = v288;
                  __int16 v368 = 2082;
                  v369 = (void *)v290;
                  __int16 v370 = 2082;
                  v371 = v291;
                  __int16 v372 = 2082;
                  v373 = v292;
                  __int16 v374 = 2114;
                  id v375 = v293;
                  _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Passthrough flow wi th an input handler should not fail on its own",  buf,  0x48u);
                }

                goto LABEL_102;
              }

              os_log_type_t v51 = v356;
              BOOL v52 = (*((_BYTE *)v51 + 268) & 0x20) == 0;

              if (v52)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v53 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  os_log_type_t v54 = v51;

                  id v55 = v54;
                  BOOL v56 = (*((_BYTE *)v51 + 268) & 1) == 0;

                  if (v56) {
                    id v57 = "";
                  }
                  else {
                    id v57 = "dry-run ";
                  }
                  nw_endpoint_t v58 = nw_endpoint_handler_copy_endpoint(v55);
                  char v59 = nw_endpoint_get_logging_description(v58);
                  uint64_t v60 = v55;
                  os_log_type_t v61 = v60;
                  uint64_t v62 = v60[30];
                  else {
                    __int16 v63 = off_189BBBBF0[v62];
                  }
                  os_log_t log = v63;

                  BOOL v64 = v61;
                  __int16 v65 = "path";
                  switch(*((_DWORD *)v64 + 29))
                  {
                    case 0:
                      break;
                    case 1:
                      __int16 v65 = "resolver";
                      break;
                    case 2:
                      __int16 v65 = nw_endpoint_flow_mode_string(v64[31]);
                      break;
                    case 3:
                      __int16 v65 = "proxy";
                      break;
                    case 4:
                      __int16 v65 = "fallback";
                      break;
                    case 5:
                      __int16 v65 = "transform";
                      break;
                    default:
                      __int16 v65 = "unknown-mode";
                      break;
                  }

                  v338 = v65;

                  os_log_type_t v68 = v64;
                  __int16 v69 = v54;
                  os_unfair_lock_lock((os_unfair_lock_t)v68 + 28);
                  id v70 = v68[8];
                  os_unfair_lock_unlock((os_unfair_lock_t)v68 + 28);

                  id v71 = v70;
                  *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                  __int16 v364 = 2082;
                  v365 = v69->id_str;
                  __int16 v366 = 2082;
                  v367 = v57;
                  __int16 v368 = 2082;
                  v369 = (void *)v59;
                  __int16 v370 = 2082;
                  v371 = log;
                  __int16 v372 = 2082;
                  v373 = v338;
                  __int16 v374 = 2114;
                  id v375 = v71;
                  _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Passthrough flow wi th an input handler should not fail on its own",  buf,  0x48u);
                }

LABEL_220:
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              if (v177)
              {
LABEL_203:
                v178 = (void *)*((void *)v6 + 63);
                if (v178)
                {
                  nw_protocol_release(v178);
                  *((void *)v6 + 63) = 0LL;
                }

                id v179 = (void *)*((void *)v6 + 65);
                if (v179)
                {
                  nw_protocol_release(v179);
                  *((void *)v6 + 65) = 0LL;
                }

                v180 = (const char *)v176;
                v181 = *(void **)(v176 + 32);
                if (v181) {
                  BOOL v182 = v181 == v113;
                }
                else {
                  BOOL v182 = 1;
                }
                uint64_t v183 = (uint64_t)v175;
                if (v182 && v181 != v175)
                {
                  nw_protocol_release(v181);
                  v180 = (const char *)v176;
                  uint64_t v183 = (uint64_t)v175;
                  *(void *)(v176 + 32) = v175;
                  if ((_UNKNOWN *)v175[5] == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v184 = v175[11];
                    if (v184) {
                      v175[11] = v184 + 1;
                    }
                  }
                }

                v185 = (void *)*((void *)v180 + 5);
                int v186 = v356;
                if (v185 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v201 = *((void *)v180 + 11);
                  if (v201) {
                    *((void *)v180 + 11) = v201 + 1;
                  }
                  *(void *)os_log_type_t type = v180;
                  char v187 = v362 | 1;
                }

                else
                {
                  *(void *)os_log_type_t type = v180;
                  char v187 = v362 & 0xFE;
                }

                char v362 = v187;
                v202 = *(void **)(v183 + 40);
                if (v202 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v204 = *(void *)(v183 + 88);
                  if (v204) {
                    *(void *)(v183 + 88) = v204 + 1;
                  }
                  uint64_t v359 = v183;
                  char v203 = v360 | 1;
                }

                else
                {
                  uint64_t v359 = v183;
                  char v203 = v360 & 0xFE;
                }

                char v360 = v203;
                uint64_t v205 = *((void *)v180 + 3);
                if (v205)
                {
                  v206 = *(void (**)(const char *))(v205 + 160);
                  if (v206)
                  {
                    v206(v180);
                    if (v202 != &nw_protocol_ref_counted_handle) {
                      goto LABEL_246;
                    }
                    goto LABEL_245;
                  }
                }

                v314 = v180;
                __nwlog_obj();
                v315 = (void *)objc_claimAutoreleasedReturnValue();
                v316 = (const char *)*((void *)v314 + 2);
                *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                if (!v316) {
                  v316 = "invalid";
                }
                __int16 v364 = 2082;
                v365 = (void *)v316;
                __int16 v366 = 2048;
                v367 = v314;
                v317 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t v358 = OS_LOG_TYPE_ERROR;
                char v357 = 0;
                if (__nwlog_fault(v317, &v358, &v357))
                {
                  if (v358 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v318 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v319 = v358;
                    if (os_log_type_enabled(v318, v358))
                    {
                      v320 = *(const char **)(v176 + 16);
                      if (!v320) {
                        v320 = "invalid";
                      }
                      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                      __int16 v364 = 2082;
                      v365 = (void *)v320;
                      __int16 v366 = 2048;
                      v367 = (const char *)v176;
                      _os_log_impl( &dword_181A5C000,  v318,  v319,  "%{public}s protocol %{public}s (%p) has invalid notify callback",  buf,  0x20u);
                    }

  if (v86) {
    free(v86);
  }
  BOOL v52 = 0LL;
LABEL_182:

  return v52;
}

        if (v66) {
          free(v66);
        }
        BOOL v22 = 0LL;
        if (v18 != &nw_protocol_ref_counted_handle) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }

      uint64_t v98 = 0;
      uint64_t v27 = a2->handle;
      if (v27 == &nw_protocol_ref_counted_handle)
      {
        __int16 v28 = a2[1].callbacks;
        if (v28) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v28->add_input_handler + 1);
        }
      }

      uint64_t v29 = a1->handle;
      if (v29 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v30 = a1[1].callbacks;
        if (v30) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v30->add_input_handler + 1);
        }
      }

      nw_endpoint_t v31 = a2->callbacks;
      if (v31)
      {
        notify = (void (*)(nw_protocol *, nw_protocol *, uint64_t, char *, uint64_t))v31->notify;
        if (notify)
        {
          notify(a2, a1, 23LL, &v98, 1LL);
LABEL_53:
          if (v29 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
          {
            id v46 = a1[1].callbacks;
            if (v46)
            {
              os_log_type_t v47 = (nw_protocol_callbacks *)((char *)v46 - 1);
              a1[1].callbacks = v47;
              if (!v47)
              {
                char v48 = *(void (***)(void))a1[1].flow_id;
                if (v48)
                {
                  *(void *)a1[1].flow_id = 0LL;
                  v48[2](v48);
                  _Block_release(v48);
                }

                if ((a1[1].flow_id[8] & 1) != 0)
                {
                  uint64_t v49 = *(const void **)a1[1].flow_id;
                  if (v49) {
                    _Block_release(v49);
                  }
                }

                free(a1);
              }
            }
          }

          if (v27 == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
          {
            unsigned int v50 = a2[1].callbacks;
            if (v50)
            {
              os_log_type_t v51 = (nw_protocol_callbacks *)((char *)v50 - 1);
              a2[1].callbacks = v51;
              if (!v51)
              {
                BOOL v52 = *(void (***)(void))a2[1].flow_id;
                if (v52)
                {
                  *(void *)a2[1].flow_id = 0LL;
                  v52[2](v52);
                  _Block_release(v52);
                }

                if ((a2[1].flow_id[8] & 1) != 0)
                {
                  os_log_type_t v53 = *(const void **)a2[1].flow_id;
                  if (v53) {
                    _Block_release(v53);
                  }
                }

                free(a2);
              }
            }
          }

          return 1LL;
        }
      }

      __nwlog_obj();
      identifier = a2->identifier;
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      BOOL v102 = "__nw_protocol_notify";
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      uint64_t v103 = 2082;
      nw_endpoint_t v104 = (nw_protocol *)identifier;
      char v105 = 2048;
      v106 = a2;
      unint64_t v81 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v99 = 0;
      if (__nwlog_fault(v81, &type, &v99))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v82 = (os_log_s *)__nwlog_obj();
          uint64_t v83 = type;
          if (!os_log_type_enabled(v82, type)) {
            goto LABEL_233;
          }
          BOOL v84 = a2->identifier;
          if (!v84) {
            BOOL v84 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          BOOL v102 = "__nw_protocol_notify";
          uint64_t v103 = 2082;
          nw_endpoint_t v104 = (nw_protocol *)v84;
          char v105 = 2048;
          v106 = a2;
          __int16 v85 = "%{public}s protocol %{public}s (%p) has invalid notify callback";
          goto LABEL_232;
        }

        if (!v99)
        {
          os_log_type_t v82 = (os_log_s *)__nwlog_obj();
          uint64_t v83 = type;
          if (!os_log_type_enabled(v82, type)) {
            goto LABEL_233;
          }
          uint64_t v96 = a2->identifier;
          if (!v96) {
            uint64_t v96 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          BOOL v102 = "__nw_protocol_notify";
          uint64_t v103 = 2082;
          nw_endpoint_t v104 = (nw_protocol *)v96;
          char v105 = 2048;
          v106 = a2;
          __int16 v85 = "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded";
          goto LABEL_232;
        }

        BOOL v90 = (char *)__nw_create_backtrace_string();
        os_log_type_t v82 = (os_log_s *)__nwlog_obj();
        uint64_t v83 = type;
        __int16 v91 = os_log_type_enabled(v82, type);
        if (v90)
        {
          if (v91)
          {
            nw_endpoint_t v92 = a2->identifier;
            if (!v92) {
              nw_endpoint_t v92 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
            BOOL v102 = "__nw_protocol_notify";
            uint64_t v103 = 2082;
            nw_endpoint_t v104 = (nw_protocol *)v92;
            char v105 = 2048;
            v106 = a2;
            v107 = 2082;
            uint64_t v108 = v90;
            _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v90);
          goto LABEL_233;
        }

        if (v91)
        {
          uint64_t v97 = a2->identifier;
          if (!v97) {
            uint64_t v97 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          BOOL v102 = "__nw_protocol_notify";
          uint64_t v103 = 2082;
          nw_endpoint_t v104 = (nw_protocol *)v97;
          char v105 = 2048;
          v106 = a2;
          __int16 v85 = "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace";
LABEL_232:
          _os_log_impl(&dword_181A5C000, v82, v83, v85, buf, 0x20u);
        }
      }

        goto LABEL_221;
      }

      if (!(_BYTE)v223)
      {
        __nwlog_obj();
        uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v134 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl( &dword_181A5C000,  v108,  v134,  "%{public}s called with null new_path, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_220;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v124 = type[0];
      id v125 = os_log_type_enabled(v108, type[0]);
      if (!backtrace_string)
      {
        if (v125)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_181A5C000, v108, v124, "%{public}s called with null new_path, no backtrace", buf, 0xCu);
        }

        goto LABEL_220;
      }

      if (v125)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v108,  v124,  "%{public}s called with null new_path, dumping backtrace:%{public}s",  buf,  0x16u);
      }

            if (v104) {
              free(v104);
            }
            __nwlog_obj();
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
            v112 = (char *)_os_log_send_and_compose_impl();

            type[0] = 16;
            LOBYTE(v279) = 0;
            if (type[0] == 17)
            {
              __nwlog_obj();
              nw_endpoint_t v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              __int16 v114 = type[0];
              if (os_log_type_enabled(v113, (os_log_type_t)type[0]))
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_181A5C000, v113, v114, "%{public}s called with null protocol", buf, 0xCu);
              }
            }

            else if ((_BYTE)v279)
            {
              char v115 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              nw_endpoint_t v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              __int16 v116 = type[0];
              uint64_t v117 = os_log_type_enabled(v113, (os_log_type_t)type[0]);
              if (v115)
              {
                if (v117)
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v115;
                  _os_log_impl( &dword_181A5C000,  v113,  v116,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v115);
                goto LABEL_238;
              }

              if (v117)
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl( &dword_181A5C000,  v113,  v116,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              nw_endpoint_t v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              __int16 v118 = type[0];
              if (os_log_type_enabled(v113, (os_log_type_t)type[0]))
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl( &dword_181A5C000,  v113,  v118,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
              }
            }

LABEL_238:
            if (v112) {
              free(v112);
            }
            goto LABEL_240;
          }

          if (v6[405] < 0) {
            goto LABEL_43;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v12 = (id)gLogObj;
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v7 + 407;
          __int16 v281 = 2080;
          unsigned int v282 = (nw_protocol *)" ";
          v283 = 2048;
          *(void *)v284 = a1;
          char v13 = (char *)_os_log_send_and_compose_impl();

          type[0] = 16;
          LOBYTE(v279) = 0;
          if (__nwlog_fault(v13, type, &v279))
          {
            if (type[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v14 = (os_log_s *)(id)gLogObj;
              char v15 = type[0];
              if (os_log_type_enabled(v14, (os_log_type_t)type[0]))
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v7 + 407;
                __int16 v281 = 2080;
                unsigned int v282 = (nw_protocol *)" ";
                v283 = 2048;
                *(void *)v284 = a1;
                _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s %{public}s%sCannot add input handler %p to itself",  buf,  0x2Au);
              }
            }

            else if ((_BYTE)v279)
            {
              uint64_t v20 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v14 = (os_log_s *)(id)gLogObj;
              os_log_type_t v21 = type[0];
              BOOL v22 = os_log_type_enabled(v14, (os_log_type_t)type[0]);
              if (v20)
              {
                if (v22)
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v7 + 407;
                  __int16 v281 = 2080;
                  unsigned int v282 = (nw_protocol *)" ";
                  v283 = 2048;
                  *(void *)v284 = a1;
                  *(_WORD *)&v284[8] = 2082;
                  *(void *)&v284[10] = v20;
                  _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s %{public}s%sCannot add input handler %p to itself, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v20);
                if (!v13) {
                  goto LABEL_43;
                }
                goto LABEL_42;
              }

              if (v22)
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v7 + 407;
                __int16 v281 = 2080;
                unsigned int v282 = (nw_protocol *)" ";
                v283 = 2048;
                *(void *)v284 = a1;
                _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s %{public}s%sCannot add input handler %p to itself, no backtrace",  buf,  0x2Au);
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v14 = (os_log_s *)(id)gLogObj;
              os_log_type_t v23 = type[0];
              if (os_log_type_enabled(v14, (os_log_type_t)type[0]))
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v7 + 407;
                __int16 v281 = 2080;
                unsigned int v282 = (nw_protocol *)" ";
                v283 = 2048;
                *(void *)v284 = a1;
                _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s %{public}s%sCannot add input handler %p to itself, backtrace limit exceeded",  buf,  0x2Au);
              }
            }
          }

    if (v96) {
      free(v96);
    }
    BOOL v33 = 0;
    uint64_t v135 = 0;
    id v18 = v95;
    os_log_t log = 0;
    if (!*(void *)(*(void *)(a1[4] + 8LL) + 24LL))
    {
      __nwlog_obj();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v140 = "nw_http1_connection_write_chunk_header";
      id v100 = (char *)_os_log_send_and_compose_impl();
      v138 = OS_LOG_TYPE_ERROR;
      v137 = 0;
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        __int16 v101 = (os_log_s *)__nwlog_obj();
        BOOL v102 = v138;
        if (!os_log_type_enabled(v101, v138)) {
          goto LABEL_246;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v140 = "nw_http1_connection_write_chunk_header";
        uint64_t v103 = "%{public}s called with null http1_connection";
        goto LABEL_244;
      }

      if (!v137)
      {
        __int16 v101 = (os_log_s *)__nwlog_obj();
        BOOL v102 = v138;
        if (!os_log_type_enabled(v101, v138)) {
          goto LABEL_246;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v140 = "nw_http1_connection_write_chunk_header";
        uint64_t v103 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        goto LABEL_244;
      }

      uint64_t v128 = (char *)__nw_create_backtrace_string();
      uint64_t v129 = (os_log_s *)__nwlog_obj();
      BOOL v102 = v138;
      v132 = v129;
      v130 = os_log_type_enabled(v129, v138);
      if (v128)
      {
        if (v130)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v140 = "nw_http1_connection_write_chunk_header";
          v141 = 2082;
          v142 = v128;
          _os_log_impl( &dword_181A5C000,  v132,  v102,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v128);
      }

      else if (v130)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v140 = "nw_http1_connection_write_chunk_header";
        uint64_t v103 = "%{public}s called with null http1_connection, no backtrace";
        goto LABEL_273;
      }

      goto LABEL_246;
    }

    __break(1u);
    return;
  }

  __src = bswap64(a5 | 0xC000000000000000LL);
  os_log_type_t v21 = 8LL;
LABEL_32:
  BOOL v22 = *(void *)(*(void *)v13 + 8LL);
  if (*(void *)(v22 + 24) >= v21)
  {
    memcpy(v20, &__src, v21);
    os_log_type_t v23 = *(void *)(v22 + 24);
    *(void *)(v22 + 24) = v23 - v21;
    if (v23 < v21)
    {
      if (gLogDatapath)
      {
        __int16 v63 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          BOOL v64 = *(void *)(v22 + 24);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          uint64_t v83 = "_http_safe_append";
          BOOL v84 = 2082;
          __int16 v85 = "*remaining";
          BOOL v86 = 2048;
          __int16 v87 = v21;
          os_log_type_t v88 = 2048;
          __int16 v89 = v64;
          _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      *(void *)(v22 + 24) = 0LL;
    }

    uint64_t v24 = &v20[v21];
    goto LABEL_37;
  }

  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v83 = "_http_safe_append";
  int v39 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v80 = 0;
  if (__nwlog_fault(v39, &type, &v80))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length)";
LABEL_200:
        _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0xCu);
      }
    }

    else if (v80)
    {
      __int16 v65 = (char *)__nw_create_backtrace_string();
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      os_log_type_t v66 = os_log_type_enabled(v40, type);
      if (v65)
      {
        if (v66)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v83 = "_http_safe_append";
          BOOL v84 = 2082;
          __int16 v85 = v65;
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v65);
        goto LABEL_201;
      }

      if (v66)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length), no backtrace";
        goto LABEL_200;
      }
    }

    else
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_200;
      }
    }
  }

    __break(1u);
    return;
  }

  __src = bswap64(a5 | 0xC000000000000000LL);
  os_log_type_t v21 = 8LL;
LABEL_32:
  BOOL v22 = *(void *)(*(void *)v13 + 8LL);
  if (*(void *)(v22 + 24) >= v21)
  {
    memcpy(v20, &__src, v21);
    os_log_type_t v23 = *(void *)(v22 + 24);
    *(void *)(v22 + 24) = v23 - v21;
    if (v23 < v21)
    {
      if (gLogDatapath)
      {
        __int16 v63 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          BOOL v64 = *(void *)(v22 + 24);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          uint64_t v83 = "_http_safe_append";
          BOOL v84 = 2082;
          __int16 v85 = "*remaining";
          BOOL v86 = 2048;
          __int16 v87 = v21;
          os_log_type_t v88 = 2048;
          __int16 v89 = v64;
          _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      *(void *)(v22 + 24) = 0LL;
    }

    uint64_t v24 = &v20[v21];
    goto LABEL_37;
  }

  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v83 = "_http_safe_append";
  int v39 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v80 = 0;
  if (__nwlog_fault(v39, &type, &v80))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length)";
LABEL_200:
        _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0xCu);
      }
    }

    else if (v80)
    {
      __int16 v65 = (char *)__nw_create_backtrace_string();
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      os_log_type_t v66 = os_log_type_enabled(v40, type);
      if (v65)
      {
        if (v66)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v83 = "_http_safe_append";
          BOOL v84 = 2082;
          __int16 v85 = v65;
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v65);
        goto LABEL_201;
      }

      if (v66)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length), no backtrace";
        goto LABEL_200;
      }
    }

    else
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_200;
      }
    }
  }

    __break(1u);
    return;
  }

  __src = bswap64(a5 | 0xC000000000000000LL);
  os_log_type_t v21 = 8LL;
LABEL_32:
  BOOL v22 = *(void *)(*(void *)v13 + 8LL);
  if (*(void *)(v22 + 24) >= v21)
  {
    memcpy(v20, &__src, v21);
    os_log_type_t v23 = *(void *)(v22 + 24);
    *(void *)(v22 + 24) = v23 - v21;
    if (v23 < v21)
    {
      if (gLogDatapath)
      {
        __int16 v63 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          BOOL v64 = *(void *)(v22 + 24);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          uint64_t v83 = "_http_safe_append";
          BOOL v84 = 2082;
          __int16 v85 = "*remaining";
          BOOL v86 = 2048;
          __int16 v87 = v21;
          os_log_type_t v88 = 2048;
          __int16 v89 = v64;
          _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
        }
      }

      *(void *)(v22 + 24) = 0LL;
    }

    uint64_t v24 = &v20[v21];
    goto LABEL_37;
  }

  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v83 = "_http_safe_append";
  int v39 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v80 = 0;
  if (__nwlog_fault(v39, &type, &v80))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length)";
LABEL_200:
        _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0xCu);
      }
    }

    else if (v80)
    {
      __int16 v65 = (char *)__nw_create_backtrace_string();
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      os_log_type_t v66 = os_log_type_enabled(v40, type);
      if (v65)
      {
        if (v66)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v83 = "_http_safe_append";
          BOOL v84 = 2082;
          __int16 v85 = v65;
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v65);
        goto LABEL_201;
      }

      if (v66)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length), no backtrace";
        goto LABEL_200;
      }
    }

    else
    {
      os_log_type_t v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v83 = "_http_safe_append";
        char v42 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_200;
      }
    }
  }

            if (v72)
            {
LABEL_221:
              nw_endpoint_t v143 = (char *)v72;
LABEL_222:
              free(v143);
            }

      nw::release_if_needed<nw_protocol *>(&v289);
      goto LABEL_221;
    }

    v185 = v280;
    int v186 = (*((_BYTE *)v185 + 268) & 0x20) == 0;

    char v11 = v286;
    if (!v186) {
      goto LABEL_236;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v187 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v188 = v185;

      v189 = v188;
      v190 = (*((_BYTE *)v185 + 268) & 1) == 0;

      if (v190) {
        nw_endpoint_t v191 = "";
      }
      else {
        nw_endpoint_t v191 = "dry-run ";
      }
      v192 = nw_endpoint_handler_copy_endpoint(v189);
      v193 = nw_endpoint_get_logging_description(v192);
      v194 = v189;
      id v195 = v194;
      uint64_t v196 = v194[30];
      else {
        v197 = off_189BBBBF0[v196];
      }
      os_log_type_t v285 = v197;

      uint64_t v205 = v195;
      v206 = v205;
      v207 = "path";
      switch(v9->mode)
      {
        case 0:
          break;
        case 1:
          v207 = "resolver";
          break;
        case 2:
          v207 = nw_endpoint_flow_mode_string(v205[31]);
          break;
        case 3:
          v207 = "proxy";
          break;
        case 4:
          v207 = "fallback";
          break;
        case 5:
          v207 = "transform";
          break;
        default:
          v207 = "unknown-mode";
          break;
      }

      nw_endpoint_t v208 = v206;
      os_unfair_lock_lock((os_unfair_lock_t)v208 + 28);
      nw_endpoint_t v209 = v208[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v208 + 28);

      *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
      v292 = "nw_endpoint_flow_setup_protocols";
      id v293 = 2082;
      v294 = v188 + 168;
      os_log_type_t v295 = 2082;
      BOOL v296 = (nw_protocol *)v191;
      v297 = 2082;
      os_log_type_t v298 = (void *)v193;
      os_log_type_t v299 = 2082;
      v300 = (void *)v285;
      v301 = 2082;
      v302 = v207;
      v303 = 2114;
      v304 = v209;
      _os_log_impl( &dword_181A5C000,  v187,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already started",  buf,  0x48u);
    }

    goto LABEL_235;
  }

  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v187 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      v211 = nw_endpoint_handler_get_id_string(v280);
      id v212 = nw_endpoint_handler_dry_run_string(v280);
      id v213 = nw_endpoint_handler_copy_endpoint(v280);
      v214 = nw_endpoint_get_logging_description(v213);
      id v215 = nw_endpoint_handler_state_string(v280);
      id v216 = nw_endpoint_handler_mode_string(v280);
      nw_endpoint_t v217 = nw_endpoint_handler_copy_current_path(v280);
      *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
      v292 = "nw_endpoint_flow_setup_protocols";
      id v293 = 2082;
      v294 = (char *)v211;
      os_log_type_t v295 = 2082;
      BOOL v296 = (nw_protocol *)v212;
      v297 = 2082;
      os_log_type_t v298 = (void *)v214;
      os_log_type_t v299 = 2082;
      v300 = (void *)v215;
      v301 = 2082;
      v302 = v216;
      v303 = 2114;
      v304 = v217;
      _os_log_impl( &dword_181A5C000,  v187,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not doing anything yet, no conn ected endpoint handler",  buf,  0x48u);
    }

    goto LABEL_78;
  }

  if (!v145)
  {
    __nwlog_obj();
    char v115 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v150 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v116 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v106, v116, "%{public}s called with null parameters", buf, 0xCu);
      }

LABEL_463:
                    goto LABEL_464;
                  }

                  if (!v357)
                  {
                    __nwlog_obj();
                    v318 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v328 = v358;
                    if (os_log_type_enabled(v318, v358))
                    {
                      v329 = *(const char **)(v176 + 16);
                      if (!v329) {
                        v329 = "invalid";
                      }
                      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                      __int16 v364 = 2082;
                      v365 = (void *)v329;
                      __int16 v366 = 2048;
                      v367 = (const char *)v176;
                      _os_log_impl( &dword_181A5C000,  v318,  v328,  "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded",  buf,  0x20u);
                    }

                    goto LABEL_463;
                  }

                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v318 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v325 = v358;
                  BOOL v326 = os_log_type_enabled(v318, v358);
                  if (!backtrace_string)
                  {
                    if (v326)
                    {
                      v330 = *(const char **)(v176 + 16);
                      if (!v330) {
                        v330 = "invalid";
                      }
                      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                      __int16 v364 = 2082;
                      v365 = (void *)v330;
                      __int16 v366 = 2048;
                      v367 = (const char *)v176;
                      _os_log_impl( &dword_181A5C000,  v318,  v325,  "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace",  buf,  0x20u);
                    }

                    goto LABEL_463;
                  }

                  if (v326)
                  {
                    v327 = *(const char **)(v176 + 16);
                    if (!v327) {
                      v327 = "invalid";
                    }
                    *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                    __int16 v364 = 2082;
                    v365 = (void *)v327;
                    __int16 v366 = 2048;
                    v367 = (const char *)v176;
                    __int16 v368 = 2082;
                    v369 = backtrace_string;
                    _os_log_impl( &dword_181A5C000,  v318,  v325,  "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                  }

                  free(backtrace_string);
                }

        v223 = v265;
LABEL_464:
        _os_log_impl(&dword_181A5C000, v202, v203, v204, v223, 0xCu);
        goto LABEL_465;
      }

      __nwlog_obj();
      *(_DWORD *)id v265 = 136446210;
      *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      uint64_t v201 = (char *)_os_log_send_and_compose_impl();
      v257[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (v257[0] == OS_LOG_TYPE_FAULT)
      {
        v202 = (os_log_s *)__nwlog_obj();
        char v203 = v257[0];
        if (os_log_type_enabled(v202, v257[0]))
        {
          *(_DWORD *)id v265 = 136446210;
          *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          uint64_t v204 = "%{public}s called with null http1_connection->context";
          goto LABEL_463;
        }

        goto LABEL_465;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v202 = (os_log_s *)__nwlog_obj();
        char v203 = v257[0];
        if (!os_log_type_enabled(v202, v257[0])) {
          goto LABEL_465;
        }
        *(_DWORD *)id v265 = 136446210;
        *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        uint64_t v204 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
        goto LABEL_463;
      }

      uint64_t v219 = (char *)__nw_create_backtrace_string();
      v202 = (os_log_s *)__nwlog_obj();
      char v203 = v257[0];
      v220 = os_log_type_enabled(v202, v257[0]);
      if (!v219)
      {
        if (!v220) {
          goto LABEL_465;
        }
        *(_DWORD *)id v265 = 136446210;
        *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        uint64_t v204 = "%{public}s called with null http1_connection->context, no backtrace";
        goto LABEL_463;
      }

      if (v220)
      {
        *(_DWORD *)id v265 = 136446466;
        *(void *)&v265[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v265[12] = 2082;
        *(void *)&v265[14] = v219;
        uint64_t v221 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
        goto LABEL_443;
      }

              os_log_type_t v270 = 0LL;
LABEL_432:

              id v74 = v274;
              posix_error = v270;
              if (v270) {
                goto LABEL_145;
              }
              goto LABEL_433;
            }

            os_log_type_t v140 = v18->sa_family;
            if (v140 != 2)
            {
              if (v140 != 30) {
                goto LABEL_463;
              }
              if (setsockopt(v78, 41, 61, &v282, 4u) < 0)
              {
                os_log_type_t v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                           + 8));
                v158 = nw_error_get_error_code(v270);
                __nwlog_obj();
                v159 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v158;
                uint64_t v83 = (char *)_os_log_send_and_compose_impl();

                type[0] = OS_LOG_TYPE_ERROR;
                os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  BOOL v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v160 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v158;
                    _os_log_impl( &dword_181A5C000,  v84,  v160,  "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                  }

                  goto LABEL_400;
                }

                if (v279 == OS_LOG_TYPE_DEFAULT)
                {
                  __nwlog_obj();
                  BOOL v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v180 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v158;
                    _os_log_impl( &dword_181A5C000,  v84,  v180,  "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                  }

                  goto LABEL_400;
                }

                nw_endpoint_t v153 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v169 = type[0];
                char v170 = os_log_type_enabled(v96, type[0]);
                if (!v153)
                {
                  if (v170)
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v158;
                    _os_log_impl( &dword_181A5C000,  v96,  v169,  "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                  }

                  goto LABEL_428;
                }

                if (v170)
                {
                  *(_DWORD *)address = 136446722;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v158;
                  address[9] = 2082;
                  *(void *)&address[10] = v153;
                  _os_log_impl( &dword_181A5C000,  v96,  v169,  "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                }

                goto LABEL_315;
              }

              if ((setsockopt(v78, 41, 35, &v282, 4u) & 0x80000000) == 0) {
                goto LABEL_407;
              }
              v141 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              __nwlog_obj();
              v142 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v141;
              nw_endpoint_t v143 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v143, type, &v279))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v144 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v145 = type[0];
                  if (os_log_type_enabled(v144, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v141;
                    _os_log_impl( &dword_181A5C000,  v144,  v145,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                  }
                }

                else if (v279)
                {
                  char v173 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v144 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  uint64_t v174 = type[0];
                  v175 = os_log_type_enabled(v144, type[0]);
                  if (v173)
                  {
                    if (v175)
                    {
                      *(_DWORD *)address = 136446722;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v141;
                      address[9] = 2082;
                      *(void *)&address[10] = v173;
                      _os_log_impl( &dword_181A5C000,  v144,  v174,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                    }

                    free(v173);
                    goto LABEL_404;
                  }

                  if (v175)
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v141;
                    _os_log_impl( &dword_181A5C000,  v144,  v174,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v144 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  BOOL v182 = type[0];
                  if (os_log_type_enabled(v144, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v141;
                    _os_log_impl( &dword_181A5C000,  v144,  v182,  "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                  }
                }
              }

LABEL_464:
                if (v317) {
                  free(v317);
                }
                int v186 = v356;
                if (v202 != &nw_protocol_ref_counted_handle)
                {
LABEL_246:
                  if (v185 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                  }
                  if ((nw_endpoint_handler_get_logging_disabled(v186) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    uint64_t v188 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
                    {
                      v207 = nw_endpoint_handler_get_id_string(v356);
                      nw_endpoint_t v208 = nw_endpoint_handler_dry_run_string(v356);
                      nw_endpoint_t v209 = nw_endpoint_handler_copy_endpoint(v356);
                      v210 = nw_endpoint_get_logging_description(v209);
                      v211 = nw_endpoint_handler_state_string(v356);
                      id v212 = nw_endpoint_handler_mode_string(v356);
                      id v213 = nw_endpoint_handler_copy_current_path(v356);
                      *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                      __int16 v364 = 2082;
                      v365 = (void *)v207;
                      __int16 v366 = 2082;
                      v367 = v208;
                      __int16 v368 = 2082;
                      v369 = (void *)v210;
                      __int16 v370 = 2082;
                      v371 = v211;
                      __int16 v372 = 2082;
                      v373 = v212;
                      __int16 v374 = 2114;
                      id v375 = v213;
                      _os_log_impl( &dword_181A5C000,  v188,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removed replay protocol from the stack on cancellation",  buf,  0x48u);
                    }

      free(v304);
      if (!v293)
      {
LABEL_558:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v364 = "nw_protocol_http1_output_available";
        os_log_type_t v298 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__len[1]) = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (LOBYTE(__len[1]) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v299 = (os_log_s *)gLogObj;
          v300 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1])) {
            goto LABEL_592;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v364 = "nw_protocol_http1_output_available";
          v301 = "%{public}s called with null http1";
        }

        else if (type[0])
        {
          v335 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v299 = (os_log_s *)gLogObj;
          v300 = __len[1];
          uint64_t v336 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
          if (v335)
          {
            if (v336)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              __int16 v364 = "nw_protocol_http1_output_available";
              v365 = 2082;
              *(void *)__int16 v366 = v335;
              _os_log_impl( &dword_181A5C000,  v299,  v300,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v335);
LABEL_592:
            if (!v298) {
              return;
            }
            goto LABEL_593;
          }

          if (!v336) {
            goto LABEL_592;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v364 = "nw_protocol_http1_output_available";
          v301 = "%{public}s called with null http1, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v299 = (os_log_s *)gLogObj;
          v300 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1])) {
            goto LABEL_592;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v364 = "nw_protocol_http1_output_available";
          v301 = "%{public}s called with null http1, backtrace limit exceeded";
        }

        goto LABEL_591;
      }

LABEL_286:
                  if ((*((_BYTE *)v6 + 33) & 0x40) != 0)
                  {
                    v229 = (void *)*((void *)v6 + 113);
                    *((void *)v6 + 113) = 0LL;
                  }

                  else
                  {
                    if (*((void *)v6 + 114)) {
                      *((void *)v6 + 114) = 0LL;
                    }
                    os_unfair_lock_lock(lock);
                    v228 = (_DNSServiceRef_t *)*((void *)v6 + 115);
                    if (v228)
                    {
                      DNSServiceRefDeallocate(v228);
                      *((void *)v6 + 115) = 0LL;
                    }

                    os_unfair_lock_unlock(lock);
                  }

                  *((_BYTE *)v6 + 32) &= 0x2Fu;
                  BOOL v230 = (void *)*((void *)v6 + 104);
                  *((void *)v6 + 104) = 0LL;

                  *((_OWORD *)v6 + 46) = 0u;
                  char v231 = *((_BYTE *)v6 + 33);
                  *((_BYTE *)v6 + 33) = v231 & 0xFE;
                  *((void *)v6 + 94) = 0LL;
                  if ((v231 & 4) != 0)
                  {
                    v232 = v356;
                    id v233 = v232[7];

                    if (v233) {
                      nw_association_mark_flow_disconnected(v233, v232);
                    }
                    *((_BYTE *)v6 + 33) &= ~4u;
                  }

                  v234 = (void *)*((void *)v6 + 67);
                  if (v234)
                  {
                    *((void *)v6 + 67) = 0LL;
                  }

                  *((_WORD *)v6 + 354) &= ~1u;
                  v235 = (void *)*((void *)v6 + 3);
                  *((void *)v6 + 3) = 0LL;

                  if (!a2) {
                    goto LABEL_336;
                  }
                  v236 = v356;
                  int state = v236->state;

                  if (state == 5) {
                    goto LABEL_336;
                  }
                  unsigned int v238 = v355;
                  if (!v355) {
                    unsigned int v238 = (void *)*((void *)v6 + 109);
                  }
                  id v354 = v238;
                  uint64_t v239 = *((void *)v6 + 5);
                  if ((*((_BYTE *)v6 + 33) & 8) != 0)
                  {
                    if (!v239)
                    {
LABEL_334:
                      v266 = v236;
                      v236->int state = 4;

                      __int16 v241 = 10;
                      v240 = v354;
                      goto LABEL_335;
                    }
                  }

                  else if (!v239)
                  {
                    v240 = v354;
                    nw_endpoint_handler_handle_failure(v236);
                    __int16 v241 = 7;
LABEL_335:
                    v236->event.domain = 3;
                    v236->event.event = v241;
                    nw_endpoint_handler_report(v236, 0LL, &v236->event.domain, v240);

LABEL_336:
                    *((_BYTE *)v6 + 36) &= ~2u;

LABEL_337:
                    goto LABEL_338;
                  }

                  v242 = v236;
                  BOOL v243 = (*((_BYTE *)v242 + 268) & 0x20) == 0;

                  if (v243)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    v244 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
                    {
                      v245 = v242;

                      id v246 = v245;
                      BOOL v247 = (*((_BYTE *)v242 + 268) & 1) == 0;

                      if (v247) {
                        v248 = "";
                      }
                      else {
                        v248 = "dry-run ";
                      }
                      nw_endpoint_t v249 = nw_endpoint_handler_copy_endpoint(v246);
                      v250 = nw_endpoint_get_logging_description(v249);
                      v251 = v246;
                      unsigned int v252 = v251;
                      uint64_t v253 = v236->state;
                      os_unfair_lock_t locka = (os_unfair_lock_t)v250;
                      else {
                        nw_endpoint_t v254 = off_189BBBBF0[v253];
                      }
                      logc = v254;

                      v255 = v252;
                      v256 = v255;
                      v257 = "path";
                      switch(*((_DWORD *)v255 + 29))
                      {
                        case 0:
                          break;
                        case 1:
                          v257 = "resolver";
                          break;
                        case 2:
                          v257 = nw_endpoint_flow_mode_string(v255[31]);
                          break;
                        case 3:
                          v257 = "proxy";
                          break;
                        case 4:
                          v257 = "fallback";
                          break;
                        case 5:
                          v257 = "transform";
                          break;
                        default:
                          v257 = "unknown-mode";
                          break;
                      }

                      v262 = v245;
                      v263 = v256;
                      os_unfair_lock_lock((os_unfair_lock_t)v263 + 28);
                      id v264 = v263[8];
                      os_unfair_lock_unlock((os_unfair_lock_t)v263 + 28);

                      id v265 = v264;
                      *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                      __int16 v364 = 2082;
                      v365 = v262->id_str;
                      __int16 v366 = 2082;
                      v367 = v248;
                      __int16 v368 = 2082;
                      v369 = locka;
                      __int16 v370 = 2082;
                      v371 = logc;
                      __int16 v372 = 2082;
                      v373 = v257;
                      __int16 v374 = 2114;
                      id v375 = v265;
                      _os_log_impl( &dword_181A5C000,  v244,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to clone from flow, moving directly to failed state",  buf,  0x48u);
                    }
                  }

                  goto LABEL_334;
                }

  if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
  {
    if (*v225)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v196 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_ERROR)) {
        goto LABEL_295;
      }
      char v203 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = (char *)v1 + 256;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&_BYTE buf[24] = v221;
      *(_WORD *)&buf[32] = 2082;
      *(void *)&buf[34] = v203;
      *(_WORD *)&buf[42] = 1024;
      *(_DWORD *)&buf[44] = v5;
      v198 = "%{public}s [C%{public}s] %{public}s failed: %{public}s(%d)";
      id v199 = v196;
      id v200 = 48;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v196 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_ERROR)) {
        goto LABEL_295;
      }
      uint64_t v204 = *((_DWORD *)v1 + 85);
      uint64_t v205 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v204;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v221;
      *(_WORD *)&buf[28] = 2082;
      *(void *)&buf[30] = v205;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v5;
      v198 = "%{public}s [R%u] %{public}s failed: %{public}s(%d)";
      id v199 = v196;
      id v200 = 44;
    }

    if (v126) {
      free(v126);
    }
    *(_DWORD *)(v120 + 368) = -1;
    os_log_type_t v10 = (unsigned __int16 *)(v9 + 872);
    goto LABEL_289;
  }

    _os_log_impl(&dword_181A5C000, v78, v79, v85, buf, 0x1Cu);
    goto LABEL_287;
  }

  uint64_t v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  __int16 v73 = (os_log_s *)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    uint64_t v108 = 2080;
    *(void *)uint64_t v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v72;
    _os_log_impl( &dword_181A5C000,  v73,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_KEEPALIVE failed %{darwin.errno}d",  buf,  0x1Cu);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v74 = (os_log_s *)gLogObj;
  if ((_DWORD)v72 != 22)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    uint64_t v108 = 1024;
    *(_DWORD *)uint64_t v109 = v72;
    os_log_type_t v77 = (char *)_os_log_send_and_compose_impl();
    v102[0] = OS_LOG_TYPE_ERROR;
    v101[0] = OS_LOG_TYPE_DEFAULT;
    if (v102[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v78 = (os_log_s *)gLogObj;
      uint64_t v79 = v102[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v102[0])) {
        goto LABEL_304;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v108 = 1024;
      *(_DWORD *)uint64_t v109 = v72;
      uint64_t v80 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d";
      goto LABEL_303;
    }

    if (v101[0] == OS_LOG_TYPE_DEFAULT)
    {
      char v78 = (os_log_s *)__nwlog_obj();
      uint64_t v79 = v102[0];
      if (!os_log_type_enabled(v78, v102[0])) {
        goto LABEL_304;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v108 = 1024;
      *(_DWORD *)uint64_t v109 = v72;
      uint64_t v80 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_303;
    }

    uint64_t v83 = (char *)__nw_create_backtrace_string();
    char v78 = (os_log_s *)__nwlog_obj();
    uint64_t v79 = v102[0];
    BOOL v84 = os_log_type_enabled(v78, v102[0]);
    if (!v83)
    {
      if (!v84) {
        goto LABEL_304;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v108 = 1024;
      *(_DWORD *)uint64_t v109 = v72;
      uint64_t v80 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d, no backtrace";
      goto LABEL_303;
    }

    if (!v84) {
      goto LABEL_287;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    uint64_t v108 = 1024;
    *(_DWORD *)uint64_t v109 = v72;
    *(_WORD *)&v109[4] = 2082;
    *(void *)&v109[6] = v83;
    __int16 v85 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d, dumping backtrace:%{public}s";
    goto LABEL_286;
  }

  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    uint64_t v108 = 1024;
    *(_DWORD *)uint64_t v109 = 22;
    char v75 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d";
LABEL_250:
    _os_log_impl(&dword_181A5C000, v74, OS_LOG_TYPE_ERROR, v75, buf, 0x12u);
  }

                  if (v107) {
                    free(v107);
                  }
                  nw_endpoint_t v19 = v6 - 5LL;
                  uint64_t v8 = (unsigned __int8 *)v145;
                  uint64_t v20 = v143;
LABEL_133:
                  __int16 v63 = 0LL;
                  while (2)
                  {
                    BOOL v64 = v8[v63];
                    __int16 v65 = *(unsigned int *)&v20[v63];
                    if (!(_DWORD)v65
                      || v65 <= 0xFFFFFFF9
                      && (v13 >= v65 + 5 ? (os_log_type_t v66 = v13 - (v65 + 5) >= v63) : (os_log_type_t v66 = 0), v66))
                    {
LABEL_160:
                      uint64_t v76 = v65 + 5;
                      os_log_type_t v77 = v65 + 5 + v63;
                      if (v77 > v13)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        char v78 = (id)gLogObj;
                        *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                        *(_WORD *)&_BYTE buf[12] = 2048;
                        *(void *)&buf[14] = v65 + 5;
                        *(_WORD *)&buf[22] = 2048;
                        nw_endpoint_t v153 = v63;
                        v154 = 2048;
                        *(void *)v155 = v13;
                        uint64_t v79 = (void *)_os_log_send_and_compose_impl();

                        os_log_type_t type = OS_LOG_TYPE_ERROR;
                        v148 = 0;
                        if (__nwlog_fault((const char *)v79, &type, &v148))
                        {
                          if (type == OS_LOG_TYPE_FAULT)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            uint64_t v80 = (os_log_s *)(id)gLogObj;
                            unint64_t v81 = type;
                            if (os_log_type_enabled(v80, type))
                            {
                              *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&_BYTE buf[12] = 2048;
                              *(void *)&buf[14] = v76;
                              *(_WORD *)&buf[22] = 2048;
                              nw_endpoint_t v153 = v63;
                              v154 = 2048;
                              *(void *)v155 = v13;
                              _os_log_impl( &dword_181A5C000,  v80,  v81,  "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu)",  buf,  0x2Au);
                            }

                            goto LABEL_194;
                          }

                          if (v148)
                          {
                            BOOL v90 = (char *)__nw_create_backtrace_string();
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            uint64_t v80 = (os_log_s *)(id)gLogObj;
                            __int16 v91 = type;
                            nw_endpoint_t v92 = os_log_type_enabled(v80, type);
                            if (v90)
                            {
                              if (v92)
                              {
                                *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
                                *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                *(_WORD *)&_BYTE buf[12] = 2048;
                                *(void *)&buf[14] = v76;
                                *(_WORD *)&buf[22] = 2048;
                                nw_endpoint_t v153 = v63;
                                v154 = 2048;
                                *(void *)v155 = v13;
                                *(_WORD *)&v155[8] = 2082;
                                *(void *)&v155[10] = v90;
                                _os_log_impl( &dword_181A5C000,  v80,  v91,  "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), dumping back trace:%{public}s",  buf,  0x34u);
                              }

                              free(v90);
                              if (!v79)
                              {
LABEL_197:
                                if (v77 == v13) {
                                  goto LABEL_198;
                                }
                                __nwlog_obj();
                                v112 = (void *)objc_claimAutoreleasedReturnValue();
                                *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                                *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                *(_WORD *)&_BYTE buf[12] = 2048;
                                *(void *)&buf[14] = v77;
                                *(_WORD *)&buf[22] = 2048;
                                nw_endpoint_t v153 = v13;
                                id v55 = (char *)_os_log_send_and_compose_impl();

                                os_log_type_t type = OS_LOG_TYPE_ERROR;
                                v148 = 0;
                                if (__nwlog_fault(v55, &type, &v148))
                                {
                                  if (type == OS_LOG_TYPE_FAULT)
                                  {
                                    __nwlog_obj();
                                    BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                    nw_endpoint_t v113 = type;
                                    if (os_log_type_enabled(v56, type))
                                    {
                                      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&_BYTE buf[12] = 2048;
                                      *(void *)&buf[14] = v77;
                                      *(_WORD *)&buf[22] = 2048;
                                      nw_endpoint_t v153 = v13;
                                      _os_log_impl( &dword_181A5C000,  v56,  v113,  "%{public}s cursor has unexpected value %zu != %zu",  buf,  0x20u);
                                    }

                                    goto LABEL_120;
                                  }

                                  if (!v148)
                                  {
                                    __nwlog_obj();
                                    BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                    BOOL v134 = type;
                                    if (os_log_type_enabled(v56, type))
                                    {
                                      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&_BYTE buf[12] = 2048;
                                      *(void *)&buf[14] = v77;
                                      *(_WORD *)&buf[22] = 2048;
                                      nw_endpoint_t v153 = v13;
                                      _os_log_impl( &dword_181A5C000,  v56,  v134,  "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded",  buf,  0x20u);
                                    }

                                    goto LABEL_120;
                                  }

                                  v130 = (char *)__nw_create_backtrace_string();
                                  __nwlog_obj();
                                  BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                                  nw_endpoint_t v131 = type;
                                  v132 = os_log_type_enabled(v56, type);
                                  if (!v130)
                                  {
                                    if (v132)
                                    {
                                      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&_BYTE buf[12] = 2048;
                                      *(void *)&buf[14] = v77;
                                      *(_WORD *)&buf[22] = 2048;
                                      nw_endpoint_t v153 = v13;
                                      _os_log_impl( &dword_181A5C000,  v56,  v131,  "%{public}s cursor has unexpected value %zu != %zu, no backtrace",  buf,  0x20u);
                                    }

                                    goto LABEL_120;
                                  }

                                  if (v132)
                                  {
                                    *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                    *(_WORD *)&_BYTE buf[12] = 2048;
                                    *(void *)&buf[14] = v77;
                                    *(_WORD *)&buf[22] = 2048;
                                    nw_endpoint_t v153 = v13;
                                    v154 = 2082;
                                    *(void *)v155 = v130;
                                    _os_log_impl( &dword_181A5C000,  v56,  v131,  "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s",  buf,  0x2Au);
                                  }

                                  free(v130);
                                  if (v55) {
                                    goto LABEL_122;
                                  }
LABEL_198:
                                  id v94 = v139;
                                  __int16 v95 = v142;
                                  if (v142) {
LABEL_199:
                                  }
                                    free(v95);
                                  goto LABEL_200;
                                }
            }
          }

          if (v127) {
            free(v127);
          }
          unint64_t v81 = 0;
          if ((v77 & 1) != 0) {
LABEL_178:
          }
            nw::release_if_needed<nw_protocol *>((uint64_t *)v370);
LABEL_179:
          if ((v374 & 1) == 0) {
            goto LABEL_181;
          }
LABEL_180:
          nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
          goto LABEL_181;
        }

        __nwlog_obj();
        nw_endpoint_t v139 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v378 = "__nw_protocol_replace_input_handler";
        os_log_type_t v140 = (char *)_os_log_send_and_compose_impl();

        v370[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (v370[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v142 = v370[0];
          if (os_log_type_enabled(v141, v370[0]))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            uint64_t v378 = "__nw_protocol_replace_input_handler";
            _os_log_impl(&dword_181A5C000, v141, v142, "%{public}s called with null new_input_protocol", buf, 0xCu);
          }

LABEL_445:
              if (v303) {
                free(v303);
              }
              goto LABEL_282;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id loga = (id)gconnectionLogObj;
            id v100 = v98;

            __int16 v101 = v100;
            BOOL v102 = (*((_BYTE *)v98 + 268) & 1) == 0;

            if (v102) {
              uint64_t v103 = "";
            }
            else {
              uint64_t v103 = "dry-run ";
            }
            nw_endpoint_t v104 = nw_endpoint_handler_copy_endpoint(v101);
            char v105 = nw_endpoint_get_logging_description(v104);
            v106 = v101;
            v107 = v106;
            uint64_t v108 = v106[30];
            v339 = v103;
            nw_endpoint_t v333 = v104;
            v334 = v105;
            else {
              uint64_t v109 = off_189BBBBF0[v108];
            }

            char v110 = v107;
            v111 = v110;
            v112 = "path";
            switch(v110[29])
            {
              case 0u:
                break;
              case 1u:
                v112 = "resolver";
                break;
              case 2u:
                v112 = nw_endpoint_flow_mode_string(*((void **)v110 + 31));
                break;
              case 3u:
                v112 = "proxy";
                break;
              case 4u:
                v112 = "fallback";
                break;
              case 5u:
                v112 = "transform";
                break;
              default:
                v112 = "unknown-mode";
                break;
            }

            __int16 v118 = v111;
            os_unfair_lock_lock((os_unfair_lock_t)v118 + 28);
            id v119 = *((id *)v118 + 8);
            v331 = (os_unfair_lock_s *)(v118 + 112);
            __int16 v120 = v109;
            v121 = v111;
            os_unfair_lock_unlock((os_unfair_lock_t)v118 + 28);
            v332 = (id *)v118;

            __int16 v122 = v100 + 168;
            id v123 = v119;
            *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
            __int16 v364 = 2082;
            __int16 v124 = v122;
            v365 = v122;
            __int16 v366 = 2082;
            v367 = v339;
            __int16 v368 = 2082;
            v369 = (void *)v334;
            __int16 v370 = 2082;
            v371 = v120;
            __int16 v372 = 2082;
            v373 = v112;
            __int16 v374 = 2114;
            id v375 = v123;
            v340 = (const char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v359) = 0;
            id v125 = (char *)v340;
            if (!__nwlog_fault(v340, type, &v359))
            {
LABEL_262:
              if (v125) {
                free(v125);
              }
              goto LABEL_264;
            }

            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v126 = (os_log_s *)(id)gconnectionLogObj;
              os_log_type_t v127 = type[0];
              if (os_log_type_enabled(v126, type[0]))
              {
                logb = v126;
                uint64_t v128 = v332;

                uint64_t v129 = v128;
                LODWORD(v128) = (*((_BYTE *)v98 + 268) & 1) == 0;

                if ((_DWORD)v128) {
                  v130 = "";
                }
                else {
                  v130 = "dry-run ";
                }
                nw_endpoint_t v131 = nw_endpoint_handler_copy_endpoint(v129);
                v132 = nw_endpoint_get_logging_description(v131);
                os_log_type_t v133 = v129;
                BOOL v134 = v133;
                uint64_t v135 = v107[30];
                else {
                  v136 = off_189BBBBF0[v135];
                }
                v335 = v136;

                id v157 = v134;
                v158 = v157;
                v159 = "path";
                switch(v121[29])
                {
                  case 0u:
                    break;
                  case 1u:
                    v159 = "resolver";
                    break;
                  case 2u:
                    v159 = nw_endpoint_flow_mode_string(v157[31]);
                    break;
                  case 3u:
                    v159 = "proxy";
                    break;
                  case 4u:
                    v159 = "fallback";
                    break;
                  case 5u:
                    v159 = "transform";
                    break;
                  default:
                    v159 = "unknown-mode";
                    break;
                }

                v214 = v158;
                os_unfair_lock_lock(v331);
                id v215 = v332[8];
                os_unfair_lock_unlock(v331);

                id v216 = v215;
                *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                __int16 v364 = 2082;
                v365 = v124;
                __int16 v366 = 2082;
                v367 = v130;
                __int16 v368 = 2082;
                v369 = (void *)v132;
                __int16 v370 = 2082;
                v371 = v335;
                __int16 v372 = 2082;
                v373 = v159;
                __int16 v374 = 2114;
                id v375 = v216;
                _os_log_impl( &dword_181A5C000,  logb,  v127,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol not f ully connected; calling remove_input_handler without re-attaching",
                  buf,
                  0x48u);

                uint64_t v126 = logb;
              }
            }

            else
            {
              if ((_BYTE)v359)
              {
                v137 = __nw_create_backtrace_string();
                if (v137)
                {
                  v138 = (char *)v137;
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  nw_endpoint_t v139 = (os_log_s *)(id)gconnectionLogObj;
                  os_log_type_t v140 = type[0];
                  if (os_log_type_enabled(v139, type[0]))
                  {
                    v141 = nw_endpoint_handler_get_id_string(v332);
                    v142 = nw_endpoint_handler_dry_run_string(v332);
                    logd = v139;
                    nw_endpoint_t v143 = nw_endpoint_handler_copy_endpoint(v332);
                    v144 = nw_endpoint_get_logging_description(v143);
                    v145 = nw_endpoint_handler_state_string(v332);
                    v146 = nw_endpoint_handler_mode_string(v332);
                    id v147 = nw_endpoint_handler_copy_current_path(v332);
                    *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                    __int16 v364 = 2082;
                    v365 = (void *)v141;
                    __int16 v366 = 2082;
                    v367 = v142;
                    __int16 v368 = 2082;
                    v369 = (void *)v144;
                    __int16 v370 = 2082;
                    v371 = v145;
                    __int16 v372 = 2082;
                    v373 = v146;
                    __int16 v374 = 2114;
                    id v375 = v147;
                    __int16 v376 = 2082;
                    v377 = v138;
                    _os_log_impl( &dword_181A5C000,  logd,  v140,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol n ot fully connected; calling remove_input_handler without re-attaching, dumping backtrace:%{public}s",
                      buf,
                      0x52u);

                    nw_endpoint_t v139 = logd;
                  }

                  free(v138);
                  goto LABEL_261;
                }

                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v148 = (os_log_s *)(id)gconnectionLogObj;
                os_log_type_t v160 = type[0];
                if (os_log_type_enabled(v148, type[0]))
                {
                  nw_endpoint_t v161 = nw_endpoint_handler_get_id_string(v332);
                  v162 = nw_endpoint_handler_dry_run_string(v332);
                  logf = v148;
                  nw_endpoint_t v163 = nw_endpoint_handler_copy_endpoint(v332);
                  v164 = nw_endpoint_get_logging_description(v163);
                  id v165 = nw_endpoint_handler_state_string(v332);
                  v166 = nw_endpoint_handler_mode_string(v332);
                  id v167 = nw_endpoint_handler_copy_current_path(v332);
                  *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                  __int16 v364 = 2082;
                  v365 = (void *)v161;
                  __int16 v366 = 2082;
                  v367 = v162;
                  __int16 v368 = 2082;
                  v369 = (void *)v164;
                  __int16 v370 = 2082;
                  v371 = v165;
                  __int16 v372 = 2082;
                  v373 = v166;
                  __int16 v374 = 2114;
                  id v375 = v167;
                  _os_log_impl( &dword_181A5C000,  logf,  v160,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol not fully connected; calling remove_input_handler without re-attaching, no backtrace",
                    buf,
                    0x48u);

                  v148 = logf;
                }
              }

              else
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v148 = (os_log_s *)(id)gconnectionLogObj;
                os_log_type_t v149 = type[0];
                if (os_log_type_enabled(v148, type[0]))
                {
                  os_log_type_t v150 = nw_endpoint_handler_get_id_string(v332);
                  v151 = nw_endpoint_handler_dry_run_string(v332);
                  loge = v148;
                  nw_endpoint_t v152 = nw_endpoint_handler_copy_endpoint(v332);
                  nw_endpoint_t v153 = nw_endpoint_get_logging_description(v152);
                  v154 = nw_endpoint_handler_state_string(v332);
                  v155 = nw_endpoint_handler_mode_string(v332);
                  id v156 = nw_endpoint_handler_copy_current_path(v332);
                  *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                  __int16 v364 = 2082;
                  v365 = (void *)v150;
                  __int16 v366 = 2082;
                  v367 = v151;
                  __int16 v368 = 2082;
                  v369 = (void *)v153;
                  __int16 v370 = 2082;
                  v371 = v154;
                  __int16 v372 = 2082;
                  v373 = v155;
                  __int16 v374 = 2114;
                  id v375 = v156;
                  _os_log_impl( &dword_181A5C000,  loge,  v149,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol not fully connected; calling remove_input_handler without re-attaching, backtrace limit exceeded",
                    buf,
                    0x48u);

                  v148 = loge;
                }
              }
            }

LABEL_261:
            id v125 = (char *)v340;
            goto LABEL_262;
          }

                          nw_protocol_set_flow_id_from_protocol(a1, a2);
                          id v125 = nw_protocol_instance_copy_path(v119, -1LL);
                          uint64_t v126 = (void *)*((void *)v119 + 36);
                          *((void *)v119 + 36) = v125;

                          __int16 v122 = v274;
                        }

      free(v120);
      if (!v114)
      {
LABEL_301:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        v178 = "nw_protocol_http1_get_output_frames";
        os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();
        uint64_t v176 = OS_LOG_TYPE_ERROR;
        v175 = 0;
        if (v176 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v62 = (os_log_s *)gLogObj;
          __int16 v63 = v176;
          if (!os_log_type_enabled((os_log_t)gLogObj, v176)) {
            goto LABEL_334;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          v178 = "nw_protocol_http1_get_output_frames";
          BOOL v64 = "%{public}s called with null http1";
          goto LABEL_332;
        }

        if (!v175)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v62 = (os_log_s *)gLogObj;
          __int16 v63 = v176;
          if (!os_log_type_enabled((os_log_t)gLogObj, v176)) {
            goto LABEL_334;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          v178 = "nw_protocol_http1_get_output_frames";
          BOOL v64 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_332;
        }

        __int16 v69 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v62 = (os_log_s *)gLogObj;
        __int16 v63 = v176;
        v142 = os_log_type_enabled((os_log_t)gLogObj, v176);
        if (!v69)
        {
          if (!v142) {
            goto LABEL_334;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          v178 = "nw_protocol_http1_get_output_frames";
          BOOL v64 = "%{public}s called with null http1, no backtrace";
          goto LABEL_332;
        }

        if (v142)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          v178 = "nw_protocol_http1_get_output_frames";
          id v179 = 2082;
          *(void *)v180 = v69;
          id v71 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_326;
        }

        goto LABEL_327;
      }

    if (v128) {
      free(v128);
    }
    return 4294966394LL;
  }

  if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v132 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v133 = *(_DWORD *)(a3 + 368);
      BOOL v134 = *((unsigned __int8 *)a2 + 12);
      uint64_t v135 = *((unsigned __int8 *)a2 + 13);
      *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
      *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
      v240 = 2082;
      __int16 v241 = (void *)(a3 + 390);
      v242 = 2080;
      BOOL v243 = " ";
      v244 = 1024;
      v245 = v133;
      id v246 = 1024;
      *(_DWORD *)BOOL v247 = v134;
      *(_WORD *)&v247[4] = 1024;
      *(_DWORD *)&v247[6] = v135;
      _os_log_impl( &dword_181A5C000,  v132,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called with frame type %d flags %d",  buf,  0x32u);
    }
  }

  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      *(void *)unsigned int v238 = 0LL;
      stream_from_id = nw_http2_get_stream_from_id(a3, *((_DWORD *)a2 + 2), v238);
      if (!stream_from_id)
      {
        if (gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v230 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            char v231 = *(_DWORD *)(a3 + 368);
            v232 = *((_DWORD *)a2 + 2);
            id v233 = *a2;
            *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            __int16 v241 = (void *)(a3 + 390);
            v242 = 2080;
            BOOL v243 = " ";
            v244 = 1024;
            v245 = v231;
            id v246 = 1024;
            *(_DWORD *)BOOL v247 = v232;
            *(_WORD *)&v247[4] = 2048;
            *(void *)&v247[6] = v233;
            _os_log_impl( &dword_181A5C000,  v230,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> received a complete DATA frame on stream %d, length %zu",  buf,  0x36u);
          }

          if (__nwlog_connection_log::onceToken == -1)
          {
LABEL_267:
            v138 = *(_DWORD *)(a3 + 368);
            nw_endpoint_t v139 = *((_DWORD *)a2 + 2);
            *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            __int16 v241 = (void *)(a3 + 390);
            v242 = 2080;
            BOOL v243 = " ";
            v244 = 1024;
            v245 = v138;
            id v246 = 1024;
            *(_DWORD *)BOOL v247 = v139;
            os_log_type_t v140 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v236 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v141 = (os_log_s *)gconnectionLogObj;
              v142 = type;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
                goto LABEL_369;
              }
              nw_endpoint_t v143 = *(_DWORD *)(a3 + 368);
              v144 = *((_DWORD *)a2 + 2);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              __int16 v241 = (void *)(a3 + 390);
              v242 = 2080;
              BOOL v243 = " ";
              v244 = 1024;
              v245 = v143;
              id v246 = 1024;
              *(_DWORD *)BOOL v247 = v144;
              v145 = "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA";
            }

            else if (v236)
            {
              uint64_t v172 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v141 = (os_log_s *)gconnectionLogObj;
              v142 = type;
              char v173 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
              if (v172)
              {
                if (v173)
                {
                  uint64_t v174 = *(_DWORD *)(a3 + 368);
                  v175 = *((_DWORD *)a2 + 2);
                  *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
                  *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
                  v240 = 2082;
                  __int16 v241 = (void *)(a3 + 390);
                  v242 = 2080;
                  BOOL v243 = " ";
                  v244 = 1024;
                  v245 = v174;
                  id v246 = 1024;
                  *(_DWORD *)BOOL v247 = v175;
                  *(_WORD *)&v247[4] = 2082;
                  *(void *)&v247[6] = v172;
                  _os_log_impl( &dword_181A5C000,  v141,  v142,  "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA, dumping backtrace:%{public}s",  buf,  0x36u);
                }

                free(v172);
                goto LABEL_369;
              }

              if (!v173)
              {
LABEL_369:
                if (v140) {
                  free(v140);
                }
                return 0LL;
              }

              id v213 = *(_DWORD *)(a3 + 368);
              v214 = *((_DWORD *)a2 + 2);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              __int16 v241 = (void *)(a3 + 390);
              v242 = 2080;
              BOOL v243 = " ";
              v244 = 1024;
              v245 = v213;
              id v246 = 1024;
              *(_DWORD *)BOOL v247 = v214;
              v145 = "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA, no backtrace";
            }

            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v141 = (os_log_s *)gconnectionLogObj;
              v142 = type;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
                goto LABEL_369;
              }
              id v199 = *(_DWORD *)(a3 + 368);
              id v200 = *((_DWORD *)a2 + 2);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              __int16 v241 = (void *)(a3 + 390);
              v242 = 2080;
              BOOL v243 = " ";
              v244 = 1024;
              v245 = v199;
              id v246 = 1024;
              *(_DWORD *)BOOL v247 = v200;
              v145 = "%{public}s %{public}s%s<i%u> failed to find stream %d, dropping DATA, backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v141, v142, v145, buf, 0x2Cu);
            goto LABEL_369;
          }
        }

        else if (__nwlog_connection_log::onceToken == -1)
        {
          goto LABEL_267;
        }

        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        goto LABEL_267;
      }

      uint32_t v6 = stream_from_id;
      if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
        && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v151 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          nw_endpoint_t v153 = *(_DWORD *)(v6 + 176);
          nw_endpoint_t v152 = *(_DWORD *)(v6 + 180);
          v154 = *((_DWORD *)a2 + 2);
          v155 = *a2;
          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          __int16 v241 = (void *)(v6 + 191);
          v242 = 2080;
          BOOL v243 = " ";
          v244 = 1024;
          v245 = v152;
          id v246 = 1024;
          *(_DWORD *)BOOL v247 = v153;
          *(_WORD *)&v247[4] = 1024;
          *(_DWORD *)&v247[6] = v154;
          *(_WORD *)&v247[10] = 2048;
          *(void *)&v247[12] = v155;
          _os_log_impl( &dword_181A5C000,  v151,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> received a complete DATA frame on stream %d, length %zu",  buf,  0x3Cu);
        }
      }

      nw_http_transaction_metadata_increment_inbound_body_transfer_size(*(void **)(v6 + 96), *a2 + 9);
      if ((*((_BYTE *)a2 + 13) & 1) == 0) {
        return 0LL;
      }
      if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v168 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          char v170 = *(_DWORD *)(v6 + 176);
          BOOL v169 = *(_DWORD *)(v6 + 180);
          uint64_t v171 = *((_DWORD *)a2 + 2);
          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          __int16 v241 = (void *)(v6 + 191);
          v242 = 2080;
          BOOL v243 = " ";
          v244 = 1024;
          v245 = v169;
          id v246 = 1024;
          *(_DWORD *)BOOL v247 = v170;
          *(_WORD *)&v247[4] = 1024;
          *(_DWORD *)&v247[6] = v171;
          *(_WORD *)&v247[10] = 1024;
          *(_DWORD *)&v247[12] = v171;
          _os_log_impl( &dword_181A5C000,  v168,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> stream id %d end stream flag detected, delivering input_finished for stream %d",  buf,  0x38u);
        }
      }

      int v7 = *(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16);
      if (*(void *)v238)
      {
        if ((*(_WORD *)(v6 + 188) & 0x1000) == 0)
        {
          if ((v7 & 0x80000) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v201 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              char v203 = *(_DWORD *)(v6 + 176);
              v202 = *(_DWORD *)(v6 + 180);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              __int16 v241 = (void *)(v6 + 191);
              v242 = 2080;
              BOOL v243 = " ";
              v244 = 1024;
              v245 = v202;
              id v246 = 1024;
              *(_DWORD *)BOOL v247 = v203;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v203;
              _os_log_impl( &dword_181A5C000,  v201,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> detected end stream on data frame for stream %d, stream newly complete",  buf,  0x32u);
            }
          }

          *(_WORD *)(v6 + 188) |= 0x1000u;
        }

        nw_http_transaction_metadata_mark_inbound_message_end(*(void **)(v6 + 96));
        if (!*(_BYTE *)(v6 + 72) || *(void *)(v6 + 64) == *(void *)(v6 + 80))
        {
          if (*(void *)v238)
          {
            uint64_t v8 = *(void *)(*(void *)v238 + 24LL);
            if (v8)
            {
              id v9 = *(void (**)(void))(v8 + 184);
              if (v9)
              {
                v9();
                return 0LL;
              }
            }
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          id v157 = *(_DWORD *)(v6 + 176);
          id v156 = *(_DWORD *)(v6 + 180);
          v158 = *((_DWORD *)a2 + 2);
          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          __int16 v241 = (void *)(v6 + 191);
          v242 = 2080;
          BOOL v243 = " ";
          v244 = 1024;
          v245 = v156;
          id v246 = 1024;
          *(_DWORD *)BOOL v247 = v157;
          *(_WORD *)&v247[4] = 2048;
          *(void *)&v247[6] = *(void *)v238;
          *(_WORD *)&v247[14] = 1024;
          *(_DWORD *)&v247[16] = v158;
          v159 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v236 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v160 = (os_log_s *)gconnectionLogObj;
            nw_endpoint_t v161 = type;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
              goto LABEL_382;
            }
            nw_endpoint_t v163 = *(_DWORD *)(v6 + 176);
            v162 = *(_DWORD *)(v6 + 180);
            v164 = *((_DWORD *)a2 + 2);
            *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            __int16 v241 = (void *)(v6 + 191);
            v242 = 2080;
            BOOL v243 = " ";
            v244 = 1024;
            v245 = v162;
            id v246 = 1024;
            *(_DWORD *)BOOL v247 = v163;
            *(_WORD *)&v247[4] = 2048;
            *(void *)&v247[6] = *(void *)v238;
            *(_WORD *)&v247[14] = 1024;
            *(_DWORD *)&v247[16] = v164;
            id v165 = "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d";
          }

          else if (v236)
          {
            uint64_t v184 = (char *)__nw_create_backtrace_string();
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v160 = (os_log_s *)gconnectionLogObj;
            nw_endpoint_t v161 = type;
            v185 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
            if (v184)
            {
              if (v185)
              {
                char v187 = *(_DWORD *)(v6 + 176);
                int v186 = *(_DWORD *)(v6 + 180);
                uint64_t v188 = *((_DWORD *)a2 + 2);
                *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
                *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
                v240 = 2082;
                __int16 v241 = (void *)(v6 + 191);
                v242 = 2080;
                BOOL v243 = " ";
                v244 = 1024;
                v245 = v186;
                id v246 = 1024;
                *(_DWORD *)BOOL v247 = v187;
                *(_WORD *)&v247[4] = 2048;
                *(void *)&v247[6] = *(void *)v238;
                *(_WORD *)&v247[14] = 1024;
                *(_DWORD *)&v247[16] = v188;
                *(_WORD *)&v247[20] = 2082;
                *(void *)&v247[22] = v184;
                _os_log_impl( &dword_181A5C000,  v160,  v161,  "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d, dum ping backtrace:%{public}s",  buf,  0x46u);
              }

              free(v184);
              goto LABEL_382;
            }

            if (!v185)
            {
LABEL_382:
              if (!v159) {
                return 4294966775LL;
              }
              v112 = (char *)v159;
LABEL_197:
              free(v112);
              return 4294966775LL;
            }

            uint64_t v221 = *(_DWORD *)(v6 + 176);
            v220 = *(_DWORD *)(v6 + 180);
            uint64_t v222 = *((_DWORD *)a2 + 2);
            *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            __int16 v241 = (void *)(v6 + 191);
            v242 = 2080;
            BOOL v243 = " ";
            v244 = 1024;
            v245 = v220;
            id v246 = 1024;
            *(_DWORD *)BOOL v247 = v221;
            *(_WORD *)&v247[4] = 2048;
            *(void *)&v247[6] = *(void *)v238;
            *(_WORD *)&v247[14] = 1024;
            *(_DWORD *)&v247[16] = v222;
            id v165 = "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d, no backtrace";
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v160 = (os_log_s *)gconnectionLogObj;
            nw_endpoint_t v161 = type;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
              goto LABEL_382;
            }
            v211 = *(_DWORD *)(v6 + 176);
            v210 = *(_DWORD *)(v6 + 180);
            id v212 = *((_DWORD *)a2 + 2);
            *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            __int16 v241 = (void *)(v6 + 191);
            v242 = 2080;
            BOOL v243 = " ";
            v244 = 1024;
            v245 = v210;
            id v246 = 1024;
            *(_DWORD *)BOOL v247 = v211;
            *(_WORD *)&v247[4] = 2048;
            *(void *)&v247[6] = *(void *)v238;
            *(_WORD *)&v247[14] = 1024;
            *(_DWORD *)&v247[16] = v212;
            id v165 = "%{public}s %{public}s%s<i%u:s%d> no input finished callback for protocol %p attached to stream %d, ba"
                   "cktrace limit exceeded";
          }

          _os_log_impl(&dword_181A5C000, v160, v161, v165, buf, 0x3Cu);
          goto LABEL_382;
        }

        if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v87 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v88 = *(_DWORD *)(a3 + 368);
            if (*(_BYTE *)(v6 + 72)) {
              __int16 v89 = *(void *)(v6 + 64);
            }
            else {
              __int16 v89 = -1LL;
            }
            goto LABEL_240;
          }
        }

        goto LABEL_241;
      }

      if ((v7 & 0x80000) != 0) {
        return 0LL;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v61 = gconnectionLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        __int16 v63 = *(_DWORD *)(v6 + 176);
        uint64_t v62 = *(_DWORD *)(v6 + 180);
        BOOL v64 = *((_DWORD *)a2 + 2);
        *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
        *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
        v240 = 2082;
        __int16 v241 = (void *)(v6 + 191);
        v242 = 2080;
        BOOL v243 = " ";
        v244 = 1024;
        v245 = v62;
        id v246 = 1024;
        *(_DWORD *)BOOL v247 = v63;
        *(_WORD *)&v247[4] = 1024;
        *(_DWORD *)&v247[6] = v64;
        char v17 = "%{public}s %{public}s%s<i%u:s%d> no input handler found for stream %d, dropping DATA";
        id v18 = (os_log_s *)v61;
        nw_endpoint_t v19 = OS_LOG_TYPE_ERROR;
        goto LABEL_98;
      }

      return result;
    case 1:
      if ((*((_BYTE *)a2 + 13) & 5) == 0) {
        goto LABEL_219;
      }
      *(void *)unsigned int v238 = 0LL;
      uint64_t v27 = nw_http2_get_stream_from_id(a3, *((_DWORD *)a2 + 2), v238);
      if (v27)
      {
        uint32_t v6 = v27;
        if (*(void *)(v27 + 112))
        {
          __int16 v28 = nw_http_parsed_fields_copy_trailer_fields(*(void **)(v27 + 144));
          if (v28)
          {
            uint64_t v29 = (void *)v28;
            nw_http_metadata_set_trailer_fields(*(void **)(v6 + 112), (void *)v28);
            os_release(v29);
            goto LABEL_201;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v90 = (os_log_s *)gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
            return 4294966775LL;
          }
          nw_endpoint_t v92 = *(_DWORD *)(v6 + 176);
          __int16 v91 = *(_DWORD *)(v6 + 180);
          __int16 v93 = *((_DWORD *)a2 + 2);
          *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
          *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
          v240 = 2082;
          __int16 v241 = (void *)(v6 + 191);
          v242 = 2080;
          BOOL v243 = " ";
          v244 = 1024;
          v245 = v91;
          id v246 = 1024;
          *(_DWORD *)BOOL v247 = v92;
          *(_WORD *)&v247[4] = 1024;
          *(_DWORD *)&v247[6] = v93;
          id v94 = "%{public}s %{public}s%s<i%u:s%d> invalid trailer fields received on stream %d";
LABEL_237:
          _os_log_impl(&dword_181A5C000, v90, OS_LOG_TYPE_ERROR, v94, buf, 0x32u);
          return 4294966775LL;
        }

        *(_WORD *)(v27 + 188) |= 0x400u;
        uint64_t v79 = *(void **)(v27 + 144);
        if (*((_DWORD *)a2 + 14))
        {
          uint64_t v80 = nw_http_parsed_fields_copy_response(v79);
          if (!v80)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            BOOL v90 = (os_log_s *)gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
              return 4294966775LL;
            }
            BOOL v102 = *(_DWORD *)(v6 + 176);
            __int16 v101 = *(_DWORD *)(v6 + 180);
            uint64_t v103 = *((_DWORD *)a2 + 2);
            *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            __int16 v241 = (void *)(v6 + 191);
            v242 = 2080;
            BOOL v243 = " ";
            v244 = 1024;
            v245 = v101;
            id v246 = 1024;
            *(_DWORD *)BOOL v247 = v102;
            *(_WORD *)&v247[4] = 1024;
            *(_DWORD *)&v247[6] = v103;
            id v94 = "%{public}s %{public}s%s<i%u:s%d> invalid response received on stream %d";
            goto LABEL_237;
          }

          unint64_t v81 = (void *)v80;
          *(void *)(v6 + 112) = nw_http_create_metadata_for_response((void *)v80);
          os_log_type_t v82 = (nw_http_response_get_status_code(v81) - 100) < 0x64;
        }

        else
        {
          __int16 v95 = nw_http_parsed_fields_copy_request(v79);
          if (!v95)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            BOOL v90 = (os_log_s *)gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
              return 4294966775LL;
            }
            id v123 = *(_DWORD *)(v6 + 176);
            __int16 v122 = *(_DWORD *)(v6 + 180);
            __int16 v124 = *((_DWORD *)a2 + 2);
            *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            __int16 v241 = (void *)(v6 + 191);
            v242 = 2080;
            BOOL v243 = " ";
            v244 = 1024;
            v245 = v122;
            id v246 = 1024;
            *(_DWORD *)BOOL v247 = v123;
            *(_WORD *)&v247[4] = 1024;
            *(_DWORD *)&v247[6] = v124;
            id v94 = "%{public}s %{public}s%s<i%u:s%d> invalid request received on stream %d";
            goto LABEL_237;
          }

          unint64_t v81 = (void *)v95;
          if (nw_http_request_has_method((void *)v95, (uint64_t)"CONNECT"))
          {
            uint64_t v96 = *(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16);
            if ((v96 & 0x10000) == 0)
            {
              uint64_t v97 = MEMORY[0x1895F87A8];
              v235[0] = MEMORY[0x1895F87A8];
              v235[1] = 0x40000000LL;
              v235[2] = ___ZL22on_frame_recv_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke;
              v235[3] = &__block_descriptor_tmp_89_82353;
              v235[4] = v6;
              nw_http_fields_access_value_by_name(v81, (unint64_t)"Capsule-Protocol", v235);
              v234[0] = v97;
              v234[1] = 0x40000000LL;
              v234[2] = ___ZL22on_frame_recv_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_2;
              v234[3] = &__block_descriptor_tmp_90_82354;
              v234[4] = v6;
              nw_http_request_access_extended_connect_protocol(v81, v234);
              uint64_t v96 = *(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16);
            }

            *(_BYTE *)(v6 + 190) = BYTE2(v96);
            *(_WORD *)(v6 + 188) = v96 | 0x200;
          }

          os_log_type_t v82 = 0;
          *(void *)(v6 + 112) = nw_http_create_metadata_for_request(v81);
        }

        os_release(v81);
        nw_http_metadata_set_version(*(void **)(v6 + 112), 4);
        if (*(_WORD *)(a3 + 372)) {
          *(_WORD *)(a3 + 372) = 0;
        }
        if ((*((_BYTE *)a2 + 13) & 4) != 0)
        {
          if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v226 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v228 = *(_DWORD *)(v6 + 176);
              int v227 = *(_DWORD *)(v6 + 180);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              __int16 v241 = (void *)(v6 + 191);
              v242 = 2080;
              BOOL v243 = " ";
              v244 = 1024;
              v245 = v227;
              id v246 = 1024;
              *(_DWORD *)BOOL v247 = v228;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v228;
              _os_log_impl( &dword_181A5C000,  v226,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> detected end headers on header frame for stream %d",  buf,  0x32u);
            }
          }

          nw_http_transaction_metadata_set_inbound_message(*(void **)(v6 + 96), *(void **)(v6 + 112));
          if (v82)
          {
            nw_array_append(*(void *)(v6 + 160), *(void **)(v6 + 112));
            uint64_t v98 = *(void **)(v6 + 112);
            if (v98)
            {
              os_release(v98);
              *(void *)(v6 + 112) = 0LL;
            }
          }

          else
          {
            *(_WORD *)(v6 + 188) |= 0x800u;
            nw::http::content_length_manager::set_inbound_message( (nw::http::content_length_manager *)(v6 + 40),  *(nw_protocol_metadata **)(v6 + 112));
          }
        }

        nw_http_transaction_metadata_increment_inbound_header_size( *(void **)(v6 + 96),  9 * ((unint64_t)(*a2 + 0x3FFF) >> 14) + *a2);
LABEL_201:
        if ((*((_BYTE *)a2 + 13) & 1) != 0)
        {
          if (((*(unsigned __int16 *)(v6 + 188) | (*(unsigned __int8 *)(v6 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v207 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              nw_endpoint_t v209 = *(_DWORD *)(v6 + 176);
              nw_endpoint_t v208 = *(_DWORD *)(v6 + 180);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
              *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
              v240 = 2082;
              __int16 v241 = (void *)(v6 + 191);
              v242 = 2080;
              BOOL v243 = " ";
              v244 = 1024;
              v245 = v208;
              id v246 = 1024;
              *(_DWORD *)BOOL v247 = v209;
              *(_WORD *)&v247[4] = 1024;
              *(_DWORD *)&v247[6] = v209;
              _os_log_impl( &dword_181A5C000,  v207,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> detected end stream on header frame for stream %d",  buf,  0x32u);
            }
          }

          *(_WORD *)(v6 + 188) |= 0x1000u;
          nw_http_transaction_metadata_mark_inbound_message_end(*(void **)(v6 + 96));
          if (*(_BYTE *)(v6 + 72))
          {
            if (*(void *)(v6 + 64) != *(void *)(v6 + 80))
            {
              if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                __int16 v87 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  os_log_type_t v88 = *(_DWORD *)(a3 + 368);
                  if (*(_BYTE *)(v6 + 72)) {
                    __int16 v89 = *(void *)(v6 + 64);
                  }
                  else {
                    __int16 v89 = -1LL;
                  }
LABEL_240:
                  id v125 = *(void *)(v6 + 80);
                  *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
                  *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
                  v240 = 2082;
                  __int16 v241 = (void *)(a3 + 390);
                  v242 = 2080;
                  BOOL v243 = " ";
                  v244 = 1024;
                  v245 = v88;
                  id v246 = 2048;
                  *(void *)BOOL v247 = v89;
                  *(_WORD *)&v247[8] = 2048;
                  *(void *)&v247[10] = v125;
                  _os_log_impl( &dword_181A5C000,  v87,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Content length header %llu does not equal body size %llu",  buf,  0x3Au);
                }
              }

      free(backtrace_string);
      goto LABEL_281;
    }

    if (!v170) {
      goto LABEL_281;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
    os_log_type_t v160 = "%{public}s called with null input_protocol, no backtrace";
LABEL_280:
    _os_log_impl(&dword_181A5C000, v158, v159, v160, buf, 0xCu);
LABEL_281:
    if (v157) {
      free(v157);
    }
    return 0LL;
  }

  if ((handle[194] & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    nw_endpoint_t v161 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v162 = *((_DWORD *)handle + 92);
      *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
      nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
      v192 = 2082;
      v193 = (uint64_t)(handle + 195);
      v194 = 2080;
      id v195 = (uint64_t)" ";
      uint64_t v196 = 1024;
      v197 = v162;
      _os_log_impl(&dword_181A5C000, v161, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }

    nw_endpoint_t v163 = handle[194];
    id v5 = *((_DWORD *)handle + 90);
    *((_DWORD *)handle + 90) = -1;
    if ((v163 & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v164 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        id v165 = *((_DWORD *)handle + 92);
        *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
        nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
        v192 = 2082;
        v193 = (uint64_t)(handle + 195);
        v194 = 2080;
        id v195 = (uint64_t)" ";
        uint64_t v196 = 1024;
        v197 = v165;
        v198 = 2048;
        *(void *)id v199 = a2;
        *(_WORD *)&v199[8] = 1042;
        *(_DWORD *)&v199[10] = 16;
        *(_WORD *)&v199[14] = 2098;
        *(void *)&v199[16] = a2;
        _os_log_impl( &dword_181A5C000,  v164,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> incoming protocol %p has flow id %{public,uuid_t}.16P",  buf,  0x40u);
      }
    }
  }

  else
  {
    id v5 = *((_DWORD *)handle + 90);
    *((_DWORD *)handle + 90) = -1;
  }

  if (!*((void *)handle + 14))
  {
    callbacks = a2->callbacks;
    if (!callbacks
      || (get_remote_endpoint = (uint64_t (*)(nw_protocol *))callbacks->get_remote_endpoint) == 0LL
      || (uint64_t v8 = (void *)get_remote_endpoint(a2)) == 0LL)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v26 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return 0LL;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
      uint64_t v27 = "%{public}s failed to get remote endpoint from input_handler";
LABEL_32:
      uint64_t v30 = (os_log_s *)v26;
      nw_endpoint_t v31 = 12;
LABEL_87:
      _os_log_impl(&dword_181A5C000, v30, OS_LOG_TYPE_ERROR, v27, buf, v31);
      return 0LL;
    }

    *((void *)handle + 14) = os_retain(v8);
  }

  id v9 = a2->callbacks;
  if (!v9
    || (get_parameters = (uint64_t (*)(nw_protocol *))v9->get_parameters) == 0LL
    || (char v11 = (void *)get_parameters(a2)) == 0LL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v26 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
    uint64_t v27 = "%{public}s couldn't get parameters from input_protocol";
    goto LABEL_32;
  }

  nw_endpoint_t v209 = 0;
  v207 = 0u;
  nw_endpoint_t v208 = 0u;
  v206 = 0u;
  *(_OWORD *)uint64_t v204 = 0u;
  uint64_t v205 = 0u;
  object = v11;
  os_log_type_t v12 = nw_parameters_copy_protocol_options_legacy(v11, a1);
  if (!v12)
  {
    capsule_handling_disabled = 0;
    int v186 = 0LL;
    __int16 v28 = 0;
    idle_timeuuid_string_t out = 240;
    goto LABEL_68;
  }

  char v13 = v12;
  uint64_t v14 = v13;
  char v15 = 0LL;
  v204[0] = OS_LOG_TYPE_DEFAULT;
  BOOL v16 = v13 + 48;
  while (1)
  {
    char v17 = v13[v15 + 48];
    v204[v15] = v17;
    if (!v17) {
      break;
    }
    if (++v15 == 83)
    {
      HIBYTE(v209) = 0;
      break;
    }
  }

  id v18 = handle + 195;
  nw_endpoint_t v19 = *((unsigned __int8 *)handle + 390);
  char v187 = *((_BYTE *)handle + 390) == 0;
  if (*((_BYTE *)handle + 390))
  {
    if (handle[194] < 0 || !gLogDatapath) {
      goto LABEL_43;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v20 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_43;
    }
    os_log_type_t v21 = *((_DWORD *)handle + 92);
    *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
    nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
    v192 = 2082;
    v193 = (uint64_t)(handle + 195);
    v194 = 2080;
    id v195 = (uint64_t)" ";
    uint64_t v196 = 1024;
    v197 = v21;
    v198 = 2080;
    *(void *)id v199 = v204;
    BOOL v22 = "%{public}s %{public}s%s<i%u> new stream %s joined http2";
    os_log_type_t v23 = (os_log_s *)v20;
    uint64_t v24 = OS_LOG_TYPE_DEBUG;
    uint64_t v25 = 48;
  }

  else
  {
    BOOL v32 = v14;
    BOOL v33 = v32;
    const char *v18 = 0;
    uint64_t v34 = 84LL;
    while (1)
    {
      uint64_t v35 = *v16;
      const char *v18 = v35;
      if (!v35) {
        break;
      }
      ++v18;
      ++v16;
      if ((unint64_t)--v34 <= 1)
      {
        const char *v18 = 0;
        break;
      }
    }

    *((_DWORD *)handle + 92) = nw_protocol_get_next_instance_id();
    os_log_type_t v36 = v33;
    char v37 = *((_DWORD *)v36 + 33);

    if (handle[194] < 0) {
      goto LABEL_43;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v38 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO)) {
      goto LABEL_43;
    }
    int v39 = *((_DWORD *)handle + 92);
    *(_DWORD *)netcore_stats_tcp_report buf = 136447490;
    nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
    v192 = 2082;
    v193 = (uint64_t)(handle + 195);
    v194 = 2080;
    id v195 = (uint64_t)" ";
    uint64_t v196 = 1024;
    v197 = v39;
    v198 = 1024;
    *(_DWORD *)id v199 = v39;
    *(_WORD *)&v199[4] = 1024;
    *(_DWORD *)&v199[6] = v37;
    BOOL v22 = "%{public}s %{public}s%s<i%u> created HTTP/2 and assigned instance ID: %u from C%u";
    os_log_type_t v23 = (os_log_s *)v38;
    uint64_t v24 = OS_LOG_TYPE_INFO;
    uint64_t v25 = 50;
  }

  _os_log_impl(&dword_181A5C000, v23, v24, v22, buf, v25);
LABEL_43:
  idle_timeuuid_string_t out = nw_http2_get_idle_timeout(v14);
  os_log_type_t v40 = nw_http2_copy_reset_stream_error_callback(v14);
  os_log_type_t v41 = *((_BYTE *)handle + 272);
  if ((v41 & 1) != 0)
  {
    char v42 = (const void *)*((void *)handle + 33);
    if (v42)
    {
      _Block_release(v42);
      os_log_type_t v41 = *((_BYTE *)handle + 272);
    }
  }

  *((void *)handle + 33) = v40;
  *((_BYTE *)handle + 272) = v41 | 1;
  int v186 = (id *)nw_http_messaging_options_copy_transaction_metadata(v14);
  capsule_handling_disabled = nw_http2_get_capsule_handling_disabled(v14);
  if (!v19)
  {
    stream_receive_window_size_t size = nw_http2_get_stream_receive_window_size(v14);
    if (stream_receive_window_size)
    {
      uint64_t v44 = stream_receive_window_size;
      if ((handle[194] & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v45 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          id v46 = *((_DWORD *)handle + 92);
          *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
          nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
          v192 = 2082;
          v193 = (uint64_t)(handle + 195);
          v194 = 2080;
          id v195 = (uint64_t)" ";
          uint64_t v196 = 1024;
          v197 = v46;
          v198 = 1024;
          *(_DWORD *)id v199 = v44;
          _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> overriding stream receive window size to %u",  buf,  0x2Cu);
        }
      }
    }

    else
    {
      uint64_t v44 = 0x200000;
    }

    connection_receive_window_size_t size = nw_http2_get_connection_receive_window_size(v14);
    if (connection_receive_window_size)
    {
      char v48 = connection_receive_window_size;
      if ((handle[194] & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v49 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v50 = *((_DWORD *)handle + 92);
          *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
          nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
          v192 = 2082;
          v193 = (uint64_t)(handle + 195);
          v194 = 2080;
          id v195 = (uint64_t)" ";
          uint64_t v196 = 1024;
          v197 = v50;
          v198 = 1024;
          *(_DWORD *)id v199 = v48;
          _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> overriding connection receive window size to %u",  buf,  0x2Cu);
        }
      }
    }

    else
    {
      char v48 = 10485760;
    }

    local_max_webtransport_sessions = nw_http2_get_local_max_webtransport_sessions(v14);
    if (local_max_webtransport_sessions && (handle[194] & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v179 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v180 = *((_DWORD *)handle + 92);
        *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
        nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
        v192 = 2082;
        v193 = (uint64_t)(handle + 195);
        v194 = 2080;
        id v195 = (uint64_t)" ";
        uint64_t v196 = 1024;
        v197 = v180;
        v198 = 1024;
        *(_DWORD *)id v199 = local_max_webtransport_sessions;
        _os_log_impl( &dword_181A5C000,  v179,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> setting max webtransport sessions to %u",  buf,  0x2Cu);
      }
    }

    *((_DWORD *)handle + 94) = v44;
    *((_DWORD *)handle + 95) = v48;
    *((_DWORD *)handle + 96) = local_max_webtransport_sessions;
  }

  os_release(v14);
  __int16 v28 = v187;
LABEL_68:
  *((void *)handle + 10) = (1000 * idle_timeout);
  BOOL v52 = nw_http2_add_to_protocol_table((uint64_t)handle, (uint64_t)a2, 0LL);
  if (!v52)
  {
    if (handle[194] < 0) {
      return 0LL;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v68 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    __int16 v69 = *((_DWORD *)handle + 92);
    *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
    nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
    v192 = 2082;
    v193 = (uint64_t)(handle + 195);
    v194 = 2080;
    id v195 = (uint64_t)" ";
    uint64_t v196 = 1024;
    v197 = v69;
    uint64_t v27 = "%{public}s %{public}s%s<i%u> could not add protocol to protocol based hash table, cannot add input handler";
    uint64_t v30 = (os_log_s *)v68;
    nw_endpoint_t v31 = 38;
    goto LABEL_87;
  }

  os_log_type_t v53 = (void *)v52;
  if (v5 != -1)
  {
    stream_node_from_id = nw_http2_get_stream_node_from_id((uint64_t)handle, v5);
    if (stream_node_from_id)
    {
      id v55 = stream_node_from_id;
      BOOL v56 = *(void *)(stream_node_from_id + 16);
      if (v56)
      {
        id v57 = *(void *)(stream_node_from_id + 32);
        if (v57)
        {
          if (((*(unsigned __int16 *)(v56 + 188) | (*(unsigned __int8 *)(v56 + 190) << 16)) & 0x80000) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            char v59 = *(_DWORD *)(v56 + 176);
            nw_endpoint_t v58 = *(_DWORD *)(v56 + 180);
            uint64_t v60 = *(void *)(v55 + 32);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
            nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
            v192 = 2082;
            v193 = v56 + 191;
            v194 = 2080;
            id v195 = (uint64_t)" ";
            uint64_t v196 = 1024;
            v197 = v58;
            v198 = 1024;
            *(_DWORD *)id v199 = v59;
            *(_WORD *)&v199[4] = 2048;
            *(void *)&v199[6] = a2;
            *(_WORD *)&v199[14] = 2048;
            *(void *)&v199[16] = v60;
            *(_WORD *)&v199[24] = 2048;
            *(void *)id v200 = v56;
            *(_WORD *)&v200[8] = 1024;
            uint64_t v201 = v59;
            os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            uint64_t v188 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v62 = (os_log_s *)gconnectionLogObj;
              __int16 v63 = type;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
                goto LABEL_215;
              }
              __int16 v65 = *(_DWORD *)(v56 + 176);
              BOOL v64 = *(_DWORD *)(v56 + 180);
              os_log_type_t v66 = *(void *)(v55 + 32);
              *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
              nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
              v192 = 2082;
              v193 = v56 + 191;
              v194 = 2080;
              id v195 = (uint64_t)" ";
              uint64_t v196 = 1024;
              v197 = v64;
              v198 = 1024;
              *(_DWORD *)id v199 = v65;
              *(_WORD *)&v199[4] = 2048;
              *(void *)&v199[6] = a2;
              *(_WORD *)&v199[14] = 2048;
              *(void *)&v199[16] = v66;
              *(_WORD *)&v199[24] = 2048;
              *(void *)id v200 = v56;
              *(_WORD *)&v200[8] = 1024;
              uint64_t v201 = v65;
              id v67 = "%{public}s %{public}s%s<i%u:s%d> adding new input handler %p, already have existing protocol pointer"
                    " %p for stream (%p, id %d)";
            }

            else if (v188)
            {
              id v119 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v62 = (os_log_s *)gconnectionLogObj;
              __int16 v63 = type;
              __int16 v120 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
              if (v119)
              {
                if (v120)
                {
                  __int16 v122 = *(_DWORD *)(v56 + 176);
                  v121 = *(_DWORD *)(v56 + 180);
                  id v123 = *(void *)(v55 + 32);
                  *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
                  nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
                  v192 = 2082;
                  v193 = v56 + 191;
                  v194 = 2080;
                  id v195 = (uint64_t)" ";
                  uint64_t v196 = 1024;
                  v197 = v121;
                  v198 = 1024;
                  *(_DWORD *)id v199 = v122;
                  *(_WORD *)&v199[4] = 2048;
                  *(void *)&v199[6] = a2;
                  *(_WORD *)&v199[14] = 2048;
                  *(void *)&v199[16] = v123;
                  *(_WORD *)&v199[24] = 2048;
                  *(void *)id v200 = v56;
                  *(_WORD *)&v200[8] = 1024;
                  uint64_t v201 = v122;
                  v202 = 2082;
                  char v203 = v119;
                  _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s %{public}s%s<i%u:s%d> adding new input handler %p, already have existing protocol pointer %p for stream (%p, id %d), dumping backtrace:%{public}s",  buf,  0x5Au);
                }

                free(v119);
                goto LABEL_215;
              }

              if (!v120)
              {
LABEL_215:
                if (v61) {
                  free(v61);
                }
                goto LABEL_217;
              }

              v154 = *(_DWORD *)(v56 + 176);
              nw_endpoint_t v153 = *(_DWORD *)(v56 + 180);
              v155 = *(void *)(v55 + 32);
              *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
              nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
              v192 = 2082;
              v193 = v56 + 191;
              v194 = 2080;
              id v195 = (uint64_t)" ";
              uint64_t v196 = 1024;
              v197 = v153;
              v198 = 1024;
              *(_DWORD *)id v199 = v154;
              *(_WORD *)&v199[4] = 2048;
              *(void *)&v199[6] = a2;
              *(_WORD *)&v199[14] = 2048;
              *(void *)&v199[16] = v155;
              *(_WORD *)&v199[24] = 2048;
              *(void *)id v200 = v56;
              *(_WORD *)&v200[8] = 1024;
              uint64_t v201 = v154;
              id v67 = "%{public}s %{public}s%s<i%u:s%d> adding new input handler %p, already have existing protocol pointer"
                    " %p for stream (%p, id %d), no backtrace";
            }

            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v62 = (os_log_s *)gconnectionLogObj;
              __int16 v63 = type;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
                goto LABEL_215;
              }
              v148 = *(_DWORD *)(v56 + 176);
              id v147 = *(_DWORD *)(v56 + 180);
              os_log_type_t v149 = *(void *)(v55 + 32);
              *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
              nw_endpoint_t v191 = "nw_protocol_http2_add_input_handler";
              v192 = 2082;
              v193 = v56 + 191;
              v194 = 2080;
              id v195 = (uint64_t)" ";
              uint64_t v196 = 1024;
              v197 = v147;
              v198 = 1024;
              *(_DWORD *)id v199 = v148;
              *(_WORD *)&v199[4] = 2048;
              *(void *)&v199[6] = a2;
              *(_WORD *)&v199[14] = 2048;
              *(void *)&v199[16] = v149;
              *(_WORD *)&v199[24] = 2048;
              *(void *)id v200 = v56;
              *(_WORD *)&v200[8] = 1024;
              uint64_t v201 = v148;
              id v67 = "%{public}s %{public}s%s<i%u:s%d> adding new input handler %p, already have existing protocol pointer"
                    " %p for stream (%p, id %d), backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v62, v63, v67, buf, 0x50u);
            goto LABEL_215;
          }

      _os_log_impl(&dword_181A5C000, v134, v135, v136, buf, 0xCu);
      goto LABEL_262;
    }

    if (!os_packet_get_data_length())
    {
      v137 = v8;
      if ((nw_channel_check_defunct(v245) & 1) != 0) {
        goto LABEL_381;
      }
      __nwlog_obj();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      nw_endpoint_t v254 = "nw_channel_add_input_frames";
      v138 = (char *)_os_log_send_and_compose_impl();
      v257[0] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v138, v257, type))
      {
        if (v257[0] == OS_LOG_TYPE_FAULT)
        {
          nw_endpoint_t v139 = (os_log_s *)__nwlog_obj();
          os_log_type_t v140 = v257[0];
          if (!os_log_type_enabled(v139, v257[0])) {
            goto LABEL_250;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          nw_endpoint_t v254 = "nw_channel_add_input_frames";
          v141 = v139;
          v142 = v140;
          nw_endpoint_t v143 = "%{public}s zero length packet";
LABEL_249:
          _os_log_impl(&dword_181A5C000, v141, v142, v143, buf, 0xCu);
          goto LABEL_250;
        }

        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          v162 = (os_log_s *)__nwlog_obj();
          nw_endpoint_t v163 = v257[0];
          if (!os_log_type_enabled(v162, v257[0])) {
            goto LABEL_250;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          nw_endpoint_t v254 = "nw_channel_add_input_frames";
          v141 = v162;
          v142 = v163;
          nw_endpoint_t v143 = "%{public}s zero length packet, backtrace limit exceeded";
          goto LABEL_249;
        }

        nw_endpoint_t v152 = (char *)__nw_create_backtrace_string();
        nw_endpoint_t v153 = (os_log_s *)__nwlog_obj();
        v154 = v257[0];
        v155 = os_log_type_enabled(v153, v257[0]);
        if (!v152)
        {
          if (!v155) {
            goto LABEL_250;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          nw_endpoint_t v254 = "nw_channel_add_input_frames";
          v141 = v153;
          v142 = v154;
          nw_endpoint_t v143 = "%{public}s zero length packet, no backtrace";
          goto LABEL_249;
        }

        if (v155)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          nw_endpoint_t v254 = "nw_channel_add_input_frames";
          v255 = 2082;
          v256[0] = v152;
          _os_log_impl( &dword_181A5C000,  v153,  v154,  "%{public}s zero length packet, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v152);
      }

LABEL_421:
              goto LABEL_422;
            }

            if (!v357)
            {
              __nwlog_obj();
              v284 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v311 = v358;
              if (os_log_type_enabled(v284, v358))
              {
                v312 = (const char *)*((void *)v7 + 2);
                if (!v312) {
                  v312 = "invalid";
                }
                *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
                __int16 v364 = 2082;
                v365 = (void *)v312;
                __int16 v366 = 2048;
                v367 = v7;
                _os_log_impl( &dword_181A5C000,  v284,  v311,  "%{public}s protocol %{public}s (%p) has invalid copy_info callback, backtrace limit exceeded",  buf,  0x20u);
              }

              goto LABEL_421;
            }

            v294 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v284 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v295 = v358;
            BOOL v296 = os_log_type_enabled(v284, v358);
            if (!v294)
            {
              if (v296)
              {
                v313 = (const char *)*((void *)v7 + 2);
                if (!v313) {
                  v313 = "invalid";
                }
                *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
                __int16 v364 = 2082;
                v365 = (void *)v313;
                __int16 v366 = 2048;
                v367 = v7;
                _os_log_impl( &dword_181A5C000,  v284,  v295,  "%{public}s protocol %{public}s (%p) has invalid copy_info callback, no backtrace",  buf,  0x20u);
              }

              goto LABEL_421;
            }

            if (v296)
            {
              v297 = (const char *)*((void *)v7 + 2);
              if (!v297) {
                v297 = "invalid";
              }
              *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
              *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
              __int16 v364 = 2082;
              v365 = (void *)v297;
              __int16 v366 = 2048;
              v367 = v7;
              __int16 v368 = 2082;
              v369 = v294;
              _os_log_impl( &dword_181A5C000,  v284,  v295,  "%{public}s protocol %{public}s (%p) has invalid copy_info callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v294);
          }

    if (v187) {
      free(v187);
    }
    xpc_object_t v2 = v305;
    uint64_t v35 = *(void *)(v305 + 32);
    if (!v35) {
      goto LABEL_424;
    }
    goto LABEL_49;
  }

  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
  char v110 = (void *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v306 = 0;
  if (!__nwlog_fault((const char *)v110, &type, &v306))
  {
LABEL_459:
    if (!v110) {
      return;
    }
LABEL_207:
    free(v110);
    return;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    v194 = (os_log_s *)__nwlog_obj();
    id v195 = type;
    if (!os_log_type_enabled(v194, type)) {
      goto LABEL_459;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    uint64_t v196 = "%{public}s called with null http3";
LABEL_458:
    _os_log_impl(&dword_181A5C000, v194, v195, v196, buf, 0xCu);
    goto LABEL_459;
  }

  if (!v306)
  {
    v194 = (os_log_s *)__nwlog_obj();
    id v195 = type;
    if (!os_log_type_enabled(v194, type)) {
      goto LABEL_459;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    uint64_t v196 = "%{public}s called with null http3, backtrace limit exceeded";
    goto LABEL_458;
  }

  v235 = (char *)__nw_create_backtrace_string();
  v194 = (os_log_s *)__nwlog_obj();
  id v195 = type;
  v236 = os_log_type_enabled(v194, type);
  if (!v235)
  {
    if (!v236) {
      goto LABEL_459;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    uint64_t v196 = "%{public}s called with null http3, no backtrace";
    goto LABEL_458;
  }

  if (v236)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v235;
    _os_log_impl( &dword_181A5C000,  v194,  v195,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v235);
  if (v110) {
    goto LABEL_207;
  }
}

    if (v121) {
      free(v121);
    }
    p_output_handler = v120;
    goto LABEL_222;
  }

  if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v119 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 2082;
      *(void *)v555 = (char *)a1 + 404;
      *(_WORD *)&v555[8] = 1042;
      *(_DWORD *)&v555[10] = 16;
      *(_WORD *)&v555[14] = 2098;
      *(void *)&v555[16] = &v556;
      char v105 = "%{public}s %{public}s successfully set source application uuid to %{public,uuid_t}.16P";
      v106 = (os_log_s *)v119;
      v107 = OS_LOG_TYPE_DEBUG;
      uint64_t v108 = 38;
      goto LABEL_259;
    }
  }

    v397 = 0LL;
LABEL_422:
    nw_protocol_stack_prepend_application_protocol(stack, (nw_protocol_options_t)v411);
    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
    }
    v240 = nw_protocol_create_options((void *)nw_protocol_copy_http_security_definition_http_security_definition);
    __int16 v241 = *(void *)(a1 + 40);
    if (v241
      && ([*(id *)(v241 + 16) _hstsStorage], (v242 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v400 = v242;
      BOOL v243 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_hsts_storage);
      HSTSStorage = v243->HSTSStorage;
      v243->HSTSStorage = v400;

      nw_http_security_options_set_hsts_storage(v240, v243);
    }

    else
    {
      v400 = 0LL;
    }

    v418[0] = MEMORY[0x1895F87A8];
    v418[1] = v2;
    v418[2] = __34__NWURLLoaderHTTP_continueLoading__block_invoke_9;
    v418[3] = &unk_189BC5CD0;
    v418[4] = a1;
    nw_http_security_options_set_handler(v240, v418, *(void **)(a1 + 56));
    v245 = *(void *)(a1 + 40);
    if (v245) {
      id v246 = [*(id *)(v245 + 32) _ignoreHSTS];
    }
    else {
      id v246 = 0;
    }
    BOOL v247 = v240;
    v248 = v247;
    if (!v247)
    {
      __nwlog_obj();
      v300 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
      LODWORD(v389) = 12;
      v388 = buf;
      v301 = (char *)_os_log_send_and_compose_impl();

      v427 = OS_LOG_TYPE_ERROR;
      v426 = 0;
      if (v427 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v302 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v303 = v427;
        if (os_log_type_enabled(v302, v427))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
          _os_log_impl(&dword_181A5C000, v302, v303, "%{public}s called with null options", buf, 0xCu);
        }
      }

      else if (v426)
      {
        os_log_type_t v325 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v302 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v326 = v427;
        v327 = os_log_type_enabled(v302, v427);
        if (v325)
        {
          if (v327)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v325;
            _os_log_impl( &dword_181A5C000,  v302,  v326,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v325);
LABEL_700:
          if (!v301) {
            goto LABEL_435;
          }
LABEL_701:
          free(v301);
          goto LABEL_435;
        }

        if (v327)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
          _os_log_impl(&dword_181A5C000, v302, v326, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v302 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v380 = v427;
        if (os_log_type_enabled(v302, v427))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
          _os_log_impl( &dword_181A5C000,  v302,  v380,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }
      }

LABEL_422:
          if (v283) {
            free(v283);
          }
          id v46 = 0LL;
          if (v41 != &nw_protocol_ref_counted_handle)
          {
LABEL_63:
            if (v46)
            {
              if (v359 != 112)
              {
                free(v46);
                char v48 = *((_BYTE *)v6 + 728);
                if ((v48 & 1) == 0) {
                  goto LABEL_70;
                }
                goto LABEL_69;
              }

              os_log_type_t v47 = (void *)*((void *)v6 + 100);
              if (v47)
              {
                free(v47);
                *((void *)v6 + 100) = 0LL;
              }

              *((void *)v6 + 100) = v46;
            }

      free(v264);
      if (!v249) {
        goto LABEL_615;
      }
      goto LABEL_614;
    }

    v250 = (os_log_s *)__nwlog_obj();
    v251 = aBlock[0];
    if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
      goto LABEL_613;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    unsigned int v252 = "%{public}s called with null handle";
LABEL_612:
    _os_log_impl(&dword_181A5C000, v250, v251, v252, buf, 0xCu);
    goto LABEL_613;
  }

  id v4 = *((_DWORD *)handle + 6);
  id v5 = (uint64_t *)a1->handle;
  if (v4 == 1) {
    goto LABEL_10;
  }
  if (v4 != 2)
  {
    if (v4 != 3)
    {
LABEL_615:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
      nw_endpoint_t v254 = (char *)_os_log_send_and_compose_impl();
      aBlock[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v255 = (os_log_s *)gLogObj;
        v256 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
          goto LABEL_647;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1";
        goto LABEL_646;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v255 = (os_log_s *)gLogObj;
        v256 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0])) {
          goto LABEL_647;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_646;
      }

      v304 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v255 = (os_log_s *)gLogObj;
      v256 = aBlock[0];
      v356 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
      if (!v304)
      {
        if (!v356) {
          goto LABEL_647;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1, no backtrace";
        goto LABEL_646;
      }

      if (!v356) {
        goto LABEL_641;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v304;
      v306 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_640;
    }

    uint32_t v6 = *((void *)handle + 2);
    if (v6)
    {
      id v5 = (uint64_t *)(v6 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    nw_endpoint_t v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] == 17)
    {
      v250 = (os_log_s *)__nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
        goto LABEL_613;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      unsigned int v252 = "%{public}s called with null handle->http1_connection";
      goto LABEL_612;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v250 = (os_log_s *)__nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
        goto LABEL_613;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      unsigned int v252 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_612;
    }

    id v264 = (char *)__nw_create_backtrace_string();
    v250 = (os_log_s *)__nwlog_obj();
    v251 = aBlock[0];
    v334 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
    if (!v264)
    {
      if (!v334) {
        goto LABEL_613;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      unsigned int v252 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_612;
    }

    if (v334)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v264;
      v266 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_421;
    }

    goto LABEL_422;
  }

  int v7 = *((void *)handle + 1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
    nw_endpoint_t v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] == 17)
    {
      v250 = (os_log_s *)__nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
        goto LABEL_613;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      unsigned int v252 = "%{public}s called with null handle->http1_stream";
      goto LABEL_612;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v250 = (os_log_s *)__nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0])) {
        goto LABEL_613;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      unsigned int v252 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_612;
    }

    id v264 = (char *)__nw_create_backtrace_string();
    v250 = (os_log_s *)__nwlog_obj();
    v251 = aBlock[0];
    v335 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
    if (!v264)
    {
      if (!v335) {
        goto LABEL_613;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      unsigned int v252 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_612;
    }

    if (v335)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v264;
      v266 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_421;
    }

    goto LABEL_422;
  }

  id v5 = (uint64_t *)(v7 + 248);
LABEL_10:
  uint64_t v8 = *v5;
  if (!*v5) {
    goto LABEL_615;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
    nw_endpoint_t v254 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (aBlock[0] == 17)
    {
      v255 = (os_log_s *)__nwlog_obj();
      v256 = aBlock[0];
      if (!os_log_type_enabled(v255, (os_log_type_t)aBlock[0])) {
        goto LABEL_647;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
      v257 = "%{public}s called with null other_protocol";
LABEL_646:
      _os_log_impl(&dword_181A5C000, v255, v256, v257, buf, 0xCu);
      goto LABEL_647;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v255 = (os_log_s *)__nwlog_obj();
      v256 = aBlock[0];
      if (!os_log_type_enabled(v255, (os_log_type_t)aBlock[0])) {
        goto LABEL_647;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
      v257 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_646;
    }

    v304 = (char *)__nw_create_backtrace_string();
    v255 = (os_log_s *)__nwlog_obj();
    v256 = aBlock[0];
    os_log_type_t v305 = os_log_type_enabled(v255, (os_log_type_t)aBlock[0]);
    if (!v304)
    {
      if (!v305) {
        goto LABEL_647;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
      v257 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_646;
    }

    if (!v305) {
      goto LABEL_641;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http1_reset";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v304;
    v306 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_640:
    _os_log_impl(&dword_181A5C000, v255, v256, v306, buf, 0x16u);
    goto LABEL_641;
  }

  if (v4 != 2)
  {
    if (v4 != 3) {
      goto LABEL_632;
    }
    id v9 = *((void *)handle + 2);
    if (v9)
    {
      os_log_type_t v10 = (uint64_t *)(v9 + 488);
      goto LABEL_17;
    }

    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
    os_log_type_t v319 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v319, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        v320 = (os_log_s *)__nwlog_obj();
        os_log_type_t v321 = aBlock[0];
        if (!os_log_type_enabled(v320, (os_log_type_t)aBlock[0])) {
          goto LABEL_630;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        v322 = "%{public}s called with null handle->http1_connection";
        goto LABEL_629;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v320 = (os_log_s *)__nwlog_obj();
        os_log_type_t v321 = aBlock[0];
        if (!os_log_type_enabled(v320, (os_log_type_t)aBlock[0])) {
          goto LABEL_630;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        v322 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_629;
      }

      uint64_t v336 = (char *)__nw_create_backtrace_string();
      v320 = (os_log_s *)__nwlog_obj();
      os_log_type_t v321 = aBlock[0];
      uint64_t v337 = os_log_type_enabled(v320, (os_log_type_t)aBlock[0]);
      if (v336)
      {
        if (v337)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v336;
          _os_log_impl( &dword_181A5C000,  v320,  v321,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v336);
        goto LABEL_630;
      }

      if (v337)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_stream_for_protocol";
        v322 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_629:
        _os_log_impl(&dword_181A5C000, v320, v321, v322, buf, 0xCu);
      }
    }

              free(v192);
              if (v91) {
                goto LABEL_899;
              }
              break;
            }

            if (v204)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl( &dword_181A5C000,  v92,  v203,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
            }
          }

          else
          {
            __nwlog_obj();
            nw_endpoint_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v216 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl( &dword_181A5C000,  v92,  v216,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
            }
          }

                if (v200) {
                  free(v200);
                }
                os_log_type_t v36 = v198;
                uint64_t v49 = MEMORY[0x1895F87A8];
                goto LABEL_121;
              }

              v273 = v36;
              __nwlog_obj();
              *(_DWORD *)v323 = 136446210;
              *(void *)&v323[4] = "__nw_protocol_error";
              v223 = (char *)_os_log_send_and_compose_impl();
              v330[0] = 16;
              v321[0] = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v223, v330, v321))
              {
                if (v330[0] == 17)
                {
                  char v224 = (os_log_s *)__nwlog_obj();
                  uint64_t v225 = v330[0];
                  if (!os_log_type_enabled(v224, (os_log_type_t)v330[0])) {
                    goto LABEL_453;
                  }
                  *(_DWORD *)v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_error";
                  uint64_t v226 = "%{public}s called with null protocol";
LABEL_452:
                  _os_log_impl(&dword_181A5C000, v224, v225, v226, v323, 0xCu);
                  goto LABEL_453;
                }

                if (v321[0] == OS_LOG_TYPE_DEFAULT)
                {
                  char v224 = (os_log_s *)__nwlog_obj();
                  uint64_t v225 = v330[0];
                  if (!os_log_type_enabled(v224, (os_log_type_t)v330[0])) {
                    goto LABEL_453;
                  }
                  *(_DWORD *)v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_error";
                  uint64_t v226 = "%{public}s called with null protocol, backtrace limit exceeded";
                  goto LABEL_452;
                }

                BOOL v247 = (char *)__nw_create_backtrace_string();
                char v224 = (os_log_s *)__nwlog_obj();
                uint64_t v225 = v330[0];
                v248 = os_log_type_enabled(v224, (os_log_type_t)v330[0]);
                if (!v247)
                {
                  if (!v248) {
                    goto LABEL_453;
                  }
                  *(_DWORD *)v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_error";
                  uint64_t v226 = "%{public}s called with null protocol, no backtrace";
                  goto LABEL_452;
                }

                if (v248)
                {
                  *(_DWORD *)v323 = 136446466;
                  *(void *)&v323[4] = "__nw_protocol_error";
                  *(_WORD *)&v323[12] = 2082;
                  *(void *)&v323[14] = v247;
                  _os_log_impl( &dword_181A5C000,  v224,  v225,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  v323,  0x16u);
                }

                free(v247);
              }

LABEL_398:
  if (v268) {
    free(v268);
  }
LABEL_338:
}

    _os_log_impl(&dword_181A5C000, v172, v173, v183, buf, 0x16u);
    goto LABEL_399;
  }

  uint64_t v35 = v34;
  if (!strcasecmp(a2, "User-Agent"))
  {
    __dst[0] = 0LL;
    if (v3 && *v3)
    {
      uint64_t v62 = *(void *)(a1 + 40);
      if ((!v62 || (*(_BYTE *)(v62 + 529) & 1) == 0) && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        __int16 v63 = (os_log_s *)gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          BOOL v64 = *(void *)(a1 + 40);
          __int16 v65 = v64 == 0;
          if (v64) {
            os_log_type_t v66 = (const char *)(v64 + 531);
          }
          else {
            os_log_type_t v66 = "";
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
          *(void *)&buf[14] = v66;
          id v67 = " ";
          *(_WORD *)&_BYTE buf[12] = 2082;
          if (v65) {
            id v67 = "";
          }
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = v67;
          *(_WORD *)&buf[32] = 2082;
          *(void *)&buf[34] = v3;
          _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived user agent %{public}s",  buf,  0x2Au);
        }
      }

void sub_181BAF2B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, void *a31)
{
  _Unwind_Resume(a1);
}

void nw_hash_table_release_all_objects(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(_DWORD *)(a1 + 32))
    {
      int v4 = *(_DWORD *)(a1 + 48);
      if ((v4 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj(a1, a2);
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    nw_endpoint_t v58 = "nw_hash_table_lock";
    id v26 = (void *)_os_log_send_and_compose_impl();
    uint64_t v11 = __nwlog_abort((uint64_t)v26);
    if (!(_DWORD)v11)
    {
      free(v26);
      int v4 = *(_DWORD *)(v3 + 48);
      if ((v4 & 2) == 0)
      {
LABEL_5:
        if ((v4 & 1) != 0)
        {
          unsigned int v5 = *(_DWORD *)(v3 + 32);
          if (v5)
          {
            unsigned int v6 = 0;
            int v7 = (void *)(v3 + 56);
            int v54 = 136446210;
            xpc_object_t v2 = &dword_181A5C000;
            do
            {
              uint64_t v8 = (void *)*v7;
              if (*v7)
              {
                unsigned int v53 = v6;
                do
                {
                  char v13 = v8;
                  uint64_t v8 = (void *)*v8;
                  int v14 = *((unsigned __int8 *)v13 + 30);
                  if (v14 == 1)
                  {
                    *((_BYTE *)v13 + 30) = 2;
                    char v15 = *(uint64_t (**)(void))(v3 + 24);
                    if (v15)
                    {
                      a1 = v15(v13[2]);
                      v13[2] = 0LL;
                    }

                    --*(_DWORD *)(v3 + 40);
                    BOOL v16 = (void *)v13[1];
                    if (!v16 || (void *)*v16 != v13)
                    {
                      uint64_t v17 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init(v17);
                      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                      nw_endpoint_t v58 = "nw_hash_table_remove_node_internal";
                      id v18 = (void *)_os_log_send_and_compose_impl();
                      uint64_t v11 = __nwlog_abort((uint64_t)v18);
                      if ((_DWORD)v11) {
                        goto LABEL_47;
                      }
                      free(v18);
                    }

                    if (!*((_WORD *)v13 + 14)) {
                      nw_hash_node_free((uint64_t)v7, v13);
                    }
                  }

                  else if (v14 != 2 || !*((_WORD *)v13 + 14))
                  {
                    nw_endpoint_t v19 = (os_log_s *)__nwlog_obj(a1, a2);
                    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
                    unint64_t v20 = *((unsigned __int8 *)v13 + 30);
                    os_log_type_t v21 = "invalid_state";
                    if (v20 <= 3) {
                      os_log_type_t v21 = off_189BC49E0[v20];
                    }
                    int v9 = *((unsigned __int16 *)v13 + 14);
                    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                    nw_endpoint_t v58 = "nw_hash_table_release_all_objects";
                    __int16 v59 = 2082;
                    *(void *)uint64_t v60 = v21;
                    *(_WORD *)&v60[8] = 1024;
                    *(_DWORD *)&v60[10] = v9;
                    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();
                    uint64_t v11 = __nwlog_abort((uint64_t)v10);
                    if ((_DWORD)v11) {
                      goto LABEL_47;
                    }
                    free(v10);
                  }
                }

                while (v8);
                unsigned int v5 = *(_DWORD *)(v3 + 32);
                unsigned int v6 = v53;
              }

              ++v6;
              v7 += 2;
            }

            while (v6 < v5);
          }

          if (!*(_DWORD *)(v3 + 40)) {
            goto LABEL_29;
          }
          __nwlog_obj(a1, a2);
          int v33 = *(_DWORD *)(v3 + 40);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          nw_endpoint_t v58 = "nw_hash_table_release_all_objects";
          __int16 v59 = 1024;
          *(_DWORD *)uint64_t v60 = v33;
          uint64_t v34 = (void *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v55 = 0;
          uint64_t v35 = __nwlog_fault(v34, &type, &v55);
          if (!(_DWORD)v35) {
            goto LABEL_82;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            char v37 = (os_log_s *)__nwlog_obj(v35, v36);
            os_log_type_t v38 = type;
            if (os_log_type_enabled(v37, type))
            {
              int v39 = *(_DWORD *)(v3 + 40);
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              nw_endpoint_t v58 = "nw_hash_table_release_all_objects";
              __int16 v59 = 1024;
              *(_DWORD *)uint64_t v60 = v39;
              os_log_type_t v40 = "%{public}s table count %d != 0";
LABEL_81:
              _os_log_impl(&dword_181A5C000, v37, v38, v40, buf, 0x12u);
            }
          }

          else if (v55)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            char v37 = (os_log_s *)__nwlog_obj(backtrace_string, v48);
            os_log_type_t v38 = type;
            BOOL v49 = os_log_type_enabled(v37, type);
            if (backtrace_string)
            {
              if (v49)
              {
                int v50 = *(_DWORD *)(v3 + 40);
                *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                nw_endpoint_t v58 = "nw_hash_table_release_all_objects";
                __int16 v59 = 1024;
                *(_DWORD *)uint64_t v60 = v50;
                *(_WORD *)&v60[4] = 2082;
                *(void *)&v60[6] = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s table count %d != 0, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(backtrace_string);
              goto LABEL_82;
            }

            if (v49)
            {
              int v52 = *(_DWORD *)(v3 + 40);
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              nw_endpoint_t v58 = "nw_hash_table_release_all_objects";
              __int16 v59 = 1024;
              *(_DWORD *)uint64_t v60 = v52;
              os_log_type_t v40 = "%{public}s table count %d != 0, no backtrace";
              goto LABEL_81;
            }
          }

          else
          {
            char v37 = (os_log_s *)__nwlog_obj(v35, v36);
            os_log_type_t v38 = type;
            if (os_log_type_enabled(v37, type))
            {
              int v51 = *(_DWORD *)(v3 + 40);
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              nw_endpoint_t v58 = "nw_hash_table_release_all_objects";
              __int16 v59 = 1024;
              *(_DWORD *)uint64_t v60 = v51;
              os_log_type_t v40 = "%{public}s table count %d != 0, backtrace limit exceeded";
              goto LABEL_81;
            }
          }

uint64_t nw_flow_passthrough_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v31 = "nw_flow_passthrough_remove_input_handler";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v21, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v31 = "nw_flow_passthrough_remove_input_handler";
          _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
        }
      }

      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v31 = "nw_flow_passthrough_remove_input_handler";
            __int16 v32 = 2082;
            int v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v22,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }

        if (v26)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v31 = "nw_flow_passthrough_remove_input_handler";
          _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v31 = "nw_flow_passthrough_remove_input_handler";
          _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181BB01EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181BB0208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181BB0CF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_protocol_metadata;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_181BB10F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_connection;
  -[_Unwind_Exception dealloc](&a14, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_path_flow_registration_access_interface_stats(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  unsigned int v5 = (void (**)(void, void))v4;
  if (!v3)
  {
    __nwlog_obj();
    int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v26 = "nw_path_flow_registration_access_interface_stats";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null registration", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          BOOL v26 = "nw_path_flow_registration_access_interface_stats";
          __int16 v27 = 2082;
          uint64_t v28 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_44:
        free(v8);
        goto LABEL_7;
      }

      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null registration, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181BB1888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t in_finalize_cksum(uint64_t a1, unsigned int a2, __int16 a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v28 = "__nw_frame_unclaimed_length";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type[0];
      if (!os_log_type_enabled(v13, type[0])) {
        goto LABEL_30;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v28 = "__nw_frame_unclaimed_length";
      BOOL v15 = "%{public}s called with null frame";
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v17 = os_log_type_enabled(v13, type[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v28 = "__nw_frame_unclaimed_length";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_30:
        if (v12) {
          free(v12);
        }
        __nwlog_obj();
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v28 = "__nw_frame_unclaimed_bytes";
        BOOL v18 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        char v26 = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          nw_endpoint_t v19 = (os_log_s *)__nwlog_obj();
          os_log_type_t v20 = type[0];
          if (!os_log_type_enabled(v19, type[0])) {
            goto LABEL_46;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v28 = "__nw_frame_unclaimed_bytes";
          os_log_type_t v21 = "%{public}s called with null frame";
        }

        else if (v26)
        {
          os_log_type_t v22 = (char *)__nw_create_backtrace_string();
          nw_endpoint_t v19 = (os_log_s *)__nwlog_obj();
          os_log_type_t v20 = type[0];
          BOOL v23 = os_log_type_enabled(v19, type[0]);
          if (v22)
          {
            if (v23)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              uint64_t v28 = "__nw_frame_unclaimed_bytes";
              __int16 v29 = 2082;
              uint64_t v30 = v22;
              _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v22);
            goto LABEL_46;
          }

          if (!v23)
          {
LABEL_46:
            if (v18) {
              free(v18);
            }
            goto LABEL_48;
          }

          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v28 = "__nw_frame_unclaimed_bytes";
          os_log_type_t v21 = "%{public}s called with null frame, no backtrace";
        }

        else
        {
          nw_endpoint_t v19 = (os_log_s *)__nwlog_obj();
          os_log_type_t v20 = type[0];
          if (!os_log_type_enabled(v19, type[0])) {
            goto LABEL_46;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v28 = "__nw_frame_unclaimed_bytes";
          os_log_type_t v21 = "%{public}s called with null frame, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
        goto LABEL_46;
      }

      if (!v17) {
        goto LABEL_30;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v28 = "__nw_frame_unclaimed_length";
      BOOL v15 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type[0];
      if (!os_log_type_enabled(v13, type[0])) {
        goto LABEL_30;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v28 = "__nw_frame_unclaimed_length";
      BOOL v15 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
    goto LABEL_30;
  }

  int v6 = *(_DWORD *)(a1 + 52);
  if (v6)
  {
    uint64_t v7 = (v6 - (*(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 60)));
    uint64_t v8 = *(void *)(a1 + 112);
    if (!v8) {
      goto LABEL_48;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)(a1 + 112);
    if (!v8) {
      goto LABEL_48;
    }
  }

  if ((*(_WORD *)(a1 + 204) & 0x100) != 0 && g_channel_check_validity)
  {
    uint64_t v8 = *(void *)(a1 + 112);
  }

  uint64_t v9 = *(unsigned int *)(a1 + 56);
  *(_DWORD *)os_log_type_t type = 0;
  if (!(_DWORD)v7 || !v8)
  {
LABEL_48:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v24 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v28 = "in_finalize_cksum";
      _os_log_impl(&dword_181A5C000, v24, OS_LOG_TYPE_INFO, "%{public}s frame is no longer valid", buf, 0xCu);
    }

    return 6LL;
  }

  int v10 = inet_cksum(a1, 0, v7, (int *)type);
  uint64_t result = *(unsigned int *)type;
  if (!*(_DWORD *)type)
  {
    if (!v10) {
      LOWORD(v10) = (__int16)(a3 << 15) >> 15;
    }
    *(_WORD *)(v8 + v9 + a2) = v10;
  }

  return result;
}

uint64_t inet_cksum(uint64_t a1, unsigned int a2, uint64_t a3, int *a4)
{
  *(void *)&v54[7] = *MEMORY[0x1895F89C0];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v50 = "m_sum16";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v50 = "m_sum16";
      BOOL v16 = "%{public}s called with null error";
    }

    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v30 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          int v50 = "m_sum16";
          __int16 v51 = 2082;
          *(void *)int v52 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null error, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_60;
      }

      if (!v30)
      {
LABEL_60:
        if (v13) {
          free(v13);
        }
        return 1;
      }

      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v50 = "m_sum16";
      BOOL v16 = "%{public}s called with null error, no backtrace";
    }

    else
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v50 = "m_sum16";
      BOOL v16 = "%{public}s called with null error, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_60;
  }

  *a4 = 0;
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v50 = "__nw_frame_unclaimed_length";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v50 = "__nw_frame_unclaimed_length";
      os_log_type_t v20 = "%{public}s called with null frame";
    }

    else if (v47)
    {
      uint64_t v31 = (char *)__nw_create_backtrace_string();
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v32 = os_log_type_enabled(v18, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          int v50 = "__nw_frame_unclaimed_length";
          __int16 v51 = 2082;
          *(void *)int v52 = v31;
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        goto LABEL_65;
      }

      if (!v32)
      {
LABEL_65:
        if (v17) {
          free(v17);
        }
        goto LABEL_67;
      }

      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v50 = "__nw_frame_unclaimed_length";
      os_log_type_t v20 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v50 = "__nw_frame_unclaimed_length";
      os_log_type_t v20 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
    goto LABEL_65;
  }

  int v8 = *(_DWORD *)(a1 + 52);
  if (v8)
  {
    unsigned int v9 = v8 - (*(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 60));
    unsigned int v10 = v9 - a2;
    if (v9 >= a2) {
      goto LABEL_5;
    }
LABEL_68:
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    int v50 = "m_sum16";
    __int16 v51 = 1024;
    *(_DWORD *)int v52 = a2;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = v9;
    char v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_98;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      int v50 = "m_sum16";
      __int16 v51 = 1024;
      *(_DWORD *)int v52 = a2;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = v9;
      os_log_type_t v40 = "%{public}s off %u > mlen %u in m_sum16";
    }

    else if (v47)
    {
      os_log_type_t v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v42 = os_log_type_enabled(v38, type);
      if (v41)
      {
        if (v42)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          int v50 = "m_sum16";
          __int16 v51 = 1024;
          *(_DWORD *)int v52 = a2;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = v9;
          __int16 v53 = 2082;
          *(void *)int v54 = v41;
          _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s off %u > mlen %u in m_sum16, dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(v41);
LABEL_98:
        if (v37)
        {
          BOOL v43 = (char *)v37;
          goto LABEL_100;
        }

void nw_channel_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v28 = "nw_channel_disconnect";
    id v4 = (nw_protocol *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        BOOL v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_61;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v28 = "nw_channel_disconnect";
        os_log_type_t v20 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v22) {
          goto LABEL_61;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v28 = "nw_channel_disconnect";
        os_log_type_t v20 = "%{public}s called with null channel_protocol, no backtrace";
        goto LABEL_60;
      }

      if (!v22)
      {
LABEL_50:
        free(backtrace_string);
        if (!v4) {
          return;
        }
LABEL_32:
        free(v4);
        return;
      }

      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v28 = "nw_channel_disconnect";
      __int16 v29 = 2082;
      BOOL v30 = backtrace_string;
      os_log_type_t v23 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_49:
      _os_log_impl(&dword_181A5C000, v18, v19, v23, buf, 0x16u);
      goto LABEL_50;
    }

    BOOL v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v28 = "nw_channel_disconnect";
    os_log_type_t v20 = "%{public}s called with null channel_protocol";
LABEL_60:
    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
LABEL_61:
    if (!v4) {
      return;
    }
    goto LABEL_32;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v28 = "nw_channel_disconnect";
    id v4 = (nw_protocol *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v28 = "nw_channel_disconnect";
      os_log_type_t v20 = "%{public}s called with null channel";
      goto LABEL_60;
    }

    if (!v25)
    {
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v28 = "nw_channel_disconnect";
      os_log_type_t v20 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_60;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (!v24) {
        goto LABEL_50;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v28 = "nw_channel_disconnect";
      __int16 v29 = 2082;
      BOOL v30 = backtrace_string;
      os_log_type_t v23 = "%{public}s called with null channel, dumping backtrace:%{public}s";
      goto LABEL_49;
    }

    if (!v24) {
      goto LABEL_61;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v28 = "nw_channel_disconnect";
    os_log_type_t v20 = "%{public}s called with null channel, no backtrace";
    goto LABEL_60;
  }

  id v4 = a2;
  if (a2)
  {
    callbacks = a2->callbacks;
    if (callbacks)
    {
      disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
      if (disconnected)
      {
        uint64_t v7 = a2->handle;
        if (v7 == &nw_protocol_ref_counted_handle)
        {
          int v8 = a2[1].callbacks;
          if (v8) {
            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
          }
        }

        if (handle == &nw_protocol_ref_counted_handle)
        {
          unsigned int v9 = a1[1].callbacks;
          if (v9) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v9->add_input_handler + 1);
          }
          disconnected(a2, a1);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            unsigned int v10 = a1[1].callbacks;
            if (v10)
            {
              uint64_t v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
              a1[1].callbacks = v11;
              if (!v11)
              {
                os_log_type_t v12 = *(void (***)(void))a1[1].flow_id;
                if (v12)
                {
                  *(void *)a1[1].flow_id = 0LL;
                  v12[2](v12);
                  _Block_release(v12);
                }

                if ((a1[1].flow_id[8] & 1) != 0)
                {
                  char v13 = *(const void **)a1[1].flow_id;
                  if (v13) {
                    _Block_release(v13);
                  }
                }

                free(a1);
              }
            }
          }
        }

        else
        {
          disconnected(a2, a1);
        }

        if (v7 == &nw_protocol_ref_counted_handle && v4->handle == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v14 = v4[1].callbacks;
          if (v14)
          {
            os_log_type_t v15 = (nw_protocol_callbacks *)((char *)v14 - 1);
            v4[1].callbacks = v15;
            if (!v15)
            {
              BOOL v16 = *(void (***)(void))v4[1].flow_id;
              if (v16)
              {
                *(void *)v4[1].flow_id = 0LL;
                v16[2](v16);
                _Block_release(v16);
              }

              if ((v4[1].flow_id[8] & 1) != 0)
              {
                BOOL v17 = *(const void **)v4[1].flow_id;
                if (v17) {
                  _Block_release(v17);
                }
              }

              goto LABEL_32;
            }
          }
        }
      }
    }
  }

void nw_protocol_ipv4_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        BOOL v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
        os_log_type_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_59;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
        os_log_type_t v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }

      if (!v21)
      {
LABEL_48:
        free(backtrace_string);
        if (!default_input_handler) {
          return;
        }
LABEL_30:
        free((void *)default_input_handler);
        return;
      }

      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      __int16 v28 = 2082;
      __int16 v29 = backtrace_string;
      BOOL v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_181A5C000, v17, v18, v22, buf, 0x16u);
      goto LABEL_48;
    }

    BOOL v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    os_log_type_t v19 = "%{public}s called with null protocol";
LABEL_58:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
LABEL_59:
    if (!default_input_handler) {
      return;
    }
    goto LABEL_30;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      os_log_type_t v19 = "%{public}s called with null ipv4";
      goto LABEL_58;
    }

    if (!v24)
    {
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      os_log_type_t v19 = "%{public}s called with null ipv4, backtrace limit exceeded";
      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (!v23) {
        goto LABEL_48;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      __int16 v28 = 2082;
      __int16 v29 = backtrace_string;
      BOOL v22 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_47;
    }

    if (!v23) {
      goto LABEL_59;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    os_log_type_t v19 = "%{public}s called with null ipv4, no backtrace";
    goto LABEL_58;
  }

  a1[2].identifier = 0LL;
  uint64_t default_input_handler = (uint64_t)a1->default_input_handler;
  if (default_input_handler)
  {
    uint64_t v4 = *(void *)(default_input_handler + 24);
    if (v4)
    {
      unsigned int v5 = *(void (**)(uint64_t, nw_protocol *))(v4 + 48);
      if (v5)
      {
        int v6 = *(void **)(default_input_handler + 40);
        if (v6 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v7 = *(void *)(default_input_handler + 88);
          if (v7) {
            *(void *)(default_input_handler + 88) = v7 + 1;
          }
        }

        callbacks = a1[1].callbacks;
        if (callbacks) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
        v5(default_input_handler, a1);
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          unsigned int v9 = a1[1].callbacks;
          if (v9)
          {
            unsigned int v10 = (nw_protocol_callbacks *)((char *)v9 - 1);
            a1[1].callbacks = v10;
            if (!v10)
            {
              uint64_t v11 = *(void (***)(void))a1[1].flow_id;
              if (v11)
              {
                *(void *)a1[1].flow_id = 0LL;
                v11[2](v11);
                _Block_release(v11);
              }

              if ((a1[1].flow_id[8] & 1) != 0)
              {
                os_log_type_t v12 = *(const void **)a1[1].flow_id;
                if (v12) {
                  _Block_release(v12);
                }
              }

              free(a1);
            }
          }
        }

        if (v6 == &nw_protocol_ref_counted_handle
          && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(default_input_handler + 88);
          if (v13)
          {
            uint64_t v14 = v13 - 1;
            *(void *)(default_input_handler + 88) = v14;
            if (!v14)
            {
              os_log_type_t v15 = *(void (***)(void))(default_input_handler + 64);
              if (v15)
              {
                *(void *)(default_input_handler + 64) = 0LL;
                v15[2](v15);
                _Block_release(v15);
              }

              if ((*(_BYTE *)(default_input_handler + 72) & 1) != 0)
              {
                BOOL v16 = *(const void **)(default_input_handler + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }

              goto LABEL_30;
            }
          }
        }
      }
    }
  }

uint64_t nw_protocol_ipv4_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v59 = "nw_protocol_ipv4_remove_input_handler";
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v56)
      {
        os_log_type_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_117;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v59 = "nw_protocol_ipv4_remove_input_handler";
        BOOL v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_116;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v51 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v51) {
          goto LABEL_117;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v59 = "nw_protocol_ipv4_remove_input_handler";
        BOOL v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_116;
      }

      if (v51)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        __int16 v59 = "nw_protocol_ipv4_remove_input_handler";
        __int16 v60 = 2082;
        uint64_t v61 = backtrace_string;
        int v52 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_99:
        _os_log_impl(&dword_181A5C000, v41, v42, v52, buf, 0x16u);
      }

BOOL nw_channel_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v81 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    v77[0] = 16;
    os_log_type_t v76 = OS_LOG_TYPE_DEFAULT;
    if (v77[0] == 17)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = v77[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v77[0])) {
        goto LABEL_77;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      BOOL v17 = "%{public}s called with null channel_protocol";
      goto LABEL_76;
    }

    if (v76 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = v77[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v77[0])) {
        goto LABEL_77;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      BOOL v17 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = v77[0];
    BOOL v68 = os_log_type_enabled(v15, (os_log_type_t)v77[0]);
    if (!backtrace_string)
    {
      if (!v68) {
        goto LABEL_77;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      BOOL v17 = "%{public}s called with null channel_protocol, no backtrace";
      goto LABEL_76;
    }

    if (!v68) {
      goto LABEL_43;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v25 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
    goto LABEL_42;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    v77[0] = 16;
    os_log_type_t v76 = OS_LOG_TYPE_DEFAULT;
    if (v77[0] == 17)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = v77[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v77[0])) {
        goto LABEL_77;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      BOOL v17 = "%{public}s called with null channel";
      goto LABEL_76;
    }

    if (v76 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = v77[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v77[0])) {
        goto LABEL_77;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      BOOL v17 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = v77[0];
    BOOL v69 = os_log_type_enabled(v15, (os_log_type_t)v77[0]);
    if (!backtrace_string)
    {
      if (!v69) {
        goto LABEL_77;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      BOOL v17 = "%{public}s called with null channel, no backtrace";
      goto LABEL_76;
    }

    if (!v69) {
      goto LABEL_43;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v25 = "%{public}s called with null channel, dumping backtrace:%{public}s";
    goto LABEL_42;
  }

  if (a2)
  {
    if ((nw_protocol *)handle[34] == a2) {
      handle[34] = 0LL;
    }
    uint64_t v4 = handle[35];
    if (v4)
    {
      output_handler_context = a2->output_handler_context;
      if (output_handler_context)
      {
        if ((*((_BYTE *)output_handler_context + 153) & 1) != 0)
        {
          uint64_t v18 = output_handler_context[9];
          os_log_type_t v19 = (void *)output_handler_context[10];
          if (v18)
          {
            *(void *)(v18 + 48) = v19;
            os_log_type_t v19 = (void *)output_handler_context[10];
          }

          else
          {
            handle[47] = v19;
          }

          void *v19 = v18;
          char v31 = *((_BYTE *)output_handler_context + 153) & 0xFE;
          *((_BYTE *)output_handler_context + 153) = v31;
          if ((v31 & 2) == 0)
          {
LABEL_10:
            int v6 = (void *)output_handler_context[6];
            if (!v6)
            {
LABEL_12:
              uint64_t v7 = (void *)output_handler_context[13];
              if (v7)
              {
                os_release(v7);
                output_handler_context[13] = 0LL;
              }

              a2->output_handler_context = 0LL;
              output_handler = a2->output_handler;
              if (output_handler)
              {
                if (output_handler->handle == &nw_protocol_ref_counted_handle)
                {
                  callbacks = output_handler[1].callbacks;
                  if (callbacks)
                  {
                    os_log_type_t v27 = (nw_protocol_callbacks *)((char *)callbacks - 1);
                    output_handler[1].callbacks = v27;
                    if (!v27)
                    {
                      __int16 v28 = *(void (***)(void))output_handler[1].flow_id;
                      if (v28)
                      {
                        *(void *)output_handler[1].flow_id = 0LL;
                        v28[2](v28);
                        _Block_release(v28);
                      }

                      if ((output_handler[1].flow_id[8] & 1) != 0)
                      {
                        __int16 v29 = *(const void **)output_handler[1].flow_id;
                        if (v29) {
                          _Block_release(v29);
                        }
                      }

                      free(output_handler);
                    }
                  }
                }

                a2->output_handler = 0LL;
              }

              uint64_t v9 = output_handler_context[4];
              if (v9)
              {
                while (v9)
                {
                  uint64_t v10 = *(void *)(v9 + 32);
                  nw_frame_finalize(v9);
                  uint64_t v9 = v10;
                }
              }

              if ((output_handler_context[8] & 1) != 0)
              {
                uint64_t v11 = output_handler_context[7];
                if (v11)
                {
                  if (*(_UNKNOWN **)(v11 + 40) == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v34 = *(void *)(v11 + 88);
                    if (v34)
                    {
                      uint64_t v35 = v34 - 1;
                      *(void *)(v11 + 88) = v35;
                      if (!v35)
                      {
                        BOOL v36 = *(void (***)(void))(v11 + 64);
                        if (v36)
                        {
                          *(void *)(v11 + 64) = 0LL;
                          v36[2](v36);
                          _Block_release(v36);
                        }

                        if ((*(_BYTE *)(v11 + 72) & 1) != 0)
                        {
                          char v37 = *(const void **)(v11 + 64);
                          if (v37) {
                            _Block_release(v37);
                          }
                        }

                        free((void *)v11);
                      }
                    }
                  }
                }
              }

              *((_BYTE *)output_handler_context + 64) |= 1u;
              output_handler_context[7] = 0LL;
              if (nw_hash_table_remove_node(v4, (uint64_t)output_handler_context))
              {
                if (handle[17])
                {
                  else {
                    int v13 = 0;
                  }
                }

                else
                {
                  int v13 = 1;
                }

                *(void *)netcore_stats_tcp_report buf = 0LL;
                *(void *)&buf[8] = buf;
                *(void *)&buf[16] = 0x2000000000LL;
                *(void *)&_BYTE buf[24] = os_retain(handle);
                if (v13)
                {
                  uint64_t v30 = (void *)handle[19];
                  v75[0] = MEMORY[0x1895F87A8];
                  v75[1] = 0x40000000LL;
                  v75[2] = ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke;
                  v75[3] = &unk_189BC9080;
                  v75[4] = buf;
                  nw_queue_context_async(v30, v75);
LABEL_108:
                  _Block_object_dispose(buf, 8);
                  return 1LL;
                }

                if ((*((_WORD *)handle + 222) & 0x40) != 0)
                {
                  uint64_t v44 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)os_log_type_t v77 = 136446210;
                    *(void *)&v77[4] = "nw_channel_remove_input_handler";
                    _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s Tearing down channel immediately",  v77,  0xCu);
                  }

                  nw_channel_close(*(void *)(*(void *)&buf[8] + 24LL), v45);
                  goto LABEL_89;
                }

                os_log_type_t v38 = (void *)handle[19];
                v74[0] = MEMORY[0x1895F87A8];
                v74[1] = 0x40000000LL;
                v74[2] = ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_52;
                v74[3] = &unk_189BC90A8;
                v74[4] = buf;
                v73[0] = MEMORY[0x1895F87A8];
                v73[1] = 0x40000000LL;
                v73[2] = ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_54;
                v73[3] = &unk_189BC90D0;
                v73[4] = buf;
                BOOL source = nw_queue_context_create_source(v38, 2, 3, 0, v74, v73);
                if (source)
                {
                  uint64_t v40 = source;
                  os_log_type_t v41 = a2->callbacks;
                  if (!v41) {
                    goto LABEL_102;
                  }
                  get_parameters = (uint64_t (*)(nw_protocol *))v41->get_parameters;
                  if (!get_parameters) {
                    goto LABEL_102;
                  }
                  if (a2->handle == &nw_protocol_ref_counted_handle)
                  {
                    BOOL v51 = a2[1].callbacks;
                    if (v51) {
                      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v51->add_input_handler + 1);
                    }
                    *(void *)os_log_type_t v77 = a2;
                    char v43 = v77[8] | 1;
                  }

                  else
                  {
                    *(void *)os_log_type_t v77 = a2;
                    char v43 = v77[8] & 0xFE;
                  }

                  v77[8] = v43;
                  int v52 = (void *)get_parameters(a2);
                  nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v77);
                  if (v52 && (uint64_t channel_teardown_delay = nw_parameters_get_channel_teardown_delay(v52)) != 0)
                  {
                    int64_t v54 = channel_teardown_delay;
                    BOOL v55 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)os_log_type_t v77 = 136446466;
                      *(void *)&v77[4] = "nw_channel_remove_input_handler";
                      __int16 v78 = 2048;
                      int64_t v79 = v54;
                      _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEBUG,  "%{public}s Using overridden channel teardown delay: %llums",  v77,  0x16u);
                    }
                  }

                  else
                  {
LABEL_102:
                    int64_t v54 = 1000
                        * networkd_settings_get_int64_with_default( (const char *)nw_setting_channel_teardown_delay,  60LL);
                  }

                  char v56 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)os_log_type_t v77 = 136446466;
                    *(void *)&v77[4] = "nw_channel_remove_input_handler";
                    __int16 v78 = 2048;
                    int64_t v79 = v54;
                    _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s Setting timer to tear down channel after %llums",  v77,  0x16u);
                  }

                  dispatch_time_t v57 = dispatch_time(0x8000000000000000LL, 1000000 * v54);
                  nw_queue_set_timer_values(v40, v57, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                  uint64_t v59 = *(void *)(*(void *)&buf[8] + 24LL);
                  uint64_t v60 = *(void *)(v59 + 200);
                  if (v60)
                  {
                    nw_queue_cancel_source(v60, v58);
                    uint64_t v61 = *(void *)&buf[8];
                    *(void *)(*(void *)(*(void *)&buf[8] + 24LL) + 200LL) = 0LL;
                    uint64_t v59 = *(void *)(v61 + 24);
                  }

                  *(void *)(v59 + 200) = v40;
                  nw_queue_activate_source(v40, v58);
                  goto LABEL_108;
                }

                __nwlog_obj();
                *(_DWORD *)os_log_type_t v77 = 136446210;
                *(void *)&v77[4] = "nw_channel_remove_input_handler";
                char v47 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t v76 = OS_LOG_TYPE_ERROR;
                char v72 = 0;
                if (__nwlog_fault(v47, &v76, &v72))
                {
                  if (v76 == OS_LOG_TYPE_FAULT)
                  {
                    os_log_type_t v48 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v49 = v76;
                    if (!os_log_type_enabled(v48, v76)) {
                      goto LABEL_129;
                    }
                    *(_DWORD *)os_log_type_t v77 = 136446210;
                    *(void *)&v77[4] = "nw_channel_remove_input_handler";
                    int v50 = "%{public}s nw_queue_context_create_source(timer) failed";
                    goto LABEL_128;
                  }

                  if (!v72)
                  {
                    os_log_type_t v48 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v49 = v76;
                    if (!os_log_type_enabled(v48, v76)) {
                      goto LABEL_129;
                    }
                    *(_DWORD *)os_log_type_t v77 = 136446210;
                    *(void *)&v77[4] = "nw_channel_remove_input_handler";
                    int v50 = "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded";
                    goto LABEL_128;
                  }

                  uint64_t v62 = (char *)__nw_create_backtrace_string();
                  os_log_type_t v48 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v49 = v76;
                  BOOL v63 = os_log_type_enabled(v48, v76);
                  if (v62)
                  {
                    if (v63)
                    {
                      *(_DWORD *)os_log_type_t v77 = 136446466;
                      *(void *)&v77[4] = "nw_channel_remove_input_handler";
                      __int16 v78 = 2082;
                      int64_t v79 = (int64_t)v62;
                      _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s",  v77,  0x16u);
                    }

                    free(v62);
                    goto LABEL_129;
                  }

                  if (v63)
                  {
                    *(_DWORD *)os_log_type_t v77 = 136446210;
                    *(void *)&v77[4] = "nw_channel_remove_input_handler";
                    int v50 = "%{public}s nw_queue_context_create_source(timer) failed, no backtrace";
LABEL_128:
                    _os_log_impl(&dword_181A5C000, v48, v49, v50, v77, 0xCu);
                  }
                }

void sub_181BB4A7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_path_flow_registration;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_path_flow_registration_close(void *a1)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v48 = "nw_path_flow_registration_close";
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v48 = "nw_path_flow_registration_close";
        _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s called with null registration", buf, 0xCu);
      }
    }

    else if (v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v33, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v48 = "nw_path_flow_registration_close";
          __int16 v49 = 2082;
          *(void *)int v50 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v33,  v38,  "%{public}s called with null registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_88:
        if (!v32) {
          goto LABEL_46;
        }
LABEL_89:
        free(v32);
        goto LABEL_46;
      }

      if (v39)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v48 = "nw_path_flow_registration_close";
        _os_log_impl(&dword_181A5C000, v33, v38, "%{public}s called with null registration, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v48 = "nw_path_flow_registration_close";
        _os_log_impl( &dword_181A5C000,  v33,  v43,  "%{public}s called with null registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181BB55BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_evaluator_cancel(void *a1)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (!v1) {
    goto LABEL_8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 24);
  if ((v1[107] & 0x20) != 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);
LABEL_8:
    uint64_t v4 = 0LL;
    goto LABEL_76;
  }

  if ((v1[107] & 0x40) != 0)
  {
    xpc_object_t v2 = nw_parameters_copy_context(*((void **)v1 + 1));
    if (!v2 || (int v3 = v2[31], v2, v3 != 4))
    {
      if (__nwlog_path_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
      }
      int v5 = (os_log_s *)(id)gpathLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        os_log_type_t v48 = "nw_path_evaluator_cancel";
        __int16 v49 = 1042;
        int v50 = 16;
        __int16 v51 = 2098;
        int v52 = v1 + 80;
        _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public,uuid_t}.16P] cancel", buf, 0x1Cu);
      }
    }
  }

  v1[107] |= 0x20u;
  uint64_t v6 = (void *)*((void *)v1 + 8);
  *((void *)v1 + 8) = 0LL;

  int v7 = (const void *)*((void *)v1 + 9);
  if (v7)
  {
    id v8 = _Block_copy(v7);
    uint64_t v9 = v8;
    uint64_t v10 = (dispatch_queue_s *)*((void *)v1 + 7);
    if (v10)
    {
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __nw_path_evaluator_cancel_block_invoke;
      block[3] = &unk_189BC8740;
      os_log_type_t v11 = &v46;
      id v46 = v8;
      dispatch_async(v10, block);
    }

    else
    {
      id v13 = nw_parameters_copy_context(*((void **)v1 + 1));
      v43[0] = MEMORY[0x1895F87A8];
      v43[1] = 3221225472LL;
      v43[2] = __nw_path_evaluator_cancel_block_invoke_2;
      v43[3] = &unk_189BC8740;
      id v44 = v9;
      nw_queue_context_async(v13, v43);

      os_log_type_t v11 = &v44;
    }

    int v12 = (void *)*((void *)v1 + 9);
  }

  else
  {
    int v12 = 0LL;
  }

  *((void *)v1 + 9) = 0LL;

  uint64_t v14 = (void *)*((void *)v1 + 7);
  *((void *)v1 + 7) = 0LL;

  id v15 = nw_parameters_copy_context(*((void **)v1 + 1));
  uint64_t globals_for_path = nw_context_get_globals_for_path(v15);

  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  if ((v1[107] & 1) == 0)
  {
    uuid_unparse((const unsigned __int8 *)v1 + 80, (char *)buf);
    uint64_t v17 = *(void *)(globals_for_path + 32);
    if (v17) {
      nw_dictionary_set_value(v17, (const char *)buf, 0LL);
    }
    goto LABEL_66;
  }

  uuid_clear((unsigned __int8 *)v1 + 80);
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (sNWIsBetweenForkAndExec != 1 || (sNWParentAllowedDispatch & 1) == 0)
  {
    if ((sNWDispatchAllowedNow & 1) != 0)
    {
LABEL_31:
      if (!*(void *)(globals_for_path + 48)) {
        goto LABEL_66;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v48 = "nw_path_evaluator_cancel";
        _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s Removing client from default path evaluator",  buf,  0xCu);
      }

      uint64_t v19 = *(void *)(globals_for_path + 48);
      if (!v19 || *(void *)(v19 + 16) == *(void *)(v19 + 24))
      {
        BOOL v20 = nw_array_create();
      }

      else
      {
        BOOL v20 = nw_array_create();
        std::vector<nw_object_wrapper_t>::reserve( v20 + 16,  ((uint64_t)(*(void *)(v19 + 24) - *(void *)(v19 + 16)) >> 3) - 1);
        BOOL v22 = *(void ***)(v19 + 16);
        uint64_t v21 = *(void ***)(v19 + 24);
        while (v22 != v21)
        {
          if (*v22 != v1) {
            nw_array_append(v20, *v22);
          }
          ++v22;
        }
      }

      os_log_type_t v23 = *(void **)(globals_for_path + 48);
      *(void *)(globals_for_path + 48) = v20;

      uint64_t v24 = *(void *)(globals_for_path + 48);
      if (v24)
      {
        if (*(void *)(v24 + 24) != *(void *)(v24 + 16)) {
          goto LABEL_66;
        }
      }

      id v25 = nw_parameters_copy_context(*((void **)v1 + 1));
      nw_path_shared_necp_fd(v25);

      int v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      __nwlog_obj();
      os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v48 = "nw_path_evaluator_cancel";
      __int16 v49 = 1024;
      int v50 = v26;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v41 = 0;
      if (__nwlog_fault(v28, &type, &v41))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v30 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v48 = "nw_path_evaluator_cancel";
            __int16 v49 = 1024;
            int v50 = v26;
            _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d",  buf,  0x12u);
          }
        }

        else if (v41)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v32 = type;
          BOOL v33 = os_log_type_enabled(v29, type);
          if (backtrace_string)
          {
            if (v33)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
              os_log_type_t v48 = "nw_path_evaluator_cancel";
              __int16 v49 = 1024;
              int v50 = v26;
              __int16 v51 = 2082;
              int v52 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v29,  v32,  "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(backtrace_string);
            goto LABEL_61;
          }

          if (v33)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v48 = "nw_path_evaluator_cancel";
            __int16 v49 = 1024;
            int v50 = v26;
            _os_log_impl( &dword_181A5C000,  v29,  v32,  "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v48 = "nw_path_evaluator_cancel";
            __int16 v49 = 1024;
            int v50 = v26;
            _os_log_impl( &dword_181A5C000,  v29,  v34,  "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

void sub_181BB5E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181BB6334( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_path_evaluator;
  -[_Unwind_Exception dealloc](&a14, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_181BB66F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_context;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_context_purge_all_endpoints(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nw_context_purge_all_endpoints_block_invoke;
    v11[3] = &unk_189BC93A0;
    id v12 = v1;
    nw_queue_context_async_if_needed(v12, v11);

    goto LABEL_3;
  }

  __nwlog_obj();
  int v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v16 = "nw_context_purge_all_endpoints";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v4, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_context_purge_all_endpoints";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v16 = "nw_context_purge_all_endpoints";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v9)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_context_purge_all_endpoints";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_context_purge_all_endpoints";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BB6ABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_context_purge_all_endpoints_block_invoke(uint64_t a1)
{
}

void sub_181BB6CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Block_object_dispose((const void *)(v19 - 80), 8);
  a11.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_association;
  -[_Unwind_Exception dealloc](&a11, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_protocol_default_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v16 = "nw_protocol_default_input_finished";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_input_finished";
      os_log_type_t v8 = "%{public}s called with null protocol";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v16 = "nw_protocol_default_input_finished";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v5) {
          return;
        }
        goto LABEL_35;
      }

      if (!v10) {
        goto LABEL_34;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_input_finished";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_input_finished";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_flow_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  handle = (nw_flow_protocol *)a1->handle;
  int v3 = handle->handler;
  uint64_t v4 = v3;
  if (v3)
  {
    int v5 = v3;
    uint64_t mode = v5->mode;

    if ((_DWORD)mode == 2)
    {
      os_log_type_t v7 = (NWConcrete_nw_endpoint_flow *)nw_endpoint_handler_copy_flow(v5);
      *((_WORD *)handle + 166) |= 0x10u;
      nw_flow_service_reads(v5, v7, handle, 0);
      if (&v7->shared_protocol == handle)
      {
        if (v7->client_queue)
        {
          id read_close_handler = v7->read_close_handler;
          if (read_close_handler)
          {
            os_log_type_t v11 = _Block_copy(read_close_handler);
            client_queue = (dispatch_queue_s *)v7->client_queue;
            block[0] = MEMORY[0x1895F87A8];
            block[1] = 3221225472LL;
            block[2] = ___ZL22nw_flow_input_finishedP11nw_protocolS0__block_invoke;
            block[3] = &unk_189BC8740;
            id v23 = v11;
            id v13 = v11;
            dispatch_async(client_queue, block);
          }
        }
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        else {
          BOOL v9 = off_189BBBBC0[mode];
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        os_log_type_t v27 = "nw_flow_input_finished";
        __int16 v28 = 2082;
        __int16 v29 = (void *)v9;
        __int16 v30 = 2082;
        char v31 = "flow";
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    goto LABEL_14;
  }

  __nwlog_obj();
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v27 = "nw_flow_input_finished";
  id v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v15, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_flow_input_finished";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v27 = "nw_flow_input_finished";
          __int16 v28 = 2082;
          __int16 v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }

      if (v20)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_flow_input_finished";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_flow_input_finished";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BB76EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_channel_disconnect_flow(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    char v24 = "nw_channel_disconnect_flow";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v24 = "nw_channel_disconnect_flow";
      uint64_t v14 = "%{public}s called with null channel";
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v24 = "nw_channel_disconnect_flow";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v11) {
          return;
        }
LABEL_51:
        free(v11);
        return;
      }

      if (!v16) {
        goto LABEL_50;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v24 = "nw_channel_disconnect_flow";
      uint64_t v14 = "%{public}s called with null channel, no backtrace";
    }

    else
    {
      BOOL v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v24 = "nw_channel_disconnect_flow";
      uint64_t v14 = "%{public}s called with null channel, backtrace limit exceeded";
    }

void nw_protocol_default_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error) {
          error();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v14 = "nw_protocol_default_error";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v14 = "nw_protocol_default_error";
      os_log_type_t v8 = "%{public}s called with null protocol";
      goto LABEL_19;
    }

    if (!v11)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v14 = "nw_protocol_default_error";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_19;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        uint64_t v14 = "nw_protocol_default_error";
        __int16 v15 = 2082;
        BOOL v16 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_20;
    }

    if (v10)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v14 = "nw_protocol_default_error";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
LABEL_19:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    }
  }

void nw_flow_error(nw_protocol *a1, nw_protocol *a2, unsigned int a3)
{
  int v5 = a1;
  uint64_t v119 = *MEMORY[0x1895F89C0];
  handle = (id *)a1->handle;
  id v7 = handle[20];
  os_log_type_t v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v102 = "nw_flow_error";
    uint64_t v61 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (__nwlog_fault(v61, &type, &v99))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v102 = "nw_flow_error";
          _os_log_impl(&dword_181A5C000, v62, v63, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v99)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v65 = type;
        BOOL v66 = os_log_type_enabled(v62, type);
        if (backtrace_string)
        {
          if (v66)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            BOOL v102 = "nw_flow_error";
            __int16 v103 = 2082;
            nw_endpoint_t v104 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v62,  v65,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_94;
        }

        if (v66)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v102 = "nw_flow_error";
          _os_log_impl(&dword_181A5C000, v62, v65, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v80 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v102 = "nw_flow_error";
          _os_log_impl( &dword_181A5C000,  v62,  v80,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181BB8A10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

_DWORD *nw_error_create_posix_error(int a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1) {
    return -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, a1);
  }
  __nwlog_obj();
  xpc_object_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  BOOL v12 = "nw_error_create_posix_error";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v12 = "nw_error_create_posix_error";
        uint64_t v6 = "%{public}s called with null error_code";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            BOOL v12 = "nw_error_create_posix_error";
            __int16 v13 = 2082;
            uint64_t v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null error_code, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v8) {
          goto LABEL_17;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v12 = "nw_error_create_posix_error";
        uint64_t v6 = "%{public}s called with null error_code, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v12 = "nw_error_create_posix_error";
        uint64_t v6 = "%{public}s called with null error_code, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_path_get_rtt_values(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  BOOL v10 = v9;
  if (v9)
  {
    if (a5)
    {
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      __int128 v29 = 0u;
      memset(buf, 0, sizeof(buf));
      BOOL v11 = nw_path_fillout_route_stats(v9, (uint64_t)buf, a5);
      if (v11)
      {
        if (a2) {
          *a2 = DWORD1(v33);
        }
        if (a3) {
          *a3 = DWORD2(v33);
        }
        if (a4) {
          *a4 = HIDWORD(v33);
        }
      }

      else
      {
        if (a2) {
          *a2 = 0;
        }
        if (a3) {
          *a3 = 0;
        }
        if (a4) {
          *a4 = 0;
        }
        *a5 = 0;
      }

      goto LABEL_17;
    }

    __nwlog_obj();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v14, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null route_flags", buf, 0xCu);
        }

void sub_181BB9A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_data_transfer_report_t nw_connection_create_new_data_transfer_report(nw_connection_t connection)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  xpc_object_t v2 = connection;
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_data_transfer_report);
  objc_storeStrong((id *)v3 + 3, connection);
  uint64_t v4 = v2;
  os_log_type_t v5 = v3;
  if (v4)
  {
    *(void *)netcore_stats_tcp_report buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_connection_add_data_transfer_report_block_invoke;
    os_log_type_t v18 = &unk_189BC9238;
    os_log_type_t v19 = v4;
    os_log_type_t v20 = v5;
    nw_connection_async_if_needed(v19, buf);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_add_data_transfer_report";
  BOOL v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_data_transfer_report";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_add_data_transfer_report";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_data_transfer_report";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_data_transfer_report";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BB9D78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void __nw_connection_add_data_transfer_report_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(int *)(v2 + 80) < 4)
  {
    uint64_t v6 = *(void *)(v2 + 424);
    if (!v6)
    {
      BOOL v7 = nw_array_create();
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = *(void **)(v8 + 424);
      *(void *)(v8 + 424) = v7;

      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 424LL);
    }

    nw_array_append(v6, *(void **)(a1 + 40));
    os_log_type_t v10 = *(_DWORD **)(a1 + 32);
    if (v10[20] == 3) {
      nw_connection_initial_data_transfer_report_snapshot_on_nw_queue(v10, *(void **)(a1 + 40));
    }
  }

  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v4 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
        int v11 = 136446466;
        os_log_type_t v12 = "nw_connection_add_data_transfer_report_block_invoke";
        __int16 v13 = 1024;
        int v14 = v5;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Cannot add data transfer report to connection past the ready state",  (uint8_t *)&v11,  0x12u);
      }
    }
  }

void nw_connection_initial_data_transfer_report_snapshot_on_nw_queue(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(aBlock[0]) = 136446210;
    *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v33) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        LODWORD(aBlock[0]) = 136446210;
        *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null connection", (uint8_t *)aBlock, 0xCu);
      }
    }

    else if ((_BYTE)v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type[0];
      BOOL v27 = os_log_type_enabled(v21, type[0]);
      if (backtrace_string)
      {
        if (v27)
        {
          LODWORD(aBlock[0]) = 136446466;
          *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
          WORD6(aBlock[0]) = 2082;
          *(void *)((char *)aBlock + 14) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null connection, dumping backtrace:%{public}s",  (uint8_t *)aBlock,  0x16u);
        }

        free(backtrace_string);
LABEL_61:
        if (!v20) {
          goto LABEL_23;
        }
        goto LABEL_62;
      }

      if (v27)
      {
        LODWORD(aBlock[0]) = 136446210;
        *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null connection, no backtrace",  (uint8_t *)aBlock,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        LODWORD(aBlock[0]) = 136446210;
        *(void *)((char *)aBlock + 4) = "nw_connection_initial_data_transfer_report_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v21,  v31,  "%{public}s called with null connection, backtrace limit exceeded",  (uint8_t *)aBlock,  0xCu);
      }
    }

void sub_181BBA904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_data_transfer_set_initial_snapshot_time_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 8LL) = *(void *)(result + 40);
  return result;
}

void nw_data_transfer_add_initial_snapshot(void *a1, void *a2, NWConcrete_nw_interface **a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  int v5 = a1;
  uint64_t v6 = a2;
  if (a3)
  {
    uint64_t v7 = *a3;
    if (!*a3 || v6 && v7 == (NWConcrete_nw_interface *)v6->index)
    {
      uint64_t v8 = v6;
    }

    else
    {
      uint64_t v8 = nw_interface_create_with_index(v7);

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v10 = *a3;
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        BOOL v30 = "nw_data_transfer_add_initial_snapshot";
        __int16 v31 = 2112;
        os_log_type_t v32 = v8;
        __int16 v33 = 2048;
        uint64_t v34 = v10;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s created interface %@ from index %llu",  buf,  0x20u);
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      radio_os_log_type_t type = nw_interface_get_radio_type(v8);
      __int16 v13 = nw_interface_radio_type_to_string(radio_type);
      *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
      BOOL v30 = "nw_data_transfer_add_initial_snapshot";
      __int16 v31 = 2048;
      os_log_type_t v32 = v5;
      __int16 v33 = 2112;
      uint64_t v34 = v8;
      __int16 v35 = 2080;
      char v36 = v13;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s report %p adding initial snapshot for interface %@[%s]",  buf,  0x2Au);
    }

    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    _OWORD aBlock[2] = __nw_data_transfer_add_initial_snapshot_block_invoke;
    aBlock[3] = &unk_189BC75E8;
    os_log_type_t v24 = v5;
    uint64_t v6 = v8;
    os_log_type_t v25 = v6;
    os_log_type_t v26 = a3;
    id v14 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v5 + 10);
    v14[2](v14);
    os_unfair_lock_unlock(v5 + 10);

    goto LABEL_12;
  }

  __nwlog_obj();
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  BOOL v30 = "nw_data_transfer_add_initial_snapshot";
  int v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v16, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v30 = "nw_data_transfer_add_initial_snapshot";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null snapshot", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          BOOL v30 = "nw_data_transfer_add_initial_snapshot";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v20,  "%{public}s called with null snapshot, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }

      if (v21)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v30 = "nw_data_transfer_add_initial_snapshot";
        _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null snapshot, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v30 = "nw_data_transfer_add_initial_snapshot";
        _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null snapshot, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BBADE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_data_transfer_add_initial_snapshot_block_invoke(uint64_t a1)
{
  BOOL path_report_for_interface_locked = nw_data_transfer_report_get_path_report_for_interface_locked( *(void **)(a1 + 32),  *(void **)(a1 + 40),  1);
  if (path_report_for_interface_locked)
  {
    uint64_t v3 = (nw_data_transfer_path_report *)path_report_for_interface_locked;
    nw_data_transfer_update_path_report_begin(v3, *(nw_data_transfer_snapshot **)(a1 + 48));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 40));
  }

uint64_t nw_interface_get_radio_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[84];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  int v16 = "nw_interface_get_radio_type";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v16 = "nw_interface_get_radio_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          int v16 = "nw_interface_get_radio_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v16 = "nw_interface_get_radio_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v16 = "nw_interface_get_radio_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_context_16k_buffer_length()
{
  return dword_18C58F368;
}

uint64_t nw_context_16k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 164LL);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 164LL) = nw_mem_buffer_manager_initialize( *(dispatch_object_s **)(v3 + 8),  aNwcontextbuffe_1,  dword_18C58F368,  (unsigned __int16)word_18C58F36C);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 164LL);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v17 = "nw_context_16k_buffer_manager";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v17 = "nw_context_16k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v17 = "nw_context_16k_buffer_manager";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v12)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v17 = "nw_context_16k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v17 = "nw_context_16k_buffer_manager";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BBB3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_data_transfer_report_collect_on_nw_queue(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v3)
  {
    if (!v4 && gLogDatapath)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v18 = "nw_data_transfer_report_collect_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_DEBUG, "%{public}s called without collect_block", buf, 0xCu);
      }
    }

    nw_data_transfer_report_collect_inner(v3, 0LL, v5, 1);
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v18 = "nw_data_transfer_report_collect_on_nw_queue";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v18 = "nw_data_transfer_report_collect_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v18 = "nw_data_transfer_report_collect_on_nw_queue";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v12,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v13)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v18 = "nw_data_transfer_report_collect_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v8, v12, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v18 = "nw_data_transfer_report_collect_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v8,  v14,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BBB718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_data_transfer_report_add_snapshot_on_nw_queue(void *a1)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
    __int128 v40 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v64) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if ((_BYTE)v64)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v48 = type[0];
      BOOL v49 = os_log_type_enabled(v41, type[0]);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
          __int16 v74 = 2082;
          nw_endpoint_t v75 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v41,  v48,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_103:
        if (!v40) {
          goto LABEL_16;
        }
LABEL_104:
        free(v40);
        goto LABEL_16;
      }

      if (v49)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v41, v48, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v55 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v41,  v55,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181BBC340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 52LL) == 2;
  return result;
}

void __nw_connection_remove_data_transfer_report_block_invoke(uint64_t a1)
{
  BOOL v2 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 424LL), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 424);
  *(void *)(v3 + 424) = v2;
}

BOOL nw_array_duplicate_array_without_object(uint64_t a1, void *a2)
{
  if (!a1 || *(void *)(a1 + 16) == *(void *)(a1 + 24)) {
    return nw_array_create();
  }
  uint64_t v4 = nw_array_create();
  uint64_t v5 = v4;
  if (a2)
  {
    std::vector<nw_object_wrapper_t>::reserve( v4 + 16,  ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) - 1);
    uint64_t v7 = *(void ***)(a1 + 16);
    uint64_t v6 = *(void ***)(a1 + 24);
    while (v7 != v6)
    {
      if (*v7 != a2) {
        nw_array_append(v5, *v7);
      }
      ++v7;
    }
  }

  else if (v4 == a1)
  {
    return a1;
  }

  else
  {
    std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v4 + 16,  *(void ***)(a1 + 16),  *(void ***)(a1 + 24),  (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
  }

  return v5;
}

void std::vector<nw_object_wrapper_t>::reserve(uint64_t a1, unint64_t a2)
{
  BOOL v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 8 * a2;
    uint64_t v6 = (char *)operator new(8 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = v4 - v2;
    unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8LL];
    if (v4 == v2)
    {
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v7;
LABEL_21:
      if (v2) {
        operator delete(v2);
      }
      return;
    }

    unint64_t v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) > 0x77)
    {
      BOOL v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8LL) - (v10 & 0xFFFFFFFFFFFFFFF8LL) - 8] >= v4
         || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8LL) - 8] >= v9;
      os_log_type_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8LL];
      if (v12)
      {
        uint64_t v13 = v8 >> 3;
        uint64_t v14 = (v10 >> 3) + 1;
        uint64_t v15 = &v6[8 * v13 - 16];
        unint64_t v16 = v4 - 32;
        uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v18 = *((_OWORD *)v16 + 1);
          *((_OWORD *)v15 - 1) = *(_OWORD *)v16;
          *(_OWORD *)uint64_t v15 = v18;
          *(_OWORD *)unint64_t v16 = 0uLL;
          *((_OWORD *)v16 + 1) = 0uLL;
          v16 -= 32;
          v15 -= 32;
          v17 -= 4LL;
        }

        while (v17);
        os_log_type_t v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
        v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          BOOL v2 = *(char **)a1;
          uint64_t v20 = *(char **)(a1 + 8);
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v7;
          if (v20 != v2)
          {
            uint64_t v21 = v20;
            do
            {
              uint64_t v23 = (void *)*((void *)v21 - 1);
              v21 -= 8;
              unsigned int v22 = v23;
              if (v23) {
                os_release(v22);
              }
              *((void *)v20 - 1) = 0LL;
              uint64_t v20 = v21;
            }

            while (v21 != v2);
          }

          goto LABEL_21;
        }
      }
    }

    else
    {
      os_log_type_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8LL];
    }

    do
    {
      uint64_t v19 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v11 - 1) = v19;
      v11 -= 8;
      *(void *)uint64_t v4 = 0LL;
    }

    while (v4 != v2);
    goto LABEL_16;
  }

void nw_data_transfer_report_collect( nw_data_transfer_report_t report, dispatch_queue_t queue, nw_data_transfer_report_collect_block_t collect_block)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v5 = report;
  uint64_t v6 = queue;
  nw_data_transfer_report_collect_block_t v7 = collect_block;
  uint64_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v26 = "nw_data_transfer_report_collect";
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v26 = "nw_data_transfer_report_collect";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v26 = "nw_data_transfer_report_collect";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v10) {
          goto LABEL_5;
        }
LABEL_40:
        free(v10);
        goto LABEL_5;
      }

      if (v17)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v26 = "nw_data_transfer_report_collect";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v26 = "nw_data_transfer_report_collect";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181BBCB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint32_t nw_data_transfer_report_get_path_count(nw_data_transfer_report_t report)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = report;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v17 = "nw_data_transfer_report_get_path_count";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        nw_data_transfer_report_collect_block_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v17 = "nw_data_transfer_report_get_path_count";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null report", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        nw_data_transfer_report_collect_block_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            BOOL v17 = "nw_data_transfer_report_get_path_count";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v11,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v12)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v17 = "nw_data_transfer_report_get_path_count";
          _os_log_impl(&dword_181A5C000, v7, v11, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        nw_data_transfer_report_collect_block_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v17 = "nw_data_transfer_report_get_path_count";
          _os_log_impl( &dword_181A5C000,  v7,  v13,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181BBCF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_data_transfer_report_state_t nw_data_transfer_report_get_state(nw_data_transfer_report_t report)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = report;
  BOOL v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)netcore_stats_tcp_report buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    _OWORD aBlock[2] = __nw_data_transfer_report_get_state_block_invoke;
    aBlock[3] = &unk_189BC9210;
    os_log_type_t v16 = buf;
    uint64_t v15 = v1;
    uint32_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 10);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 10);

    nw_data_transfer_report_state_t v4 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
  nw_data_transfer_report_collect_block_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181BBD2B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_data_transfer_report_get_state_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 52LL);
  return result;
}

nw_interface_radio_type_t nw_data_transfer_report_get_path_radio_type( nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint32_t v3 = report;
  nw_data_transfer_report_state_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
          __int16 v35 = 2082;
          *(void *)char v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }

      if (v21)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
        _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
        _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_48;
  }

  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot retrieve data report values until collected",  buf,  0xCu);
    }

    goto LABEL_51;
  }

  if (path_index == -1) {
    uint32_t v5 = 0;
  }
  else {
    uint32_t v5 = path_index;
  }
  if (v5 >= *((_DWORD *)v4 + 11))
  {
    __nwlog_obj();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    int v16 = *((_DWORD *)v4 + 11);
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
    __int16 v35 = 1024;
    *(_DWORD *)char v36 = v5;
    *(_WORD *)&void v36[4] = 1024;
    *(_DWORD *)&v36[6] = v16;
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = *((_DWORD *)v4 + 11);
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
        __int16 v35 = 1024;
        *(_DWORD *)char v36 = v5;
        *(_WORD *)&void v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }

    else if (v31)
    {
      uint32_t v22 = v5;
      char v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = *((_DWORD *)v4 + 11);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
          __int16 v35 = 1024;
          *(_DWORD *)char v36 = v22;
          *(_WORD *)&void v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          __int128 v38 = v23;
          _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(v23);
        goto LABEL_49;
      }

      if (v25)
      {
        int v30 = *((_DWORD *)v4 + 11);
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
        __int16 v35 = 1024;
        *(_DWORD *)char v36 = v22;
        *(_WORD *)&void v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s path_index (%u) >= report->path_count (%u), no backtrace",  buf,  0x18u);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = *((_DWORD *)v4 + 11);
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        uint64_t v34 = "nw_data_transfer_report_get_path_radio_type";
        __int16 v35 = 1024;
        *(_DWORD *)char v36 = v5;
        *(_WORD *)&void v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl( &dword_181A5C000,  v12,  v28,  "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded",  buf,  0x18u);
      }
    }

void sub_181BBD8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_content_context_t v1 = context;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    BOOL v3 = 0;
    if (v1 != (nw_content_context_t)&__block_literal_global_41831
      && v1 != (nw_content_context_t)&__block_literal_global_5_41854)
    {
      BOOL v3 = 1;
      if (v1 != (nw_content_context_t)&__block_literal_global_3_41839
        && v1 != (nw_content_context_t)&__block_literal_global_4)
      {
        BOOL v3 = *((_BYTE *)v1 + 118) & 1;
      }
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  uint32_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  int v16 = "nw_content_context_get_is_final";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          int v16 = "nw_content_context_get_is_final";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v16 = "nw_content_context_get_is_final";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t sub_181BBDC98()
{
  nw_protocol_definition_t v0 = nw_protocol_copy_ws_definition();
  type metadata accessor for NWProtocolDefinition();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 32) = v0;
  id v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v3 = sub_18264EA48();
  uint64_t v5 = v4;

  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v5;
  off_18C58B078 = (_UNKNOWN *)v1;
  return result;
}

uint64_t static NWProtocolWebSocket.definition.getter()
{
  if (qword_18C58B070 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static NWProtocolWebSocket.Version.== infix(_:_:)()
{
  return 1LL;
}

uint64_t NWProtocolWebSocket.Version.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWProtocolWebSocket.Version.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181BBDDD4()
{
  return 1LL;
}

uint64_t sub_181BBDDDC()
{
  return sub_18264F684();
}

uint64_t sub_181BBDE1C()
{
  return sub_18264F654();
}

uint64_t sub_181BBDE40()
{
  return sub_18264F684();
}

Network::NWProtocolWebSocket::Opcode_optional __swiftcall NWProtocolWebSocket.Opcode.init(rawValue:)( Network::NWProtocolWebSocket::Opcode_optional rawValue)
{
  else {
    *uint64_t v1 = byte_18265BDC6[rawValue.value];
  }
  return rawValue;
}

unint64_t NWProtocolWebSocket.Opcode.rawValue.getter()
{
  return 0xA0908020100uLL >> (8 * *v0);
}

BOOL sub_181BBDEC8(_BYTE *a1, _BYTE *a2)
{
  return (0xA0908020100uLL >> (8 * *a1)) == (0xA0908020100uLL >> (8 * *a2));
}

uint64_t sub_181BBDF00()
{
  return sub_18264F684();
}

uint64_t sub_181BBDF54()
{
  return sub_18264F660();
}

uint64_t sub_181BBDF90()
{
  return sub_18264F684();
}

Network::NWProtocolWebSocket::Opcode_optional sub_181BBDFE0(Swift::UInt8 *a1)
{
  return NWProtocolWebSocket.Opcode.init(rawValue:)(*a1);
}

void sub_181BBDFE8(_BYTE *a1@<X8>)
{
  *a1 = 0xA0908020100uLL >> (8 * *v1);
}

Network::NWProtocolWebSocket::CloseCode::Defined_optional __swiftcall NWProtocolWebSocket.CloseCode.Defined.init(rawValue:)( Swift::UInt16 rawValue)
{
  else {
    *uint64_t v1 = byte_18265BE40[(__int16)(rawValue - 1000)];
  }
  return (Network::NWProtocolWebSocket::CloseCode::Defined_optional)rawValue;
}

uint64_t NWProtocolWebSocket.CloseCode.Defined.rawValue.getter()
{
  return word_18265BE1C[*v0];
}

BOOL sub_181BBE050(char *a1, char *a2)
{
  return word_18265BE1C[*a1] == word_18265BE1C[*a2];
}

uint64_t sub_181BBE074()
{
  return sub_18264F684();
}

uint64_t sub_181BBE0C0()
{
  return sub_18264F66C();
}

uint64_t sub_181BBE0F4()
{
  return sub_18264F684();
}

Network::NWProtocolWebSocket::CloseCode::Defined_optional sub_181BBE13C(Swift::UInt16 *a1)
{
  return NWProtocolWebSocket.CloseCode.Defined.init(rawValue:)(*a1);
}

void sub_181BBE144(_WORD *a1@<X8>)
{
  *a1 = word_18265BE1C[*v1];
}

uint64_t NWProtocolWebSocket.CloseCode.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((unsigned __int16)(result - 1000) > 0x7CFu)
  {
    if ((unsigned __int16)(result - 3000) < 0x3E8u)
    {
      char v3 = 1;
      goto LABEL_8;
    }

    if ((unsigned __int16)(result - 4000) < 0x3E8u)
    {
      char v3 = 2;
      goto LABEL_8;
    }
  }

  else
  {
    NWProtocolWebSocket.CloseCode.Defined.init(rawValue:)(result);
    uint64_t result = v5;
    if (v5 != 12)
    {
      char v3 = 0;
LABEL_8:
      *(_WORD *)a2 = result;
      *(_BYTE *)(a2 + 2) = v3;
      return result;
    }
  }

  sub_181BBE220();
  swift_allocError();
  *(_DWORD *)uint64_t v4 = 22;
  *(_BYTE *)(v4 + 4) = 0;
  return swift_willThrow();
}

unint64_t sub_181BBE220()
{
  unint64_t result = qword_18C58D310;
  if (!qword_18C58D310)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for NWError, &type metadata for NWError);
    atomic_store(result, (unint64_t *)&qword_18C58D310);
  }

  return result;
}

uint64_t sub_181BBE26C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

void sub_181BBE2B0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(_BYTE *)(v3 + 24) = v2;
  nw_ws_options_set_auto_reply_ping(*(nw_protocol_options_t *)(v3 + 16), v2);
}

uint64_t sub_181BBE2FC()
{
  return *(unsigned __int8 *)(v0 + 24);
}

void sub_181BBE32C(char a1)
{
  *(_BYTE *)(v1 + 24) = a1;
  nw_ws_options_set_auto_reply_ping(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

void (*sub_181BBE374(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_181BBE3B4;
}

void sub_181BBE3B4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    nw_ws_options_set_auto_reply_ping( *(nw_protocol_options_t *)(*(void *)(a1 + 24) + 16LL),  *(_BYTE *)(*(void *)(a1 + 24) + 24LL));
  }
}

uint64_t sub_181BBE3F4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 32);
  return result;
}

void sub_181BBE438(size_t *a1, uint64_t *a2)
{
  size_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 32) = v2;
  nw_ws_options_set_maximum_message_size(*(nw_protocol_options_t *)(v3 + 16), v2);
}

uint64_t sub_181BBE484()
{
  return *(void *)(v0 + 32);
}

void sub_181BBE4B4(size_t a1)
{
  *(void *)(v1 + 32) = a1;
  nw_ws_options_set_maximum_message_size(*(nw_protocol_options_t *)(v1 + 16), a1);
}

void (*sub_181BBE4FC(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_181BBE53C;
}

void sub_181BBE53C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    nw_ws_options_set_maximum_message_size( *(nw_protocol_options_t *)(*(void *)(a1 + 24) + 16LL),  *(void *)(*(void *)(a1 + 24) + 32LL));
  }
}

uint64_t sub_181BBE57C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 40);
  return result;
}

void sub_181BBE5C0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(_BYTE *)(v3 + 40) = v2;
  nw_ws_options_set_skip_handshake(*(nw_protocol_options_t *)(v3 + 16), v2);
}

uint64_t sub_181BBE60C()
{
  return *(unsigned __int8 *)(v0 + 40);
}

void sub_181BBE63C(char a1)
{
  *(_BYTE *)(v1 + 40) = a1;
  nw_ws_options_set_skip_handshake(*(nw_protocol_options_t *)(v1 + 16), a1 & 1);
}

void (*sub_181BBE684(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_181BBE6C4;
}

void sub_181BBE6C4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    nw_ws_options_set_skip_handshake( *(nw_protocol_options_t *)(*(void *)(a1 + 24) + 16LL),  *(_BYTE *)(*(void *)(a1 + 24) + 40LL));
  }
}

BOOL sub_181BBE704(nw_protocol_options *a1)
{
  uint64_t v1 = nw_protocol_options_copy_definition(a1);
  char v2 = nw_protocol_copy_ws_definition();
  BOOL is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolWebSocket.Options.__allocating_init(_:)()
{
  uint64_t v0 = swift_allocObject();
  *(_BYTE *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0LL;
  *(_BYTE *)(v0 + 40) = 0;
  *(void *)(v0 + 16) = nw_ws_create_options(nw_ws_version_13);
  return v0;
}

uint64_t NWProtocolWebSocket.Options.init(_:)()
{
  *(_BYTE *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0LL;
  *(_BYTE *)(v0 + 40) = 0;
  *(void *)(v0 + 16) = nw_ws_create_options(nw_ws_version_13);
  return v0;
}

uint64_t sub_181BBE7CC(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(_BYTE *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  *(_BYTE *)(result + 40) = 0;
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_181BBE808(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
    uint64_t v4 = swift_bridgeObjectRetain() + 56;
    do
    {
      unsigned __int8 v5 = (const char *)(sub_18264EACC() + 32);
      uint64_t v6 = sub_18264EACC();
      nw_ws_options_add_additional_header(v3, v5, (const char *)(v6 + 32));
      swift_release();
      swift_release();
      v4 += 32LL;
      --v2;
    }

    while (v2);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_181BBE8BC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
    uint64_t v4 = swift_bridgeObjectRetain() + 40;
    do
    {
      uint64_t v5 = sub_18264EACC();
      nw_ws_options_add_subprotocol(v3, (const char *)(v5 + 32));
      swift_release();
      v4 += 16LL;
      --v2;
    }

    while (v2);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void sub_181BBE940(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(nw_protocol_options **)(v3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  v10[4] = sub_181BBF9D8;
  v10[5] = v8;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 1107296256LL;
  v10[2] = sub_181BBEFA8;
  v10[3] = &block_descriptor;
  os_log_type_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  nw_ws_options_set_client_request_handler(v7, a1, v9);
  _Block_release(v9);
}

uint64_t sub_181BBEA08(nw_ws_request *a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4 = MEMORY[0x18961AFE8];
  uint64_t v32 = MEMORY[0x18961AFE8];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &v32;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_181BC07F0;
  *(void *)(v6 + 24) = v5;
  int v30 = sub_181BC0808;
  uint64_t v31 = v6;
  uint64_t v7 = MEMORY[0x1895F87A8];
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v27 = 1107296256LL;
  os_log_type_t v28 = sub_181BCEE7C;
  int v29 = &block_descriptor_25;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_ws_request_enumerate_subprotocols(a1, v8);
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v25 = v4;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &v25;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181BC0820;
  *(void *)(v11 + 24) = v10;
  int v30 = sub_181BC097C;
  uint64_t v31 = v11;
  uint64_t aBlock = v7;
  uint64_t v27 = 1107296256LL;
  os_log_type_t v28 = sub_181BBEE14;
  int v29 = &block_descriptor_35;
  os_log_type_t v12 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_ws_request_enumerate_additional_headers(a1, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v14 = v32;
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_181BBEE40(v15);
  swift_bridgeObjectRelease();
  a2(&aBlock, v14, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int16 v17 = v29;
  if ((_BYTE)aBlock) {
    nw_ws_response_status_t v18 = nw_ws_response_status_reject;
  }
  else {
    nw_ws_response_status_t v18 = nw_ws_response_status_accept;
  }
  if (v28) {
    uint64_t v19 = (const char *)(sub_18264EACC() + 32);
  }
  else {
    uint64_t v19 = 0LL;
  }
  os_log_type_t v20 = nw_ws_response_create(v18, v19);
  swift_unknownObjectRelease();
  if (v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = v17[2];
    if (v21)
    {
      uint32_t v22 = (char *)(v17 + 7);
      do
      {
        char v23 = (const char *)(sub_18264EACC() + 32);
        uint64_t v24 = sub_18264EACC();
        nw_ws_response_add_additional_header(v20, v23, (const char *)(v24 + 32));
        swift_release();
        swift_release();
        v22 += 32;
        --v21;
      }

      while (v21);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (uint64_t)v20;
}

uint64_t sub_181BBED60(uint64_t a1, void **a2)
{
  uint64_t v3 = sub_18264EB80();
  uint64_t v5 = v4;
  uint64_t v6 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = sub_181BC4728(0LL, v6[2] + 1LL, 1, v6);
    *a2 = v6;
  }

  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = sub_181BC4728((void *)(v8 > 1), v9 + 1, 1, v6);
    *a2 = v6;
  }

  v6[2] = v9 + 1;
  uint64_t v10 = &v6[2 * v9];
  v10[4] = v3;
  v10[5] = v5;
  return 1LL;
}

uint64_t sub_181BBEE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3) & 1;
}

uint64_t sub_181BBEE40(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x18961AFE8];
    sub_181C9D070(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B868);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B870);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_181C9D070(0, *(void *)(v2 + 16) + 1LL, 1);
        uint64_t v2 = v13;
      }

      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_181C9D070(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v13;
      }

      v4 += 32LL;
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = (void *)(v2 + 32 * v6);
      v7[4] = v9;
      v7[5] = v10;
      v7[6] = v11;
      v7[7] = v12;
      --v1;
    }

    while (v1);
  }

  return v2;
}

id sub_181BBEFA8(uint64_t a1)
{
  int64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = (void *)v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v3;
}

uint64_t NWProtocolWebSocket.Options.deinit()
{
  return v0;
}

uint64_t NWProtocolWebSocket.Options.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_181BBF03C(nw_protocol_metadata *a1)
{
  return nw_protocol_metadata_is_ws(a1);
}

void NWProtocolWebSocket.Metadata.opcode.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t NWProtocolWebSocket.Metadata.__allocating_init(opcode:)(char *a1)
{
  uint64_t v2 = swift_allocObject();
  NWProtocolWebSocket.Metadata.init(opcode:)(a1);
  return v2;
}

uint64_t NWProtocolWebSocket.Metadata.init(opcode:)(char *a1)
{
  uint64_t v2 = *a1;
  *(_BYTE *)(v1 + 24) = v2;
  *(_WORD *)(v1 + 40) = 4;
  *(_BYTE *)(v1 + 42) = 0;
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 16) = nw_ws_create_metadata((nw_ws_opcode_t)dword_18265BDD4[v2]);
  return v1;
}

uint64_t sub_181BBF0D8(nw_protocol_metadata *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = sub_181BC0664(a1, v2);
  swift_release();
  return v3;
}

uint64_t sub_181BBF124@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  char v5 = *(_BYTE *)(v3 + 42);
  *(_WORD *)a2 = *(_WORD *)(v3 + 40);
  *(_BYTE *)(a2 + 2) = v5;
  return result;
}

void sub_181BBF170(uint64_t a1)
{
  char v1 = *(_BYTE *)(a1 + 2);
  unsigned __int16 v2 = *(_WORD *)a1;
  char v3 = v1;
  sub_181BBF1F4(&v2);
}

uint64_t sub_181BBF1AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  char v4 = *(_BYTE *)(v1 + 42);
  *(_WORD *)a1 = *(_WORD *)(v1 + 40);
  *(_BYTE *)(a1 + 2) = v4;
  return result;
}

void sub_181BBF1F4(unsigned __int16 *a1)
{
  nw_ws_close_code_t v2 = *a1;
  int v3 = *((unsigned __int8 *)a1 + 2);
  swift_beginAccess();
  *(_WORD *)(v1 + 40) = v2;
  *(_BYTE *)(v1 + 42) = v3;
  if (v3) {
    nw_ws_close_code_t v4 = v2;
  }
  else {
    nw_ws_close_code_t v4 = dword_18265BDEC[(char)v2];
  }
  nw_ws_metadata_set_close_code(*(nw_protocol_metadata_t *)(v1 + 16), v4);
}

void (*sub_181BBF26C(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_181BBF2AC;
}

void sub_181BBF2AC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (!*(_BYTE *)(v4 + 42)) {
      __asm { BR              X10 }
    }

    nw_ws_metadata_set_close_code( *(nw_protocol_metadata_t *)(v4 + 16),  (nw_ws_close_code_t)*(unsigned __int16 *)(v4 + 40));
  }

void sub_181BBF320()
{
}

void sub_181BBF328()
{
}

void sub_181BBF330()
{
}

void sub_181BBF338()
{
}

void sub_181BBF340()
{
}

void sub_181BBF348()
{
}

void sub_181BBF350()
{
}

void sub_181BBF358()
{
}

void sub_181BBF360()
{
}

void sub_181BBF368()
{
}

void sub_181BBF370()
{
}

void sub_181BBF378(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(nw_protocol_metadata **)(v3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  v10[4] = sub_181BBF9F8;
  v10[5] = v8;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 1107296256LL;
  v10[2] = sub_181BBF440;
  v10[3] = &block_descriptor_6;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  nw_ws_metadata_set_pong_handler(v7, a1, v9);
  _Block_release(v9);
}

uint64_t sub_181BBF440(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181BBF488()
{
  if (!*(void *)(v0 + 32)) {
    return 0LL;
  }
  uint64_t v1 = (nw_ws_response *)swift_unknownObjectRetain();
  if (!nw_ws_response_get_selected_subprotocol(v1))
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v2 = sub_18264EB80();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_181BBF4F0()
{
  uint64_t v1 = *(nw_ws_response **)(v0 + 32);
  if (!v1) {
    return (uint64_t)v1;
  }
  uint64_t v8 = (nw_ws_response *)MEMORY[0x18961AFE8];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_181BC0944;
  *(void *)(v3 + 24) = v2;
  void aBlock[4] = sub_181BBFA50;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  _OWORD aBlock[2] = sub_181BBEE14;
  aBlock[3] = &block_descriptor_15;
  uint64_t v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_ws_response_enumerate_additional_headers(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v1 = v8;
    swift_release();
    return (uint64_t)v1;
  }

  __break(1u);
  return result;
}

uint64_t sub_181BBF638(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = sub_18264EB80();
  uint64_t v6 = v5;
  uint64_t v7 = sub_18264EB80();
  uint64_t v9 = v8;
  uint64_t v10 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v10 = sub_181BC4834(0LL, v10[2] + 1LL, 1, v10);
    *a3 = v10;
  }

  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t v10 = sub_181BC4834((void *)(v12 > 1), v13 + 1, 1, v10);
    *a3 = v10;
  }

  v10[2] = v13 + 1;
  uint64_t v14 = &v10[4 * v13];
  v14[4] = v4;
  v14[5] = v6;
  v14[6] = v7;
  v14[7] = v9;
  return 1LL;
}

uint64_t sub_181BBF70C()
{
  return swift_unknownObjectRelease();
}

uint64_t NWProtocolWebSocket.Metadata.deinit()
{
  return v0;
}

uint64_t NWProtocolWebSocket.Metadata.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL static NWProtocolWebSocket.Response.Status.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWProtocolWebSocket.Response.Status.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWProtocolWebSocket.Response.Status.hashValue.getter()
{
  return sub_18264F684();
}

BOOL sub_181BBF7E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s7Network14NWProtocolQUICC7OptionsC9DirectionO9hashValueSivg_0()
{
  return sub_18264F684();
}

uint64_t sub_181BBF844()
{
  return sub_18264F654();
}

uint64_t sub_181BBF86C()
{
  return sub_18264F684();
}

void NWProtocolWebSocket.Response.status.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t NWProtocolWebSocket.Response.subprotocol.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolWebSocket.Response.additionalHeaders.getter()
{
  return swift_bridgeObjectRetain();
}

_BYTE *NWProtocolWebSocket.Response.init(status:subprotocol:additionalHeaders:)@<X0>( _BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = *result;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  return result;
}

uint64_t NWProtocolWebSocket.deinit()
{
  return v0;
}

uint64_t NWProtocolWebSocket.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_181BBF91C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void sub_181BBF930(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_181BBF93C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL _s7Network19NWProtocolWebSocketC9CloseCodeO2eeoiySbAE_AEtFZ_0( unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 2);
  if (*((_BYTE *)a1 + 2))
  {
    BOOL v6 = v4 == 1 && v2 == v3;
    BOOL v8 = v4 == 2 && v2 == v3;
    if (*((_BYTE *)a1 + 2) == 1) {
      return v6;
    }
    else {
      return v8;
    }
  }

  else
  {
    return !*((_BYTE *)a2 + 2) && word_18265BE1C[(char)v2] == word_18265BE1C[(char)v3];
  }

uint64_t sub_181BBF9B4()
{
  return swift_deallocObject();
}

uint64_t sub_181BBF9D8(nw_ws_request *a1)
{
  return sub_181BBEA08(a1, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_181BBF9F8()
{
  uint64_t v1 = *(uint64_t (**)(_BYTE *))(v0 + 16);
  uint64_t v2 = (nw_error *)swift_unknownObjectRetain();
  sub_181BF9C34(v2, (uint64_t)v4);
  return v1(v4);
}

uint64_t sub_181BBFA30()
{
  return swift_deallocObject();
}

uint64_t sub_181BBFA40()
{
  return swift_deallocObject();
}

uint64_t sub_181BBFA50()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

unint64_t sub_181BBFA78()
{
  unint64_t result = qword_18C58B400;
  if (!qword_18C58B400)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolWebSocket.Version,  &type metadata for NWProtocolWebSocket.Version);
    atomic_store(result, (unint64_t *)&qword_18C58B400);
  }

  return result;
}

unint64_t sub_181BBFAC0()
{
  unint64_t result = qword_18C58B408;
  if (!qword_18C58B408)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolWebSocket.Opcode,  &type metadata for NWProtocolWebSocket.Opcode);
    atomic_store(result, (unint64_t *)&qword_18C58B408);
  }

  return result;
}

unint64_t sub_181BBFB08()
{
  unint64_t result = qword_18C58B410;
  if (!qword_18C58B410)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolWebSocket.CloseCode.Defined,  &type metadata for NWProtocolWebSocket.CloseCode.Defined);
    atomic_store(result, (unint64_t *)&qword_18C58B410);
  }

  return result;
}

unint64_t sub_181BBFB50()
{
  unint64_t result = qword_18C58B418;
  if (!qword_18C58B418)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolWebSocket.Response.Status,  &type metadata for NWProtocolWebSocket.Response.Status);
    atomic_store(result, (unint64_t *)&qword_18C58B418);
  }

  return result;
}

uint64_t type metadata accessor for NWProtocolWebSocket()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Version(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Version(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_181BBFC4C + 4 * byte_18265B86C[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_181BBFC6C + 4 * byte_18265B871[v4]))();
  }
}

_BYTE *sub_181BBFC4C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_181BBFC6C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_181BBFC74(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_181BBFC7C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_181BBFC84(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_181BBFC8C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_181BBFC98()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Version()
{
  return &type metadata for NWProtocolWebSocket.Version;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Opcode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Opcode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_181BBFD98 + 4 * byte_18265B87B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181BBFDCC + 4 * byte_18265B876[v4]))();
}

uint64_t sub_181BBFDCC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BBFDD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BBFDDCLL);
  }
  return result;
}

uint64_t sub_181BBFDE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BBFDF0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_181BBFDF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BBFDFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BBFE08(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_181BBFE10(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Opcode()
{
  return &type metadata for NWProtocolWebSocket.Opcode;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.CloseCode(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 2) {
    int v5 = -1;
  }
  else {
    int v5 = v4 ^ 0xFF;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.CloseCode( uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554178) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFD) {
    int v3 = 0;
  }
  if (a2 > 0xFD)
  {
    *(_WORD *)unint64_t result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + 2) = -(char)a2;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

uint64_t sub_181BBFF3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_181BBFF44(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.CloseCode()
{
  return &type metadata for NWProtocolWebSocket.CloseCode;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.CloseCode.Defined( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.CloseCode.Defined( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_181BC0038 + 4 * byte_18265B885[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_181BC006C + 4 * byte_18265B880[v4]))();
}

uint64_t sub_181BC006C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BC0074(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BC007CLL);
  }
  return result;
}

uint64_t sub_181BC0088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BC0090LL);
  }
  *(_BYTE *)unint64_t result = a2 + 11;
  return result;
}

uint64_t sub_181BC0094(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BC009C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.CloseCode.Defined()
{
  return &type metadata for NWProtocolWebSocket.CloseCode.Defined;
}

uint64_t type metadata accessor for NWProtocolWebSocket.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolWebSocket.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.autoReplyPing.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.autoReplyPing.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.autoReplyPing.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.maximumMessageSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.maximumMessageSize.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.maximumMessageSize.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.skipHandshake.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.skipHandshake.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.skipHandshake.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.setAdditionalHeaders(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.setSubprotocols(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Options.setClientRequestHandler(_:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t type metadata accessor for NWProtocolWebSocket.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolWebSocket.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.__allocating_init(opcode:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.closeCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.closeCode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.closeCode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.setPongHandler(_:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.selectedSubprotocol.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of NWProtocolWebSocket.Metadata.additionalServerHeaders.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t initializeBufferWithCopyOfBuffer for NWProtocolWebSocket.Response(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for NWProtocolWebSocket.Response()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWProtocolWebSocket.Response(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWProtocolWebSocket.Response(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for NWProtocolWebSocket.Response(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Response(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Response( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Response()
{
  return &type metadata for NWProtocolWebSocket.Response;
}

uint64_t getEnumTagSinglePayload for NWProtocolWebSocket.Response.Status( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for NWProtocolWebSocket.Response.Status( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181BC04F4 + 4 * byte_18265B88F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181BC0528 + 4 * byte_18265B88A[v4]))();
}

uint64_t sub_181BC0528(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BC0530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BC0538LL);
  }
  return result;
}

uint64_t sub_181BC0544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BC054CLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_181BC0550(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BC0558(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_181BC0564(_BYTE *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolWebSocket.Response.Status()
{
  return &type metadata for NWProtocolWebSocket.Response.Status;
}

void type metadata accessor for nw_report_resolution_protocol_t(uint64_t a1)
{
}

uint64_t __swift_memcpy6_1(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EthernetAddress(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for EthernetAddress(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 6) = v3;
  return result;
}

void type metadata accessor for ether_addr(uint64_t a1)
{
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for in6_addr(uint64_t a1)
{
}

void type metadata accessor for in_addr(uint64_t a1)
{
}

void type metadata accessor for CFURLResponse(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_181BC0664(nw_protocol_metadata *a1, uint64_t a2)
{
  if (nw_ws_metadata_get_opcode(a1) == nw_ws_opcode_invalid)
  {
    char v5 = 0;
  }

  else
  {
    nw_ws_opcode_t opcode = nw_ws_metadata_get_opcode(a1);
    if (opcode > nw_ws_opcode_pong || ((0x707u >> opcode) & 1) == 0)
    {
      __break(1u);
      goto LABEL_11;
    }

    char v5 = byte_18265BE34[(char)opcode];
  }

  *(_BYTE *)(a2 + 24) = v5;
  uint64_t close_code = nw_ws_metadata_get_close_code(a1);
  if (close_code < 0x10000)
  {
    NWProtocolWebSocket.CloseCode.init(rawValue:)(close_code, (uint64_t)&v9);
    char v7 = v10;
    *(_WORD *)(a2 + 40) = v9;
    *(_BYTE *)(a2 + 42) = v7;
    *(void *)(a2 + 32) = nw_ws_metadata_copy_server_response(a1);
    *(void *)(a2 + 16) = a1;
    return a2;
  }

uint64_t sub_181BC07E0()
{
  return swift_deallocObject();
}

uint64_t sub_181BC07F0(uint64_t a1)
{
  return sub_181BBED60(a1, *(void ***)(v1 + 16));
}

uint64_t sub_181BC07F8()
{
  return swift_deallocObject();
}

uint64_t sub_181BC0808(uint64_t a1)
{
  return sub_181BCEE58(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_181BC0810()
{
  return swift_deallocObject();
}

uint64_t sub_181BC0820(uint64_t a1, uint64_t a2)
{
  return sub_181BBF638(a1, a2, *(void ***)(v2 + 16)) & 1;
}

uint64_t sub_181BC083C()
{
  return swift_deallocObject();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E1206C]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void type metadata accessor for nw_interface_type_t(uint64_t a1)
{
}

uint64_t sub_181BC08A0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_181BC08C0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for in6_addr.__Unnamed_union___u6_addr(uint64_t a1)
{
}

void sub_181BC08FC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    ForeignTypeMetadispatch_data_t data = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t BrowseResult.Change.description.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  char v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v3);
  int v8 = (char *)&v18 - v7;
  MEMORY[0x1895F8858](v6);
  char v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v14 = &v10[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
      v15(v8, v10, v1);
      v15(v5, v14, v1);
      uint64_t v18 = 0LL;
      unint64_t v19 = 0xE000000000000000LL;
      sub_18264F168();
      sub_18264EB74();
      sub_18264F4D4();
      sub_18264EB74();
      sub_18264F4D4();
      sub_18264EB74();
      uint64_t v13 = v18;
      uint64_t v16 = *(void (**)(char *, uint64_t))(v2 + 8);
      v16(v5, v1);
      v16(v8, v1);
      return v13;
    }

    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v10, v1);
    uint64_t v18 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
    sub_18264EB74();
    sub_18264F4D4();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v10, v1);
    uint64_t v18 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
    sub_18264EB74();
    sub_18264F4D4();
    sub_18264EB74();
  }

  uint64_t v13 = v18;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  return v13;
}

uint64_t BrowseResult.endpoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BrowseResult.changes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BrowseResult.init(endpoints:changes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t BrowseResult.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for BrowseResult.Change(0LL, *(void *)(a1 + 16), a3, a4);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = *(void *)(v4 + 8);
  uint64_t v11 = swift_bridgeObjectRetain();
  if (!MEMORY[0x186E0E8E0](v11, v5))
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)MEMORY[0x18961AFE8];
LABEL_16:
    uint64_t v27 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC68);
    sub_181BC5D4C();
    uint64_t v23 = sub_18264E9F4();
    swift_bridgeObjectRelease();
    return v23;
  }

  uint64_t v25 = v7;
  uint64_t v12 = 0LL;
  uint64_t v13 = (void *)MEMORY[0x18961AFE8];
  int v26 = v9;
  while (1)
  {
    char v14 = sub_18264ED24();
    sub_18264ECE8();
    if ((v14 & 1) == 0) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v6 + 16))( v9,  v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
             + *(void *)(v6 + 72) * v12,
               v5);
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v17 = BrowseResult.Change.description.getter(v5);
    uint64_t v19 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_181BC4728(0LL, v13[2] + 1LL, 1, v13);
    }
    unint64_t v21 = v13[2];
    unint64_t v20 = v13[3];
    if (v21 >= v20 >> 1) {
      uint64_t v13 = sub_181BC4728((void *)(v20 > 1), v21 + 1, 1, v13);
    }
    v13[2] = v21 + 1;
    uint32_t v22 = &v13[2 * v21];
    v22[4] = v17;
    v22[5] = v19;
    uint64_t v9 = v26;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v5);
    ++v12;
    if (v16 == MEMORY[0x186E0E8E0](v10, v5))
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }

  uint64_t result = sub_18264F1A4();
  if (v25 != 8) {
    goto LABEL_18;
  }
  uint64_t v27 = (void *)result;
  (*(void (**)(char *, void **, uint64_t))(v6 + 16))(v9, &v27, v5);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v16 = v12 + 1;
  if (!__OFADD__(v12, 1LL)) {
    goto LABEL_5;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t BrowseResult.makeIterator()@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0LL;
  return swift_bridgeObjectRetain();
}

uint64_t BrowseResult.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v4 == MEMORY[0x186E0E8E0](*v2, v6)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( a2,  1LL,  1LL,  v6);
  }
  char v8 = sub_18264ED24();
  sub_18264ECE8();
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))( a2,  v5 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
             + *(void *)(v9 + 72) * v4,
               v6);
    uint64_t v10 = v4 + 1;
    if (!__OFADD__(v4, 1LL))
    {
LABEL_5:
      v2[1] = v10;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0LL, 1LL, v6);
    }

    goto LABEL_9;
  }

  uint64_t result = sub_18264F1A4();
  uint64_t v9 = *(void *)(v6 - 8);
  if (*(void *)(v9 + 64) == 8LL)
  {
    uint64_t v11 = result;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 16))(a2, &v11, v6);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v10 = v4 + 1;
    if (!__OFADD__(v4, 1LL)) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t BrowseResult.startIndex.getter()
{
  return 0LL;
}

void BrowseResult.endIndex.getter()
{
}

Swift::Int __swiftcall BrowseResult.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t BrowseResult.subscript.getter()
{
  return sub_18264ED60();
}

uint64_t sub_181BC1028@<X0>(void *a1@<X8>)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181BC1050(uint64_t a1)
{
  return sub_18264EF94();
}

uint64_t sub_181BC1084()
{
  return 2LL;
}

uint64_t sub_181BC108C(uint64_t a1)
{
  uint64_t v1 = sub_181BC6090();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_181BC10EC()
{
  return sub_18264EC4C();
}

void sub_181BC110C(void *a1@<X8>)
{
  *a1 = 0LL;
}

void sub_181BC1114()
{
}

uint64_t sub_181BC1128(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void (*sub_181BC1138(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_181BC11C0(v6, *a2, a3);
  return sub_181BC1194;
}

void sub_181BC1194(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_181BC11C0(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  sub_18264ED60();
  return sub_181BC122C;
}

void sub_181BC122C(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8LL))(v1, *a1);
  free(v1);
}

uint64_t sub_181BC1260(uint64_t a1)
{
  return sub_18264EF70();
}

void sub_181BC12B4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_181BC12C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BC5EE4( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189618A18],  MEMORY[0x189617B40]);
}

uint64_t sub_181BC12E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BC5EE4( a1,  a2,  a3,  a4,  MEMORY[0x189617BE0],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B50]);
}

void *sub_181BC1310@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *sub_181BC1328(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t sub_181BC1340()
{
  return sub_18264EF64();
}

uint64_t sub_181BC1350()
{
  return sub_18264EF7C();
}

uint64_t sub_181BC135C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BC1370()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BC1388()
{
  return sub_18264EF58();
}

uint64_t sub_181BC13D8(void *a1)
{
  uint64_t result = sub_18264EF58();
  *a1 = v3;
  return result;
}

uint64_t sub_181BC1438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18264EF64();
}

uint64_t sub_181BC149C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18264EF4C();
}

uint64_t sub_181BC1500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18264EF7C();
}

uint64_t _s7Network8Browser1C8provider5usingACyxGx_AA12NWParametersCtcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v4 + 80LL) - 8LL) + 32LL))( v4 + *(void *)(*(void *)v4 + 96LL),  a1);
  *(void *)(v4 + *(void *)(*(void *)v4 + 104LL)) = a2;
  return v4;
}

uint64_t _s7Network8Browser1C8provider5usingACyxGx_AA12NWParametersCtcfc_0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + *(void *)(*(void *)v2 + 104LL)) = a2;
  return v2;
}

uint64_t Browser1.__allocating_init<>(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_allocObject();
  uint64_t v8 = sub_181BC621C(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8LL) + 8LL))(a1);
  return v8;
}

uint64_t Browser1.init<>(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = sub_181BC621C(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 80) - 8LL) + 8LL))(a1);
  return v6;
}

uint64_t Browser1.makeAsyncIterator()()
{
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v3, v4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v5 = sub_18264EEBC();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v14[-v7];
  uint64_t v9 = sub_18264EF10();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = &v14[-v11];
  (*(void (**)(_BYTE *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x18961BE60], v5);
  uint64_t v15 = v0;
  uint64_t v16 = v1;
  sub_18264EF1C();
  sub_18264EE20();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_181BC1840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v33 = a1;
  uint64_t v4 = *(void *)(*(void *)a2 + 80LL);
  uint64_t v5 = *(void *)(*(void *)a2 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v7, v8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v9 = sub_18264EEE0();
  uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64LL);
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v10;
  MEMORY[0x1895F8858](v9);
  os_log_type_t v28 = (char *)v25 - v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 16))(&v34, v4, v5);
  uint64_t v31 = a2;
  uint64_t v12 = *(void *)(a2 + *(void *)(*(void *)a2 + 104LL));
  type metadata accessor for NWBrowser();
  swift_allocObject();
  swift_retain();
  uint64_t v13 = NWBrowser.init(for:using:)((uint64_t)&v34, v12);
  char v14 = (void *)swift_allocObject();
  v14[2] = v4;
  v14[3] = v5;
  uint64_t v27 = v4;
  v14[4] = v13;
  swift_retain();
  uint64_t v15 = v33;
  sub_18264EEB0();
  uint64_t v17 = v28;
  uint64_t v16 = v29;
  int v26 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v26(v28, v15, v9);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v30;
  v25[1] = v18 | 7;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v4;
  *(void *)(v20 + 24) = v5;
  unint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  v21(v20 + ((v18 + 32) & ~v18), v17, v9);
  sub_181BC904C((uint64_t)sub_181BC8FA8);
  NWBrowser.stateUpdateHandler.setter((uint64_t)sub_181BC8FA8, v20);
  swift_release();
  v26(v17, v33, v9);
  uint64_t v22 = (v18 + 40) & ~v18;
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v27;
  v23[3] = v5;
  v23[4] = v31;
  v21((uint64_t)v23 + v22, v17, v9);
  *(void *)((char *)v23 + ((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL)) = v32;
  swift_retain();
  sub_181BC904C((uint64_t)sub_181BC9124);
  NWBrowser.browseResultsChangedHandler.setter((uint64_t)sub_181BC9124, (uint64_t)v23);
  swift_release();
  sub_181BC91D0();
  uint64_t v24 = (void *)sub_18264F048();
  NWBrowser.start(queue:)(v24);
  swift_release();
}

void sub_181BC1B1C(uint64_t a1, uint64_t a2)
{
  if (nw_utilities_minos_atleast())
  {
    uint64_t v3 = *(os_unfair_lock_s **)(a2 + 24);
    uint64_t v4 = (uint64_t *)&v3[4];
    uint64_t v5 = v3 + 20;
    os_unfair_lock_lock(v3 + 20);
    sub_181BD24E8(v4);
    os_unfair_lock_unlock(v5);
  }

  nw_browser_cancel(*(nw_browser_t *)(a2 + 16));
}

unsigned int *sub_181BC1B84(unsigned int *result)
{
  uint64_t v1 = *((char *)result + 4);
  int64_t v2 = *result | (unint64_t)(v1 << 32);
  int v3 = v1 >> 6;
  if (!v3)
  {
    sub_181BBE220();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = v2;
    *(_BYTE *)(v4 + 4) = BYTE4(v2);
LABEL_6:
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v6, v7);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
    sub_18264EEE0();
    return (unsigned int *)sub_18264EED4();
  }

  return result;
}

uint64_t sub_181BC1C80(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v91 = a4;
  uint64_t v112 = a2;
  uint64_t v6 = *(void *)(*(void *)a3 + 88LL);
  uint64_t v123 = *(void *)(*(void *)a3 + 80LL);
  uint64_t v124 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for BrowseResult.Change(0LL, AssociatedTypeWitness, v8, v9);
  MEMORY[0x1895F8858](v10);
  uint64_t v97 = (char *)&v85 - v11;
  uint64_t v14 = type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v12, v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v90 = v14;
  uint64_t v89 = v15;
  uint64_t v87 = sub_18264EEA4();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x1895F8858](v87);
  __int16 v85 = (char *)&v85 - v16;
  uint64_t v107 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v106 = *(void *)(v107 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v107);
  BOOL v102 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v105 = (uint64_t)&v85 - v19;
  uint64_t v20 = sub_18264F09C();
  uint64_t v114 = *(void *)(v20 - 8);
  uint64_t v115 = v20;
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  id v94 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  __int16 v95 = (char *)&v85 - v24;
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  __int16 v113 = (char *)&v85 - v26;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  nw_endpoint_t v104 = (char *)&v85 - v28;
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v31 = (char *)&v85 - v30;
  uint64_t v121 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v32 = MEMORY[0x1895F8858](v29);
  os_log_type_t v88 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = MEMORY[0x1895F8858](v32);
  uint64_t v96 = (char *)&v85 - v35;
  uint64_t v36 = MEMORY[0x1895F8858](v34);
  __int16 v93 = (char *)&v85 - v37;
  uint64_t v38 = MEMORY[0x1895F8858](v36);
  nw_endpoint_t v92 = (char *)&v85 - v39;
  uint64_t v40 = MEMORY[0x1895F8858](v38);
  __int16 v111 = (char *)&v85 - v41;
  MEMORY[0x1895F8858](v40);
  char v110 = (char *)&v85 - v42;
  uint64_t v43 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = MEMORY[0x1895F8858](v43);
  __int16 v103 = (char *)&v85 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = MEMORY[0x1895F8858](v45);
  char v99 = (char *)&v85 - v48;
  uint64_t v49 = MEMORY[0x1895F8858](v47);
  __int16 v101 = (char *)&v85 - v50;
  uint64_t v51 = MEMORY[0x1895F8858](v49);
  id v100 = (char *)&v85 - v52;
  uint64_t v53 = MEMORY[0x1895F8858](v51);
  os_log_type_t v55 = (char *)&v85 - v54;
  MEMORY[0x1895F8858](v53);
  uint64_t v118 = (uint64_t)&v85 - v56;
  uint64_t v120 = AssociatedTypeWitness;
  uint64_t v128 = sub_18264ED0C();
  uint64_t v98 = v10;
  uint64_t v127 = sub_18264ED0C();
  uint64_t v57 = *(void *)(a1 + 56);
  int64_t v116 = a1 + 56;
  uint64_t v58 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v59 = -1LL;
  if (v58 < 64) {
    uint64_t v59 = ~(-1LL << v58);
  }
  unint64_t v60 = v59 & v57;
  uint64_t v122 = a3 + *(void *)(*(void *)a3 + 96LL);
  int64_t v117 = (unint64_t)(v58 + 63) >> 6;
  int64_t v119 = a1;
  swift_bridgeObjectRetain();
  int64_t v61 = 0LL;
  uint64_t v109 = v44;
  uint64_t v108 = v55;
  uint64_t v62 = v120;
  uint64_t v63 = v121;
  if (v60) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v61++, 1LL))
  {
    __break(1u);
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  if (v61 < v117)
  {
    unint64_t v69 = *(void *)(v116 + 8 * v61);
    if (v69)
    {
LABEL_17:
      unint64_t v60 = (v69 - 1) & v69;
      for (unint64_t i = __clz(__rbit64(v69)) + (v61 << 6); ; unint64_t i = v66 | (v61 << 6))
      {
        uint64_t v71 = v118;
        sub_181BC9248( *(void *)(v119 + 48) + *(void *)(v44 + 72) * i,  v118,  type metadata accessor for NWBrowser.Result);
        sub_181BC928C(v71, (uint64_t)v55, type metadata accessor for NWBrowser.Result);
        (*(void (**)(char *, uint64_t))(v124 + 24))(v55, v123);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v31, 1LL, v62) == 1)
        {
          sub_181BC920C((uint64_t)v55, type metadata accessor for NWBrowser.Result);
          (*(void (**)(char *, uint64_t))(v114 + 8))(v31, v115);
          if (!v60) {
            goto LABEL_7;
          }
        }

        else
        {
          BOOL v64 = v110;
          (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v110, v31, v62);
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v111, v64, v62);
          sub_18264ED54();
          sub_18264ED3C();
          os_log_type_t v65 = v64;
          uint64_t v44 = v109;
          os_log_type_t v55 = v108;
          (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
          sub_181BC920C((uint64_t)v55, type metadata accessor for NWBrowser.Result);
          if (!v60) {
            goto LABEL_7;
          }
        }

uint64_t Browser1.deinit()
{
  return v0;
}

uint64_t Browser1.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181BC2B54()
{
  return swift_release();
}

uint64_t AsyncSequence<>.firstFoundEndpoint(where:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[6] = a5;
  v7[7] = v6;
  v7[4] = a3;
  v7[5] = a4;
  v7[2] = a1;
  v7[3] = a2;
  v7[8] = *(void *)(*(void *)(*(void *)(*(void *)(a6 + 8) + 8LL) + 8LL) + 8LL);
  swift_getAssociatedTypeWitness();
  v7[9] = swift_getAssociatedTypeWitness();
  sub_18264F09C();
  v7[10] = swift_task_alloc();
  uint64_t v9 = swift_checkMetadataState();
  v7[11] = v9;
  v7[12] = *(void *)(v9 - 8);
  v7[13] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[14] = AssociatedTypeWitness;
  v7[15] = *(void *)(AssociatedTypeWitness - 8);
  v7[16] = swift_task_alloc();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v7[17] = v11;
  v7[18] = *(void *)(v11 - 8);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  sub_18264F09C();
  v7[21] = swift_task_alloc();
  v7[22] = *(void *)(a4 - 8);
  v7[23] = swift_task_alloc();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v7[24] = v12;
  v7[25] = *(void *)(v12 - 8);
  v7[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BC2D94()
{
  v0[27] = swift_getAssociatedConformanceWitness();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[28] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_181BC2E58;
  return sub_18264EDA8();
}

uint64_t sub_181BC2E58()
{
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BC2EBC()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2) != 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[13], v1, v2);
    sub_18264EC10();
    while (1)
    {
      uint64_t v6 = v0[10];
      uint64_t v7 = v0[9];
      swift_getAssociatedConformanceWitness();
      sub_18264F0C0();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
      {
        (*(void (**)(void, void))(v0[15] + 8LL))(v0[16], v0[14]);
        v0[27] = swift_getAssociatedConformanceWitness();
        uint64_t v11 = (void *)swift_task_alloc();
        v0[28] = v11;
        void *v11 = v0;
        v11[1] = sub_181BC2E58;
        return sub_18264EDA8();
      }

      uint64_t v9 = (uint64_t (*)(uint64_t))v0[3];
      uint64_t v10 = v0[2];
      (*(void (**)(uint64_t, void, void))(v8 + 32))(v10, v0[10], v0[9]);
      if ((v9(v10) & 1) != 0) {
        break;
      }
      (*(void (**)(void, void))(v8 + 8))(v0[2], v0[9]);
    }

    uint64_t v14 = v0[25];
    uint64_t v13 = v0[26];
    uint64_t v15 = v0[24];
    (*(void (**)(void, void))(v0[15] + 8LL))(v0[16], v0[14]);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }

  uint64_t v4 = v0[29];
  (*(void (**)(void, void))(v0[25] + 8LL))(v0[26], v0[24]);
  sub_18264EE74();
  if (v4)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }

  return sub_18264F324();
}

uint64_t sub_181BC31F0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 144) + 32LL);
  v1(*(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = sub_18264F4C8();
  uint64_t v3 = *(void *)(v0 + 152);
  if (v2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8LL))(*(void *)(v0 + 152), *(void *)(v0 + 136));
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 136);
    swift_allocError();
    v1(v5, v3, v4);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 200) + 8LL))(*(void *)(v0 + 208), *(void *)(v0 + 192));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncSequence<>.mapEndpoints<A>(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = a1;
  v15[7] = a2;
  type metadata accessor for BrowseResult(0LL, a4, v16, v17);
  swift_retain();
  sub_18264EE8C();
  return swift_release();
}

uint64_t sub_181BC3434( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a6;
  v8[10] = a8;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  v8[11] = type metadata accessor for BrowseResult.Change(0LL, a6, a3, a4);
  v8[12] = swift_task_alloc();
  v8[13] = swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for BrowseResult.Change(0LL, AssociatedTypeWitness, v11, v12);
  v8[14] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[15] = v14;
  v8[16] = *(void *)(v14 + 64);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  v8[19] = swift_task_alloc();
  v8[20] = *(void *)(a6 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  uint64_t v15 = swift_checkMetadataState();
  v8[23] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v8[24] = v16;
  v8[25] = *(void *)(v16 + 64);
  v8[26] = swift_task_alloc();
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BC35D0()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[10];
  uint64_t v82 = sub_18264ED0C();
  uint64_t v83 = sub_18264ED0C();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24);
  uint64_t v72 = swift_checkMetadataState();
  uint64_t v4 = v3(v72, v2);
  if (MEMORY[0x186E0E8E0](v4, v1))
  {
    uint64_t v5 = 0LL;
    int64_t v70 = v0 + 2;
    uint64_t v71 = v0[25];
    uint64_t v80 = v0[24];
    uint64_t v74 = v0[20];
    do
    {
      char v6 = sub_18264ED24();
      sub_18264ECE8();
      if ((v6 & 1) != 0)
      {
        uint64_t v7 = v0;
        (*(void (**)(void, unint64_t, void))(v80 + 16))( v0[28],  v4 + ((*(unsigned __int8 *)(v80 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))
        + *(void *)(v80 + 72) * v5,
          v0[23]);
        uint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t result = sub_18264F1A4();
        if (v71 != 8)
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }

        uint64_t v18 = result;
        uint64_t v19 = v0[28];
        uint64_t v20 = v0[23];
        uint64_t v7 = v0;
        v0[2] = v18;
        (*(void (**)(uint64_t, void *, uint64_t))(v80 + 16))(v19, v70, v20);
        swift_unknownObjectRelease();
        uint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1LL))
        {
LABEL_10:
          __break(1u);
          break;
        }
      }

      uint64_t v0 = v7;
      uint64_t v10 = v7[27];
      uint64_t v9 = v7[28];
      uint64_t v12 = v7[22];
      uint64_t v11 = v7[23];
      uint64_t v13 = v7[21];
      uint64_t v14 = v7[9];
      uint64_t v15 = v4;
      uint64_t v16 = (void (*)(uint64_t))v0[7];
      uint64_t v77 = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v10, v9, v11);
      v16(v10);
      uint64_t v4 = v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v13, v12, v14);
      sub_18264ED54();
      sub_18264ED3C();
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v12, v14);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v10, v11);
      ++v5;
    }

    while (v77 != MEMORY[0x186E0E8E0](v15, v11));
  }

  swift_bridgeObjectRelease();
  uint64_t v21 = v0[14];
  uint64_t v78 = *(uint64_t (**)(uint64_t))(v0[10] + 32LL);
  uint64_t v22 = v78(v72);
  if (!MEMORY[0x186E0E8E0](v22, v21)) {
    goto LABEL_21;
  }
  uint64_t v23 = 0LL;
  uint64_t v24 = v0[15];
  uint64_t v75 = v0[16];
  while (1)
  {
    char v25 = sub_18264ED24();
    sub_18264ECE8();
    if ((v25 & 1) != 0)
    {
      uint64_t v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16);
      v26( v0[19],  v22 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
      + *(void *)(v24 + 72) * v23,
        v0[14]);
      uint64_t v27 = v23 + 1;
      if (__OFADD__(v23, 1LL)) {
        break;
      }
      goto LABEL_15;
    }

    uint64_t result = sub_18264F1A4();
    if (v75 != 8) {
      goto LABEL_35;
    }
    uint64_t v32 = result;
    uint64_t v33 = v0[19];
    uint64_t v34 = v0[14];
    v0[3] = v32;
    uint64_t v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16);
    v26(v33, (unint64_t)(v0 + 3), v34);
    swift_unknownObjectRelease();
    uint64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
LABEL_15:
    unint64_t v28 = v0[19];
    uint64_t v29 = v0[14];
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC90);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_18265BE50;
    *(void *)(v30 + 56) = v29;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v30 + 32));
    v26((uint64_t)boxed_opaque_existential_0, v28, v29);
    sub_18264F630();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v24 + 8))(v28, v29);
    ++v23;
    if (v27 == MEMORY[0x186E0E8E0](v22, v29)) {
      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_21:
  uint64_t v35 = v0[14];
  uint64_t v36 = v0[10];
  swift_bridgeObjectRelease();
  uint64_t v37 = ((uint64_t (*)(uint64_t, uint64_t))v78)(v72, v36);
  if (!MEMORY[0x186E0E8E0](v37, v35)) {
    goto LABEL_33;
  }
  uint64_t v38 = 0LL;
  uint64_t v81 = v0[24];
  uint64_t v39 = v0[15];
  uint64_t v64 = v0[16];
  uint64_t v73 = v39;
  uint64_t v76 = v0[20];
  uint64_t v65 = v37;
  while (2)
  {
    char v47 = sub_18264ED24();
    sub_18264ECE8();
    if ((v47 & 1) != 0)
    {
      (*(void (**)(void, unint64_t, void))(v39 + 16))( v0[18],  v37 + ((*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
      + *(void *)(v39 + 72) * v38,
        v0[14]);
      uint64_t v48 = v38 + 1;
      if (__OFADD__(v38, 1LL)) {
        break;
      }
      goto LABEL_26;
    }

    uint64_t result = sub_18264F1A4();
    if (v64 != 8) {
      goto LABEL_36;
    }
    uint64_t v60 = result;
    uint64_t v61 = v0[18];
    uint64_t v62 = v0[14];
    v0[4] = v60;
    (*(void (**)(uint64_t, void *, uint64_t))(v39 + 16))(v61, v0 + 4, v62);
    swift_unknownObjectRelease();
    uint64_t v48 = v38 + 1;
    if (!__OFADD__(v38, 1LL))
    {
LABEL_26:
      uint64_t v79 = v48;
      (*(void (**)(void, void, void))(v39 + 32))(v0[17], v0[18], v0[14]);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        uint64_t v49 = v0[27];
        uint64_t v50 = v0[23];
        uint64_t v66 = v0[26];
        uint64_t v67 = v0[22];
        uint64_t v51 = v0[17];
        uint64_t v68 = v0[21];
        uint64_t v69 = v0[12];
        uint64_t v52 = v0[9];
        uint64_t v53 = (void (*)(uint64_t))v0[7];
        uint64_t v54 = v51 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        os_log_type_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
        v55(v49, v51, v50);
        v55(v66, v54, v50);
        v53(v49);
        v53(v66);
        uint64_t v56 = v69 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16);
        v57(v69, v67, v52);
        v57(v56, v68, v52);
        swift_storeEnumTagMultiPayload();
        sub_18264ED54();
        sub_18264ED3C();
        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
        v58(v68, v52);
        uint64_t v59 = v52;
        uint64_t v37 = v65;
        v58(v67, v59);
        uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
        v45(v66, v50);
      }

      else
      {
        uint64_t v40 = v0[27];
        uint64_t v41 = v0[22];
        uint64_t v42 = v0[12];
        uint64_t v43 = v0[9];
        uint64_t v44 = (void (*)(uint64_t))v0[7];
        (*(void (**)(uint64_t, void, void))(v81 + 32))(v40, v0[17], v0[23]);
        v44(v40);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v42, v41, v43);
        swift_storeEnumTagMultiPayload();
        sub_18264ED54();
        sub_18264ED3C();
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v41, v43);
        uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
      }

      uint64_t v46 = v0[14];
      v45(v0[27], v0[23]);
      ++v38;
      uint64_t v39 = v73;
      if (v79 == MEMORY[0x186E0E8E0](v37, v46)) {
        goto LABEL_33;
      }
      continue;
    }

    break;
  }

  __break(1u);
LABEL_33:
  uint64_t v63 = (uint64_t *)v0[5];
  swift_bridgeObjectRelease();
  uint64_t *v63 = v82;
  v63[1] = v83;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t AsyncSequence<>.filterEndpoints(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a1;
  v13[6] = a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(0LL, AssociatedTypeWitness, v15, v16);
  swift_retain();
  sub_18264EE8C();
  return swift_release();
}

uint64_t sub_181BC3F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a4;
  v7[8] = a7;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v7[9] = swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for BrowseResult.Change(0LL, AssociatedTypeWitness, v9, v10);
  v7[10] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[11] = v12;
  v7[12] = *(void *)(v12 + 64);
  v7[13] = swift_task_alloc();
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  uint64_t v13 = swift_checkMetadataState();
  v7[16] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v7[17] = v14;
  v7[18] = *(void *)(v14 + 64);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BC4070()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v60 = sub_18264ED0C();
  uint64_t v61 = sub_18264ED0C();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t v5 = v3(v4, v2);
  if (MEMORY[0x186E0E8E0](v5, v1))
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v58 = *(void *)(v0 + 144);
    do
    {
      char v9 = sub_18264ED24();
      sub_18264ECE8();
      if ((v9 & 1) != 0)
      {
        uint64_t v10 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
        v10( *(void *)(v0 + 200),  v5 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(void *)(v7 + 72) * v6,
          *(void *)(v0 + 128));
        uint64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1LL)) {
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t result = sub_18264F1A4();
        if (v58 != 8)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }

        uint64_t v15 = result;
        uint64_t v16 = *(void *)(v0 + 200);
        uint64_t v17 = *(void *)(v0 + 128);
        *(void *)(v0 + 16) = v15;
        uint64_t v10 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
        v10(v16, v0 + 16, v17);
        swift_unknownObjectRelease();
        uint64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1LL))
        {
LABEL_11:
          __break(1u);
          break;
        }
      }

      uint64_t v12 = *(void *)(v0 + 192);
      uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 48);
      (*(void (**)(uint64_t, void, void))(v7 + 32))(v12, *(void *)(v0 + 200), *(void *)(v0 + 128));
      if ((v13(v12) & 1) != 0)
      {
        v10(*(void *)(v0 + 184), *(void *)(v0 + 192), *(void *)(v0 + 128));
        sub_18264ED54();
        sub_18264ED3C();
      }

      uint64_t v8 = *(void *)(v0 + 128);
      (*(void (**)(void, uint64_t))(v7 + 8))(*(void *)(v0 + 192), v8);
      ++v6;
    }

    while (v11 != MEMORY[0x186E0E8E0](v5, v8));
  }

  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 64) + 32LL))(v4);
  if (!MEMORY[0x186E0E8E0](v19, v18)) {
    goto LABEL_32;
  }
  uint64_t v20 = 0LL;
  uint64_t v21 = *(void **)(v0 + 136);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v54 = *(void *)(v0 + 96);
  uint64_t v55 = v22;
  uint64_t v56 = v19;
  while (1)
  {
    char v24 = sub_18264ED24();
    sub_18264ECE8();
    if ((v24 & 1) == 0) {
      break;
    }
    (*(void (**)(void, unint64_t, void))(v22 + 16))( *(void *)(v0 + 120),  v19 + ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
    + *(void *)(v22 + 72) * v20,
      *(void *)(v0 + 80));
    uint64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      goto LABEL_31;
    }
LABEL_19:
    (*(void (**)(void, void, void))(v22 + 32))( *(void *)(v0 + 112),  *(void *)(v0 + 120),  *(void *)(v0 + 80));
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      uint64_t v32 = *(void *)(v0 + 176);
      uint64_t v33 = *(uint64_t (**)(uint64_t))(v0 + 48);
      ((void (*)(uint64_t, void, void))v21[4])(v32, *(void *)(v0 + 112), *(void *)(v0 + 128));
      char v34 = v33(v32);
      uint64_t v29 = *(void *)(v0 + 176);
      uint64_t v30 = *(void *)(v0 + 128);
      if ((v34 & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v31 = v23;
      ((void (*)(void, void, void))v21[2])( *(void *)(v0 + 104),  *(void *)(v0 + 176),  *(void *)(v0 + 128));
      goto LABEL_14;
    }

    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v59 = v23;
      uint64_t v36 = *(void *)(v0 + 152);
      uint64_t v35 = *(void *)(v0 + 160);
      uint64_t v37 = *(void *)(v0 + 128);
      uint64_t v38 = *(void *)(v0 + 112);
      uint64_t v57 = *(uint64_t (**)(uint64_t))(v0 + 48);
      uint64_t v39 = v21;
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v41 = v38 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v42 = (void (*)(uint64_t, uint64_t, uint64_t))v39[4];
      v42(v35, v38, v37);
      v42(v36, v41, v37);
      char v43 = v57(v36);
      uint64_t v45 = *(void *)(v0 + 152);
      uint64_t v44 = *(void *)(v0 + 160);
      uint64_t v46 = *(void *)(v0 + 128);
      if ((v43 & 1) != 0)
      {
        uint64_t v47 = *(void *)(v0 + 104) + *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v48 = (void (*)(uint64_t, uint64_t, uint64_t))v39[2];
        v48(*(void *)(v0 + 104), *(void *)(v0 + 160), *(void *)(v0 + 128));
        v48(v47, v45, v46);
        swift_storeEnumTagMultiPayload();
        sub_18264ED54();
        sub_18264ED3C();
      }

      uint64_t v49 = (void (*)(uint64_t, uint64_t))v39[1];
      v49(v45, v46);
      v49(v44, v46);
      uint64_t v21 = v39;
      uint64_t v22 = v55;
      uint64_t v19 = v56;
      uint64_t v23 = v59;
      goto LABEL_16;
    }

    uint64_t v26 = *(void *)(v0 + 168);
    uint64_t v27 = *(uint64_t (**)(uint64_t))(v0 + 48);
    ((void (*)(uint64_t, void, void))v21[4])(v26, *(void *)(v0 + 112), *(void *)(v0 + 128));
    char v28 = v27(v26);
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 128);
    if ((v28 & 1) != 0)
    {
      uint64_t v31 = v23;
      ((void (*)(void, void, void))v21[2])( *(void *)(v0 + 104),  *(void *)(v0 + 168),  *(void *)(v0 + 128));
LABEL_14:
      swift_storeEnumTagMultiPayload();
      sub_18264ED54();
      uint64_t v23 = v31;
      sub_18264ED3C();
    }

void *sub_181BC461C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC88);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC5DDC(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC4728(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC98);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC5C40(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC4834(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_181BC5A08(a1, a2, a3, a4, &qword_18C58BC98, &qword_18C58B868);
}

void *sub_181BC4848(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC80);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_181BC80C8(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC496C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC50);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC81D4(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

char *sub_181BC4A78(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_181BC4BA4(a1, a2, a3, a4, &qword_18C58AC08);
}

void *sub_181BC4A84(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E5B8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC83D0(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_181BC4B90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_181BC4CAC(a1, a2, a3, a4, &qword_18C58BC70, &qword_18C58BC78);
}

char *sub_181BC4BA4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (char *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * v12 - 64;
      uint64_t v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32]) {
          memmove(v13, a4 + 32, v9);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      int64_t v11 = (char *)MEMORY[0x18961AFE8];
      uint64_t v13 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_181BC8B94(0LL, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_181BC4C98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_181BC4CAC(a1, a2, a3, a4, &qword_18C58BC40, &qword_18C58A1F0);
}

uint64_t sub_181BC4CAC(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_29;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000LL ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = sub_18264F318();
    __break(1u);
    return result;
  }

  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_181BC8D7C(0LL, v11, v21, a4, a6);
  }

  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_181BC4EB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_181BC5208( a1,  a2,  a3,  a4,  &qword_18C45E5B0,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

void *sub_181BC4ECC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC60);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC84C0(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC4FD8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC58);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC85B0(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC50E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_181C32BC0();
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC85B0(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_181BC51F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_181BC5208( a1,  a2,  a3,  a4,  &qword_18C58BC68,  (uint64_t (*)(void))type metadata accessor for NWActorID);
}

uint64_t sub_181BC5208( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_29;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0LL) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000LL ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = sub_18264F318();
    __break(1u);
    return result;
  }

  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0LL) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_181BC8898(0LL, v11, v21, a4, a6);
  }

  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void *sub_181BC5414(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BBD8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC878C(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC5520(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC48);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_181BC82C4(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_181BC5640(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_181BC4CAC(a1, a2, a3, a4, &qword_18C58BC38, &qword_18C58E020);
}

uint64_t sub_181BC5654(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_181BC5208( a1,  a2,  a3,  a4,  &qword_18C58BC30,  type metadata accessor for NWConnection.EstablishmentReport.Resolution);
}

void *sub_181BC5668(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC28);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_181BC89B0(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC578C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC20);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4]) {
          memmove(v12, a4 + 4, 104 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_181BC8AA4(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_181BC58B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC90);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_181BC8698(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

char *sub_181BC59DC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_181BC4BA4(a1, a2, a3, a4, &qword_18C58BC18);
}

char *sub_181BC59E8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_181BC4BA4(a1, a2, a3, a4, &qword_18C58BC10);
}

void *sub_181BC59F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_181BC5A08(a1, a2, a3, a4, &qword_18C58BC00, &qword_18C58BC08);
}

void *sub_181BC5A08(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 1;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      uint64_t v16 = v13 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v13 = (void *)MEMORY[0x18961AFE8];
      uint64_t v16 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4]) {
          memmove(v16, a4 + 4, 32 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC8C78(0LL, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }

  __break(1u);
  return result;
}

uint64_t sub_181BC5B20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_181BC4CAC(a1, a2, a3, a4, &qword_18C58BBF0, &qword_18C58BBF8);
}

void *sub_181BC5B34(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BBE8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_181BC85B0(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_181BC5C40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC5D30()
{
  return *(void *)v0;
}

uint64_t sub_181BC5D38()
{
  return *(void *)(v0 + 8);
}

uint64_t type metadata accessor for BrowseResult.Change(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BrowseResult.Change);
}

unint64_t sub_181BC5D4C()
{
  unint64_t result = qword_18C58AC70;
  if (!qword_18C58AC70)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58AC68);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189618458], v1);
    atomic_store(result, (unint64_t *)&qword_18C58AC70);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E12078](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_181BC5DDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC60);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC5EE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  BOOL v18 = (char *)&v22 - v17;
  char v19 = sub_18264EA00();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }

  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_181BC6094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EFE8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v17 - v9;
  char v11 = sub_18264EA00();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }

  char v13 = sub_18264EA00();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_181BC621C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(*(void *)v4 + 80LL);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858]();
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v13((char *)(v4 + *(void *)(v12 + 96)), a1, v8);
  v13(v11, a1, v8);
  if (!a2) {
    a2 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(v8, a3);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(void *)(v4 + *(void *)(*(void *)v4 + 104LL)) = a2;
  return v4;
}

uint64_t type metadata accessor for BrowseResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BrowseResult);
}

void sub_181BC6304(uint64_t a1)
{
}

uint64_t sub_181BC630C()
{
  return swift_deallocObject();
}

uint64_t sub_181BC6330(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v11 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  void *v12 = v3;
  v12[1] = sub_181BC63C4;
  return sub_181BC3434(a1, a2, v11, v10, v6, v7, v8, v9);
}

uint64_t sub_181BC63C4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181BC640C()
{
  return swift_deallocObject();
}

uint64_t sub_181BC6430(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  void *v11 = v3;
  v11[1] = sub_181BC92FC;
  return sub_181BC3F0C(a1, a2, v9, v10, v6, v7, v8);
}

void sub_181BC64C0()
{
}

void sub_181BC64D0()
{
}

uint64_t sub_181BC64E0()
{
  return MEMORY[0x189618758];
}

uint64_t sub_181BC64EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BC65F8(a1, a2, a3, MEMORY[0x189618A60]);
}

unint64_t sub_181BC64F8()
{
  unint64_t result = qword_18C58B918;
  if (!qword_18C58B918)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C58B918);
  }

  return result;
}

void sub_181BC653C()
{
}

void sub_181BC654C()
{
}

uint64_t sub_181BC655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BC65F8(a1, a2, a3, MEMORY[0x189618A58]);
}

uint64_t sub_181BC6568(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E12084](&protocol conformance descriptor for BrowseResult<A>);
  return MEMORY[0x186E12084](MEMORY[0x18961A5E0], a1, &v3);
}

uint64_t sub_181BC65B0(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for BrowseResult<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_181BC65DC()
{
}

uint64_t sub_181BC65EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BC65F8(a1, a2, a3, MEMORY[0x189618A40]);
}

uint64_t sub_181BC65F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = sub_181BC64F8();
  v8[0] = MEMORY[0x189618780];
  v8[1] = v6;
  return MEMORY[0x186E12084](a4, a1, v8);
}

uint64_t sub_181BC6640(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E12084](&protocol conformance descriptor for BrowseResult<A>);
  return MEMORY[0x186E12084](MEMORY[0x18961A5C8], a1, &v3);
}

void sub_181BC6688()
{
}

uint64_t dispatch thunk of Connectable.nw.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for UnexpectedEndpointType(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for NWEndpoint() - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_181BC6700 + 4 * byte_18265BE60[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_181BC683C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 2)
  {
    if (a4 == 1)
    {
      a3 = a2;
    }

    else
    {
      if (a4) {
        return result;
      }
      swift_bridgeObjectRetain();
    }
  }

  return sub_181BC6890(a3);
}

uint64_t sub_181BC6890(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t destroy for UnexpectedEndpointType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t result = sub_181BC6974(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = *(void *)(a1 + 48);
      if (result != 1) {
        goto LABEL_7;
      }
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v3 = sub_18264E568();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    case 4:
LABEL_7:
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_181BC6974(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 2)
  {
    if (a4 == 1)
    {
      a3 = a2;
    }

    else
    {
      if (a4) {
        return result;
      }
      swift_bridgeObjectRelease();
    }
  }

  return sub_181BC69C8(a3);
}

uint64_t sub_181BC69C8(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

void initializeWithCopy for UnexpectedEndpointType()
{
  uint64_t v0 = (char *)sub_181BC6A2C + 4 * byte_18265BE6A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BC6A2C()
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  sub_181BC683C(*(void *)v1, v3, v4, v5);
  *(void *)uint64_t v0 = v2;
  *(void *)(v0 + 8) = v3;
  *(void *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for UnexpectedEndpointType(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    sub_181BC920C(result, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for NWEndpoint();
    uint64_t v2 = (char *)&loc_181BC6BB4 + 4 * byte_18265BE6F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  return result;
}

void *initializeWithTake for UnexpectedEndpointType(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v5 = sub_18264E568();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32LL))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for UnexpectedEndpointType(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t v4 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v5 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32LL))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for UnexpectedEndpointType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BC6E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UnexpectedEndpointType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BC6E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UnexpectedEndpointType()
{
  uint64_t result = qword_18C58B9A0;
  if (!qword_18C58B9A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_181BC6F00()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t dispatch thunk of BrowseDescriptorProvider.makeDescriptor()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of BrowseDescriptorProvider.makeEndpoint(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BrowseResultProtocol.endpoints.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of BrowseResultProtocol.changes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of BrowseParametersProvider.browseParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_181BC6FA0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for NWActorSystemInvocationEncoder()
{
  return swift_bridgeObjectRelease();
}

void *_s7Network30NWActorSystemInvocationEncoderVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NWActorSystemInvocationEncoder(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for NWActorSystemInvocationEncoder(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_181BC70B4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v3 = *(void *)(result - 8) + 64LL;
    uint64_t v4 = v3;
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

uint64_t *sub_181BC7130(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  unint64_t v10 = ~(unint64_t)v8;
  uint64_t v11 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 <= v7) {
    uint64_t v12 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v12 = ((v7 + v8) & ~(unint64_t)v8) + v7;
  }
  int v13 = v8 & 0x100000;
  if (v9 > 7 || v13 != 0 || (unint64_t)(v12 + 1) > 0x18)
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v9 + 16) & v10));
    swift_retain();
  }

  else
  {
    unsigned int v17 = *((unsigned __int8 *)a2 + v12);
    if (v17 >= 3)
    {
      else {
        uint64_t v18 = 4LL;
      }
      __asm { BR              X13 }
    }

    if (v17 == 2)
    {
      char v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
      v19(a1, a2, *(void *)(a3 + 16));
      v19((uint64_t *)(((unint64_t)v4 + v11) & v10), (uint64_t *)(((unint64_t)a2 + v11) & v10), v5);
      *((_BYTE *)v4 + (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v12) = 2;
    }

    else if (v17 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, void))(v6 + 16))(a1, a2, *(void *)(a3 + 16));
      *((_BYTE *)v4 + (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v12) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, void))(v6 + 16))(a1, a2, *(void *)(a3 + 16));
      *((_BYTE *)v4 + (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v12) = 0;
    }
  }

  return v4;
}

uint64_t sub_181BC72BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5) {
    v5 += (v5 + v6) & ~v6;
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + v5);
  if (v8 >= 3)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X15 }
  }

  if (v8 == 2)
  {
    uint64_t v12 = ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v14(a1, v3);
    a1 = (v7 + v2) & v12;
    uint64_t v11 = v3;
    unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v14;
  }

  else
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
  }

  return v10(a1, v11);
}

uint64_t sub_181BC73C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7) {
    uint64_t v10 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v10 = ((v7 + v8) & ~v8) + v7;
  }
  unsigned int v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 3)
  {
    else {
      uint64_t v12 = 4LL;
    }
    __asm { BR              X14 }
  }

  if (v11 == 2)
  {
    uint64_t v14 = ~v8;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v15(a1, a2, *(void *)(a3 + 16));
    v15((v9 + a1) & v14, (v9 + a2) & v14, v5);
    char v13 = 2;
  }

  else if (v11 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(a1, a2, *(void *)(a3 + 16));
    char v13 = 1;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(a1, a2, *(void *)(a3 + 16));
    char v13 = 0;
  }

  *(_BYTE *)(a1 + v10) = v13;
  return a1;
}

uint64_t sub_181BC7514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7) {
      uint64_t v10 = *(void *)(v6 + 64);
    }
    else {
      uint64_t v10 = ((v7 + v8) & ~v8) + v7;
    }
    unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v13 = ~v8;
    if (v11 == 2)
    {
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v14(a1, *(void *)(a3 + 16));
      v14((v9 + a1) & v13, v5);
    }

    else
    {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }

    unsigned int v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 3)
    {
      else {
        uint64_t v16 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v15 == 2)
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      v18(a1, a2, v5);
      v18((v9 + a1) & v13, (v9 + a2) & v13, v5);
      char v17 = 2;
    }

    else if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      char v17 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      char v17 = 0;
    }

    *(_BYTE *)(a1 + v10) = v17;
  }

  return a1;
}

uint64_t sub_181BC771C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7) {
    uint64_t v10 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v10 = ((v7 + v8) & ~v8) + v7;
  }
  unsigned int v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 3)
  {
    else {
      uint64_t v12 = 4LL;
    }
    __asm { BR              X14 }
  }

  if (v11 == 2)
  {
    uint64_t v14 = ~v8;
    unsigned int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v15(a1, a2, *(void *)(a3 + 16));
    v15((v9 + a1) & v14, (v9 + a2) & v14, v5);
    char v13 = 2;
  }

  else if (v11 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, void))(v6 + 32))(a1, a2, *(void *)(a3 + 16));
    char v13 = 1;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v6 + 32))(a1, a2, *(void *)(a3 + 16));
    char v13 = 0;
  }

  *(_BYTE *)(a1 + v10) = v13;
  return a1;
}

uint64_t sub_181BC786C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7) {
      uint64_t v10 = *(void *)(v6 + 64);
    }
    else {
      uint64_t v10 = ((v7 + v8) & ~v8) + v7;
    }
    unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v13 = ~v8;
    if (v11 == 2)
    {
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v14(a1, *(void *)(a3 + 16));
      v14((v9 + a1) & v13, v5);
    }

    else
    {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }

    unsigned int v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 3)
    {
      else {
        uint64_t v16 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v15 == 2)
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v18(a1, a2, v5);
      v18((v9 + a1) & v13, (v9 + a2) & v13, v5);
      char v17 = 2;
    }

    else if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      char v17 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      char v17 = 0;
    }

    *(_BYTE *)(a1 + v10) = v17;
  }

  return a1;
}

uint64_t sub_181BC7A74(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_21;
  }
  unint64_t v6 = v4 + 1;
  char v7 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)(a1 + v6);
      if (!v8) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v10 < 2)
    {
LABEL_21:
      unsigned int v12 = *(unsigned __int8 *)(a1 + v4);
      if (v12 >= 3) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6)) {
    goto LABEL_21;
  }
LABEL_14:
  int v11 = (v8 - 1) << v7;
  if (!(_DWORD)v6) {
    return (v11 + 254);
  }
  return ((uint64_t (*)(void))((char *)&loc_181BC7B44 + 4 * byte_18265BE9C[(v6 - 1)]))();
}

void sub_181BC7B90(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFE)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (a2 <= 0xFD) {
    __asm { BR              X11 }
  }

  unsigned int v10 = a2 - 254;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      int v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }

      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }

      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }

  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }

  __asm { BR              X10 }

uint64_t sub_181BC7D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 > v3) {
    unint64_t v3 = v4;
  }
  else {
    uint64_t v5 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_181BC7D98 + 4 * byte_18265BEAA[v5]))();
}

void sub_181BC7DE0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  size_t v5 = *(void *)(v4 + 64);
  size_t v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (a2 > 2)
  {
    if (v6 <= v5) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = v6;
    }
    unsigned int v8 = a2 - 3;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 3;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }

      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }

      else
      {
        *a1 = v10;
      }
    }

    else
    {
      a1[v7] = 3;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }

  else
  {
    if (v6 > v5) {
      size_t v5 = v6;
    }
    a1[v5] = a2;
  }

void *sub_181BC7EBC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NWBrowser.Descriptor.Options()
{
  return swift_bridgeObjectRelease();
}

void *sub_181BC7EF0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *sub_181BC7F3C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for BrowseResult.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BrowseResult.Iterator);
}

uint64_t sub_181BC800C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for Browser1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Browser1);
}

uint64_t method lookup function for Browser1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Browser1.__allocating_init(provider:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of Browser1.__allocating_init(for:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of Browser1.__allocating_init<>(for:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for BrowseDescriptorFactories()
{
  return &type metadata for BrowseDescriptorFactories;
}

uint64_t sub_181BC80C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC88);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC81D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC82C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA30);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC83D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC84C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

char *sub_181BC85B0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC8698(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC878C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BBE0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC8898( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = *(void *)(a5(0LL) - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    uint64_t v13 = v11 * v5;
    unint64_t v14 = a3 + v13;
    unint64_t v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC89B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC8AA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

char *sub_181BC8B94(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC8C78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v5 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = a4 + 32 * a1 + 32;
    unint64_t v7 = a3 + 32 * v5;
    if (v6 >= v7 || v6 + 32 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181BC8D7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    uint64_t v13 = v11 * v5;
    unint64_t v14 = a3 + v13;
    unint64_t v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

uint64_t sub_181BC8ED0()
{
  return swift_deallocObject();
}

void sub_181BC8EF4(uint64_t a1)
{
}

uint64_t sub_181BC8F00()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v2, v3);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v4 = sub_18264EEE0();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))( v0 + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL)),  v4);
  return swift_deallocObject();
}

unsigned int *sub_181BC8FA8(unsigned int *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v3, v4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  sub_18264EEE0();
  return sub_181BC1B84(a1);
}

uint64_t sub_181BC904C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_181BC905C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v2, v3);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v4 = sub_18264EEE0();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t sub_181BC9124(int64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for BrowseResult(255LL, AssociatedTypeWitness, v6, v7);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(sub_18264EEE0() - 8) + 80LL);
  return sub_181BC1C80(a1, a2, *(void *)(v2 + 32), v2 + ((v8 + 40) & ~v8));
}

unint64_t sub_181BC91D0()
{
  unint64_t result = qword_18C58D700;
  if (!qword_18C58D700)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C58D700);
  }

  return result;
}

uint64_t sub_181BC920C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_181BC9248(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_181BC928C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186E11FF4](a1, v6, a5);
}

uint64_t TXTRecordDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v4 = MEMORY[0x18961AFE8];
  unint64_t v5 = sub_181C87E5C(MEMORY[0x18961AFE8]);
  sub_181BC93D4();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v2;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v5;
  return sub_18264EF28();
}

unint64_t sub_181BC93D4()
{
  unint64_t result = qword_18C58BCA0;
  if (!qword_18C58BCA0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265C4FC, &type metadata for TXTRecordDecoder._Decoder);
    atomic_store(result, (unint64_t *)&qword_18C58BCA0);
  }

  return result;
}

uint64_t sub_181BC9418()
{
  return swift_deallocObject();
}

void *initializeWithCopy for NotSupported(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NotSupported(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for NotSupported(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for NotSupported(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotSupported(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NotSupported()
{
  return &type metadata for NotSupported;
}

ValueMetadata *type metadata accessor for MissingRequiredKey()
{
  return &type metadata for MissingRequiredKey;
}

uint64_t _s4NameVwxx()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for InvalidValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for InvalidValue(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for InvalidValue(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InvalidValue()
{
  return &type metadata for InvalidValue;
}

void *initializeBufferWithCopyOfBuffer for FailedConvertion(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FailedConvertion()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for NWTXTRecord.CaseInsensitiveString(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FailedConvertion(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.CaseInsensitiveString(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.CaseInsensitiveString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FailedConvertion()
{
  return &type metadata for FailedConvertion;
}

ValueMetadata *type metadata accessor for TXTRecordDecoder()
{
  return &type metadata for TXTRecordDecoder;
}

ValueMetadata *type metadata accessor for TXTRecordDecoder._Decoder()
{
  return &type metadata for TXTRecordDecoder._Decoder;
}

uint64_t sub_181BC9948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TXTRecordDecoder._Decoder._Container(0LL, a2, a3, v5);
  MEMORY[0x186E12084](&unk_18265C580, v6);
  return sub_18264F414();
}

uint64_t sub_181BC99F8()
{
  uint64_t v0 = sub_18264F72C();
  uint64_t v2 = NWTXTRecord.subscript.getter(v0, v1);
  uint64_t v4 = v3;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v2 = sub_18264F72C();
    uint64_t v6 = v5;
    sub_181BCC88C();
    swift_allocError();
    uint64_t *v7 = v2;
    v7[1] = v6;
    swift_willThrow();
  }

  return v2;
}

uint64_t sub_181BC9AEC@<X0>( uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v23 = a3;
  uint64_t v26 = a2;
  uint64_t v9 = sub_18264F09C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  unint64_t v12 = (char *)v21 - v11;
  __int128 v13 = v5[1];
  __int128 v24 = *v5;
  __int128 v25 = v13;
  uint64_t result = sub_181BC99F8();
  if (!v6)
  {
    v21[1] = a1;
    uint64_t v15 = v22;
    v26(result);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(a4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1LL, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v17 = sub_18264F72C();
      uint64_t v19 = v18;
      sub_181BCC848();
      swift_allocError();
      uint64_t *v20 = v17;
      v20[1] = v19;
      return swift_willThrow();
    }

    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v15, v12, a4);
    }
  }

  return result;
}

BOOL sub_181BC9C4C()
{
  uint64_t v0 = sub_18264F72C();
  NWTXTRecord.subscript.getter(v0, v1);
  uint64_t v3 = v2;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3) {
    swift_bridgeObjectRelease();
  }
  return v3 != 0;
}

BOOL sub_181BC9CE8()
{
  uint64_t v0 = sub_18264F72C();
  NWTXTRecord.subscript.getter(v0, v1);
  uint64_t v3 = v2;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3) {
    swift_bridgeObjectRelease();
  }
  return v3 == 0;
}

uint64_t sub_181BC9D8C()
{
  uint64_t v1 = sub_181BC99F8();
  if (!v0)
  {
    uint64_t v4 = v1;
    uint64_t v5 = v2;
    uint64_t v6 = sub_18264EAB4();
    BOOL v8 = v6 == 1702195828 && v7 == 0xE400000000000000LL;
    if (v8
      || (uint64_t v9 = v6, v10 = v7, (sub_18264F4EC() & 1) != 0)
      || v9 == 7562617 && v10 == 0xE300000000000000LL
      || (sub_18264F4EC() & 1) != 0
      || v9 == 49 && v10 == 0xE100000000000000LL
      || (sub_18264F4EC() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v3 = 1;
    }

    else
    {
      if (v9 == 0x65736C6166LL && v10 == 0xE500000000000000LL
        || (sub_18264F4EC() & 1) != 0
        || v9 == 28526 && v10 == 0xE200000000000000LL
        || (sub_18264F4EC() & 1) != 0
        || v9 == 48 && v10 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v12 = sub_18264F4EC();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
        {
          uint64_t v13 = sub_18264F72C();
          uint64_t v15 = v14;
          sub_181BCC990();
          swift_allocError();
          *uint64_t v16 = v13;
          v16[1] = v15;
          v16[2] = v4;
          v16[3] = v5;
          swift_willThrow();
          return v3 & 1;
        }
      }

      swift_bridgeObjectRelease();
      char v3 = 0;
    }
  }

  return v3 & 1;
}

uint64_t sub_181BCA008()
{
  return sub_181BC99F8();
}

double sub_181BCA038(uint64_t a1)
{
  if (!v1) {
    return v3;
  }
  return result;
}

uint64_t sub_181BCA090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    swift_bridgeObjectRetain();
    sub_18264F144();
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = v12;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      switch((char)a1)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          goto LABEL_9;
        default:
          swift_bridgeObjectRetain();
          uint64_t v10 = (_BYTE *)_swift_stdlib_strtod_clocale();
          if (v10) {
            char v8 = *v10 == 0;
          }
          else {
LABEL_9:
          }
            char v8 = 0;
          uint64_t result = swift_bridgeObjectRelease();
          break;
      }
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v6 = sub_18264F228();
        uint64_t v7 = v11;
      }

      swift_bridgeObjectRetain();
      char v8 = sub_181C864E4(v6, v7, (void (*)(uint64_t *__return_ptr))sub_181BCC9DC);
      uint64_t result = swift_bridgeObjectRelease();
    }
  }

  *(void *)a3 = 0LL;
  *(_BYTE *)(a3 + 8) = (v8 & 1) == 0;
  return result;
}

float sub_181BCA24C(uint64_t a1)
{
  if (!v1) {
    return v3;
  }
  return result;
}

uint64_t sub_181BCA2A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    swift_bridgeObjectRetain();
    sub_18264F144();
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = v12;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      switch((char)a1)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          goto LABEL_9;
        default:
          swift_bridgeObjectRetain();
          uint64_t v10 = (_BYTE *)_swift_stdlib_strtof_clocale();
          if (v10) {
            char v8 = *v10 == 0;
          }
          else {
LABEL_9:
          }
            char v8 = 0;
          uint64_t result = swift_bridgeObjectRelease();
          break;
      }
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v6 = sub_18264F228();
        uint64_t v7 = v11;
      }

      swift_bridgeObjectRetain();
      char v8 = sub_181C864E4(v6, v7, (void (*)(uint64_t *__return_ptr))sub_181BCC8EC);
      uint64_t result = swift_bridgeObjectRelease();
    }
  }

  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = (v8 & 1) == 0;
  return result;
}

uint64_t sub_181BCA460@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_181BCAD60( a1,  a2,  (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_181C2EF68,  (uint64_t (*)(uint64_t))sub_181C2EEC8,  a3);
}

unint64_t sub_181BCA474@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_44:
    *a3 = v7;
    a3[1] = v5;
    return result;
  }

  uint64_t v8 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v10 = sub_181C2EFDC(v8, a2, 10LL);
    uint64_t result = swift_bridgeObjectRelease();
    LODWORD(v5) = (v10 >> 8) & 1;
    goto LABEL_41;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_18264F228();
    }
    uint64_t result = (unint64_t)sub_181C2EEDC(v9, v6, 10LL);
    LOBYTE(v10) = result;
    LODWORD(v5) = (result >> 8) & 1;
    goto LABEL_41;
  }

  v23[0] = result;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        unsigned int v10 = (result >> 8) - 48;
        if (v5 != 2)
        {
          unsigned int v10 = (result >> 16) - 48 + 10 * v10;
          uint64_t v15 = v5 - 3;
          if (v5 != 3)
          {
            uint64_t v16 = (unsigned __int8 *)v23 + 3;
            while (1)
            {
              unsigned int v17 = *v16 - 48;
              if (v17 > 9) {
                goto LABEL_38;
              }
              int v18 = (char)(10 * v10);
              unsigned int v10 = v18 + (char)v17;
              LODWORD(v5) = 0;
              ++v16;
              if (!--v15) {
                goto LABEL_41;
              }
            }
          }
        }

        goto LABEL_40;
      }

      goto LABEL_56;
    }
  }

  else
  {
    if (result != 45)
    {
      if (!v5) {
        goto LABEL_38;
      }
      unsigned int v10 = result - 48;
      if (v5 != 1)
      {
        unsigned int v10 = (result >> 8) - 48 + 10 * v10;
        uint64_t v19 = v5 - 2;
        if (v5 != 2)
        {
          char v20 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            unsigned int v21 = *v20 - 48;
            if (v21 > 9) {
              goto LABEL_38;
            }
            int v22 = (char)(10 * v10);
            unsigned int v10 = v22 + (char)v21;
            LODWORD(v5) = 0;
            ++v20;
            if (!--v19) {
              goto LABEL_41;
            }
          }
        }
      }

      goto LABEL_40;
    }

    if (v5)
    {
      if (v5 != 1)
      {
        unsigned int v10 = 48 - (result >> 8);
        if (v5 != 2)
        {
          if ((BYTE2(result) - 48) <= 9u)
          {
            unsigned int v10 = 10 * v10 - ((result >> 16) - 48);
            uint64_t v11 = v5 - 3;
            if (v5 != 3)
            {
              char v12 = (unsigned __int8 *)v23 + 3;
              while (1)
              {
                unsigned int v13 = *v12 - 48;
                if (v13 > 9) {
                  goto LABEL_38;
                }
                int v14 = (char)(10 * v10);
                unsigned int v10 = v14 - (char)v13;
                LODWORD(v5) = 0;
                ++v12;
                if (!--v11) {
                  goto LABEL_41;
                }
              }
            }

            goto LABEL_40;
          }

uint64_t sub_181BCA75C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_37:
    *(_WORD *)a3 = v7;
    *(_BYTE *)(a3 + 2) = v5;
    return result;
  }

  uint64_t v8 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v10 = sub_181C2EFE8(v8, a2, 10LL);
    uint64_t result = swift_bridgeObjectRelease();
    LODWORD(v5) = HIWORD(v10) & 1;
    goto LABEL_34;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_18264F228();
    }
    uint64_t result = (uint64_t)sub_181C2EEF0(v9, v6, 10LL);
    LOWORD(v10) = result;
    LODWORD(v5) = WORD1(result) & 1;
    goto LABEL_34;
  }

  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5) {
      goto LABEL_59;
    }
    if (v5 == 1)
    {
LABEL_57:
      LOWORD(v10) = 0;
LABEL_34:
      if ((_DWORD)v5) {
        LOWORD(v7) = 0;
      }
      else {
        LOWORD(v7) = v10;
      }
      goto LABEL_37;
    }

    unsigned int v10 = (BYTE1(result) - 48);
    if (v10 <= 9)
    {
      if (v5 == 2) {
        goto LABEL_33;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        LOWORD(v10) = 10 * v10 + (BYTE2(result) - 48);
        uint64_t v12 = v5 - 3;
        if (v5 != 3)
        {
          unsigned int v13 = (unsigned __int8 *)v24 + 3;
          while (1)
          {
            unsigned int v14 = *v13 - 48;
            if (v14 > 9) {
              goto LABEL_31;
            }
            int v15 = (__int16)(10 * v10);
            unsigned int v10 = v15 + v14;
            LODWORD(v5) = 0;
            ++v13;
            if (!--v12) {
              goto LABEL_34;
            }
          }
        }

        goto LABEL_33;
      }
    }

uint64_t sub_181BCAA4C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_38:
    *(_DWORD *)a3 = v7;
    *(_BYTE *)(a3 + 4) = v5;
    return result;
  }

  uint64_t v8 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_181C2EFF4(v8, a2, 10LL);
    swift_bridgeObjectRelease();
    uint64_t v5 = HIDWORD(v23) & 1;
    uint64_t result = v23;
LABEL_35:
    if ((_DWORD)v5) {
      LODWORD(v7) = 0;
    }
    else {
      LODWORD(v7) = result;
    }
    goto LABEL_38;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_18264F228();
    }
    uint64_t result = (uint64_t)sub_181C2EF04(v9, v6, 10LL);
    char v25 = BYTE4(result) & 1;
    LOBYTE(v5) = BYTE4(result) & 1;
    goto LABEL_34;
  }

  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        uint64_t result = (BYTE1(result) - 48);
        if (result <= 9)
        {
          if (v5 == 2) {
            goto LABEL_33;
          }
          if ((BYTE2(v8) - 48) <= 9u)
          {
            uint64_t result = 10 * (_DWORD)result + (BYTE2(v8) - 48);
            uint64_t v11 = v5 - 3;
            if (v5 != 3)
            {
              uint64_t v12 = (unsigned __int8 *)v24 + 3;
              while (1)
              {
                unsigned int v13 = *v12 - 48;
                if (v13 > 9) {
                  goto LABEL_31;
                }
                uint64_t v14 = 10LL * (int)result;
                uint64_t result = v14 + v13;
                LOBYTE(v5) = 0;
                ++v12;
                if (!--v11) {
                  goto LABEL_34;
                }
              }
            }

            goto LABEL_33;
          }
        }

        goto LABEL_31;
      }

      goto LABEL_58;
    }
  }

  else
  {
    if (result != 45)
    {
      if (v5)
      {
        uint64_t result = (result - 48);
        if (result <= 9)
        {
          if (v5 == 1) {
            goto LABEL_33;
          }
          if ((BYTE1(v8) - 48) <= 9u)
          {
            uint64_t result = 10 * (_DWORD)result + (BYTE1(v8) - 48);
            uint64_t v15 = v5 - 2;
            if (v5 != 2)
            {
              uint64_t v16 = (unsigned __int8 *)v24 + 2;
              while (1)
              {
                unsigned int v17 = *v16 - 48;
                if (v17 > 9) {
                  goto LABEL_31;
                }
                uint64_t v18 = 10LL * (int)result;
                uint64_t result = v18 + v17;
                LOBYTE(v5) = 0;
                ++v16;
                if (!--v15) {
                  goto LABEL_34;
                }
              }
            }

            goto LABEL_33;
          }
        }
      }

uint64_t sub_181BCAD10(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = sub_181BC9AEC(a1, a3, 0LL, a4, (uint64_t)&v6);
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t sub_181BCAD60@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, unint64_t, uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    char v24 = 1;
LABEL_47:
    *(void *)a5 = v8;
    *(_BYTE *)(a5 + 8) = v24 & 1;
    return result;
  }

  uint64_t v9 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = a3(v9, a2, 10LL);
    char v14 = v29;
    uint64_t result = swift_bridgeObjectRelease();
LABEL_44:
    char v24 = v14 & 1;
    if ((v14 & 1) != 0) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = v12;
    }
    goto LABEL_47;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v11 = sub_18264F228();
    }
    uint64_t result = a4(v11);
    uint64_t v12 = result;
    char v14 = v13 & 1;
    goto LABEL_44;
  }

  v30[0] = result;
  v30[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v7) {
      goto LABEL_58;
    }
    uint64_t v12 = (BYTE1(result) - 48);
    if (v7 != 2)
    {
      uint64_t v12 = 10LL * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      uint64_t v15 = v7 - 3;
      if (v15)
      {
        uint64_t v16 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          unsigned int v17 = *v16 - 48;
          if (v17 > 9) {
            goto LABEL_31;
          }
          uint64_t v18 = 10 * v12;
          uint64_t v12 = v18 + v17;
          char v14 = 0;
          ++v16;
          if (!--v15) {
            goto LABEL_44;
          }
        }
      }
    }

uint64_t sub_181BCB050@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_181BCBA3C( a1,  a2,  (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_181C2F0F0,  (uint64_t (*)(uint64_t))sub_181C2EF18,  a3);
}

uint64_t sub_181BCB064(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = sub_181BC9AEC(a1, a3, 0LL, a4, (uint64_t)&v6);
  if (!v4) {
    return v6;
  }
  return result;
}

unint64_t sub_181BCB0B4@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_39:
    *a3 = v7;
    a3[1] = v5;
    return result;
  }

  uint64_t v8 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v10 = sub_181C2F0FC(v8, a2, 10LL);
    uint64_t result = swift_bridgeObjectRelease();
    LODWORD(v5) = (v10 >> 8) & 1;
    goto LABEL_36;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_18264F228();
    }
    uint64_t result = (unint64_t)sub_181C2EF2C(v9, v6, 10LL);
    LOBYTE(v10) = result;
    LODWORD(v5) = (result >> 8) & 1;
    goto LABEL_36;
  }

  v20[0] = result;
  v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5) {
      goto LABEL_63;
    }
    if (v5 == 1)
    {
LABEL_61:
      LOBYTE(v10) = 0;
LABEL_36:
      if ((_DWORD)v5) {
        LOBYTE(v7) = 0;
      }
      else {
        LOBYTE(v7) = v10;
      }
      goto LABEL_39;
    }

    unsigned int v10 = (result >> 8) - 48;
    if (v5 != 2)
    {
      unsigned int v10 = (result >> 16) - 48 + 10 * v10;
      uint64_t v11 = v5 - 3;
      if (v5 != 3)
      {
        uint64_t v12 = (unsigned __int8 *)v20 + 3;
        while (1)
        {
          unsigned int v13 = *v12 - 48;
          if (v13 > 9) {
            goto LABEL_32;
          }
          unsigned int v10 = (10 * v10) + v13;
          if (((v10 >> 8) & 1) != 0) {
            goto LABEL_32;
          }
          LODWORD(v5) = 0;
          ++v12;
          if (!--v11) {
            goto LABEL_36;
          }
        }
      }
    }

uint64_t sub_181BCB3B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = sub_181BC9AEC(a1, a3, 0LL, a4, (uint64_t)&v6);
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t sub_181BCB408@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_39:
    *(_WORD *)a3 = v7;
    *(_BYTE *)(a3 + 2) = v5;
    return result;
  }

  uint64_t v8 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v10 = sub_181C2F1F4(v8, a2, 10LL);
    uint64_t result = swift_bridgeObjectRelease();
    LODWORD(v5) = HIWORD(v10) & 1;
    goto LABEL_36;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_18264F228();
    }
    uint64_t result = (uint64_t)sub_181C2EF40(v9, v6, 10LL);
    LOWORD(v10) = result;
    LODWORD(v5) = WORD1(result) & 1;
    goto LABEL_36;
  }

  v20[0] = result;
  v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5) {
      goto LABEL_63;
    }
    if (v5 == 1)
    {
LABEL_61:
      LOWORD(v10) = 0;
LABEL_36:
      if ((_DWORD)v5) {
        LOWORD(v7) = 0;
      }
      else {
        LOWORD(v7) = v10;
      }
      goto LABEL_39;
    }

    unsigned int v10 = (BYTE1(result) - 48);
    if (v10 > 9) {
      goto LABEL_32;
    }
    if (v5 != 2)
    {
      LOWORD(v10) = 10 * v10 + (BYTE2(result) - 48);
      uint64_t v11 = v5 - 3;
      if (v5 != 3)
      {
        uint64_t v12 = (unsigned __int8 *)v20 + 3;
        while (1)
        {
          unsigned int v13 = *v12 - 48;
          if (v13 > 9) {
            goto LABEL_32;
          }
          unsigned int v10 = (unsigned __int16)(10 * v10) + v13;
          if ((v10 & 0x10000) != 0) {
            goto LABEL_32;
          }
          LODWORD(v5) = 0;
          ++v12;
          if (!--v11) {
            goto LABEL_36;
          }
        }
      }
    }

uint64_t sub_181BCB714(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = sub_181BC9AEC(a1, a3, 0LL, a4, (uint64_t)&v6);
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t sub_181BCB764@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    LOBYTE(v5) = 1;
LABEL_41:
    *(_DWORD *)a3 = v7;
    *(_BYTE *)(a3 + 4) = v5;
    return result;
  }

  uint64_t v8 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_181C2F2E8(v8, a2, 10LL);
    swift_bridgeObjectRelease();
    uint64_t v5 = HIDWORD(v27) & 1;
    uint64_t result = v27;
LABEL_38:
    if ((_DWORD)v5) {
      LODWORD(v7) = 0;
    }
    else {
      LODWORD(v7) = result;
    }
    goto LABEL_41;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_18264F228();
    }
    uint64_t result = (uint64_t)sub_181C2EF54(v9, v6, 10LL);
    char v29 = BYTE4(result) & 1;
    LOBYTE(v5) = BYTE4(result) & 1;
    goto LABEL_37;
  }

  v28[0] = result;
  v28[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        uint64_t result = (BYTE1(result) - 48);
        if (result <= 9)
        {
          if (v5 == 2) {
            goto LABEL_36;
          }
          if ((BYTE2(v8) - 48) <= 9u)
          {
            uint64_t result = 10 * (_DWORD)result + (BYTE2(v8) - 48);
            uint64_t v13 = v5 - 3;
            if (v5 != 3)
            {
              uint64_t v14 = (unsigned __int8 *)v28 + 3;
              while (1)
              {
                unsigned int v15 = *v14 - 48;
                if (v15 > 9) {
                  goto LABEL_33;
                }
                uint64_t v16 = 10LL * result;
                if ((v16 & 0xFFFFFFFF00000000LL) != 0) {
                  goto LABEL_33;
                }
                uint64_t result = v16 + v15;
                LOBYTE(v5) = 0;
                ++v14;
                if (!--v13) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }
        }

        goto LABEL_33;
      }

      goto LABEL_63;
    }
  }

  else
  {
    if (result != 45)
    {
      if (v5)
      {
        uint64_t result = (result - 48);
        if (result <= 9)
        {
          if (v5 == 1) {
            goto LABEL_36;
          }
          if ((BYTE1(v8) - 48) <= 9u)
          {
            uint64_t result = 10 * (_DWORD)result + (BYTE1(v8) - 48);
            uint64_t v17 = v5 - 2;
            if (v5 != 2)
            {
              uint64_t v18 = (unsigned __int8 *)v28 + 2;
              while (1)
              {
                unsigned int v19 = *v18 - 48;
                if (v19 > 9) {
                  goto LABEL_33;
                }
                uint64_t v20 = 10LL * result;
                if ((v20 & 0xFFFFFFFF00000000LL) != 0) {
                  goto LABEL_33;
                }
                uint64_t result = v20 + v19;
                LOBYTE(v5) = 0;
                ++v18;
                if (!--v17) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }
        }
      }

uint64_t sub_181BCBA3C@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, unint64_t, uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    char v21 = 1;
LABEL_40:
    *(void *)a5 = v8;
    *(_BYTE *)(a5 + 8) = v21 & 1;
    return result;
  }

  uint64_t v9 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = a3(v9, a2, 10LL);
    char v14 = v31;
    uint64_t result = swift_bridgeObjectRelease();
LABEL_37:
    char v21 = v14 & 1;
    if ((v14 & 1) != 0) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = v12;
    }
    goto LABEL_40;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v11 = sub_18264F228();
    }
    uint64_t result = a4(v11);
    unint64_t v12 = result;
    char v14 = v13 & 1;
    goto LABEL_37;
  }

  v32[0] = result;
  v32[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v7) {
      goto LABEL_64;
    }
    unint64_t v12 = (BYTE1(result) - 48);
    if (v7 != 2)
    {
      unint64_t v12 = 10LL * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      uint64_t v18 = v7 - 3;
      if (v18)
      {
        unsigned int v19 = (unsigned __int8 *)v32 + 3;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_33;
          }
          if (!is_mul_ok(v12, 0xAuLL)) {
            goto LABEL_33;
          }
          BOOL v16 = __CFADD__(10 * v12, v20);
          unint64_t v12 = 10 * v12 + v20;
          if (v16) {
            goto LABEL_33;
          }
          char v14 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }

uint64_t sub_181BCBD48()
{
  *uint64_t v0 = 0xD000000000000011LL;
  v0[1] = 0x800000018272E0A0LL;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x800000018272DFB0LL;
  v0[4] = 165LL;
  return swift_willThrow();
}

uint64_t sub_181BCBDC8()
{
  *uint64_t v0 = 0xD000000000000020LL;
  v0[1] = 0x800000018272E070LL;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x800000018272DFB0LL;
  v0[4] = 169LL;
  return swift_willThrow();
}

uint64_t sub_181BCBE48()
{
  *uint64_t v0 = 0xD00000000000001FLL;
  v0[1] = 0x800000018272E050LL;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x800000018272DFB0LL;
  v0[4] = 173LL;
  return swift_willThrow();
}

uint64_t sub_181BCBEC8()
{
  v0[15] = -18;
  *((void *)v0 + 2) = 0xD00000000000005ELL;
  *((void *)v0 + 3) = 0x800000018272DFB0LL;
  *((void *)v0 + 4) = 177LL;
  return swift_willThrow();
}

uint64_t sub_181BCBF54()
{
  *uint64_t v0 = 0xD000000000000015LL;
  v0[1] = 0x800000018272E030LL;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x800000018272DFB0LL;
  v0[4] = 181LL;
  return swift_willThrow();
}

uint64_t _s7Network25NWApplicationServiceGroupC7membersSayAA10NWEndpointOGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BCBFDC()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_181BCBFE8()
{
  return sub_181BC9CE8();
}

uint64_t sub_181BCC000()
{
  return sub_181BC9D8C() & 1;
}

uint64_t sub_181BCC018()
{
  return sub_181BCA008();
}

double sub_181BCC02C(uint64_t a1)
{
  return sub_181BCA038(a1);
}

float sub_181BCC040(uint64_t a1)
{
  return sub_181BCA24C(a1);
}

uint64_t sub_181BCC054(uint64_t a1, uint64_t a2)
{
  return sub_181BCAD10(a1, a2, (void (*)(uint64_t))sub_181BCA460, MEMORY[0x189618740]);
}

uint64_t sub_181BCC078(uint64_t a1, uint64_t a2)
{
  return sub_181BCB064(a1, a2, (void (*)(uint64_t))sub_181BCA474, MEMORY[0x18961A350]);
}

uint64_t sub_181BCC09C(uint64_t a1, uint64_t a2)
{
  return sub_181BCB3B8(a1, a2, (void (*)(uint64_t))sub_181BCA75C, MEMORY[0x18961A408]);
}

uint64_t sub_181BCC0C0(uint64_t a1, uint64_t a2)
{
  return sub_181BCB714(a1, a2, (void (*)(uint64_t))sub_181BCAA4C, MEMORY[0x18961A458]);
}

uint64_t sub_181BCC0E4(uint64_t a1, uint64_t a2)
{
  return sub_181BCAD10(a1, a2, (void (*)(uint64_t))sub_181BCA460, MEMORY[0x18961A4C0]);
}

uint64_t sub_181BCC108()
{
  return sub_18264F57C();
}

uint64_t sub_181BCC11C(uint64_t a1, uint64_t a2)
{
  return sub_181BCAD10(a1, a2, (void (*)(uint64_t))sub_181BCB050, MEMORY[0x189618CD8]);
}

uint64_t sub_181BCC140(uint64_t a1, uint64_t a2)
{
  return sub_181BCB064(a1, a2, (void (*)(uint64_t))sub_181BCB0B4, MEMORY[0x18961A610]);
}

uint64_t sub_181BCC164(uint64_t a1, uint64_t a2)
{
  return sub_181BCB3B8(a1, a2, (void (*)(uint64_t))sub_181BCB408, MEMORY[0x18961A800]);
}

uint64_t sub_181BCC188(uint64_t a1, uint64_t a2)
{
  return sub_181BCB714(a1, a2, (void (*)(uint64_t))sub_181BCB764, MEMORY[0x18961A860]);
}

uint64_t sub_181BCC1AC(uint64_t a1, uint64_t a2)
{
  return sub_181BCAD10(a1, a2, (void (*)(uint64_t))sub_181BCB050, MEMORY[0x18961A8C8]);
}

uint64_t sub_181BCC1D0()
{
  return sub_18264F588();
}

uint64_t sub_181BCC1E4()
{
  return sub_181BCBD48();
}

uint64_t sub_181BCC1F8()
{
  return sub_18264F528();
}

uint64_t sub_181BCC20C()
{
  return sub_18264F51C();
}

uint64_t sub_181BCC220()
{
  uint64_t result = sub_18264F534();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_181BCC240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC3D0(a1, a2, a3, MEMORY[0x18961A180]);
}

uint64_t sub_181BCC25C()
{
  uint64_t result = sub_18264F540();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_181BCC27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC348(a1, a2, a3, MEMORY[0x18961A1A0]);
}

uint64_t sub_181BCC298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC38C(a1, a2, a3, MEMORY[0x18961A1A8]);
}

uint64_t sub_181BCC2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC3D0(a1, a2, a3, MEMORY[0x18961A1B0]);
}

uint64_t sub_181BCC2D0()
{
  uint64_t result = sub_18264F564();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_181BCC2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC43C(a1, a2, a3, MEMORY[0x18961A1C8]);
}

uint64_t sub_181BCC30C()
{
  uint64_t result = sub_18264F54C();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_181BCC32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC348(a1, a2, a3, MEMORY[0x18961A1C0]);
}

uint64_t sub_181BCC348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_181BCC370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC38C(a1, a2, a3, MEMORY[0x18961A1D0]);
}

uint64_t sub_181BCC38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_181BCC3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC3D0(a1, a2, a3, MEMORY[0x18961A1D8]);
}

uint64_t sub_181BCC3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_181BCC400()
{
  uint64_t result = sub_18264F570();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_181BCC420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BCC43C(a1, a2, a3, MEMORY[0x18961A1E8]);
}

uint64_t sub_181BCC43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_181BCC460()
{
  return sub_18264F558();
}

uint64_t sub_181BCC488()
{
  return sub_181BCBDC8();
}

uint64_t sub_181BCC49C()
{
  return sub_181BCBE48();
}

uint64_t sub_181BCC4B0()
{
  return sub_181BCBEC8();
}

uint64_t sub_181BCC4C4()
{
  return sub_181BCBF54();
}

uint64_t sub_181BCC4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BC9948(a1, a2, a3);
}

uint64_t sub_181BCC4EC()
{
  *uint64_t v0 = 0xD000000000000012LL;
  v0[1] = 0x800000018272E010LL;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x800000018272DFB0LL;
  v0[4] = 58LL;
  return swift_willThrow();
}

uint64_t sub_181BCC570()
{
  *uint64_t v0 = 0xD000000000000016LL;
  v0[1] = 0x800000018272DF90LL;
  v0[2] = 0xD00000000000005ELL;
  v0[3] = 0x800000018272DFB0LL;
  v0[4] = 62LL;
  return swift_willThrow();
}

unint64_t sub_181BCC5F4()
{
  unint64_t result = qword_18C58BCA8[0];
  if (!qword_18C58BCA8[0])
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for NotSupported, &type metadata for NotSupported);
    atomic_store(result, qword_18C58BCA8);
  }

  return result;
}

uint64_t type metadata accessor for TXTRecordDecoder._Decoder._Container( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for TXTRecordDecoder._Decoder._Container);
}

uint64_t sub_181BCC644()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _s7Network16TXTRecordDecoderV8_DecoderVwxx_0()
{
  return swift_bridgeObjectRelease();
}

void *_s7Network16TXTRecordDecoderV8_DecoderVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s7Network16TXTRecordDecoderV8_DecoderVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s7Network16TXTRecordDecoderV8_DecoderVwta_0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7Network16TXTRecordDecoderV8_DecoderVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_181BCC800(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_181BCC840(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

unint64_t sub_181BCC848()
{
  unint64_t result = qword_18C58BD30;
  if (!qword_18C58BD30)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for FailedConvertion,  &type metadata for FailedConvertion);
    atomic_store(result, (unint64_t *)&qword_18C58BD30);
  }

  return result;
}

unint64_t sub_181BCC88C()
{
  unint64_t result = qword_18C58BD38;
  if (!qword_18C58BD38)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for MissingRequiredKey,  &type metadata for MissingRequiredKey);
    atomic_store(result, (unint64_t *)&qword_18C58BD38);
  }

  return result;
}

_BYTE *sub_181BCC8D0@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_181BCC920(a1, MEMORY[0x18961B068], a2);
}

void *sub_181BCC8EC@<X0>(_BYTE *a1@<X8>)
{
  return sub_181C86950(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

_BYTE *sub_181BCC904@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_181BCC920(a1, MEMORY[0x18961B060], a2);
}

_BYTE *sub_181BCC920@<X0>(_BYTE *result@<X0>, uint64_t (*a2)(void)@<X1>, BOOL *a3@<X8>)
{
  unsigned int v4 = *result;
  BOOL v5 = v4 > 0x20;
  uint64_t v6 = (1LL << v4) & 0x100003E01LL;
  BOOL v7 = v5 || v6 == 0;
  BOOL v8 = v7 && (result = (_BYTE *)a2()) != 0LL && *result == 0;
  *a3 = v8;
  return result;
}

unint64_t sub_181BCC990()
{
  unint64_t result = qword_18C58BD40;
  if (!qword_18C58BD40)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for InvalidValue, &type metadata for InvalidValue);
    atomic_store(result, (unint64_t *)&qword_18C58BD40);
  }

  return result;
}

void *sub_181BCC9DC@<X0>(_BYTE *a1@<X8>)
{
  return sub_181BCC8EC(a1);
}

uint64_t sub_181BCCA00()
{
  nw_protocol_definition_t v0 = nw_protocol_copy_tls_definition();
  type metadata accessor for NWProtocolDefinition();
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v3 = sub_18264EA48();
  uint64_t v5 = v4;

  uint64_t result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_18C58BD48 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolTLS.definition.getter()
{
  if (qword_18C58B080 != -1) {
    swift_once();
  }
  return swift_retain();
}

sec_protocol_options_t sub_181BCCAD0()
{
  return nw_tls_copy_sec_protocol_options(*(nw_protocol_options_t *)(v0 + 16));
}

BOOL sub_181BCCAD8(nw_protocol_options *a1)
{
  uint64_t v1 = nw_protocol_options_copy_definition(a1);
  id v2 = nw_protocol_copy_tls_definition();
  BOOL is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolTLS.Options.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = nw_tls_create_options();
  return v0;
}

uint64_t NWProtocolTLS.Options.init()()
{
  *(void *)(v0 + 16) = nw_tls_create_options();
  return v0;
}

uint64_t sub_181BCCB80(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t NWProtocolTLS.Options.deinit()
{
  return v0;
}

sec_protocol_metadata_t sub_181BCCBD0()
{
  return nw_tls_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(v0 + 16));
}

BOOL sub_181BCCBD8(nw_protocol_metadata *a1)
{
  return nw_protocol_metadata_is_tls(a1);
}

uint64_t _s7Network13NWProtocolTLSC7OptionsCfD_0()
{
  return swift_deallocClassInstance();
}

uint64_t NWProtocolTLS.deinit()
{
  return v0;
}

uint64_t NWProtocolTLS.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NWProtocolTLS()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolTLS.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTLS.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of NWProtocolTLS.Options.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for NWProtocolTLS.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTLS.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t NWActorSystemInvocationEncoder.recordGenericSubstitution<A>(_:)()
{
  uint64_t result = sub_18264F2E8();
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = v2;
    uint64_t v5 = *v0;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_181BC4728(0LL, v5[2] + 1LL, 1, v5);
      uint64_t v5 = (void *)result;
    }

    unint64_t v7 = v5[2];
    unint64_t v6 = v5[3];
    if (v7 >= v6 >> 1)
    {
      uint64_t result = (uint64_t)sub_181BC4728((void *)(v6 > 1), v7 + 1, 1, v5);
      uint64_t v5 = (void *)result;
    }

    v5[2] = v7 + 1;
    BOOL v8 = &v5[2 * v7];
    v8[4] = v3;
    v8[5] = v4;
    *uint64_t v0 = v5;
  }

  return result;
}

uint64_t NWActorSystemInvocationEncoder.recordArgument<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_conformsToProtocol();
  uint64_t v5 = swift_conformsToProtocol();
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v18 - v10;
  sub_18264E6F4();
  sub_18264E6E8();
  char v13 = (uint64_t *)(v2 + 8);
  unint64_t v12 = *(void **)(v2 + 8);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v13 = (uint64_t)v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v12 = sub_181BC4848(0LL, v12[2] + 1LL, 1, v12);
    uint64_t *v13 = (uint64_t)v12;
  }

  unint64_t v16 = v12[2];
  unint64_t v15 = v12[3];
  if (v16 >= v15 >> 1) {
    uint64_t *v13 = (uint64_t)sub_181BC4848((void *)(v15 > 1), v16 + 1, 1, v12);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, a2);
  sub_181BCD300(v16, (uint64_t)v9, v13, a2, v4, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, a2);
}

uint64_t NWActorSystemInvocationEncoder.recordReturnType<A>(_:)()
{
  return swift_conformsToProtocol();
}

void *sub_181BCCF3C(uint64_t a1, uint64_t a2, int a3)
{
  LODWORD(v36) = a3;
  uint64_t v7 = sub_18264F30C();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NWFileSerializationContext(0LL);
  MEMORY[0x1895F8858](v11);
  char v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(v3 + 8);
  sub_181BCD38C(a1, (uint64_t)v13);
  sub_181BC9248( a2,  (uint64_t)&v13[*(int *)(v11 + 20)],  (uint64_t (*)(void))type metadata accessor for NWActorID);
  sub_18264E40C();
  swift_allocObject();
  uint64_t v14 = sub_18264E400();
  if (qword_18C58B268 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v7, (uint64_t)qword_18C5A4A48);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, v7);
  uint64_t v34 = v11;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v33);
  sub_181BC9248( (uint64_t)v13,  (uint64_t)boxed_opaque_existential_0,  type metadata accessor for NWFileSerializationContext);
  unint64_t v17 = (void (*)(_BYTE *, void))sub_18264E3F4();
  sub_181C35004((uint64_t)v33, (uint64_t)v10);
  v17(v35, 0LL);
  sub_181BCD3E8((uint64_t)v13);
  uint64_t v18 = *(void *)(v32 + 16);
  if (v18)
  {
    uint64_t v19 = v32 + 32;
    swift_bridgeObjectRetain();
    unsigned int v20 = (void *)MEMORY[0x18961AFE8];
    uint64_t v21 = v36 & 1;
    uint64_t v36 = v14;
    while (1)
    {
      sub_181BCD424(v19, (uint64_t)v33);
      uint64_t v22 = v34;
      __swift_project_boxed_opaque_existential_2(v33, v34);
      uint64_t v23 = sub_181C5409C(v14, v21, v22);
      if (v4) {
        break;
      }
      uint64_t v25 = v23;
      unint64_t v26 = v24;
      sub_181BCD4AC(v23, v24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v20 = sub_181BC496C(0LL, v20[2] + 1LL, 1, v20);
      }
      unint64_t v28 = v20[2];
      unint64_t v27 = v20[3];
      if (v28 >= v27 >> 1) {
        unsigned int v20 = sub_181BC496C((void *)(v27 > 1), v28 + 1, 1, v20);
      }
      v20[2] = v28 + 1;
      unsigned int v29 = &v20[2 * v28];
      v29[4] = v25;
      v29[5] = v26;
      sub_181BCD4F0(v25, v26);
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
      v19 += 48LL;
      --v18;
      uint64_t v14 = v36;
      if (!v18)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v20;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
  }

  else
  {
    swift_release();
    return (void *)MEMORY[0x18961AFE8];
  }

  return v20;
}

uint64_t sub_181BCD244()
{
  return NWActorSystemInvocationEncoder.recordGenericSubstitution<A>(_:)();
}

uint64_t sub_181BCD258(uint64_t a1, uint64_t a2)
{
  return NWActorSystemInvocationEncoder.recordArgument<A>(_:)(a1, a2);
}

uint64_t sub_181BCD2B4()
{
  return NWActorSystemInvocationEncoder.recordReturnType<A>(_:)();
}

_OWORD *sub_181BCD300(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(boxed_opaque_existential_0, a2, a4);
  uint64_t v11 = *a3;
  *(void *)(v11 + 16) = a1 + 1;
  return sub_181BCD534(&v13, (_OWORD *)(v11 + 48 * a1 + 32));
}

ValueMetadata *type metadata accessor for NWActorSystemInvocationEncoder()
{
  return &type metadata for NWActorSystemInvocationEncoder;
}

uint64_t sub_181BCD38C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_181BCD3E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWFileSerializationContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181BCD424(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *__swift_project_boxed_opaque_existential_2(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_181BCD4AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_181BCD4F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

_OWORD *sub_181BCD534(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_181BCD54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264F30C();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_18264E3DC();
  swift_allocObject();
  uint64_t v8 = sub_18264E3D0();
  sub_18264F2F4();
  uint64_t v16 = type metadata accessor for NWActorSystem();
  v15[0] = a1;
  swift_retain();
  uint64_t v9 = (void (*)(_BYTE *, void))sub_18264E3C4();
  sub_181C35004((uint64_t)v15, (uint64_t)v7);
  v9(v14, 0LL);
  if (qword_18C58B268 != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v4, (uint64_t)qword_18C5A4A48);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  uint64_t v16 = type metadata accessor for NWFileSerializationContext(0LL);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v15);
  sub_181BCD6CC(a2, (uint64_t)boxed_opaque_existential_0);
  uint64_t v12 = (void (*)(_BYTE *, void))sub_18264E3C4();
  sub_181C35004((uint64_t)v15, (uint64_t)v7);
  v12(v14, 0LL);
  return v8;
}

uint64_t sub_181BCD6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWFileSerializationContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t HTTPRequest.url.getter@<X0>(uint64_t a1@<X8>)
{
  if (!v1[8]) {
    goto LABEL_6;
  }
  uint64_t v3 = v1[15];
  if (!v3) {
    goto LABEL_6;
  }
  unint64_t v4 = v1[13];
  uint64_t v5 = v1[14];
  uint64_t v6 = v1[16];
  uint64_t v7 = v1[17];
  uint64_t v9 = v1[18];
  uint64_t v8 = v1[19];
  uint64_t v11 = v1[20];
  uint64_t v10 = v1[21];
  uint64_t v12 = v1[22];
  uint64_t v13 = v1[23];
  uint64_t v15 = v1[24];
  uint64_t v14 = v1[25];
  uint64_t v17 = v1[26];
  uint64_t v16 = v1[27];
  unint64_t v18 = v1[12];
  v25[0] = v5;
  v25[1] = v3;
  void v25[2] = v6;
  v25[3] = v7;
  char v26 = v9;
  uint64_t v27 = v8;
  uint64_t v28 = v11;
  if (v12)
  {
    uint64_t v22 = v5;
    uint64_t v23 = v12;
    unint64_t v21 = v4;
    v29[0] = v10;
    v29[1] = v12;
    v29[2] = v13;
    v29[3] = v15;
    char v30 = v14;
    uint64_t v31 = v17;
    uint64_t v32 = v16;
    if ((sub_181BCE7EC(v18, v4) & 1) != 0)
    {
      v24[0] = v18;
      v24[1] = v21;
      sub_181BCECA4(v22, v3);
      sub_181BCECA4(v10, v23);
      sub_181BCECA4(v22, v3);
      sub_181BCECA4(v10, v23);
      sub_181BCECA4(v22, v3);
      sub_181BCECA4(v10, v23);
      swift_bridgeObjectRetain();
      sub_181BCE980(v24, (uint64_t)v25, (uint64_t)v29, a1);
      swift_bridgeObjectRelease();
      sub_181BCECE0(v22, v3);
      sub_181BCECE0(v10, v23);
      sub_181BCECE0(v22, v3);
      return sub_181BCECE0(v10, v23);
    }

    else
    {
      sub_181BCECA4(v10, v23);
      sub_181BCECA4(v22, v3);
      sub_181BCECA4(v10, v23);
      sub_181BCECA4(v22, v3);
      sub_181C94388(v18, v21, (uint64_t)v25, (uint64_t)v29, a1);
      sub_181BCECE0(v22, v3);
      return sub_181BCECE0(v10, v23);
    }
  }

  else
  {
LABEL_6:
    uint64_t v20 = sub_18264E568();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a1,  1LL,  1LL,  v20);
  }

uint64_t sub_181BCDB1C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v2);
  unint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BCED1C(a1, (uint64_t)v4);
  return HTTPRequest.url.setter((uint64_t)v4);
}

uint64_t HTTPRequest.url.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_18264E568();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BCED1C(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_181BCED64((uint64_t)v6);
    sub_181BCECE0(*(void *)(v2 + 56), *(void *)(v2 + 64));
    *(void *)(v2 + 104) = 0LL;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    sub_181BCECE0(*(void *)(v2 + 112), *(void *)(v2 + 120));
    *(void *)(v2 + 160) = 0LL;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    sub_181BCECE0(*(void *)(v2 + 168), *(void *)(v2 + 176));
    *(void *)(v2 + 216) = 0LL;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    return sub_181BCED64(a1);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_181BCE150();
    uint64_t v13 = v12;
    unint64_t v14 = sub_18264EB20();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    HTTPRequest.scheme.setter(v14, v16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      unint64_t v17 = sub_18264EB20();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v17 = 0LL;
      unint64_t v19 = 0LL;
    }

    HTTPRequest.authority.setter(v17, v19);
    unint64_t v20 = sub_18264EB20();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    HTTPRequest.path.setter(v20, v22);
    sub_181BCED64(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

uint64_t sub_181BCDDE0@<X0>( char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = *(void *)(a3 + 40);
  unint64_t v11 = *(void *)(a3 + 48);
  if ((sub_181BCE7EC(v12, v11) & 1) == 0) {
    return sub_181C94874(v12, v11, a4, a5, a1, a2, a6);
  }
  swift_bridgeObjectRetain();
  if ((v11 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_181C8B3F4();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    unint64_t v11 = v17;
    if ((v17 & 0x2000000000000000LL) == 0)
    {
LABEL_4:
      if ((v12 & 0x1000000000000000LL) != 0)
      {
        uint64_t v13 = (char *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
        unint64_t v14 = (char *)(v12 & 0xFFFFFFFFFFFFLL);
      }

      else
      {
        uint64_t v13 = (char *)sub_18264F228();
        unint64_t v14 = v18;
      }

      goto LABEL_9;
    }
  }

  else if ((v11 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_4;
  }

  unint64_t v14 = (char *)(HIBYTE(v11) & 0xF);
  v19[0] = v12;
  v19[1] = v11 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = (char *)v19;
LABEL_9:
  sub_181BCDF08(a4, a5, a1, a2, v13, v14, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181BCDF08@<X0>( char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v13 = sub_18264E568();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  unint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  uint64_t result = MEMORY[0x1895F8858](v17);
  unint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v21 = a2 + 3;
  if (__OFADD__(a2, 3LL))
  {
    __break(1u);
    goto LABEL_12;
  }

  BOOL v22 = __OFADD__(v21, a4);
  uint64_t v23 = &a4[(void)v21];
  if (v22)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v22 = __OFADD__(v23, a6);
  uint64_t v24 = (uint64_t)&a6[(void)v23];
  if (v22)
  {
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v34 = a7;
  uint64_t v36 = sub_181BC4A78(0LL, v24 & ~(v24 >> 63), 0, MEMORY[0x18961AFE8]);
  sub_181C54224(a1, a2);
  sub_181C54438(3092282LL, 0xE300000000000000LL);
  sub_181C54224(a3, a4);
  sub_181C54224(v35, a6);
  uint64_t v25 = v36;
  CFIndex v26 = *((void *)v36 + 2);
  uint64_t v27 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  swift_bridgeObjectRetain();
  CFURLRef v28 = CFURLCreateAbsoluteURLWithBytes(v27, (const UInt8 *)v25 + 32, v26, 0x600u, 0LL, 0);
  if (v28)
  {
    CFURLRef v29 = v28;
    sub_18264E538();
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v16, v13);
    char v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v30(v20, 0LL, 1LL, v13);
  }

  else
  {
    char v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v30(v20, 1LL, 1LL, v13);
  }

  swift_bridgeObjectRelease_n();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v20, 1LL, v13) == 1)
  {
    sub_181BCED64((uint64_t)v20);
    uint64_t v31 = 1LL;
    uint64_t v32 = v34;
  }

  else
  {
    uint64_t v32 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v34, v20, v13);
    uint64_t v31 = 0LL;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30)(v32, v31, 1LL, v13);
}

uint64_t sub_181BCE150()
{
  v12[3] = *MEMORY[0x1895F89C0];
  uint64_t v0 = sub_18264E568();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_18264E4FC();
  uint64_t v4 = (const __CFURL *)sub_18264E520();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  CFIndex isStackAllocationSafe = CFURLGetBytes(v4, 0LL, 0LL);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  CFIndex v6 = isStackAllocationSafe;
  if (isStackAllocationSafe <= 1024
    || (CFIndex isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    sub_181BCE540(&v11[-v7], v6, v4, v12);
    uint64_t v8 = v12[0];
  }

  else
  {
    uint64_t v9 = (UInt8 *)swift_slowAlloc();
    sub_181BCE540(v9, v6, v4, v12);
    MEMORY[0x186E12168](v9, -1LL, -1LL);

    return v12[0];
  }

  return v8;
}

void (*HTTPRequest.url.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040) - 8) + 64LL);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  memcpy(v6, v1, sizeof(v6));
  HTTPRequest.url.getter((uint64_t)v4);
  return sub_181BCE3A8;
}

void sub_181BCE3A8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_181BCED1C((uint64_t)v3, (uint64_t)v2);
    HTTPRequest.url.setter((uint64_t)v2);
    sub_181BCED64((uint64_t)v3);
  }

  else
  {
    HTTPRequest.url.setter((uint64_t)v3);
  }

  free(v3);
  free(v2);
}

void *HTTPRequest.init(method:url:headerFields:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v20 = *a3;
  sub_181BCE150();
  uint64_t v8 = v7;
  unint64_t v9 = sub_18264EB20();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_18264EB20();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease_n();
  }

  else
  {
    unint64_t v12 = 0LL;
    unint64_t v14 = 0LL;
  }

  unint64_t v15 = sub_18264EB20();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  v23[0] = v6;
  v23[1] = v5;
  uint64_t v22 = v20;
  HTTPRequest.init(method:scheme:authority:path:headerFields:)(v23, v9, v11, v12, v14, v15, v17, &v22, (uint64_t)__src);
  uint64_t v18 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL))(a2, v18);
  return memcpy(a4, __src, 0x120uLL);
}

uint64_t sub_181BCE540@<X0>( UInt8 *buffer@<X0>, CFIndex bufferLength@<X1>, CFURLRef url@<X2>, uint64_t *a4@<X8>)
{
  CFRange v7 = CFURLGetByteRangeForComponent(url, kCFURLComponentScheme, 0LL);
  if (v7.location == -1)
  {
    __break(1u);
    goto LABEL_41;
  }

  if (__OFADD__(v7.location, v7.length))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  if (v7.location + v7.length < v7.location)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  uint64_t v8 = sub_181C8BAF4((char *)v7.location, v7.length);
  CFRange v9 = CFURLGetByteRangeForComponent(url, kCFURLComponentHost, 0LL);
  if (v9.location == -1)
  {
    uint64_t v14 = 0LL;
    goto LABEL_15;
  }

  CFIndex length = v9.length;
  CFRange v11 = CFURLGetByteRangeForComponent(url, kCFURLComponentPort, 0LL);
  if (v11.location != -1)
  {
    CFIndex v12 = v11.location + v11.length;
    if (__OFADD__(v11.location, v11.length))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    CFIndex length = v12 - v9.location;
    if (__OFSUB__(v12, v9.location))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
  }

  if (__OFADD__(v9.location, length)) {
    goto LABEL_43;
  }
  if (v9.location + length < v9.location)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  if (buffer) {
    unint64_t v13 = (char *)&buffer[v9.location];
  }
  else {
    unint64_t v13 = 0LL;
  }
  uint64_t v14 = sub_181C8BAF4(v13, length);
LABEL_15:
  CFRange v15 = CFURLGetByteRangeForComponent(url, kCFURLComponentPath, 0LL);
  CFIndex location = v15.location;
  CFRange v18 = CFURLGetByteRangeForComponent(url, kCFURLComponentQuery, 0LL);
  CFIndex v17 = v18.length;
  if (v15.location == -1) {
    goto LABEL_21;
  }
  if (v18.location != -1)
  {
    CFIndex v19 = v18.location + v18.length;
    if (__OFADD__(v18.location, v18.length))
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }

    CFIndex v17 = v19 - v15.location;
    if (!__OFSUB__(v19, v15.location))
    {
LABEL_22:
      if (v15.length) {
        goto LABEL_23;
      }
      goto LABEL_31;
    }

    __break(1u);
LABEL_21:
    CFIndex location = v18.location;
    goto LABEL_22;
  }

  CFIndex v17 = v15.length;
  if (v15.length)
  {
LABEL_23:
    if (!__OFADD__(location, v17))
    {
      if (location + v17 >= location)
      {
        if (buffer) {
          uint64_t v20 = (char *)&buffer[location];
        }
        else {
          uint64_t v20 = 0LL;
        }
        uint64_t result = sub_181C8BAF4(v20, v17);
        goto LABEL_29;
      }

      goto LABEL_46;
    }

unint64_t sub_181BCE7EC(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE((*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6) = 1;
  }
  uint64_t v7 = 4LL << v6;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = sub_181C23710(v8, a1, a2);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = sub_18264EBC8();
      char v13 = result;
      if (v10 == v7) {
        goto LABEL_24;
      }
LABEL_19:
      if ((a2 & 0x1000000000000000LL) == 0) {
        goto LABEL_7;
      }
LABEL_20:
      if (v4 <= v8 >> 16) {
        goto LABEL_28;
      }
      unint64_t v8 = sub_18264EB98();
      if (v13 < 0) {
        return v9 == v5;
      }
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        v15[0] = a1;
        v15[1] = v16;
        char v13 = *((_BYTE *)v15 + v12);
        if (v10 == v7) {
          goto LABEL_24;
        }
        goto LABEL_19;
      }

      unint64_t result = v14;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = sub_18264F228();
      }
      char v13 = *(_BYTE *)(result + v12);
      if (v10 != v7) {
        goto LABEL_19;
      }
LABEL_24:
      unint64_t result = sub_181C23710(v8, a1, a2);
      unint64_t v8 = result;
      if ((a2 & 0x1000000000000000LL) != 0) {
        goto LABEL_20;
      }
LABEL_7:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v13 < 0) {
        return v9 == v5;
      }
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_181BCE980@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  if ((v9 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = sub_181C8B3F4();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    *a1 = v8;
    a1[1] = v22;
    unint64_t v9 = v22;
    if ((v22 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
  }

  else if ((v9 & 0x2000000000000000LL) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      CFRange v11 = (char *)(v8 & 0xFFFFFFFFFFFFLL);
    }

    else
    {
      unint64_t v10 = (char *)sub_18264F228();
      CFRange v11 = v27;
    }

    unint64_t v13 = *(void *)(a2 + 40);
    unint64_t v12 = *(void *)(a2 + 48);
    if ((sub_181BCE7EC(v13, v12) & 1) != 0)
    {
      unint64_t v29 = v13;
      uint64_t v30 = v12;
      sub_181BCEDC8(a3);
      sub_181BCEDC8(a3);
      sub_181BCEDC8(a3);
      swift_bridgeObjectRetain();
      sub_181BCEBBC((uint64_t *)&v29, a3, v10, v11, a4);
      if (!v4) {
        goto LABEL_12;
      }
      sub_181BCEE10(a3);
      sub_181BCEE10(a3);
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_18;
    }

    sub_181BCEDC8(a3);
    uint64_t v14 = a4;
    unint64_t v15 = v13;
    unint64_t v16 = v12;
    uint64_t v17 = a3;
    CFRange v18 = v10;
    CFIndex v19 = v11;
LABEL_14:
    sub_181C9460C(v15, v16, v17, v18, v19, v14);
    goto LABEL_15;
  }

  CFIndex v23 = (char *)(HIBYTE(v9) & 0xF);
  unint64_t v29 = v8;
  uint64_t v30 = v9 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v25 = *(void *)(a2 + 40);
  unint64_t v24 = *(void *)(a2 + 48);
  if ((sub_181BCE7EC(v25, v24) & 1) == 0)
  {
    sub_181BCEDC8(a3);
    CFRange v18 = (char *)&v29;
    uint64_t v14 = a4;
    unint64_t v15 = v25;
    unint64_t v16 = v24;
    uint64_t v17 = a3;
    CFIndex v19 = v23;
    goto LABEL_14;
  }

  v28[0] = v25;
  v28[1] = v24;
  sub_181BCEDC8(a3);
  sub_181BCEDC8(a3);
  sub_181BCEDC8(a3);
  swift_bridgeObjectRetain();
  sub_181BCEBBC(v28, a3, (char *)&v29, v23, a4);
  if (!v4)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    sub_181BCEE10(a3);
    sub_181BCEE10(a3);
LABEL_15:
    sub_181BCEE10(a2);
    return sub_181BCEE10(a3);
  }

uint64_t sub_181BCEBBC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  if ((v10 & 0x1000000000000000LL) == 0)
  {
    if ((v10 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v12 = (char *)(HIBYTE(v10) & 0xF);
    v17[0] = v9;
    v17[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    CFRange v11 = (char *)v17;
    goto LABEL_7;
  }

  uint64_t v9 = sub_181C8B3F4();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  *a1 = v9;
  a1[1] = v15;
  unint64_t v10 = v15;
  if ((v15 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v9 & 0x1000000000000000LL) != 0)
  {
    CFRange v11 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
    unint64_t v12 = (char *)(v9 & 0xFFFFFFFFFFFFLL);
  }

  else
  {
    CFRange v11 = (char *)sub_18264F228();
  }

uint64_t sub_181BCECA4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t sub_181BCECE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_181BCED1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181BCED64(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181BCEDA4@<X0>(uint64_t a1@<X8>)
{
  return HTTPRequest.url.getter(a1);
}

uint64_t sub_181BCEDC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_181BCEE10(uint64_t a1)
{
  return a1;
}

uint64_t sub_181BCEE58(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t sub_181BCEE7C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2) & 1;
}

uint64_t NWBrowser.__allocating_init(for:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  NWBrowser.init(for:using:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall NWBrowser.cancel()()
{
  if (nw_utilities_minos_atleast())
  {
    uint64_t v1 = *(void *)(v0 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 80));
    sub_181BD25B8(*(void *)(v1 + 40));
    *(void *)(v1 + 40) = 0LL;
    *(void *)(v1 + 48) = 0LL;
    sub_181BD25B8(*(void *)(v1 + 56));
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 80));
  }

  nw_browser_cancel(*(nw_browser_t *)(v0 + 16));
}

void NWBrowser.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 80));
  uint64_t v6 = *(void *)(v5 + 40);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 80));
  if (a1)
  {
    uint64_t v7 = *(nw_browser **)(v2 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    v10[4] = sub_181BD254C;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    v10[2] = sub_181BD1944;
    v10[3] = &block_descriptor_0;
    uint64_t v9 = _Block_copy(v10);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_browser_set_state_changed_handler(v7, v9);
    sub_181BD25B8(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_browser_set_state_changed_handler(*(nw_browser_t *)(v2 + 16), 0LL);
  }

uint64_t NWBrowser.browseResultsChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 80));
  uint64_t v6 = *(void *)(v5 + 56);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a2;
  LODWORD((*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6) = *(unsigned __int8 *)(v5 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 80));
  if ((_DWORD)v6 != 1) {
    return sub_181BD25B8(a1);
  }
  uint64_t v7 = *(nw_browser **)(v2 + 16);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  void v11[4] = sub_181BD25FC;
  v11[5] = v8;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  v11[2] = sub_181BD219C;
  v11[3] = &block_descriptor_6_0;
  uint64_t v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_181BC904C(a1);
  swift_release();
  nw_browser_set_browse_results_changed_handler(v7, v9);
  sub_181BD25B8(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void NWBrowser.start(queue:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 80));
  uint64_t v5 = *(void **)(v4 + 72);
  uint64_t v6 = a1;

  *(void *)(v4 + 72) = a1;
  *(_BYTE *)(v4 + 32) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 80));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 80));
  sub_181BD2210(v4 + 16, &v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 80));
  if ((void)v11)
  {
    __int128 v10 = v11;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    uint64_t v8 = sub_181BD2608;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
  }

  sub_181BC904C((uint64_t)v8);
  sub_181BC904C((uint64_t)v8);
  NWBrowser.browseResultsChangedHandler.setter((uint64_t)v8, v7);
  sub_181BD25B8((uint64_t)v8);
  sub_181BD25B8((uint64_t)v8);
  uint64_t v9 = *(nw_browser **)(v2 + 16);
  nw_browser_set_queue(v9, v6);
  nw_browser_start(v9);
}

uint64_t NWBrowser.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

void *static NWBrowser.Descriptor.Options.Scope.all.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_181BCF4E8(&qword_18C58B088, &dword_18C58BD50, a1);
}

int *NWBrowser.Descriptor.Options.init(scope:)@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  if (qword_18C58B088 != -1) {
    uint64_t result = (int *)swift_once();
  }
  if (qword_18C58B090 != -1) {
    uint64_t result = (int *)swift_once();
  }
  int v4 = dword_18C58BD54;
  *(void *)a2 = MEMORY[0x18961AFE8];
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

int *NWBrowser.Descriptor.Options.init(scope:deviceFilter:)@<X0>( int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *result;
  if (qword_18C58B088 != -1) {
    uint64_t result = (int *)swift_once();
  }
  if (qword_18C58B090 != -1) {
    uint64_t result = (int *)swift_once();
  }
  int v6 = dword_18C58BD54;
  *(void *)a3 = a2;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void *static NWBrowser.Descriptor.Options.DeviceType.all.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_181BCF4E8(&qword_18C58B090, &dword_18C58BD54, a1);
}

void *sub_181BCF4E8@<X0>(void *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*result != -1LL) {
    uint64_t result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

int *NWBrowser.Descriptor.Options.init(scope:deviceFilter:deviceTypes:)@<X0>( int *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *result;
  int v7 = *a3;
  if (qword_18C58B088 != -1) {
    uint64_t result = (int *)swift_once();
  }
  if (qword_18C58B090 != -1) {
    uint64_t result = (int *)swift_once();
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 12) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  return result;
}

uint64_t NWBrowser.Descriptor.Options.Scope.rawValue.getter()
{
  return *v0;
}

void static NWBrowser.Descriptor.Options.Scope.everyone.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void sub_181BCF5C8()
{
  dword_18C58BD50 = 255;
}

uint64_t sub_181BCF640@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    int v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }

    while (v3);
  }

  else
  {
    int v4 = 0;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_181BCF694@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    int v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }

    while (v3);
  }

  else
  {
    LOBYTE(v4) = 0;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_181BCF6F0()
{
  return sub_18264F0FC();
}

uint64_t sub_181BCF708@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_181BCF640(a1, a2);
}

uint64_t NWBrowser.Descriptor.Options.DeviceType.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NWBrowser.Descriptor.Options.DeviceType.rawValue.getter()
{
  return *v0;
}

void static NWBrowser.Descriptor.Options.DeviceType.iphone.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static NWBrowser.Descriptor.Options.DeviceType.ipad.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static NWBrowser.Descriptor.Options.DeviceType.mac.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static NWBrowser.Descriptor.Options.DeviceType.watch.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static NWBrowser.Descriptor.Options.DeviceType.tv.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static NWBrowser.Descriptor.Options.DeviceType.homepod.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static NWBrowser.Descriptor.Options.DeviceType.vision.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void sub_181BCF780()
{
  dword_18C58BD54 = 127;
}

_DWORD *sub_181BCF7EC@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_181BCF7F8(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_181BCF800@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_181BCF814@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_181BCF828@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_181BCF83C(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_181BCF86C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_181BCF898@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_181BCF8BC(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_181BCF8D0(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_181BCF8E4(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_181BCF8F8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_181BCF90C(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_181BCF920(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_181BCF934(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_181BCF948()
{
  return *v0 == 0;
}

_DWORD *sub_181BCF958(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t NWBrowser.Descriptor.Options.deviceFilter.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NWBrowser.Descriptor.Options.deviceFilter.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *id v1 = a1;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.deviceFilter.modify())()
{
  return nullsub_1;
}

void NWBrowser.Descriptor.Options.scope.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *NWBrowser.Descriptor.Options.scope.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.scope.modify())()
{
  return nullsub_1;
}

void NWBrowser.Descriptor.Options.deviceTypes.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 12);
}

_DWORD *NWBrowser.Descriptor.Options.deviceTypes.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 12) = *result;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.deviceTypes.modify())()
{
  return nullsub_1;
}

uint64_t NWBrowser.Descriptor.Options.applicationServiceEndpointsOnly.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NWBrowser.Descriptor.Options.applicationServiceEndpointsOnly.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*NWBrowser.Descriptor.Options.applicationServiceEndpointsOnly.modify())()
{
  return nullsub_1;
}

void NWBrowser.Descriptor.nw.getter()
{
  __asm { BR              X10 }

nw_browse_descriptor_t sub_181BCFA58()
{
  uint64_t v1 = (const char *)(sub_18264EACC() + 32);
  if (v0) {
    uint64_t v2 = (const char *)(sub_18264EACC() + 32);
  }
  else {
    uint64_t v2 = 0LL;
  }
  nw_browse_descriptor_t bonjour_service = nw_browse_descriptor_create_bonjour_service(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  return bonjour_service;
}

uint64_t NWBrowser.Descriptor.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int type = nw_browse_descriptor_get_type(a1);
  if (type == 2)
  {
    application_service_name = nw_browse_descriptor_get_application_service_name((nw_browse_descriptor_t)a1);
    if (!application_service_name) {
      goto LABEL_8;
    }
    uint64_t v12 = (uint64_t)application_service_name;
    uint64_t v13 = nw_browse_descriptor_get_invitation_scope(a1) - 1;
    if (v13 < 3)
    {
      uint64_t v14 = sub_18264EB80();
      uint64_t v16 = v15;
      uint64_t result = swift_unknownObjectRelease();
      *(void *)a2 = v14;
      *(void *)(a2 + 8) = v16;
      *(void *)(a2 + 16) = v13;
      *(void *)(a2 + 24) = 0LL;
      char v18 = 0x80;
      goto LABEL_18;
    }

    unsigned int browse_scope = nw_browse_descriptor_get_browse_scope(a1);
    uint64_t device_types = nw_browse_descriptor_get_device_types(a1);
    uint64_t v29 = MEMORY[0x18961AFE8];
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = &v29;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_181BC07F0;
    *(void *)(v23 + 24) = v22;
    void aBlock[4] = sub_181BBFA50;
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    _OWORD aBlock[2] = sub_181BCEE7C;
    aBlock[3] = &block_descriptor_18;
    unint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    nw_browse_descriptor_enumerate_device_filters(a1, v24);
    _Block_release(v24);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v12 = sub_18264EB80();
      uint64_t v23 = v26;
      uint64_t isEscapingClosureAtFileLocation = v29;
      uint64_t v27 = qword_18C58B088;
      swift_bridgeObjectRetain();
      if (v27 == -1)
      {
LABEL_15:
        if (qword_18C58B090 != -1) {
          swift_once();
        }
        swift_unknownObjectRelease();
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)a2 = v12;
        *(void *)(a2 + 8) = v23;
        *(void *)(a2 + 16) = isEscapingClosureAtFileLocation;
        *(void *)(a2 + 24) = browse_scope | (unint64_t)(device_types << 32);
        char v18 = 96;
        goto LABEL_18;
      }
    }

    swift_once();
    goto LABEL_15;
  }

  if (type != 1)
  {
LABEL_8:
    uint64_t result = swift_unknownObjectRelease();
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    char v18 = -2;
    goto LABEL_18;
  }

  nw_browse_descriptor_get_bonjour_service_type((nw_browse_descriptor_t)a1);
  uint64_t v5 = sub_18264EB80();
  uint64_t v7 = v6;
  if (nw_browse_descriptor_get_bonjour_service_domain((nw_browse_descriptor_t)a1))
  {
    uint64_t v8 = sub_18264EB80();
    unint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0xE000000000000000LL;
  }

  BOOL include_txt_record = nw_browse_descriptor_get_include_txt_record((nw_browse_descriptor_t)a1);
  uint64_t result = swift_unknownObjectRelease();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v10;
  if (!include_txt_record)
  {
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }

  char v18 = 32;
LABEL_18:
  *(_BYTE *)(a2 + 32) = v18;
  return result;
}

uint64_t sub_181BCFED8@<X0>(nw_browse_result *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (int *)type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v8 = *((void *)v7 - 1);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (nw_txt_record_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v8 + 56))(a2, 1LL, 1LL, v7);
  }
  *unint64_t v10 = a1;
  __int128 v11 = (void *)swift_unknownObjectRetain_n();
  endpoint = (nw_endpoint *)nw_browse_result_get_endpoint(v11);
  sub_181BDA308(endpoint, (uint64_t)v6);
  uint64_t v13 = type metadata accessor for NWEndpoint();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v6, 1LL, v13);
  if ((_DWORD)result == 1) {
    goto LABEL_10;
  }
  sub_181BC928C( (uint64_t)v6,  (uint64_t)v10 + v7[5],  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  uint64_t v34 = (nw_browse_result *)MEMORY[0x18961AFE8];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &v34;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_181BDA1A4;
  *(void *)(v16 + 24) = v15;
  uint64_t v32 = sub_181BC0808;
  uint64_t v33 = v16;
  uint64_t v17 = MEMORY[0x1895F87A8];
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v29 = 1107296256LL;
  uint64_t v30 = sub_181C6AF34;
  uint64_t v31 = &block_descriptor_60;
  char v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_browse_result_enumerate_interfaces(a1, v18);
  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v18 & 1) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  *(nw_browse_result **)((char *)v10 + v7[6]) = v34;
  swift_bridgeObjectRetain();
  CFIndex v19 = nw_browse_result_copy_txt_record_object(a1);
  if (v19)
  {
    nw_txt_record_t v27 = v19;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = MEMORY[0x18961AFF0];
    uint64_t v21 = (uint64_t *)(v20 + 16);
    uint64_t v32 = sub_181BDA1E0;
    uint64_t v33 = v20;
    uint64_t aBlock = v17;
    uint64_t v29 = 1107296256LL;
    uint64_t v30 = sub_181C89CDC;
    uint64_t v31 = &block_descriptor_66;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    nw_txt_record_t v23 = v27;
    nw_txt_record_apply(v27, v22);
    _Block_release(v22);
    swift_beginAccess();
    uint64_t v24 = *v21;
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease_n();
    swift_release();
    unint64_t v25 = (nw_browse_result **)((char *)v10 + v7[7]);
    void *v25 = v24;
    v25[1] = v23;
  }

  else
  {
    swift_unknownObjectRelease_n();
    uint64_t v26 = (nw_browse_result **)((char *)v10 + v7[7]);
    void *v26 = 0LL;
    v26[1] = 0LL;
  }

  swift_bridgeObjectRelease();
  sub_181BC928C((uint64_t)v10, a2, type metadata accessor for NWBrowser.Result);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v8 + 56))(a2, 0LL, 1LL, v7);
  return swift_release();
}

uint64_t sub_181BD028C(uint64_t a1, void **a2)
{
  uint64_t v4 = *a2;
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_181BC4A84(0LL, v4[2] + 1LL, 1, v4);
    *a2 = v4;
  }

  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1) {
    uint64_t v4 = sub_181BC4A84((void *)(v6 > 1), v7 + 1, 1, v4);
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a1;
  *a2 = v4;
  return 1LL;
}

uint64_t NWBrowser.Result.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWBrowser.Result(0LL);
  return sub_181BC9248( v1 + *(int *)(v3 + 20),  a1,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t NWBrowser.Result.interfaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NWBrowser.Result.metadata.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for NWBrowser.Result(0LL) + 28));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_181BD2FFC(v4);
}

uint64_t NWBrowser.Result.Metadata.debugDescription.getter()
{
  uint64_t v1 = *v0;
  if (!*v0) {
    return 0x3E656E6F6E3CLL;
  }
  uint64_t v5 = MEMORY[0x18961AFF0];
  sub_181BD2FFC(v1);
  sub_181BD2FFC(v1);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_181BD279C(v2, &v5);
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_18264E9C4();
  swift_bridgeObjectRelease();
  sub_181BD6288(v1);
  sub_181BD6288(v1);
  return v3;
}

void NWBrowser.Result.hash(into:)()
{
}

uint64_t NWBrowser.Result.Change.Flags.rawValue.getter()
{
  return *v0;
}

uint64_t NWBrowser.Result.Change.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NWBrowser.Result.Change.Flags.identical.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static NWBrowser.Result.Change.Flags.interfaceAdded.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static NWBrowser.Result.Change.Flags.interfaceRemoved.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static NWBrowser.Result.Change.Flags.metadataChanged.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

_BYTE *sub_181BD0534@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181BD0540()
{
  return sub_18264F684();
}

uint64_t sub_181BD0584()
{
  return sub_18264F660();
}

uint64_t sub_181BD05AC()
{
  return sub_18264F684();
}

void sub_181BD05EC(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_181BD05F4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_181BD0608@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_181BD061C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_181BD0630(_BYTE *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_181BD0660@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_181BD068C@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_181BD06B0(_BYTE *result)
{
  *v1 |= *result;
  return result;
}

_BYTE *sub_181BD06C4(_BYTE *result)
{
  *v1 &= *result;
  return result;
}

_BYTE *sub_181BD06D8(_BYTE *result)
{
  *v1 ^= *result;
  return result;
}

_BYTE *sub_181BD06EC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_181BD0700(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_181BD0714(_BYTE *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_181BD0728(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_181BD073C()
{
  return *v0 == 0;
}

_BYTE *sub_181BD074C(_BYTE *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_181BD0760@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_181BD0770(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_181BD077C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWBrowser.Result.Change.init(between:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v48 = a3;
  uint64_t v47 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v4 = MEMORY[0x1895F8858](v47);
  uint64_t v46 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v45 - v7;
  MEMORY[0x1895F8858](v6);
  unint64_t v10 = (char *)&v45 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD58);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v45 = (uint64_t)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (nw_browse_result **)((char *)&v45 - v15);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  CFIndex v19 = (nw_browse_result **)((char *)&v45 - v18);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v22 = (nw_browse_result **)((char *)&v45 - v21);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  unint64_t v25 = (nw_browse_result **)((char *)&v45 - v24);
  MEMORY[0x1895F8858](v23);
  nw_txt_record_t v27 = (nw_browse_result **)((char *)&v45 - v26);
  uint64_t v49 = a1;
  sub_181BD62FC(a1, (uint64_t)&v45 - v26);
  uint64_t v28 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v29 = *(unsigned int (**)(nw_browse_result **, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL);
  if (v29(v27, 1LL, v28) == 1)
  {
    sub_181BDA0F0((uint64_t)v27, &qword_18C58BD58);
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = *v27;
    swift_unknownObjectRetain();
    sub_181BC920C((uint64_t)v27, type metadata accessor for NWBrowser.Result);
  }

  sub_181BD62FC(v50, (uint64_t)v25);
  if (v29(v25, 1LL, v28) == 1)
  {
    sub_181BDA0F0((uint64_t)v25, &qword_18C58BD58);
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v31 = *v25;
    swift_unknownObjectRetain();
    sub_181BC920C((uint64_t)v25, type metadata accessor for NWBrowser.Result);
  }

  nw_browse_result_change_t changes = nw_browse_result_get_changes(v30, v31);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((changes & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    JUMPOUT(0x181BD0C40LL);
  }

  switch(changes)
  {
    case 0uLL:
    case 1uLL:
      sub_181BDA0F0(v50, &qword_18C58BD58);
      sub_181BDA0F0(v49, &qword_18C58BD58);
      return swift_storeEnumTagMultiPayload();
    case 2uLL:
      uint64_t v34 = v50;
      sub_181BD62FC(v50, (uint64_t)v22);
      if (v29(v22, 1LL, v28) == 1) {
        goto LABEL_24;
      }
      sub_181BDA0F0(v34, &qword_18C58BD58);
      sub_181BDA0F0(v49, &qword_18C58BD58);
      sub_181BC928C((uint64_t)v22, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
      goto LABEL_18;
    case 4uLL:
      uint64_t v44 = v49;
      sub_181BD62FC(v49, (uint64_t)v19);
      if (v29(v19, 1LL, v28) == 1) {
        goto LABEL_27;
      }
      sub_181BDA0F0(v50, &qword_18C58BD58);
      sub_181BDA0F0(v44, &qword_18C58BD58);
      sub_181BC928C((uint64_t)v19, (uint64_t)v8, type metadata accessor for NWBrowser.Result);
      swift_storeEnumTagMultiPayload();
      uint64_t v43 = (uint64_t)v8;
      return sub_181BC928C(v43, v48, type metadata accessor for NWBrowser.Result.Change);
    default:
      unsigned int v35 = (changes >> 2) & 0xE;
      if (v35) {
        char v36 = v35;
      }
      else {
        char v36 = 1;
      }
      uint64_t v37 = v49;
      sub_181BD62FC(v49, (uint64_t)v16);
      if (v29(v16, 1LL, v28) == 1) {
        goto LABEL_25;
      }
      unint64_t v10 = v46;
      sub_181BC928C((uint64_t)v16, (uint64_t)v46, type metadata accessor for NWBrowser.Result);
      uint64_t v38 = v50;
      uint64_t v39 = v45;
      sub_181BD62FC(v50, v45);
      if (v29((nw_browse_result **)v39, 1LL, v28) == 1) {
        goto LABEL_26;
      }
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD60);
      uint64_t v41 = (uint64_t)&v10[*(int *)(v40 + 48)];
      uint64_t v42 = *(int *)(v40 + 64);
      sub_181BDA0F0(v38, &qword_18C58BD58);
      sub_181BDA0F0(v37, &qword_18C58BD58);
      sub_181BC928C(v39, v41, type metadata accessor for NWBrowser.Result);
      v10[v42] = v36;
LABEL_18:
      swift_storeEnumTagMultiPayload();
      uint64_t v43 = (uint64_t)v10;
      return sub_181BC928C(v43, v48, type metadata accessor for NWBrowser.Result.Change);
  }

void NWBrowser.Result.Change.hash(into:)()
{
  uint64_t v1 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v2 = MEMORY[0x1895F8858](v1);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = type metadata accessor for NWBrowser.Result.Change(0LL);
  MEMORY[0x1895F8858](v3);
  sub_181BC9248(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v5);
  uint64_t v6 = (char *)sub_181BD0D3C + 4 * byte_18265C7FD[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BD0D3C()
{
  return sub_181BC920C(v1, type metadata accessor for NWBrowser.Result);
}

uint64_t NWBrowser.Result.Change.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181BD0E98()
{
  return sub_18264F684();
}

uint64_t sub_181BD0ED8()
{
  return sub_18264F684();
}

uint64_t NWBrowser.Result.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181BD0F60()
{
  return sub_18264F684();
}

void sub_181BD0FA8()
{
}

uint64_t sub_181BD0FCC()
{
  return sub_18264F684();
}

uint64_t sub_181BD1014@<X0>(nw_error_t error@<X1>, int a2@<W0>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 0:
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v6 = 0x8000000000LL;
      break;
    case 1:
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v6 = 0x8000000001LL;
      break;
    case 2:
      if (!error) {
        goto LABEL_28;
      }
      nw_error_domain_t error_domain = nw_error_get_error_domain(error);
      switch(error_domain)
      {
        case nw_error_domain_tls:
          unsigned int error_code = nw_error_get_error_code(error);
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v6 = error_code | 0x200000000LL;
          break;
        case nw_error_domain_dns:
          unsigned int v12 = nw_error_get_error_code(error);
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v6 = v12 | 0x100000000LL;
          break;
        case nw_error_domain_posix:
          nw_error_get_error_code(error);
          uint64_t v6 = sub_18264E94C();
          uint64_t result = swift_unknownObjectRelease();
          if ((v6 & 0x100000000LL) != 0) {
            uint64_t v6 = 22LL;
          }
          else {
            uint64_t v6 = v6;
          }
          break;
        default:
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v6 = 22LL;
          break;
      }

      break;
    case 4:
      if (!error)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x181BD11F4LL);
      }

      nw_error_domain_t v7 = nw_error_get_error_domain(error);
      switch(v7)
      {
        case nw_error_domain_tls:
          unsigned int v10 = nw_error_get_error_code(error);
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v6 = v10 | 0x4200000000LL;
          break;
        case nw_error_domain_dns:
          unsigned int v11 = nw_error_get_error_code(error);
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v6 = v11 | 0x4100000000LL;
          break;
        case nw_error_domain_posix:
          nw_error_get_error_code(error);
          uint64_t v8 = sub_18264E94C();
          uint64_t result = swift_unknownObjectRelease();
          if ((v8 & 0x100000000LL) != 0) {
            uint64_t v6 = 0x4000000016LL;
          }
          else {
            uint64_t v6 = v8 | 0x4000000000LL;
          }
          break;
        default:
          uint64_t v6 = 0x4000000016LL;
LABEL_4:
          uint64_t result = swift_unknownObjectRelease();
          break;
      }

      break;
    default:
      uint64_t v6 = 0x8000000002LL;
      goto LABEL_4;
  }

  *(_DWORD *)a3 = v6;
  *(_BYTE *)(a3 + 4) = BYTE4(v6);
  return result;
}

Network::NWBrowser::Invitation::Scope_optional __swiftcall NWBrowser.Invitation.Scope.init(rawValue:)( Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_18264F390();
  result.BOOL value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t NWBrowser.Invitation.Scope.rawValue.getter()
{
  uint64_t v1 = 0x73646E65697266LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x656E6F7972657665LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74696D69786F7270LL;
  }
}

uint64_t sub_181BD12C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_181CAB178(*a1, *a2);
}

uint64_t sub_181BD12D4()
{
  return sub_18264F684();
}

uint64_t sub_181BD1378()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181BD13F8()
{
  return sub_18264F684();
}

Network::NWBrowser::Invitation::Scope_optional sub_181BD1498(Swift::String *a1)
{
  return NWBrowser.Invitation.Scope.init(rawValue:)(*a1);
}

void sub_181BD14A4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE900000000000079LL;
  unint64_t v4 = 0xE700000000000000LL;
  uint64_t v5 = 0x73646E65697266LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x656E6F7972657665LL;
    unint64_t v4 = 0xE800000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x74696D69786F7270LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void NWBrowser.Invitation.scope.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *static NWBrowser.Invitation.wrangler(scope:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t NWBrowser.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  unsigned __int8 v6 = *(_BYTE *)(v1 + 64);
  *(_BYTE *)(a1 + 32) = v6;
  return sub_181BD6344(v2, v3, v4, v5, v6);
}

uint64_t NWBrowser.parameters.getter()
{
  return swift_retain();
}

uint64_t NWBrowser.state.getter@<X0>(uint64_t a1@<X8>)
{
  v16[1] = *MEMORY[0x1895F89C0];
  v16[0] = 0LL;
  int state = nw_browser_get_state(*(void **)(v1 + 16), (uint64_t)v16);
  uint64_t v4 = (nw_error *)v16[0];
  switch(state)
  {
    case 0:
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v6 = 0x8000000000LL;
      break;
    case 1:
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v6 = 0x8000000001LL;
      break;
    case 2:
      if (!v16[0]) {
        goto LABEL_27;
      }
      unsigned int v10 = (nw_error *)swift_unknownObjectRetain();
      nw_error_domain_t error_domain = nw_error_get_error_domain(v10);
      switch(error_domain)
      {
        case nw_error_domain_tls:
          unsigned int error_code = nw_error_get_error_code(v4);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v6 = error_code | 0x200000000LL;
          break;
        case nw_error_domain_dns:
          unsigned int v14 = nw_error_get_error_code(v4);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v6 = v14 | 0x100000000LL;
          break;
        case nw_error_domain_posix:
          nw_error_get_error_code(v4);
          uint64_t v6 = sub_18264E94C();
          uint64_t result = swift_unknownObjectRelease_n();
          if ((v6 & 0x100000000LL) != 0) {
            uint64_t v6 = 22LL;
          }
          else {
            uint64_t v6 = v6;
          }
          break;
        default:
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v6 = 22LL;
          break;
      }

      break;
    case 4:
      if (!v16[0])
      {
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x181BD1798LL);
      }

      uint64_t v7 = (nw_error *)swift_unknownObjectRetain();
      nw_error_domain_t v8 = nw_error_get_error_domain(v7);
      switch(v8)
      {
        case nw_error_domain_posix:
          nw_error_get_error_code(v4);
          uint64_t v12 = sub_18264E94C();
          uint64_t result = swift_unknownObjectRelease_n();
          if ((v12 & 0x100000000LL) != 0) {
            uint64_t v6 = 0x4000000016LL;
          }
          else {
            uint64_t v6 = v12 | 0x4000000000LL;
          }
          break;
        case nw_error_domain_dns:
          unsigned int v13 = nw_error_get_error_code(v4);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v6 = v13 | 0x4100000000LL;
          break;
        case nw_error_domain_tls:
          unsigned int v9 = nw_error_get_error_code(v4);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v6 = v9 | 0x4200000000LL;
          break;
        default:
          uint64_t v6 = 0x4000000016LL;
          uint64_t result = swift_unknownObjectRelease_n();
          break;
      }

      break;
    default:
      uint64_t v6 = 0x8000000002LL;
      uint64_t result = swift_unknownObjectRelease();
      break;
  }

  *(_DWORD *)a1 = v6;
  *(_BYTE *)(a1 + 4) = BYTE4(v6);
  return result;
}

uint64_t NWBrowser.browseResults.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 80));
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  return v3;
}

void *NWBrowser.queue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 80));
  uint64_t v3 = *(void **)(v1 + 72);
  id v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t (*NWBrowser.stateUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 20;
  os_unfair_lock_lock(v1 + 20);
  sub_181BD199C(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BD639C;
}

void sub_181BD18C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    id v4 = sub_181BDA300;
  }

  else
  {
    id v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWBrowser.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t sub_181BD1944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181BD199C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    __int128 v6 = sub_181BD639C;
  }

  else
  {
    __int128 v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWBrowser.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  sub_181BD199C(v4, v10);
  os_unfair_lock_unlock(v5);
  __int128 v6 = v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    __int128 v6 = sub_181BDA300;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_181BD1AB8;
}

uint64_t sub_181BD1AB8(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWBrowser.stateUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BC904C,  (uint64_t (*)(uint64_t, uint64_t))sub_181BD25B8);
}

uint64_t (*NWBrowser.browseResultsChangedHandler.getter())(uint64_t, uint64_t)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 20;
  os_unfair_lock_lock(v1 + 20);
  sub_181BD2210(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BD2608;
}

double sub_181BD1B70@<D0>( uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  __int128 v5 = *(os_unfair_lock_s **)(*(void *)a1 + 24LL);
  __int128 v6 = v5 + 4;
  uint64_t v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

uint64_t sub_181BD1BE4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181BD2608;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  return NWBrowser.browseResultsChangedHandler.setter((uint64_t)v4, v3);
}

uint64_t sub_181BD1C64( uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  v30[0] = a6;
  uint64_t v9 = type metadata accessor for NWBrowser.Result.Change(0LL);
  MEMORY[0x1895F8858](v9);
  unsigned int v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD58);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)v30 - v17;
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v21 = (char *)v30 - v20;
  MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)v30 - v22;
  uint64_t v24 = (nw_browse_result *)swift_unknownObjectRetain();
  sub_181BCFED8(v24, (uint64_t)v23);
  unint64_t v25 = (nw_browse_result *)swift_unknownObjectRetain();
  sub_181BCFED8(v25, (uint64_t)v21);
  sub_181BD62FC((uint64_t)v23, (uint64_t)v18);
  sub_181BD62FC((uint64_t)v21, (uint64_t)v15);
  NWBrowser.Result.Change.init(between:_:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v11);
  uint64_t v26 = *(void *)(a4 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 80));
  sub_181BD1E70(v26 + 16, (uint64_t)v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 80));
  if ((a3 & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 80));
    uint64_t v27 = *(void *)(v26 + 16);
    uint64_t v28 = *(void *)(v26 + 24);
    *(void *)(v26 + 24) = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 80));
    if (a5) {
      a5(v27, v28);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_181BDA0F0((uint64_t)v21, &qword_18C58BD58);
  sub_181BDA0F0((uint64_t)v23, &qword_18C58BD58);
  return sub_181BC920C((uint64_t)v11, type metadata accessor for NWBrowser.Result.Change);
}

void sub_181BD1E70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD58);
  MEMORY[0x1895F8858](v3);
  void v16[2] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  v16[1] = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  MEMORY[0x1895F8858](v9);
  uint64_t v10 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  MEMORY[0x1895F8858](v12);
  v16[3] = a2;
  sub_181BC9248(a2, (uint64_t)v16 - v13, v14);
  uint64_t v15 = (char *)&loc_181BD2004 + dword_181BD218C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BD2014()
{
  return sub_181BC920C(v3, type metadata accessor for NWBrowser.Result.Change);
}

uint64_t sub_181BD219C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_181BD2210@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181BDA16C;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWBrowser.browseResultsChangedHandler.modify( uint64_t (**a1)(uint64_t, uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t, uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  sub_181BD2210(v4, &v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))v10;
  if ((void)v10)
  {
    __int128 v9 = v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181BD2608;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t))v7;
  return sub_181BD232C;
}

uint64_t sub_181BD232C(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  NWBrowser.browseResultsChangedHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BDA298,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t sub_181BD2348( uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);
  return a5(v6, v7);
}

uint64_t NWBrowser.init(for:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(nw_parameters **)a1;
  uint64_t v6 = *(nw_parameters **)(a1 + 8);
  uint64_t v7 = *(nw_parameters **)(a1 + 16);
  uint64_t v8 = *(nw_parameters **)(a1 + 24);
  char v9 = *(_BYTE *)(a1 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD68);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 80) = 0;
  uint64_t v11 = MEMORY[0x18961AFF8];
  *(void *)(v10 + 16) = MEMORY[0x18961AFF8];
  *(void *)(v10 + 24) = v11;
  *(_BYTE *)(v10 + 32) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(void *)(v10 + 72) = 0LL;
  *(void *)(v3 + 24) = v10;
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 48) = v7;
  *(void *)(v3 + 56) = v8;
  *(_BYTE *)(v3 + 64) = v9;
  *(void *)(v3 + 72) = a2;
  parameters[0] = v5;
  parameters[1] = v6;
  parameters[2] = v7;
  parameters[3] = v8;
  char v20 = v9;
  swift_retain();
  NWBrowser.Descriptor.nw.getter();
  uint64_t v13 = v12;
  uint64_t v14 = *(os_unfair_lock_s **)(a2 + 16);
  uint64_t v15 = v14 + 4;
  uint64_t v16 = v14 + 6;
  os_unfair_lock_lock(v14 + 6);
  sub_181C96C68(v15, parameters);
  os_unfair_lock_unlock(v16);
  nw_browser_t v17 = nw_browser_create(v13, parameters[0]);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  *(void *)(v3 + 16) = v17;
  return v3;
}

uint64_t sub_181BD24E8(uint64_t *a1)
{
  a1[3] = 0LL;
  a1[4] = 0LL;
  uint64_t result = sub_181BD25B8(a1[5]);
  a1[5] = 0LL;
  a1[6] = 0LL;
  return result;
}

uint64_t sub_181BD2528()
{
  return swift_deallocObject();
}

uint64_t sub_181BD254C(int a1, nw_error *a2)
{
  uint64_t v5 = *(uint64_t (**)(_BYTE *))(v2 + 16);
  swift_unknownObjectRetain();
  sub_181BD1014(a2, a1, (uint64_t)v7);
  return v5(v7);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_181BD25B8(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_181BD25C8()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_181BD25FC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_181BD1C64( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void (**)(uint64_t, uint64_t))(v3 + 24),  *(void *)(v3 + 32));
}

uint64_t static NWBrowser.browseIterator(on:)(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD70);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = *a1;
  int v9 = 64;
  uint64_t v10 = v5;
  (*(void (**)(_BYTE *, void))(v6 + 104))(v4, *MEMORY[0x18961BE60]);
  return sub_18264EF1C();
}

uint64_t NWBrowser.deinit()
{
  return v0;
}

uint64_t NWBrowser.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181BD2744()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

uint64_t sub_181BD279C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_18264EA9C();
  MEMORY[0x1895F8858](v4);
  v96[2] = (char *)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v97 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v98 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v100 = a1;
  swift_bridgeObjectRetain();
  int64_t v10 = 0LL;
  char v99 = a2;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_26;
    }

    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }

    if (v17 >= v98) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v97 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v98) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v97 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v98) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v97 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v98) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v97 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }

uint64_t sub_181BD2FC8()
{
  return swift_deallocObject();
}

uint64_t sub_181BD2FD8()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NWBrowser.Result(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58BE50);
}

uint64_t sub_181BD2FFC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }

  return result;
}

uint64_t sub_181BD3028(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  sub_18264F648();
  swift_bridgeObjectRetain();
  NWBrowser.Result.Change.hash(into:)();
  uint64_t v11 = sub_18264F684();
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v21 = v2;
    uint64_t v22 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_181BC9248(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
      _s7Network9NWBrowserC6ResultV6ChangeO2eeoiySbAG_AGtFZ_0((uint64_t)v9, a2);
      char v17 = v16;
      sub_181BC920C((uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
      if ((v17 & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v21;
        a1 = v22;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    sub_181BC920C(a2, type metadata accessor for NWBrowser.Result.Change);
    sub_181BC9248(*(void *)(*v21 + 48) + v15 * v13, v22, type metadata accessor for NWBrowser.Result.Change);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_181BC9248(a2, (uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
    uint64_t v23 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_181BD51E8((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v23;
    swift_bridgeObjectRelease();
    sub_181BC928C(a2, a1, type metadata accessor for NWBrowser.Result.Change);
    return 1LL;
  }

uint64_t sub_181BD3224(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v54 = (uint64_t)&v49 - v12;
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v55 = (uint64_t)&v49 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v49 - v19;
  MEMORY[0x1895F8858](v18);
  uint64_t v51 = (char *)&v49 - v21;
  uint64_t v22 = *v3;
  sub_18264F648();
  uint64_t v62 = v6;
  uint64_t v23 = a2;
  uint64_t v24 = a2 + *(int *)(v6 + 20);
  swift_bridgeObjectRetain();
  uint64_t v61 = v24;
  NWEndpoint.hash(into:)();
  uint64_t v25 = sub_18264F684();
  uint64_t v26 = -1LL << *(_BYTE *)(v22 + 32);
  unint64_t v27 = v25 & ~v26;
  uint64_t v60 = v22 + 56;
  if (((*(void *)(v22 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v46 = (uint64_t)v51;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_181BC9248(v23, v46, type metadata accessor for NWBrowser.Result);
    uint64_t v63 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_181BD53D8(v46, v27, isUniquelyReferenced_nonNull_native);
    void *v3 = v63;
    swift_bridgeObjectRelease();
    sub_181BC928C(v23, a1, type metadata accessor for NWBrowser.Result);
    return 1LL;
  }

  unint64_t v58 = v15;
  char v49 = v3;
  uint64_t v50 = a1;
  uint64_t v56 = ~v26;
  uint64_t v57 = *(void *)(v7 + 72);
  uint64_t v28 = v54;
  uint64_t v29 = v55;
  BOOL v52 = v10;
  uint64_t v53 = v23;
  uint64_t v59 = v22;
  while (1)
  {
    uint64_t v30 = *(void *)(v22 + 48);
    uint64_t v55 = v57 * v27;
    sub_181BC9248(v30 + v57 * v27, (uint64_t)v20, type metadata accessor for NWBrowser.Result);
    uint64_t v31 = v62;
    _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)&v20[*(int *)(v62 + 20)], v61);
    char v33 = v32;
    sub_181BC9248((uint64_t)v20, v29, type metadata accessor for NWBrowser.Result);
    uint64_t v34 = v23;
    uint64_t v35 = v23;
    uint64_t v36 = v29;
    uint64_t v37 = (uint64_t)v58;
    sub_181BC9248(v34, (uint64_t)v58, type metadata accessor for NWBrowser.Result);
    if ((v33 & 1) == 0)
    {
      sub_181BC920C(v36, type metadata accessor for NWBrowser.Result);
      sub_181BC920C(v37, type metadata accessor for NWBrowser.Result);
      sub_181BC9248((uint64_t)v20, v28, type metadata accessor for NWBrowser.Result);
      sub_181BC9248(v35, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
      uint64_t v22 = v59;
      uint64_t v29 = v36;
      uint64_t v23 = v35;
LABEL_12:
      sub_181BC920C((uint64_t)v10, type metadata accessor for NWBrowser.Result);
      sub_181BC920C(v28, type metadata accessor for NWBrowser.Result);
      sub_181BC920C((uint64_t)v20, type metadata accessor for NWBrowser.Result);
      goto LABEL_13;
    }

    char v38 = sub_181C18894(*(void *)(v36 + *(int *)(v31 + 24)), *(void *)(v37 + *(int *)(v31 + 24)));
    sub_181BC920C(v36, type metadata accessor for NWBrowser.Result);
    sub_181BC920C(v37, type metadata accessor for NWBrowser.Result);
    sub_181BC9248((uint64_t)v20, v28, type metadata accessor for NWBrowser.Result);
    sub_181BC9248(v35, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
    uint64_t v22 = v59;
    uint64_t v29 = v36;
    uint64_t v23 = v35;
    if ((v38 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v39 = *(int *)(v62 + 28);
    uint64_t v41 = *(void *)(v28 + v39);
    char v40 = *(nw_txt_record **)(v28 + v39 + 8);
    uint64_t v42 = (uint64_t *)&v10[v39];
    uint64_t v43 = *v42;
    uint64_t v44 = (nw_txt_record *)v42[1];
    if (!v41) {
      break;
    }
    if (!v43) {
      goto LABEL_11;
    }
    sub_181BD2FFC(v41);
    sub_181BD2FFC(v43);
    sub_181BD2FFC(v41);
    sub_181BD2FFC(v43);
    sub_181BD2FFC(v41);
    sub_181BD2FFC(v43);
    BOOL is_equal = nw_txt_record_is_equal(v40, v44);
    sub_181BD6288(v41);
    sub_181BD6288(v43);
    sub_181BD6288(v43);
    sub_181BD6288(v41);
    sub_181BD6288(v43);
    sub_181BD6288(v41);
    uint64_t v10 = v52;
    sub_181BC920C((uint64_t)v52, type metadata accessor for NWBrowser.Result);
    uint64_t v28 = v54;
    sub_181BC920C(v54, type metadata accessor for NWBrowser.Result);
    sub_181BC920C((uint64_t)v20, type metadata accessor for NWBrowser.Result);
    uint64_t v23 = v53;
    if (is_equal) {
      goto LABEL_19;
    }
LABEL_13:
    unint64_t v27 = (v27 + 1) & v56;
    if (((*(void *)(v60 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      a1 = v50;
      uint64_t v3 = v49;
      goto LABEL_16;
    }
  }

  if (v43)
  {
LABEL_11:
    sub_181BD2FFC(v41);
    sub_181BD2FFC(v43);
    sub_181BD6288(v41);
    sub_181BD6288(v43);
    uint64_t v10 = v52;
    uint64_t v23 = v53;
    uint64_t v28 = v54;
    goto LABEL_12;
  }

  sub_181BD6288(0LL);
  sub_181BD6288(0LL);
  sub_181BC920C((uint64_t)v52, type metadata accessor for NWBrowser.Result);
  sub_181BC920C(v54, type metadata accessor for NWBrowser.Result);
  sub_181BC920C((uint64_t)v20, type metadata accessor for NWBrowser.Result);
  uint64_t v23 = v53;
LABEL_19:
  swift_bridgeObjectRelease();
  sub_181BC920C(v23, type metadata accessor for NWBrowser.Result);
  sub_181BC9248(*(void *)(*v49 + 48LL) + v55, v50, type metadata accessor for NWBrowser.Result);
  return 0LL;
}

uint64_t sub_181BD3794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (int *)type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v51 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v58 = (uint64_t)&v45 - v11;
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v56 = (uint64_t)&v45 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v45 - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = *v2;
  sub_18264F648();
  uint64_t v20 = a1 + v6[5];
  swift_bridgeObjectRetain();
  uint64_t v57 = v20;
  NWEndpoint.hash(into:)();
  uint64_t v21 = sub_18264F684();
  uint64_t v22 = -1LL << *(_BYTE *)(v19 + 32);
  unint64_t v23 = v21 & ~v22;
  uint64_t v55 = v19 + 56;
  if (((*(void *)(v19 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = 1LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a2, v39, 1LL, v6);
  }

  uint64_t v46 = v3;
  uint64_t v47 = v7;
  uint64_t v48 = a2;
  uint64_t v52 = ~v22;
  uint64_t v53 = *(void *)(v7 + 72);
  uint64_t v54 = v19;
  uint64_t v24 = v51;
  uint64_t v49 = a1;
  uint64_t v50 = v6;
  while (1)
  {
    unint64_t v25 = v53 * v23;
    sub_181BC9248(*(void *)(v19 + 48) + v53 * v23, (uint64_t)v18, type metadata accessor for NWBrowser.Result);
    _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)&v18[v6[5]], v57);
    char v27 = v26;
    sub_181BC9248((uint64_t)v18, (uint64_t)v16, type metadata accessor for NWBrowser.Result);
    uint64_t v28 = v56;
    sub_181BC9248(a1, v56, type metadata accessor for NWBrowser.Result);
    if ((v27 & 1) == 0)
    {
      sub_181BC920C((uint64_t)v16, type metadata accessor for NWBrowser.Result);
      sub_181BC920C(v28, type metadata accessor for NWBrowser.Result);
      uint64_t v30 = v58;
      sub_181BC9248((uint64_t)v18, v58, type metadata accessor for NWBrowser.Result);
      sub_181BC9248(a1, v24, type metadata accessor for NWBrowser.Result);
LABEL_12:
      sub_181BC920C(v24, type metadata accessor for NWBrowser.Result);
      sub_181BC920C(v30, type metadata accessor for NWBrowser.Result);
      sub_181BC920C((uint64_t)v18, type metadata accessor for NWBrowser.Result);
      goto LABEL_13;
    }

    char v29 = sub_181C18894(*(void *)&v16[v6[6]], *(void *)(v28 + v6[6]));
    sub_181BC920C((uint64_t)v16, type metadata accessor for NWBrowser.Result);
    sub_181BC920C(v28, type metadata accessor for NWBrowser.Result);
    uint64_t v30 = v58;
    sub_181BC9248((uint64_t)v18, v58, type metadata accessor for NWBrowser.Result);
    sub_181BC9248(a1, v24, type metadata accessor for NWBrowser.Result);
    if ((v29 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v31 = v6[7];
    uint64_t v33 = *(void *)(v30 + v31);
    char v32 = *(nw_txt_record **)(v30 + v31 + 8);
    uint64_t v34 = (uint64_t *)(v24 + v31);
    uint64_t v35 = *v34;
    uint64_t v36 = (nw_txt_record *)v34[1];
    if (!v33) {
      break;
    }
    if (!v35) {
      goto LABEL_11;
    }
    unint64_t v37 = v25;
    sub_181BD2FFC(v33);
    sub_181BD2FFC(v35);
    sub_181BD2FFC(v33);
    sub_181BD2FFC(v35);
    sub_181BD2FFC(v33);
    sub_181BD2FFC(v35);
    BOOL is_equal = nw_txt_record_is_equal(v32, v36);
    sub_181BD6288(v33);
    sub_181BD6288(v35);
    sub_181BD6288(v35);
    sub_181BD6288(v33);
    sub_181BD6288(v35);
    sub_181BD6288(v33);
    uint64_t v24 = v51;
    sub_181BC920C(v51, type metadata accessor for NWBrowser.Result);
    sub_181BC920C(v58, type metadata accessor for NWBrowser.Result);
    sub_181BC920C((uint64_t)v18, type metadata accessor for NWBrowser.Result);
    a1 = v49;
    uint64_t v6 = v50;
    if (is_equal) {
      goto LABEL_17;
    }
LABEL_13:
    unint64_t v23 = (v23 + 1) & v52;
    uint64_t v19 = v54;
    if (((*(void *)(v55 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = 1LL;
      uint64_t v7 = v47;
      a2 = v48;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a2, v39, 1LL, v6);
    }
  }

  if (v35)
  {
LABEL_11:
    sub_181BD2FFC(v33);
    sub_181BD2FFC(v35);
    sub_181BD6288(v33);
    sub_181BD6288(v35);
    a1 = v49;
    uint64_t v6 = v50;
    uint64_t v24 = v51;
    uint64_t v30 = v58;
    goto LABEL_12;
  }

  unint64_t v37 = v25;
  sub_181BD6288(0LL);
  sub_181BD6288(0LL);
  sub_181BC920C(v51, type metadata accessor for NWBrowser.Result);
  sub_181BC920C(v58, type metadata accessor for NWBrowser.Result);
  sub_181BC920C((uint64_t)v18, type metadata accessor for NWBrowser.Result);
  uint64_t v6 = v50;
LABEL_17:
  swift_bridgeObjectRelease();
  char v40 = v46;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = *v40;
  uint64_t v59 = *v40;
  *char v40 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_181BD3C9C(type metadata accessor for NWBrowser.Result, &qword_18C58BFA8);
    uint64_t v42 = v59;
  }

  uint64_t v43 = v48;
  sub_181BC928C(*(void *)(v42 + 48) + v37, v48, type metadata accessor for NWBrowser.Result);
  sub_181BD4F98(v23);
  *char v40 = v59;
  a2 = v43;
  swift_bridgeObjectRelease();
  uint64_t v39 = 0LL;
  uint64_t v7 = v47;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(a2, v39, 1LL, v6);
}

void *sub_181BD3C9C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v28 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v10 = *v2;
  uint64_t v11 = sub_18264F12C();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    uint64_t *v5 = v12;
    return result;
  }

  char v29 = v5;
  uint64_t result = (void *)(v11 + 56);
  uint64_t v14 = v10 + 56;
  unint64_t v15 = (unint64_t)((1LL << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  int64_t v17 = 0LL;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v25 >= v21) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v21) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v17);
      if (!v26)
      {
        int64_t v17 = v25 + 2;
        if (v25 + 2 >= v21) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v14 + 8 * v17);
        if (!v26) {
          break;
        }
      }
    }

uint64_t sub_181BD3EB4()
{
  id v1 = v0;
  uint64_t v29 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v2 = MEMORY[0x1895F8858](v29);
  int64_t v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v30 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v4 = *(void *)(v30 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v30);
  unint64_t v26 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v32 = (uint64_t)&v22 - v7;
  uint64_t v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BFA0);
  uint64_t v9 = sub_18264F138();
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_23;
  }

  unint64_t v23 = v0;
  uint64_t v10 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v11 = *(void *)(v8 + 56);
  int64_t v27 = (void *)(v8 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v28 = (unint64_t)(v10 + 63) >> 6;
  swift_retain();
  uint64_t v14 = (uint64_t)v26;
  uint64_t v24 = v4;
  if (v13)
  {
    unint64_t v15 = __clz(__rbit64(v13));
    uint64_t v31 = 0LL;
    goto LABEL_20;
  }

  if (v28 > 1)
  {
    unint64_t v16 = v27[1];
    uint64_t v17 = 1LL;
    if (v16) {
      goto LABEL_19;
    }
    uint64_t v17 = 2LL;
    if (v28 > 2)
    {
      unint64_t v16 = v27[2];
      if (v16) {
        goto LABEL_19;
      }
      uint64_t v17 = 3LL;
      if (v28 > 3)
      {
        unint64_t v16 = v27[3];
        if (!v16)
        {
          uint64_t v18 = 4LL;
          if (v28 > 4)
          {
            unint64_t v16 = v27[4];
            if (v16)
            {
              uint64_t v17 = 4LL;
              goto LABEL_19;
            }

            while (1)
            {
              uint64_t v17 = v18 + 1;
              if (__OFADD__(v18, 1LL))
              {
                __break(1u);
                JUMPOUT(0x181BD43C0LL);
              }

              if (v17 >= v28) {
                break;
              }
              unint64_t v16 = v27[v17];
              ++v18;
              if (v16) {
                goto LABEL_19;
              }
            }
          }

          goto LABEL_21;
        }

uint64_t sub_181BD43D0()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BFA8);
  uint64_t v6 = sub_18264F138();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *id v1 = v7;
    return result;
  }

  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1LL << v8);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & v9;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_181BD46EC()
{
  id v1 = v0;
  uint64_t v28 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v2 = MEMORY[0x1895F8858](v28);
  char v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v29 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v4 = *(void *)(v29 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v29);
  uint64_t v31 = (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v32 = (uint64_t)&v22 - v7;
  uint64_t v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BFA0);
  uint64_t v9 = sub_18264F138();
  uint64_t v30 = v8;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_26;
  }
  unint64_t v23 = v0;
  uint64_t v10 = 1LL << *(_BYTE *)(v30 + 32);
  uint64_t v11 = *(void *)(v30 + 56);
  BOOL v27 = (void *)(v30 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  swift_retain();
  uint64_t v24 = v4;
  if (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    goto LABEL_20;
  }

  if (v26 > 1)
  {
    unint64_t v15 = v27[1];
    uint64_t v16 = 1LL;
    if (v15) {
      goto LABEL_19;
    }
    uint64_t v16 = 2LL;
    if (v26 > 2)
    {
      unint64_t v15 = v27[2];
      if (v15) {
        goto LABEL_19;
      }
      uint64_t v16 = 3LL;
      if (v26 > 3)
      {
        unint64_t v15 = v27[3];
        if (!v15)
        {
          uint64_t v17 = 4LL;
          if (v26 > 4)
          {
            unint64_t v15 = v27[4];
            if (v15)
            {
              uint64_t v16 = 4LL;
              goto LABEL_19;
            }

            while (1)
            {
              uint64_t v16 = v17 + 1;
              if (__OFADD__(v17, 1LL))
              {
                __break(1u);
                JUMPOUT(0x181BD4C30LL);
              }

              if (v16 >= v26) {
                break;
              }
              unint64_t v15 = v27[v16];
              ++v17;
              if (v15) {
                goto LABEL_19;
              }
            }
          }

          goto LABEL_21;
        }

uint64_t sub_181BD4C40()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BFA8);
  uint64_t v6 = sub_18264F138();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = v0;
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v32 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1LL << v8);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & v9;
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }

        if (v18 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = v32[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                id v1 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v32 = -1LL << v29;
                }
                *(void *)(v5 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v32[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

uint64_t sub_181BD4F98(unint64_t a1)
{
  uint64_t v26 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v3 = *(void *)(v26 - 8);
  uint64_t result = MEMORY[0x1895F8858](v26);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v24 = v1;
    uint64_t v25 = v8;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = sub_18264F114();
    uint64_t v13 = v25;
    if ((*(void *)(v25 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v14 = (v12 + 1) & v11;
      uint64_t v15 = *(void *)(v3 + 72);
      while (1)
      {
        int64_t v16 = v15 * v10;
        sub_181BC9248(*(void *)(v7 + 48) + v15 * v10, (uint64_t)v6, type metadata accessor for NWBrowser.Result);
        sub_18264F648();
        NWEndpoint.hash(into:)();
        uint64_t v17 = sub_18264F684();
        sub_181BC920C((uint64_t)v6, type metadata accessor for NWBrowser.Result);
        unint64_t v18 = v17 & v11;
        if (v18 < v14) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v19 = v15 * a1;
        if ((uint64_t)(v15 * a1) < v16 || *(void *)(v7 + 48) + v15 * a1 >= *(void *)(v7 + 48) + v16 + v15)
        {
          swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          a1 = v10;
          if (v19 == v16) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }

        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v13 = v25;
        if (((*(void *)(v25 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
          goto LABEL_16;
        }
      }

      if (v18 < v14) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

uint64_t sub_181BD51E8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  uint64_t v27 = v9;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_181BD46EC();
  }

  else
  {
    if (v13 > v12)
    {
      sub_181BD3C9C(type metadata accessor for NWBrowser.Result.Change, &qword_18C58BFA0);
      goto LABEL_12;
    }

    sub_181BD3EB4();
  }

  uint64_t v14 = *v4;
  sub_18264F648();
  NWBrowser.Result.Change.hash(into:)();
  uint64_t v15 = sub_18264F684();
  uint64_t v16 = -1LL << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    v26[1] = v8;
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v9 + 72);
    do
    {
      sub_181BC9248(*(void *)(v14 + 48) + v18 * a2, (uint64_t)v11, type metadata accessor for NWBrowser.Result.Change);
      _s7Network9NWBrowserC6ResultV6ChangeO2eeoiySbAG_AGtFZ_0((uint64_t)v11, a1);
      char v20 = v19;
      sub_181BC920C((uint64_t)v11, type metadata accessor for NWBrowser.Result.Change);
      if ((v20 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_181BD53D8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = (int *)type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v47 = *((void *)v7 - 1);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  unint64_t v13 = &v41[-v12];
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = &v41[-v15];
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  char v19 = &v41[-v18];
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = &v41[-v20];
  unint64_t v22 = *(void *)(*v3 + 16);
  unint64_t v23 = *(void *)(*v3 + 24);
  uint64_t v43 = v3;
  if (v23 <= v22 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_181BD4C40();
    }

    else
    {
      if (v23 > v22)
      {
        sub_181BD3C9C(type metadata accessor for NWBrowser.Result, &qword_18C58BFA8);
        goto LABEL_21;
      }

      sub_181BD43D0();
    }

    uint64_t v24 = *v3;
    sub_18264F648();
    uint64_t v51 = a1 + v7[5];
    NWEndpoint.hash(into:)();
    uint64_t v25 = sub_18264F684();
    uint64_t v26 = -1LL << *(_BYTE *)(v24 + 32);
    a2 = v25 & ~v26;
    uint64_t v52 = v24;
    uint64_t v50 = v24 + 56;
    if (((*(void *)(v24 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
    {
      uint64_t v49 = ~v26;
      uint64_t v48 = *(void *)(v47 + 72);
      uint64_t v45 = v7;
      uint64_t v46 = a1;
      uint64_t v44 = v10;
      while (1)
      {
        sub_181BC9248(*(void *)(v52 + 48) + v48 * a2, (uint64_t)v21, type metadata accessor for NWBrowser.Result);
        _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)&v21[v7[5]], v51);
        char v28 = v27;
        sub_181BC9248((uint64_t)v21, (uint64_t)v19, type metadata accessor for NWBrowser.Result);
        sub_181BC9248(a1, (uint64_t)v16, type metadata accessor for NWBrowser.Result);
        if ((v28 & 1) == 0) {
          break;
        }
        char v29 = sub_181C18894(*(void *)&v19[v7[6]], *(void *)&v16[v7[6]]);
        sub_181BC920C((uint64_t)v19, type metadata accessor for NWBrowser.Result);
        sub_181BC920C((uint64_t)v16, type metadata accessor for NWBrowser.Result);
        sub_181BC9248((uint64_t)v21, (uint64_t)v13, type metadata accessor for NWBrowser.Result);
        sub_181BC9248(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
        if ((v29 & 1) == 0) {
          goto LABEL_11;
        }
        uint64_t v30 = v7[7];
        uint64_t v31 = *(void *)&v13[v30];
        uint64_t v32 = *(nw_txt_record **)&v13[v30 + 8];
        uint64_t v33 = (uint64_t *)&v10[v30];
        uint64_t v35 = *v33;
        uint64_t v34 = (nw_txt_record *)v33[1];
        if (!v31)
        {
          if (!v35) {
            goto LABEL_24;
          }
LABEL_20:
          sub_181BD2FFC(v31);
          sub_181BD2FFC(v35);
          sub_181BD6288(v31);
          sub_181BD6288(v35);
          uint64_t v7 = v45;
          a1 = v46;
          uint64_t v10 = v44;
LABEL_11:
          sub_181BC920C((uint64_t)v10, type metadata accessor for NWBrowser.Result);
          sub_181BC920C((uint64_t)v13, type metadata accessor for NWBrowser.Result);
          sub_181BC920C((uint64_t)v21, type metadata accessor for NWBrowser.Result);
          goto LABEL_12;
        }

        if (!v35) {
          goto LABEL_20;
        }
        sub_181BD2FFC(v31);
        sub_181BD2FFC(v35);
        sub_181BD2FFC(v31);
        sub_181BD2FFC(v35);
        sub_181BD2FFC(v31);
        sub_181BD2FFC(v35);
        BOOL is_equal = nw_txt_record_is_equal(v32, v34);
        sub_181BD6288(v31);
        sub_181BD6288(v35);
        sub_181BD6288(v35);
        sub_181BD6288(v31);
        sub_181BD6288(v35);
        sub_181BD6288(v31);
        uint64_t v10 = v44;
        sub_181BC920C((uint64_t)v44, type metadata accessor for NWBrowser.Result);
        sub_181BC920C((uint64_t)v13, type metadata accessor for NWBrowser.Result);
        sub_181BC920C((uint64_t)v21, type metadata accessor for NWBrowser.Result);
        uint64_t v7 = v45;
        a1 = v46;
        if (is_equal) {
          goto LABEL_25;
        }
LABEL_12:
        a2 = (a2 + 1) & v49;
        if (((*(void *)(v50 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          goto LABEL_21;
        }
      }

      sub_181BC920C((uint64_t)v19, type metadata accessor for NWBrowser.Result);
      sub_181BC920C((uint64_t)v16, type metadata accessor for NWBrowser.Result);
      sub_181BC9248((uint64_t)v21, (uint64_t)v13, type metadata accessor for NWBrowser.Result);
      sub_181BC9248(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
      goto LABEL_11;
    }
  }

uint64_t _s7Network9NWBrowserC5StateO2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  unint64_t v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  unsigned int v5 = v2 >> 6;
  if (!v5)
  {
    if (((v4 >> 38) & 3) != 0) {
      return 0LL;
    }
    LODWORD(v7) = BYTE4(v4);
    if (HIDWORD(v3))
    {
      if (HIDWORD(v3) == 1) {
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      }
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }

BOOL _s7Network9NWBrowserC6ResultV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  unint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v28 - v15;
  _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(v14 + 20), a2 + *(int *)(v14 + 20));
  char v18 = v17;
  sub_181BC9248(a1, (uint64_t)v16, type metadata accessor for NWBrowser.Result);
  sub_181BC9248(a2, (uint64_t)v13, type metadata accessor for NWBrowser.Result);
  if ((v18 & 1) == 0)
  {
    sub_181BC920C((uint64_t)v16, type metadata accessor for NWBrowser.Result);
    sub_181BC920C((uint64_t)v13, type metadata accessor for NWBrowser.Result);
    sub_181BC9248(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
    sub_181BC9248(a2, (uint64_t)v7, type metadata accessor for NWBrowser.Result);
    goto LABEL_7;
  }

  char v19 = sub_181C18894(*(void *)&v16[*(int *)(v4 + 24)], *(void *)&v13[*(int *)(v4 + 24)]);
  sub_181BC920C((uint64_t)v16, type metadata accessor for NWBrowser.Result);
  sub_181BC920C((uint64_t)v13, type metadata accessor for NWBrowser.Result);
  sub_181BC9248(a1, (uint64_t)v10, type metadata accessor for NWBrowser.Result);
  sub_181BC9248(a2, (uint64_t)v7, type metadata accessor for NWBrowser.Result);
  if ((v19 & 1) == 0)
  {
LABEL_7:
    BOOL is_equal = 0LL;
    goto LABEL_8;
  }

  uint64_t v20 = *(int *)(v4 + 28);
  uint64_t v22 = *(void *)&v10[v20];
  uint64_t v21 = *(nw_txt_record **)&v10[v20 + 8];
  unint64_t v23 = (uint64_t *)&v7[v20];
  uint64_t v25 = *v23;
  uint64_t v24 = (nw_txt_record *)v23[1];
  if (!v22)
  {
    if (!v25)
    {
      sub_181BD6288(0LL);
      sub_181BD6288(0LL);
      BOOL is_equal = 1LL;
      goto LABEL_8;
    }

    goto LABEL_10;
  }

  if (!v25)
  {
LABEL_10:
    sub_181BD2FFC(v22);
    sub_181BD2FFC(v25);
    sub_181BD6288(v22);
    sub_181BD6288(v25);
    goto LABEL_7;
  }

  sub_181BD2FFC(v22);
  sub_181BD2FFC(v25);
  sub_181BD2FFC(v22);
  sub_181BD2FFC(v25);
  sub_181BD2FFC(v22);
  sub_181BD2FFC(v25);
  BOOL is_equal = nw_txt_record_is_equal(v21, v24);
  sub_181BD6288(v22);
  sub_181BD6288(v25);
  sub_181BD6288(v25);
  sub_181BD6288(v22);
  sub_181BD6288(v25);
  sub_181BD6288(v22);
LABEL_8:
  sub_181BC920C((uint64_t)v7, type metadata accessor for NWBrowser.Result);
  sub_181BC920C((uint64_t)v10, type metadata accessor for NWBrowser.Result);
  return is_equal;
}

void _s7Network9NWBrowserC6ResultV6ChangeO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BF98);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  void v26[2] = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  v26[3] = (char *)v26 - v14;
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  v26[7] = (char *)v26 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  v26[6] = (char *)v26 - v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  v26[5] = (char *)v26 - v20;
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  void v26[4] = (char *)v26 - v22;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  MEMORY[0x1895F8858](v23);
  uint64_t v24 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_181BC9248(a1, (uint64_t)v9, type metadata accessor for NWBrowser.Result.Change);
  sub_181BC9248(a2, v24, type metadata accessor for NWBrowser.Result.Change);
  uint64_t v25 = (char *)sub_181BD5ED0 + 4 * byte_18265C801[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

BOOL sub_181BD5ED0()
{
  if (swift_getEnumCaseMultiPayload())
  {
    sub_181BC920C(v4, type metadata accessor for NWBrowser.Result);
    sub_181BDA0F0(v0, &qword_18C58BF98);
    return 0;
  }

  else
  {
    sub_181BC928C(v4, v3, type metadata accessor for NWBrowser.Result);
    sub_181BC928C(v2, v1, type metadata accessor for NWBrowser.Result);
    sub_181BC920C(v0, type metadata accessor for NWBrowser.Result.Change);
    BOOL v5 = _s7Network9NWBrowserC6ResultV2eeoiySbAE_AEtFZ_0(v3, v1);
    sub_181BC920C(v1, type metadata accessor for NWBrowser.Result);
    sub_181BC920C(v3, type metadata accessor for NWBrowser.Result);
  }

  return v5;
}

uint64_t _s7Network9NWBrowserC6ResultV8MetadataO2eeoiySbAG_AGtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (nw_txt_record *)a1[1];
  uint64_t v5 = *a2;
  uint64_t v4 = (nw_txt_record *)a2[1];
  if (!*a1)
  {
    if (!v5)
    {
      sub_181BD6288(0LL);
      sub_181BD6288(0LL);
      return 1LL;
    }

    goto LABEL_5;
  }

  if (!v5)
  {
LABEL_5:
    sub_181BD2FFC(*a2);
    sub_181BD2FFC(v3);
    sub_181BD6288(v3);
    sub_181BD6288(v5);
    return 0LL;
  }

  sub_181BD2FFC(*a2);
  sub_181BD2FFC(v3);
  sub_181BD2FFC(v5);
  sub_181BD2FFC(v3);
  BOOL is_equal = nw_txt_record_is_equal(v2, v4);
  sub_181BD6288(v3);
  sub_181BD6288(v5);
  sub_181BD6288(v5);
  sub_181BD6288(v3);
  return is_equal;
}

uint64_t sub_181BD6288(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t type metadata accessor for NWBrowser.Result.Change(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58BF60);
}

uint64_t sub_181BD62C8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_181BD62FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181BD6344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  switch(a5 >> 5)
  {
    case 0:
    case 1:
    case 3:
      swift_bridgeObjectRetain();
      goto LABEL_3;
    case 2:
    case 4:
LABEL_3:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_181BD639C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_181BD63BC(uint64_t a1)
{
}

uint64_t sub_181BD63C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  switch(a5 >> 5)
  {
    case 0:
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 2:
    case 4:
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

unint64_t sub_181BD6420()
{
  unint64_t result = qword_18C58BD78;
  if (!qword_18C58BD78)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope,  &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_18C58BD78);
  }

  return result;
}

unint64_t sub_181BD6468()
{
  unint64_t result = qword_18C58BD80;
  if (!qword_18C58BD80)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope,  &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_18C58BD80);
  }

  return result;
}

unint64_t sub_181BD64B0()
{
  unint64_t result = qword_18C58BD88;
  if (!qword_18C58BD88)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope,  &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_18C58BD88);
  }

  return result;
}

unint64_t sub_181BD64F8()
{
  unint64_t result = qword_18C58BD90;
  if (!qword_18C58BD90)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.Scope,  &type metadata for NWBrowser.Descriptor.Options.Scope);
    atomic_store(result, (unint64_t *)&qword_18C58BD90);
  }

  return result;
}

unint64_t sub_181BD6540()
{
  unint64_t result = qword_18C58BD98;
  if (!qword_18C58BD98)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType,  &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_18C58BD98);
  }

  return result;
}

unint64_t sub_181BD6588()
{
  unint64_t result = qword_18C58BDA0;
  if (!qword_18C58BDA0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType,  &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_18C58BDA0);
  }

  return result;
}

unint64_t sub_181BD65D0()
{
  unint64_t result = qword_18C58BDA8;
  if (!qword_18C58BDA8)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType,  &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_18C58BDA8);
  }

  return result;
}

unint64_t sub_181BD6618()
{
  unint64_t result = qword_18C58BDB0;
  if (!qword_18C58BDB0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Descriptor.Options.DeviceType,  &type metadata for NWBrowser.Descriptor.Options.DeviceType);
    atomic_store(result, (unint64_t *)&qword_18C58BDB0);
  }

  return result;
}

unint64_t sub_181BD6660()
{
  unint64_t result = qword_18C58BDB8;
  if (!qword_18C58BDB8)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Result.Change.Flags,  &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_18C58BDB8);
  }

  return result;
}

unint64_t sub_181BD66A8()
{
  unint64_t result = qword_18C58BDC0;
  if (!qword_18C58BDC0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Result.Change.Flags,  &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_18C58BDC0);
  }

  return result;
}

unint64_t sub_181BD66F0()
{
  unint64_t result = qword_18C58BDC8;
  if (!qword_18C58BDC8)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Result.Change.Flags,  &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_18C58BDC8);
  }

  return result;
}

unint64_t sub_181BD6738()
{
  unint64_t result = qword_18C58BDD0;
  if (!qword_18C58BDD0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Result.Change.Flags,  &type metadata for NWBrowser.Result.Change.Flags);
    atomic_store(result, (unint64_t *)&qword_18C58BDD0);
  }

  return result;
}

uint64_t sub_181BD677C()
{
  return sub_181BD67D4( &qword_18C58BDD8,  type metadata accessor for NWBrowser.Result.Change,  (uint64_t)&protocol conformance descriptor for NWBrowser.Result.Change);
}

uint64_t sub_181BD67A8()
{
  return sub_181BD67D4( &qword_18C58BDE0,  type metadata accessor for NWBrowser.Result,  (uint64_t)&protocol conformance descriptor for NWBrowser.Result);
}

uint64_t sub_181BD67D4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = MEMORY[0x186E12084](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_181BD6818()
{
  unint64_t result = qword_18C58BDE8;
  if (!qword_18C58BDE8)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWBrowser.Invitation.Scope,  &type metadata for NWBrowser.Invitation.Scope);
    atomic_store(result, (unint64_t *)&qword_18C58BDE8);
  }

  return result;
}

double sub_181BD685C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181BD1B70(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181BD199C, a2);
}

double sub_181BD687C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181BD1B70(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181BD2210, a2);
}

uint64_t type metadata accessor for NWBrowser()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWBrowser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWBrowser.__allocating_init(for:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t destroy for NWBrowser.Descriptor(uint64_t a1)
{
  return sub_181BD63C8( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for NWBrowser.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_181BD6344(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for NWBrowser.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_181BD6344(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_181BD63C8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NWBrowser.Descriptor(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_181BD63C8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Descriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 32) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NWBrowser.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 124;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t sub_181BD6AC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 5;
}

uint64_t sub_181BD6ACC(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x1Fu;
  return result;
}

uint64_t sub_181BD6ADC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor()
{
  return &type metadata for NWBrowser.Descriptor;
}

uint64_t sub_181BD6B04(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWBrowser.Descriptor.Options(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for NWBrowser.Descriptor.Options(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Descriptor.Options(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWBrowser.Descriptor.Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor.Options()
{
  return &type metadata for NWBrowser.Descriptor.Options;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor.Options.Scope()
{
  return &type metadata for NWBrowser.Descriptor.Options.Scope;
}

ValueMetadata *type metadata accessor for NWBrowser.Descriptor.Options.DeviceType()
{
  return &type metadata for NWBrowser.Descriptor.Options.DeviceType;
}

uint64_t initializeBufferWithCopyOfBuffer for NWBrowser.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    uint64_t v5 = (char *)&loc_181BD6D38 + 4 * byte_18265C80F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v6 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
  swift_retain();
  return v6;
}

uint64_t destroy for NWBrowser.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for NWEndpoint();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_181BC6974(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(_BYTE *)(v4 + 24));
      break;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 48) != 1LL) {
        goto LABEL_7;
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v5 = sub_18264E568();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
      break;
    case 4u:
LABEL_7:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }

  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 28));
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

void initializeWithCopy for NWBrowser.Result(void *a1, void *a2)
{
  *a1 = *a2;
  type metadata accessor for NWEndpoint();
  swift_unknownObjectRetain();
  uint64_t v2 = (char *)sub_181BD7024 + 4 * byte_18265C819[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BD7024()
{
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 16);
  char v14 = *(_BYTE *)(v4 + 24);
  sub_181BC683C(*(void *)v4, v6, v7, v14);
  *(void *)uint64_t v3 = v5;
  *(void *)(v3 + 8) = v6;
  *(void *)(v3 + 16) = v7;
  *(_BYTE *)(v3 + 24) = v14;
  *(_WORD *)(v3 + 26) = *(_WORD *)(v4 + 26);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = *(int *)(v2 + 28);
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  unsigned __int8 v9 = (void *)(v0 + v8);
  uint64_t v10 = v1 + v8;
  uint64_t v11 = *(void *)(v1 + v8);
  swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 8);
    *unsigned __int8 v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)unsigned __int8 v9 = *(_OWORD *)v10;
  }

  return v0;
}

void *assignWithCopy for NWBrowser.Result(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)a1 + a3[5], (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for NWEndpoint();
    uint64_t v6 = (char *)&loc_181BD7200 + 4 * byte_18265C81E[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)((char *)a1 + v7);
  unsigned __int8 v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7);
  if (!*(void *)((char *)a1 + v7))
  {
    if (v10)
    {
      *uint64_t v8 = v10;
      v8[1] = *((void *)v9 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      return a1;
    }

uint64_t sub_181BD73AC(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for NWBrowser.Result(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NWEndpoint();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v10 = sub_18264E568();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

void *assignWithTake for NWBrowser.Result(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_181BC920C((uint64_t)a1 + v6, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t v9 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v10 = sub_18264E568();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64LL));
    }
  }

  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (!*(void *)v13)
  {
    sub_181BD73AC(v12);
LABEL_9:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    return a1;
  }

  *(void *)uint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Result()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BD75E4(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NWBrowser.Result()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_181BD766C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_181BD76E0()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

unint64_t destroy for NWBrowser.Result.Metadata(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t _s7Network9NWBrowserC6ResultV8MetadataOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  return a1;
}

unint64_t *assignWithCopy for NWBrowser.Result.Metadata(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      return a1;
    }

void *assignWithTake for NWBrowser.Result.Metadata(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWBrowser.Result.Metadata(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NWBrowser.Result.Metadata( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

uint64_t sub_181BD79D0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_181BD79E8(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Result.Metadata()
{
  return &type metadata for NWBrowser.Result.Metadata;
}

uint64_t *initializeBufferWithCopyOfBuffer for NWBrowser.Result.Change(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0LL);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      uint64_t v11 = (char *)&loc_181BD7BB0 + 4 * byte_18265C823[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0LL);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      uint64_t v12 = (char *)&loc_181BD7C54 + 4 * byte_18265C82D[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0LL);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      uint64_t v8 = (char *)&loc_181BD7AD0 + 4 * word_18265C832[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  return a1;
}

void sub_181BD7CA8()
{
  uint64_t v5 = v4[1];
  void *v3 = *v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v6 = *(int *)(v2 + 28);
  uint64_t v7 = (void *)(v0 + v6);
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    void *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7CB8()
{
  uint64_t v5 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v6 = *(int *)(v2 + 28);
  uint64_t v7 = (void *)(v0 + v6);
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    void *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7CDC()
{
  void *v3 = *v4;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v5 = *(int *)(v2 + 28);
  uint64_t v6 = (void *)(v0 + v5);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = *(void *)(v1 + v5);
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = *(void *)(v7 + 8);
    *uint64_t v6 = v8;
    v6[1] = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  }

  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7CEC()
{
  uint64_t v5 = v4[1];
  void *v3 = *v4;
  v3[1] = v5;
  uint64_t v6 = v4[3];
  v3[2] = v4[2];
  v3[3] = v6;
  uint64_t v7 = v4[5];
  v3[4] = v4[4];
  v3[5] = v7;
  uint64_t v8 = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_unknownObjectRetain();
  }
  v3[6] = v8;
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v9 = *(int *)(v2 + 28);
  uint64_t v10 = (void *)(v0 + v9);
  uint64_t v11 = v1 + v9;
  uint64_t v12 = *(void *)(v1 + v9);
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    *uint64_t v10 = v12;
    v10[1] = v13;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  }

  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD60);
  *(void *)(v0 + *(int *)(v15 + 48)) = *(void *)(v1 + *(int *)(v15 + 48));
  swift_unknownObjectRetain();
  char v14 = (char *)sub_181BD7E2C + 4 * byte_18265C828[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

void sub_181BD7D34()
{
  uint64_t v5 = v4[1];
  void *v3 = *v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v6 = *(int *)(v2 + 28);
  uint64_t v7 = (void *)(v0 + v6);
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    void *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD60);
  *(void *)(v0 + *(int *)(v12 + 48)) = *(void *)(v1 + *(int *)(v12 + 48));
  swift_unknownObjectRetain();
  uint64_t v11 = (char *)sub_181BD7E2C + 4 * byte_18265C828[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

void sub_181BD7D44()
{
  uint64_t v5 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v6 = *(int *)(v2 + 28);
  uint64_t v7 = (void *)(v0 + v6);
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    void *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD60);
  *(void *)(v0 + *(int *)(v12 + 48)) = *(void *)(v1 + *(int *)(v12 + 48));
  swift_unknownObjectRetain();
  uint64_t v11 = (char *)sub_181BD7E2C + 4 * byte_18265C828[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

void sub_181BD7D68()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x181BD7D74LL);
}

void sub_181BD7E2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v29 = *(void *)v20;
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t v28 = *(void *)(v20 + 16);
  char v27 = *(_BYTE *)(v20 + 24);
  sub_181BC683C(*(void *)v20, v21, v28, v27);
  *(void *)uint64_t v19 = v29;
  *(void *)(v19 + 8) = v21;
  *(void *)(v19 + 16) = v28;
  *(_BYTE *)(v19 + 24) = v27;
  *(_WORD *)(v19 + 26) = *(_WORD *)(v20 + 26);
  swift_storeEnumTagMultiPayload();
  *(void *)(v17 + *(int *)(v16 + 24)) = *(void *)(v18 + *(int *)(v16 + 24));
  uint64_t v22 = *(int *)(v16 + 28);
  uint64_t v23 = (void *)(v17 + v22);
  uint64_t v24 = v18 + v22;
  uint64_t v25 = *(void *)(v18 + v22);
  swift_bridgeObjectRetain();
  if (v25)
  {
    uint64_t v26 = *(void *)(v24 + 8);
    *uint64_t v23 = v25;
    v23[1] = v26;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }

  *(_BYTE *)(v14 + *(int *)(a14 + sub_181BD63C8( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7E74()
{
  uint64_t v5 = v4[1];
  void *v3 = *v4;
  v3[1] = v5;
  uint64_t v6 = v4[3];
  v3[2] = v4[2];
  v3[3] = v6;
  uint64_t v7 = v4[5];
  v3[4] = v4[4];
  v3[5] = v7;
  uint64_t v8 = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_unknownObjectRetain();
  }
  v3[6] = v8;
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v9 = *(int *)(v2 + 28);
  uint64_t v10 = (void *)(v0 + v9);
  uint64_t v11 = v1 + v9;
  uint64_t v12 = *(void *)(v1 + v9);
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    *uint64_t v10 = v12;
    v10[1] = v13;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  }

  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7EBC()
{
  uint64_t v5 = v4[1];
  void *v3 = *v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v6 = *(int *)(v2 + 28);
  uint64_t v7 = (void *)(v0 + v6);
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    void *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7ECC()
{
  uint64_t v5 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  swift_storeEnumTagMultiPayload();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v6 = *(int *)(v2 + 28);
  uint64_t v7 = (void *)(v0 + v6);
  uint64_t v8 = v1 + v6;
  uint64_t v9 = *(void *)(v1 + v6);
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    void *v7 = v9;
    v7[1] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7EF0()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x181BD7EFCLL);
}

void sub_181BD7F68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = v20[3];
  void v19[2] = v20[2];
  v19[3] = v22;
  uint64_t v23 = v20[5];
  v19[4] = v20[4];
  v19[5] = v23;
  uint64_t v24 = v20[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v24 != 1) {
    swift_unknownObjectRetain();
  }
  v19[6] = v24;
  swift_storeEnumTagMultiPayload();
  *(void *)(v17 + *(int *)(v16 + 24)) = *(void *)(v18 + *(int *)(v16 + 24));
  uint64_t v25 = *(int *)(v16 + 28);
  uint64_t v26 = (void *)(v17 + v25);
  uint64_t v27 = v18 + v25;
  uint64_t v28 = *(void *)(v18 + v25);
  swift_bridgeObjectRetain();
  if (v28)
  {
    uint64_t v29 = *(void *)(v27 + 8);
    void *v26 = v28;
    v26[1] = v29;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  }

  *(_BYTE *)(v14 + *(int *)(a14 + sub_181BD63C8( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7FBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(void *)(v17 + *(int *)(v16 + 24)) = *(void *)(v18 + *(int *)(v16 + 24));
  uint64_t v22 = *(int *)(v16 + 28);
  uint64_t v23 = (void *)(v17 + v22);
  uint64_t v24 = v18 + v22;
  uint64_t v25 = *(void *)(v18 + v22);
  swift_bridgeObjectRetain();
  if (v25)
  {
    uint64_t v26 = *(void *)(v24 + 8);
    *uint64_t v23 = v25;
    v23[1] = v26;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }

  *(_BYTE *)(v14 + *(int *)(a14 + sub_181BD63C8( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7FCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
  swift_storeEnumTagMultiPayload();
  *(void *)(v17 + *(int *)(v16 + 24)) = *(void *)(v18 + *(int *)(v16 + 24));
  uint64_t v22 = *(int *)(v16 + 28);
  uint64_t v23 = (void *)(v17 + v22);
  uint64_t v24 = v18 + v22;
  uint64_t v25 = *(void *)(v18 + v22);
  swift_bridgeObjectRetain();
  if (v25)
  {
    uint64_t v26 = *(void *)(v24 + 8);
    *uint64_t v23 = v25;
    v23[1] = v26;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }

  *(_BYTE *)(v14 + *(int *)(a14 + sub_181BD63C8( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64)) = *(_BYTE *)(v15 + *(int *)(a14 + 64));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BD7B2CLL);
}

void sub_181BD7FF0()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x181BD7FFCLL);
}

void sub_181BD8078()
{
  uint64_t v2 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v2;
  uint64_t v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  uint64_t v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  uint64_t v5 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v5;
  JUMPOUT(0x181BD80BCLL);
}

uint64_t destroy for NWBrowser.Result.Change(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v5 = type metadata accessor for NWBrowser.Result(0LL);
    uint64_t v6 = a1 + *(int *)(v5 + 20);
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(_BYTE *)(v6 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v6 + 48) != 1LL) {
          goto LABEL_20;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v8 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v6, v8);
        break;
      case 4u:
LABEL_20:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }

    swift_bridgeObjectRelease();
    if (*(void *)(a1 + *(int *)(v5 + 28)))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    uint64_t v9 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD60) + 48);
    swift_unknownObjectRelease();
    uint64_t v10 = v9 + *(int *)(v5 + 20);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), *(_BYTE *)(v10 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v10 + 48) != 1LL) {
          goto LABEL_29;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v11 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
        break;
      case 4u:
LABEL_29:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }

    swift_bridgeObjectRelease();
    uint64_t result = *(void *)(v9 + *(int *)(v5 + 28));
    if (result)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }

  else
  {
    if ((_DWORD)result == 1)
    {
      swift_unknownObjectRelease();
      uint64_t v3 = type metadata accessor for NWBrowser.Result(0LL);
      uint64_t v4 = a1 + *(int *)(v3 + 20);
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_8:
          sub_181BC6974(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(_BYTE *)(v4 + 24));
          break;
        case 1u:
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v4 + 48) != 1LL) {
            goto LABEL_13;
          }
          break;
        case 2u:
LABEL_11:
          swift_bridgeObjectRelease();
          break;
        case 3u:
LABEL_12:
          uint64_t v7 = sub_18264E568();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v4, v7);
          break;
        case 4u:
LABEL_13:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }

    else
    {
      if ((_DWORD)result) {
        return result;
      }
      swift_unknownObjectRelease();
      uint64_t v3 = type metadata accessor for NWBrowser.Result(0LL);
      uint64_t v4 = a1 + *(int *)(v3 + 20);
      type metadata accessor for NWEndpoint();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_8;
        case 1u:
          goto LABEL_9;
        case 2u:
          goto LABEL_11;
        case 3u:
          goto LABEL_12;
        case 4u:
          goto LABEL_13;
        default:
          break;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t result = *(void *)(a1 + *(int *)(v3 + 28));
    if (result) {
      goto LABEL_15;
    }
  }

  return result;
}

void *initializeWithCopy for NWBrowser.Result.Change(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    type metadata accessor for NWBrowser.Result(0LL);
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    uint64_t v8 = (char *)&loc_181BD85D4 + 4 * byte_18265C850[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    type metadata accessor for NWBrowser.Result(0LL);
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    uint64_t v9 = (char *)&loc_181BD8674 + 4 * byte_18265C85A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    type metadata accessor for NWBrowser.Result(0LL);
    type metadata accessor for NWEndpoint();
    swift_unknownObjectRetain();
    uint64_t v7 = (char *)&loc_181BD852C + 4 * byte_18265C85F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

void *assignWithCopy for NWBrowser.Result.Change(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)a1, type metadata accessor for NWBrowser.Result.Change);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0LL);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      uint64_t v8 = (char *)&loc_181BD8CC4 + 4 * byte_18265C864[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0LL);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      uint64_t v9 = (char *)&loc_181BD8D68 + 4 * byte_18265C86E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      type metadata accessor for NWBrowser.Result(0LL);
      type metadata accessor for NWEndpoint();
      swift_unknownObjectRetain();
      uint64_t v7 = (char *)&loc_181BD8C24 + 4 * word_18265C874[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *initializeWithTake for NWBrowser.Result.Change(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *a1 = *a2;
      uint64_t v13 = (int *)type metadata accessor for NWBrowser.Result(0LL);
      uint64_t v14 = v13[5];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v18 = sub_18264E568();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v15, v16, v18);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      *(void *)((char *)a1 + v13[6]) = *(void *)((char *)a2 + v13[6]);
      *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD60);
      uint64_t v26 = *(int *)(v25 + 48);
      uint64_t v27 = (void *)((char *)a1 + v26);
      uint64_t v28 = (char *)a2 + v26;
      *uint64_t v27 = *(void *)((char *)a2 + v26);
      uint64_t v29 = v13[5];
      uint64_t v30 = (char *)v27 + v29;
      uint64_t v31 = &v28[v29];
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v32 = sub_18264E568();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v30, v31, v32);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(v30, v31, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      *(void *)((char *)v27 + v13[6]) = *(void *)&v28[v13[6]];
      *(_OWORD *)((char *)v27 + v13[7]) = *(_OWORD *)&v28[v13[7]];
      *((_BYTE *)a1 + *(int *)(v25 + sub_181BD63C8( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64)) = *((_BYTE *)a2 + *(int *)(v25 + 64));
      goto LABEL_20;
    case 1:
      *a1 = *a2;
      uint64_t v19 = (int *)type metadata accessor for NWBrowser.Result(0LL);
      uint64_t v20 = v19[5];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v24 = sub_18264E568();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v21, v22, v24);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
      }

      *(void *)((char *)a1 + v19[6]) = *(void *)((char *)a2 + v19[6]);
      *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
      goto LABEL_20;
    case 0:
      *a1 = *a2;
      uint64_t v7 = (int *)type metadata accessor for NWBrowser.Result(0LL);
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v12 = sub_18264E568();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v9, v10, v12);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
      }

      *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
LABEL_20:
      swift_storeEnumTagMultiPayload();
      return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

void *assignWithTake for NWBrowser.Result.Change(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)a1, type metadata accessor for NWBrowser.Result.Change);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *a1 = *a2;
        uint64_t v13 = (int *)type metadata accessor for NWBrowser.Result(0LL);
        uint64_t v14 = v13[5];
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for NWEndpoint();
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v18 = sub_18264E568();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v15, v16, v18);
          swift_storeEnumTagMultiPayload();
        }

        else
        {
          memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
        }

        *(void *)((char *)a1 + v13[6]) = *(void *)((char *)a2 + v13[6]);
        *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD60);
        uint64_t v26 = *(int *)(v25 + 48);
        uint64_t v27 = (void *)((char *)a1 + v26);
        uint64_t v28 = (char *)a2 + v26;
        *uint64_t v27 = *(void *)((char *)a2 + v26);
        uint64_t v29 = v13[5];
        uint64_t v30 = (char *)v27 + v29;
        uint64_t v31 = &v28[v29];
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v32 = sub_18264E568();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v30, v31, v32);
          swift_storeEnumTagMultiPayload();
        }

        else
        {
          memcpy(v30, v31, *(void *)(*(void *)(v17 - 8) + 64LL));
        }

        *(void *)((char *)v27 + v13[6]) = *(void *)&v28[v13[6]];
        *(_OWORD *)((char *)v27 + v13[7]) = *(_OWORD *)&v28[v13[7]];
        *((_BYTE *)a1 + *(int *)(v25 + sub_181BD63C8( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64)) = *((_BYTE *)a2 + *(int *)(v25 + 64));
        goto LABEL_21;
      case 1:
        *a1 = *a2;
        uint64_t v19 = (int *)type metadata accessor for NWBrowser.Result(0LL);
        uint64_t v20 = v19[5];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for NWEndpoint();
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v24 = sub_18264E568();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v21, v22, v24);
          swift_storeEnumTagMultiPayload();
        }

        else
        {
          memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
        }

        *(void *)((char *)a1 + v19[6]) = *(void *)((char *)a2 + v19[6]);
        *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
        goto LABEL_21;
      case 0:
        *a1 = *a2;
        uint64_t v7 = (int *)type metadata accessor for NWBrowser.Result(0LL);
        uint64_t v8 = v7[5];
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for NWEndpoint();
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v12 = sub_18264E568();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v9, v10, v12);
          swift_storeEnumTagMultiPayload();
        }

        else
        {
          memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
        }

        *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
        *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
LABEL_21:
        swift_storeEnumTagMultiPayload();
        return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for NWEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for NWEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_181BD999C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_181BD99AC()
{
  uint64_t result = type metadata accessor for NWBrowser.Result(319LL);
  if (v1 <= 0x3F)
  {
    uint64_t v3 = *(void *)(result - 8) + 64LL;
    uint64_t v4 = v3;
    swift_getTupleTypeLayout3();
    uint64_t v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Result.Change.Flags()
{
  return &type metadata for NWBrowser.Result.Change.Flags;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWBrowser.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 62);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 4) >> 6) & 0xFFFFFFC3 | (4 * ((*(unsigned __int8 *)(a1 + 4) >> 2) & 0xF))) ^ 0x3F;
  if (v3 >= 0x3D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NWBrowser.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 62;
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2)
    {
      *(_DWORD *)uint64_t result = 0;
      *(_BYTE *)(result + 4) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t sub_181BD9AFC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 4) >> 6;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_181BD9B18(uint64_t result)
{
  *(_BYTE *)(result + 4) &= 0x3Fu;
  return result;
}

unsigned int *sub_181BD9B30(unsigned int *result, uint64_t a2)
{
  else {
    unint64_t v2 = (a2 - 2) | 0xFFFFFF8000000000LL;
  }
  *uint64_t result = v2;
  *((_BYTE *)result + 4) = BYTE4(v2);
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.State()
{
  return &type metadata for NWBrowser.State;
}

ValueMetadata *type metadata accessor for NWBrowser.Invitation()
{
  return &type metadata for NWBrowser.Invitation;
}

uint64_t getEnumTagSinglePayload for HTTPField.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t _s7Network9NWBrowserC10InvitationV5ScopeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181BD9C68 + 4 * byte_18265C883[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181BD9C9C + 4 * byte_18265C87E[v4]))();
}

uint64_t sub_181BD9C9C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BD9CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BD9CACLL);
  }
  return result;
}

uint64_t sub_181BD9CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BD9CC0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_181BD9CC4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BD9CCC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.Invitation.Scope()
{
  return &type metadata for NWBrowser.Invitation.Scope;
}

void destroy for NWBrowser.LockedState(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
  if (*(void *)(a1 + 40)) {
    swift_release();
  }
}

uint64_t initializeWithCopy for NWBrowser.LockedState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  unsigned int v6 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 24) = *v6;
  }

  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }

  uint64_t v10 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v10;
  id v11 = v10;
  return a1;
}

uint64_t assignWithCopy for NWBrowser.LockedState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    swift_retain();
    goto LABEL_8;
  }

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  uint64_t v8 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v10;
      swift_retain();
      goto LABEL_15;
    }

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NWBrowser.LockedState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v6;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v7;
    goto LABEL_8;
  }

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  uint64_t v8 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v10;
      goto LABEL_15;
    }

uint64_t getEnumTagSinglePayload for NWBrowser.LockedState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWBrowser.LockedState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWBrowser.LockedState()
{
  return &type metadata for NWBrowser.LockedState;
}

uint64_t sub_181BDA0BC(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t sub_181BDA0F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_181BDA12C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1) {
    return sub_181BCD4AC(result, a2);
  }
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_181BDA14C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1) {
    return sub_181BCD4F0(result, a2);
  }
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_181BDA16C(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_181BDA194()
{
  return swift_deallocObject();
}

uint64_t sub_181BDA1A4(uint64_t a1)
{
  return sub_181BD028C(a1, *(void ***)(v1 + 16));
}

uint64_t sub_181BDA1AC()
{
  return swift_deallocObject();
}

uint64_t sub_181BDA1BC()
{
  return swift_deallocObject();
}

uint64_t sub_181BDA1E0(uint64_t a1, int a2, _BYTE *a3, uint64_t a4)
{
  return sub_181C89B44(a1, a2, a3, a4, v4);
}

uint64_t sub_181BDA1E8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    __n128 result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_181BDA220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_181BDA308@<X0>(nw_endpoint *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  uint64_t v8 = (void *)swift_unknownObjectRetain();
  id v9 = nw_endpoint_copy_interface(v8);
  uint64_t v10 = (uint64_t)v9;
  if (v9) {
    uint64_t v11 = (uint64_t)v9;
  }
  else {
    uint64_t v11 = 1LL;
  }
  nw_txt_record_t v12 = nw_endpoint_copy_txt_record(a1);
  swift_unknownObjectRelease();
  if (nw_endpoint_get_type(a1) == nw_endpoint_type_host)
  {
    nw_endpoint_get_hostname(a1);
    uint64_t v14 = sub_18264EB80();
    uint64_t v16 = v15;
    swift_unknownObjectRetain();
    uint16_t port = nw_endpoint_get_port(a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    *(void *)uint64_t v7 = v14;
    *((void *)v7 + 1) = v16;
    *((void *)v7 + 2) = v11;
    v7[24] = 0;
    *((_WORD *)v7 + 13) = port;
    goto LABEL_8;
  }

  if (nw_endpoint_get_type(a1) != nw_endpoint_type_address)
  {
    if (nw_endpoint_get_type(a1) == nw_endpoint_type_bonjour_service)
    {
      nw_endpoint_get_bonjour_service_name(a1);
      uint64_t v23 = sub_18264EB80();
      uint64_t v38 = v24;
      uint64_t v39 = v23;
      nw_endpoint_get_bonjour_service_type(a1);
      uint64_t v25 = sub_18264EB80();
      uint64_t v27 = v26;
      nw_endpoint_get_bonjour_service_domain(a1);
      uint64_t v28 = sub_18264EB80();
      uint64_t v30 = v29;
      swift_unknownObjectRelease_n();
      uint64_t v31 = v38;
      *(void *)uint64_t v7 = v39;
      *((void *)v7 + 1) = v31;
      *((void *)v7 + 2) = v25;
      *((void *)v7 + 3) = v27;
      *((void *)v7 + 4) = v28;
      *((void *)v7 + 5) = v30;
      *((void *)v7 + 6) = v11;
      goto LABEL_8;
    }

    if (nw_endpoint_get_type(a1) == 4)
    {
      uint64_t v32 = (void *)nw_endpoint_copy_cfurl(a1);
      sub_18264E538();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      goto LABEL_8;
    }

uint64_t sub_181BDA6AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v42[2] = *(addrinfo **)MEMORY[0x1895F89C0];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A238);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v40[1] = a1;
  v40[2] = a2;
  *(void *)&v41.ai_flags = a1;
  *(void *)&v41.ai_sockint type = a2;
  v42[0] = (addrinfo *)37;
  v42[1] = (addrinfo *)0xE100000000000000LL;
  uint64_t v11 = sub_18264E694();
  uint64_t v12 = 1LL;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  sub_181BE46C4();
  swift_bridgeObjectRetain_n();
  unint64_t v13 = sub_18264F0E4();
  unint64_t v15 = v14;
  char v17 = v16;
  sub_181BDA0F0((uint64_t)v10, &qword_18C58A238);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_181BDA9E4(v15, a1, a2);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    MEMORY[0x186E0E670](v18, v20, v22, v24);
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_18264EACC();
    swift_bridgeObjectRelease();
    uint64_t v12 = (uint64_t)nw_interface_create_with_name((char *)(v25 + 32));
    swift_release();
    if (v12) {
      sub_181BDAA30(v13);
    }
    else {
      uint64_t v12 = 1LL;
    }
  }

  v41.ai_flags = 4;
  v41.ai_family = a3;
  int v26 = a3;
  *(void *)&v41.ai_sockint type = 1LL;
  v41.ai_addrlen = 0;
  memset(&v41.ai_canonname, 0, 24);
  v42[0] = 0LL;
  uint64_t v27 = sub_18264EACC();
  swift_bridgeObjectRelease();
  int v28 = getaddrinfo((const char *)(v27 + 32), 0LL, &v41, v42);
  swift_release();
  if (v28 || (uint64_t v30 = v42[0]) == 0LL)
  {
    uint64_t result = sub_181BC69C8(v12);
    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
    *(_BYTE *)(a4 + 24) = -1;
    return result;
  }

  ai_addr = v42[0]->ai_addr;
  if (ai_addr)
  {
    int sa_family = ai_addr->sa_family;
    if (sa_family == 30)
    {
      unint64_t v34 = *(void *)&ai_addr->sa_data[6];
      unint64_t v35 = *(void *)&ai_addr[1].sa_len;
      unsigned int v37 = *(_DWORD *)&ai_addr[1].sa_data[6];
      if (v37)
      {
        uint64_t v38 = nw_interface_create_with_index(v37);
        if (v38) {
          uint64_t v39 = (uint64_t)v38;
        }
        else {
          uint64_t v39 = 1LL;
        }
        sub_181BC69C8(v12);
        uint64_t v12 = v39;
      }

      if (v34 || (_DWORD)v35 != -65536 || v26)
      {
        char v36 = 2;
        uint64_t v33 = v12;
        goto LABEL_24;
      }

      uint64_t v33 = 0LL;
      unint64_t v34 = HIDWORD(v35);
LABEL_22:
      char v36 = 1;
      unint64_t v35 = v12;
LABEL_24:
      sub_181BC6890(v12);
      goto LABEL_25;
    }

    if (sa_family == 2)
    {
      uint64_t v33 = 0LL;
      unint64_t v34 = *(unsigned int *)&ai_addr->sa_data[2];
      goto LABEL_22;
    }
  }

  unint64_t v34 = 0LL;
  unint64_t v35 = 0LL;
  uint64_t v33 = 0LL;
  char v36 = -1;
LABEL_25:
  freeaddrinfo(v30);
  uint64_t result = sub_181BC69C8(v12);
  *(void *)a4 = v34;
  *(void *)(a4 + 8) = v35;
  *(void *)(a4 + 16) = v33;
  *(_BYTE *)(a4 + 24) = v36;
  return result;
}

unint64_t sub_181BDA9E4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_18264EC04();
  }
  __break(1u);
  return result;
}

unint64_t sub_181BDAA30(unint64_t result)
{
  unint64_t v2 = v1[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_18264EAE4();
  }
  __break(1u);
  return result;
}

BOOL IPv6Address.isIPv4Mapped.getter()
{
  return (*(void *)v0 | *(unsigned int *)(v0 + 8) ^ 0xFFFF0000LL) == 0;
}

void IPv6Address.asIPv4.getter(unint64_t *a1@<X8>)
{
  if (!*v1
    && ((v3 = v1[1], uint64_t v2 = v1[2], (_DWORD)v3 == -65536)
     || ((v3 & 0xFEFFFFFF00000000LL) != 0 ? (BOOL v4 = (_DWORD)v3 == 0) : (BOOL v4 = 0), v4)))
  {
    *a1 = HIDWORD(v3);
    a1[1] = v2;
    sub_181BC6890(v2);
  }

  else
  {
    *(_OWORD *)a1 = xmmword_18265D110;
  }

void sub_181BDAAD8()
{
  dword_18C58BFB0 = 0;
  qword_18C58BFB8 = 1LL;
}

uint64_t static IPv4Address.any.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDAC8C(&qword_18C58B098, &dword_18C58BFB0, &qword_18C58BFB8, a1);
}

void sub_181BDAB10()
{
  dword_18C58BFC0 = -1;
  qword_18C58BFC8 = 1LL;
}

uint64_t static IPv4Address.broadcast.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDAC8C(&qword_18C58B0A0, &dword_18C58BFC0, &qword_18C58BFC8, a1);
}

void sub_181BDAB4C()
{
  dword_18C58BFD0 = 16777343;
  qword_18C58BFD8 = 1LL;
}

uint64_t static IPv4Address.loopback.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDAC8C(&qword_18C58B0A8, &dword_18C58BFD0, &qword_18C58BFD8, a1);
}

void sub_181BDAB8C()
{
  dword_18C58BFE0 = 16777440;
  qword_18C58BFE8 = 1LL;
}

uint64_t static IPv4Address.allHostsGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDAC8C(&qword_18C58B0B0, &dword_18C58BFE0, &qword_18C58BFE8, a1);
}

void sub_181BDABCC()
{
  dword_18C58BFF0 = 33554656;
  qword_18C58BFF8 = 1LL;
}

uint64_t static IPv4Address.allRoutersGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDAC8C(&qword_18C58B0B8, &dword_18C58BFF0, &qword_18C58BFF8, a1);
}

void sub_181BDAC0C()
{
  dword_18C58C000 = 369098976;
  qword_18C58C008 = 1LL;
}

uint64_t static IPv4Address.allReportsGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDAC8C(&qword_18C58B0C0, &dword_18C58C000, &qword_18C58C008, a1);
}

void sub_181BDAC4C()
{
  dword_18C58C010 = -83885856;
  qword_18C58C018 = 1LL;
}

uint64_t static IPv4Address.mdnsGroup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDAC8C(&qword_18C58B0C8, &dword_18C58C010, &qword_18C58C018, a1);
}

uint64_t sub_181BDAC8C@<X0>(void *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v7 = *a3;
  *(_DWORD *)a4 = *a2;
  *(void *)(a4 + 8) = v7;
  return sub_181BC6890(v7);
}

uint64_t IPv4Address.isLoopback.getter()
{
  int v1 = *v0;
  uint64_t v2 = (nw_interface *)*((void *)v0 + 1);
  if (qword_18C58B0A8 != -1) {
    swift_once();
  }
  if (v1 == dword_18C58BFD0)
  {
    uint64_t v3 = qword_18C58BFD8;
    if (v2 == (nw_interface *)1)
    {
      if (qword_18C58BFD8 == 1) {
        return v3 & 1;
      }
    }

    else
    {
      nw_interface_t v6 = v2;
      if (qword_18C58BFD8 != 1)
      {
        uint64_t v5 = qword_18C58BFD8;
        swift_unknownObjectRetain_n();
        LOBYTE(v3) = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v6, (nw_interface_t *)&v5);
        swift_unknownObjectRelease();
        sub_181BC69C8((uint64_t)v2);
        return v3 & 1;
      }

      swift_unknownObjectRetain();
    }

    sub_181BC6890(v3);
    sub_181BC69C8((uint64_t)v2);
    sub_181BC69C8(v3);
    LOBYTE(v3) = 0;
  }

  else
  {
    LOBYTE(v3) = 0;
  }

  return v3 & 1;
}

BOOL IPv4Address.isLinkLocal.getter()
{
  return *v0 == -343;
}

BOOL IPv4Address.isMulticast.getter()
{
  return (*v0 & 0xF0) == 224;
}

uint64_t IPv4Address.rawValue.getter()
{
  v8[5] = *MEMORY[0x1895F89C0];
  int v7 = *v0;
  v8[3] = MEMORY[0x1896181D0];
  v8[4] = MEMORY[0x1896071B0];
  v8[0] = &v7;
  v8[1] = v8;
  int v1 = __swift_project_boxed_opaque_existential_2(v8, MEMORY[0x1896181D0]);
  uint64_t v2 = (_BYTE *)*v1;
  if (*v1 && (uint64_t v3 = (_BYTE *)v1[1], v4 = v3 - v2, v3 != v2))
  {
    if (v4 <= 14)
    {
      uint64_t v5 = sub_181BE44F8(v2, v3);
    }

    else if ((unint64_t)v4 >= 0x7FFFFFFF)
    {
      uint64_t v5 = sub_181BE45B8((uint64_t)v2, (uint64_t)v3);
    }

    else
    {
      uint64_t v5 = sub_181BE4630((uint64_t)v2, (uint64_t)v3);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v5;
}

uint64_t sub_181BDAEEC(uint64_t a1, unint64_t a2)
{
  v17[5] = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v16 = a1;
  *((void *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C140);
  if (!swift_dynamicCast())
  {
    uint64_t v15 = 0LL;
    memset(v14, 0, sizeof(v14));
    sub_181BDA0F0((uint64_t)v14, &qword_18C58C148);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      uint64_t v5 = v17;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v2 = sub_18264F228();
      }

      if (v2) {
        uint64_t v4 = (_BYTE *)(v2 + v3);
      }
      else {
        uint64_t v4 = 0LL;
      }
      uint64_t v5 = (_BYTE *)v2;
    }

    nw_interface_t v6 = sub_181BE4920(v5, v4);
    unint64_t v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v14[0] = v6;
      *((void *)&v14[0] + 1) = v8;
      return *(void *)&v14[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      uint64_t v9 = sub_18264EB8C();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v9 = HIBYTE(a2) & 0xF;
    }

    else
    {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v14[0] = sub_181BE4984(v9);
    *((void *)&v14[0] + 1) = v10;
    MEMORY[0x1895F8858](*(void *)&v14[0]);
    sub_181BE3290();
    __asm { BR              X12 }
  }

  sub_181BE61DC(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_2(v17, v17[3]);
  sub_18264E4CC();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v17);
  return *(void *)&v14[0];
}

uint64_t sub_181BDB3F0(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1896181D0];
  v8[4] = MEMORY[0x1896071B0];
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_2(v8, MEMORY[0x1896181D0]);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_181BE44F8(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_181BE45B8((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_181BE4630((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v6;
}

void IPv4Address.init(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_181BDB4EC@<X0>(int a1@<W8>)
{
  if (BYTE6(v3) == 4LL)
  {
    if (!a1)
    {
      unsigned int v9 = v4;
      goto LABEL_13;
    }

    if (a1 == 1)
    {
      if ((int)v4 <= v4 >> 32)
      {
        uint64_t v5 = sub_18264E484();
        if (!v5)
        {
LABEL_18:
          sub_18264E49C();
          __break(1u);
          goto LABEL_19;
        }

        uint64_t v6 = v5;
        uint64_t v7 = sub_18264E4A8();
        uint64_t v8 = (int)v4 - v7;
        if (!__OFSUB__((int)v4, v7))
        {
          sub_18264E49C();
          unsigned int v9 = *(_DWORD *)(v6 + v8);
LABEL_13:
          uint64_t result = sub_181BCD4F0(v4, v3);
          uint64_t v11 = v9;
          goto LABEL_14;
        }

uint64_t IPv4Address.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = 2LL;
  sub_181BDA6AC(a1, a2, 2, (uint64_t)&v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 == 255)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t result = v7;
    uint64_t v4 = v8;
    if (v10 == 1)
    {
      uint64_t v6 = v7;
    }

    else
    {
      uint64_t result = sub_181BE46B0(v7, v8, v9, v10);
      uint64_t v6 = 0LL;
      uint64_t v4 = 2LL;
    }
  }

  *a3 = v6;
  a3[1] = v4;
  return result;
}

uint64_t IPv4Address.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *a1 = v2;
  return sub_181BC6890(v2);
}

uint64_t IPv4Address.hash(into:)()
{
  uint64_t v1 = *(nw_interface **)(v0 + 8);
  sub_18264F678();
  sub_18264F660();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_18264F654();
    unint64_t v3 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_18264EB80();
  }

  else
  {
    sub_18264F654();
  }

  sub_181BC69C8((uint64_t)v1);
  sub_18264EB44();
  return swift_bridgeObjectRelease();
}

uint64_t IPv4Address.debugDescription.getter()
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  *(_DWORD *)&v6.sa_len = 528;
  *(_DWORD *)&v6.sa_data[2] = v1;
  *(void *)&v6.sa_data[6] = 0LL;
  unint64_t v3 = (char *)swift_slowAlloc();
  if (getnameinfo(&v6, 0x10u, v3, 0x64u, 0LL, 0, 2)) {
    uint64_t v4 = 63LL;
  }
  else {
    uint64_t v4 = sub_18264EB80();
  }
  MEMORY[0x186E12168](v3, -1LL, -1LL);
  if (v2 != 1)
  {
    swift_unknownObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v7 = v2;
    sub_18264F2DC();
    sub_181BC69C8(v2);
    return 0LL;
  }

  return v4;
}

uint64_t IPv4Address.hashValue.getter()
{
  int v1 = *(nw_interface **)(v0 + 8);
  sub_18264F648();
  sub_18264F678();
  if (v1 == (nw_interface *)1)
  {
    sub_18264F660();
  }

  else
  {
    sub_18264F660();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_18264F654();
      uint64_t v2 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_18264EB80();
    }

    else
    {
      sub_18264F654();
    }

    sub_181BC69C8((uint64_t)v1);
    sub_18264EB44();
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t sub_181BDB9AC()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  int v2 = *v0;
  return sub_181BDB3F0((uint64_t)&v2, (uint64_t)&v3);
}

uint64_t sub_181BDBA0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = 2LL;
  sub_181BDA6AC(a1, a2, 2, (uint64_t)&v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 == 255)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t result = v7;
    uint64_t v4 = v8;
    if (v10 == 1)
    {
      uint64_t v6 = v7;
    }

    else
    {
      uint64_t result = sub_181BE46B0(v7, v8, v9, v10);
      uint64_t v6 = 0LL;
      uint64_t v4 = 2LL;
    }
  }

  *a3 = v6;
  a3[1] = v4;
  return result;
}

uint64_t sub_181BDBA94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *a1 = v2;
  return sub_181BC6890(v2);
}

uint64_t sub_181BDBAA0()
{
  uint64_t v1 = *((void *)v0 + 1);
  int v5 = *v0;
  uint64_t v6 = v1;
  if (qword_18C58B0A8 != -1) {
    swift_once();
  }
  int v3 = dword_18C58BFD0;
  uint64_t v4 = qword_18C58BFD8;
  return _s7Network11IPv4AddressV2eeoiySbAC_ACtFZ_0((uint64_t)&v5, (uint64_t)&v3) & 1;
}

BOOL sub_181BDBB18()
{
  return *v0 == -343;
}

BOOL sub_181BDBB28()
{
  return (*v0 & 0xF0) == 224;
}

uint64_t sub_181BDBB40()
{
  uint64_t v1 = *(nw_interface **)(v0 + 8);
  sub_18264F678();
  sub_18264F660();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_18264F654();
    int v3 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_18264EB80();
  }

  else
  {
    sub_18264F654();
  }

  sub_181BC69C8((uint64_t)v1);
  sub_18264EB44();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181BDBC04()
{
  uint64_t v1 = *(nw_interface **)(v0 + 8);
  sub_18264F648();
  sub_18264F678();
  if (v1 == (nw_interface *)1)
  {
    sub_18264F660();
  }

  else
  {
    sub_18264F660();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_18264F654();
      uint64_t v2 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_18264EB80();
    }

    else
    {
      sub_18264F654();
    }

    sub_181BC69C8((uint64_t)v1);
    sub_18264EB44();
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

void sub_181BDBCEC()
{
  uint64_t v0 = *(void *)(MEMORY[0x1895FB7E8] + 8LL);
  qword_18C58C020 = *MEMORY[0x1895FB7E8];
  *(void *)algn_18C58C028 = v0;
  qword_18C58C030 = 1LL;
}

uint64_t static IPv6Address.any.getter@<X0>(void *a1@<X8>)
{
  return sub_181BDBE84(&qword_18C58B0D0, &qword_18C58C020, &qword_18C58C030, a1);
}

void sub_181BDBD30()
{
  uint64_t v0 = *(void *)(MEMORY[0x1895FB7E8] + 8LL);
  qword_18C58C038 = *MEMORY[0x1895FB7E8];
  unk_18C58C040 = v0;
  qword_18C58C048 = 1LL;
}

uint64_t static IPv6Address.broadcast.getter@<X0>(void *a1@<X8>)
{
  return sub_181BDBE84(&qword_18C58B0D8, &qword_18C58C038, &qword_18C58C048, a1);
}

void sub_181BDBD74()
{
  uint64_t v0 = *(void *)(MEMORY[0x1895FB800] + 8LL);
  qword_18C58C050 = *MEMORY[0x1895FB800];
  *(void *)algn_18C58C058 = v0;
  qword_18C58C060 = 1LL;
}

uint64_t static IPv6Address.loopback.getter@<X0>(void *a1@<X8>)
{
  return sub_181BDBE84(&qword_18C58B0E0, &qword_18C58C050, &qword_18C58C060, a1);
}

void sub_181BDBDB8()
{
  uint64_t v0 = *(void *)(MEMORY[0x1895FB808] + 8LL);
  qword_18C58C068 = *MEMORY[0x1895FB808];
  unk_18C58C070 = v0;
  qword_18C58C078 = 1LL;
}

uint64_t static IPv6Address.nodeLocalNodes.getter@<X0>(void *a1@<X8>)
{
  return sub_181BDBE84(&qword_18C58B0E8, &qword_18C58C068, &qword_18C58C078, a1);
}

void sub_181BDBDFC()
{
  uint64_t v0 = *(void *)(MEMORY[0x1895FB7F0] + 8LL);
  qword_18C58C080 = *MEMORY[0x1895FB7F0];
  *(void *)algn_18C58C088 = v0;
  qword_18C58C090 = 1LL;
}

uint64_t static IPv6Address.linkLocalNodes.getter@<X0>(void *a1@<X8>)
{
  return sub_181BDBE84(&qword_18C58B0F0, &qword_18C58C080, &qword_18C58C090, a1);
}

void sub_181BDBE40()
{
  uint64_t v0 = *(void *)(MEMORY[0x1895FB7F8] + 8LL);
  qword_18C58C098 = *MEMORY[0x1895FB7F8];
  unk_18C58C0A0 = v0;
  qword_18C58C0A8 = 1LL;
}

uint64_t static IPv6Address.linkLocalRouters.getter@<X0>(void *a1@<X8>)
{
  return sub_181BDBE84(&qword_18C58B0F8, &qword_18C58C098, &qword_18C58C0A8, a1);
}

uint64_t sub_181BDBE84@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v7 = a2[1];
  uint64_t v8 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  a4[2] = v8;
  return sub_181BC6890(v8);
}

Network::IPv6Address::Scope_optional __swiftcall IPv6Address.Scope.init(rawValue:)( Network::IPv6Address::Scope_optional rawValue)
{
  char v2 = 1;
  switch(rawValue.value)
  {
    case 1:
      char v2 = 0;
      goto LABEL_3;
    case 2:
LABEL_3:
      *uint64_t v1 = v2;
      break;
    case 5:
      *uint64_t v1 = 2;
      break;
    case 8:
      *uint64_t v1 = 3;
      break;
    case 0xE:
      *uint64_t v1 = 4;
      break;
    default:
      *uint64_t v1 = 5;
      break;
  }

  return rawValue;
}

unint64_t IPv6Address.Scope.rawValue.getter()
{
  return 0xE08050201uLL >> (8 * *v0);
}

BOOL sub_181BDBF5C(_BYTE *a1, _BYTE *a2)
{
  return ((0xE08050201uLL >> (8 * *a1)) & 0xF) == ((0xE08050201uLL >> (8 * *a2)) & 0xF);
}

uint64_t sub_181BDBF94()
{
  return sub_18264F684();
}

uint64_t sub_181BDBFE8()
{
  return sub_18264F660();
}

uint64_t sub_181BDC024()
{
  return sub_18264F684();
}

Network::IPv6Address::Scope_optional sub_181BDC074(Swift::UInt8 *a1)
{
  return IPv6Address.Scope.init(rawValue:)(*a1);
}

void sub_181BDC07C(_BYTE *a1@<X8>)
{
  *a1 = 0xE08050201uLL >> (8 * *v1);
}

BOOL IPv6Address.isAny.getter()
{
  return *v0 == 0LL;
}

BOOL IPv6Address.isLoopback.getter()
{
  return (*v0 | v0[1] ^ 0x100000000000000LL) == 0;
}

BOOL IPv6Address.isIPv4Compatabile.getter()
{
  uint64_t v1 = HIDWORD(v0[1]);
  else {
    BOOL v2 = (_DWORD)v1 == 0;
  }
  return !v2 && (_DWORD)v1 != 0x1000000;
}

BOOL IPv6Address.is6to4.getter()
{
  return *v0 == 544;
}

BOOL IPv6Address.isLinkLocal.getter()
{
  return (*v0 & 0xC0FFLL) == 33022;
}

BOOL IPv6Address.isMulticast.getter()
{
  return *v0 == 255;
}

void IPv6Address.multicastScope.getter(char *a1@<X8>)
{
  if (*(_BYTE *)v1 == 0xFF)
  {
    char v2 = 0;
    switch((*v1 >> 8) & 0xF)
    {
      case 1u:
        goto LABEL_3;
      case 2u:
        *a1 = 1;
        break;
      case 5u:
        *a1 = 2;
        break;
      case 8u:
        *a1 = 3;
        break;
      case 0xEu:
        *a1 = 4;
        break;
      default:
        goto LABEL_2;
    }
  }

  else
  {
LABEL_2:
    char v2 = 5;
LABEL_3:
    *a1 = v2;
  }

uint64_t IPv6Address.rawValue.getter()
{
  v10[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  v8[3] = MEMORY[0x1896181D0];
  v8[4] = MEMORY[0x1896071B0];
  v8[0] = v9;
  v8[1] = v10;
  char v2 = __swift_project_boxed_opaque_existential_2(v8, MEMORY[0x1896181D0]);
  int v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_181BE44F8(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_181BE45B8((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_181BE4630((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v6;
}

BOOL sub_181BDC294(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  int v3 = result;
  if (*(_BYTE *)(a2 + 32) == result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }

  __break(1u);
  return result;
}

BOOL IPv6Address.isUniqueLocal.getter()
{
  v8[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  v7[0] = *v0;
  v7[1] = v1;
  uint64_t v2 = sub_181BDB3F0((uint64_t)v7, (uint64_t)v8);
  unint64_t v4 = v3;
  uint64_t v5 = sub_18264E634();
  sub_181BCD4F0(v2, v4);
  return sub_181BDC294(v5, (uint64_t)&unk_189BA89E0);
}

void IPv6Address.init(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_181BDC3E0@<X0>(int a1@<W8>)
{
  if (BYTE6(v4) != 16LL)
  {
    sub_181BCD4F0(v3, v4);
    uint64_t result = sub_181BC69C8(v2);
    *uint64_t v1 = 0LL;
    v1[1] = 0LL;
    v1[2] = 2LL;
    return result;
  }

  if (!a1)
  {
    uint64_t result = sub_181BCD4F0(v3, v4);
    uint64_t v10 = v4 & 0xFFFFFFFFFFFFLL;
    goto LABEL_13;
  }

  if (a1 != 1)
  {
    uint64_t v12 = *(void *)(v3 + 16);
    swift_retain();
    swift_retain();
    uint64_t v13 = sub_18264E484();
    if (!v13)
    {
LABEL_18:
      sub_18264E49C();
      __break(1u);
      JUMPOUT(0x181BDC53CLL);
    }

    uint64_t v14 = v13;
    uint64_t v15 = sub_18264E4A8();
    BOOL v16 = __OFSUB__(v12, v15);
    uint64_t v17 = v12 - v15;
    if (!v16)
    {
      sub_18264E49C();
      uint64_t v18 = v14 + v17;
      uint64_t v19 = *(void *)(v14 + v17);
      uint64_t v10 = *(void *)(v18 + 8);
      swift_release();
      swift_release();
      uint64_t result = sub_181BCD4F0(v3, v4);
      uint64_t v3 = v19;
      goto LABEL_13;
    }

    goto LABEL_15;
  }

  if ((int)v3 > v3 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v5 = sub_18264E484();
  if (!v5)
  {
LABEL_17:
    sub_18264E49C();
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v6 = v5;
  uint64_t v7 = sub_18264E4A8();
  uint64_t v8 = (int)v3 - v7;
  if (__OFSUB__((int)v3, v7))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  sub_18264E49C();
  uint64_t v9 = *(void *)(v6 + v8);
  uint64_t v10 = *(void *)(v6 + v8 + 8);
  uint64_t result = sub_181BCD4F0(v3, v4);
  uint64_t v3 = v9;
LABEL_13:
  *uint64_t v1 = v3;
  v1[1] = v10;
  v1[2] = v2;
  return result;
}

uint64_t IPv6Address.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 != 255)
  {
    uint64_t result = v7;
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    if (v10 == 2)
    {
      *a3 = v7;
      a3[1] = v5;
      a3[2] = v6;
      return result;
    }

    uint64_t result = sub_181BE46B0(v7, v8, v9, v10);
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 2LL;
  return result;
}

uint64_t IPv6Address.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = v2;
  return sub_181BC6890(v2);
}

uint64_t IPv6Address.hash(into:)()
{
  uint64_t v1 = *(nw_interface **)(v0 + 16);
  sub_18264F678();
  sub_18264F678();
  sub_18264F678();
  sub_18264F678();
  sub_18264F660();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_18264F654();
    uint64_t v3 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_18264EB80();
  }

  else
  {
    sub_18264F654();
  }

  sub_181BC69C8((uint64_t)v1);
  sub_18264EB44();
  return swift_bridgeObjectRelease();
}

uint64_t IPv6Address.debugDescription.getter()
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  uint64_t v7 = v0[1];
  *(void *)&v6.sa_len = 7708LL;
  *(void *)&v6.sa_data[6] = v1;
  int v8 = 0;
  uint64_t v3 = (char *)swift_slowAlloc();
  if (getnameinfo(&v6, 0x1Cu, v3, 0x64u, 0LL, 0, 2)) {
    uint64_t v4 = 63LL;
  }
  else {
    uint64_t v4 = sub_18264EB80();
  }
  MEMORY[0x186E12168](v3, -1LL, -1LL);
  if (v2 != 1)
  {
    swift_unknownObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264F2DC();
    sub_181BC69C8(v2);
    return 0LL;
  }

  return v4;
}

uint64_t IPv6Address.hashValue.getter()
{
  uint64_t v1 = *(nw_interface **)(v0 + 16);
  sub_18264F648();
  sub_18264F678();
  sub_18264F678();
  sub_18264F678();
  sub_18264F678();
  if (v1 == (nw_interface *)1)
  {
    sub_18264F660();
  }

  else
  {
    sub_18264F660();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_18264F654();
      uint64_t v2 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_18264EB80();
    }

    else
    {
      sub_18264F654();
    }

    sub_181BC69C8((uint64_t)v1);
    sub_18264EB44();
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t sub_181BDC91C()
{
  v4[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  return sub_181BDB3F0((uint64_t)v3, (uint64_t)v4);
}

uint64_t sub_181BDC97C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 != 255)
  {
    uint64_t result = v7;
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    if (v10 == 2)
    {
      *a3 = v7;
      a3[1] = v5;
      a3[2] = v6;
      return result;
    }

    uint64_t result = sub_181BE46B0(v7, v8, v9, v10);
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 2LL;
  return result;
}

uint64_t sub_181BDC9F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = v2;
  return sub_181BC6890(v2);
}

BOOL sub_181BDC9FC()
{
  return (*v0 | v0[1] ^ 0x100000000000000LL) == 0;
}

BOOL sub_181BDCA14()
{
  return (*v0 & 0xC0FFLL) == 33022;
}

BOOL sub_181BDCA30()
{
  return *v0 == 255;
}

uint64_t sub_181BDCA48()
{
  uint64_t v1 = *(nw_interface **)(v0 + 16);
  sub_18264F648();
  sub_18264F678();
  sub_18264F678();
  sub_18264F678();
  sub_18264F678();
  if (v1 == (nw_interface *)1)
  {
    sub_18264F660();
  }

  else
  {
    sub_18264F660();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_18264F654();
      uint64_t v2 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_18264EB80();
    }

    else
    {
      sub_18264F654();
    }

    sub_181BC69C8((uint64_t)v1);
    sub_18264EB44();
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

void __swiftcall EthernetAddress.init(_:)(Network::EthernetAddress *__return_ptr retstr, ether_addr *a2)
{
  *(_WORD *)retstr->addr.octet = (_WORD)a2;
  retstr->addr.octet[2] = BYTE2(a2);
  retstr->addr.octet[3] = BYTE3(a2);
  retstr->addr.octet[4] = BYTE4(a2);
  retstr->addr.octet[5] = BYTE5(a2);
}

void EthernetAddress.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_181BDCBD0@<X0>(int a1@<W8>)
{
  if (BYTE6(v2) == 6LL)
  {
    if (!a1)
    {
      uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(v3);
      *(int16x4_t *)v28.i8 = vmovn_s32( vuzp1q_s32( (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_18265D130),  (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_18265D120)));
      unint64_t v11 = (unint64_t)v3 >> 40;
      unsigned __int8 v9 = v3;
      goto LABEL_13;
    }

    if (a1 == 1)
    {
      if ((int)v3 <= v3 >> 32)
      {
        uint64_t v4 = sub_18264E484();
        if (!v4)
        {
LABEL_18:
          sub_18264E49C();
          __break(1u);
          goto LABEL_19;
        }

        uint64_t v5 = v4;
        uint64_t v6 = sub_18264E4A8();
        uint64_t v7 = (int)v3 - v6;
        if (!__OFSUB__((int)v3, v6))
        {
          sub_18264E49C();
          uint64_t v8 = v5 + v7;
          unsigned __int8 v9 = *(_BYTE *)(v5 + v7);
          v10.i32[0] = *(_DWORD *)(v8 + 1);
          uint16x8_t v28 = vmovl_u8(v10);
          unint64_t v11 = *(unsigned __int8 *)(v8 + 5);
LABEL_13:
          uint64_t result = sub_181BCD4F0(v3, v2);
          char v14 = 0;
          uint32x4_t v24 = vmovl_u16((uint16x4_t)(v28.i64[0] & 0xFF00FF00FF00FFLL));
          v25.i64[0] = v24.u32[0];
          v25.i64[1] = v24.u32[1];
          uint64x2_t v26 = v25;
          v25.i64[0] = v24.u32[2];
          v25.i64[1] = v24.u32[3];
          int8x16_t v27 = vorrq_s8( (int8x16_t)vshlq_u64(v26, (uint64x2_t)xmmword_18265D150),  (int8x16_t)vshlq_u64(v25, (uint64x2_t)xmmword_18265D140));
          unint64_t v13 = *(void *)&vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)) | (v11 << 40) | v9;
          goto LABEL_14;
        }

uint64_t EthernetAddress.hash(into:)()
{
  return sub_18264F660();
}

uint64_t EthernetAddress.debugDescription.getter()
{
  char v1 = *v0;
  char v2 = v0[1];
  char v3 = v0[2];
  char v4 = v0[3];
  char v5 = v0[4];
  char v6 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0B0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18265D160;
  uint64_t v8 = MEMORY[0x18961A610];
  uint64_t v9 = MEMORY[0x18961A658];
  *(void *)(v7 + 56) = MEMORY[0x18961A610];
  *(void *)(v7 + 64) = v9;
  *(_BYTE *)(v7 + 32) = v1;
  *(void *)(v7 + 96) = v8;
  *(void *)(v7 + 104) = v9;
  *(_BYTE *)(v7 + 72) = v2;
  *(void *)(v7 + 136) = v8;
  *(void *)(v7 + 144) = v9;
  *(_BYTE *)(v7 + 112) = v3;
  *(void *)(v7 + 176) = v8;
  *(void *)(v7 + 184) = v9;
  *(_BYTE *)(v7 + 152) = v4;
  *(void *)(v7 + 216) = v8;
  *(void *)(v7 + 224) = v9;
  *(_BYTE *)(v7 + 192) = v5;
  *(void *)(v7 + 256) = v8;
  *(void *)(v7 + 264) = v9;
  *(_BYTE *)(v7 + 232) = v6;
  return sub_18264EA78();
}

uint64_t EthernetAddress.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181BDCF9C()
{
  return sub_18264F684();
}

uint64_t sub_181BDD048()
{
  return sub_18264F660();
}

uint64_t sub_181BDD0C4()
{
  return sub_18264F684();
}

double NWEndpoint.Host.init(stringLiteral:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v8;
  char v5 = v9;
  double result = *(double *)&v7;
  *(_OWORD *)a3 = v7;
  *(void *)(a3 + 16) = v4;
  *(_BYTE *)(a3 + 24) = v5;
  return result;
}

uint64_t NWEndpoint.Host.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A238);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BDA6AC(a1, a2, 0, (uint64_t)&v35);
  unsigned __int8 v9 = v38;
  if (v38 == 255)
  {
    uint64_t v35 = a1;
    unint64_t v36 = a2;
    v34[0] = 37LL;
    v34[1] = 0xE100000000000000LL;
    uint64_t v13 = sub_18264E694();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v8, 1LL, 1LL, v13);
    sub_181BE46C4();
    sub_18264F0E4();
    unint64_t v15 = v14;
    char v17 = v16;
    sub_181BDA0F0((uint64_t)v8, &qword_18C58A238);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0) {
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_181BDA9E4(v15, a1, a2);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    MEMORY[0x186E0E670](v18, v20, v22, v24);
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_18264EACC();
    swift_bridgeObjectRelease();
    uint64_t v10 = (uint64_t)nw_interface_create_with_name((char *)(v25 + 32));
    swift_release();
    if (!v10)
    {
LABEL_6:
      uint64_t result = sub_18264EB50();
      if (result < 1)
      {
        uint64_t result = swift_bridgeObjectRelease();
        unsigned __int8 v9 = 0;
        unint64_t v11 = 0xE100000000000000LL;
        uint64_t v10 = 1LL;
        a1 = 46LL;
      }

      else
      {
        unsigned __int8 v9 = 0;
        uint64_t v10 = 1LL;
        unint64_t v11 = a2;
      }
    }

    else
    {
      uint64_t v26 = sub_18264EC04();
      uint64_t v28 = v27;
      uint64_t v30 = v29;
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      a1 = MEMORY[0x186E0E670](v26, v28, v30, v32);
      unint64_t v11 = v33;
      uint64_t result = swift_bridgeObjectRelease();
      unsigned __int8 v9 = 0;
    }
  }

  else
  {
    unint64_t v11 = v36;
    uint64_t v10 = v37;
    a1 = v35;
    uint64_t result = swift_bridgeObjectRelease();
  }

  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v11;
  *(void *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = v9;
  return result;
}

uint64_t NWEndpoint.Host.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = 16LL;
  if (*(_BYTE *)(v1 + 24) == 1) {
    uint64_t v2 = 8LL;
  }
  uint64_t v3 = *(void *)(v1 + v2);
  *a1 = v3;
  return sub_181BC6890(v3);
}

uint64_t NWEndpoint.Host.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  if (*((_BYTE *)v0 + 24))
  {
    if (*((_BYTE *)v0 + 24) == 1) {
      return IPv4Address.debugDescription.getter();
    }
    else {
      return IPv6Address.debugDescription.getter();
    }
  }

  else if (v2 == 1)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    sub_181BC6890(v2);
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264F2DC();
    sub_181BC69C8(v2);
    return 0LL;
  }

  return v1;
}

uint64_t NWEndpoint.Host.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(nw_interface **)(v0 + 8);
  uint64_t v3 = *(nw_interface **)(v0 + 16);
  if (*(_BYTE *)(v0 + 24))
  {
    if (*(_BYTE *)(v0 + 24) == 1)
    {
      sub_18264F654();
      sub_18264F678();
      if (v2 == (nw_interface *)1)
      {
        sub_18264F660();
        uint64_t v4 = v1;
        uint64_t v5 = 1LL;
      }

      else
      {
        sub_18264F660();
        if (v2)
        {
          sub_181BC6890((uint64_t)v2);
          nw_interface_get_index(v2);
          sub_18264F654();
          uint64_t v7 = (nw_interface *)swift_unknownObjectRetain();
          nw_interface_get_name(v7);
          sub_18264EB80();
          uint64_t v8 = (uint64_t)v2;
        }

        else
        {
          sub_18264F654();
          uint64_t v8 = 0LL;
        }

        sub_181BC6974(v1, v8, (uint64_t)v3, 1);
        sub_18264EB44();
        swift_bridgeObjectRelease();
        uint64_t v4 = v1;
        uint64_t v5 = (uint64_t)v2;
      }

      return sub_181BC6974(v4, v5, (uint64_t)v3, 1);
    }

    else
    {
      sub_18264F654();
      return IPv6Address.hash(into:)();
    }
  }

  else
  {
    sub_18264F654();
    sub_181BC6890((uint64_t)v3);
    sub_18264EB44();
    if (v3 == (nw_interface *)1)
    {
      return sub_18264F660();
    }

    else
    {
      sub_18264F660();
      if (v3)
      {
        nw_interface_get_index(v3);
        sub_18264F654();
        unsigned __int8 v9 = (nw_interface *)swift_unknownObjectRetain();
        nw_interface_get_name(v9);
        sub_18264EB80();
        uint64_t v10 = (uint64_t)v3;
      }

      else
      {
        sub_18264F654();
        uint64_t v10 = 0LL;
      }

      sub_181BC69C8(v10);
      sub_18264EB44();
      swift_bridgeObjectRelease();
      return sub_181BC69C8((uint64_t)v3);
    }
  }

uint64_t NWEndpoint.Host.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181BDD7D8()
{
  return sub_18264F684();
}

uint64_t sub_181BDD834()
{
  return sub_18264F684();
}

double sub_181BDD894@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v7;
  char v4 = v8;
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t NWEndpoint.Port.init(integerLiteral:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NWEndpoint.Port.any.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static NWEndpoint.Port.ssh.getter(_WORD *a1@<X8>)
{
  *a1 = 22;
}

void static NWEndpoint.Port.smtp.getter(_WORD *a1@<X8>)
{
  *a1 = 25;
}

void static NWEndpoint.Port.http.getter(_WORD *a1@<X8>)
{
  *a1 = 80;
}

void static NWEndpoint.Port.pop.getter(_WORD *a1@<X8>)
{
  *a1 = 110;
}

void static NWEndpoint.Port.imap.getter(_WORD *a1@<X8>)
{
  *a1 = 143;
}

void static NWEndpoint.Port.https.getter(_WORD *a1@<X8>)
{
  *a1 = 443;
}

void static NWEndpoint.Port.imaps.getter(_WORD *a1@<X8>)
{
  *a1 = 993;
}

void static NWEndpoint.Port.socks.getter(_WORD *a1@<X8>)
{
  *a1 = 1080;
}

uint64_t NWEndpoint.Port.rawValue.getter()
{
  return *v0;
}

void NWEndpoint.Port.init(_:)(uint64_t a1@<X8>)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  *(_OWORD *)&v8.ai_flags = xmmword_18265D170;
  v8.ai_addrlen = 0;
  memset(&v8.ai_canonname, 0, 24);
  uint64_t v7 = 0LL;
  uint64_t v2 = sub_18264EACC();
  swift_bridgeObjectRelease();
  int v3 = getaddrinfo(0LL, (const char *)(v2 + 32), &v8, &v7);
  swift_release();
  if (v3 || !v7) {
    goto LABEL_7;
  }
  ai_addr = v7->ai_addr;
  if (!ai_addr || ai_addr->sa_family != 30)
  {
    freeaddrinfo(v7);
LABEL_7:
    LOWORD(sub_181BD3224(v4, v5) = 0;
    char v6 = 1;
    goto LABEL_8;
  }

  unsigned int v5 = bswap32(*(unsigned __int16 *)ai_addr->sa_data) >> 16;
  freeaddrinfo(v7);
  char v6 = 0;
LABEL_8:
  *(_WORD *)a1 = v5;
  *(_BYTE *)(a1 + 2) = v6;
}

uint64_t NWEndpoint.Port.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

uint64_t NWEndpoint.Port.debugDescription.getter()
{
  return sub_18264F480();
}

uint64_t sub_181BDDA98()
{
  return sub_18264F684();
}

uint64_t sub_181BDDADC()
{
  return sub_18264F66C();
}

uint64_t sub_181BDDB04()
{
  return sub_18264F684();
}

uint64_t sub_181BDDB44()
{
  return sub_18264F480();
}

_WORD *sub_181BDDB84@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_WORD *sub_181BDDB90@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_181BDDBA0(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_181BDDBAC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

void NWEndpoint.interface.getter()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  sub_181BE4744(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int v3 = (char *)sub_181BDDC44 + 4 * byte_18265D1BC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BDDC44()
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(_BYTE *)(v1 + 24) == 1) {
      *uint64_t v0 = v2;
    }
    else {
      *uint64_t v0 = v3;
    }
  }

  else
  {
    uint64_t v4 = *(void *)v1;
    *uint64_t v0 = v3;
    sub_181BC6890(v3);
    return sub_181BC6974(v4, v2, v3, 0);
  }

  return result;
}

void NWEndpoint.txtRecord.getter()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  sub_181BE4744(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v3 = (char *)sub_181BDDDA8 + 4 * byte_18265D1C1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BDDDA8()
{
  uint64_t result = sub_181BC6974(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
  *uint64_t v0 = 0LL;
  v0[1] = 0LL;
  return result;
}

BOOL static NWEndpoint.EndpointType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWEndpoint.EndpointType.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWEndpoint.EndpointType.hashValue.getter()
{
  return sub_18264F684();
}

Swift::String_optional __swiftcall NWEndpoint.parentEndpointDomain()()
{
  uint64_t v0 = sub_181BE0B30((uint64_t (*)(void))nw_endpoint_get_parent_endpoint_domain);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t NWEndpoint.parentEndpoint()@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDE6CC((uint64_t (*)(void))nw_endpoint_copy_parent_endpoint, a1);
}

uint64_t NWEndpoint.init(_:)@<X0>(nw_endpoint *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v4);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BDA308(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for NWEndpoint();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7))
  {
    sub_181BDA0F0((uint64_t)v6, &qword_18C45E580);
    uint64_t v9 = 1LL;
  }

  else
  {
    sub_181BE4800((uint64_t)v6, a2);
    uint64_t v9 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1LL, v7);
}

void NWEndpoint.setParentEndpoint(endpoint:isProxy:)(uint64_t a1, char a2)
{
  if (v4)
  {
    uint64_t v5 = v4;
    sub_181BE4788((uint64_t)v2);
    NWEndpoint.nw.getter();
    nw_endpoint_set_parent_endpoint(v5, v6, a2 & 1);
    swift_unknownObjectRelease();
    *uint64_t v2 = v5;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }

void NWEndpoint.nw.getter()
{
  v5[5] = *MEMORY[0x1895F89C0];
  uint64_t v1 = sub_18264E568();
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v2);
  sub_181BE4744(v0, (uint64_t)v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = (char *)sub_181BDE1E4 + 4 * byte_18265D1C6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BDE1E4()
{
  uint64_t v3 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v4 = *(nw_interface **)(v0 + 16);
  int v5 = *(unsigned __int8 *)(v0 + 24);
  unsigned int v6 = *(unsigned __int16 *)(v0 + 26);
  if (!v5)
  {
    *(_WORD *)(v1 - 100) = v6;
    sub_181BC6890((uint64_t)v4);
    sub_18264F480();
    uint64_t v8 = (const char *)(sub_18264EACC() + 32);
    uint64_t v9 = sub_18264EACC();
    swift_bridgeObjectRelease();
    nw_endpoint_t host = nw_endpoint_create_host(v8, (const char *)(v9 + 32));
    sub_181BC6974(v3, (uint64_t)v2, (uint64_t)v4, 0);
    swift_release();
    swift_release();
    uint64_t v2 = v4;
    goto LABEL_16;
  }

  if (v5 == 1)
  {
    *(_WORD *)(v1 - 100) = 528;
    *(_WORD *)(v1 - 98) = __rev16(v6);
    *(_DWORD *)(v1 - 96) = v3;
    *(void *)(v1 - 92) = 0LL;
    nw_endpoint_t host = nw_endpoint_create_address((const sockaddr *)(v1 - 100));
    goto LABEL_16;
  }

  if (v3 != 254LL || ((v3 & 0xC000) == 0x8000 ? (BOOL v10 = v4 == (nw_interface *)1) : (BOOL v10 = 1), v10))
  {
    sub_181BC6890((uint64_t)v4);
    sub_181BC6890((uint64_t)v4);
    uint32_t index = 0;
    uint64_t v12 = (uint64_t)v4;
LABEL_15:
    *(_WORD *)(v1 - 100) = 7708;
    *(_WORD *)(v1 - 98) = __rev16(v6);
    *(_DWORD *)(v1 - 96) = 0;
    *(void *)(v1 - 92) = v3;
    *(void *)(v1 - 84) = v2;
    *(_DWORD *)(v1 - 76) = index;
    nw_endpoint_t host = nw_endpoint_create_address((const sockaddr *)(v1 - 100));
    sub_181BC6974(v3, (uint64_t)v2, (uint64_t)v4, 2);
    sub_181BC6974(v3, (uint64_t)v2, (uint64_t)v4, 2);
    uint64_t v2 = (void *)v12;
    if (v12 == 1) {
      return (uint64_t)host;
    }
LABEL_16:
    if (host)
    {
      uint64_t v13 = (void *)swift_unknownObjectRetain();
      nw_endpoint_set_interface(v13, v2);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }

    else
    {
      sub_181BC69C8((uint64_t)v2);
    }

    return (uint64_t)host;
  }

  if (v4)
  {
    sub_181BC6890((uint64_t)v4);
    uint32_t index = nw_interface_get_index(v4);
    uint64_t v12 = 1LL;
    goto LABEL_15;
  }

  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t NWEndpoint.originalEndpoint(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (void **)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *a1;
  sub_181BE4744(v3, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    BOOL v14 = nw_endpoint_copy_original_endpoint(*v12, dword_18265D8E4[v13]);
    sub_181BDA308((nw_endpoint *)v14, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
    {
      sub_181BDA0F0((uint64_t)v8, &qword_18C45E580);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1LL, 1LL, v9);
    }

    else
    {
      sub_181BE4800((uint64_t)v8, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0LL, 1LL, v9);
    }

    return swift_unknownObjectRelease();
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1LL, 1LL, v9);
    return sub_181BE4788((uint64_t)v12);
  }

uint64_t NWEndpoint.proxyOriginalEndpoint()@<X0>(uint64_t a1@<X8>)
{
  return sub_181BDE6CC((uint64_t (*)(void))nw_endpoint_copy_proxy_original_endpoint, a1);
}

uint64_t sub_181BDE6CC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v4, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    if (a1(*v12))
    {
      uint64_t v13 = (nw_endpoint *)swift_unknownObjectRetain();
      sub_181BDA308(v13, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
      {
        sub_181BDA0F0((uint64_t)v8, &qword_18C45E580);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1LL, 1LL, v9);
      }

      else
      {
        sub_181BE4800((uint64_t)v8, a2);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0LL, 1LL, v9);
      }

      swift_unknownObjectRelease();
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1LL, 1LL, v9);
    }

    return swift_unknownObjectRelease();
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1LL, 1LL, v9);
    return sub_181BE4788((uint64_t)v12);
  }

void NWEndpoint.setCustomMetadataForKey(key:metadata:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (v6)
  {
    uint64_t v7 = v6;
    if (a4 >> 60 != 15) {
      __asm { BR              X10 }
    }

    sub_181BE4788((uint64_t)v4);
    uint64_t v8 = sub_18264EACC();
    nw_endpoint_set_custom_metadata_for_key(v7, (const char *)(v8 + 32), 0LL, 0LL);
    swift_release();
    void *v4 = v7;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }

void sub_181BDEC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x181BDED28LL);
}

uint64_t NWEndpoint.customMetadataForKey(key:)()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (void **)((char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_18265D180;
    void aBlock[4] = sub_181BE488C;
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    _OWORD aBlock[2] = sub_181BDEF40;
    aBlock[3] = &block_descriptor_6_1;
    uint64_t v6 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    uint64_t v7 = sub_18264EACC();
    nw_endpoint_access_custom_metadata_for_key(v4, (const char *)(v7 + 32), v6);
    swift_release();
    swift_unknownObjectRelease();
    _Block_release(v6);
    swift_beginAccess();
    uint64_t v8 = *(void *)(v5 + 16);
    sub_181BE4844(v8, *(void *)(v5 + 24));
    swift_release();
  }

  else
  {
    sub_181BE4788((uint64_t)v3);
    return 0LL;
  }

  return v8;
}

uint64_t sub_181BDEEDC(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = sub_181C51DC0(a1, a2);
    uint64_t v6 = v5;
    swift_beginAccess();
    uint64_t v7 = *(void *)(a3 + 16);
    unint64_t v8 = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = v4;
    *(void *)(a3 + 24) = v6;
    sub_181BE61C8(v7, v8);
  }

  return 1LL;
}

uint64_t sub_181BDEF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a3) = v5(a2, a3);
  swift_release();
  return a3 & 1;
}

void NWEndpoint.setSignature(_:)(uint64_t a1, uint64_t a2)
{
  if (v3) {
    __asm { BR              X10 }
  }

Swift::Bool __swiftcall NWEndpoint.hasSignature()()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (void **)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    Swift::Bool has_signature = nw_endpoint_has_signature(*v3);
    swift_unknownObjectRelease();
  }

  else
  {
    sub_181BE4788((uint64_t)v3);
    return 0;
  }

  return has_signature;
}

uint64_t NWEndpoint.echConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0C0);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (void **)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v10 = nw_endpoint_copy_ech_config(*v9);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      sub_18264E994();
      swift_unknownObjectRelease();

      uint64_t v12 = sub_18264E9A0();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 0LL, 1LL, v12);
    }

    else
    {
      swift_unknownObjectRelease();
      uint64_t v15 = sub_18264E9A0();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v6, 1LL, 1LL, v15);
    }

    return sub_181BE625C((uint64_t)v6, a1, (uint64_t *)&unk_18C58C0C0);
  }

  else
  {
    uint64_t v13 = sub_18264E9A0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(a1, 1LL, 1LL, v13);
    return sub_181BE4788((uint64_t)v9);
  }

uint64_t NWEndpoint.echConfig.setter(uint64_t a1)
{
  uint64_t v2 = (void *)v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0C0);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_18264E9A0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NWEndpoint.nw.getter();
  if (!v11) {
    return sub_181BDA0F0(a1, (uint64_t *)&unk_18C58C0C0);
  }
  uint64_t v12 = v11;
  sub_181BE4788(v1);
  sub_181BE48BC(a1, (uint64_t)v6, (uint64_t *)&unk_18C58C0C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_181BDA0F0((uint64_t)v6, (uint64_t *)&unk_18C58C0C0);
    nw_endpoint_set_ech_config(v12, 0LL);
    sub_181BDA0F0(a1, (uint64_t *)&unk_18C58C0C0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    BOOL v14 = (void *)sub_18264E988();
    nw_endpoint_set_ech_config(v12, v14);

    sub_181BDA0F0(a1, (uint64_t *)&unk_18C58C0C0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  *uint64_t v2 = v12;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

void (*NWEndpoint.echConfig.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0C0) - 8) + 64LL);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.echConfig.getter((uint64_t)v4);
  return sub_181BDF4C0;
}

void sub_181BDF4C0(uint64_t a1, char a2)
{
}

uint64_t NWEndpoint.alternatives.getter()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  size_t v3 = (void **)((char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v3);
    return 0LL;
  }

  uint64_t v4 = *v3;
  uint64_t v13 = MEMORY[0x18961AFE8];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &v13;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_181BE48A4;
  *(void *)(v6 + 24) = v5;
  void aBlock[4] = sub_181BBFA50;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  _OWORD aBlock[2] = sub_181BDFB04;
  aBlock[3] = &block_descriptor_15_0;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_endpoint_enumerate_alternatives(v4, v7);
  swift_unknownObjectRelease();
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v4 & 1) == 0)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 + 16);
    swift_release();
    if (v10) {
      return v9;
    }
    swift_bridgeObjectRelease();
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t NWEndpoint.alternatives.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC78);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  uint64_t v36 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v31 - v11;
  MEMORY[0x1895F8858](v10);
  BOOL v14 = (char *)&v31 - v13;
  NWEndpoint.nw.getter();
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = v15;
  sub_181BE4788((uint64_t)v1);
  nw_endpoint_clear_alternatives(v16);
  if (a1)
  {
    uint64_t v17 = *(void *)(a1 + 16);
    if (v17)
    {
      uint64_t v32 = v1;
      unint64_t v33 = v16;
      uint64_t v18 = *(int *)(v3 + 48);
      uint64_t v19 = *(unsigned __int8 *)(v4 + 80);
      uint64_t v31 = a1;
      uint64_t v20 = a1 + ((v19 + 32) & ~v19);
      uint64_t v34 = *(void *)(v4 + 72);
      uint64_t v35 = v18;
      do
      {
        sub_181BE48BC(v20, (uint64_t)v14, &qword_18C58BC78);
        uint64_t v21 = *(void *)&v14[v35];
        uint64_t v22 = *(int *)(v3 + 48);
        sub_181BE4800((uint64_t)v14, (uint64_t)v12);
        *(void *)&v12[v22] = v21;
        uint64_t v23 = *(int *)(v3 + 48);
        sub_181BE4744((uint64_t)v12, (uint64_t)v9);
        *(void *)&v9[v23] = v21;
        swift_retain();
        NWEndpoint.nw.getter();
        if (v24)
        {
          uint64_t v25 = v24;
          sub_181BE4788((uint64_t)v9);
          uint64_t v26 = v3;
          uint64_t v27 = *(int *)(v3 + 48);
          uint64_t v28 = v36;
          sub_181BE4744((uint64_t)v12, v36);
          *(void *)(v28 + v27) = v21;
          if (v21)
          {
            uint64_t v29 = *(void **)(v21 + 32);
            swift_unknownObjectRetain();
            swift_release();
          }

          else
          {
            uint64_t v29 = 0LL;
          }

          uint64_t v3 = v26;
          sub_181BE4788(v36);
          nw_endpoint_add_alternative(v33, v25, v29);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          sub_181BDA0F0((uint64_t)v12, &qword_18C58BC78);
        }

        else
        {
          sub_181BDA0F0((uint64_t)v12, &qword_18C58BC78);
          swift_release();
          sub_181BE4788((uint64_t)v9);
        }

        v20 += v34;
        --v17;
      }

      while (v17);
      swift_bridgeObjectRelease();
      uint64_t v1 = v32;
      uint64_t v16 = v33;
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

  *uint64_t v1 = v16;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_181BDF91C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC78);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  void *v12 = a1;
  swift_storeEnumTagMultiPayload();
  if (a2)
  {
    type metadata accessor for NWProtocolDefinition();
    uint64_t v13 = (void *)swift_allocObject();
    v13[4] = a2;
    swift_unknownObjectRetain();
    id v14 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
    uint64_t v15 = sub_18264EA48();
    uint64_t v17 = v16;

    v13[2] = v15;
    v13[3] = v17;
  }

  else
  {
    swift_unknownObjectRetain();
    uint64_t v13 = 0LL;
  }

  uint64_t v18 = *(int *)(v6 + 48);
  sub_181BE4800((uint64_t)v12, (uint64_t)v9);
  *(void *)&v9[v18] = v13;
  unint64_t v19 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v19 = sub_181BC4B90(0, *(void *)(v19 + 16) + 1LL, 1, v19);
    *a3 = v19;
  }

  unint64_t v22 = *(void *)(v19 + 16);
  unint64_t v21 = *(void *)(v19 + 24);
  if (v22 >= v21 >> 1)
  {
    unint64_t v19 = sub_181BC4B90(v21 > 1, v22 + 1, 1, v19);
    *a3 = v19;
  }

  *(void *)(v19 + 16) = v22 + 1;
  sub_181BE625C( (uint64_t)v9,  v19 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v22,
    &qword_18C58BC78);
  return 1LL;
}

uint64_t sub_181BDFB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t (*NWEndpoint.alternatives.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = NWEndpoint.alternatives.getter();
  return sub_181BDFB98;
}

uint64_t sub_181BDFB98(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return NWEndpoint.alternatives.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  NWEndpoint.alternatives.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t NWEndpoint.alternatePort.getter()
{
  return sub_181BE0C18((uint64_t (*)(void))nw_endpoint_get_alternate_port);
}

uint64_t sub_181BDFBE8@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  char v6 = (void **)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    alternate_uint16_t port = nw_endpoint_get_alternate_port(*v6);
    uint64_t result = swift_unknownObjectRelease();
  }

  else
  {
    uint64_t result = sub_181BE4788((uint64_t)v6);
    alternate_uint16_t port = 0;
  }

  *a2 = alternate_port;
  return result;
}

void sub_181BDFC98(__int16 *a1, void *a2)
{
  __int16 v3 = *a1;
  NWEndpoint.nw.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    sub_181BE4788((uint64_t)a2);
    nw_endpoint_set_alternate_port(v5, v3);
    *a2 = v5;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }

void NWEndpoint.alternatePort.setter(__int16 a1)
{
  if (v3)
  {
    uint64_t v4 = v3;
    sub_181BE4788((uint64_t)v1);
    nw_endpoint_set_alternate_port(v4, a1);
    *uint64_t v1 = v4;
    type metadata accessor for NWEndpoint();
    swift_storeEnumTagMultiPayload();
  }

void (*NWEndpoint.alternatePort.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1 + 3;
  *a1 = v1;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  a1[1] = v5;
  char v6 = (void **)malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  a1[2] = (uint64_t)v6;
  sub_181BE4744(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    alternate_uint16_t port = nw_endpoint_get_alternate_port(*v6);
    swift_unknownObjectRelease();
  }

  else
  {
    sub_181BE4788((uint64_t)v6);
    alternate_uint16_t port = 0;
  }

  _WORD *v4 = alternate_port;
  return sub_181BDFE28;
}

void sub_181BDFE28(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 24);
  __int16 v3 = *(void **)a1;
  NWEndpoint.nw.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    sub_181BE4788((uint64_t)v3);
    nw_endpoint_set_alternate_port(v5, v2);
    void *v3 = v5;
    swift_storeEnumTagMultiPayload();
  }

  free(*(void **)(a1 + 16));
}

uint64_t NWEndpoint.agentIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BE03A8((void (*)(uint64_t, unsigned __int8 *))nw_endpoint_get_agent_identifier, a1);
}

uint64_t NWEndpoint.agentIdentifier.setter(uint64_t a1)
{
  return sub_181BE058C(a1, (void (*)(uint64_t, _BYTE *))nw_endpoint_set_agent_identifier);
}

void (*NWEndpoint.agentIdentifier.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0) - 8) + 64LL);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.agentIdentifier.getter((uint64_t)v4);
  return sub_181BDFFA0;
}

void sub_181BDFFA0(uint64_t a1, char a2)
{
}

uint64_t NWEndpoint.remoteInterfaceType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  char v6 = (void **)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    remote_interface_int type = nw_endpoint_get_remote_interface_type(*v6);
    uint64_t result = swift_unknownObjectRelease();
    switch(remote_interface_type)
    {
      case 1:
        *a1 = 1;
        break;
      case 2:
        *a1 = 2;
        break;
      case 3:
        *a1 = 3;
        break;
      case 4:
        *a1 = 4;
        break;
      default:
        *a1 = 0;
        break;
    }
  }

  else
  {
    *a1 = 5;
    return sub_181BE4788((uint64_t)v6);
  }

  return result;
}

void sub_181BE00BC(unsigned __int8 *a1, void *a2)
{
  int v3 = *a1;
  NWEndpoint.nw.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    if (v3 == 5)
    {
      swift_unknownObjectRelease();
    }

    else
    {
      sub_181BE4788((uint64_t)a2);
      nw_endpoint_set_remote_interface_type(v5, v3);
      *a2 = v5;
      type metadata accessor for NWEndpoint();
      swift_storeEnumTagMultiPayload();
    }
  }

void NWEndpoint.remoteInterfaceType.setter(unsigned __int8 *a1)
{
  int v2 = *a1;
  NWEndpoint.nw.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    if (v2 == 5)
    {
      swift_unknownObjectRelease();
    }

    else
    {
      sub_181BE4788((uint64_t)v1);
      nw_endpoint_set_remote_interface_type(v4, v2);
      *uint64_t v1 = v4;
      type metadata accessor for NWEndpoint();
      swift_storeEnumTagMultiPayload();
    }
  }

void (*NWEndpoint.remoteInterfaceType.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)(a1 + 3);
  *a1 = v1;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  a1[1] = v5;
  char v6 = (void **)malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  a1[2] = (uint64_t)v6;
  sub_181BE4744(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    remote_interface_int type = nw_endpoint_get_remote_interface_type(*v6);
    swift_unknownObjectRelease();
    switch(remote_interface_type)
    {
      case 1:
        char v8 = 1;
        goto LABEL_9;
      case 2:
        char v8 = 2;
        goto LABEL_9;
      case 3:
        char v8 = 3;
        goto LABEL_9;
      case 4:
        char v8 = 4;
LABEL_9:
        char *v4 = v8;
        break;
      default:
        char *v4 = 0;
        break;
    }
  }

  else
  {
    char *v4 = 5;
    sub_181BE4788((uint64_t)v6);
  }

  return sub_181BE02D0;
}

void sub_181BE02D0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 24);
  int v3 = *(void **)a1;
  NWEndpoint.nw.getter();
  uint64_t v5 = v4;
  if (v4)
  {
    if (v2 == 5)
    {
      swift_unknownObjectRelease();
    }

    else
    {
      sub_181BE4788((uint64_t)v3);
      nw_endpoint_set_remote_interface_type(v5, v2);
      void *v3 = v5;
      swift_storeEnumTagMultiPayload();
    }
  }

  free(*(void **)(a1 + 16));
}

uint64_t NWEndpoint.serviceIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BE03A8((void (*)(uint64_t, unsigned __int8 *))nw_endpoint_get_service_identifier, a1);
}

uint64_t sub_181BE03A8@<X0>(void (*a1)(uint64_t, unsigned __int8 *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v6 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v6);
  char v8 = &uu[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_181BE4744(v4, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v9 = *(void *)v8;
    *(void *)uu = 0LL;
    uint64_t v16 = 0LL;
    a1(v9, uu);
    if (uuid_is_null(uu))
    {
      swift_unknownObjectRelease();
      uint64_t v10 = sub_18264E688();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a2,  1LL,  1LL,  v10);
    }

    else
    {
      sub_18264E664();
      swift_unknownObjectRelease();
      uint64_t v13 = sub_18264E688();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( a2,  0LL,  1LL,  v13);
    }
  }

  else
  {
    uint64_t v12 = sub_18264E688();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(a2, 1LL, 1LL, v12);
    return sub_181BE4788((uint64_t)v8);
  }

uint64_t NWEndpoint.serviceIdentifier.setter(uint64_t a1)
{
  return sub_181BE058C(a1, (void (*)(uint64_t, _BYTE *))nw_endpoint_set_service_identifier);
}

uint64_t sub_181BE058C(uint64_t a1, void (*a2)(uint64_t, _BYTE *))
{
  uint64_t v4 = v2;
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v34[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  NWEndpoint.nw.getter();
  if (!v13) {
    return sub_181BDA0F0(a1, &qword_18C58C0D0);
  }
  uint64_t v14 = v13;
  sub_181BE48BC(a1, (uint64_t)v12, &qword_18C58C0D0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1LL, v6) == 1)
  {
    LOBYTE(v15) = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v17) = 0;
    LOBYTE(v18) = 0;
    LOBYTE(v19) = 0;
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    LOBYTE(v22) = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    LOBYTE(v29) = 0;
    LOBYTE(v30) = 0;
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v12, v6);
    unint64_t v30 = sub_18264E670();
    unint64_t v22 = v32;
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    unint64_t v29 = v30 >> 8;
    unint64_t v28 = v30 >> 16;
    unint64_t v27 = v30 >> 24;
    unint64_t v26 = HIDWORD(v30);
    unint64_t v25 = v30 >> 40;
    unint64_t v24 = HIWORD(v30);
    unint64_t v23 = HIBYTE(v30);
    unint64_t v21 = v22 >> 8;
    unint64_t v20 = v22 >> 16;
    unint64_t v19 = v22 >> 24;
    unint64_t v18 = HIDWORD(v22);
    unint64_t v17 = v22 >> 40;
    unint64_t v16 = HIWORD(v22);
    unint64_t v15 = HIBYTE(v22);
  }

  v34[0] = v30;
  v34[1] = v29;
  void v34[2] = v28;
  v34[3] = v27;
  void v34[4] = v26;
  v34[5] = v25;
  v34[6] = v24;
  v34[7] = v23;
  v34[8] = v22;
  v34[9] = v21;
  v34[10] = v20;
  v34[11] = v19;
  v34[12] = v18;
  v34[13] = v17;
  v34[14] = v16;
  v34[15] = v15;
  a2(v14, v34);
  sub_181BE4788((uint64_t)v4);
  sub_181BDA0F0(a1, &qword_18C58C0D0);
  void *v4 = v14;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

void (*NWEndpoint.serviceIdentifier.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0) - 8) + 64LL);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.serviceIdentifier.getter((uint64_t)v4);
  return sub_181BE0860;
}

void sub_181BE0860(uint64_t a1, char a2)
{
}

uint64_t NWEndpoint.cnames.getter()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  size_t v3 = (void **)((char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v3);
    return 0LL;
  }

  uint64_t v4 = *v3;
  uint64_t v12 = MEMORY[0x18961AFE8];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &v12;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_181BC07F0;
  *(void *)(v6 + 24) = v5;
  void aBlock[4] = sub_181BC0808;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  _OWORD aBlock[2] = sub_181BCEE7C;
  aBlock[3] = &block_descriptor_24;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_endpoint_enumerate_cnames(v4, v7);
  swift_unknownObjectRelease();
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v4 & 1) == 0)
  {
    uint64_t v9 = v12;
    swift_release();
    return v9;
  }

  __break(1u);
  return result;
}

uint64_t NWEndpoint.ethernetAddress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (void **)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    ethernet_address = nw_endpoint_get_ethernet_address(*v6);
    if (ethernet_address)
    {
      int v8 = *(_DWORD *)ethernet_address;
      uint64_t v9 = ethernet_address[4];
      uint64_t v10 = ethernet_address[5];
      uint64_t result = swift_unknownObjectRelease();
      *(_DWORD *)a1 = v8;
      *(_WORD *)(a1 + 4) = ((v10 << 40) | (unint64_t)(v9 << 32)) >> 32;
      *(_BYTE *)(a1 + 6) = 0;
    }

    else
    {
      uint64_t result = swift_unknownObjectRelease();
      *(_WORD *)(a1 + 4) = 0;
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 6) = 1;
    }
  }

  else
  {
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 6) = 1;
    return sub_181BE4788((uint64_t)v6);
  }

  return result;
}

uint64_t NWEndpoint.knownTrackerOwner.getter()
{
  return sub_181BE0B30(nw_endpoint_get_known_tracker_name);
}

uint64_t NWEndpoint.trackerOwner.getter()
{
  return sub_181BE0B30(nw_endpoint_get_tracker_owner);
}

uint64_t sub_181BE0B30(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v6);
    return 0LL;
  }

  if (!a1(*v6))
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v7 = sub_18264EB80();
  swift_unknownObjectRelease();
  return v7;
}

uint64_t NWEndpoint.priority.getter()
{
  return sub_181BE0C18((uint64_t (*)(void))nw_endpoint_get_priority);
}

uint64_t NWEndpoint.weight.getter()
{
  return sub_181BE0C18((uint64_t (*)(void))nw_endpoint_get_weight);
}

uint64_t sub_181BE0C18(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v7 = a1(*v6);
    swift_unknownObjectRelease();
  }

  else
  {
    sub_181BE4788((uint64_t)v6);
    return 0LL;
  }

  return v7;
}

uint64_t NWEndpoint.publicKeys.getter()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v3);
    return 0LL;
  }

  id v4 = nw_endpoint_copy_public_keys(*v3);
  if (!v4)
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v5 = v4;
  uint64_t v6 = sub_18264ECC4();

  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_181BE0D94(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  NWEndpoint.nw.getter();
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v5 = v4;
  sub_181BE4788((uint64_t)a2);
  if (v3)
  {
    uint64_t v6 = (void *)sub_18264ECB8();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  nw_endpoint_set_public_keys(v5, v6);

  *a2 = v5;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

uint64_t NWEndpoint.publicKeys.setter(uint64_t a1)
{
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  id v4 = v3;
  sub_181BE4788((uint64_t)v1);
  if (a1)
  {
    uint64_t v5 = (void *)sub_18264ECB8();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  nw_endpoint_set_public_keys(v4, v5);

  *uint64_t v1 = v4;
  type metadata accessor for NWEndpoint();
  return swift_storeEnumTagMultiPayload();
}

void (*NWEndpoint.publicKeys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = v1;
  a1[1] = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  a1[2] = v4;
  uint64_t v5 = (void **)malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  a1[3] = (uint64_t)v5;
  sub_181BE4744(v2, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v5);
LABEL_6:
    uint64_t v8 = 0LL;
    goto LABEL_7;
  }

  id v6 = nw_endpoint_copy_public_keys(*v5);
  if (!v6)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }

  uint64_t v7 = v6;
  uint64_t v8 = sub_18264ECC4();
  swift_unknownObjectRelease();

LABEL_7:
  *a1 = v8;
  return sub_181BE0FA4;
}

void sub_181BE0FA4(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    NWEndpoint.nw.getter();
    if (v5)
    {
      id v6 = v5;
      sub_181BE4788((uint64_t)v3);
      if (v4)
      {
        uint64_t v7 = (void *)sub_18264ECB8();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v7 = 0LL;
      }

      nw_endpoint_set_public_keys(v6, v7);

      void *v3 = v6;
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v11 = (void *)a1[3];
    swift_bridgeObjectRelease();
  }

  else
  {
    NWEndpoint.nw.getter();
    if (v8)
    {
      uint64_t v9 = v8;
      sub_181BE4788((uint64_t)v3);
      if (v4)
      {
        uint64_t v10 = (void *)sub_18264ECB8();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v10 = 0LL;
      }

      nw_endpoint_set_public_keys(v9, v10);

      void *v3 = v9;
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v11 = (void *)a1[3];
  }

  free(v11);
}

uint64_t NWEndpoint.applicationServiceName.getter()
{
  return sub_181BE1E74((void (*)(nw_endpoint *))nw_endpoint_get_application_service_name);
}

uint64_t NWEndpoint.applicationServiceAlias.getter()
{
  return sub_181BE1E74((void (*)(nw_endpoint *))nw_endpoint_get_application_service_alias);
}

uint64_t NWEndpoint.deviceName.getter()
{
  return sub_181BE1B60((uint64_t (*)(nw_endpoint *))nw_endpoint_get_device_name);
}

uint64_t NWEndpoint.deviceName.setter(uint64_t a1, uint64_t a2)
{
  return sub_181BE1C4C(a1, a2, (void (*)(nw_endpoint *, uint64_t))nw_endpoint_set_device_name);
}

void (*NWEndpoint.deviceName.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[2] = v2;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  size_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  v4[4] = malloc(v6);
  uint64_t v7 = (nw_endpoint **)malloc(v6);
  v4[5] = v7;
  sub_181BE4744(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v7);
LABEL_7:
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_8;
  }

  uint64_t v8 = *v7;
  if (nw_endpoint_get_type(v8) != 6 || !nw_endpoint_get_device_name(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }

  uint64_t v9 = sub_18264EB80();
  uint64_t v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  void *v4 = v9;
  v4[1] = v11;
  return sub_181BE11FC;
}

void sub_181BE11FC(uint64_t **a1, char a2)
{
}

uint64_t NWEndpoint.deviceModel.getter()
{
  return sub_181BE1B60((uint64_t (*)(nw_endpoint *))nw_endpoint_get_device_model);
}

uint64_t NWEndpoint.deviceModel.setter(uint64_t a1, uint64_t a2)
{
  return sub_181BE1C4C(a1, a2, (void (*)(nw_endpoint *, uint64_t))nw_endpoint_set_device_model);
}

void (*NWEndpoint.deviceModel.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[2] = v2;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  size_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  v4[4] = malloc(v6);
  uint64_t v7 = (nw_endpoint **)malloc(v6);
  v4[5] = v7;
  sub_181BE4744(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v7);
LABEL_7:
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_8;
  }

  uint64_t v8 = *v7;
  if (nw_endpoint_get_type(v8) != 6 || !nw_endpoint_get_device_model(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }

  uint64_t v9 = sub_18264EB80();
  uint64_t v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  void *v4 = v9;
  v4[1] = v11;
  return sub_181BE131C;
}

void sub_181BE131C(uint64_t **a1, char a2)
{
}

void sub_181BE1330( uint64_t **a1, char a2, void (*a3)(nw_endpoint *, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v6 = **a1;
  uint64_t v5 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    uint64_t v9 = (void *)v4[4];
    uint64_t v8 = (void *)v4[5];
    swift_bridgeObjectRetain();
    a4(v6, v5);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_181BE4744((*a1)[2], v4[4]);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v12 = (nw_endpoint **)v4[4];
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v13 = *v12;
      if (nw_endpoint_get_type(v13) == 6)
      {
        if (v5)
        {
          uint64_t v14 = sub_18264EACC();
          swift_bridgeObjectRelease();
          uint64_t v15 = v14 + 32;
        }

        else
        {
          uint64_t v15 = 0LL;
        }

        a3(v13, v15);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_181BE4788((uint64_t)v12);
    }

    uint64_t v9 = (void *)v4[4];
    uint64_t v8 = (void *)v4[5];
  }

  free(v8);
  free(v9);
  free(v4);
}

uint64_t NWEndpoint.deviceColor.getter()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (nw_endpoint **)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v3);
    return 0LL;
  }

  uint64_t v4 = *v3;
  if (nw_endpoint_get_type(v4) != 6)
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t device_color = nw_endpoint_get_device_color(v4);
  swift_unknownObjectRelease();
  return device_color;
}

uint64_t sub_181BE1524@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (nw_endpoint **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    uint64_t result = sub_181BE4788((uint64_t)v6);
LABEL_6:
    int device_color = 0;
    goto LABEL_7;
  }

  uint64_t v7 = *v6;
  if (nw_endpoint_get_type(v7) != 6)
  {
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_6;
  }

  int device_color = nw_endpoint_get_device_color(v7);
  uint64_t result = swift_unknownObjectRelease();
LABEL_7:
  *a2 = device_color;
  return result;
}

uint64_t sub_181BE15F0(int *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (void **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int v7 = *a1;
  sub_181BE4744(a2, (uint64_t)v6);
  uint64_t v8 = *v6;
  return swift_unknownObjectRelease();
}

uint64_t NWEndpoint.deviceColor.setter(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (void **)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v6);
  int v7 = *v6;
  return swift_unknownObjectRelease();
}

void (*NWEndpoint.deviceColor.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void *v4 = v1;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[1] = v5;
  size_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  void v4[2] = malloc(v6);
  v4[3] = malloc(v6);
  int v7 = (nw_endpoint **)malloc(v6);
  v4[4] = v7;
  sub_181BE4744(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v7);
LABEL_6:
    int device_color = 0;
    goto LABEL_7;
  }

  uint64_t v8 = *v7;
  if (nw_endpoint_get_type(v8) != 6)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }

  int device_color = nw_endpoint_get_device_color(v8);
  swift_unknownObjectRelease();
LABEL_7:
  *((_DWORD *)v4 + 10) = device_color;
  return sub_181BE1860;
}

void sub_181BE1860(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)*a1 + 10);
  uint64_t v4 = **a1;
  if ((a2 & 1) != 0)
  {
    sub_181BE4744(v4, v2[2]);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    size_t v6 = (nw_endpoint_t *)v2[2];
    if (EnumCaseMultiPayload != 4)
    {
LABEL_3:
      sub_181BE4788((uint64_t)v6);
      goto LABEL_8;
    }
  }

  else
  {
    sub_181BE4744(v4, v2[3]);
    int v7 = swift_getEnumCaseMultiPayload();
    size_t v6 = (nw_endpoint_t *)v2[3];
    if (v7 != 4) {
      goto LABEL_3;
    }
  }

  nw_endpoint_t v8 = *v6;
  swift_unknownObjectRelease();
LABEL_8:
  uint64_t v9 = (void *)v2[3];
  uint64_t v10 = (void *)v2[2];
  free((void *)v2[4]);
  free(v9);
  free(v10);
  free(v2);
}

uint64_t NWEndpoint.route.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  size_t v6 = (void **)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    *a1 = 3;
    return sub_181BE4788((uint64_t)v6);
  }

  int v7 = *v6;
  if (nw_endpoint_get_type((nw_endpoint_t)v7) == 6)
  {
    int advertised_route = nw_endpoint_get_advertised_route(v7);
    uint64_t result = swift_unknownObjectRelease();
    switch(advertised_route)
    {
      case 3:
        char v10 = 2;
        goto LABEL_10;
      case 2:
        char v10 = 1;
        goto LABEL_10;
      case 1:
        *a1 = 0;
        return result;
    }
  }

  else
  {
    uint64_t result = swift_unknownObjectRelease();
  }

  char v10 = 3;
LABEL_10:
  *a1 = v10;
  return result;
}

uint64_t NWEndpoint.deviceID.getter()
{
  return sub_181BE1B60((uint64_t (*)(nw_endpoint *))nw_endpoint_get_device_id);
}

uint64_t NWEndpoint.deviceID.setter(uint64_t a1, uint64_t a2)
{
  return sub_181BE1C4C(a1, a2, (void (*)(nw_endpoint *, uint64_t))nw_endpoint_set_device_id);
}

void (*NWEndpoint.deviceID.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[2] = v2;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  size_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  v4[4] = malloc(v6);
  int v7 = (nw_endpoint **)malloc(v6);
  v4[5] = v7;
  sub_181BE4744(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v7);
LABEL_7:
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_8;
  }

  nw_endpoint_t v8 = *v7;
  if (nw_endpoint_get_type(v8) != 6 || !nw_endpoint_get_device_id(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }

  uint64_t v9 = sub_18264EB80();
  uint64_t v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  void *v4 = v9;
  v4[1] = v11;
  return sub_181BE1B40;
}

void sub_181BE1B40(uint64_t **a1, char a2)
{
}

uint64_t NWEndpoint.contactID.getter()
{
  return sub_181BE1B60((uint64_t (*)(nw_endpoint *))nw_endpoint_get_contact_id);
}

uint64_t sub_181BE1B60(uint64_t (*a1)(nw_endpoint *))
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  size_t v6 = (nw_endpoint **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v6);
    return 0LL;
  }

  int v7 = *v6;
  if (nw_endpoint_get_type(v7) != 6 || !a1(v7))
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v8 = sub_18264EB80();
  swift_unknownObjectRelease();
  return v8;
}

uint64_t NWEndpoint.contactID.setter(uint64_t a1, uint64_t a2)
{
  return sub_181BE1C4C(a1, a2, (void (*)(nw_endpoint *, uint64_t))nw_endpoint_set_contact_id);
}

uint64_t sub_181BE1C4C(uint64_t a1, uint64_t a2, void (*a3)(nw_endpoint *, uint64_t))
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (nw_endpoint **)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v5, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v10 = *v9;
    if (nw_endpoint_get_type(v10) == 6)
    {
      if (a2)
      {
        uint64_t v11 = sub_18264EACC();
        swift_bridgeObjectRelease();
        uint64_t v12 = v11 + 32;
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      a3(v10, v12);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }

    else
    {
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    return sub_181BE4788((uint64_t)v9);
  }

void (*NWEndpoint.contactID.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[2] = v2;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  size_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  v4[4] = malloc(v6);
  uint64_t v7 = (nw_endpoint **)malloc(v6);
  v4[5] = v7;
  sub_181BE4744(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v7);
LABEL_7:
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_8;
  }

  uint64_t v8 = *v7;
  if (nw_endpoint_get_type(v8) != 6 || !nw_endpoint_get_contact_id(v8))
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }

  uint64_t v9 = sub_18264EB80();
  uint64_t v11 = v10;
  swift_unknownObjectRelease();
LABEL_8:
  void *v4 = v9;
  v4[1] = v11;
  return sub_181BE1E54;
}

void sub_181BE1E54(uint64_t **a1, char a2)
{
}

uint64_t NWEndpoint.applicationService.getter()
{
  return sub_181BE1E74((void (*)(nw_endpoint *))nw_endpoint_get_application_service_name);
}

uint64_t sub_181BE1E74(void (*a1)(nw_endpoint *))
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  size_t v6 = (nw_endpoint **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v3, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v6);
    return 0LL;
  }

  uint64_t v7 = *v6;
  if (nw_endpoint_get_type(v7) != 6)
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  a1(v7);
  uint64_t v8 = sub_18264EB80();
  swift_unknownObjectRelease();
  return v8;
}

uint64_t NWEndpoint.applicationService.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  size_t v6 = (void **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v7 = *v6;
    if (a2)
    {
      if (nw_endpoint_get_type((nw_endpoint_t)v7) == 6)
      {
        uint64_t v8 = sub_18264EACC();
        swift_bridgeObjectRelease();
        nw_endpoint_set_application_service_name(v7, (const char *)(v8 + 32));
        swift_release();
      }

      else
      {
        swift_bridgeObjectRelease();
      }
    }

    return swift_unknownObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return sub_181BE4788((uint64_t)v6);
  }

void (*NWEndpoint.applicationService.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[2] = v2;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[3] = v5;
  size_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  v4[4] = malloc(v6);
  uint64_t v7 = (nw_endpoint **)malloc(v6);
  v4[5] = v7;
  sub_181BE4744(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_181BE4788((uint64_t)v7);
LABEL_6:
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_7;
  }

  uint64_t v8 = *v7;
  if (nw_endpoint_get_type(v8) != 6)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }

  nw_endpoint_get_application_service_name(v8);
  uint64_t v9 = sub_18264EB80();
  uint64_t v11 = v10;
  swift_unknownObjectRelease();
LABEL_7:
  void *v4 = v9;
  v4[1] = v11;
  return sub_181BE213C;
}

void sub_181BE213C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    size_t v6 = (void *)v2[4];
    uint64_t v5 = (void *)v2[5];
    swift_bridgeObjectRetain();
    NWEndpoint.applicationService.setter(v4, v3);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_181BE4744((*a1)[2], v2[4]);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v8 = (void **)v2[4];
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v9 = *v8;
      if (v3)
      {
        if (nw_endpoint_get_type((nw_endpoint_t)v9) == 6)
        {
          uint64_t v10 = sub_18264EACC();
          swift_bridgeObjectRelease();
          nw_endpoint_set_application_service_name(v9, (const char *)(v10 + 32));
          swift_unknownObjectRelease();
          swift_release();
        }

        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }

      else
      {
        swift_unknownObjectRelease();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_181BE4788((uint64_t)v8);
    }

    size_t v6 = (void *)v2[4];
    uint64_t v5 = (void *)v2[5];
  }

  free(v5);
  free(v6);
  free(v2);
}

uint64_t NWEndpoint.serviceID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v4 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v4);
  size_t v6 = (void **)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v7 = *v6;
    if (nw_endpoint_get_type((nw_endpoint_t)v7) == 6)
    {
      __int128 v13 = 0uLL;
      nw_endpoint_get_service_identifier(v7, &v13);
      sub_18264E664();
      swift_unknownObjectRelease();
      uint64_t v8 = sub_18264E688();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  0LL,  1LL,  v8);
    }

    else
    {
      uint64_t v11 = sub_18264E688();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(a1, 1LL, 1LL, v11);
      return swift_unknownObjectRelease();
    }
  }

  else
  {
    uint64_t v10 = sub_18264E688();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(a1, 1LL, 1LL, v10);
    return sub_181BE4788((uint64_t)v6);
  }

uint64_t sub_181BE23F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(char *))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BE48BC(a1, (uint64_t)v11, a5);
  return a6(v11);
}

uint64_t NWEndpoint.serviceID.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  MEMORY[0x1895F8858](v4);
  size_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_18264E688();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (void **)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(v2, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v14 = *v13;
    if (nw_endpoint_get_type((nw_endpoint_t)v14) == 6)
    {
      sub_181BE48BC(a1, (uint64_t)v6, &qword_18C58C0D0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
      {
        sub_181BDA0F0(a1, &qword_18C58C0D0);
        swift_unknownObjectRelease();
        return sub_181BDA0F0((uint64_t)v6, &qword_18C58C0D0);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
        *(void *)&__int128 v24 = sub_18264E670();
        WORD4(v24) = v16;
        BYTE10(v24) = v17;
        BYTE11(v24) = v18;
        BYTE12(v24) = v19;
        BYTE13(v24) = v20;
        BYTE14(v24) = v21;
        HIBYTE(v24) = v22;
        nw_endpoint_set_service_identifier(v14, &v24);
        swift_unknownObjectRelease();
        sub_181BDA0F0(a1, &qword_18C58C0D0);
        return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
    }

    else
    {
      sub_181BDA0F0(a1, &qword_18C58C0D0);
      return swift_unknownObjectRelease();
    }
  }

  else
  {
    sub_181BDA0F0(a1, &qword_18C58C0D0);
    return sub_181BE4788((uint64_t)v13);
  }

void (*NWEndpoint.serviceID.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0) - 8) + 64LL);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  NWEndpoint.serviceID.getter((uint64_t)v4);
  return sub_181BE278C;
}

void sub_181BE278C(uint64_t a1, char a2)
{
}

void sub_181BE27A0(uint64_t a1, char a2, void (*a3)(void *), uint64_t *a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  size_t v6 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_181BE48BC(*(void *)(a1 + 16), (uint64_t)v5, a4);
    a3(v5);
    sub_181BDA0F0((uint64_t)v6, a4);
  }

  else
  {
    a3(*(void **)(a1 + 16));
  }

  free(v6);
  free(v5);
}

uint64_t static NWEndpoint.applicationService(_:uuid:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_18264E670();
  char v21 = v5;
  char v22 = v6;
  char v23 = v7;
  char v24 = v8;
  char v25 = v9;
  char v26 = v10;
  char v27 = v11;
  char v28 = v12;
  uint64_t v13 = sub_18264EACC();
  nw_endpoint_create_application_service((const char *)(v13 + 32), (const unsigned __int8 *)&v20);
  swift_release();
  uint64_t v14 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v14, (uint64_t)v4);
  uint64_t v15 = type metadata accessor for NWEndpoint();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v4, 1LL, v15))
  {
    sub_181BDA0F0((uint64_t)v4, &qword_18C45E580);
    uint64_t v17 = 1LL;
  }

  else
  {
    sub_181BE4800((uint64_t)v4, a1);
    uint64_t v17 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a1, v17, 1LL, v15);
  return swift_unknownObjectRelease();
}

void NWEndpoint.hash(into:)()
{
  uint64_t v1 = sub_18264E568();
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v2);
  sub_181BE4744(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = (char *)sub_181BE2AA8 + 4 * byte_18265D1D3[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BE2AA8()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = *(_BYTE *)(v0 + 24);
  sub_18264F654();
  *(void *)(v1 - 112) = v2;
  *(void *)(v1 - 104) = v3;
  *(void *)(v1 - 96) = v4;
  *(_BYTE *)(v1 - 88) = v5;
  NWEndpoint.Host.hash(into:)();
  sub_18264F66C();
  return sub_181BC6974(v2, v3, v4, v5);
}

void NWEndpoint.debugDescription.getter()
{
  uint64_t v1 = sub_18264E568();
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v2);
  sub_181BE4744(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = (char *)&loc_181BE2D98 + *((int *)qword_181BE31C0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_181BE2DA8()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  __int16 v5 = *(_WORD *)(v0 + 26);
  char v6 = *(_BYTE *)(v0 + 24);
  *(void *)(v1 - 96) = 0LL;
  *(void *)(v1 - 88) = 0xE000000000000000LL;
  *(void *)(v1 - 128) = v2;
  *(void *)(v1 - 120) = v3;
  *(void *)(v1 - 112) = v4;
  *(_BYTE *)(v1 - 104) = v6;
  sub_18264F2DC();
  sub_18264EB74();
  *(_WORD *)(v1 - 128) = v5;
  sub_18264F2DC();
  sub_181BC6974(v2, v3, v4, v6);
  return *(void *)(v1 - 96);
}

uint64_t NWEndpoint.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181BE3210()
{
  return sub_18264F684();
}

uint64_t sub_181BE3250()
{
  return sub_18264F684();
}

void sub_181BE3290()
{
  __asm { BR              X11 }

void *sub_181BE32F0@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  char v10 = BYTE4(a1);
  char v11 = BYTE5(a1);
  char v12 = BYTE6(a1);
  uint64_t result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v7;
  }
  char v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *uint64_t v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_181BE3580@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_181BE44F8(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_181BE45B8((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_181BE4630((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

void *sub_181BE35F4( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  uint64_t result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_181BE3658(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_18264E484();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_18264E4A8();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = sub_18264E49C();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_181BE3704( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result = sub_18264E484();
  uint64_t v15 = result;
  if (result)
  {
    uint64_t result = sub_18264E4A8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v15 += a1 - result;
  }

  BOOL v16 = __OFSUB__(a2, a1);
  uint64_t v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v18 = sub_18264E49C();
  if (v18 >= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = v15 + v19;
  if (v15) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0LL;
  }
  sub_181BDEC6C(v15, v21, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return sub_181BCD4F0(a7, a8);
}

uint64_t sub_181BE37F4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_18264F174();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0LL;
      a2[1] = 0xE000000000000000LL;
      a2[2] = 15LL;
      a2[3] = v4;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t _s7Network11IPv4AddressV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(a2 + 8);
    if (v2 == 1)
    {
      if (v3 == 1) {
        return v3 & 1;
      }
    }

    else
    {
      nw_interface_t v6 = *(nw_interface_t *)(a1 + 8);
      if (v3 != 1)
      {
        uint64_t v5 = v3;
        sub_181BC6890(v2);
        swift_unknownObjectRetain();
        LOBYTE(v3) = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v6, (nw_interface_t *)&v5);
        swift_unknownObjectRelease();
        sub_181BC69C8(v2);
        return v3 & 1;
      }

      swift_unknownObjectRetain();
    }

    sub_181BC6890(v3);
    sub_181BC69C8(v2);
    sub_181BC69C8(v3);
  }

  LOBYTE(v3) = 0;
  return v3 & 1;
}

uint64_t _s7Network11IPv6AddressV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  if (a1[1] == a2[1] && *a1 == *a2)
  {
    uint64_t v3 = a1[2];
    uint64_t v4 = a2[2];
    if (v3 == 1)
    {
      if (v4 == 1) {
        return v4 & 1;
      }
    }

    else
    {
      nw_interface_t v7 = (nw_interface_t)a1[2];
      if (v4 != 1)
      {
        uint64_t v6 = v4;
        sub_181BC6890(v3);
        swift_unknownObjectRetain();
        LOBYTE(v4) = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v7, (nw_interface_t *)&v6);
        swift_unknownObjectRelease();
        sub_181BC69C8(v3);
        return v4 & 1;
      }

      swift_unknownObjectRetain();
    }

    sub_181BC6890(v4);
    sub_181BC69C8(v3);
    sub_181BC69C8(v4);
  }

  LOBYTE(v4) = 0;
  return v4 & 1;
}

uint64_t _s7Network10NWEndpointO4HostO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  nw_interface_t v3 = *(nw_interface_t *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(nw_interface **)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  nw_interface_t v7 = *(nw_interface **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = *(nw_interface **)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      BOOL v11 = v3 == v7 && v2 == v6;
      if (v11 || (sub_18264F4EC() & 1) != 0)
      {
        if (v4 == (nw_interface *)1)
        {
          sub_181BC6890((uint64_t)v8);
          sub_181BC683C((uint64_t)v7, v6, (uint64_t)v8, 0);
          char v10 = 1;
          sub_181BC683C((uint64_t)v3, v2, 1LL, 0);
          sub_181BC6974((uint64_t)v3, v2, 1LL, 0);
          sub_181BC6974((uint64_t)v7, v6, (uint64_t)v8, 0);
        }

        else
        {
          nw_interface_t v21 = v4;
          if (v8 != (nw_interface *)1)
          {
            nw_interface_t v18 = v8;
            sub_181BC6890((uint64_t)v4);
            sub_181BC6890((uint64_t)v8);
            sub_181BC6890((uint64_t)v4);
            sub_181BC6890((uint64_t)v8);
            sub_181BC683C((uint64_t)v7, v6, (uint64_t)v8, 0);
            sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, 0);
            sub_181BC6890((uint64_t)v4);
            char v17 = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v21, &v18);
            sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, 0);
            sub_181BC6974((uint64_t)v7, v6, (uint64_t)v8, 0);
            sub_181BC69C8((uint64_t)v8);
            sub_181BC69C8((uint64_t)v4);
            sub_181BC69C8((uint64_t)v8);
            swift_unknownObjectRelease();
            sub_181BC69C8((uint64_t)v4);
            if ((v17 & 1) != 0)
            {
              char v10 = 1;
              return v10 & 1;
            }

            goto LABEL_18;
          }

          sub_181BC6890((uint64_t)v4);
          sub_181BC683C((uint64_t)v7, v6, 1LL, 0);
          sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, 0);
          sub_181BC6890((uint64_t)v4);
          sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, 0);
          sub_181BC6974((uint64_t)v7, v6, 1LL, 0);
          swift_unknownObjectRelease();
        }

        sub_181BC69C8((uint64_t)v4);
        sub_181BC69C8((uint64_t)v8);
LABEL_18:
        char v10 = 0;
        return v10 & 1;
      }

      sub_181BC683C((uint64_t)v7, v6, (uint64_t)v8, 0);
      sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, 0);
      sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, 0);
      uint64_t v12 = (uint64_t)v7;
      uint64_t v13 = v6;
      uint64_t v14 = (uint64_t)v8;
      char v15 = 0;
LABEL_17:
      sub_181BC6974(v12, v13, v14, v15);
      goto LABEL_18;
    }

    goto LABEL_16;
  }

  if (v5 != 1)
  {
    if (v9 == 2)
    {
      nw_interface_t v21 = *(nw_interface_t *)a1;
      uint64_t v22 = v2;
      char v23 = v4;
      nw_interface_t v18 = v7;
      uint64_t v19 = v6;
      uint64_t v20 = v8;
      sub_181BC683C((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, 2);
      sub_181BC683C((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, 2);
      char v10 = _s7Network11IPv6AddressV2eeoiySbAC_ACtFZ_0(&v21, &v18);
      sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, 2);
      sub_181BC6974((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_181BC6974((uint64_t)v7, v6, (uint64_t)v8, 2);
      sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, 2);
      return v10 & 1;
    }

    goto LABEL_16;
  }

  if (v9 != 1)
  {
LABEL_16:
    sub_181BC683C(*(void *)a2, *(void *)(a2 + 8), (uint64_t)v8, v9);
    sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, v5);
    sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, v5);
    uint64_t v12 = (uint64_t)v7;
    uint64_t v13 = v6;
    uint64_t v14 = (uint64_t)v8;
    char v15 = v9;
    goto LABEL_17;
  }

  LODWORD(v21) = *(void *)a1;
  uint64_t v22 = v2;
  LODWORD(v18) = (_DWORD)v7;
  uint64_t v19 = v6;
  sub_181BC683C((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, 1);
  sub_181BC683C((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_181BC683C((uint64_t)v3, v2, (uint64_t)v4, 1);
  char v10 = _s7Network11IPv4AddressV2eeoiySbAC_ACtFZ_0((uint64_t)&v21, (uint64_t)&v18);
  sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, 1);
  sub_181BC6974((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_181BC6974((uint64_t)v7, v6, (uint64_t)v8, 1);
  sub_181BC6974((uint64_t)v3, v2, (uint64_t)v4, 1);
  return v10 & 1;
}

void _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E568();
  void v17[4] = *(void *)(v4 - 8);
  v17[5] = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  v17[3] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = type metadata accessor for NWEndpoint();
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  MEMORY[0x1895F8858](v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C160);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  char v15 = (char *)v17 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BE4744(a1, (uint64_t)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_181BE4744(a2, (uint64_t)v15);
  BOOL v16 = (char *)sub_181BE401C + 4 * byte_18265D1D8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BE401C()
{
  uint64_t v5 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  char v7 = *(_BYTE *)(v1 + 24);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_181BC6974(v5, v4, v6, v7);
    sub_181BDA0F0(v2, (uint64_t *)&unk_18C58C160);
    char v8 = 0;
  }

  else
  {
    *(_DWORD *)(v3 - 160) = *(unsigned __int16 *)(v1 + 26);
    uint64_t v9 = *(void *)v0;
    uint64_t v10 = *(void *)(v0 + 8);
    *(void *)(v3 - 152) = v2;
    *(void *)(v3 - 144) = v9;
    uint64_t v11 = *(void *)(v0 + 16);
    int v12 = *(unsigned __int16 *)(v0 + 26);
    char v13 = *(_BYTE *)(v0 + 24);
    *(void *)(v3 - 112) = v5;
    *(void *)(v3 - 104) = v4;
    *(void *)(v3 - 96) = v6;
    *(_BYTE *)(v3 - 88) = v7;
    *(void *)(v3 - 136) = v10;
    *(void *)(v3 - 128) = v11;
    *(_BYTE *)(v3 - 120) = v13;
    char v14 = _s7Network10NWEndpointO4HostO2eeoiySbAE_AEtFZ_0(v3 - 112, v3 - 144);
    sub_181BC6974(v9, v10, v11, v13);
    sub_181BC6974(v5, v4, v6, v7);
    char v8 = v14 & (*(_DWORD *)(v3 - 160) == v12);
    sub_181BE4788(*(void *)(v3 - 152));
  }

  return v8 & 1;
}

BOOL _s7Network15EthernetAddressV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint8x8_t a3, uint8x8_t a4)
{
  BOOL result = 0LL;
  a3.i32[0] = *(_DWORD *)a1;
  a4.i32[0] = *(_DWORD *)a2;
  if ((vminv_u16((uint16x4_t)vcltz_s16( vshl_n_s16( vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a3), (int16x4_t)*(_OWORD *)&vmovl_u8(a4)),  0xFuLL))) & 1) != 0 && *(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4))
  {
    return *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5);
  }

  return result;
}

uint64_t sub_181BE44F8(_BYTE *__src, _BYTE *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_181BE45B8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_18264E4C0();
  swift_allocObject();
  uint64_t result = sub_18264E478();
  if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    sub_18264E5B0();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v2;
  }

  return result;
}

uint64_t sub_181BE4630(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_18264E4C0();
  swift_allocObject();
  uint64_t result = sub_18264E478();
  if (v2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_181BE46B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    return sub_181BC6974(a1, a2, a3, a4);
  }
  return a1;
}

unint64_t sub_181BE46C4()
{
  unint64_t result = qword_18C58A240;
  if (!qword_18C58A240)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189617FF0], MEMORY[0x189617FA8]);
    atomic_store(result, (unint64_t *)&qword_18C58A240);
  }

  return result;
}

uint64_t type metadata accessor for NWEndpoint()
{
  uint64_t result = qword_18C45E778;
  if (!qword_18C45E778) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_181BE4744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181BE4788(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181BE47C4()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_181BE4800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181BE4844(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_181BCD4AC(a1, a2);
  }
  return a1;
}

uint64_t sub_181BE4858()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    sub_181BCD4F0(*(void *)(v0 + 16), v1);
  }
  return swift_deallocObject();
}

uint64_t sub_181BE488C(_BYTE *a1, uint64_t a2)
{
  return sub_181BDEEDC(a1, a2, v2);
}

uint64_t sub_181BE4894()
{
  return swift_deallocObject();
}

uint64_t sub_181BE48A4(uint64_t a1, uint64_t a2)
{
  return sub_181BDF91C(a1, a2, *(unint64_t **)(v2 + 16));
}

uint64_t sub_181BE48AC()
{
  return swift_deallocObject();
}

uint64_t sub_181BE48BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_181BE4900()
{
  return swift_deallocObject();
}

uint64_t sub_181BE4910()
{
  return swift_deallocObject();
}

_BYTE *sub_181BE4920(_BYTE *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else if (v2 <= 14)
    {
      return (_BYTE *)sub_181BE44F8(result, a2);
    }

    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_181BE45B8((uint64_t)result, (uint64_t)a2);
    }

    else
    {
      return (_BYTE *)sub_181BE4630((uint64_t)result, (uint64_t)a2);
    }
  }

  return result;
}

uint64_t sub_181BE4984(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      sub_18264E4C0();
      swift_allocObject();
      sub_18264E490();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_18264E5B0();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_181BE4A20(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C150);
  unint64_t v10 = sub_181BE6210();
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_2(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain();
  sub_181BE3580(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return v5;
}

uint64_t sub_181BE4AB8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32LL;
    if (!v3) {
      return sub_18264EB20();
    }
    uint64_t v4 = 0LL;
    uint64_t v5 = v1 - 1;
    uint64_t v6 = v2 + 33;
    while (v5 != v4)
    {
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_181BE4B04()
{
  unint64_t result = qword_18C58C0E8;
  if (!qword_18C58C0E8)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for IPv4Address, &type metadata for IPv4Address);
    atomic_store(result, (unint64_t *)&qword_18C58C0E8);
  }

  return result;
}

unint64_t sub_181BE4B4C()
{
  unint64_t result = qword_18C58C0F0;
  if (!qword_18C58C0F0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for IPv6Address.Scope,  &type metadata for IPv6Address.Scope);
    atomic_store(result, (unint64_t *)&qword_18C58C0F0);
  }

  return result;
}

unint64_t sub_181BE4B94()
{
  unint64_t result = qword_18C58C0F8;
  if (!qword_18C58C0F8)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for IPv6Address, &type metadata for IPv6Address);
    atomic_store(result, (unint64_t *)&qword_18C58C0F8);
  }

  return result;
}

unint64_t sub_181BE4BDC()
{
  unint64_t result = qword_18C58C100;
  if (!qword_18C58C100)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for EthernetAddress,  &type metadata for EthernetAddress);
    atomic_store(result, (unint64_t *)&qword_18C58C100);
  }

  return result;
}

unint64_t sub_181BE4C24()
{
  unint64_t result = qword_18C58C108;
  if (!qword_18C58C108)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWEndpoint.Host,  &type metadata for NWEndpoint.Host);
    atomic_store(result, (unint64_t *)&qword_18C58C108);
  }

  return result;
}

unint64_t sub_181BE4C6C()
{
  unint64_t result = qword_18C58C110;
  if (!qword_18C58C110)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWEndpoint.Host,  &type metadata for NWEndpoint.Host);
    atomic_store(result, (unint64_t *)&qword_18C58C110);
  }

  return result;
}

uint64_t sub_181BE4CB0()
{
  return MEMORY[0x189618028];
}

unint64_t sub_181BE4CC0()
{
  unint64_t result = qword_18C58C118;
  if (!qword_18C58C118)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWEndpoint.Host,  &type metadata for NWEndpoint.Host);
    atomic_store(result, (unint64_t *)&qword_18C58C118);
  }

  return result;
}

uint64_t sub_181BE4D04()
{
  return MEMORY[0x189618038];
}

uint64_t sub_181BE4D10()
{
  return MEMORY[0x189618030];
}

unint64_t sub_181BE4D20()
{
  unint64_t result = qword_18C58C120;
  if (!qword_18C58C120)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWEndpoint.Port,  &type metadata for NWEndpoint.Port);
    atomic_store(result, (unint64_t *)&qword_18C58C120);
  }

  return result;
}

uint64_t sub_181BE4D64()
{
  return MEMORY[0x18961A838];
}

unint64_t sub_181BE4D74()
{
  unint64_t result = qword_18C58C128;
  if (!qword_18C58C128)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWEndpoint.EndpointType,  &type metadata for NWEndpoint.EndpointType);
    atomic_store(result, (unint64_t *)&qword_18C58C128);
  }

  return result;
}

uint64_t sub_181BE4DB8()
{
  return sub_181BD67D4( (unint64_t *)&unk_18C58C130,  (uint64_t (*)(uint64_t))type metadata accessor for NWEndpoint,  (uint64_t)&protocol conformance descriptor for NWEndpoint);
}

uint64_t sub_181BE4DE4@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.echConfig.getter(a1);
}

uint64_t sub_181BE4E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE23F4( a1,  a2,  a3,  a4,  (uint64_t *)&unk_18C58C0C0,  (uint64_t (*)(char *))NWEndpoint.echConfig.setter);
}

uint64_t sub_181BE4E28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NWEndpoint.alternatives.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181BE4E50()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return NWEndpoint.alternatives.setter(v0);
}

uint64_t sub_181BE4E80@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.agentIdentifier.getter(a1);
}

uint64_t sub_181BE4EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE23F4( a1,  a2,  a3,  a4,  &qword_18C58C0D0,  (uint64_t (*)(char *))NWEndpoint.agentIdentifier.setter);
}

uint64_t sub_181BE4EC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = NWEndpoint.remoteInterfaceType.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_181BE4F00@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.serviceIdentifier.getter(a1);
}

uint64_t sub_181BE4F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE23F4( a1,  a2,  a3,  a4,  &qword_18C58C0D0,  (uint64_t (*)(char *))NWEndpoint.serviceIdentifier.setter);
}

uint64_t sub_181BE4F44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NWEndpoint.publicKeys.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181BE4F70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NWEndpoint.deviceName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181BE4F98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.deviceName.setter);
}

uint64_t sub_181BE4FA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NWEndpoint.deviceModel.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181BE4FCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.deviceModel.setter);
}

uint64_t keypath_set_38Tm( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_181BE5020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NWEndpoint.deviceID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181BE5048(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.deviceID.setter);
}

uint64_t sub_181BE5054@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NWEndpoint.contactID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181BE507C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.contactID.setter);
}

uint64_t sub_181BE5088@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NWEndpoint.applicationService.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181BE50B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, NWEndpoint.applicationService.setter);
}

uint64_t sub_181BE50BC@<X0>(uint64_t a1@<X8>)
{
  return NWEndpoint.serviceID.getter(a1);
}

uint64_t sub_181BE50DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE23F4(a1, a2, a3, a4, &qword_18C58C0D0, (uint64_t (*)(char *))NWEndpoint.serviceID.setter);
}

uint64_t dispatch thunk of IPAddress.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IPAddress.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of IPAddress.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of IPAddress.interface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of IPAddress.isLoopback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of IPAddress.isLinkLocal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IPAddress.isMulticast.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t destroy for IPv4Address(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t _s7Network11IPv4AddressVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != 1) {
    uint64_t v3 = swift_unknownObjectRetain();
  }
  *(void *)(a1 + 8) = v3;
  return a1;
}

uint64_t assignWithCopy for IPv4Address(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    if (v5 != 1)
    {
      uint64_t *v3 = v5;
      swift_unknownObjectRetain();
      return a1;
    }

    uint64_t v6 = 1LL;
  }

  else
  {
    if (v5 != 1)
    {
      uint64_t *v3 = v5;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      return a1;
    }

    sub_181BE521C((uint64_t)v3);
    uint64_t v6 = *(void *)(a2 + 8);
  }

  uint64_t *v3 = v6;
  return a1;
}

uint64_t sub_181BE521C(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for IPv4Address(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) != 1LL)
  {
    if (v4 != 1)
    {
      uint64_t *v3 = v4;
      swift_unknownObjectRelease();
      return a1;
    }

    sub_181BE521C((uint64_t)v3);
    uint64_t v4 = 1LL;
  }

  uint64_t *v3 = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for IPv4Address(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for IPv4Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = a2 - 2147483646;
    *(void *)(result + 8) = 0LL;
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IPv4Address()
{
  return &type metadata for IPv4Address;
}

uint64_t destroy for IPv6Address(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t _s7Network11IPv6AddressVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != 1) {
    uint64_t v3 = swift_unknownObjectRetain();
  }
  *(void *)(a1 + 16) = v3;
  return a1;
}

void *assignWithCopy for IPv6Address(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  int v4 = a1 + 2;
  uint64_t v5 = a1[2];
  uint64_t v6 = a2[2];
  if (v5 == 1)
  {
    if (v6 != 1)
    {
      uint64_t *v4 = v6;
      swift_unknownObjectRetain();
      return a1;
    }

    uint64_t v7 = 1LL;
  }

  else
  {
    if (v6 != 1)
    {
      uint64_t *v4 = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      return a1;
    }

    sub_181BE521C((uint64_t)v4);
    uint64_t v7 = a2[2];
  }

  uint64_t *v4 = v7;
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for IPv6Address(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  int v4 = a1 + 2;
  uint64_t v5 = a2[2];
  if (a1[2] != 1LL)
  {
    if (v5 != 1)
    {
      uint64_t *v4 = v5;
      swift_unknownObjectRelease();
      return a1;
    }

    sub_181BE521C((uint64_t)v4);
    uint64_t v5 = 1LL;
  }

  uint64_t *v4 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for IPv6Address(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for IPv6Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IPv6Address()
{
  return &type metadata for IPv6Address;
}

uint64_t getEnumTagSinglePayload for IPv6Address.Scope(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for IPv6Address.Scope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_181BE5678 + 4 * byte_18265D1E2[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181BE56AC + 4 * byte_18265D1DD[v4]))();
}

uint64_t sub_181BE56AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE56B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BE56BCLL);
  }
  return result;
}

uint64_t sub_181BE56C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BE56D0LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_181BE56D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE56DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IPv6Address.Scope()
{
  return &type metadata for IPv6Address.Scope;
}

ValueMetadata *type metadata accessor for EthernetAddress()
{
  return &type metadata for EthernetAddress;
}

uint64_t initializeBufferWithCopyOfBuffer for NWEndpoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    BOOL v5 = (char *)&loc_181BE5760 + 4 * byte_18265D1E7[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for NWEndpoint(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t result = sub_181BC6974(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = *(void *)(a1 + 48);
      if (result != 1) {
        goto LABEL_7;
      }
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v3 = sub_18264E568();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    case 4:
LABEL_7:
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

void initializeWithCopy for NWEndpoint()
{
  uint64_t v0 = (char *)sub_181BE59AC + 4 * byte_18265D1F1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181BE59AC()
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  sub_181BC683C(*(void *)v1, v3, v4, v5);
  *(void *)uint64_t v0 = v2;
  *(void *)(v0 + 8) = v3;
  *(void *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for NWEndpoint(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    sub_181BE4788(result);
    uint64_t v2 = (char *)&loc_181BE5B24 + 4 * byte_18265D1F6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  return result;
}

void *initializeWithTake for NWEndpoint(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = sub_18264E568();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for NWEndpoint(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_181BE4788((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_181BE5D88()
{
  uint64_t result = sub_18264E568();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

uint64_t destroy for NWEndpoint.Host(uint64_t a1)
{
  return sub_181BC6974(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for NWEndpoint.Host(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_181BC683C(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NWEndpoint.Host(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_181BC683C(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_181BC6974(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NWEndpoint.Host(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_181BC6974(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWEndpoint.Host(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWEndpoint.Host(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_181BE5FE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_181BE5FE8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWEndpoint.Host()
{
  return &type metadata for NWEndpoint.Host;
}

ValueMetadata *type metadata accessor for NWEndpoint.Port()
{
  return &type metadata for NWEndpoint.Port;
}

uint64_t getEnumTagSinglePayload for NWEndpoint.EndpointType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for NWEndpoint.EndpointType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_181BE60EC + 4 * byte_18265D200[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_181BE6120 + 4 * byte_18265D1FB[v4]))();
}

uint64_t sub_181BE6120(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE6128(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BE6130LL);
  }
  return result;
}

uint64_t sub_181BE613C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BE6144LL);
  }
  *(_BYTE *)__n128 result = a2 + 6;
  return result;
}

uint64_t sub_181BE6148(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE6150(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWEndpoint.EndpointType()
{
  return &type metadata for NWEndpoint.EndpointType;
}

void *sub_181BE616C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  __n128 result = sub_181BE35F4( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_181BE61F4,  (uint64_t)v12,  a1,  a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_181BE61C8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_181BCD4F0(a1, a2);
  }
  return a1;
}

uint64_t sub_181BE61DC(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_181BE61F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_181BE37F4(a1, a2);
}

unint64_t sub_181BE6210()
{
  unint64_t result = qword_18C58C158;
  if (!qword_18C58C158)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58C150);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189607200], v1);
    atomic_store(result, (unint64_t *)&qword_18C58C158);
  }

  return result;
}

uint64_t sub_181BE625C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for NWOptionalError()
{
  return &type metadata for NWOptionalError;
}

uint64_t sub_181BE62C8(void (*a1)(uint64_t *))
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((_BYTE *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[8];
  uint64_t v30 = v1[9];
  uint64_t v31 = v1[7];
  uint64_t v29 = v1[10];
  uint64_t v33 = v1[12];
  uint64_t v34 = v1[11];
  uint64_t v32 = v1[13];
  uint64_t v10 = v1[15];
  uint64_t v36 = v1[16];
  uint64_t v37 = v1[14];
  uint64_t v35 = v1[17];
  uint64_t v39 = v1[19];
  uint64_t v40 = v1[18];
  uint64_t v38 = v1[20];
  uint64_t v11 = v1[22];
  uint64_t v43 = v1[23];
  uint64_t v44 = v1[21];
  uint64_t v12 = v1[24];
  uint64_t v45 = v1[26];
  uint64_t v46 = v1[25];
  uint64_t v53 = *v1;
  uint64_t v54 = v3;
  uint64_t v41 = v1[27];
  uint64_t v42 = v12;
  uint64_t v13 = v1[29];
  uint64_t v51 = v1[28];
  uint64_t v55 = v4;
  uint64_t v56 = v5;
  char v57 = v6;
  uint64_t v14 = v1[30];
  uint64_t v58 = v7;
  uint64_t v59 = v8;
  uint64_t v47 = v1[31];
  uint64_t v48 = v14;
  uint64_t v49 = v1[32];
  uint64_t v50 = v1[33];
  uint64_t v15 = v1[35];
  uint64_t v52 = v1[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a1(&v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v53 = v31;
    uint64_t v54 = v9;
    uint64_t v55 = v30;
    uint64_t v56 = v29;
    char v57 = v34;
    uint64_t v58 = v33;
    uint64_t v59 = v32;
    a1(&v53);
  }

  if (v10)
  {
    uint64_t v53 = v37;
    uint64_t v54 = v10;
    uint64_t v55 = v36;
    uint64_t v56 = v35;
    char v57 = v40;
    uint64_t v58 = v39;
    uint64_t v59 = v38;
    a1(&v53);
  }

  if (v11)
  {
    uint64_t v53 = v44;
    uint64_t v54 = v11;
    uint64_t v55 = v43;
    uint64_t v56 = v42;
    char v57 = v46;
    uint64_t v58 = v45;
    uint64_t v59 = v41;
    a1(&v53);
  }

  if (v13)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v13;
    uint64_t v55 = v48;
    uint64_t v56 = v47;
    char v57 = v49;
    uint64_t v58 = v50;
    uint64_t v59 = v52;
    a1(&v53);
  }

  BOOL v16 = (uint64_t *)(v15 + 16);
  swift_retain();
  uint64_t result = swift_beginAccess();
  uint64_t v18 = *(void *)(v15 + 16);
  unint64_t v19 = *(void *)(v18 + 16);
  if (!v19) {
    return swift_release();
  }
  uint64_t v20 = 0LL;
  unint64_t v21 = 0LL;
  while (v21 < v19)
  {
    ++v21;
    uint64_t v22 = v18 + v20;
    uint64_t v23 = *(void *)(v22 + 72);
    uint64_t v24 = *(void *)(v22 + 80);
    char v25 = *(_BYTE *)(v22 + 64);
    uint64_t v26 = *(void *)(v22 + 48);
    uint64_t v27 = *(void *)(v22 + 56);
    uint64_t v28 = *(void *)(v22 + 40);
    uint64_t v53 = *(void *)(v22 + 32);
    uint64_t v54 = v28;
    uint64_t v55 = v26;
    uint64_t v56 = v27;
    char v57 = v25;
    uint64_t v58 = v23;
    uint64_t v59 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = *v16;
    unint64_t v19 = *(void *)(*v16 + 16);
    v20 += 64LL;
    if (v21 == v19) {
      return swift_release();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_181BE6594()
{
  unint64_t v2 = v0[5];
  unint64_t v1 = v0[6];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  unint64_t v5 = v0[19];
  unint64_t v65 = v0[20];
  uint64_t v57 = v0[22];
  uint64_t v59 = v0[21];
  unint64_t v61 = v0[27];
  unint64_t v62 = v0[26];
  uint64_t v55 = v0[35];
  uint64_t v72 = MEMORY[0x18961AFE8];
  uint64_t v6 = 0LL;
  if ((sub_181BCE7EC(v2, v1) & 1) != 0)
  {
    unint64_t v70 = v2;
    unint64_t v71 = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_181BE7A14((uint64_t *)&v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C94A88(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  sub_181C54438(32LL, 0xE100000000000000LL);
  unint64_t v7 = v5;
  if (v2 == 0x5443454E4E4F43LL && v1 == 0xE700000000000000LL)
  {
    uint64_t v8 = v3;
    unint64_t v9 = v5;
    unint64_t v10 = v65;
    unint64_t v11 = v65;
    if (!v3) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }

  char v12 = sub_18264F4EC();
  if ((v12 & 1) != 0)
  {
    uint64_t v8 = v3;
  }

  else
  {
    uint64_t v4 = v59;
    uint64_t v8 = v57;
  }

  unint64_t v10 = v65;
  if ((v12 & 1) != 0) {
    unint64_t v9 = v5;
  }
  else {
    unint64_t v9 = v62;
  }
  if ((v12 & 1) != 0) {
    unint64_t v11 = v65;
  }
  else {
    unint64_t v11 = v61;
  }
  if (v8)
  {
LABEL_18:
    if ((sub_181BCE7EC(v9, v11) & 1) != 0)
    {
      unint64_t v70 = v9;
      unint64_t v71 = v11;
      uint64_t v13 = v4;
      sub_181BCECA4(v4, v8);
      swift_bridgeObjectRetain();
      sub_181BE7A14((uint64_t *)&v70);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v13 = v4;
      sub_181BCECA4(v4, v8);
      sub_181C94A88(v9, v11);
    }

    sub_181BCECE0(v13, v8);
    unint64_t v7 = v5;
  }

uint64_t sub_181BE6F34(void (*a1)(uint64_t *))
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((_BYTE *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[9];
  uint64_t v23 = *v1;
  uint64_t v24 = v3;
  uint64_t v25 = v4;
  uint64_t v26 = v5;
  char v27 = v6;
  uint64_t v28 = v7;
  uint64_t v29 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a1(&v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v10 = (uint64_t *)(v9 + 16);
  swift_retain();
  uint64_t result = swift_beginAccess();
  uint64_t v12 = *(void *)(v9 + 16);
  unint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    return swift_release();
  }
  uint64_t v14 = 0LL;
  unint64_t v15 = 0LL;
  while (v15 < v13)
  {
    ++v15;
    uint64_t v16 = v12 + v14;
    uint64_t v17 = *(void *)(v16 + 72);
    uint64_t v18 = *(void *)(v16 + 80);
    char v19 = *(_BYTE *)(v16 + 64);
    uint64_t v20 = *(void *)(v16 + 48);
    uint64_t v21 = *(void *)(v16 + 56);
    uint64_t v22 = *(void *)(v16 + 40);
    uint64_t v23 = *(void *)(v16 + 32);
    uint64_t v24 = v22;
    uint64_t v25 = v20;
    uint64_t v26 = v21;
    char v27 = v19;
    uint64_t v28 = v17;
    uint64_t v29 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = *v10;
    unint64_t v13 = *(void *)(*v10 + 16);
    v14 += 64LL;
    if (v15 == v13) {
      return swift_release();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_181BE7098()
{
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v32 = *(void *)v0;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  char v4 = *(_BYTE *)(v0 + 32);
  unint64_t v5 = *(void *)(v0 + 40);
  unint64_t v6 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v29 = *(void *)(v0 + 72);
  uint64_t v46 = MEMORY[0x18961AFE8];
  sub_181C54438(0x312E312F50545448LL, 0xE900000000000020LL);
  if ((sub_181BCE7EC(v5, v6) & 1) != 0)
  {
    unint64_t v33 = v5;
    unint64_t v34 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_181BE7A14((uint64_t *)&v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C94A88(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  sub_181C54438(32LL, 0xE100000000000000LL);
  unint64_t v33 = v32;
  unint64_t v34 = v1;
  uint64_t v35 = v3;
  uint64_t v36 = v2;
  char v37 = v4;
  unint64_t v38 = v5;
  unint64_t v39 = v6;
  uint64_t v40 = v8;
  uint64_t v41 = v7;
  uint64_t v42 = v29;
  HTTPResponse.status.getter(&v43);
  unint64_t v10 = v44;
  unint64_t v9 = v45;
  if ((sub_181BCE7EC(v44, v45) & 1) != 0)
  {
    unint64_t v33 = v10;
    unint64_t v34 = v9;
    swift_bridgeObjectRetain();
    sub_181BE7A14((uint64_t *)&v33);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_181C94A88(v10, v9);
  }

  swift_bridgeObjectRelease();
  sub_181C54438(2573LL, 0xE200000000000000LL);
  swift_retain();
  uint64_t v30 = (uint64_t *)(v29 + 16);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v29 + 16);
  unint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
LABEL_38:
    swift_release();
    sub_181C54438(2573LL, 0xE200000000000000LL);
    return v46;
  }

  unint64_t v13 = 0LL;
LABEL_11:
  if (v13 < v12)
  {
    uint64_t v14 = (void *)(v11 + (v13 << 6));
    unint64_t v16 = v14[9];
    unint64_t v15 = v14[10];
    unint64_t v31 = v13 + 1;
    uint64_t v18 = v14[4];
    unint64_t v17 = v14[5];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C54438(v18, v17);
    sub_181C54438(8250LL, 0xE200000000000000LL);
    if ((v15 & 0x2000000000000000LL) != 0) {
      unint64_t v19 = HIBYTE(v15) & 0xF;
    }
    else {
      unint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v20 = (v16 >> 59) & 1;
    if ((v15 & 0x1000000000000000LL) == 0) {
      LOBYTE(v20) = 1;
    }
    uint64_t v21 = 4LL << v20;
    unint64_t v22 = 15LL;
    while (1)
    {
      while (1)
      {
        if (4 * v19 == v22 >> 14)
        {
          unint64_t v43 = v16;
          unint64_t v44 = v15;
          swift_bridgeObjectRetain();
          sub_181BE7A14((uint64_t *)&v43);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          unint64_t v13 = v31;
          sub_181C54438(2573LL, 0xE200000000000000LL);
          swift_beginAccess();
          uint64_t v11 = *v30;
          unint64_t v12 = *(void *)(*v30 + 16);
          if (v31 == v12) {
            goto LABEL_38;
          }
          goto LABEL_11;
        }

        unint64_t v23 = v22 & 0xC;
        unint64_t v24 = v22;
        if (v23 == v21) {
          unint64_t v24 = sub_181C23710(v22, v16, v15);
        }
        unint64_t v25 = v24 >> 16;
        if (v24 >> 16 >= v19)
        {
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }

        if ((v15 & 0x1000000000000000LL) == 0) {
          break;
        }
        char v27 = sub_18264EBC8();
        if (v23 == v21) {
          goto LABEL_35;
        }
LABEL_30:
        if ((v15 & 0x1000000000000000LL) == 0) {
          goto LABEL_18;
        }
LABEL_31:
        if (v19 <= v22 >> 16) {
          goto LABEL_40;
        }
        unint64_t v22 = sub_18264EB98();
        if (v27 < 0)
        {
LABEL_9:
          sub_181C94A88(v16, v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }

      if ((v15 & 0x2000000000000000LL) != 0)
      {
        unint64_t v43 = v16;
        unint64_t v44 = v15 & 0xFFFFFFFFFFFFFFLL;
        char v27 = *((_BYTE *)&v43 + v25);
        if (v23 == v21) {
          goto LABEL_35;
        }
        goto LABEL_30;
      }

      uint64_t v26 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v16 & 0x1000000000000000LL) == 0) {
        uint64_t v26 = sub_18264F228();
      }
      char v27 = *(_BYTE *)(v26 + v25);
      if (v23 != v21) {
        goto LABEL_30;
      }
LABEL_35:
      unint64_t v22 = sub_181C23710(v22, v16, v15);
      if ((v15 & 0x1000000000000000LL) != 0) {
        goto LABEL_31;
      }
LABEL_18:
      unint64_t v22 = (v22 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v27 < 0) {
        goto LABEL_9;
      }
    }
  }

uint64_t sub_181BE752C(void (*a1)(void *))
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 16;
  swift_retain();
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 16);
  unint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    return swift_release();
  }
  uint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  while (v9 < v7)
  {
    ++v9;
    uint64_t v10 = v6 + v8;
    uint64_t v11 = *(void *)(v10 + 72);
    uint64_t v12 = *(void *)(v10 + 80);
    char v13 = *(_BYTE *)(v10 + 64);
    uint64_t v14 = *(void *)(v10 + 48);
    uint64_t v15 = *(void *)(v10 + 56);
    uint64_t v16 = *(void *)(v10 + 40);
    v17[0] = *(void *)(v10 + 32);
    v17[1] = v16;
    void v17[2] = v14;
    v17[3] = v15;
    char v18 = v13;
    uint64_t v19 = v11;
    uint64_t v20 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)v4;
    unint64_t v7 = *(void *)(*(void *)v4 + 16LL);
    v8 += 64LL;
    if (v9 == v7) {
      return swift_release();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_181BE7638()
{
  uint64_t v1 = *v0;
  uint64_t v24 = MEMORY[0x18961AFE8];
  swift_retain();
  uint64_t v20 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
LABEL_32:
    swift_release();
    sub_181C54438(2573LL, 0xE200000000000000LL);
    return v24;
  }

  unint64_t v4 = 0LL;
LABEL_5:
  if (v4 < v3)
  {
    unint64_t v5 = (void *)(v2 + (v4 << 6));
    unint64_t v7 = v5[9];
    unint64_t v6 = v5[10];
    unint64_t v21 = v4 + 1;
    uint64_t v9 = v5[4];
    unint64_t v8 = v5[5];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C54438(v9, v8);
    sub_181C54438(8250LL, 0xE200000000000000LL);
    if ((v6 & 0x2000000000000000LL) != 0) {
      unint64_t v10 = HIBYTE(v6) & 0xF;
    }
    else {
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = (v7 >> 59) & 1;
    if ((v6 & 0x1000000000000000LL) == 0) {
      LOBYTE(v11) = 1;
    }
    uint64_t v12 = 4LL << v11;
    unint64_t v13 = 15LL;
    while (1)
    {
      while (1)
      {
        if (4 * v10 == v13 >> 14)
        {
          unint64_t v22 = v7;
          uint64_t v23 = v6;
          swift_bridgeObjectRetain();
          sub_181BE7A14((uint64_t *)&v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_4:
          swift_bridgeObjectRelease();
          sub_181C54438(2573LL, 0xE200000000000000LL);
          swift_beginAccess();
          uint64_t v2 = *v20;
          unint64_t v3 = *(void *)(*v20 + 16);
          unint64_t v4 = v21;
          if (v21 == v3) {
            goto LABEL_32;
          }
          goto LABEL_5;
        }

        unint64_t v14 = v13 & 0xC;
        unint64_t v15 = v13;
        if (v14 == v12) {
          unint64_t v15 = sub_181C23710(v13, v7, v6);
        }
        unint64_t v16 = v15 >> 16;
        if (v15 >> 16 >= v10)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }

        if ((v6 & 0x1000000000000000LL) == 0) {
          break;
        }
        char v18 = sub_18264EBC8();
        if (v14 == v12) {
          goto LABEL_29;
        }
LABEL_24:
        if ((v6 & 0x1000000000000000LL) == 0) {
          goto LABEL_12;
        }
LABEL_25:
        if (v10 <= v13 >> 16) {
          goto LABEL_34;
        }
        unint64_t v13 = sub_18264EB98();
        if (v18 < 0)
        {
LABEL_3:
          sub_181C94A88(v7, v6);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }

      if ((v6 & 0x2000000000000000LL) != 0)
      {
        unint64_t v22 = v7;
        uint64_t v23 = v6 & 0xFFFFFFFFFFFFFFLL;
        char v18 = *((_BYTE *)&v22 + v16);
        if (v14 == v12) {
          goto LABEL_29;
        }
        goto LABEL_24;
      }

      uint64_t v17 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v7 & 0x1000000000000000LL) == 0) {
        uint64_t v17 = sub_18264F228();
      }
      char v18 = *(_BYTE *)(v17 + v16);
      if (v14 != v12) {
        goto LABEL_24;
      }
LABEL_29:
      unint64_t v13 = sub_181C23710(v13, v7, v6);
      if ((v6 & 0x1000000000000000LL) != 0) {
        goto LABEL_25;
      }
LABEL_12:
      unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v18 < 0) {
        goto LABEL_3;
      }
    }
  }

uint64_t sub_181BE7938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE7950(a1, a2, a3, a4, (uint64_t)sub_181BE7AC8);
}

uint64_t sub_181BE7944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE7950(a1, a2, a3, a4, (uint64_t)sub_181BE7AC0);
}

uint64_t sub_181BE7950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a1;
  void v6[3] = a2;
  return (*(uint64_t (**)(uint64_t, void *))(a4 + 8))(a5, v6);
}

uint64_t sub_181BE797C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(_BYTE *)(a1 + 32);
  v8[0] = *(void *)(a1 + 16);
  v8[1] = v3;
  swift_bridgeObjectRetain();
  sub_18264EB74();
  uint64_t v5 = v8[0];
  uint64_t v6 = sub_18264EB50();
  LOBYTE(v8[0]) = v4;
  a2(v5, v3, v6, v8);
  return swift_bridgeObjectRelease();
}

char *sub_181BE7A14(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000LL) == 0)
  {
    if ((v2 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    char v4 = (char *)(HIBYTE(v2) & 0xF);
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v3 = (char *)v9;
    return sub_181C54224(v3, v4);
  }

  uint64_t v1 = sub_181C8B3F4();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v7;
  unint64_t v2 = v7;
  if ((v7 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v3 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    char v4 = (char *)(v1 & 0xFFFFFFFFFFFFLL);
  }

  else
  {
    uint64_t v3 = (char *)sub_18264F228();
  }

  return sub_181C54224(v3, v4);
}

uint64_t sub_181BE7AC0(uint64_t a1)
{
  return sub_181BE797C(a1, *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v1 + 16));
}

uint64_t sub_181BE7AC8(uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v1 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  char v8 = *(_BYTE *)(a1 + 32);
  return v2(v4, v3, v5, v6, &v8);
}

uint64_t sub_181BE7B08(uint64_t a1)
{
  return sub_181BE8FF4(a1, (uint64_t (*)(void))nw_protocol_copy_quic_definition, &qword_18C58C170);
}

uint64_t static NWProtocolQUIC.definition.getter()
{
  return sub_181BE8D9C(&qword_18C58B100);
}

BOOL sub_181BE7B38(nw_protocol_options *a1)
{
  return nw_protocol_options_is_quic(a1);
}

uint64_t NWProtocolQUIC.Options.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = nw_quic_create_options();
  return v0;
}

uint64_t NWProtocolQUIC.Options.init()()
{
  *(void *)(v0 + 16) = nw_quic_create_options();
  return v0;
}

uint64_t sub_181BE7BA4(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181BE7BC8()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = MEMORY[0x18961AFE8];
  unint64_t v2 = (uint64_t *)(v1 + 16);
  uint64_t v3 = *(void **)(v0 + 16);
  v7[4] = sub_181BEA0B8;
  v7[5] = v1;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1107296256LL;
  void v7[2] = sub_181BE7D98;
  v7[3] = &block_descriptor_2;
  uint64_t v4 = _Block_copy(v7);
  swift_retain();
  swift_release();
  nw_quic_iterate_tls_application_protocols(v3, v4);
  _Block_release(v4);
  swift_beginAccess();
  uint64_t v5 = *v2;
  swift_bridgeObjectRetain();
  swift_release();
  return v5;
}

uint64_t sub_181BE7CBC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v2 = (void **)(a2 + 16);
    uint64_t v3 = sub_18264EB80();
    uint64_t v5 = v4;
    swift_beginAccess();
    uint64_t v6 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v2 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v6 = sub_181BC4728(0LL, v6[2] + 1LL, 1, v6);
      *unint64_t v2 = v6;
    }

    unint64_t v9 = v6[2];
    unint64_t v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      uint64_t v6 = sub_181BC4728((void *)(v8 > 1), v9 + 1, 1, v6);
      *unint64_t v2 = v6;
    }

    v6[2] = v9 + 1;
    unint64_t v10 = &v6[2 * v9];
    v10[4] = v3;
    v10[5] = v5;
    swift_endAccess();
  }

  return 1LL;
}

uint64_t sub_181BE7D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

void (*sub_181BE7DE0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = MEMORY[0x18961AFE8];
  uint64_t v5 = (uint64_t *)(v4 + 16);
  uint64_t v6 = *(void **)(v1 + 16);
  v3[7] = v6;
  v3[4] = sub_181BEA0B8;
  v3[5] = v4;
  void *v3 = MEMORY[0x1895F87A8];
  v3[1] = 1107296256LL;
  void v3[2] = sub_181BE7D98;
  v3[3] = &block_descriptor_5;
  uint64_t v7 = _Block_copy(v3);
  swift_retain();
  swift_release();
  nw_quic_iterate_tls_application_protocols(v6, v7);
  _Block_release(v7);
  swift_beginAccess();
  uint64_t v8 = *v5;
  swift_bridgeObjectRetain();
  swift_release();
  v3[6] = v8;
  return sub_181BE7EF0;
}

void sub_181BE7EF0(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 48LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 56LL);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    nw_quic_clear_tls_application_protocols(v4);
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5)
    {
      uint64_t v6 = v3 + 40;
      do
      {
        uint64_t v7 = (nw_protocol_options *)v2[7];
        uint64_t v8 = sub_18264EACC();
        nw_quic_add_tls_application_protocol(v7, (const char *)(v8 + 32));
        swift_release();
        v6 += 16LL;
        --v5;
      }

      while (v5);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    nw_quic_clear_tls_application_protocols(*(void **)(*(void *)a1 + 56LL));
    uint64_t v9 = *(void *)(v3 + 16);
    if (v9)
    {
      uint64_t v10 = v3 + 40;
      do
      {
        uint64_t v11 = (nw_protocol_options *)v2[7];
        uint64_t v12 = sub_18264EACC();
        nw_quic_add_tls_application_protocol(v11, (const char *)(v12 + 32));
        swift_release();
        v10 += 16LL;
        --v9;
      }

      while (v9);
    }
  }

  swift_bridgeObjectRelease();
  free(v2);
}

BOOL static NWProtocolQUIC.Options.Direction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWProtocolQUIC.Options.Direction.hash(into:)()
{
  return sub_18264F654();
}

void sub_181BE802C(BOOL *a1)
{
}

BOOL sub_181BE8038@<W0>(_BYTE *a1@<X8>)
{
  BOOL result = nw_quic_get_stream_is_unidirectional(*(nw_protocol_options_t *)(v1 + 16));
  *a1 = result;
  return result;
}

void (*sub_181BE8060(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_quic_get_stream_is_unidirectional(v3);
  return sub_181BE8098;
}

void sub_181BE8098(uint64_t a1)
{
}

void sub_181BE80A8(char a1)
{
}

BOOL sub_181BE80B8()
{
  return nw_quic_get_stream_is_datagram(*(nw_protocol_options_t *)(v0 + 16));
}

void (*sub_181BE80D0(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_quic_get_stream_is_datagram(v3);
  return sub_181BE8108;
}

void sub_181BE8108(uint64_t a1)
{
}

sec_protocol_options_t sub_181BE8118()
{
  return nw_quic_copy_sec_protocol_options(*(nw_protocol_options_t *)(v0 + 16));
}

void sub_181BE8120(uint64_t a1)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  if (a1 < 0xFFFFFFFFLL) {
    uint64_t v2 = a1;
  }
  nw_quic_set_idle_timeout(*(nw_protocol_options_t *)(v1 + 16), v2 & ~(v2 >> 63));
}

uint64_t sub_181BE8140()
{
  return nw_quic_get_idle_timeout(*(nw_protocol_options_t *)(v0 + 16));
}

void (*sub_181BE815C(void *a1))(uint64_t a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_idle_timeout(v3);
  return sub_181BE8198;
}

void sub_181BE8198(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  nw_quic_set_idle_timeout(*(nw_protocol_options_t *)(a1 + 8), v1 & ~(v1 >> 63));
}

void sub_181BE81B8(uint64_t a1)
{
  uint64_t v2 = 0xFFFFLL;
  if (a1 < 0xFFFF) {
    uint64_t v2 = a1;
  }
  nw_quic_set_max_udp_payload_size(*(nw_protocol_options_t *)(v1 + 16), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_181BE81D8()
{
  return nw_quic_get_max_udp_payload_size(*(nw_protocol_options_t *)(v0 + 16));
}

void (*sub_181BE81F4(void *a1))(uint64_t a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_max_udp_payload_size(v3);
  return sub_181BE8230;
}

void sub_181BE8230(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  nw_quic_set_max_udp_payload_size(*(nw_protocol_options_t *)(a1 + 8), v1 & ~(unsigned __int16)(v1 >> 63));
}

uint64_t sub_181BE8250(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_set_initial_max_data);
}

uint64_t sub_181BE825C()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_initial_max_data);
}

uint64_t sub_181BE8268(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_initial_max_data(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE82A8;
  }

  return result;
}

uint64_t sub_181BE82A8(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_initial_max_data);
}

uint64_t sub_181BE82B4(uint64_t a1)
{
  return sub_181BE9D0C( a1,  (uint64_t (*)(void, uint64_t))nw_quic_set_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_181BE82C0()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_181BE82CC(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_initial_max_stream_data_bidirectional_remote(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE830C;
  }

  return result;
}

uint64_t sub_181BE830C(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_181BE8318(uint64_t a1)
{
  return sub_181BE9D0C( a1,  (uint64_t (*)(void, uint64_t))nw_quic_set_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_181BE8324()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_181BE8330(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_initial_max_stream_data_bidirectional_local(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE8370;
  }

  return result;
}

uint64_t sub_181BE8370(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_181BE837C(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_set_initial_max_stream_data_unidirectional);
}

uint64_t sub_181BE8388()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_initial_max_stream_data_unidirectional);
}

uint64_t sub_181BE8394(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_initial_max_stream_data_unidirectional(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE83D4;
  }

  return result;
}

uint64_t sub_181BE83D4(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_initial_max_stream_data_unidirectional);
}

uint64_t sub_181BE83E0(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_set_initial_max_streams_bidirectional);
}

uint64_t sub_181BE83EC()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_initial_max_streams_bidirectional);
}

uint64_t sub_181BE83F8(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_initial_max_streams_bidirectional(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE8438;
  }

  return result;
}

uint64_t sub_181BE8438(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_initial_max_streams_bidirectional);
}

uint64_t sub_181BE8444(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_set_initial_max_streams_unidirectional);
}

uint64_t sub_181BE8450()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_initial_max_streams_unidirectional);
}

uint64_t sub_181BE845C(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_initial_max_streams_unidirectional(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE849C;
  }

  return result;
}

uint64_t sub_181BE849C(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_initial_max_streams_unidirectional);
}

uint64_t sub_181BE84A8(unint64_t a1)
{
  return sub_181BE85DC(a1, (uint64_t (*)(void, void))nw_quic_set_max_datagram_frame_size);
}

uint64_t sub_181BE84B4()
{
  return nw_quic_get_max_datagram_frame_size(*(nw_protocol_options_t *)(v0 + 16));
}

uint64_t (*sub_181BE84D0(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(nw_protocol_options **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_max_datagram_frame_size(v3);
  return sub_181BE850C;
}

uint64_t sub_181BE850C(void *a1, uint64_t a2)
{
  return sub_181BE86F8(a1, a2, (uint64_t (*)(void, void))nw_quic_set_max_datagram_frame_size);
}

uint64_t sub_181BE8518( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  if ((*a1 & 0x8000000000000000LL) == 0 && *a1 < 0x10000uLL) {
    return a5(*(void *)(*(void *)a2 + 16LL), (unsigned __int16)*a1);
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181BE85D0(unint64_t a1)
{
  return sub_181BE85DC(a1, (uint64_t (*)(void, void))nw_quic_set_initial_packet_size);
}

uint64_t sub_181BE85DC(unint64_t a1, uint64_t (*a2)(void, void))
{
  if ((a1 & 0x8000000000000000LL) == 0 && a1 < 0x10000) {
    return a2(*(void *)(v2 + 16), (unsigned __int16)a1);
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181BE8694()
{
  return nw_quic_get_initial_packet_size(*(void **)(v0 + 16));
}

uint64_t (*sub_181BE86B0(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_quic_get_initial_packet_size(v3);
  return sub_181BE86EC;
}

uint64_t sub_181BE86EC(void *a1, uint64_t a2)
{
  return sub_181BE86F8(a1, a2, (uint64_t (*)(void, void))nw_quic_set_initial_packet_size);
}

uint64_t sub_181BE86F8(void *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  if ((*a1 & 0x8000000000000000LL) == 0 && *a1 < 0x10000uLL) {
    return a3(a1[1], (unsigned __int16)*a1);
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t NWProtocolQUIC.Options.deinit()
{
  return v0;
}

uint64_t NWProtocolQUIC.Options.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t NWProtocolQUIC.ApplicationError.code.getter()
{
  return *(void *)v0;
}

uint64_t NWProtocolQUIC.ApplicationError.reason.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolQUIC.ApplicationError.init(integerLiteral:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = result;
  return result;
}

uint64_t NWProtocolQUIC.ApplicationError.init(code:reason:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t *sub_181BE881C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = v2;
  return result;
}

BOOL sub_181BE882C(nw_protocol_metadata *a1)
{
  return nw_protocol_metadata_is_quic(a1);
}

sec_protocol_metadata_t sub_181BE8840()
{
  return nw_quic_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_181BE8848()
{
  uint64_t v1 = nw_quic_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(v0 + 16));
  negotiated_protocol = sec_protocol_metadata_get_negotiated_protocol(v1);
  swift_unknownObjectRelease();
  if (negotiated_protocol) {
    return sub_18264EB80();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_181BE8894()
{
  return nw_quic_get_stream_id(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_181BE889C()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_remote_idle_timeout);
}

uint64_t sub_181BE88A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(nw_protocol_metadata **)(*(void *)a1 + 16LL);
  uint64_t application_error = nw_quic_get_application_error(v3);
  uint64_t result = (uint64_t)nw_quic_get_application_error_reason(v3);
  if (result) {
    uint64_t result = sub_18264EB80();
  }
  else {
    unint64_t v6 = 0xE000000000000000LL;
  }
  *a2 = application_error;
  a2[1] = result;
  a2[2] = v6;
  return result;
}

uint64_t sub_181BE8900(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(nw_protocol_metadata **)(*(void *)a2 + 16LL);
  if (a1[2]) {
    uint64_t v4 = (const char *)(sub_18264EACC() + 32);
  }
  else {
    uint64_t v4 = 0LL;
  }
  swift_bridgeObjectRetain();
  nw_quic_set_application_error(v3, v2, v4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_181BE8980(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  if (a1[2]) {
    uint64_t v4 = (const char *)(sub_18264EACC() + 32);
  }
  else {
    uint64_t v4 = 0LL;
  }
  nw_quic_set_application_error(v3, v2, v4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_181BE89F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  uint64_t application_error = nw_quic_get_application_error(v3);
  uint64_t result = (uint64_t)nw_quic_get_application_error_reason(v3);
  if (result) {
    uint64_t result = sub_18264EB80();
  }
  else {
    unint64_t v6 = 0xE000000000000000LL;
  }
  *a1 = application_error;
  a1[1] = result;
  a1[2] = v6;
  return result;
}

uint64_t (*sub_181BE8A44(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  a1[3] = (uint64_t)v3;
  uint64_t application_error = nw_quic_get_application_error(v3);
  uint64_t application_error_reason = (uint64_t)nw_quic_get_application_error_reason(v3);
  if (application_error_reason) {
    uint64_t application_error_reason = sub_18264EB80();
  }
  else {
    unint64_t v6 = 0xE000000000000000LL;
  }
  *a1 = application_error;
  a1[1] = application_error_reason;
  a1[2] = v6;
  return sub_181BE8AA8;
}

uint64_t sub_181BE8AA8(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    if (v4) {
      uint64_t v5 = (const char *)(sub_18264EACC() + 32);
    }
    else {
      uint64_t v5 = 0LL;
    }
    uint64_t v7 = *(nw_protocol_metadata **)(a1 + 24);
    swift_bridgeObjectRetain();
    nw_quic_set_application_error(v7, v3, v5);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    if (v4) {
      unint64_t v6 = (const char *)(sub_18264EACC() + 32);
    }
    else {
      unint64_t v6 = 0LL;
    }
    nw_quic_set_application_error(*(nw_protocol_metadata_t *)(a1 + 24), v3, v6);
    swift_unknownObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void sub_181BE8B70(uint64_t application_error)
{
}

uint64_t sub_181BE8B7C()
{
  return nw_quic_get_stream_application_error(*(nw_protocol_metadata_t *)(v0 + 16));
}

void (*sub_181BE8B84(uint64_t *a1))(uint64_t a1)
{
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  *a1 = nw_quic_get_stream_application_error(v3);
  return sub_181BE8BBC;
}

void sub_181BE8BBC(uint64_t a1)
{
}

uint64_t sub_181BE8BC8(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_set_local_max_streams_unidirectional);
}

uint64_t sub_181BE8BD4()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_local_max_streams_unidirectional);
}

uint64_t sub_181BE8BE0(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_local_max_streams_unidirectional(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE8C20;
  }

  return result;
}

uint64_t sub_181BE8C20(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_local_max_streams_unidirectional);
}

uint64_t sub_181BE8C2C()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_remote_max_streams_unidirectional);
}

uint64_t sub_181BE8C38(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_set_local_max_streams_bidirectional);
}

uint64_t sub_181BE8C44()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_local_max_streams_bidirectional);
}

uint64_t sub_181BE8C50(uint64_t *a1)
{
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  uint64_t result = nw_quic_get_local_max_streams_bidirectional(v3);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE8C90;
  }

  return result;
}

uint64_t sub_181BE8C90(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_set_local_max_streams_bidirectional);
}

uint64_t sub_181BE8C9C()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_get_remote_max_streams_bidirectional);
}

uint64_t sub_181BE8CA8()
{
  return nw_quic_get_stream_usable_datagram_frame_size(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_181BE8CC4@<X0>(uint64_t a1@<X8>)
{
  return sub_181BE9D88((uint64_t (*)(void))nw_quic_get_keepalive_interval, a1);
}

uint64_t sub_181BE8CD0(uint64_t a1)
{
  return sub_181BE9DEC(a1, (uint64_t (*)(void, uint64_t))nw_quic_set_keepalive_interval);
}

uint64_t (*sub_181BE8CDC(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  *(void *)(a1 + 16) = v1;
  unsigned int keepalive_interval = nw_quic_get_keepalive_interval(*(nw_protocol_metadata_t *)(v1 + 16));
  uint64_t v4 = keepalive_interval;
  if (keepalive_interval)
  {
    char v5 = 0;
  }

  else
  {
    uint64_t v4 = 1LL;
    char v5 = 1;
  }

  else {
    uint64_t v6 = v4;
  }
  else {
    char v7 = v5;
  }
  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  return sub_181BE8D40;
}

uint64_t sub_181BE8D40(uint64_t *a1, uint64_t a2)
{
  return sub_181BE9F0C(a1, a2, (uint64_t (*)(uint64_t *))sub_181BE8CD0);
}

uint64_t NWProtocolQUIC.Metadata.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t NWProtocolQUIC.deinit()
{
  return v0;
}

uint64_t NWProtocolQUIC.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181BE8D6C(uint64_t a1)
{
  return sub_181BE8FF4(a1, (uint64_t (*)(void))nw_protocol_copy_quic_stream_definition, &qword_18C58C178);
}

uint64_t static NWProtocolQUICStream.definition.getter()
{
  return sub_181BE8D9C(&qword_18C58B108);
}

uint64_t sub_181BE8D9C(void *a1)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_retain();
}

void sub_181BE8DD8(char *a1)
{
  char v2 = *a1;
  *(_BYTE *)(v1 + 24) = *a1;
  nw_quic_stream_set_is_unidirectional(*(void **)(v1 + 16), v2);
}

void sub_181BE8DE8(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 24);
}

void (*sub_181BE8DF4(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 24);
  return sub_181BE8E10;
}

void sub_181BE8E10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = *((_BYTE *)a1 + 8);
  *(_BYTE *)(v1 + 24) = v2;
  nw_quic_stream_set_is_unidirectional(*(void **)(v1 + 16), v2);
}

double sub_181BE8E24()
{
  id v1 = nw_quic_stream_copy_shared_connection_options(*(void **)(v0 + 16));
  type metadata accessor for NWProtocolQUICConnection.Options();
  uint64_t v2 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(void *)(v2 + 16) = v1;
  return result;
}

double sub_181BE8E70(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(void *)(v2 + 16) = a1;
  return result;
}

BOOL sub_181BE8EB4(nw_protocol_options *a1)
{
  return sub_181BE9A6C(a1, (uint64_t (*)(void))nw_protocol_copy_quic_stream_definition);
}

uint64_t NWProtocolQUICStream.Options.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(_BYTE *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = nw_quic_create_stream_options();
  return v0;
}

uint64_t NWProtocolQUICStream.Options.init()()
{
  *(_BYTE *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = nw_quic_create_stream_options();
  return v0;
}

uint64_t sub_181BE8F1C(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(_BYTE *)(result + 24) = 0;
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t NWProtocolQUICStream.Options.__deallocating_deinit()
{
  return sub_181BE9F50();
}

BOOL sub_181BE8F58(void *a1)
{
  return nw_protocol_metadata_is_quic_stream(a1);
}

uint64_t sub_181BE8F6C()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_stream_get_id);
}

uint64_t sub_181BE8F78()
{
  return nw_quic_stream_get_application_error(*(void **)(v0 + 16));
}

void sub_181BE8F80(uint64_t a1)
{
}

void (*sub_181BE8F8C(uint64_t *a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  *a1 = nw_quic_stream_get_application_error(v3);
  return sub_181BE8FC4;
}

void sub_181BE8FC4(uint64_t a1)
{
}

uint64_t NWProtocolQUICStream.Metadata.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t NWProtocolQUICStream.deinit()
{
  return v0;
}

uint64_t sub_181BE8FE0(uint64_t a1)
{
  return sub_181BE8FF4(a1, (uint64_t (*)(void))nw_protocol_copy_quic_connection_definition, &qword_18C58C180);
}

uint64_t sub_181BE8FF4(uint64_t a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v4 = a2();
  type metadata accessor for NWProtocolDefinition();
  char v5 = (void *)swift_allocObject();
  void v5[4] = v4;
  id v6 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v7 = sub_18264EA48();
  uint64_t v9 = v8;

  uint64_t result = swift_unknownObjectRelease();
  v5[2] = v7;
  v5[3] = v9;
  *a3 = v5;
  return result;
}

uint64_t static NWProtocolQUICConnection.definition.getter()
{
  return sub_181BE8D9C(&qword_18C58B110);
}

id sub_181BE90A0()
{
  return nw_quic_connection_copy_sec_protocol_options(*(void **)(v0 + 16));
}

void sub_181BE90A8(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  if (a1 < 0xFFFFFFFFLL) {
    uint64_t v2 = a1;
  }
  nw_quic_connection_set_idle_timeout(*(void **)(v1 + 16), v2 & ~(v2 >> 63));
}

uint64_t sub_181BE90CC()
{
  return *(void *)(v0 + 24);
}

void (*sub_181BE90D4(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 24);
  a1[1] = v1;
  return sub_181BE90EC;
}

void sub_181BE90EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  *(void *)(v1 + 24) = *a1;
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v2 < 0xFFFFFFFFLL) {
    uint64_t v4 = v2;
  }
  nw_quic_connection_set_idle_timeout(v3, v4 & ~(v4 >> 63));
}

void sub_181BE9110(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  uint64_t v2 = 0xFFFFLL;
  if (a1 < 0xFFFF) {
    uint64_t v2 = a1;
  }
  nw_quic_connection_set_max_udp_payload_size(*(void **)(v1 + 16), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_181BE9134()
{
  return *(void *)(v0 + 32);
}

void (*sub_181BE913C(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 32);
  a1[1] = v1;
  return sub_181BE9154;
}

void sub_181BE9154(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  *(void *)(v1 + 32) = *a1;
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = 0xFFFFLL;
  if (v2 < 0xFFFF) {
    uint64_t v4 = v2;
  }
  nw_quic_connection_set_max_udp_payload_size(v3, v4 & ~(unsigned __int16)(v4 >> 63));
}

void sub_181BE9178(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(void *)(v4 + 40) = *a1;
  if (v3 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_data(*(void **)(v4 + 16), v3);
  }

void sub_181BE91F0(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  if (a1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_data(*(void **)(v1 + 16), a1);
  }

uint64_t sub_181BE9260()
{
  return *(void *)(v0 + 40);
}

void (*sub_181BE9268(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 40);
  a1[1] = v1;
  return sub_181BE9280;
}

void sub_181BE9280(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *(void *)(v2 + 40) = *a1;
  if (v1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_data(*(void **)(v2 + 16), v1);
  }

void sub_181BE92F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(void *)(v4 + 48) = *a1;
  if (v3 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(*(void **)(v4 + 16), v3);
  }

void sub_181BE936C(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  if (a1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(*(void **)(v1 + 16), a1);
  }

uint64_t sub_181BE93DC()
{
  return *(void *)(v0 + 48);
}

void (*sub_181BE93E4(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 48);
  a1[1] = v1;
  return sub_181BE93FC;
}

void sub_181BE93FC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *(void *)(v2 + 48) = *a1;
  if (v1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(*(void **)(v2 + 16), v1);
  }

void sub_181BE9470(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(void *)(v4 + 56) = *a1;
  if (v3 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_local(*(void **)(v4 + 16), v3);
  }

void sub_181BE94E8(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  if (a1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_local(*(void **)(v1 + 16), a1);
  }

uint64_t sub_181BE9558()
{
  return *(void *)(v0 + 56);
}

void (*sub_181BE9560(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 56);
  a1[1] = v1;
  return sub_181BE9578;
}

void sub_181BE9578(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *(void *)(v2 + 56) = *a1;
  if (v1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_bidirectional_local(*(void **)(v2 + 16), v1);
  }

void sub_181BE95EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(void *)(v4 + 64) = *a1;
  if (v3 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_unidirectional(*(void **)(v4 + 16), v3);
  }

void sub_181BE9664(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  if (a1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_unidirectional(*(void **)(v1 + 16), a1);
  }

uint64_t sub_181BE96D4()
{
  return *(void *)(v0 + 64);
}

void (*sub_181BE96DC(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 64);
  a1[1] = v1;
  return sub_181BE96F4;
}

void sub_181BE96F4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *(void *)(v2 + 64) = *a1;
  if (v1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_stream_data_unidirectional(*(void **)(v2 + 16), v1);
  }

void sub_181BE9768(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(void *)(v4 + 72) = *a1;
  if (v3 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_streams_bidirectional(*(void **)(v4 + 16), v3);
  }

void sub_181BE97E0(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  if (a1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_streams_bidirectional(*(void **)(v1 + 16), a1);
  }

uint64_t sub_181BE9850()
{
  return *(void *)(v0 + 72);
}

void (*sub_181BE9858(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 72);
  a1[1] = v1;
  return sub_181BE9870;
}

void sub_181BE9870(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *(void *)(v2 + 72) = *a1;
  if (v1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_streams_bidirectional(*(void **)(v2 + 16), v1);
  }

void sub_181BE98E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(void *)(v4 + 80) = *a1;
  if (v3 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_streams_unidirectional(*(void **)(v4 + 16), v3);
  }

void sub_181BE995C(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  if (a1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_streams_unidirectional(*(void **)(v1 + 16), a1);
  }

uint64_t sub_181BE99CC()
{
  return *(void *)(v0 + 80);
}

void (*sub_181BE99D4(void *a1))(uint64_t *a1)
{
  *a1 = *(void *)(v1 + 80);
  a1[1] = v1;
  return sub_181BE99EC;
}

void sub_181BE99EC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *(void *)(v2 + 80) = *a1;
  if (v1 < 0)
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_quic_connection_set_initial_max_streams_unidirectional(*(void **)(v2 + 16), v1);
  }

BOOL sub_181BE9A60(nw_protocol_options *a1)
{
  return sub_181BE9A6C(a1, (uint64_t (*)(void))nw_protocol_copy_quic_connection_definition);
}

BOOL sub_181BE9A6C(nw_protocol_options *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = nw_protocol_options_copy_definition(a1);
  uint64_t v4 = (nw_protocol_definition *)a2();
  BOOL is_equal = nw_protocol_definition_is_equal(v3, v4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolQUICConnection.Options.__deallocating_deinit()
{
  return sub_181BE9F50();
}

BOOL sub_181BE9ACC(void *a1)
{
  return nw_protocol_metadata_is_quic_connection(a1);
}

uint64_t sub_181BE9AE0()
{
  uint64_t result = (uint64_t)nw_quic_connection_copy_stream_metadata(*(void **)(v0 + 16));
  if (result)
  {
    uint64_t v2 = result;
    type metadata accessor for NWProtocolQUICConnection.Metadata();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v2;
  }

  return result;
}

uint64_t sub_181BE9B1C()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_connection_get_max_streams_unidirectional);
}

uint64_t sub_181BE9B28(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_connection_set_max_streams_unidirectional);
}

uint64_t sub_181BE9B34(uint64_t *a1)
{
  a1[1] = *(void *)(v1 + 16);
  uint64_t result = nw_quic_connection_get_max_streams_unidirectional();
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE9B74;
  }

  return result;
}

uint64_t sub_181BE9B74(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_connection_set_max_streams_unidirectional);
}

uint64_t sub_181BE9B80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  if ((*a1 & 0x8000000000000000LL) == 0) {
    return a5(*(void *)(*(void *)a2 + 16LL));
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181BE9BF4()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_connection_get_max_streams_bidirectional);
}

uint64_t sub_181BE9C00(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_connection_set_max_streams_bidirectional);
}

uint64_t sub_181BE9C0C(uint64_t *a1)
{
  a1[1] = *(void *)(v1 + 16);
  uint64_t result = nw_quic_connection_get_max_streams_bidirectional();
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = result;
    return (uint64_t)sub_181BE9C4C;
  }

  return result;
}

uint64_t sub_181BE9C4C(void *a1, uint64_t a2)
{
  return sub_181BE9C58(a1, a2, (uint64_t (*)(void))nw_quic_connection_set_max_streams_bidirectional);
}

uint64_t sub_181BE9C58(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if ((*a1 & 0x8000000000000000LL) == 0) {
    return a3(a1[1]);
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181BE9CC8()
{
  return sub_181BE9CD4((uint64_t (*)(void))nw_quic_connection_get_peer_idle_timeout);
}

uint64_t sub_181BE9CD4(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v1 + 16));
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_181BE9CF8()
{
  return nw_quic_connection_get_application_error(*(void **)(v0 + 16));
}

uint64_t sub_181BE9D00(uint64_t a1)
{
  return sub_181BE9D0C(a1, (uint64_t (*)(void, uint64_t))nw_quic_connection_close_with_error);
}

uint64_t sub_181BE9D0C(uint64_t a1, uint64_t (*a2)(void, uint64_t))
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    return a2(*(void *)(v2 + 16), a1);
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181BE9D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_181BE9D88((uint64_t (*)(void))nw_quic_connection_get_keepalive, a1);
}

uint64_t sub_181BE9D88@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16));
  uint64_t v5 = result;
  if ((_DWORD)result == 0xFFFF)
  {
    uint64_t v5 = 0LL;
    char v6 = 1;
  }

  else
  {
    char v6 = 0;
  }

  if ((_DWORD)result)
  {
    char v7 = v6;
  }

  else
  {
    uint64_t v5 = 1LL;
    char v7 = 1;
  }

  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_181BE9DE0(uint64_t a1)
{
  return sub_181BE9DEC(a1, (uint64_t (*)(void, uint64_t))nw_quic_connection_set_keepalive);
}

uint64_t sub_181BE9DEC(uint64_t a1, uint64_t (*a2)(void, uint64_t))
{
  uint64_t v4 = *(void *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v4) {
      uint64_t v5 = 0LL;
    }
    else {
      uint64_t v5 = 0xFFFFLL;
    }
    return a2(*(void *)(v2 + 16), v5);
  }

  else if (v4 >= 0xFFFF)
  {
    return a2(*(void *)(v2 + 16), 65534LL);
  }

  else if (v4 < 0)
  {
    uint64_t result = sub_18264F318();
    __break(1u);
  }

  else
  {
    return a2(*(void *)(v2 + 16), (unsigned __int16)*(void *)a1);
  }

  return result;
}

uint64_t (*sub_181BE9E9C(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  *(void *)(a1 + 16) = v1;
  unsigned int keepalive = nw_quic_connection_get_keepalive(*(void **)(v1 + 16));
  uint64_t v4 = keepalive;
  if (keepalive)
  {
    char v5 = 0;
  }

  else
  {
    uint64_t v4 = 1LL;
    char v5 = 1;
  }

  if (keepalive == 0xFFFF) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = v4;
  }
  if (keepalive == 0xFFFF) {
    char v7 = 1;
  }
  else {
    char v7 = v5;
  }
  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  return sub_181BE9F00;
}

uint64_t sub_181BE9F00(uint64_t *a1, uint64_t a2)
{
  return sub_181BE9F0C(a1, a2, (uint64_t (*)(uint64_t *))sub_181BE9DE0);
}

uint64_t sub_181BE9F0C(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t *))
{
  char v3 = *((_BYTE *)a1 + 8);
  uint64_t v5 = *a1;
  char v6 = v3;
  return a3(&v5);
}

uint64_t NWProtocolQUICConnection.Metadata.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t sub_181BE9F50()
{
  return swift_deallocClassInstance();
}

uint64_t NWProtocolQUICConnection.deinit()
{
  return v0;
}

uint64_t _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  nw_protocol_options_t options = nw_quic_create_options();
  *(void *)(v2 + 16) = options;
  nw_quic_clear_tls_application_protocols(options);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_retain();
    uint64_t v5 = a1 + 40;
    do
    {
      uint64_t v6 = sub_18264EACC();
      nw_quic_add_tls_application_protocol(options, (const char *)(v6 + 32));
      swift_release();
      v5 += 16LL;
      --v4;
    }

    while (v4);
    swift_release();
  }

  swift_bridgeObjectRelease();
  return v2;
}

void sub_181BEA02C(uint64_t a1)
{
  char v3 = *(void **)(v1 + 16);
  nw_quic_clear_tls_application_protocols(v3);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1 + 40;
    do
    {
      uint64_t v6 = sub_18264EACC();
      nw_quic_add_tls_application_protocol((nw_protocol_options_t)v3, (const char *)(v6 + 32));
      swift_release();
      v5 += 16LL;
      --v4;
    }

    while (v4);
  }

uint64_t sub_181BEA094()
{
  return swift_deallocObject();
}

uint64_t sub_181BEA0B8(uint64_t a1)
{
  return sub_181BE7CBC(a1, v1);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t type metadata accessor for NWProtocolQUICConnection.Options()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolQUICConnection.Metadata()
{
  return objc_opt_self();
}

unint64_t sub_181BEA11C()
{
  unint64_t result = qword_18C58C188;
  if (!qword_18C58C188)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolQUIC.Options.Direction,  &type metadata for NWProtocolQUIC.Options.Direction);
    atomic_store(result, (unint64_t *)&qword_18C58C188);
  }

  return result;
}

uint64_t sub_181BEA160()
{
  return MEMORY[0x18961A908];
}

unint64_t sub_181BEA170()
{
  unint64_t result = qword_18C58C190;
  if (!qword_18C58C190)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolQUICStream.Options.Direction,  &type metadata for NWProtocolQUICStream.Options.Direction);
    atomic_store(result, (unint64_t *)&qword_18C58C190);
  }

  return result;
}

uint64_t sub_181BEA1B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_181BE7BC8();
  *a1 = result;
  return result;
}

uint64_t sub_181BEA1DC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_181BEA02C(v0);
  return swift_bridgeObjectRelease();
}

BOOL sub_181BEA20C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_quic_get_stream_is_unidirectional(*(nw_protocol_options_t *)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181BEA238(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181BEA24C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_quic_get_stream_is_datagram(*(nw_protocol_options_t *)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181BEA278(BOOL *a1, uint64_t a2)
{
}

uint64_t sub_181BEA28C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_quic_get_idle_timeout(*(nw_protocol_options_t *)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181BEA2BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 >= 0xFFFFFFFFLL) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  nw_quic_set_idle_timeout(*(nw_protocol_options_t *)(*(void *)a2 + 16LL), v2 & ~(v2 >> 63));
}

uint64_t sub_181BEA2E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_quic_get_max_udp_payload_size(*(nw_protocol_options_t *)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181BEA310(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 >= 0xFFFF) {
    uint64_t v2 = 0xFFFFLL;
  }
  nw_quic_set_max_udp_payload_size(*(nw_protocol_options_t *)(*(void *)a2 + 16LL), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_181BEA334@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_get_initial_max_data, a2);
}

uint64_t sub_181BEA340(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80(a1, a2, a3, a4, (uint64_t (*)(void))nw_quic_set_initial_max_data);
}

uint64_t sub_181BEA35C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm( a1,  (uint64_t (*)(void))nw_quic_get_initial_max_stream_data_bidirectional_remote,  a2);
}

uint64_t sub_181BEA368(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80( a1,  a2,  a3,  a4,  (uint64_t (*)(void))nw_quic_set_initial_max_stream_data_bidirectional_remote);
}

uint64_t sub_181BEA384@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm( a1,  (uint64_t (*)(void))nw_quic_get_initial_max_stream_data_bidirectional_local,  a2);
}

uint64_t sub_181BEA390(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80( a1,  a2,  a3,  a4,  (uint64_t (*)(void))nw_quic_set_initial_max_stream_data_bidirectional_local);
}

uint64_t sub_181BEA3AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_get_initial_max_stream_data_unidirectional, a2);
}

uint64_t sub_181BEA3B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80( a1,  a2,  a3,  a4,  (uint64_t (*)(void))nw_quic_set_initial_max_stream_data_unidirectional);
}

uint64_t sub_181BEA3D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_get_initial_max_streams_bidirectional, a2);
}

uint64_t sub_181BEA3E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80(a1, a2, a3, a4, (uint64_t (*)(void))nw_quic_set_initial_max_streams_bidirectional);
}

uint64_t sub_181BEA3FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_get_initial_max_streams_unidirectional, a2);
}

uint64_t sub_181BEA408(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80(a1, a2, a3, a4, (uint64_t (*)(void))nw_quic_set_initial_max_streams_unidirectional);
}

uint64_t sub_181BEA424@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_quic_get_max_datagram_frame_size(*(nw_protocol_options_t *)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181BEA454(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE8518(a1, a2, a3, a4, (uint64_t (*)(void, void))nw_quic_set_max_datagram_frame_size);
}

uint64_t sub_181BEA470@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_quic_get_initial_packet_size(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181BEA4A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE8518(a1, a2, a3, a4, (uint64_t (*)(void, void))nw_quic_set_initial_packet_size);
}

uint64_t sub_181BEA4C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = nw_quic_get_stream_application_error(*(nw_protocol_metadata_t *)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181BEA4F0(uint64_t *a1, uint64_t a2)
{
}

uint64_t sub_181BEA504@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_get_local_max_streams_unidirectional, a2);
}

uint64_t sub_181BEA510(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80(a1, a2, a3, a4, (uint64_t (*)(void))nw_quic_set_local_max_streams_unidirectional);
}

uint64_t sub_181BEA52C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_get_local_max_streams_bidirectional, a2);
}

uint64_t sub_181BEA538(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80(a1, a2, a3, a4, (uint64_t (*)(void))nw_quic_set_local_max_streams_bidirectional);
}

uint64_t sub_181BEA554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_38Tm(a1, (uint64_t (*)(void))nw_quic_get_keepalive_interval, a2);
}

uint64_t sub_181BEA560(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_39Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))sub_181BE8CD0);
}

uint64_t sub_181BEA56C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(void *)result + 24LL);
  return result;
}

void sub_181BEA57C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  *(_BYTE *)(v3 + 24) = *a1;
  nw_quic_stream_set_is_unidirectional(*(void **)(v3 + 16), v2);
}

uint64_t sub_181BEA594@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = nw_quic_stream_get_application_error(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181BEA5C0(uint64_t *a1, uint64_t a2)
{
}

uint64_t sub_181BEA5D4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 24LL);
  return result;
}

void sub_181BEA5E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *(void *)(*a2 + 24) = *a1;
  if (v2 >= 0xFFFFFFFFLL) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  nw_quic_connection_set_idle_timeout(*(void **)(v3 + 16), v2 & ~(v2 >> 63));
}

uint64_t sub_181BEA60C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 32LL);
  return result;
}

void sub_181BEA61C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *(void *)(*a2 + 32) = *a1;
  if (v2 >= 0xFFFF) {
    uint64_t v2 = 0xFFFFLL;
  }
  nw_quic_connection_set_max_udp_payload_size(*(void **)(v3 + 16), v2 & ~(unsigned __int16)(v2 >> 63));
}

uint64_t sub_181BEA644@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 40LL);
  return result;
}

uint64_t sub_181BEA658@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 48LL);
  return result;
}

uint64_t sub_181BEA66C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 56LL);
  return result;
}

uint64_t sub_181BEA680@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 64LL);
  return result;
}

uint64_t sub_181BEA694@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 72LL);
  return result;
}

uint64_t sub_181BEA6A8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 80LL);
  return result;
}

uint64_t sub_181BEA6BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_connection_get_max_streams_unidirectional, a2);
}

uint64_t sub_181BEA6C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80( a1,  a2,  a3,  a4,  (uint64_t (*)(void))nw_quic_connection_set_max_streams_unidirectional);
}

uint64_t sub_181BEA6E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_14Tm(a1, (uint64_t (*)(void))nw_quic_connection_get_max_streams_bidirectional, a2);
}

uint64_t keypath_get_14Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*(void *)(*(void *)a1 + 16LL));
  if (result < 0) {
    __break(1u);
  }
  else {
    *a3 = result;
  }
  return result;
}

uint64_t sub_181BEA724(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181BE9B80(a1, a2, a3, a4, (uint64_t (*)(void))nw_quic_connection_set_max_streams_bidirectional);
}

uint64_t sub_181BEA740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_38Tm(a1, (uint64_t (*)(void))nw_quic_connection_get_keepalive, a2);
}

uint64_t keypath_get_38Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*(void *)(*(void *)a1 + 16LL));
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 0xFFFF)
    {
      uint64_t v5 = 0LL;
      char v6 = 1;
    }

    else
    {
      char v6 = 0;
      uint64_t v5 = result;
    }
  }

  else
  {
    uint64_t v5 = 1LL;
    char v6 = 1;
  }

  *(void *)a3 = v5;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t sub_181BEA7AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_39Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))sub_181BE9DE0);
}

uint64_t keypath_set_39Tm( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  char v5 = *((_BYTE *)a1 + 8);
  uint64_t v7 = *a1;
  char v8 = v5;
  return a5(&v7);
}

uint64_t type metadata accessor for NWProtocolQUIC()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolQUIC.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUIC.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.alpn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.alpn.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.alpn.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.direction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.direction.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.direction.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.isDatagram.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.isDatagram.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.isDatagram.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.idleTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.idleTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.idleTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxUDPPayloadSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxUDPPayloadSize.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxUDPPayloadSize.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxData.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxData.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalRemote.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalRemote.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalRemote.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalLocal.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalLocal.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataBidirectionalLocal.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataUnidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataUnidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamDataUnidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424LL))();
}

ValueMetadata *type metadata accessor for NWProtocolQUIC.Options.Direction()
{
  return &type metadata for NWProtocolQUIC.Options.Direction;
}

uint64_t initializeBufferWithCopyOfBuffer for NWProtocolQUIC.ApplicationError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NWProtocolQUIC.ApplicationError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for NWProtocolQUIC.ApplicationError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NWProtocolQUIC.ApplicationError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWProtocolQUIC.ApplicationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWProtocolQUIC.ApplicationError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWProtocolQUIC.ApplicationError()
{
  return &type metadata for NWProtocolQUIC.ApplicationError;
}

uint64_t type metadata accessor for NWProtocolQUIC.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUIC.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.securityProtocolMetadata.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.negotiatedALPN.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.streamIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.remoteIdleTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.applicationError.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.applicationError.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.streamApplicationErrorCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.streamApplicationErrorCode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.localMaxStreamsUnidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.localMaxStreamsUnidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.remoteMaxStreamsUnidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.usableDatagramFrameSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWProtocolQUIC.Metadata.KeepAliveBehavior(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NWProtocolQUIC.Metadata.KeepAliveBehavior( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_181BEAD00(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_181BEAD1C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for NWProtocolQUIC.Metadata.KeepAliveBehavior()
{
  return &type metadata for NWProtocolQUIC.Metadata.KeepAliveBehavior;
}

uint64_t type metadata accessor for NWProtocolQUICStream()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolQUICStream.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUICStream.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUICStream.Options.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t _s7Network14NWProtocolQUICC7OptionsC9DirectionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181BEADEC + 4 * byte_18265D9A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181BEAE20 + 4 * asc_18265D9A0[v4]))();
}

uint64_t sub_181BEAE20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BEAE28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BEAE30LL);
  }
  return result;
}

uint64_t sub_181BEAE3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BEAE44LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181BEAE48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BEAE50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolQUICStream.Options.Direction()
{
  return &type metadata for NWProtocolQUICStream.Options.Direction;
}

uint64_t type metadata accessor for NWProtocolQUICStream.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUICStream.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NWProtocolQUICConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolQUICConnection.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.securityProtocolOptions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.idleTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.idleTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.idleTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.maxUDPPayloadSize.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.maxUDPPayloadSize.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxData.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxData.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalRemote.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalRemote.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalRemote.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalLocal.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalLocal.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataBidirectionalLocal.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataUnidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataUnidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamDataUnidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsBidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsBidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsBidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsUnidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsUnidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Options.initialMaxStreamsUnidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552LL))();
}

uint64_t method lookup function for NWProtocolQUICConnection.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsUnidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsUnidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsBidirectional.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsBidirectional.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.maxStreamsBidirectional.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.applicationErrorCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.closeWithError(error:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.keepalive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of NWProtocolQUICConnection.Metadata.keepalive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

ValueMetadata *type metadata accessor for NWProtocolQUICConnection.Metadata.KeepaliveBehavior()
{
  return &type metadata for NWProtocolQUICConnection.Metadata.KeepaliveBehavior;
}

uint64_t sub_181BEB10C()
{
  uint64_t v0 = sub_18264E934();
  __swift_allocate_value_buffer(v0, qword_18C58C198);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_18C58C198);
  if (qword_18C58B270 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4A60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_181BEB19C()
{
  uint64_t v0 = sub_18264E934();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_18264E8D4();
  __swift_allocate_value_buffer(v4, qword_18C58C1B0);
  __swift_project_value_buffer(v4, (uint64_t)qword_18C58C1B0);
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)qword_18C58C198);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_18264E8BC();
}

uint64_t sub_181BEB284()
{
  uint64_t v0 = swift_allocObject();
  uint64_t result = NWActorSystem.init()();
  qword_18C58C1C8 = v0;
  return result;
}

uint64_t NWActorSystem.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  NWActorSystem.init()();
  return v0;
}

uint64_t static NWActorSystem.default.getter()
{
  return sub_181BE8D9C(&qword_18C58B128);
}

uint64_t NWActorSystem.disableCompression.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NWActorSystem.disableCompression.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*NWActorSystem.disableCompression.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_181BEB3B8(uint64_t a1)
{
  return sub_181BEB458(a1, &qword_18C58C3F8, &qword_18C58C1D0);
}

uint64_t static NWActorSystem.$remoteCallActivity.getter()
{
  return sub_181BE8D9C(&qword_18C58B130);
}

uint64_t static NWActorSystem.remoteCallActivity.getter()
{
  if (qword_18C58B130 != -1) {
    swift_once();
  }
  sub_18264F75C();
  return v1;
}

uint64_t sub_181BEB444(uint64_t a1)
{
  return sub_181BEB458(a1, &qword_18C58C378, &qword_18C58C1D8);
}

uint64_t sub_181BEB458(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = sub_18264F750();
  *a3 = result;
  return result;
}

uint64_t NWActorSystem.init()()
{
  uint64_t v1 = sub_18264F03C();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_18264F030();
  char v6 = (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8];
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = sub_18264E97C();
  MEMORY[0x1895F8858](v7);
  *(_BYTE *)(v0 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D790);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  uint64_t v9 = MEMORY[0x18961AFF0];
  *(void *)(v0 + 128) = v8;
  *(void *)(v0 + 136) = v9;
  *(void *)(v0 + 144) = v9;
  *(void *)(v0 + 152) = v9;
  *(void *)(v0 + 160) = 0LL;
  *(void *)(v0 + 168) = 0LL;
  *(_BYTE *)(v0 + 176) = 0;
  uint64_t v10 = MEMORY[0x18961AFE8];
  *(void *)(v0 + 184) = MEMORY[0x18961AFE8];
  *(void *)(v0 + 192) = v9;
  *(void *)(v0 + 200) = v9;
  sub_181BC91D0();
  sub_18264E970();
  v12[1] = v10;
  sub_181BF9814(&qword_18C58C1E8, 255LL, v6, MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D710);
  sub_181BEB6B8();
  sub_18264F108();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961B900], v1);
  *(void *)(v0 + 208) = sub_18264F060();
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(void *)(v0 + 120) = 0LL;
  return v0;
}

unint64_t sub_181BEB6B8()
{
  unint64_t result = qword_18C58C1F0;
  if (!qword_18C58C1F0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_18C58D710);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189618470], v1);
    atomic_store(result, (unint64_t *)&qword_18C58C1F0);
  }

  return result;
}

uint64_t NWActorSystem.__allocating_init(service:parameters:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  NWActorSystem.init(service:parameters:)(a1, a2);
  return v4;
}

void *NWActorSystem.init(service:parameters:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = (void *)v2;
  uint64_t v61 = a2;
  uint64_t v5 = sub_18264F03C();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_18264F030();
  uint64_t v10 = (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8];
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = sub_18264E97C();
  MEMORY[0x1895F8858](v11);
  uint64_t v60 = *a1;
  uint64_t v12 = *((void *)a1 + 1);
  uint64_t v58 = *((void *)a1 + 2);
  uint64_t v59 = v12;
  uint64_t v13 = *((void *)a1 + 3);
  uint64_t v56 = *((void *)a1 + 4);
  uint64_t v57 = v13;
  uint64_t v14 = *((void *)a1 + 5);
  uint64_t v54 = *((void *)a1 + 6);
  uint64_t v55 = v14;
  uint64_t v15 = *((void *)a1 + 7);
  uint64_t v52 = *((void *)a1 + 8);
  uint64_t v53 = v15;
  uint64_t v16 = *((void *)a1 + 9);
  uint64_t v50 = *((void *)a1 + 10);
  uint64_t v51 = v16;
  uint64_t v49 = a1[88];
  uint64_t v48 = *(unsigned __int16 *)(a1 + 89);
  *(_BYTE *)(v2 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D790);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  uint64_t v18 = MEMORY[0x18961AFF0];
  *(void *)(v2 + 128) = v17;
  *(void *)(v2 + 136) = v18;
  *(void *)(v2 + 144) = v18;
  *(void *)(v2 + 152) = v18;
  *(void *)(v2 + 160) = 0LL;
  *(void *)(v2 + 168) = 0LL;
  *(_BYTE *)(v2 + 176) = 0;
  unint64_t v19 = MEMORY[0x18961AFE8];
  *(void *)(v2 + 184) = MEMORY[0x18961AFE8];
  *(void *)(v2 + 192) = v18;
  *(void *)(v2 + 200) = v18;
  sub_181BC91D0();
  sub_18264E970();
  unint64_t v62 = v19;
  sub_181BF9814(&qword_18C58C1E8, 255LL, v10, MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D710);
  sub_181BEB6B8();
  sub_18264F108();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x18961B900], v5);
  *(void *)(v2 + 208) = sub_18264F060();
  uint64_t v20 = *(os_unfair_lock_s **)(v61 + 16);
  unint64_t v21 = v20 + 4;
  unint64_t v22 = v20 + 6;
  os_unfair_lock_lock(v20 + 6);
  sub_181C9AEC0(v21, (uint64_t *)&v62);
  os_unfair_lock_unlock(v22);
  unint64_t v23 = v62;
  if (qword_18C58B200 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_18C5A4A10;
  type metadata accessor for NWProtocolFramer.Options();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = nw_framer_create_options(*(nw_protocol_definition_t *)(v24 + 32));
  uint64_t v26 = *(os_unfair_lock_s **)(v23 + 16);
  char v27 = v26 + 4;
  uint64_t v28 = v26 + 6;
  os_unfair_lock_lock(v26 + 6);
  sub_181C99B48(v27, (uint64_t *)&v62);
  os_unfair_lock_unlock(v28);
  uint64_t v29 = *(void *)(v62 + 16);
  uint64_t v30 = (nw_protocol_stack **)(v29 + 16);
  unint64_t v31 = (os_unfair_lock_s *)(v29 + 24);
  swift_retain();
  os_unfair_lock_lock(v31);
  sub_181C994A0(v30, &v62);
  os_unfair_lock_unlock(v31);
  if (v62 >> 62 && (swift_bridgeObjectRetain(), uint64_t v47 = sub_18264F330(), swift_bridgeObjectRelease(), v47 < 0))
  {
    __break(1u);
  }

  else
  {
    sub_181BF70D8(0LL, 0LL, v25);
    unint64_t v32 = v62;
    os_unfair_lock_lock(v31);
    sub_181C99334(v30, v32);
    os_unfair_lock_unlock(v31);
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_18C58B118 == -1) {
      goto LABEL_5;
    }
  }

  swift_once();
LABEL_5:
  uint64_t v33 = sub_18264E934();
  __swift_project_value_buffer(v33, (uint64_t)qword_18C58C198);
  unint64_t v34 = (os_log_s *)sub_18264E91C();
  os_log_type_t v35 = sub_18264EFF4();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_181A5C000, v34, v35, "Inserted Actor WireProtocol framer", v36, 2u);
    MEMORY[0x186E12168](v36, -1LL, -1LL);
    swift_release();
  }

  else
  {

    swift_release();
  }

  uint64_t v38 = v59;
  uint64_t v37 = v60;
  uint64_t v40 = v57;
  uint64_t v39 = v58;
  uint64_t v41 = v56;
  swift_release();
  v3[3] = v37;
  v3[4] = v38;
  uint64_t v42 = v49 | (v48 << 8);
  v3[5] = v39;
  v3[6] = v40;
  uint64_t v43 = v55;
  v3[7] = v41;
  v3[8] = v43;
  uint64_t v44 = v53;
  v3[9] = v54;
  v3[10] = v44;
  uint64_t v45 = v51;
  v3[11] = v52;
  v3[12] = v45;
  v3[13] = v50;
  v3[14] = v42;
  v3[15] = v23;
  return v3;
}

uint64_t NWActorSystem.publish<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t sub_181BEBC50()
{
  __int128 v11 = *(_OWORD *)(v0 + 32);
  *(void *)(v0 + 16) = v11;
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getMetatypeMetadata();
  uint64_t v2 = sub_18264EAA8();
  uint64_t v4 = v3;
  *(void *)(v0 + 56) = v3;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  *(_OWORD *)(v5 + 16) = v11;
  *(void *)(v5 + 32) = v1;
  sub_181BEC2A4();
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v7;
  void v7[2] = sub_181BF7720;
  v7[3] = v5;
  v7[4] = v6;
  v7[5] = v2;
  void v7[6] = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v8;
  void v8[2] = v2;
  void v8[3] = v4;
  v8[4] = v6;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_181BEBDB0;
  return sub_18264F4F8();
}

uint64_t sub_181BEBDB0()
{
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }

  return swift_task_switch();
}

uint64_t sub_181BEBE24()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BEBE60()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BEBEAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (char *)a4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
  uint64_t v9 = *(void *)(a3 + 8);
  *a4 = a2;
  a4[1] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a1, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  type metadata accessor for NWActorSystem.ServerRole();
  swift_storeEnumTagMultiPayload();
  return swift_unknownObjectRetain();
}

uint64_t NWActorSystem.publishAndWaitForReady<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = type metadata accessor for NWActorSystem.ServerRole();
  _BYTE v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BEBFBC()
{
  v0[2] = v0[4];
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  swift_getMetatypeMetadata();
  uint64_t v5 = sub_18264EAA8();
  uint64_t v7 = v6;
  uint64_t v8 = (char *)v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
  uint64_t v9 = *(void *)(v3 + 8);
  *uint64_t v1 = v4;
  v1[1] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 1LL, 1LL, v10);
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = *(os_unfair_lock_s **)(v2 + 128);
  uint64_t v12 = (void *)swift_task_alloc();
  void v12[2] = v2;
  v12[3] = v5;
  void v12[4] = v7;
  v12[5] = v1;
  uint64_t v13 = swift_task_alloc();
  *(void *)(v13 + 16) = sub_181BF77FC;
  *(void *)(v13 + 24) = v12;
  v11 += 4;
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v11);
  (*(void (**)(void))(v13 + 16))();
  uint64_t v14 = v0[8];
  os_unfair_lock_unlock(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_181BC920C(v14, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
  swift_bridgeObjectRelease();
  sub_181BEC2A4();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[9] = v15;
  void *v15 = v0;
  v15[1] = sub_181BEC1D8;
  return sub_18264F594();
}

uint64_t sub_181BEC1D8()
{
  *(void *)(*(void *)v1 + 80LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BEC23C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BEC270()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_181BEC2A4()
{
  uint64_t v2 = v0;
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(v0 + 128) + 16LL);
  os_unfair_lock_lock(v3);
  if (*(void *)(v2 + 168) || (uint64_t v5 = *(void *)(v2 + 56)) == 0)
  {
    uint64_t v4 = v3;
LABEL_3:
    os_unfair_lock_unlock(v4);
    return;
  }

  lock = v3;
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v7 = *(void *)(v2 + 88);
  uint64_t v9 = *(void *)(v2 + 96);
  unint64_t v8 = *(void *)(v2 + 104);
  uint64_t v10 = *(void *)(v2 + 112);
  uint64_t v11 = *(void *)(v2 + 64);
  uint64_t v12 = *(void *)(v2 + 72);
  uint64_t v14 = *(void *)(v2 + 40);
  uint64_t v13 = *(void *)(v2 + 48);
  uint64_t v15 = *(void *)(v2 + 24);
  uint64_t v16 = *(void *)(v2 + 32);
  LOBYTE(v31[0]) = v15 & 1;
  v31[1] = v16;
  v31[2] = v14;
  v31[3] = v13;
  v31[4] = v5;
  v31[5] = v11;
  v31[6] = v12;
  v31[7] = v6;
  v31[8] = v7;
  v31[9] = v9;
  v31[10] = v8;
  char v32 = v10 & 1;
  __int16 v33 = v10 >> 8;
  sub_181BF9A00(v15, v16, v14, v13, v5, v11, v12, v6, v7, v9, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_181BD2FFC(v6);
  uint64_t v29 = v9;
  unint64_t v30 = v8;
  sub_181BE4844(v9, v8);
  swift_retain();
  sub_181BFE088((unsigned __int8 *)v31);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_181BD6288(v6);
    sub_181BE61C8(v9, v8);
    uint64_t v4 = lock;
    goto LABEL_3;
  }

  uint64_t v18 = v17;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_181BC904C((uint64_t)sub_181BF9A84);
  NWListener.newConnectionHandler.setter((uint64_t)sub_181BF9A84, v19);
  swift_release_n();
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_181BC904C((uint64_t)sub_181BF9A8C);
  NWListener.stateUpdateHandler.setter((uint64_t)sub_181BF9A8C, v20);
  swift_release_n();
  *(void *)(v2 + 168) = v18;
  swift_retain();
  swift_release();
  NWListener.start(queue:)(*(void **)(v2 + 208));
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_18264E934();
  __swift_project_value_buffer(v21, (uint64_t)qword_18C58C198);
  swift_retain_n();
  unint64_t v22 = (os_log_s *)sub_18264E91C();
  os_log_type_t v23 = sub_18264F018();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v31[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v34 = v18;
    type metadata accessor for NWListener();
    swift_retain();
    uint64_t v26 = sub_18264EAC0();
    uint64_t v34 = sub_181BF7900(v26, v27, v31);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v22, v23, "Starting listener: %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v25, -1LL, -1LL);
    MEMORY[0x186E12168](v24, -1LL, -1LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    sub_181BD6288(v6);
    sub_181BE61C8(v29, v30);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(v6);
    sub_181BE61C8(v29, v30);

    swift_release_n();
    swift_release();
  }

  os_unfair_lock_unlock(lock);
}

uint64_t NWActorSystem.publish<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[6] = a4;
  v5[7] = v4;
  void v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t sub_181BEC744()
{
  __int128 v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v0 + 16) = v11;
  swift_getMetatypeMetadata();
  __int128 v10 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = sub_18264EAA8();
  uint64_t v3 = v2;
  *(void *)(v0 + 64) = v2;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *(_OWORD *)(v4 + 16) = v11;
  *(_OWORD *)(v4 + 32) = v10;
  sub_181BEC2A4();
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  v6[2] = sub_181BF78B4;
  void v6[3] = v4;
  void v6[4] = v5;
  v6[5] = v1;
  v6[6] = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  void v7[2] = v1;
  v7[3] = v3;
  v7[4] = v5;
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v8;
  *unint64_t v8 = v0;
  v8[1] = sub_181BEC8A8;
  return sub_18264F4F8();
}

uint64_t sub_181BEC8A8()
{
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }

  return swift_task_switch();
}

uint64_t sub_181BEC91C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BEC958()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BEC9A4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v12 = (char *)a6 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
  uint64_t v13 = (uint64_t (*)())swift_allocObject();
  *((void *)v13 + 2) = a4;
  *((void *)v13 + 3) = a5;
  *((void *)v13 + 4) = a2;
  *((void *)v13 + 5) = a3;
  *a6 = sub_181BF78E4;
  a6[1] = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, a1, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  type metadata accessor for NWActorSystem.ServerRole();
  swift_storeEnumTagMultiPayload();
  return swift_retain();
}

uint64_t NWActorSystem.publishAndWaitForReady<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[6] = a4;
  v5[7] = v4;
  void v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = type metadata accessor for NWActorSystem.ServerRole();
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BECAE8()
{
  __int128 v17 = *(_OWORD *)(v0 + 40);
  *(void *)(v0 + 16) = v17;
  uint64_t v1 = *(uint64_t (***)())(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  swift_getMetatypeMetadata();
  uint64_t v5 = sub_18264EAA8();
  uint64_t v7 = v6;
  unint64_t v8 = (char *)v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v17;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v3;
  *uint64_t v1 = sub_181BF78E4;
  v1[1] = (uint64_t (*)())v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 1LL, 1LL, v10);
  swift_storeEnumTagMultiPayload();
  __int128 v11 = *(os_unfair_lock_s **)(v2 + 128);
  uint64_t v12 = (void *)swift_task_alloc();
  void v12[2] = v2;
  v12[3] = v5;
  void v12[4] = v7;
  v12[5] = v1;
  uint64_t v13 = swift_task_alloc();
  *(void *)(v13 + 16) = sub_181BF9C04;
  *(void *)(v13 + 24) = v12;
  v11 += 4;
  swift_retain();
  os_unfair_lock_lock(v11);
  (*(void (**)(void))(v13 + 16))();
  uint64_t v14 = *(void *)(v0 + 72);
  os_unfair_lock_unlock(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_181BC920C(v14, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
  swift_bridgeObjectRelease();
  sub_181BEC2A4();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v15;
  void *v15 = v0;
  v15[1] = sub_181BECD30;
  return sub_18264F594();
}

uint64_t sub_181BECD30()
{
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BECD94()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BECDC8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BECDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v14[-v8];
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a2 + 128) + 16LL);
  os_unfair_lock_lock(v10);
  sub_181BECF44(a2, a1, (uint64_t)v9);
  os_unfair_lock_unlock(v10);
  sub_181BE48BC((uint64_t)v9, (uint64_t)v7, qword_18C58C2B8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v7, 1LL, v11) == 1)
  {
    sub_181BDA0F0((uint64_t)v9, qword_18C58C2B8);
    return sub_181BDA0F0((uint64_t)v7, qword_18C58C2B8);
  }

  else
  {
    sub_18264ED84();
    sub_181BDA0F0((uint64_t)v9, qword_18C58C2B8);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v11);
  }

uint64_t sub_181BECF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  if (*(_BYTE *)(a1 + 176) == 1)
  {
    v10(a3, a2, v6);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a3, 0LL, 1LL, v6);
  }

  else
  {
    v10((uint64_t)v9, a2, v6);
    uint64_t v12 = (unint64_t *)(a1 + 184);
    swift_beginAccess();
    unint64_t v13 = *(void *)(a1 + 184);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 184) = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v13 = sub_181BC4C98(0, *(void *)(v13 + 16) + 1LL, 1, v13);
      unint64_t *v12 = v13;
    }

    unint64_t v16 = *(void *)(v13 + 16);
    unint64_t v15 = *(void *)(v13 + 24);
    if (v16 >= v15 >> 1)
    {
      unint64_t v13 = sub_181BC4C98(v15 > 1, v16 + 1, 1, v13);
      unint64_t *v12 = v13;
    }

    *(void *)(v13 + 16) = v16 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))( v13 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
    + *(void *)(v7 + 72) * v16,
      v9,
      v6);
    swift_endAccess();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1LL, 1LL, v6);
  }

uint64_t NWActorSystem.invalidateActor<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[1] = a1;
  sub_18264F18C();
  NWActorSystem.resignID(_:)((uint64_t)v4);
  return sub_181BC920C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NWActorID);
}

uint64_t NWActorSystem.resignID(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWActorID();
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v23 - v8;
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_18264E934();
  __swift_project_value_buffer(v10, (uint64_t)qword_18C58C198);
  sub_181BC9248(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v11 = (os_log_s *)sub_18264E91C();
  os_log_type_t v12 = sub_18264F018();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v29 = v25;
    uint64_t v26 = v2;
    *(_DWORD *)unint64_t v13 = 136315138;
    os_log_type_t v23 = v13 + 4;
    uint64_t v24 = v13;
    sub_181BC9248((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v27 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
    sub_18264F168();
    swift_bridgeObjectRelease();
    uint64_t v27 = 0x49726F746341574ELL;
    unint64_t v28 = 0xEA00000000002844LL;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264E688();
    sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v14 = v27;
    unint64_t v15 = v28;
    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v27 = sub_181BF7900(v14, v15, &v29);
    uint64_t v2 = v26;
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWActorID);
    unint64_t v16 = v24;
    _os_log_impl(&dword_181A5C000, v11, v12, "Resign actor: %s", v24, 0xCu);
    uint64_t v17 = v25;
    swift_arrayDestroy();
    MEMORY[0x186E12168](v17, -1LL, -1LL);
    MEMORY[0x186E12168](v16, -1LL, -1LL);
  }

  else
  {
    sub_181BC920C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }

  MEMORY[0x1895F8858](v18);
  *(&v23 - 2) = v2;
  *(&v23 - 1) = (uint8_t *)a1;
  uint64_t v20 = v19 + 4;
  os_unfair_lock_lock(v19 + 4);
  sub_181BF78E8(&v27);
  uint64_t v21 = v27;
  os_unfair_lock_unlock(v20);
  if (v21)
  {
    swift_retain();
    sub_181C3AAA8();
    swift_release();
  }

  sub_181BED960(*(void *)a1, *(void *)(a1 + 8), 0LL);
  return swift_release();
}

uint64_t sub_181BED528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  void v6[4] = a3;
  v6[5] = a4;
  void v6[2] = a1;
  void v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_181BED548()
{
  uint64_t v1 = *(void *)(v0 + 56);
  __int128 v5 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v5;
  *(void *)(v2 + 48) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  void *v3 = v0;
  v3[1] = sub_181BED604;
  return sub_18264F594();
}

uint64_t sub_181BED604()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181BED678()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BED6AC( uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for NWActorSystem.ServerRole();
  MEMORY[0x1895F8858](v11);
  unint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2(a1);
  uint64_t v14 = (os_unfair_lock_s *)(*(void *)(a4 + 128) + 16LL);
  os_unfair_lock_lock(v14);
  sub_181BF3EAC(a4, a5, a6, (uint64_t)v13);
  os_unfair_lock_unlock(v14);
  return sub_181BC920C( (uint64_t)v13,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
}

void sub_181BED7A4(uint64_t a1, unint64_t a2)
{
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_18264E934();
  __swift_project_value_buffer(v4, (uint64_t)qword_18C58C198);
  swift_bridgeObjectRetain_n();
  __int128 v5 = (os_log_s *)sub_18264E91C();
  os_log_type_t v6 = sub_18264F018();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_181BF7900(a1, a2, &v9);
    sub_18264F0CC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_181A5C000, v5, v6, "Publish task was canceled for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v8, -1LL, -1LL);
    MEMORY[0x186E12168](v7, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n();
  }

  sub_181BED960(a1, a2, 0LL);
}

void sub_181BED960(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v67 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v59 = (char *)&v57 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
  MEMORY[0x1895F8858](v11);
  unint64_t v62 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C390);
  MEMORY[0x1895F8858](v13);
  unint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t v64 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v60 = (uint64_t)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v63 = (uint64_t)&v57 - v19;
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_18264E934();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)qword_18C58C198);
  swift_bridgeObjectRetain_n();
  uint64_t v65 = v21;
  unint64_t v22 = (os_log_s *)sub_18264E91C();
  os_log_type_t v23 = sub_18264F018();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v58 = v16;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v61 = a1;
    unint64_t v25 = a2;
    uint64_t v26 = (uint8_t *)v24;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v57 = v15;
    uint64_t v28 = v27;
    uint64_t v69 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_181BF7900(v61, v25, &v69);
    uint64_t v16 = v58;
    sub_18264F0CC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_181A5C000, v22, v23, "Cleaning up server for %s", v26, 0xCu);
    swift_arrayDestroy();
    uint64_t v29 = v28;
    unint64_t v15 = v57;
    MEMORY[0x186E12168](v29, -1LL, -1LL);
    unint64_t v30 = v26;
    a2 = v25;
    a1 = v61;
    MEMORY[0x186E12168](v30, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v31 = v66;
  char v32 = (os_unfair_lock_s *)(*(void *)(v66 + 128) + 16LL);
  os_unfair_lock_lock(v32);
  sub_181BF6844(v31, a1, a2, (uint64_t)v15);
  os_unfair_lock_unlock(v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v15, 1LL, v16) != 1)
  {
    uint64_t v36 = (uint64_t)v15;
    uint64_t v37 = a1;
    uint64_t v38 = v63;
    sub_181BC928C(v36, v63, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    uint64_t v39 = v60;
    sub_181BC9248(v38, v60, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_release();
      uint64_t v40 = &qword_18C58C238;
    }

    else
    {
      swift_unknownObjectRelease();
      uint64_t v40 = &qword_18C58C218;
    }

    uint64_t v41 = (uint64_t)v62;
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v40);
    sub_181BE625C(v39 + *(int *)(v42 + 48), v41, qword_18C58C2B8);
    sub_181BF69A0(v37, a2);
    int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v41, 1LL, v6);
    if (a3)
    {
      if (!v43)
      {
        uint64_t v44 = v67;
        uint64_t v45 = v59;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v59, v41, v6);
        uint64_t v69 = (uint64_t)a3;
        id v46 = a3;
        sub_18264ED78();
LABEL_18:
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v6);
      }
    }

    else if (!v43)
    {
      uint64_t v44 = v67;
      uint64_t v45 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v59, v41, v6);
      sub_18264ED84();
      goto LABEL_18;
    }

    sub_181BC920C(v63, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    sub_181BDA0F0(v41, qword_18C58C2B8);
    goto LABEL_20;
  }

  sub_181BDA0F0((uint64_t)v15, &qword_18C58C390);
  __int16 v33 = (os_log_s *)sub_18264E91C();
  os_log_type_t v34 = sub_18264F000();
  if (os_log_type_enabled(v33, v34))
  {
    os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v35 = 0;
    _os_log_impl(&dword_181A5C000, v33, v34, "Attempting to clean up for untracked actor", v35, 2u);
    MEMORY[0x186E12168](v35, -1LL, -1LL);
  }

LABEL_20:
  os_unfair_lock_lock(v32);
  sub_181C4D620((void *(*)(uint64_t *__return_ptr))sub_181BF98D0, &v69);
  os_unfair_lock_unlock(v32);
  if (v69 == 1)
  {
    uint64_t v47 = (os_log_s *)sub_18264E91C();
    os_log_type_t v48 = sub_18264F018();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_181A5C000, v47, v48, "No more actors published, canceling listener", v49, 2u);
      MEMORY[0x186E12168](v49, -1LL, -1LL);
    }

    os_unfair_lock_lock(v32);
    sub_181BF9924(&v69);
    uint64_t v50 = v69;
    os_unfair_lock_unlock(v32);
    if (v50) {
      nw_listener_cancel(*(nw_listener_t *)(v50 + 24));
    }
    os_unfair_lock_lock(v32);
    sub_181BF9938(&v69);
    uint64_t v51 = v69;
    os_unfair_lock_unlock(v32);
    uint64_t v52 = *(void *)(v51 + 16);
    if (v52)
    {
      unint64_t v53 = v51 + ((*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
      uint64_t v54 = *(void *)(v67 + 72);
      uint64_t v55 = *(void (**)(char *, unint64_t, uint64_t))(v67 + 16);
      v55(v9, v53, v6);
      while (1)
      {
        if (a3)
        {
          uint64_t v69 = (uint64_t)a3;
          id v56 = a3;
          sub_18264ED78();
        }

        else
        {
          sub_18264ED84();
        }

        (*(void (**)(char *, uint64_t))(v67 + 8))(v9, v6);
        v53 += v54;
        if (!--v52) {
          break;
        }
        v55(v9, v53, v6);
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
  }

void NWActorSystem.endpoint<A>(for:)(uint64_t a1@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v1 + 128) + 16LL);
  os_unfair_lock_lock(v4);
  sub_181BF7EDC(&v8);
  if (v2)
  {
    os_unfair_lock_unlock(v4);
    __break(1u);
  }

  else
  {
    uint64_t v5 = v8;
    os_unfair_lock_unlock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 16);
      swift_retain();
      swift_release();
      sub_181BC9248( v6 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint,  a1,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      swift_release();
    }

    else
    {
      sub_181BF7EF8();
      swift_allocError();
      *(_OWORD *)uint64_t v7 = xmmword_18265DCA0;
      *(void *)(v7 + 16) = 0xB000000000000000LL;
      swift_willThrow();
    }
  }

uint64_t sub_181BEE128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (void *)((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v12[1] = a2;
  sub_18264F18C();
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 192) + 16LL) && (sub_181C8C0F8(v8), (v9 & 1) != 0)) {
    uint64_t v10 = swift_retain();
  }
  else {
    uint64_t v10 = 0LL;
  }
  *a3 = v10;
  swift_endAccess();
  return sub_181BC920C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWActorID);
}

void NWActorSystem.resolve<A>(id:as:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t)v4;
  uint64_t v31 = a3;
  uint64_t v9 = *v4;
  v29[3] = a2;
  void v29[4] = v9;
  uint64_t v10 = type metadata accessor for NWActorID();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  unint64_t v15 = (char *)v29 - v14;
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_18264E934();
  __swift_project_value_buffer(v16, (uint64_t)qword_18C58C198);
  unint64_t v30 = a1;
  sub_181BC9248((uint64_t)a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v17 = (os_log_s *)sub_18264E91C();
  os_log_type_t v18 = sub_18264EFF4();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v29[1] = a4;
    uint64_t v21 = v20;
    uint64_t v33 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    v29[2] = v5;
    sub_181BC9248((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v22 = sub_18264EAC0();
    uint64_t v32 = sub_181BF7900(v22, v23, &v33);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v24 = sub_18264F774();
    uint64_t v32 = sub_181BF7900(v24, v25, &v33);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v17, v18, "Resolving %s to %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v21, -1LL, -1LL);
    MEMORY[0x186E12168](v19, -1LL, -1LL);
  }

  else
  {
    sub_181BC920C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }

  uint64_t v26 = *(void *)(v6 + 128);
  uint64_t v27 = v31;
  sub_18264F09C();
  uint64_t v28 = (os_unfair_lock_s *)(v26 + ((*(unsigned int *)(*(void *)v26 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v28);
  sub_181BEE51C(v6, v30, v27, &v33);
  os_unfair_lock_unlock(v28);
}

void sub_181BEE51C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for NWActorID();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v11);
  unint64_t v15 = (char *)&v39 - v14;
  swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 136);
  if (*(void *)(v16 + 16) && (unint64_t v17 = sub_181C8C0F8(a2), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
    swift_endAccess();
    uint64_t v20 = MEMORY[0x186E1224C](v19 + 16);
    if (v20)
    {
      uint64_t v21 = *(void *)(v19 + 24);
      v44[0] = v20;
      v44[1] = v21;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D640);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_release();
        *a4 = v45;
        return;
      }
    }

    else
    {
      swift_retain();
    }

    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3C8);
    sub_181BF7EF8();
    swift_allocError();
    uint64_t *v38 = v37;
    v38[1] = a3;
    v38[2] = 0LL;
    swift_willThrow();
    swift_release();
  }

  else
  {
    swift_endAccess();
    if (qword_18C58B138 != -1) {
      swift_once();
    }
    sub_18264F75C();
    uint64_t v22 = v44[0];
    if (v44[0])
    {
      if (qword_18C58B118 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_18264E934();
      __swift_project_value_buffer(v23, (uint64_t)qword_18C58C198);
      sub_181BC9248((uint64_t)a2, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NWActorID);
      swift_retain_n();
      uint64_t v24 = (os_log_s *)sub_18264E91C();
      os_log_type_t v25 = sub_18264F018();
      int v42 = v25;
      BOOL v26 = os_log_type_enabled(v24, v25);
      int v43 = a4;
      if (v26)
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v41 = v4;
        uint64_t v28 = v27;
        uint64_t v40 = swift_slowAlloc();
        v44[0] = v40;
        *(_DWORD *)uint64_t v28 = 136315394;
        sub_181BC9248((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWActorID);
        uint64_t v29 = sub_18264EAC0();
        uint64_t v45 = sub_181BF7900(v29, v30, v44);
        sub_18264F0CC();
        swift_bridgeObjectRelease();
        sub_181BC920C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NWActorID);
        *(_WORD *)(v28 + 12) = 2080;
        uint64_t v45 = v22;
        _s15ActorConnectionCMa(0LL);
        swift_retain();
        uint64_t v31 = sub_18264EAC0();
        uint64_t v45 = sub_181BF7900(v31, v32, v44);
        sub_18264F0CC();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_181A5C000, v24, (os_log_type_t)v42, "Associating actor %s to %s", (uint8_t *)v28, 0x16u);
        uint64_t v33 = v40;
        swift_arrayDestroy();
        MEMORY[0x186E12168](v33, -1LL, -1LL);
        uint64_t v34 = v28;
        uint64_t v5 = v41;
        MEMORY[0x186E12168](v34, -1LL, -1LL);
      }

      else
      {
        sub_181BC920C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NWActorID);
        swift_release_n();
      }

      os_log_type_t v35 = (os_unfair_lock_s *)(*(void *)(v22 + 80) + 16LL);
      os_unfair_lock_lock(v35);
      sub_181C3DEFC(v22, (uint64_t)a2);
      os_unfair_lock_unlock(v35);
      if (v5)
      {
        __break(1u);
      }

      else
      {
        sub_181BC9248((uint64_t)a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWActorID);
        swift_beginAccess();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v45 = *(void *)(a1 + 192);
        *(void *)(a1 + 192) = 0x8000000000000000LL;
        sub_181C8FD44(v22, v13, isUniquelyReferenced_nonNull_native);
        *(void *)(a1 + 192) = v45;
        swift_bridgeObjectRelease();
        sub_181BC920C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWActorID);
        swift_endAccess();
        swift_release();
        *int v43 = 0LL;
      }
    }

    else
    {
      *a4 = 0LL;
    }
  }

uint64_t sub_181BEE9F0()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  MEMORY[0x1895F8858](v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_18264E688();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3C0);
  swift_allocObject();
  uint64_t result = sub_18264F750();
  qword_18C58C1E0 = result;
  return result;
}

uint64_t NWActorSystem.assignID<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_18264E688();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v13 - v10;
  if (qword_18C58B140 != -1) {
    swift_once();
  }
  sub_18264F75C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_181BDA0F0((uint64_t)v4, &qword_18C58C0D0);
    sub_18264E67C();
    return sub_181C52C6C((uint64_t)v9, a1);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    sub_181C52C6C((uint64_t)v9, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }

void NWActorSystem.actorReady<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v3 + 128) + 16LL);
  os_unfair_lock_lock(v7);
  sub_181BEECAC(v3, a1, a2, a3);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_181BEECAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (void *)((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v13[1] = a2;
  sub_18264F18C();
  type metadata accessor for WeakDistributedActor();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 24) = 0LL;
  swift_unknownObjectWeakInit();
  *(void *)(v10 + 24) = a4;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0x8000000000000000LL;
  sub_181C8FD50(v10, v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 136) = v13[0];
  swift_bridgeObjectRelease();
  sub_181BC920C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWActorID);
  return swift_endAccess();
}

uint64_t sub_181BEEDE8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C370);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  swift_beginAccess();
  sub_181C8CAD0(a2);
  swift_endAccess();
  swift_release();
  sub_181BC9248((uint64_t)a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v12 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 1LL, 1LL, v12);
  swift_beginAccess();
  sub_181C350E8((uint64_t)v8, v11);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v13 = sub_181C8CBC8(a2);
  swift_endAccess();
  sub_181BD25B8(v13);
  if (!*(void *)(*(void *)(a1 + 136) + 16LL))
  {
    if (*(void *)(a1 + 160))
    {
      swift_retain();
      sub_181C1CBB4();
      swift_release();
    }

    *(void *)(a1 + 160) = 0LL;
    swift_release();
  }

  swift_beginAccess();
  *a3 = sub_181C8CABC(a2);
  return swift_endAccess();
}

Network::NWActorSystemInvocationEncoder __swiftcall NWActorSystem.makeInvocationEncoder()()
{
  uint64_t v1 = MEMORY[0x18961AFE8];
  *uint64_t v0 = MEMORY[0x18961AFE8];
  v0[1] = v1;
  return result;
}

uint64_t NWActorSystem.remoteCall<A, B, C>(on:target:invocation:throwing:returning:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[21] = v17;
  v9[22] = v8;
  v9[19] = v15;
  v9[20] = v16;
  v9[17] = a7;
  v9[18] = a8;
  v9[15] = a3;
  v9[16] = a4;
  v9[13] = a1;
  v9[14] = a2;
  v9[23] = swift_conformsToProtocol();
  v9[24] = swift_conformsToProtocol();
  uint64_t v10 = sub_18264E8E0();
  v9[25] = v10;
  v9[26] = *(void *)(v10 - 8);
  v9[27] = swift_task_alloc();
  v9[28] = swift_task_alloc();
  v9[29] = swift_task_alloc();
  uint64_t v11 = sub_18264E8B0();
  v9[30] = v11;
  v9[31] = *(void *)(v11 - 8);
  v9[32] = swift_task_alloc();
  v9[33] = swift_task_alloc();
  v9[34] = swift_task_alloc();
  v9[35] = swift_task_alloc();
  v9[36] = swift_task_alloc();
  v9[37] = type metadata accessor for NWActorID();
  v9[38] = swift_task_alloc();
  v9[39] = swift_task_alloc();
  uint64_t v12 = sub_18264E6D0();
  v9[40] = v12;
  v9[41] = *(void *)(v12 - 8);
  v9[42] = swift_task_alloc();
  v9[43] = swift_task_alloc();
  v9[44] = swift_task_alloc();
  uint64_t v13 = sub_18264E688();
  v9[45] = v13;
  v9[46] = *(void *)(v13 - 8);
  v9[47] = swift_task_alloc();
  v9[48] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BEF1BC()
{
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v88 = *(void *)(v0 + 344);
  uint64_t v9 = sub_18264E934();
  __swift_project_value_buffer(v9, (uint64_t)qword_18C58C198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v10(v5, v8, v7);
  uint64_t v11 = v88;
  uint64_t v89 = v10;
  v10(v11, v8, v7);
  swift_unknownObjectRetain_n();
  uint64_t v12 = (os_log_s *)sub_18264E91C();
  os_log_type_t v13 = sub_18264F018();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 352);
  uint64_t v18 = *(void *)(v0 + 360);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 328);
  if (v14)
  {
    uint64_t v83 = *(void *)(v0 + 328);
    uint64_t v85 = *(void *)(v0 + 344);
    uint64_t v22 = *(void *)(v0 + 312);
    uint64_t v75 = *(void *)(v0 + 112);
    uint64_t v79 = *(void *)(v0 + 352);
    uint64_t v23 = swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    uint64_t v90 = v87;
    *(_DWORD *)uint64_t v23 = 136315906;
    sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v24 = sub_18264F480();
    os_log_type_t type = v13;
    *(void *)(v0 + 64) = sub_181BF7900(v24, v25, &v90);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v18);
    *(_WORD *)(v23 + 12) = 2080;
    *(void *)(v0 + 72) = v75;
    sub_18264F18C();
    swift_unknownObjectRelease();
    uint64_t v91 = 0LL;
    unint64_t v92 = 0xE000000000000000LL;
    sub_18264F168();
    swift_bridgeObjectRelease();
    uint64_t v91 = 0x49726F746341574ELL;
    unint64_t v92 = 0xEA00000000002844LL;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v27 = v91;
    unint64_t v26 = v92;
    sub_181BC920C(v22, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(void *)(v0 + 80) = sub_181BF7900(v27, v26, &v90);
    sub_18264F0CC();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2080;
    sub_181BF9814(&qword_18C58C260, 255LL, (uint64_t (*)(uint64_t))MEMORY[0x18961BA90], MEMORY[0x18961BA98]);
    uint64_t v28 = sub_18264F480();
    *(void *)(v0 + 88) = sub_181BF7900(v28, v29, &v90);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    unint64_t v30 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v30(v79, v20);
    *(_WORD *)(v23 + 32) = 2080;
    uint64_t v31 = sub_18264E6C4();
    *(void *)(v0 + 96) = sub_181BF7900(v31, v32, &v90);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    v30(v85, v20);
    _os_log_impl(&dword_181A5C000, v12, type, "Call %s: %s, target: %s, target.identifier: %s", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v87, -1LL, -1LL);
    MEMORY[0x186E12168](v23, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v18);
    swift_unknownObjectRelease();
    unint64_t v30 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v30(v17, v20);
    v30(v19, v20);
  }

  if (qword_18C58B120 != -1) {
    swift_once();
  }
  uint64_t v33 = *(void *)(v0 + 336);
  uint64_t v34 = *(void *)(v0 + 320);
  uint64_t v35 = *(void *)(v0 + 120);
  uint64_t v36 = sub_18264E8D4();
  *(void *)(v0 + 392) = __swift_project_value_buffer(v36, (uint64_t)qword_18C58C1B0);
  sub_18264E8C8();
  sub_18264E88C();
  v89(v33, v35, v34);
  swift_unknownObjectRetain_n();
  uint64_t v37 = (os_log_s *)sub_18264E8C8();
  os_signpost_type_t v38 = sub_18264F078();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v39 = *(void *)(v0 + 336);
    uint64_t v40 = *(void *)(v0 + 312);
    uint64_t v80 = *(void *)(v0 + 280);
    uint64_t v86 = *(void *)(v0 + 248);
    uint64_t v84 = *(void *)(v0 + 240);
    uint64_t v77 = *(void *)(v0 + 320);
    uint64_t v76 = *(void *)(v0 + 112);
    (*(void (**)(void))(v86 + 16))();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    uint64_t v90 = v81;
    *(_DWORD *)uint64_t v41 = 136315394;
    uint64_t v42 = sub_18264E6C4();
    os_signpost_type_t v78 = v38;
    *(void *)(v0 + 40) = sub_181BF7900(v42, v43, &v90);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    v30(v39, v77);
    *(_WORD *)(v41 + 12) = 2080;
    *(void *)(v0 + 48) = v76;
    sub_18264F18C();
    swift_unknownObjectRelease();
    uint64_t v91 = 0LL;
    unint64_t v92 = 0xE000000000000000LL;
    sub_18264F168();
    swift_bridgeObjectRelease();
    uint64_t v91 = 0x49726F746341574ELL;
    unint64_t v92 = 0xEA00000000002844LL;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v45 = v91;
    unint64_t v44 = v92;
    sub_181BC920C(v40, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(void *)(v0 + 56) = sub_181BF7900(v45, v44, &v90);
    sub_18264F0CC();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    os_signpost_id_t v46 = sub_18264E898();
    _os_signpost_emit_with_name_impl( &dword_181A5C000,  v37,  v78,  v46,  "remoteCall",  "Call to %s, actor: %s",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v81, -1LL, -1LL);
    MEMORY[0x186E12168](v41, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v80, v84);
  }

  else
  {
    uint64_t v47 = *(void *)(v0 + 336);
    uint64_t v48 = *(void *)(v0 + 320);

    swift_unknownObjectRelease();
    v30(v47, v48);
    swift_unknownObjectRelease();
  }

  uint64_t v50 = *(void *)(v0 + 280);
  uint64_t v49 = *(void *)(v0 + 288);
  uint64_t v51 = *(void *)(v0 + 240);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 248) + 16LL);
  *(void *)(v0 + 400) = v52;
  v52(v50, v49, v51);
  sub_18264E904();
  swift_allocObject();
  *(void *)(v0 + 408) = sub_18264E8F8();
  if (qword_18C58B130 != -1) {
    swift_once();
  }
  uint64_t v53 = *(void *)(v0 + 304);
  uint64_t v54 = *(void *)(v0 + 176);
  uint64_t v55 = *(void *)(v0 + 112);
  sub_18264F75C();
  uint64_t v56 = *(void *)(v0 + 16);
  _s18RemoteCallActivityCMa();
  swift_allocObject();
  uint64_t v57 = sub_181C27924(v56);
  *(void *)(v0 + 416) = v57;
  *(void *)(v0 + 24) = v55;
  sub_18264F18C();
  uint64_t v58 = *(os_unfair_lock_s **)(v54 + 128);
  uint64_t v59 = (void *)swift_task_alloc();
  v59[2] = v54;
  v59[3] = v53;
  v59[4] = v57;
  uint64_t v60 = swift_task_alloc();
  *(void *)(v60 + 16) = sub_181BF7F3C;
  *(void *)(v60 + 24) = v59;
  uint64_t v61 = v58 + 4;
  os_unfair_lock_lock(v58 + 4);
  (*(void (**)(uint64_t *__return_ptr))(v60 + 16))(&v91);
  uint64_t v62 = *(void *)(v0 + 304);
  uint64_t v63 = v91;
  *(void *)(v0 + 424) = v91;
  os_unfair_lock_unlock(v61);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_181BC920C(v62, (uint64_t (*)(void))type metadata accessor for NWActorID);
  if (qword_18C58B138 != -1) {
    swift_once();
  }
  uint64_t v64 = *(void *)(v0 + 384);
  uint64_t v66 = *(void *)(v0 + 168);
  uint64_t v65 = *(void *)(v0 + 176);
  uint64_t v67 = *(void *)(v0 + 128);
  *(void *)(v0 + 32) = v63;
  uint64_t v68 = swift_task_alloc();
  *(void *)(v0 + 432) = v68;
  __int128 v69 = *(_OWORD *)(v0 + 152);
  __int128 v70 = *(_OWORD *)(v0 + 184);
  __int128 v71 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v68 + 16) = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v68 + 32) = v69;
  *(void *)(v68 + 48) = v66;
  *(_OWORD *)(v68 + 56) = v70;
  *(void *)(v68 + 72) = v63;
  *(void *)(v68 + 80) = v65;
  *(void *)(v68 + 88) = v64;
  *(_OWORD *)(v68 + 96) = v71;
  *(void *)(v68 + 112) = v67;
  *(void *)(v68 + 120) = v57;
  swift_retain();
  uint64_t v72 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v72;
  *uint64_t v72 = v0;
  v72[1] = sub_181BEFEC8;
  uint64_t v73 = *(void *)(v0 + 152);
  uint64_t v93 = 298LL;
  uint64_t v94 = v73;
  return sub_18264F768();
}

uint64_t sub_181BEFEC8()
{
  *(void *)(*(void *)v1 + 448LL) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BEFF40()
{
  uint64_t v1 = (os_log_s *)sub_18264E8C8();
  sub_18264E8EC();
  os_signpost_type_t v2 = sub_18264F06C();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 208);
    swift_retain();
    sub_18264E910();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v3, v4) == *MEMORY[0x18961D198])
    {
      uint64_t v6 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 208) + 8LL))( *(void *)(v0 + 224),  *(void *)(v0 + 200));
      uint64_t v6 = "";
    }

    uint64_t v7 = (uint64_t *)(v0 + 280);
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 248);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 400))(*(void *)(v0 + 280), v10, v12);
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v13 = 0;
    os_signpost_id_t v14 = sub_18264E898();
    _os_signpost_emit_with_name_impl(&dword_181A5C000, v1, v2, v14, "remoteCall", v6, v13, 2u);
    MEMORY[0x186E12168](v13, -1LL, -1LL);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }

  else
  {
    uint64_t v7 = (uint64_t *)(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 248);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }

  uint64_t v15 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 360);
  uint64_t v17 = *(void *)(v0 + 368);
  uint64_t v18 = *(void *)(v0 + 288);
  uint64_t v19 = *(void *)(v0 + 240);
  v9(*v7, v19);
  swift_release();
  v9(v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF01D4()
{
  uint64_t v1 = (os_log_s *)sub_18264E8C8();
  sub_18264E8EC();
  os_signpost_type_t v2 = sub_18264F06C();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 200);
    swift_retain();
    sub_18264E910();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5) == *MEMORY[0x18961D198])
    {
      uint64_t v6 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 208) + 8LL))( *(void *)(v0 + 216),  *(void *)(v0 + 200));
      uint64_t v6 = "";
    }

    uint64_t v7 = (uint64_t *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v12 = *(void *)(v0 + 240);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 400))(*(void *)(v0 + 280), v10, v12);
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v13 = 0;
    os_signpost_id_t v14 = sub_18264E898();
    _os_signpost_emit_with_name_impl(&dword_181A5C000, v1, v2, v14, "remoteCall", v6, v13, 2u);
    MEMORY[0x186E12168](v13, -1LL, -1LL);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }

  else
  {
    uint64_t v7 = (uint64_t *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 248);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }

  uint64_t v15 = *v7;
  uint64_t v16 = *(void *)(v0 + 384);
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v19 = *(void *)(v0 + 288);
  uint64_t v20 = *(void *)(v0 + 240);
  v9(v15, v20);
  swift_release();
  v9(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF0470( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE v8[16] = v13;
  v8[17] = v14;
  v8[14] = v11;
  v8[15] = v12;
  v8[12] = a8;
  v8[13] = v10;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  void v8[6] = a2;
  v8[7] = a3;
  void v8[5] = a1;
  type metadata accessor for NWActorID();
  v8[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BF04EC()
{
  uint64_t v1 = *(uint64_t **)(v0 + 88);
  *(void *)(v0 + 32) = *(void *)(v0 + 72);
  sub_18264F18C();
  uint64_t v2 = *v1;
  *(void *)(v0 + 152) = *v1;
  uint64_t v3 = v1[1];
  *(void *)(v0 + 160) = v3;
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v4;
  void *v4 = v0;
  v4[1] = sub_181BF05B4;
  return sub_181C3B0C4( *(void *)(v0 + 40),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 144),  *(void *)(v0 + 80),  (_OWORD *)(v0 + 16),  *(void *)(v0 + 112),  *(void *)(v0 + 96));
}

uint64_t sub_181BF05B4()
{
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_181BC920C(v2, (uint64_t (*)(void))type metadata accessor for NWActorID);
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_181BF0664()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWActorSystem.remoteCallVoid<A, B>(on:target:invocation:throwing:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[19] = a7;
  v8[20] = v7;
  v8[17] = a3;
  v8[18] = a5;
  v8[15] = a1;
  _BYTE v8[16] = a2;
  uint64_t v9 = sub_18264E8E0();
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  v8[25] = swift_task_alloc();
  uint64_t v10 = sub_18264E8B0();
  v8[26] = v10;
  v8[27] = *(void *)(v10 - 8);
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = swift_task_alloc();
  v8[32] = swift_task_alloc();
  v8[33] = type metadata accessor for NWActorID();
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  v8[36] = swift_task_alloc();
  uint64_t v11 = sub_18264E6D0();
  v8[37] = v11;
  v8[38] = *(void *)(v11 - 8);
  v8[39] = swift_task_alloc();
  v8[40] = swift_task_alloc();
  v8[41] = swift_task_alloc();
  uint64_t v12 = sub_18264E688();
  v8[42] = v12;
  v8[43] = *(void *)(v12 - 8);
  v8[44] = swift_task_alloc();
  v8[45] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BF0834()
{
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v82 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v9 = sub_18264E934();
  __swift_project_value_buffer(v9, (uint64_t)qword_18C58C198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v10(v5, v8, v7);
  uint64_t v11 = v82;
  uint64_t v83 = v10;
  v10(v11, v8, v7);
  swift_unknownObjectRetain_n();
  uint64_t v12 = (os_log_s *)sub_18264E91C();
  os_log_type_t v13 = sub_18264F018();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v15 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 336);
  uint64_t v18 = *(void *)(v0 + 320);
  uint64_t v19 = *(void *)(v0 + 296);
  uint64_t v80 = *(void *)(v0 + 304);
  uint64_t v81 = *(void *)(v0 + 328);
  if (v14)
  {
    uint64_t v74 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 288);
    uint64_t v68 = *(void *)(v0 + 120);
    uint64_t v71 = *(void *)(v0 + 296);
    uint64_t v21 = swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    uint64_t v84 = v77;
    *(_DWORD *)uint64_t v21 = 136315906;
    os_log_type_t type = v13;
    sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v22 = sub_18264F480();
    *(void *)(v0 + 80) = sub_181BF7900(v22, v23, &v84);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    *(_WORD *)(v21 + 12) = 2080;
    *(void *)(v0 + 88) = v68;
    sub_18264F18C();
    swift_unknownObjectRelease();
    uint64_t v85 = 0LL;
    unint64_t v86 = 0xE000000000000000LL;
    sub_18264F168();
    swift_bridgeObjectRelease();
    uint64_t v85 = 0x49726F746341574ELL;
    unint64_t v86 = 0xEA00000000002844LL;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v25 = v85;
    unint64_t v24 = v86;
    sub_181BC920C(v20, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(void *)(v0 + 96) = sub_181BF7900(v25, v24, &v84);
    sub_18264F0CC();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    sub_181BF9814(&qword_18C58C260, 255LL, (uint64_t (*)(uint64_t))MEMORY[0x18961BA90], MEMORY[0x18961BA98]);
    uint64_t v26 = sub_18264F480();
    *(void *)(v0 + 104) = sub_181BF7900(v26, v27, &v84);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v28(v81, v71);
    *(_WORD *)(v21 + 32) = 2080;
    uint64_t v29 = sub_18264E6C4();
    *(void *)(v0 + 112) = sub_181BF7900(v29, v30, &v84);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    v28(v74, v71);
    _os_log_impl(&dword_181A5C000, v12, type, "Call %s: %s, target: %s, target.identifier: %s", (uint8_t *)v21, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v77, -1LL, -1LL);
    MEMORY[0x186E12168](v21, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_unknownObjectRelease();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v28(v81, v19);
    v28(v18, v19);
  }

  if (qword_18C58B120 != -1) {
    swift_once();
  }
  uint64_t v31 = *(void *)(v0 + 312);
  uint64_t v32 = *(void *)(v0 + 296);
  uint64_t v33 = *(void *)(v0 + 128);
  uint64_t v34 = sub_18264E8D4();
  *(void *)(v0 + 368) = __swift_project_value_buffer(v34, (uint64_t)qword_18C58C1B0);
  sub_18264E8C8();
  sub_18264E88C();
  v83(v31, v33, v32);
  swift_unknownObjectRetain_n();
  uint64_t v35 = (os_log_s *)sub_18264E8C8();
  os_signpost_type_t v36 = sub_18264F078();
  if ((sub_18264F090() & 1) != 0)
  {
    os_signpost_type_t typea = v36;
    uint64_t v37 = *(void *)(v0 + 312);
    uint64_t v38 = *(void *)(v0 + 288);
    uint64_t v72 = *(void *)(v0 + 248);
    uint64_t v78 = *(void *)(v0 + 208);
    os_log_t log = *(os_log_t *)(v0 + 216);
    uint64_t v70 = *(void *)(v0 + 296);
    uint64_t v69 = *(void *)(v0 + 120);
    (*((void (**)(void))log + 2))();
    uint64_t v39 = v28;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v84 = v73;
    *(_DWORD *)uint64_t v40 = 136315394;
    uint64_t v41 = sub_18264E6C4();
    *(void *)(v0 + 56) = sub_181BF7900(v41, v42, &v84);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    v39(v37, v70);
    *(_WORD *)(v40 + 12) = 2080;
    *(void *)(v0 + 64) = v69;
    sub_18264F18C();
    swift_unknownObjectRelease();
    uint64_t v85 = 0LL;
    unint64_t v86 = 0xE000000000000000LL;
    sub_18264F168();
    swift_bridgeObjectRelease();
    uint64_t v85 = 0x49726F746341574ELL;
    unint64_t v86 = 0xEA00000000002844LL;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v43 = v85;
    unint64_t v44 = v86;
    sub_181BC920C(v38, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(void *)(v0 + 72) = sub_181BF7900(v43, v44, &v84);
    sub_18264F0CC();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    os_signpost_id_t v45 = sub_18264E898();
    _os_signpost_emit_with_name_impl( &dword_181A5C000,  v35,  typea,  v45,  "remoteCallVoid",  "Call to %s, actor: %s",  (uint8_t *)v40,  0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v73, -1LL, -1LL);
    MEMORY[0x186E12168](v40, -1LL, -1LL);

    (*((void (**)(uint64_t, uint64_t))log + 1))(v72, v78);
  }

  else
  {
    uint64_t v46 = *(void *)(v0 + 312);
    uint64_t v47 = *(void *)(v0 + 296);

    swift_unknownObjectRelease();
    v28(v46, v47);
    swift_unknownObjectRelease();
  }

  uint64_t v49 = *(void *)(v0 + 248);
  uint64_t v48 = *(void *)(v0 + 256);
  uint64_t v50 = *(void *)(v0 + 208);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 216) + 16LL);
  *(void *)(v0 + 376) = v51;
  v51(v49, v48, v50);
  sub_18264E904();
  swift_allocObject();
  *(void *)(v0 + 384) = sub_18264E8F8();
  if (qword_18C58B130 != -1) {
    swift_once();
  }
  uint64_t v52 = *(void *)(v0 + 280);
  uint64_t v53 = *(void *)(v0 + 160);
  uint64_t v54 = *(void *)(v0 + 120);
  sub_18264F75C();
  uint64_t v55 = *(void *)(v0 + 48);
  _s18RemoteCallActivityCMa();
  swift_allocObject();
  uint64_t v56 = sub_181C27924(v55);
  *(void *)(v0 + 392) = v56;
  *(void *)(v0 + 32) = v54;
  sub_18264F18C();
  uint64_t v57 = *(os_unfair_lock_s **)(v53 + 128);
  uint64_t v58 = (void *)swift_task_alloc();
  v58[2] = v53;
  v58[3] = v52;
  void v58[4] = v56;
  uint64_t v59 = swift_task_alloc();
  *(void *)(v59 + 16) = sub_181BF9C20;
  *(void *)(v59 + 24) = v58;
  uint64_t v60 = v57 + 4;
  os_unfair_lock_lock(v57 + 4);
  (*(void (**)(uint64_t *__return_ptr))(v59 + 16))(&v85);
  uint64_t v61 = *(void *)(v0 + 280);
  uint64_t v62 = *(uint64_t **)(v0 + 136);
  uint64_t v63 = *(void *)(v0 + 120);
  *(void *)(v0 + 400) = v85;
  os_unfair_lock_unlock(v60);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_181BC920C(v61, (uint64_t (*)(void))type metadata accessor for NWActorID);
  *(void *)(v0 + 40) = v63;
  sub_18264F18C();
  uint64_t v64 = *v62;
  *(void *)(v0 + 408) = *v62;
  uint64_t v65 = v62[1];
  *(void *)(v0 + 416) = v65;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 16) = v64;
  *(void *)(v0 + 24) = v65;
  uint64_t v66 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v66;
  void *v66 = v0;
  v66[1] = sub_181BF14EC;
  return sub_181C3C3CC(*(void *)(v0 + 360), *(void *)(v0 + 272), *(void *)(v0 + 128), (_OWORD *)(v0 + 16), v56);
}

uint64_t sub_181BF14EC(uint64_t a1, unint64_t a2)
{
  *(void *)(*(void *)v3 + 432LL) = v2;
  swift_task_dealloc();
  if (!v2) {
    sub_181BCD4F0(a1, a2);
  }
  return swift_task_switch();
}

uint64_t sub_181BF156C()
{
  uint64_t v1 = (uint64_t *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 272);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_181BC920C(v2, (uint64_t (*)(void))type metadata accessor for NWActorID);
  swift_release();
  swift_release();
  uint64_t v3 = (os_log_s *)sub_18264E8C8();
  sub_18264E8EC();
  os_signpost_type_t v4 = sub_18264F06C();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 176);
    swift_retain();
    sub_18264E910();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v5, v6) == *MEMORY[0x18961D198])
    {
      uint64_t v8 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 176) + 8LL))( *(void *)(v0 + 192),  *(void *)(v0 + 168));
      uint64_t v8 = "";
    }

    uint64_t v1 = (uint64_t *)(v0 + 248);
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 216);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 376))(*(void *)(v0 + 248), v11, v12);
    BOOL v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v14 = 0;
    os_signpost_id_t v15 = sub_18264E898();
    _os_signpost_emit_with_name_impl(&dword_181A5C000, v3, v4, v15, "remoteCallVoid", v8, v14, 2u);
    MEMORY[0x186E12168](v14, -1LL, -1LL);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 216);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }

  uint64_t v16 = *v1;
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 208);
  v10(v16, v21);
  swift_release();
  v10(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF1838()
{
  uint64_t v1 = (uint64_t *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 272);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_181BC920C(v2, (uint64_t (*)(void))type metadata accessor for NWActorID);
  swift_release();
  swift_release();
  uint64_t v3 = (os_log_s *)sub_18264E8C8();
  sub_18264E8EC();
  os_signpost_type_t v4 = sub_18264F06C();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v7 = *(void *)(v0 + 168);
    swift_retain();
    sub_18264E910();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v5, v7) == *MEMORY[0x18961D198])
    {
      uint64_t v8 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 176) + 8LL))( *(void *)(v0 + 184),  *(void *)(v0 + 168));
      uint64_t v8 = "";
    }

    uint64_t v1 = (uint64_t *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 208);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 376))(*(void *)(v0 + 248), v11, v13);
    BOOL v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v14 = 0;
    os_signpost_id_t v15 = sub_18264E898();
    _os_signpost_emit_with_name_impl(&dword_181A5C000, v3, v4, v15, "remoteCallVoid", v8, v14, 2u);
    MEMORY[0x186E12168](v14, -1LL, -1LL);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v10(v11, v13);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 216);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }

  uint64_t v16 = *v1;
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 208);
  v10(v16, v21);
  swift_release();
  v10(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWActorSystem.deinit()
{
  return v0;
}

uint64_t NWActorSystem.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t NWActorSystem.invokeHandlerOnReturn(handler:resultBuffer:metatype:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  void v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_181BF1BD8()
{
  uint64_t v1 = dynamic_cast_existential_2_unconditional(v0[4]);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[5] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_181BF1C60;
  return sub_181BF1CA8(v1, v0[3], v0[2], v1, v3, v5);
}

uint64_t sub_181BF1C60()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181BF1CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  void v6[4] = a3;
  v6[5] = a4;
  void v6[2] = a1;
  void v6[3] = a2;
  v6[8] = *(void *)(a4 - 8);
  v6[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BF1D04()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_181BF1D70;
  return NWActorSystemResultHandler.onReturn<A>(value:)(v0[9], v0[5]);
}

uint64_t sub_181BF1D70()
{
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BF1DD4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF1E1C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_181BF1E64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_181BF1E84@<X0>(uint64_t *a1@<X8>)
{
  return NWActorSystem.assignID<A>(_:)(a1);
}

void sub_181BF1E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_181BF1EB8(uint64_t a1)
{
  return NWActorSystem.resignID(_:)(a1);
}

void sub_181BF1ED8(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x18961AFE8];
  *a1 = MEMORY[0x18961AFE8];
  a1[1] = v1;
}

uint64_t sub_181BF1EE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v14 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v14;
  *BOOL v14 = v8;
  v14[1] = sub_181BC63C4;
  return NWActorSystem.remoteCall<A, B, C>(on:target:invocation:throwing:returning:)(a1, a2, a3, a4, v15, v16, a7, a8);
}

uint64_t sub_181BF1FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v13;
  void *v13 = v7;
  v13[1] = sub_181BC92FC;
  return NWActorSystem.remoteCallVoid<A, B>(on:target:invocation:throwing:)(a1, a2, a3, v14, a5, v15, a7);
}

uint64_t sub_181BF2038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  void v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_181BF2054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C370);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NWActorID();
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v16 = (uint64_t *)((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (uint64_t *)((char *)&v24 - v17);
  sub_181BC9248(a2, (uint64_t)&v24 - v17, (uint64_t (*)(void))type metadata accessor for NWActorID);
  sub_181BC9248(a3, (uint64_t)v12, type metadata accessor for NWActorDiscoveryMechanism);
  uint64_t v19 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v12, 0LL, 1LL, v19);
  swift_beginAccess();
  sub_181C350E8((uint64_t)v12, v18);
  swift_endAccess();
  sub_181BC9248(a2, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for NWActorID);
  if (a4)
  {
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a4;
    *(void *)(v20 + 24) = a5;
    swift_beginAccess();
    sub_181BC904C(a4);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *(void *)(a1 + 200);
    *(void *)(a1 + 200) = 0x8000000000000000LL;
    sub_181C8FEC4((uint64_t)sub_181BF962C, v20, v16, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 200) = v25;
    swift_bridgeObjectRelease();
    sub_181BC920C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }

  else
  {
    swift_beginAccess();
    sub_181BC904C(0LL);
    uint64_t v22 = sub_181C8CBC8(v16);
    sub_181BC920C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for NWActorID);
    sub_181BD25B8(v22);
  }

  return swift_endAccess();
}

uint64_t sub_181BF22B8(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = sub_18264E8E0();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v3[12] = type metadata accessor for NWActorID();
  v3[13] = swift_task_alloc();
  uint64_t v5 = sub_18264E8B0();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
  v3[20] = swift_task_alloc();
  v3[21] = type metadata accessor for RemoteCallEnvelope(0LL);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BF2404()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  sub_181BC9248(*(void *)(v0 + 40), v1, type metadata accessor for RemoteCallEnvelope);
  uint64_t v3 = sub_181BF2FA8((uint64_t *)(v1 + *(int *)(v2 + 20)));
  *(void *)(v0 + 200) = v3;
  uint64_t v5 = *(void *)(v0 + 192);
  if (v3)
  {
    uint64_t v6 = v3;
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)(v0 + 160);
    if ((*(_BYTE *)(v5 + *(int *)(*(void *)(v0 + 168) + 36LL)) & 1) != 0)
    {
      sub_18264F27C();
      uint64_t v12 = sub_18264F294();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 0LL, 1LL, v12);
    }

    else
    {
      uint64_t v9 = sub_18264F294();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
    }

    uint64_t v52 = v2;
    if (qword_18C58B120 != -1) {
      swift_once();
    }
    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = sub_18264E8D4();
    *(void *)(v0 + 208) = __swift_project_value_buffer(v16, (uint64_t)qword_18C58C1B0);
    sub_18264E8C8();
    sub_18264E88C();
    sub_181BC9248(v13, v14, type metadata accessor for RemoteCallEnvelope);
    sub_181BC9248(v13, v15, type metadata accessor for RemoteCallEnvelope);
    uint64_t v17 = (os_log_s *)sub_18264E8C8();
    os_signpost_type_t v18 = sub_18264F078();
    char v19 = sub_18264F090();
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 184);
    if ((v19 & 1) != 0)
    {
      uint64_t v51 = v6;
      os_signpost_type_t v48 = v18;
      uint64_t v22 = *(void *)(v0 + 168);
      uint64_t v46 = *(void *)(v0 + 144);
      uint64_t v49 = *(void *)(v0 + 112);
      uint64_t v50 = *(void *)(v0 + 120);
      uint64_t v23 = *(void *)(v0 + 104);
      (*(void (**)(void))(v50 + 16))();
      os_log_t log = v17;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v53 = v47;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v25 = (uint64_t *)(v20 + *(int *)(v22 + 24));
      uint64_t v26 = v7;
      uint64_t v28 = *v25;
      unint64_t v27 = v25[1];
      swift_bridgeObjectRetain();
      uint64_t v29 = v28;
      uint64_t v7 = v26;
      *(void *)(v0 + 24) = sub_181BF7900(v29, v27, &v53);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      sub_181BC920C(v20, type metadata accessor for RemoteCallEnvelope);
      *(_WORD *)(v24 + 12) = 2080;
      sub_181BC9248(v21 + *(int *)(v52 + 20), v23, (uint64_t (*)(void))type metadata accessor for NWActorID);
      uint64_t v54 = 0LL;
      unint64_t v55 = 0xE000000000000000LL;
      sub_18264F168();
      swift_bridgeObjectRelease();
      uint64_t v54 = 0x49726F746341574ELL;
      unint64_t v55 = 0xEA00000000002844LL;
      swift_bridgeObjectRetain();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      sub_18264EB74();
      sub_18264E688();
      sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      sub_18264EB74();
      uint64_t v31 = v54;
      unint64_t v30 = v55;
      uint64_t v32 = v23;
      uint64_t v6 = v51;
      sub_181BC920C(v32, (uint64_t (*)(void))type metadata accessor for NWActorID);
      *(void *)(v0 + 32) = sub_181BF7900(v31, v30, &v53);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      sub_181BC920C(v21, type metadata accessor for RemoteCallEnvelope);
      os_signpost_id_t v33 = sub_18264E898();
      _os_signpost_emit_with_name_impl( &dword_181A5C000,  log,  v48,  v33,  "executeRemoteCall",  "Executing %s on %s",  (uint8_t *)v24,  0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v47, -1LL, -1LL);
      MEMORY[0x186E12168](v24, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v46, v49);
    }

    else
    {

      sub_181BC920C(v20, type metadata accessor for RemoteCallEnvelope);
      sub_181BC920C(v21, type metadata accessor for RemoteCallEnvelope);
    }

    uint64_t v35 = *(void *)(v0 + 144);
    uint64_t v34 = *(void *)(v0 + 152);
    uint64_t v36 = *(void *)(v0 + 112);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 120) + 16LL);
    *(void *)(v0 + 216) = v37;
    v37(v35, v34, v36);
    sub_18264E904();
    swift_allocObject();
    *(void *)(v0 + 224) = sub_18264E8F8();
    if (qword_18C58B138 != -1) {
      swift_once();
    }
    uint64_t v38 = *(void *)(v0 + 192);
    uint64_t v39 = *(void *)(v0 + 160);
    uint64_t v40 = *(void *)(v0 + 40);
    uint64_t v41 = swift_task_alloc();
    int8x16_t v42 = vextq_s8(*(int8x16_t *)(v0 + 48), *(int8x16_t *)(v0 + 48), 8uLL);
    uint64_t v43 = *(void *)(v0 + 48);
    *(void *)(v0 + 232) = v41;
    *(void *)(v0 + 16) = v43;
    *(void *)(v41 + 16) = v38;
    *(int8x16_t *)(v41 + 24) = v42;
    *(void *)(v41 + 40) = v40;
    *(void *)(v41 + 48) = v39;
    *(void *)(v41 + 56) = v6;
    *(void *)(v41 + 64) = v7;
    swift_retain();
    unint64_t v44 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v44;
    void *v44 = v0;
    v44[1] = sub_181BF2A74;
    uint64_t v56 = 347LL;
    uint64_t v57 = MEMORY[0x18961AFC8] + 8LL;
    return sub_18264F768();
  }

  else
  {
    sub_181BF7EF8();
    swift_allocError();
    *(_OWORD *)uint64_t v10 = xmmword_18265DCB0;
    *(void *)(v10 + 16) = 0xB000000000000000LL;
    swift_willThrow();
    sub_181BC920C(v5, type metadata accessor for RemoteCallEnvelope);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_181BF2A74()
{
  *(void *)(*(void *)v1 + 248LL) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BF2AEC()
{
  uint64_t v1 = (uint64_t *)(v0 + 136);
  uint64_t v2 = (os_log_s *)sub_18264E8C8();
  sub_18264E8EC();
  os_signpost_type_t v3 = sub_18264F06C();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v5 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    swift_retain();
    sub_18264E910();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5) == *MEMORY[0x18961D198])
    {
      uint64_t v7 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 72) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 64));
      uint64_t v7 = "";
    }

    uint64_t v1 = (uint64_t *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 120);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 216))(*(void *)(v0 + 144), v10, v11);
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    os_signpost_id_t v14 = sub_18264E898();
    _os_signpost_emit_with_name_impl(&dword_181A5C000, v2, v3, v14, "executeRemoteCall", v7, v13, 2u);
    MEMORY[0x186E12168](v13, -1LL, -1LL);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 120);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }

  uint64_t v15 = *v1;
  uint64_t v16 = *(void *)(v0 + 192);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 112);
  v9(v15, v19);
  swift_unknownObjectRelease();
  swift_release();
  v9(v18, v19);
  sub_181BDA0F0(v17, &qword_18C58C3A0);
  sub_181BC920C(v16, type metadata accessor for RemoteCallEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF2D4C()
{
  uint64_t v1 = (uint64_t *)(v0 + 128);
  uint64_t v2 = (os_log_s *)sub_18264E8C8();
  sub_18264E8EC();
  os_signpost_type_t v3 = sub_18264F06C();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 64);
    swift_retain();
    sub_18264E910();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x18961D198])
    {
      uint64_t v7 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 72) + 8LL))(*(void *)(v0 + 80), *(void *)(v0 + 64));
      uint64_t v7 = "";
    }

    uint64_t v1 = (uint64_t *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 112);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 216))(*(void *)(v0 + 144), v10, v12);
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    os_signpost_id_t v14 = sub_18264E898();
    _os_signpost_emit_with_name_impl(&dword_181A5C000, v2, v3, v14, "executeRemoteCall", v7, v13, 2u);
    MEMORY[0x186E12168](v13, -1LL, -1LL);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 120);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  }

  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 112);
  v9(*v1, v18);
  swift_unknownObjectRelease();
  swift_release();
  v9(v17, v18);
  sub_181BDA0F0(v16, &qword_18C58C3A0);
  sub_181BC920C(v15, type metadata accessor for RemoteCallEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF2FA8(uint64_t *a1)
{
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v3 = MEMORY[0x1895F8858](v73);
  uint64_t v72 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v74 = (char *)&v65 - v5;
  uint64_t v76 = type metadata accessor for NWActorID();
  uint64_t v6 = MEMORY[0x1895F8858](v76);
  uint64_t v70 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v75 = (uint64_t)&v65 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C390);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (uint64_t *)((char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v14);
  uint64_t v77 = (uint64_t)&v65 - v17;
  uint64_t v18 = (os_unfair_lock_s *)(*(void *)(v1 + 128) + 16LL);
  os_unfair_lock_lock(v18);
  sub_181BF9A94(&v78);
  uint64_t v19 = v78;
  os_unfair_lock_unlock(v18);
  os_unfair_lock_lock(v18);
  uint64_t v71 = v1;
  sub_181BF9704(&v78);
  uint64_t v20 = v78;
  os_unfair_lock_unlock(v18);
  uint64_t v21 = a1;
  if (*(void *)(v20 + 16) && (unint64_t v22 = sub_181C8C0F8(a1), (v23 & 1) != 0))
  {
    uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x186E1224C](v24 + 16);
    swift_release();
  }

  else
  {
    if (*(void *)(v19 + 16))
    {
      uint64_t v26 = *a1;
      uint64_t v27 = a1[1];
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_181C8C01C(v26, v27);
      if ((v29 & 1) != 0)
      {
        sub_181BC9248( *(void *)(v19 + 56) + *(void *)(v13 + 72) * v28,  (uint64_t)v11,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
      }

      swift_bridgeObjectRelease();
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
    }

    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      swift_bridgeObjectRelease();
      sub_181BDA0F0((uint64_t)v11, &qword_18C58C390);
      return 0LL;
    }

    else
    {
      uint64_t v30 = (uint64_t)v11;
      uint64_t v31 = v77;
      sub_181BC928C(v30, v77, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
      sub_181BC9248( v31,  (uint64_t)v16,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v32 = (uint64_t (*)(uint64_t))*v16;
        uint64_t v33 = v16[1];
        uint64_t v34 = (char *)v16 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
        if (*(void *)(v20 + 16) && (unint64_t v35 = sub_181C8C0F8(a1), (v36 & 1) != 0))
        {
          uint64_t v37 = *(void *)(*(void *)(v20 + 56) + 8 * v35);
          swift_retain();
          swift_bridgeObjectRelease();
          uint64_t v25 = MEMORY[0x186E1224C](v37 + 16);
          swift_release();
          swift_release();
        }

        else
        {
          swift_bridgeObjectRelease();
          if (qword_18C58B118 != -1) {
            swift_once();
          }
          uint64_t v47 = sub_18264E934();
          __swift_project_value_buffer(v47, (uint64_t)qword_18C58C198);
          uint64_t v48 = (uint64_t)a1;
          uint64_t v49 = v75;
          sub_181BC9248(v48, v75, (uint64_t (*)(void))type metadata accessor for NWActorID);
          uint64_t v50 = (os_log_s *)sub_18264E91C();
          os_log_type_t v51 = sub_18264F018();
          BOOL v52 = os_log_type_enabled(v50, v51);
          uint64_t v68 = v32;
          uint64_t v69 = v33;
          if (v52)
          {
            uint64_t v53 = (uint8_t *)swift_slowAlloc();
            uint64_t v66 = swift_slowAlloc();
            uint64_t v80 = v66;
            *(_DWORD *)uint64_t v53 = 136315138;
            uint64_t v65 = v53 + 4;
            uint64_t v67 = v34;
            uint64_t v54 = v70;
            sub_181BC9248(v49, v70, (uint64_t (*)(void))type metadata accessor for NWActorID);
            uint64_t v78 = 0LL;
            unint64_t v79 = 0xE000000000000000LL;
            sub_18264F168();
            swift_bridgeObjectRelease();
            uint64_t v78 = 0x49726F746341574ELL;
            unint64_t v79 = 0xEA00000000002844LL;
            swift_bridgeObjectRetain();
            sub_18264EB74();
            uint64_t v31 = v77;
            swift_bridgeObjectRelease();
            sub_18264EB74();
            sub_18264E688();
            sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
            sub_18264F480();
            sub_18264EB74();
            swift_bridgeObjectRelease();
            sub_18264EB74();
            uint64_t v55 = v78;
            unint64_t v56 = v79;
            uint64_t v57 = v54;
            uint64_t v34 = v67;
            sub_181BC920C(v57, (uint64_t (*)(void))type metadata accessor for NWActorID);
            uint64_t v78 = sub_181BF7900(v55, v56, &v80);
            sub_18264F0CC();
            swift_bridgeObjectRelease();
            sub_181BC920C(v75, (uint64_t (*)(void))type metadata accessor for NWActorID);
            _os_log_impl(&dword_181A5C000, v50, v51, "Creating on demand actor for id %s", v53, 0xCu);
            uint64_t v58 = v66;
            swift_arrayDestroy();
            MEMORY[0x186E12168](v58, -1LL, -1LL);
            MEMORY[0x186E12168](v53, -1LL, -1LL);
          }

          else
          {
            sub_181BC920C(v49, (uint64_t (*)(void))type metadata accessor for NWActorID);
          }

          if (qword_18C58B140 != -1) {
            swift_once();
          }
          uint64_t v60 = (char *)v21 + *(int *)(v76 + 20);
          uint64_t v61 = sub_18264E688();
          uint64_t v62 = *(void *)(v61 - 8);
          uint64_t v63 = (uint64_t)v74;
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v74, v60, v61);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v63, 0LL, 1LL, v61);
          sub_181BE48BC(v63, v72, &qword_18C58C0D0);
          swift_task_localValuePush();
          uint64_t v25 = v68(v71);
          swift_task_localValuePop();
          swift_release();
          sub_181BDA0F0(v63, &qword_18C58C0D0);
        }

        sub_181BC920C(v31, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
        uint64_t v59 = (uint64_t)v34;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = *v16;
        unint64_t v38 = v16[1];
        if (qword_18C58B118 != -1) {
          swift_once();
        }
        uint64_t v39 = sub_18264E934();
        __swift_project_value_buffer(v39, (uint64_t)qword_18C58C198);
        swift_unknownObjectRetain_n();
        uint64_t v40 = (os_log_s *)sub_18264E91C();
        os_log_type_t v41 = sub_18264F018();
        if (os_log_type_enabled(v40, v41))
        {
          int8x16_t v42 = (uint8_t *)swift_slowAlloc();
          uint64_t v43 = swift_slowAlloc();
          unint64_t v79 = v38;
          uint64_t v80 = v43;
          *(_DWORD *)int8x16_t v42 = 136315138;
          uint64_t v78 = v25;
          swift_unknownObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D640);
          uint64_t v44 = sub_18264EAC0();
          uint64_t v78 = sub_181BF7900(v44, v45, &v80);
          sub_18264F0CC();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_181A5C000, v40, v41, "Returning singleton: %s", v42, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E12168](v43, -1LL, -1LL);
          MEMORY[0x186E12168](v42, -1LL, -1LL);

          uint64_t v46 = v77;
        }

        else
        {
          swift_unknownObjectRelease_n();

          uint64_t v46 = v31;
        }

        sub_181BC920C(v46, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
        uint64_t v59 = (uint64_t)v16 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
      }

      sub_181BDA0F0(v59, qword_18C58C2B8);
    }
  }

  return v25;
}

uint64_t sub_181BF38A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[8] = a2;
  v8[15] = type metadata accessor for NWActorSystemResultHandler();
  _BYTE v8[16] = swift_task_alloc();
  v8[17] = type metadata accessor for NWFileSerializationContext(0LL);
  v8[18] = swift_task_alloc();
  v8[19] = type metadata accessor for RemoteCallEnvelope(0LL);
  v8[20] = swift_task_alloc();
  v8[21] = type metadata accessor for NWActorSystemInvocationDecoder();
  v8[22] = swift_task_alloc();
  v8[23] = swift_task_alloc();
  uint64_t v9 = sub_18264E6D0();
  v8[24] = v9;
  v8[25] = *(void *)(v9 - 8);
  v8[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BF39AC()
{
  uint64_t v1 = (uint64_t *)v0[22];
  uint64_t v21 = v0[23];
  uint64_t v2 = v0[20];
  uint64_t v15 = (int *)v0[21];
  uint64_t v3 = v0[18];
  uint64_t v24 = v0[19];
  uint64_t v16 = v0[17];
  uint64_t v4 = v0[11];
  unint64_t v22 = (int *)v0[15];
  uint64_t v23 = v0[12];
  uint64_t v20 = v0[16];
  uint64_t v5 = v0[10];
  uint64_t v25 = v0[9];
  uint64_t v6 = v0[8];
  swift_bridgeObjectRetain();
  sub_18264E6DC();
  sub_181BC9248(v6, v2, type metadata accessor for RemoteCallEnvelope);
  uint64_t v18 = _s15ActorConnectionCMa(0LL);
  v0[5] = v18;
  v0[6] = &off_189BAF818;
  v0[2] = v5;
  uint64_t v19 = _s15ActorConnectionC20RemoteCallInvocationVMa(0LL);
  char v17 = *(_BYTE *)(v4 + *(int *)(v19 + 24));
  sub_181BC9248(v2, (uint64_t)v1 + v15[5], type metadata accessor for RemoteCallEnvelope);
  uint64_t v7 = (uint64_t *)((char *)v1 + v15[6]);
  void *v7 = *(void *)(v2 + *(int *)(v24 + 32));
  v7[1] = 0LL;
  sub_181BCD38C((uint64_t)(v0 + 2), v3);
  sub_181BC9248( v2 + *(int *)(v24 + 20),  v3 + *(int *)(v16 + 20),  (uint64_t (*)(void))type metadata accessor for NWActorID);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_181BCD54C(v25, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)(v0 + 2));
  sub_181BC920C(v2, type metadata accessor for RemoteCallEnvelope);
  sub_181BC920C(v3, type metadata accessor for NWFileSerializationContext);
  *uint64_t v1 = v8;
  *((_BYTE *)v1 + v15[7]) = v17;
  sub_181BC928C( (uint64_t)v1,  v21,  (uint64_t (*)(void))type metadata accessor for NWActorSystemInvocationDecoder);
  uint64_t v9 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v20, v6, v9);
  uint64_t v10 = (void *)(v20 + v22[5]);
  v10[3] = v18;
  v10[4] = &off_189BAF838;
  *uint64_t v10 = v5;
  sub_181BC9248( v6 + *(int *)(v24 + 20),  v20 + v22[6],  (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v11 = (void *)(v20 + v22[7]);
  v11[3] = v18;
  void v11[4] = &off_189BAF818;
  void *v11 = v5;
  sub_181BE48BC(v23, v20 + v22[8], &qword_18C58C3A0);
  *(_BYTE *)(v20 + v22[9]) = *(_BYTE *)(v4 + *(int *)(v19 + 20));
  swift_getObjectType();
  v0[7] = v25;
  swift_retain_n();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[27] = v12;
  type metadata accessor for NWActorSystem();
  sub_181BF9814( &qword_18C58C3B8,  v13,  (uint64_t (*)(uint64_t))type metadata accessor for NWActorSystem,  (uint64_t)&protocol conformance descriptor for NWActorSystem);
  void *v12 = v0;
  v12[1] = sub_181BF3CD0;
  return sub_18264E6AC();
}

uint64_t sub_181BF3CD0()
{
  *(void *)(*(void *)v1 + 224LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BF3D34()
{
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  sub_181BC920C( *(void *)(v0 + 128),  (uint64_t (*)(void))type metadata accessor for NWActorSystemResultHandler);
  sub_181BC920C(v4, (uint64_t (*)(void))type metadata accessor for NWActorSystemInvocationDecoder);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF3DF0()
{
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  sub_181BC920C( *(void *)(v0 + 128),  (uint64_t (*)(void))type metadata accessor for NWActorSystemResultHandler);
  sub_181BC920C(v4, (uint64_t (*)(void))type metadata accessor for NWActorSystemInvocationDecoder);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF3EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C390);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v26 - v11;
  swift_beginAccess();
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_181C8C01C(a2, a3);
    if ((v15 & 1) != 0)
    {
      uint64_t v16 = v14;
      uint64_t v17 = *(void *)(v13 + 56);
      uint64_t v18 = type metadata accessor for NWActorSystem.ServerRole();
      uint64_t v26 = a3;
      uint64_t v19 = a2;
      uint64_t v20 = *(void *)(v18 - 8);
      sub_181BC9248( v17 + *(void *)(v20 + 72) * v16,  (uint64_t)v12,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
      uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
      a2 = v19;
      a3 = v26;
      v21(v12, 0LL, 1LL, v18);
    }

    else
    {
      uint64_t v18 = type metadata accessor for NWActorSystem.ServerRole();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v12, 1LL, 1LL, v18);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v18 = type metadata accessor for NWActorSystem.ServerRole();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v12, 1LL, 1LL, v18);
  }

  swift_endAccess();
  type metadata accessor for NWActorSystem.ServerRole();
  uint64_t v22 = *(void *)(v18 - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v12, 1LL, v18);
  sub_181BDA0F0((uint64_t)v12, &qword_18C58C390);
  if (v23 == 1)
  {
    sub_181BC9248( v27,  (uint64_t)v10,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v10, 0LL, 1LL, v18);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_181C35250((uint64_t)v10, a2, a3);
    return swift_endAccess();
  }

  else
  {
    sub_181BF7EF8();
    swift_allocError();
    *(_OWORD *)uint64_t v25 = xmmword_18265DCC0;
    *(void *)(v25 + 16) = 0xB000000000000000LL;
    return swift_willThrow();
  }

uint64_t sub_181BF4140(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v20 = a2;
  uint64_t v5 = type metadata accessor for NWActorID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (unint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = (os_unfair_lock_s *)(*(void *)(a1 + 80) + 16LL);
  os_unfair_lock_lock(v9);
  sub_181BF9748(&v22);
  unint64_t v10 = v22.n128_u64[0];
  os_unfair_lock_unlock(v9);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = (os_unfair_lock_s *)(*(void *)(v3 + 128) + 16LL);
    uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
    unint64_t v19 = v10;
    uint64_t v14 = v10 + ((v13 + 32) & ~v13);
    uint64_t v21 = *(void *)(v6 + 72);
    do
    {
      uint64_t v16 = sub_181BC9248(v14, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWActorID);
      MEMORY[0x1895F8858](v16);
      *(&v19 - 2) = v3;
      *(&v19 - 1) = (unint64_t)v8;
      os_unfair_lock_lock(v12);
      sub_181BF9760(&v22);
      __n128 v17 = v22;
      os_unfair_lock_unlock(v12);
      if (v17.n128_u64[0])
      {
        *(__n128 *)(swift_allocObject() + 16) = v17;
        v22.n128_u64[0] = v20;
        sub_181BC904C(v17.n128_i64[0]);
        swift_retain();
        ((void (*)(__n128 *))v17.n128_u64[0])(&v22);
        swift_release();
        sub_181BD25B8(v17.n128_i64[0]);
        char v15 = sub_181BF9778;
      }

      else
      {
        char v15 = 0LL;
      }

      os_unfair_lock_lock(v12);
      sub_181BF6FD0(v3, v8);
      os_unfair_lock_unlock(v12);
      sub_181BD25B8((uint64_t)v15);
      sub_181BC920C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWActorID);
      v14 += v21;
      --v11;
    }

    while (v11);
  }

  return swift_bridgeObjectRelease();
}

__n128 sub_181BF4378@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + 200);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_181C8C0F8(a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  __n128 v13 = 0u;
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v5;
    uint64_t v14 = *v5;
    uint64_t *v5 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_181C91684();
      uint64_t v9 = v14;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for NWActorID();
    sub_181BC920C( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  (uint64_t (*)(void))type metadata accessor for NWActorID);
    __n128 v13 = *(__n128 *)(*(void *)(v9 + 56) + 16 * v6);
    sub_181C4C4AC(v6, v9);
    uint64_t *v5 = v9;
    swift_bridgeObjectRelease();
  }

  swift_endAccess();
  __n128 result = v13;
  *a3 = v13;
  return result;
}

uint64_t sub_181BF448C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = a1[3];
  a1[3] = &unk_18C58C388;
  a1[4] = v4;
  sub_181BD25B8(v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  uint64_t v9 = a1[5];
  a1[5] = sub_181BF96F4;
  a1[6] = v8;
  sub_181BD25B8(v9);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  uint64_t v11 = a1[7];
  a1[7] = sub_181BF96FC;
  a1[8] = v10;
  return sub_181BD25B8(v11);
}

uint64_t sub_181BF45F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return swift_task_switch();
}

uint64_t sub_181BF4614()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 88) = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    swift_beginAccess();
    uint64_t v3 = swift_weakLoadStrong();
    *(void *)(v0 + 96) = v3;
    if (v3)
    {
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 104) = v4;
      void *v4 = v0;
      v4[1] = sub_181BF46E8;
      return sub_181BF22B8(*(void *)(v0 + 64), v2);
    }

    swift_release();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF46E8()
{
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  return swift_task_switch();
}

uint64_t sub_181BF4754()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF4788()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF47C4(unint64_t a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_181BF4140(v3, a1);
      swift_release();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_181BF4860(uint64_t *a1)
{
  if (!swift_weakLoadStrong()) {
    return 0LL;
  }
  uint64_t v2 = sub_181BF2FA8(a1);
  swift_release();
  return v2;
}

void sub_181BF48E4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v92 = a3;
  uint64_t v97 = a4;
  uint64_t v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v90 = (uint64_t)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v95 = (uint64_t)v85 - v12;
  uint64_t v94 = type metadata accessor for NWActorID();
  uint64_t v13 = MEMORY[0x1895F8858](v94);
  uint64_t v93 = (uint64_t)v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v96 = (void *)((char *)v85 - v16);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)v85 - v17;
  uint64_t v19 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  int v23 = (char *)v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v98 = (uint64_t)v85 - v24;
  uint64_t v91 = a1 + 192;
  swift_beginAccess();
  uint64_t v25 = *(void *)(a1 + 192);
  if (*(void *)(v25 + 16))
  {
    unint64_t v26 = sub_181C8C0F8(a2);
    if ((v27 & 1) != 0)
    {
      uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
      swift_endAccess();
      *uint64_t v97 = v28;
      swift_retain();
      return;
    }
  }

  char v99 = a2;
  swift_endAccess();
  swift_beginAccess();
  uint64_t v29 = *(void *)(a1 + 152);
  if (!*(void *)(v29 + 16) || (unint64_t v30 = sub_181C8C0F8(v99), (v31 & 1) == 0))
  {
    swift_endAccess();
    sub_181BF7EF8();
    swift_allocError();
    *unint64_t v45 = 0xD000000000000061LL;
    v45[1] = 0x800000018272E7E0LL;
    v45[2] = 0x4000000000000000LL;
    swift_willThrow();
    return;
  }

  sub_181BC9248( *(void *)(v29 + 56) + *(void *)(v20 + 72) * v30,  (uint64_t)v23,  type metadata accessor for NWActorDiscoveryMechanism);
  uint64_t v32 = v98;
  sub_181BC928C((uint64_t)v23, v98, type metadata accessor for NWActorDiscoveryMechanism);
  swift_endAccess();
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_18264E934();
  uint64_t v34 = (os_log_s *)__swift_project_value_buffer(v33, (uint64_t)qword_18C58C198);
  sub_181BC9248((uint64_t)v99, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for NWActorID);
  unint64_t v35 = (os_log_s *)sub_18264E91C();
  os_log_type_t v36 = sub_18264F018();
  LODWORD(v89) = v36;
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v38 = (uint64_t)v96;
  if (v37)
  {
    os_log_t v88 = v35;
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    uint64_t v101 = v87;
    unint64_t v86 = v39;
    *(_DWORD *)uint64_t v39 = 136315138;
    v85[1] = v39 + 12;
    v85[0] = v39 + 4;
    sub_181BC9248((uint64_t)v18, v38, (uint64_t (*)(void))type metadata accessor for NWActorID);
    unint64_t v103 = 0LL;
    unint64_t v104 = 0xE000000000000000LL;
    sub_18264F168();
    swift_bridgeObjectRelease();
    unint64_t v103 = 0x49726F746341574ELL;
    unint64_t v104 = 0xEA00000000002844LL;
    uint64_t v40 = v38;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264E688();
    sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v41 = v103;
    unint64_t v42 = v104;
    sub_181BC920C(v40, (uint64_t (*)(void))type metadata accessor for NWActorID);
    unint64_t v103 = sub_181BF7900(v41, v42, &v101);
    uint64_t v32 = v98;
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for NWActorID);
    unint64_t v35 = v88;
    uint64_t v43 = v86;
    _os_log_impl(&dword_181A5C000, v88, (os_log_type_t)v89, "Establishing connection for %s", v86, 0xCu);
    uint64_t v44 = v87;
    swift_arrayDestroy();
    MEMORY[0x186E12168](v44, -1LL, -1LL);
    MEMORY[0x186E12168](v43, -1LL, -1LL);
  }

  else
  {
    sub_181BC920C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }

  sub_181BC9248(v32, (uint64_t)v8, type metadata accessor for NWActorDiscoveryMechanism.Target);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v47 = v95;
  if (EnumCaseMultiPayload != 1)
  {
    sub_181BC920C((uint64_t)v8, type metadata accessor for NWActorDiscoveryMechanism.Target);
    sub_181BF7EF8();
    swift_allocError();
    void *v83 = 0xD00000000000004CLL;
    v83[1] = 0x800000018272E850LL;
    v83[2] = 0x9000000000000000LL;
    swift_willThrow();
    sub_181BC920C(v32, type metadata accessor for NWActorDiscoveryMechanism);
    return;
  }

  sub_181BC928C((uint64_t)v8, v95, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  uint64_t v48 = *(void *)(*(void *)(v32 + *(int *)(v19 + 28)) + 16LL);
  uint64_t v49 = (void *)(v48 + 16);
  uint64_t v50 = (os_unfair_lock_s *)(v48 + 24);
  swift_retain();
  os_unfair_lock_lock(v50);
  uint64_t v51 = v100;
  sub_181C9AEC0(v49, (uint64_t *)&v103);
  if (v51) {
    goto LABEL_26;
  }
  os_unfair_lock_unlock(v50);
  unint64_t v52 = v103;
  swift_release();
  if (qword_18C58B200 != -1) {
    swift_once();
  }
  uint64_t v53 = qword_18C5A4A10;
  type metadata accessor for NWProtocolFramer.Options();
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = nw_framer_create_options(*(nw_protocol_definition_t *)(v53 + 32));
  os_log_t v88 = v34;
  uint64_t v55 = (os_log_s *)sub_18264E91C();
  os_log_type_t v56 = sub_18264F018();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl(&dword_181A5C000, v55, v56, "Inserting Actor WireProtocol framer", v57, 2u);
    MEMORY[0x186E12168](v57, -1LL, -1LL);
  }

  uint64_t v58 = *(os_unfair_lock_s **)(v52 + 16);
  uint64_t v59 = v58 + 4;
  uint64_t v60 = v58 + 6;
  os_unfair_lock_lock(v58 + 6);
  sub_181C99B48(v59, (uint64_t *)&v103);
  os_unfair_lock_unlock(v60);
  uint64_t v61 = *(void *)(v103 + 16);
  uint64_t v62 = (nw_protocol_stack **)(v61 + 16);
  uint64_t v63 = (os_unfair_lock_s *)(v61 + 24);
  uint64_t v89 = v54;
  swift_retain();
  os_unfair_lock_lock(v63);
  sub_181C994A0(v62, &v103);
  uint64_t v50 = 0LL;
  uint64_t v64 = v52;
  os_unfair_lock_unlock(v63);
  if (v103 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v84 = sub_18264F330();
    swift_bridgeObjectRelease();
    if (v84 < 0)
    {
      __break(1u);
      os_unfair_lock_unlock(v63);
      __break(1u);
LABEL_26:
      os_unfair_lock_unlock(v50);
      __break(1u);
      return;
    }
  }

  sub_181BF70D8(0LL, 0LL, v89);
  uint64_t v65 = v103;
  os_unfair_lock_lock(v63);
  sub_181C99334(v62, v65);
  uint64_t v100 = 0LL;
  os_unfair_lock_unlock(v63);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v66 = v90;
  sub_181BC9248(v47, v90, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  type metadata accessor for NWConnection(0LL);
  swift_allocObject();
  swift_retain();
  sub_181C6BB70(v66, v64);
  uint64_t v68 = v67;
  uint64_t v90 = v64;
  swift_release();
  swift_beginAccess();
  LOBYTE(v65) = *(_BYTE *)(a1 + 16);
  _s15ActorConnectionCMa(0LL);
  swift_allocObject();
  uint64_t v69 = swift_retain();
  uint64_t v70 = (void *)sub_181C3C058(v69, v65);
  sub_181BF448C(v70);
  uint64_t v71 = v99;
  uint64_t v72 = v96;
  sub_181BC9248((uint64_t)v99, (uint64_t)v96, (uint64_t (*)(void))type metadata accessor for NWActorID);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v105 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = 0x8000000000000000LL;
  sub_181C8FD44((uint64_t)v70, v72, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 192) = v105;
  swift_bridgeObjectRelease();
  sub_181BC920C((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for NWActorID);
  swift_endAccess();
  sub_181C3B6D4((uint64_t)v71, v92);
  uint64_t v74 = v93;
  sub_181BC9248((uint64_t)v71, v93, (uint64_t (*)(void))type metadata accessor for NWActorID);
  swift_retain_n();
  uint64_t v75 = (os_log_s *)sub_18264E91C();
  os_log_type_t v76 = sub_18264F018();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = swift_slowAlloc();
    char v99 = (void *)swift_slowAlloc();
    uint64_t v105 = v99;
    *(_DWORD *)uint64_t v77 = 136315394;
    uint64_t v92 = v77 + 4;
    sub_181BC9248(v74, (uint64_t)v72, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v101 = 0LL;
    unint64_t v102 = 0xE000000000000000LL;
    sub_18264F168();
    swift_bridgeObjectRelease();
    uint64_t v101 = 0x49726F746341574ELL;
    unint64_t v102 = 0xEA00000000002844LL;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264E688();
    sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    uint64_t v78 = v101;
    unint64_t v79 = v102;
    sub_181BC920C((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for NWActorID);
    uint64_t v101 = sub_181BF7900(v78, v79, (uint64_t *)&v105);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C(v74, (uint64_t (*)(void))type metadata accessor for NWActorID);
    *(_WORD *)(v77 + 12) = 2048;
    uint64_t id = nw_connection_get_id(*(void **)(v68 + 16));
    swift_release();
    uint64_t v101 = id;
    sub_18264F0CC();
    swift_release();
    _os_log_impl(&dword_181A5C000, v75, v76, "Established connection for %s: C%llu", (uint8_t *)v77, 0x16u);
    uint64_t v81 = v99;
    swift_arrayDestroy();
    MEMORY[0x186E12168](v81, -1LL, -1LL);
    MEMORY[0x186E12168](v77, -1LL, -1LL);

    swift_release();
    swift_release();
    swift_release();
    uint64_t v82 = v95;
  }

  else
  {
    swift_release_n();

    sub_181BC920C(v74, (uint64_t (*)(void))type metadata accessor for NWActorID);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v82 = v47;
  }

  sub_181BC920C(v82, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  sub_181BC920C(v98, type metadata accessor for NWActorDiscoveryMechanism);
  *uint64_t v97 = v70;
}

uint64_t sub_181BF5574(uint64_t a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_181BF55D0(a1);
    return swift_release();
  }

  return result;
}

uint64_t sub_181BF55D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_18264E934();
  __swift_project_value_buffer(v7, (uint64_t)qword_18C58C198);
  swift_retain_n();
  uint64_t v8 = (os_log_s *)sub_18264E91C();
  os_log_type_t v9 = sub_18264F018();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = a1;
    v21[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    type metadata accessor for NWConnection(0LL);
    swift_retain();
    uint64_t v12 = sub_18264EAC0();
    uint64_t v20 = sub_181BF7900(v12, v13, v21);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v8, v9, "Received connection: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v11, -1LL, -1LL);
    MEMORY[0x186E12168](v10, -1LL, -1LL);
  }

  else
  {

    swift_release_n();
  }

  swift_beginAccess();
  char v14 = *(_BYTE *)(v2 + 16);
  _s15ActorConnectionCMa(0LL);
  swift_allocObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = (void *)sub_181C3C058(v15, v14);
  sub_181BF448C(v16);
  uint64_t v17 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v6, 1LL, 1LL, v17);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v16;
  v18[5] = v2;
  swift_retain();
  sub_181C3B844((uint64_t)v6, (uint64_t)&unk_18C58C3F0, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_181BF587C(unsigned int *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 4);
  uint64_t v2 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    unsigned int v4 = v2;
    char v5 = (v2 | (unint64_t)(v1 << 32)) >> 32;
    sub_181BF58F4(&v4);
    return swift_release();
  }

  return result;
}

void sub_181BF58F4(unsigned int *a1)
{
  unint64_t v1 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  if (qword_18C58B118 != -1) {
LABEL_40:
  }
    swift_once();
  uint64_t v2 = sub_18264E934();
  __swift_project_value_buffer(v2, (uint64_t)qword_18C58C198);
  uint64_t v3 = (os_log_s *)sub_18264E91C();
  os_log_type_t v4 = sub_18264F018();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)char v5 = 136315138;
    uint64_t v41 = v6;
    uint64_t v7 = sub_18264EAC0();
    sub_181BF7900(v7, v8, &v41);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v3, v4, "Listener state changed to %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v6, -1LL, -1LL);
    MEMORY[0x186E12168](v5, -1LL, -1LL);
  }

  if (!(v1 >> 38))
  {
    uint64_t v34 = (os_log_s *)sub_18264E91C();
    os_log_type_t v35 = sub_18264F000();
    if (os_log_type_enabled(v34, v35))
    {
      os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v41 = v37;
      *(_DWORD *)os_log_type_t v36 = 136315138;
      uint64_t v38 = sub_18264EAC0();
      sub_181BF7900(v38, v39, &v41);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181A5C000, v34, v35, "Listener moved to waiting state with error: %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v37, -1LL, -1LL);
      MEMORY[0x186E12168](v36, -1LL, -1LL);
    }

    return;
  }

  if (v1 >> 38 != 1)
  {
    if (v1 == 0x8000000001LL) {
      sub_181BF5E8C();
    }
    return;
  }

  int v9 = v1;
  unint64_t v1 = HIDWORD(v1) & 0x3F;
  uint64_t v10 = (os_log_s *)sub_18264E91C();
  os_log_type_t v11 = sub_18264F000();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v41 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = sub_18264EAC0();
    sub_181BF7900(v14, v15, &v41);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v10, v11, "Listener moved to failed state with error: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v13, -1LL, -1LL);
    MEMORY[0x186E12168](v12, -1LL, -1LL);
  }

  uint64_t v16 = (os_unfair_lock_s *)(*(void *)(v40 + 128) + 16LL);
  os_unfair_lock_lock(v16);
  sub_181BF9A94(&v41);
  uint64_t v17 = v41;
  os_unfair_lock_unlock(v16);
  uint64_t v18 = v17 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & *(void *)(v17 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v23 = 0LL;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_12;
    }

    int64_t v31 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v31 >= v22) {
      goto LABEL_37;
    }
    unint64_t v32 = *(void *)(v18 + 8 * v31);
    ++v23;
    if (!v32)
    {
      int64_t v23 = v31 + 1;
      if (v31 + 1 >= v22) {
        goto LABEL_37;
      }
      unint64_t v32 = *(void *)(v18 + 8 * v23);
      if (!v32)
      {
        int64_t v23 = v31 + 2;
        if (v31 + 2 >= v22) {
          goto LABEL_37;
        }
        unint64_t v32 = *(void *)(v18 + 8 * v23);
        if (!v32)
        {
          int64_t v23 = v31 + 3;
          if (v31 + 3 >= v22) {
            goto LABEL_37;
          }
          unint64_t v32 = *(void *)(v18 + 8 * v23);
          if (!v32)
          {
            int64_t v23 = v31 + 4;
            if (v31 + 4 >= v22) {
              goto LABEL_37;
            }
            unint64_t v32 = *(void *)(v18 + 8 * v23);
            if (!v32) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_181BF5E8C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  os_log_type_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v5 = (os_unfair_lock_s *)(*(void *)(v0 + 128) + 16LL);
  os_unfair_lock_lock(v5);
  sub_181BF9AD8(&v13);
  uint64_t v6 = v13;
  os_unfair_lock_unlock(v5);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v9 = *(void *)(v2 + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    do
    {
      v10(v4, v8, v1);
      sub_18264ED84();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v8 += v9;
      --v7;
    }

    while (v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_181BF5FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  v5[7] = type metadata accessor for NWActorID();
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181BF6028()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_181BF60A8;
  return sub_18264F594();
}

uint64_t sub_181BF60A8()
{
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181BF610C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 48);
  char v5 = *(os_unfair_lock_s **)(v4 + 128);
  uint64_t v6 = (void *)swift_task_alloc();
  void v6[2] = v4;
  void v6[3] = v3;
  void v6[4] = v1;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = sub_181BF9BE0;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = v5 + 4;
  os_unfair_lock_lock(v8);
  (*(void (**)(uint64_t *__return_ptr))(v7 + 16))(&v27);
  if (v2)
  {
    os_unfair_lock_unlock(v8);
    return swift_task_dealloc();
  }

  else
  {
    uint64_t v10 = v27;
    os_unfair_lock_unlock(v8);
    swift_task_dealloc();
    swift_task_dealloc();
    if (v10)
    {
      uint64_t v11 = qword_18C58B118;
      swift_retain();
      if (v11 != -1) {
        swift_once();
      }
      uint64_t v13 = *(void *)(v0 + 72);
      uint64_t v12 = *(void *)(v0 + 80);
      uint64_t v14 = sub_18264E934();
      __swift_project_value_buffer(v14, (uint64_t)qword_18C58C198);
      sub_181BC9248(v12, v13, (uint64_t (*)(void))type metadata accessor for NWActorID);
      unint64_t v15 = (os_log_s *)sub_18264E91C();
      os_log_type_t v16 = sub_18264F000();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v18 = *(void *)(v0 + 72);
      if (v17)
      {
        uint64_t v19 = *(void *)(v0 + 64);
        os_log_type_t type = v16;
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        uint64_t v26 = v24;
        *(_DWORD *)uint64_t v20 = 136315138;
        netcore_stats_tcp_report buf = v20;
        sub_181BC9248(v18, v19, (uint64_t (*)(void))type metadata accessor for NWActorID);
        uint64_t v27 = 0LL;
        unint64_t v28 = 0xE000000000000000LL;
        sub_18264F168();
        swift_bridgeObjectRelease();
        uint64_t v27 = 0x49726F746341574ELL;
        unint64_t v28 = 0xEA00000000002844LL;
        swift_bridgeObjectRetain();
        sub_18264EB74();
        swift_bridgeObjectRelease();
        sub_18264EB74();
        sub_18264E688();
        sub_181BF9814( (unint64_t *)&qword_18C58C240,  255LL,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        sub_18264F480();
        sub_18264EB74();
        swift_bridgeObjectRelease();
        sub_18264EB74();
        uint64_t v21 = v27;
        unint64_t v22 = v28;
        sub_181BC920C(v19, (uint64_t (*)(void))type metadata accessor for NWActorID);
        *(void *)(v0 + 32) = sub_181BF7900(v21, v22, &v26);
        sub_18264F0CC();
        swift_bridgeObjectRelease();
        sub_181BC920C(v18, (uint64_t (*)(void))type metadata accessor for NWActorID);
        _os_log_impl( &dword_181A5C000,  v15,  type,  "Unexpectedly received another connection for %s, invalidating old connection",  buf,  0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E12168](v24, -1LL, -1LL);
        MEMORY[0x186E12168](buf, -1LL, -1LL);
      }

      else
      {
        sub_181BC920C(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for NWActorID);
      }

      sub_181C3AAA8();
      swift_release_n();
    }

    sub_181BC920C(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for NWActorID);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_181BF64D4()
{
  if (qword_18C58B118 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = sub_18264E934();
  __swift_project_value_buffer(v2, (uint64_t)qword_18C58C198);
  id v3 = v1;
  id v4 = v1;
  char v5 = (os_log_s *)sub_18264E91C();
  os_log_type_t v6 = sub_18264F000();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 96);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 16) = v8;
    id v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
    uint64_t v12 = sub_18264EAC0();
    *(void *)(v0 + 24) = sub_181BF7900(v12, v13, &v15);
    sub_18264F0CC();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_181A5C000, v5, v6, "Failed to retrieve actorID for incoming connection: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v10, -1LL, -1LL);
    MEMORY[0x186E12168](v9, -1LL, -1LL);
  }

  else
  {
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181BF66E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v11 = (uint64_t *)(a1 + 192);
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 192);
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_181C8C0F8(a2), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    swift_retain();
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  swift_endAccess();
  sub_181BC9248((uint64_t)a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NWActorID);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = *v11;
  uint64_t *v11 = 0x8000000000000000LL;
  sub_181C8FD44(a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v11 = v19;
  swift_bridgeObjectRelease();
  sub_181BC920C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t result = swift_endAccess();
  *a4 = v15;
  return result;
}

uint64_t sub_181BF6844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v7 = (uint64_t *)(a1 + 144);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_181C8C01C(a2, a3);
  LOBYTE(a3) = v9;
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v7;
    uint64_t v17 = *v7;
    uint64_t *v7 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_181C91B54();
      uint64_t v11 = v17;
    }

    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for NWActorSystem.ServerRole();
    uint64_t v14 = *(void *)(v13 - 8);
    sub_181BC928C( v12 + *(void *)(v14 + 72) * v8,  a4,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    sub_181C4CA84(v8, v11);
    uint64_t *v7 = v11;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a4, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v15 = type metadata accessor for NWActorSystem.ServerRole();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(a4, 1LL, 1LL, v15);
  }

  return swift_endAccess();
}

void sub_181BF69A0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for NWActorID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3D0);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v43 - v13;
  uint64_t v15 = (os_unfair_lock_s *)(*(void *)(v2 + 128) + 16LL);
  os_unfair_lock_lock(v15);
  uint64_t v58 = v2;
  sub_181BF9984(v65);
  uint64_t v16 = v65[0];
  os_unfair_lock_t v56 = v15;
  os_unfair_lock_unlock(v15);
  unint64_t v18 = 0LL;
  uint64_t v60 = 0LL;
  uint64_t v19 = *(void *)(v16 + 64);
  uint64_t v47 = v16 + 64;
  uint64_t v20 = 1LL << *(_BYTE *)(v16 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  unint64_t v23 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v50 = &v64;
  unint64_t v44 = v23 - 1;
  int64_t v53 = v23;
  unint64_t v45 = v23 - 5;
  uint64_t v59 = v16;
  uint64_t v46 = v16 + 104;
  *(void *)&__int128 v17 = 136315394LL;
  __int128 v49 = v17;
  uint64_t v48 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v57 = v12;
  uint64_t v51 = v8;
  uint64_t v52 = v6;
  uint64_t v55 = v14;
  while (1)
  {
    if (v22)
    {
      unint64_t v61 = v18;
      uint64_t v62 = (v22 - 1) & v22;
      unint64_t v26 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_9;
    }

    int64_t v30 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v30 >= v53)
    {
      unint64_t v61 = v18;
    }

    else
    {
      unint64_t v31 = *(void *)(v47 + 8 * v30);
      if (v31) {
        goto LABEL_13;
      }
      if ((uint64_t)(v18 + 2) >= v53)
      {
        unint64_t v61 = v18 + 1;
      }

      else
      {
        unint64_t v31 = *(void *)(v47 + 8 * (v18 + 2));
        if (v31)
        {
          int64_t v30 = v18 + 2;
          goto LABEL_13;
        }

        if ((uint64_t)(v18 + 3) >= v53)
        {
          unint64_t v61 = v18 + 2;
        }

        else
        {
          unint64_t v31 = *(void *)(v47 + 8 * (v18 + 3));
          if (v31)
          {
            int64_t v30 = v18 + 3;
LABEL_13:
            unint64_t v61 = v30;
            uint64_t v62 = (v31 - 1) & v31;
            unint64_t v26 = __clz(__rbit64(v31)) + (v30 << 6);
LABEL_9:
            uint64_t v27 = v59;
            sub_181BC9248( *(void *)(v59 + 48) + *(void *)(v6 + 72) * v26,  (uint64_t)v12,  (uint64_t (*)(void))type metadata accessor for NWActorID);
            uint64_t v28 = *(void *)(v27 + 56);
            uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3D8);
            *(void *)&v12[*(int *)(v29 + 48)] = *(void *)(v28 + 8 * v26);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v12, 0LL, 1LL, v29);
            swift_retain();
            goto LABEL_16;
          }

          int64_t v30 = v18 + 4;
          if ((uint64_t)(v18 + 4) >= v53)
          {
            unint64_t v61 = v18 + 3;
          }

          else
          {
            unint64_t v31 = *(void *)(v47 + 8 * v30);
            if (v31) {
              goto LABEL_13;
            }
            while (v45 != v18)
            {
              unint64_t v31 = *(void *)(v46 + 8 * v18++);
              if (v31)
              {
                int64_t v30 = v18 + 4;
                goto LABEL_13;
              }
            }

            unint64_t v61 = v44;
          }
        }
      }
    }

    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3D8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v12, 1LL, 1LL, v32);
    uint64_t v62 = 0LL;
LABEL_16:
    sub_181BE625C((uint64_t)v12, (uint64_t)v14, &qword_18C58C3D0);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3D8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48LL))(v14, 1LL, v33) == 1)
    {
      swift_release();
      return;
    }

    uint64_t v34 = *(void *)&v14[*(int *)(v33 + 48)];
    sub_181BC928C((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWActorID);
    if (*v8 == a1 && v8[1] == a2 || (sub_18264F4EC() & 1) != 0)
    {
      if (qword_18C58B118 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_18264E934();
      __swift_project_value_buffer(v35, (uint64_t)qword_18C58C198);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      os_log_type_t v36 = (os_log_s *)sub_18264E91C();
      os_log_type_t v37 = sub_18264F018();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        v65[0] = v54;
        *(_DWORD *)uint64_t v38 = v49;
        uint64_t v63 = v34;
        _s15ActorConnectionCMa(0LL);
        swift_retain();
        uint64_t v39 = sub_18264EAC0();
        uint64_t v63 = sub_181BF7900(v39, v40, v65);
        sub_18264F0CC();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v38 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v63 = sub_181BF7900(a1, a2, v65);
        sub_18264F0CC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_181A5C000, v36, v37, "Canceling connection %s associated with %s", (uint8_t *)v38, 0x16u);
        uint64_t v41 = v54;
        swift_arrayDestroy();
        uint64_t v6 = v52;
        MEMORY[0x186E12168](v41, -1LL, -1LL);
        uint64_t v42 = v38;
        unint64_t v8 = v51;
        MEMORY[0x186E12168](v42, -1LL, -1LL);
      }

      else
      {
        swift_release_n();
        swift_bridgeObjectRelease_n();
      }

      uint64_t v14 = v55;
      uint64_t v24 = v60;
      sub_181C3AAA8();
      unint64_t v25 = v56;
      os_unfair_lock_lock(v56);
      sub_181BF6FD0(v58, v8);
      uint64_t v60 = v24;
      os_unfair_lock_unlock(v25);
      swift_release();
      sub_181BC920C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWActorID);
      uint64_t v12 = v57;
    }

    else
    {
      sub_181BC920C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NWActorID);
      swift_release();
    }

    unint64_t v18 = v61;
    unint64_t v22 = v62;
  }

  __break(1u);
}

uint64_t sub_181BF6FD0(uint64_t a1, void *a2)
{
  id v3 = (uint64_t *)(a1 + 192);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_181C8C0F8(a2);
  LOBYTE(a2) = v5;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_181C91440();
      uint64_t v7 = v11;
    }

    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = type metadata accessor for NWActorID();
    sub_181BC920C( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v4,  (uint64_t (*)(void))type metadata accessor for NWActorID);
    sub_181C4C1DC(v4, v7);
    uint64_t *v3 = v7;
    swift_bridgeObjectRelease();
  }

  swift_endAccess();
  return swift_release();
}

uint64_t sub_181BF70D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v23 = sub_18264F330();
  swift_bridgeObjectRelease();
  if (v23 < v5) {
    goto LABEL_31;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_18264F330();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_18264F330();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_34;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_36;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v7;
  uint64_t v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1LL;
  }

  if (v7 >> 62) {
    goto LABEL_37;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x186E0ED54](v10, v14, 1LL, v7);
  swift_bridgeObjectRelease();
  unint64_t *v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  uint64_t v15 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for NWProtocolOptions();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    void *v15 = v3;
    return sub_18264ECDC();
  }

  if (!(v7 >> 62))
  {
    uint64_t v16 = *(void *)(v13 + 16);
    uint64_t v17 = v16 - v5;
    if (!__OFSUB__(v16, v5)) {
      goto LABEL_21;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  swift_bridgeObjectRetain();
  uint64_t v24 = sub_18264F330();
  swift_bridgeObjectRelease();
  uint64_t v17 = v24 - v5;
  if (__OFSUB__(v24, v5)) {
    goto LABEL_40;
  }
LABEL_21:
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    unint64_t v18 = (char *)(v15 + 1);
    uint64_t v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (void *)v19 || v18 >= &v19[8 * v17]) {
      memmove(v18, v19, 8 * v17);
    }
    if (!(v7 >> 62))
    {
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(void *)(v13 + 16) = v21;
        goto LABEL_28;
      }

      goto LABEL_43;
    }

uint64_t sub_181BF73B0(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }

  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_181BC4EB8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    unint64_t *v3 = v5;
  }

  uint64_t v14 = *(void *)(type metadata accessor for NWEndpoint() - 8);
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_33;
  }
  if (v19 < 0)
  {
LABEL_35:
    uint64_t result = sub_18264F360();
    __break(1u);
    return result;
  }

  unint64_t v20 = v17 + v16;
  unint64_t v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }

  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }

  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  *(void *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1) {
    sub_181BC9248(a3, v17, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }
  return sub_181BDA0F0(a3, &qword_18C58C368);
}

char *sub_181BF7584(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16LL);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_181BC58B4(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }

  uint64_t v14 = (uint64_t)&v5[7 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = (char *)(v14 + 56);
    uint64_t v19 = (char *)&v5[7 * a2 + 4];
    uint64_t v20 = v5[2];
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      __int128 v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(void *)(v14 + 48) = *(void *)(a3 + 48);
      *(void *)uint64_t v3 = v5;
      return result;
    }

    goto LABEL_27;
  }

uint64_t sub_181BF7720@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_181BEBEAC(a1, *(void *)(v2 + 32), *(void *)(v2 + 24), a2);
}

uint64_t sub_181BF772C(uint64_t a1)
{
  __int128 v8 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_181BC92FC;
  *(void *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return swift_task_switch();
}

void sub_181BF77B4()
{
}

uint64_t type metadata accessor for NWActorSystem.ServerRole()
{
  uint64_t result = qword_18C58C330;
  if (!qword_18C58C330) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_181BF77FC()
{
  return sub_181BF3EAC(v0[2], v0[3], v0[4], v0[5]);
}

void *sub_181BF7818(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_181BF787C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_181BF789C(uint64_t a1)
{
  return sub_181BECDFC(a1, v1);
}

uint64_t sub_181BF78B4@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  return sub_181BEC9A4(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t sub_181BF78C0()
{
  return swift_deallocObject();
}

uint64_t sub_181BF78E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_181BEEDE8(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_181BF7900(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_181BF79D0(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_181BF9894((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = MEMORY[0x1896191F8];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_181BF9894((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain();
  }

  __swift_destroy_boxed_opaque_existential_2((uint64_t)v12);
  return v7;
}

uint64_t sub_181BF79D0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_18264F0D8();
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_181BF7B88(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_181BF7C1C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_181BF7D90(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_181BF7D90(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_181BF7C1C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_181BF7818(v2, 0LL);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_18264F174();
      if ((v6 & 1) != 0) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_18264F318();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_18264EB8C();
      if (!v2) {
        return MEMORY[0x18961AFE8];
      }
    }

    sub_18264F360();
    __break(1u);
LABEL_14:
    uint64_t result = sub_18264F318();
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t sub_181BF7D90(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

uint64_t sub_181BF7EDC@<X0>(uint64_t *a1@<X8>)
{
  return sub_181BEE128(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

unint64_t sub_181BF7EF8()
{
  unint64_t result = qword_18C58D600;
  if (!qword_18C58D600)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWActorSystemError,  &type metadata for NWActorSystemError);
    atomic_store(result, (unint64_t *)&qword_18C58D600);
  }

  return result;
}

void sub_181BF7F3C(void *a1@<X8>)
{
}

uint64_t sub_181BF7F58(uint64_t a1)
{
  uint64_t v4 = v1[9];
  uint64_t v5 = v1[10];
  uint64_t v6 = v1[11];
  uint64_t v7 = v1[12];
  uint64_t v8 = v1[13];
  uint64_t v10 = v1[14];
  uint64_t v9 = v1[15];
  size_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_181BC63C4;
  return sub_181BF0470(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_181BF8024( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(a8);
    sub_181BE61C8(a10, a11);
    return swift_release();
  }

  return result;
}

uint64_t dynamic_cast_existential_2_unconditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (result) {
      return a1;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_181BF8108()
{
  return sub_181BF9814( &qword_18C58C280,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for NWActorID,  (uint64_t)&protocol conformance descriptor for NWActorID);
}

uint64_t sub_181BF8138()
{
  return sub_181BF9814( &qword_18C58C288,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for NWActorSystemInvocationDecoder,  (uint64_t)&protocol conformance descriptor for NWActorSystemInvocationDecoder);
}

unint64_t sub_181BF816C()
{
  unint64_t result = qword_18C58C290;
  if (!qword_18C58C290)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWActorSystemInvocationEncoder,  &type metadata for NWActorSystemInvocationEncoder);
    atomic_store(result, (unint64_t *)&qword_18C58C290);
  }

  return result;
}

uint64_t sub_181BF81B0()
{
  return sub_181BF9814( qword_18C58C298,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for NWActorSystemResultHandler,  (uint64_t)&protocol conformance descriptor for NWActorSystemResultHandler);
}

uint64_t type metadata accessor for NWActorSystem()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWActorSystem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWActorSystem.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of NWActorSystem.__allocating_init(service:parameters:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

unint64_t destroy for NWActorSystem.Role(void *a1)
{
  unint64_t result = a1[4];
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[7])
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    unint64_t v3 = a1[10];
    if (v3 >> 60 != 15) {
      sub_181BCD4F0(a1[9], v3);
    }
    return swift_release();
  }

  return result;
}

uint64_t initializeWithCopy for NWActorSystem.Role(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 < 0xFFFFFFFF)
  {
    __int128 v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    __int128 v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    __int128 v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v6;
    uint64_t v8 = (_OWORD *)(a2 + 56);
    uint64_t v7 = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v7;
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }

    else
    {
      *(_OWORD *)(a1 + 56) = *v8;
    }

    int64_t v13 = (uint64_t *)(a2 + 72);
    unint64_t v14 = *(void *)(a2 + 80);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v13;
    }

    else
    {
      uint64_t v15 = *v13;
      sub_181BCD4AC(*v13, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v15;
      *(void *)(a1 + 80) = v14;
    }

    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_retain();
  }

  return a1;
}

uint64_t assignWithCopy for NWActorSystem.Role(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32) >= 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v5 = *((void *)a2 + 7);
      if (*(void *)(a1 + 56))
      {
        if (v5)
        {
          *(void *)(a1 + 56) = v5;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          goto LABEL_24;
        }

        sub_181BD73AC(a1 + 56);
      }

      else if (v5)
      {
        *(void *)(a1 + 56) = v5;
        *(void *)(a1 + 64) = *((void *)a2 + 8);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_24;
      }

      *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
LABEL_24:
      BOOL v17 = (uint64_t *)a2 + 9;
      unint64_t v18 = *((void *)a2 + 10);
      if (*(void *)(a1 + 80) >> 60 == 15LL)
      {
        if (v18 >> 60 != 15)
        {
          uint64_t v19 = *v17;
          sub_181BCD4AC(*v17, *((void *)a2 + 10));
          *(void *)(a1 + 72) = v19;
          *(void *)(a1 + 80) = v18;
LABEL_31:
          *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
          *(_WORD *)(a1 + 89) = *(_WORD *)((char *)a2 + 89);
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          swift_retain();
          swift_release();
          return a1;
        }
      }

      else
      {
        if (v18 >> 60 != 15)
        {
          uint64_t v20 = *v17;
          sub_181BCD4AC(*v17, *((void *)a2 + 10));
          uint64_t v21 = *(void *)(a1 + 72);
          unint64_t v22 = *(void *)(a1 + 80);
          *(void *)(a1 + 72) = v20;
          *(void *)(a1 + 80) = v18;
          sub_181BCD4F0(v21, v22);
          goto LABEL_31;
        }

        sub_181BF86F4(a1 + 72);
      }

      *(_OWORD *)(a1 + 72) = *(_OWORD *)v17;
      goto LABEL_31;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 56))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 >> 60 != 15) {
      sub_181BCD4F0(*(void *)(a1 + 72), v8);
    }
    swift_release();
    goto LABEL_14;
  }

  if (v4 < 0xFFFFFFFF)
  {
LABEL_14:
    __int128 v9 = *a2;
    __int128 v10 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v9;
    __int128 v11 = a2[3];
    __int128 v12 = a2[4];
    __int128 v13 = a2[5];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 48) = v11;
    return a1;
  }

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  uint64_t v7 = (__int128 *)((char *)a2 + 56);
  uint64_t v6 = *((void *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 56) = *v7;
  }

  unint64_t v14 = (uint64_t *)a2 + 9;
  unint64_t v15 = *((void *)a2 + 10);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_181BCD4AC(*v14, *((void *)a2 + 10));
    *(void *)(a1 + 72) = v16;
    *(void *)(a1 + 80) = v15;
  }

  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)((char *)a2 + 89);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_retain();
  return a1;
}

uint64_t sub_181BF86F4(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for NWActorSystem.Role(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) >= 0xFFFFFFFFuLL)
  {
    unint64_t v4 = *(void *)(a2 + 32);
    if (v4 >= 0xFFFFFFFF)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v5 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v4;
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(a2 + 56);
      if (*(void *)(a1 + 56))
      {
        if (v7)
        {
          *(void *)(a1 + 56) = v7;
          swift_bridgeObjectRelease();
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          swift_unknownObjectRelease();
          goto LABEL_14;
        }

        sub_181BD73AC(a1 + 56);
      }

      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_14:
      __int128 v12 = (void *)(a2 + 72);
      unint64_t v13 = *(void *)(a1 + 80);
      if (v13 >> 60 != 15)
      {
        unint64_t v14 = *(void *)(a2 + 80);
        if (v14 >> 60 != 15)
        {
          uint64_t v15 = *(void *)(a1 + 72);
          *(void *)(a1 + 72) = *v12;
          *(void *)(a1 + 80) = v14;
          sub_181BCD4F0(v15, v13);
          goto LABEL_19;
        }

        sub_181BF86F4(a1 + 72);
      }

      *(_OWORD *)(a1 + 72) = *(_OWORD *)v12;
LABEL_19:
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_release();
      return a1;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 56))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 >> 60 != 15) {
      sub_181BCD4F0(*(void *)(a1 + 72), v8);
    }
    swift_release();
  }

  __int128 v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystem.Role(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NWActorSystem.Role(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 96) = 0LL;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }

  return result;
}

uint64_t sub_181BF89B0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_181BE4744(v2, v1) = -1;
  }
  return (v1 + 1);
}

double sub_181BF89C8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 32) = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for NWActorSystem.Role()
{
  return &type metadata for NWActorSystem.Role;
}

uint64_t *sub_181BF8A14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = a2[1];
      *a1 = v7;
      a1[1] = v8;
      swift_retain();
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
      __int128 v10 = (char *)a1 + v9;
      __int128 v11 = (char *)a2 + v9;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
      uint64_t v13 = *(void *)(v12 - 8);
    }

    else
    {
      uint64_t v15 = a2[1];
      *a1 = v7;
      a1[1] = v15;
      swift_unknownObjectRetain();
      uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
      __int128 v10 = (char *)a1 + v16;
      __int128 v11 = (char *)a2 + v16;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
      {
LABEL_7:
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
        memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
LABEL_9:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    goto LABEL_9;
  }

  uint64_t v14 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t sub_181BF8BF8(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    __int128 v2 = &qword_18C58C238;
  }

  else
  {
    swift_unknownObjectRelease();
    __int128 v2 = &qword_18C58C218;
  }

  uint64_t v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v2) + 48);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  return result;
}

void *sub_181BF8CA0(void *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *a2;
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v13 = a2[1];
    *a1 = v5;
    a1[1] = v13;
    swift_unknownObjectRetain();
    uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
    uint64_t v8 = (char *)a1 + v14;
    uint64_t v9 = (char *)a2 + v14;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
    uint64_t v11 = *(void *)(v10 - 8);
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    goto LABEL_6;
  }

  uint64_t v6 = a2[1];
  *a1 = v5;
  a1[1] = v6;
  swift_retain();
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v11 = *(void *)(v10 - 8);
LABEL_3:
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
  memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
LABEL_6:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_181BF8E58(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = v5;
      a1[1] = v6;
      swift_retain();
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
      {
LABEL_4:
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
LABEL_7:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      uint64_t v13 = a2[1];
      *a1 = v5;
      a1[1] = v13;
      swift_unknownObjectRetain();
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
      uint64_t v8 = (char *)a1 + v14;
      uint64_t v9 = (char *)a2 + v14;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
      uint64_t v11 = *(void *)(v10 - 8);
    }

    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    goto LABEL_7;
  }

  return a1;
}

void *sub_181BF9028(void *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *a2;
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v13 = a2[1];
    *a1 = v5;
    a1[1] = v13;
    uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
    uint64_t v8 = (char *)a1 + v14;
    uint64_t v9 = (char *)a2 + v14;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
    uint64_t v11 = *(void *)(v10 - 8);
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    goto LABEL_6;
  }

  uint64_t v6 = a2[1];
  *a1 = v5;
  a1[1] = v6;
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v11 = *(void *)(v10 - 8);
LABEL_3:
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
  memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
LABEL_6:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_181BF91D0(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = v5;
      a1[1] = v6;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C238) + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
      {
LABEL_4:
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
LABEL_7:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      uint64_t v13 = a2[1];
      *a1 = v5;
      a1[1] = v13;
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C218) + 48);
      uint64_t v8 = (char *)a1 + v14;
      uint64_t v9 = (char *)a2 + v14;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
      uint64_t v11 = *(void *)(v10 - 8);
    }

    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    goto LABEL_7;
  }

  return a1;
}

void sub_181BF9390()
{
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v3 = &v2;
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v1;
    swift_initEnumMetadataMultiPayload();
  }

void sub_181BF9434()
{
  if (!qword_18C58A1F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58A1F0);
    unint64_t v0 = sub_18264F09C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_18C58A1F8);
    }
  }

uint64_t sub_181BF9490(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_181BC461C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t v12 = a1 << 6;
  uint64_t v13 = (char *)&v4[8 * a1 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC60);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v15 = v4[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    unint64_t v18 = (char *)&v4[8 * a2 + 4];
    size_t v19 = v17 << 6;
    if (v12 != a2 << 6 || v13 >= &v18[v19]) {
      uint64_t result = (uint64_t)memmove(v13, v18, v19);
    }
    uint64_t v20 = v4[2];
    BOOL v16 = __OFADD__(v20, v8);
    uint64_t v21 = v20 - v7;
    if (!v16)
    {
      void v4[2] = v21;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

uint64_t sub_181BF9608()
{
  return swift_deallocObject();
}

uint64_t sub_181BF962C(void *a1)
{
  return sub_181C3B6B0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_181BF9634()
{
  return swift_deallocObject();
}

uint64_t sub_181BF965C(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_181BC92FC;
  *(_OWORD *)(v4 + 72) = v5;
  *(void *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t objectdestroy_47Tm()
{
  return swift_deallocObject();
}

uint64_t sub_181BF96F4(unint64_t a1)
{
  return sub_181BF47C4(a1);
}

uint64_t sub_181BF96FC(uint64_t *a1)
{
  return sub_181BF4860(a1);
}

uint64_t sub_181BF9704@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 136);
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF9748@<X0>(void *a1@<X8>)
{
  return sub_181C3BC3C(v1, a1);
}

double sub_181BF9760@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_181BF4378(*(void *)(v1 + 16), (void *)*(void *)(v1 + 24), a1).n128_u64[0];
  return result;
}

uint64_t sub_181BF9778(uint64_t a1)
{
  return sub_181BFB8A8(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_181BF9780(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  int64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_181BC92FC;
  return sub_181BF38A0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_181BF9814(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = MEMORY[0x186E12084](a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }

  return a2;
}

uint64_t sub_181BF9894(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_181BF98D0@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(*(void *)(v1 + 144) + 16LL) == 0LL;
  return result;
}

void sub_181BF9924(void *a1@<X8>)
{
  *(_BYTE *)(v1 + 176) = 0;
  uint64_t v2 = *(void *)(v1 + 168);
  *(void *)(v1 + 168) = 0LL;
  *a1 = v2;
}

uint64_t sub_181BF9938@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 184);
  *(void *)(v1 + 184) = MEMORY[0x18961AFE8];
  *a1 = v4;
  return result;
}

uint64_t sub_181BF9984@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 192);
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF99C8()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_181BF99F0(uint64_t a1)
{
  return sub_181BED6AC( a1,  *(void (**)(uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_181BF9A00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181BD2FFC(a8);
    sub_181BE4844(a10, a11);
    return swift_retain();
  }

  return result;
}

uint64_t sub_181BF9A84(uint64_t a1)
{
  return sub_181BF5574(a1);
}

uint64_t sub_181BF9A8C(unsigned int *a1)
{
  return sub_181BF587C(a1);
}

uint64_t sub_181BF9A94@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 144);
  return swift_bridgeObjectRetain();
}

uint64_t sub_181BF9AD8@<X0>(void *a1@<X8>)
{
  *(_BYTE *)(v1 + 176) = 1;
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 184);
  *(void *)(v1 + 184) = MEMORY[0x18961AFE8];
  *a1 = v4;
  return result;
}

uint64_t sub_181BF9B2C()
{
  return swift_deallocObject();
}

uint64_t sub_181BF9B60(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_181BC63C4;
  return sub_181BF5FB0(a1, v4, v5, v7, v6);
}

void sub_181BF9BD8(uint64_t a1)
{
}

uint64_t sub_181BF9BE0@<X0>(void *a1@<X8>)
{
  return sub_181BF66E0(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_181BF9C04()
{
  return sub_181BF77FC();
}

void sub_181BF9C20(void *a1@<X8>)
{
}

nw_error *sub_181BF9C34@<X0>(nw_error *result@<X0>, uint64_t a2@<X8>)
{
  if (result)
  {
    uint64_t v3 = result;
    nw_error_domain_t error_domain = nw_error_get_error_domain(result);
    switch(error_domain)
    {
      case nw_error_domain_tls:
        unsigned int error_code = nw_error_get_error_code(v3);
        uint64_t result = (nw_error *)swift_unknownObjectRelease();
        uint64_t v6 = error_code | 0x200000000LL;
        break;
      case nw_error_domain_dns:
        unsigned int v8 = nw_error_get_error_code(v3);
        uint64_t result = (nw_error *)swift_unknownObjectRelease();
        uint64_t v6 = v8 | 0x100000000LL;
        break;
      case nw_error_domain_posix:
        nw_error_get_error_code(v3);
        uint64_t v5 = sub_18264E94C();
        uint64_t result = (nw_error *)swift_unknownObjectRelease();
        uint64_t v6 = 22LL;
        if ((v5 & 0x100000000LL) == 0) {
          uint64_t v6 = v5;
        }
        break;
      default:
        uint64_t result = (nw_error *)swift_unknownObjectRelease();
        uint64_t v6 = 22LL;
        break;
    }
  }

  else
  {
    uint64_t v6 = 0xFF00000000LL;
  }

  *(_DWORD *)a2 = v6;
  *(_BYTE *)(a2 + 4) = BYTE4(v6);
  return result;
}

uint64_t NWError.init(_:)@<X0>(nw_error *a1@<X0>, uint64_t a2@<X8>)
{
  nw_error_domain_t error_domain = nw_error_get_error_domain(a1);
  switch(error_domain)
  {
    case nw_error_domain_tls:
      LODWORD(sub_181BD3224(v4, v5) = nw_error_get_error_code(a1);
      uint64_t result = swift_unknownObjectRelease();
      char v7 = 2;
      break;
    case nw_error_domain_dns:
      LODWORD(sub_181BD3224(v4, v5) = nw_error_get_error_code(a1);
      uint64_t result = swift_unknownObjectRelease();
      char v7 = 1;
      break;
    case nw_error_domain_posix:
      nw_error_get_error_code(a1);
      uint64_t v5 = sub_18264E94C();
      uint64_t result = swift_unknownObjectRelease();
      char v7 = 0;
      if ((v5 & 0x100000000LL) != 0) {
        LODWORD(sub_181BD3224(v4, v5) = 22;
      }
      break;
    default:
      uint64_t result = swift_unknownObjectRelease();
      char v7 = 0;
      LODWORD(sub_181BD3224(v4, v5) = 22;
      break;
  }

  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v7;
  return result;
}

uint64_t sub_181BF9DCC()
{
  if (!*(_BYTE *)(v0 + 4))
  {
    uint64_t v4 = (char *)swift_slowAlloc();
    int v5 = sub_18264E958();
    if (strerror_r(v5, v4, 0x80uLL)) {
      uint64_t v3 = 0x6E776F6E6B6E55LL;
    }
    else {
      uint64_t v3 = sub_18264EB80();
    }
    MEMORY[0x186E12168](v4, -1LL, -1LL);
    return v3;
  }

  OSStatus v1 = *(_DWORD *)v0;
  if (*(_BYTE *)(v0 + 4) != 1)
  {
    CFStringRef v6 = SecCopyErrorMessageString(v1, 0LL);
    if (!v6) {
      return 0x6E776F6E6B6E55LL;
    }
    char v7 = (__CFString *)v6;
    uint64_t v3 = sub_18264EA48();

    return v3;
  }

  uint64_t result = (uint64_t)nwlog_get_string_for_dns_service_error(v1);
  if (result) {
    return sub_18264EB80();
  }
  __break(1u);
  return result;
}

uint64_t NWError.debugDescription.getter()
{
  if (*(_BYTE *)(v0 + 4))
  {
    uint64_t v2 = sub_18264F480();
  }

  else
  {
    uint64_t v2 = 0LL;
    sub_18264F2DC();
  }

  sub_18264EB74();
  sub_181BF9DCC();
  sub_18264EB74();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_181BF9FDC()
{
  return sub_18264F5F4();
}

uint64_t sub_181BFA004()
{
  return sub_18264F5E8();
}

uint64_t NWError.errorCode.getter()
{
  LODWORD(result) = *(_DWORD *)v0;
  if (!*(_BYTE *)(v0 + 4)) {
    LODWORD(result) = sub_18264E958();
  }
  return (int)result;
}

unint64_t NWError.errorUserInfo.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18265BE50;
  unint64_t result = *MEMORY[0x189604F38];
  if (*MEMORY[0x189604F38])
  {
    *(void *)(inited + 32) = sub_18264EA48();
    *(void *)(inited + 40) = v2;
    uint64_t v3 = sub_181BF9DCC();
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 48) = v3;
    *(void *)(inited + 56) = v4;
    return sub_181C883B0(inited);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NWError._domain.getter()
{
  return sub_18264EA48();
}

uint64_t sub_181BFA10C()
{
  LODWORD(result) = *(_DWORD *)v0;
  if (!*(_BYTE *)(v0 + 4)) {
    LODWORD(result) = sub_18264E958();
  }
  return (int)result;
}

BOOL _s7Network7NWErrorO2eeoiySbAC_ACtFZ_0(int *a1, int *a2)
{
  int v3 = *a1;
  int v4 = *((unsigned __int8 *)a1 + 4);
  int v5 = *a2;
  int v6 = *((unsigned __int8 *)a2 + 4);
  if (v4)
  {
    BOOL v8 = v6 == 1 && v3 == v5;
    BOOL v10 = v6 == 2 && v3 == v5;
    if (v4 == 1) {
      return v8;
    }
    else {
      return v10;
    }
  }

  else if (*((_BYTE *)a2 + 4))
  {
    return 0LL;
  }

  else
  {
    int v12 = sub_18264E958();
    return v12 == sub_18264E958();
  }

uint64_t getEnumTagSinglePayload for NWError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_181BFA23C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_181BFA244(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWError()
{
  return &type metadata for NWError;
}

unint64_t sub_181BFA25C()
{
  unint64_t result = qword_18C58C408;
  if (!qword_18C58C408)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for NWError, &type metadata for NWError);
    atomic_store(result, (unint64_t *)&qword_18C58C408);
  }

  return result;
}

void NWListener.__allocating_init(service:using:)(unsigned __int8 *a1)
{
}

void NWListener.newConnectionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 192));
  uint64_t v6 = *(void *)(v5 + 16);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 192));
  if (a1)
  {
    char v7 = *(nw_listener **)(v2 + 24);
    uint64_t v8 = *(void *)(v2 + 32);
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v8;
    v9[3] = a1;
    void v9[4] = a2;
    void v11[4] = sub_181BFE2A0;
    v11[5] = v9;
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 1107296256LL;
    v11[2] = sub_181BFB944;
    v11[3] = &block_descriptor_3;
    BOOL v10 = _Block_copy(v11);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_listener_set_new_connection_handler(v7, v10);
    sub_181BD25B8(a1);
    _Block_release(v10);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_listener_set_new_connection_handler(*(nw_listener_t *)(v2 + 24), 0LL);
  }

uint64_t NWListener.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 192));
  uint64_t v6 = *(void *)(v5 + 48);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 48) = a1;
  *(void *)(v5 + 56) = a2;
  LODWORD((*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6) = *(unsigned __int8 *)(v5 + 189);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 192));
  if ((_DWORD)v6 != 1) {
    return sub_181BD25B8(a1);
  }
  char v7 = *(nw_listener **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v2;
  void v8[3] = a1;
  v8[4] = a2;
  void v11[4] = sub_181BFE2F8;
  v11[5] = v8;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  v11[2] = sub_181BD1944;
  v11[3] = &block_descriptor_6_2;
  uint64_t v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_181BC904C(a1);
  swift_release();
  nw_listener_set_state_changed_handler(v7, v9);
  sub_181BD25B8(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void NWListener.start(queue:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 192));
  uint64_t v5 = *(void **)(v4 + 176);
  uint64_t v6 = a1;

  *(void *)(v4 + 176) = a1;
  *(_BYTE *)(v4 + 189) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 192));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 192));
  sub_181BFC16C(v4 + 16, v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 192));
  if (v11[0])
  {
    __int128 v10 = *(_OWORD *)v11;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    uint64_t v8 = sub_181BD639C;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
  }

  sub_181BC904C((uint64_t)v8);
  sub_181BC904C((uint64_t)v8);
  NWListener.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_181BD25B8((uint64_t)v8);
  sub_181BD25B8((uint64_t)v8);
  uint64_t v9 = *(nw_listener **)(v2 + 24);
  nw_listener_set_queue(v9, v6);
  nw_listener_start(v9);
}

Swift::Void __swiftcall NWListener.cancel()()
{
}

uint64_t NWListener.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 24), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

uint64_t NWListener.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWListener.Service.Invitation.debugDescription.getter()
{
  BYTE8(sub_181BD3028(v3, v2) = 0;
  *(void *)&__int128 v2 = *v0;
  sub_18264F2DC();
  sub_18264EB74();
  sub_18264F2DC();
  return *(void *)((char *)&v2 + 1);
}

Network::NWListener::Service::Invitation::Route_optional __swiftcall NWListener.Service.Invitation.Route.init(rawValue:)( Swift::String rawValue)
{
  return (Network::NWListener::Service::Invitation::Route_optional)sub_181BFAA3C(v1);
}

uint64_t NWListener.Service.Invitation.Route.rawValue.getter()
{
  uint64_t v1 = 0x646F70656D6F68LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x72656B61657073LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7496035LL;
  }
}

uint64_t sub_181BFA814(char *a1, unsigned __int8 *a2)
{
  return sub_181CAB458(*a1, *a2);
}

uint64_t sub_181BFA820()
{
  return sub_18264F684();
}

uint64_t sub_181BFA8B8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181BFA92C()
{
  return sub_18264F684();
}

Network::NWListener::Service::Invitation::Route_optional sub_181BFA9C0(Swift::String *a1)
{
  return NWListener.Service.Invitation.Route.init(rawValue:)(*a1);
}

void sub_181BFA9CC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000LL;
  uint64_t v4 = 0x646F70656D6F68LL;
  if (v2 != 1) {
    uint64_t v4 = 0x72656B61657073LL;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 7496035LL;
  }
  if (!v5) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  *a1 = v6;
  a1[1] = v3;
}

void NWListener.Service.Invitation.route.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

Network::NWListener::Service::Invitation::Scope_optional __swiftcall NWListener.Service.Invitation.Scope.init(rawValue:)( Swift::String rawValue)
{
  return (Network::NWListener::Service::Invitation::Scope_optional)sub_181BFAA3C(v1);
}

uint64_t sub_181BFAA3C@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_18264F390();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t NWListener.Service.Invitation.Scope.rawValue.getter()
{
  uint64_t v1 = 0x73646E65697266LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x656E6F7972657665LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74696D69786F7270LL;
  }
}

Network::NWListener::Service::Invitation::Scope_optional sub_181BFAAF0(Swift::String *a1)
{
  return NWListener.Service.Invitation.Scope.init(rawValue:)(*a1);
}

void NWListener.Service.Invitation.scope.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *static NWListener.Service.Invitation.wrangler(route:scope:)@<X0>( _BYTE *result@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  char v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

uint64_t sub_181BFAB20()
{
  BYTE8(sub_181BD3028(v3, v2) = 0;
  *(void *)&__int128 v2 = *v0;
  sub_18264F2DC();
  sub_18264EB74();
  sub_18264F2DC();
  return *(void *)((char *)&v2 + 1);
}

uint64_t NWListener.Service.txtRecordObject.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  *a1 = v2;
  a1[1] = v3;
  return sub_181BD2FFC(v2);
}

void NWListener.Service.invitation.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 89);
}

uint64_t NWListener.Service.debugDescription.getter()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  unint64_t v3 = *(void *)(v0 + 80);
  __int16 v4 = *(_WORD *)(v0 + 89);
  if (*(void *)(v0 + 16))
  {
    uint64_t v7 = *(void *)(v0 + 8);
    swift_bridgeObjectRetain();
    sub_18264EB74();
  }

  else
  {
    uint64_t v7 = 11818LL;
  }

  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease();
  if (v2) {
    sub_18264EB74();
  }
  sub_18264EB74();
  uint64_t v5 = v7;
  if (v3 >> 60 != 15) {
    __asm { BR              X9 }
  }

  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264F2DC();
    sub_181BD6288(v1);
    uint64_t v5 = 0LL;
  }

  if (v4 != 3)
  {
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_18264EB74();
    sub_18264F2DC();
    return 0LL;
  }

  return v5;
}

uint64_t NWListener.Service.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWListener.Service.type.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWListener.Service.domain.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWListener.Service.txtRecordObject.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_181BD6288(*(void *)(v1 + 56));
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v3;
  return result;
}

uint64_t (*NWListener.Service.txtRecordObject.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  *a1 = v3;
  a1[1] = v4;
  sub_181BD2FFC(v3);
  return sub_181BFAFF0;
}

uint64_t sub_181BFAFF0(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v3 + 56);
  if ((a2 & 1) != 0)
  {
    sub_181BD2FFC(*a1);
    sub_181BD6288(v5);
    *(void *)(v3 + 56) = v4;
    *(void *)(v3 + 64) = v2;
    return sub_181BD6288(v4);
  }

  else
  {
    uint64_t result = sub_181BD6288(*(void *)(v3 + 56));
    *(void *)(v3 + 56) = v4;
    *(void *)(v3 + 64) = v2;
  }

  return result;
}

uint64_t NWListener.Service.txtRecord.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_181BE4844(v1, *(void *)(v0 + 80));
  return v1;
}

uint64_t NWListener.Service.noAutoRename.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t NWListener.Service.noAutoRename.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 88) = result;
  return result;
}

_BYTE *(*NWListener.Service.noAutoRename.modify(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 88);
  return sub_181BFB0CC;
}

_BYTE *sub_181BFB0CC(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 88LL) = result[8];
  return result;
}

_WORD *NWListener.Service.invitation.setter(_WORD *result)
{
  *(_WORD *)(v1 + 89) = *result;
  return result;
}

_WORD *(*NWListener.Service.invitation.modify(uint64_t a1))(_WORD *result)
{
  *(void *)a1 = v1;
  *(_WORD *)(a1 + 8) = *(_WORD *)(v1 + 89);
  return sub_181BFB104;
}

_WORD *sub_181BFB104(_WORD *result)
{
  *(_WORD *)(*(void *)result + 89LL) = result[4];
  return result;
}

uint64_t NWListener.Service.init(name:type:domain:txtRecord:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_BYTE *)(a9 + 88) = 0;
  *(void *)(a9 + 8) = result;
  *(void *)(a9 + 16) = a2;
  *(void *)(a9 + 24) = a3;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 48) = a6;
  *(void *)(a9 + 72) = a7;
  *(void *)(a9 + 80) = a8;
  *(_BYTE *)a9 = 0;
  *(void *)(a9 + 56) = 0LL;
  *(void *)(a9 + 64) = 0LL;
  *(_WORD *)(a9 + 89) = 3;
  return result;
}

__n128 NWListener.Service.init(name:type:domain:txtRecord:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __n128 *a7@<X6>, uint64_t a8@<X8>)
{
  *(_BYTE *)(a8 + 88) = 0;
  *(void *)(a8 + 8) = a1;
  *(void *)(a8 + 16) = a2;
  *(void *)(a8 + 24) = a3;
  *(void *)(a8 + 32) = a4;
  *(void *)(a8 + 40) = a5;
  *(void *)(a8 + 48) = a6;
  *(_OWORD *)(a8 + 72) = xmmword_18265D180;
  __n128 result = *a7;
  *(__n128 *)(a8 + 56) = *a7;
  *(_BYTE *)a8 = 0;
  *(_WORD *)(a8 + 89) = 3;
  return result;
}

double NWListener.Service.init(applicationService:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + 88) = 0;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
  *(void *)(a3 + 40) = 0LL;
  *(void *)(a3 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a3 + 72) = xmmword_18265D180;
  *(void *)(a3 + 56) = 0LL;
  *(void *)(a3 + 64) = 0LL;
  *(_BYTE *)a3 = 1;
  *(_WORD *)(a3 + 89) = 3;
  return result;
}

double NWListener.Service.init(applicationService:invitation:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)(a4 + 88) = 0;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 24) = a1;
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = 0LL;
  *(void *)(a4 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a4 + 72) = xmmword_18265D180;
  *(void *)(a4 + 56) = 0LL;
  *(void *)(a4 + 64) = 0LL;
  *(_BYTE *)a4 = 1;
  *(_WORD *)(a4 + 89) = *a3;
  return result;
}

nw_advertise_descriptor *sub_181BFB1D8()
{
  if (*(_BYTE *)v0 != 1)
  {
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 56);
    txt_record = *(nw_txt_record **)(v0 + 64);
    unint64_t v6 = *(void *)(v0 + 80);
    int v12 = *(unsigned __int8 *)(v0 + 88);
    if (*(void *)(v0 + 16)) {
      uint64_t v7 = (const char *)(sub_18264EACC() + 32);
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v8 = (const char *)(sub_18264EACC() + 32);
    if (v4) {
      uint64_t v9 = (const char *)(sub_18264EACC() + 32);
    }
    else {
      uint64_t v9 = 0LL;
    }
    nw_browse_descriptor_t bonjour_service = nw_advertise_descriptor_create_bonjour_service(v7, v8, v9);
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    if (v6 >> 60 != 15) {
      __asm { BR              X10 }
    }

    if (v5)
    {
      if (!bonjour_service) {
        goto LABEL_22;
      }
      nw_advertise_descriptor_set_txt_record_object(bonjour_service, txt_record);
    }

    if (v12)
    {
      if (bonjour_service)
      {
        nw_advertise_descriptor_set_no_auto_rename(bonjour_service, 1);
        return bonjour_service;
      }

      __break(1u);
    }

    else if (bonjour_service)
    {
      return bonjour_service;
    }

    __break(1u);
LABEL_22:
    __break(1u);
    JUMPOUT(0x181BFB588LL);
  }

  unsigned int v1 = *(unsigned __int16 *)(v0 + 89);
  uint64_t v2 = sub_18264EACC();
  nw_browse_descriptor_t bonjour_service = nw_advertise_descriptor_create_application_service((const char *)(v2 + 32));
  swift_release();
  return bonjour_service;
}

uint64_t sub_181BFB618@<X0>(nw_error_t error@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  switch((int)result)
  {
    case 0:
      double result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000000LL;
      break;
    case 1:
      if (error)
      {
        nw_error_domain_t error_domain = nw_error_get_error_domain(error);
        switch(error_domain)
        {
          case nw_error_domain_tls:
            unsigned int error_code = nw_error_get_error_code(error);
            double result = swift_unknownObjectRelease();
            unint64_t v5 = error_code | 0x200000000LL;
            break;
          case nw_error_domain_dns:
            unsigned int v9 = nw_error_get_error_code(error);
            double result = swift_unknownObjectRelease();
            unint64_t v5 = v9 | 0x100000000LL;
            break;
          case nw_error_domain_posix:
            nw_error_get_error_code(error);
            uint64_t v7 = sub_18264E94C();
            double result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            if ((v7 & 0x100000000LL) == 0) {
              unint64_t v5 = v7;
            }
            break;
          default:
            double result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            break;
        }
      }

      else
      {
        unint64_t v5 = 50LL;
      }

      break;
    case 2:
      double result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000001LL;
      break;
    case 3:
      double result = (uint64_t)sub_181BF9C34(error, (uint64_t)&v10);
      unint64_t v5 = 0x4000000016LL;
      if (v11 != 255LL) {
        unint64_t v5 = v10 | ((unint64_t)v11 << 32) | 0x4000000000LL;
      }
      break;
    default:
      double result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000002LL;
      break;
  }

  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = BYTE4(v5);
  return result;
}

uint64_t (*NWListener.newConnectionHandler.getter())(uint64_t a1)
{
  unsigned int v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_181BFB948(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BFE328;
}

void sub_181BFB828(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181C0079C;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWListener.newConnectionHandler.setter((uint64_t)v4, v3);
}

uint64_t sub_181BFB8A8(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = a1;
  return a2(&v3);
}

uint64_t sub_181BFB8D8(nw_connection *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result = sub_181C6BDFC(a2, a1);
  if (result)
  {
    a3();
    return swift_release();
  }

  return result;
}

uint64_t sub_181BFB948@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    __int128 v6 = sub_181BF962C;
  }

  else
  {
    __int128 v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWListener.newConnectionHandler.modify( uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t *)&v3[4];
  uint64_t v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_181BFB948(v4, &v10);
  os_unfair_lock_unlock(v5);
  __int128 v6 = (uint64_t (*)(uint64_t))v10;
  if ((void)v10)
  {
    __int128 v9 = v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    __int128 v6 = sub_181C0079C;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_181BFBA64;
}

uint64_t sub_181BFBA64(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWListener.newConnectionHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BDA298,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t (*NWListener.newConnectionGroupHandler.getter())(uint64_t)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_181BFBD74(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181C0079C;
}

void sub_181BFBB1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181C0079C;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWListener.newConnectionGroupHandler.setter((uint64_t)v4, v3);
}

void NWListener.newConnectionGroupHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 192));
  uint64_t v6 = *(void *)(v5 + 32);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 192));
  if (a1)
  {
    uint64_t v7 = *(nw_listener **)(v2 + 24);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    v10[4] = sub_181BFE358;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    void v10[2] = sub_181BFB944;
    v10[3] = &block_descriptor_25_0;
    __int128 v9 = _Block_copy(v10);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_listener_set_new_connection_group_handler(v7, v9);
    sub_181BD25B8(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_listener_set_new_connection_handler(*(nw_listener_t *)(v2 + 24), 0LL);
  }

uint64_t sub_181BFBCFC(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = (nw_connection_group *)swift_unknownObjectRetain();
  uint64_t result = sub_181C76458(v3);
  if (result)
  {
    a2();
    return swift_release();
  }

  return result;
}

uint64_t sub_181BFBD74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181C00730;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWListener.newConnectionGroupHandler.modify( uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_181BFBD74(v4, &v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (uint64_t (*)(uint64_t))v10;
  if ((void)v10)
  {
    __int128 v9 = v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181C0079C;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_181BFBE90;
}

uint64_t sub_181BFBE90(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWListener.newConnectionGroupHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BDA298,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

void NWListener.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 184);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 188);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 192));
}

uint64_t (*NWListener.stateUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_181BFC16C(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BDA300;
}

uint64_t sub_181BFBF90(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    int v4 = sub_181BDA300;
  }

  else
  {
    int v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  return NWListener.stateUpdateHandler.setter((uint64_t)v4, v3);
}

void sub_181BFC010(uint64_t a1, nw_error *a2, uint64_t a3, void (*a4)(int *))
{
  uint64_t v7 = *(os_unfair_lock_s **)(a3 + 16);
  uint64_t v8 = (uint64_t)&v7[4];
  __int128 v9 = v7 + 48;
  os_unfair_lock_lock(v7 + 48);
  sub_181BFC0A8(v8, a1, a2, (uint64_t)&v10);
  os_unfair_lock_unlock(v9);
  if (a4) {
    a4(&v10);
  }
}

uint64_t sub_181BFC0A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, nw_error *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_181BFB618(a3, a2, (uint64_t)&v11);
  unsigned int v9 = v11;
  unint64_t v10 = v11 | ((unint64_t)v12 << 32);
  *(_BYTE *)(a1 + 172) = v12;
  *(_DWORD *)(a1 + 168) = v9;
  if (v10 >= 0x8000000002LL)
  {
    uint64_t result = nw_utilities_minos_atleast();
    if ((_DWORD)result)
    {
      sub_181BD25B8(*(void *)(a1 + 32));
      *(void *)(a1 + 32) = 0LL;
      *(void *)(a1 + 40) = 0LL;
      sub_181BD25B8(*(void *)(a1 + 16));
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + 24) = 0LL;
      sub_181BD25B8(*(void *)a1);
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      uint64_t result = sub_181BD25B8(*(void *)(a1 + 48));
      *(void *)(a1 + 48) = 0LL;
      *(void *)(a1 + 56) = 0LL;
    }
  }

  *(_DWORD *)a4 = v10;
  *(_BYTE *)(a4 + 4) = BYTE4(v10);
  return result;
}

uint64_t sub_181BFC16C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    __int128 v6 = sub_181BD639C;
  }

  else
  {
    __int128 v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWListener.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_181BFC16C(v4, v10);
  os_unfair_lock_unlock(v5);
  __int128 v6 = v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    __int128 v6 = sub_181BDA300;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_181BFC288;
}

uint64_t sub_181BFC288(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  NWListener.stateUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BC904C,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t NWListener.parameters.getter()
{
  return swift_retain();
}

void NWListener.service.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_181BFC490(v4, a1);
  os_unfair_lock_unlock(v5);
}

double sub_181BFC304@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_181BFC490(v4, (uint64_t)v12);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v14;
  __int16 v7 = v15;
  char v8 = v16;
  __int128 v9 = v12[1];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v9;
  __int128 v10 = v12[3];
  *(_OWORD *)(a2 + 32) = v12[2];
  *(_OWORD *)(a2 + 48) = v10;
  double result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  *(void *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 90) = v8;
  *(_WORD *)(a2 + 88) = v7;
  return result;
}

uint64_t sub_181BFC394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a2 + 16LL);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 48;
  sub_181BFE418( (uint64_t)v7,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE47C);
  os_unfair_lock_lock(v5);
  sub_181C006D8(v4);
  os_unfair_lock_unlock(v5);
  return sub_181BFE418( (uint64_t)v7,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE3A8);
}

uint64_t NWListener.service.setter(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v3 = (uint64_t)&v2[4];
  uint64_t v4 = v2 + 48;
  os_unfair_lock_lock(v2 + 48);
  sub_181BFC510(v3, (uint64_t)v6, v1);
  os_unfair_lock_unlock(v4);
  return sub_181BFE418( (uint64_t)v6,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE3A8);
}

uint64_t sub_181BFC490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = *(void *)(a1 + 136);
  unint64_t v12 = *(void *)(a1 + 144);
  char v13 = *(_BYTE *)(a1 + 154);
  __int16 v14 = *(_WORD *)(a1 + 152);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v12;
  *(_BYTE *)(a2 + 90) = v13;
  *(_WORD *)(a2 + 88) = v14;
  return sub_181BFE47C(v3, v2, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

void sub_181BFC510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 112);
  uint64_t v14 = *(void *)(a1 + 120);
  __int128 v13 = *(_OWORD *)(a1 + 128);
  unint64_t v10 = *(void *)(a1 + 144);
  sub_181BFE360(a2, a1 + 64);
  sub_181BFE418( a2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE47C);
  sub_181BFE3A8(v4, v5, v6, v7, v8, v9, v15, v14, v13, *((uint64_t *)&v13 + 1), v10);
  sub_181BFE360(a2, (uint64_t)&v17);
  if ((void)v18)
  {
    uint64_t v11 = *(nw_listener **)(a3 + 24);
    sub_181BFE418( a2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE47C);
    swift_unknownObjectRetain();
    unint64_t v12 = sub_181BFB1D8();
    nw_listener_set_advertise_descriptor(v11, v12);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_181BFE418( a2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE3A8);
  }

  else
  {
    nw_listener_set_advertise_descriptor(*(nw_listener_t *)(a3 + 24), 0LL);
  }

void (*NWListener.service.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x138uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 16);
  v3[36] = v1;
  v3[37] = v4;
  uint64_t v5 = (uint64_t)&v4[4];
  uint64_t v6 = v4 + 48;
  os_unfair_lock_lock(v4 + 48);
  sub_181BFC490(v5, (uint64_t)(v3 + 24));
  v3[38] = 0LL;
  os_unfair_lock_unlock(v6);
  return sub_181BFC714;
}

void sub_181BFC714(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 24);
  uint64_t v4 = (os_unfair_lock_s *)v2[37];
  uint64_t v5 = v2[38];
  uint64_t v6 = v2[36];
  uint64_t v7 = v4 + 48;
  uint64_t v8 = (uint64_t)&v4[4];
  if ((a2 & 1) == 0)
  {
    sub_181BFE360(v3, (uint64_t)(v2 + 12));
    os_unfair_lock_lock(v7);
    sub_181BFC510(v8, (uint64_t)(v2 + 12), v6);
    os_unfair_lock_unlock(v7);
    sub_181BFE418( (uint64_t)(v2 + 12),  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE3A8);
    goto LABEL_5;
  }

  sub_181BFE360(v3, (uint64_t)v2);
  sub_181BFE418( (uint64_t)v2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE47C);
  os_unfair_lock_lock(v7);
  sub_181BFC510(v8, (uint64_t)v2, v6);
  uint64_t v9 = (os_unfair_lock_s *)(v2[37] + 192LL);
  if (!v5)
  {
    os_unfair_lock_unlock(v9);
    sub_181BFE418( (uint64_t)v2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, int))sub_181BFE3A8);
    sub_181BFE3A8(v2[24], v2[25], v2[26], v2[27], v2[28], v2[29], v2[30], v2[31], v2[32], v2[33], v2[34]);
LABEL_5:
    free(v2);
    return;
  }

  os_unfair_lock_unlock(v9);
  __break(1u);
}

uint64_t static NWListener.InfiniteConnectionLimit.getter()
{
  return 0xFFFFFFFFLL;
}

uint64_t NWListener.newConnectionLimit.getter()
{
  return nw_listener_get_new_connection_limit(*(nw_listener_t *)(v0 + 24));
}

void sub_181BFC870(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  if ((*a1 & 0x8000000000000000LL) != 0 || HIDWORD(v3))
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_listener_set_new_connection_limit(*(nw_listener_t *)(*(void *)a2 + 24LL), v3);
  }

void NWListener.newConnectionLimit.setter(unint64_t new_connection_limit)
{
  if ((new_connection_limit & 0x8000000000000000LL) != 0 || HIDWORD(new_connection_limit))
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_listener_set_new_connection_limit(*(nw_listener_t *)(v1 + 24), new_connection_limit);
  }

void (*NWListener.newConnectionLimit.modify(void *a1))(unint64_t *a1)
{
  unint64_t v3 = *(nw_listener **)(v1 + 24);
  a1[1] = v3;
  *a1 = nw_listener_get_new_connection_limit(v3);
  return sub_181BFCA14;
}

void sub_181BFCA14(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if ((*a1 & 0x8000000000000000LL) != 0 || HIDWORD(v1))
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    nw_listener_set_new_connection_limit((nw_listener_t)a1[1], v1);
  }

uint64_t NWListener.port.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = nw_listener_get_port(*(nw_listener_t *)(v1 + 24));
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = 0;
  return result;
}

uint64_t (*NWListener.serviceRegistrationUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  unint64_t v3 = v1 + 48;
  os_unfair_lock_lock(v1 + 48);
  sub_181BFCFBC(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BD639C;
}

double sub_181BFCB90@<D0>( uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  __int128 v5 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  __int128 v6 = v5 + 4;
  uint64_t v7 = v5 + 48;
  os_unfair_lock_lock(v5 + 48);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_181BFCC04(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181BDA300;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWListener.serviceRegistrationUpdateHandler.setter((uint64_t)v4, v3);
}

void NWListener.serviceRegistrationUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 192));
  uint64_t v6 = *(void *)(v5 + 64);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 192));
  if (a1)
  {
    uint64_t v7 = *(nw_listener **)(v2 + 24);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    v10[4] = sub_181BFE4EC;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    void v10[2] = sub_181BFCF6C;
    v10[3] = &block_descriptor_48;
    __int128 v9 = _Block_copy(v10);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_listener_set_advertised_endpoint_changed_handler(v7, v9);
    sub_181BD25B8(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_listener_set_advertised_endpoint_changed_handler(*(nw_listener_t *)(v2 + 24), 0LL);
  }

uint64_t sub_181BFCDE4(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v4 = type metadata accessor for NWListener.ServiceRegistrationChange();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v7);
  __int128 v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWEndpoint();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  __int128 v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v14, (uint64_t)v9);
  sub_181BE4800((uint64_t)v9, (uint64_t)v13);
  sub_181BE4744((uint64_t)v13, (uint64_t)v6);
  swift_storeEnumTagMultiPayload();
  a3(v6);
  sub_181BC920C( (uint64_t)v6,  (uint64_t (*)(void))type metadata accessor for NWListener.ServiceRegistrationChange);
  return sub_181BC920C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t sub_181BFCF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v5 = swift_unknownObjectRetain();
  v4(v5, a3);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181BFCFBC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181BD639C;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWListener.serviceRegistrationUpdateHandler.modify( uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 48;
  os_unfair_lock_lock(v3 + 48);
  sub_181BFCFBC(v4, v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181BDA300;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_181BFD0D8;
}

uint64_t sub_181BFD0D8(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWListener.serviceRegistrationUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BC904C,  (uint64_t (*)(uint64_t, uint64_t))sub_181BD25B8);
}

void *NWListener.__allocating_init(_:)(void *a1)
{
  id v2 = nw_listener_copy_parameters(a1);
  type metadata accessor for NWParameters();
  uint64_t v3 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v2;
  *(void *)(v3 + 16) = v4;
  uint64_t v5 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C420);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 192) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 155) = 0u;
  *(void *)(v6 + 176) = 0LL;
  *(_DWORD *)(v6 + 184) = 0;
  *(_WORD *)(v6 + 188) = 128;
  v5[3] = a1;
  void v5[4] = v3;
  v5[2] = v6;
  return v5;
}

uint64_t NWListener.__allocating_init(using:on:)(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = swift_allocObject();
  NWListener.init(using:on:)(a1, a2);
  return v4;
}

void NWListener.init(using:on:)(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = v2;
  int v6 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C420);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 192) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 155) = 0u;
  *(void *)(v7 + 176) = 0LL;
  *(_DWORD *)(v7 + 184) = 0;
  *(_WORD *)(v7 + 188) = 128;
  void v4[2] = v7;
  if (v6)
  {
    parameters[0] = 0LL;
    parameters[1] = (nw_parameters_t)0xE000000000000000LL;
    sub_18264F2DC();
    uint64_t v8 = (os_unfair_lock_s *)0xE000000000000000LL;
    __int128 v9 = *(os_unfair_lock_s **)(a1 + 16);
    uint64_t v10 = v9 + 4;
    uint64_t v11 = v9 + 6;
    os_unfair_lock_lock(v9 + 6);
    sub_181C96C68(v10, parameters);
    if (!v3)
    {
      os_unfair_lock_unlock(v11);
      uint64_t v12 = parameters[0];
      uint64_t v13 = sub_18264EACC();
      swift_bridgeObjectRelease();
      nw_listener_t v14 = nw_listener_create_with_port((const char *)(v13 + 32), v12);
      swift_unknownObjectRelease();
      swift_release();
      if (v14)
      {
LABEL_4:
        v4[3] = v14;
        v4[4] = a1;
        return;
      }

      goto LABEL_7;
    }

    os_unfair_lock_unlock(v11);
    __break(1u);
  }

  else
  {
    uint64_t v15 = *(os_unfair_lock_s **)(a1 + 16);
    uint64_t v16 = v15 + 4;
    uint64_t v8 = v15 + 6;
    os_unfair_lock_lock(v15 + 6);
    sub_181C96C68(v16, parameters);
    if (!v3)
    {
      os_unfair_lock_unlock(v8);
      nw_listener_t v14 = nw_listener_create(parameters[0]);
      swift_unknownObjectRelease();
      if (v14) {
        goto LABEL_4;
      }
LABEL_7:
      sub_181BBE220();
      swift_allocError();
      *(_DWORD *)uint64_t v17 = 22;
      *(_BYTE *)(v17 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_deallocPartialClassInstance();
      return;
    }
  }

  os_unfair_lock_unlock(v8);
  __break(1u);
}

void NWListener.__allocating_init(applicationService:using:)(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v17 = 0;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = swift_retain();
  NWListener.init(using:on:)(v6, &v17);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    v10[0] = 1LL;
    v10[1] = 0LL;
    void v10[2] = 0LL;
    v10[3] = a1;
    v10[4] = a2;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    uint64_t v13 = 0LL;
    unint64_t v14 = 0xF000000000000000LL;
    __int16 v15 = 768;
    uint64_t v7 = *(os_unfair_lock_s **)(v5 + 16);
    uint64_t v8 = (uint64_t)&v7[4];
    __int128 v9 = v7 + 48;
    char v16 = 0;
    swift_retain();
    os_unfair_lock_lock(v9);
    sub_181BFC510(v8, (uint64_t)v10, v5);
    os_unfair_lock_unlock(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_181BD6288(0LL);
    sub_181BE61C8(0LL, 0xF000000000000000LL);
    swift_release();
    swift_release();
  }

void *NWListener.__allocating_init(connection:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(nw_connection **)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = (void *)(v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v6);
  sub_181C96C68(v5, &parameters);
  os_unfair_lock_unlock(v6);
  nw_listener_t v7 = nw_listener_create_with_connection(v3, parameters);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    uint64_t v8 = (void *)swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C420);
    uint64_t v9 = swift_allocObject();
    *(_DWORD *)(v9 + 192) = 0;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 155) = 0u;
    *(void *)(v9 + 176) = 0LL;
    *(_DWORD *)(v9 + 184) = 0;
    *(_WORD *)(v9 + 188) = 128;
    void v8[3] = v7;
    v8[4] = a2;
    void v8[2] = v9;
  }

  else
  {
    swift_release();
    return 0LL;
  }

  return v8;
}

void *NWListener.__allocating_init(launchdSocketKey:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = _s7Network10NWListenerC7launchd5usingACSgSS_AA12NWParametersCtcfC_0(a1, a2, a3);
  if (result)
  {
    nw_listener_t v7 = result;
    swift_release();
    return v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *NWListener.queue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 192);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 192));
  uint64_t v3 = *(void **)(v1 + 176);
  id v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t static NWListener.registrationIterator(on:)(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BD70);
  MEMORY[0x1895F8858](v2);
  id v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = *a1;
  int v9 = 128;
  uint64_t v10 = v5;
  (*(void (**)(_BYTE *, void))(v6 + 104))(v4, *MEMORY[0x18961BE60]);
  return sub_18264EF1C();
}

uint64_t NWListener.deinit()
{
  return v0;
}

uint64_t NWListener.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181BFD86C()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 24), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

void sub_181BFD8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (sub_18264E484())
  {
    if (__OFSUB__(a1, sub_18264E4A8()))
    {
      __break(1u);
      JUMPOUT(0x181BFD9B0LL);
    }

    sub_18264E49C();
    if (a4) {
LABEL_4:
    }
      __asm { BR              X10 }
  }

  else
  {
    sub_18264E49C();
    if (a4) {
      goto LABEL_4;
    }
  }

  __break(1u);
  JUMPOUT(0x181BFD950LL);
}

uint64_t _s7Network10NWListenerC7ServiceV10InvitationV2eeoiySbAG_AGtFZ_0(unsigned __int8 *a1, _BYTE *a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  int v4 = a2[1];
  uint64_t v5 = 0x646F70656D6F68LL;
  if (v2 != 1) {
    uint64_t v5 = 0x72656B61657073LL;
  }
  if (*a1) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 7496035LL;
  }
  if (v2) {
    unint64_t v7 = 0xE700000000000000LL;
  }
  else {
    unint64_t v7 = 0xE300000000000000LL;
  }
  uint64_t v8 = 0x646F70656D6F68LL;
  if (*a2 != 1) {
    uint64_t v8 = 0x72656B61657073LL;
  }
  if (*a2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 7496035LL;
  }
  if (*a2) {
    unint64_t v10 = 0xE700000000000000LL;
  }
  else {
    unint64_t v10 = 0xE300000000000000LL;
  }
  if (v6 == v9 && v7 == v10)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }

  char v11 = sub_18264F4EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v12 = 0;
  if ((v11 & 1) != 0)
  {
LABEL_21:
    unint64_t v13 = 0xE900000000000079LL;
    uint64_t v14 = 0x74696D69786F7270LL;
    unint64_t v15 = 0xE700000000000000LL;
    uint64_t v16 = 0x73646E65697266LL;
    if (v3 != 1)
    {
      uint64_t v16 = 0x656E6F7972657665LL;
      unint64_t v15 = 0xE800000000000000LL;
    }

    if (v3) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0x74696D69786F7270LL;
    }
    if (v3) {
      unint64_t v18 = v15;
    }
    else {
      unint64_t v18 = 0xE900000000000079LL;
    }
    if (v4)
    {
      if (v4 != 1)
      {
        unint64_t v13 = 0xE800000000000000LL;
        if (v17 != 0x656E6F7972657665LL) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }

      unint64_t v13 = 0xE700000000000000LL;
      uint64_t v14 = 0x73646E65697266LL;
    }

    if (v17 != v14) {
      goto LABEL_37;
    }
LABEL_35:
    if (v18 == v13)
    {
      char v12 = 1;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
    }

BOOL _s7Network10NWListenerC7ServiceV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  unint64_t v14 = *(void *)(a2 + 80);
  if (v3)
  {
    if (!v9) {
      return 0LL;
    }
    int v43 = *(unsigned __int8 *)(a2 + 88);
    int v44 = *(unsigned __int8 *)(a1 + 88);
    uint64_t v45 = *(void *)(a2 + 72);
    uint64_t v46 = *(void *)(a1 + 72);
    right = *(nw_txt_record **)(a2 + 64);
    uint64_t v41 = *(void *)(a2 + 56);
    uint64_t v42 = *(void *)(a1 + 56);
    unsigned int v38 = *(unsigned __int16 *)(a2 + 89);
    unsigned int v39 = *(unsigned __int16 *)(a1 + 89);
    if (*(void *)(a1 + 8) != *(void *)(a2 + 8) || v3 != v9)
    {
      char v15 = sub_18264F4EC();
      BOOL result = 0LL;
      if ((v15 & 1) == 0) {
        return result;
      }
    }
  }

  else
  {
    int v43 = *(unsigned __int8 *)(a2 + 88);
    int v44 = *(unsigned __int8 *)(a1 + 88);
    uint64_t v45 = *(void *)(a2 + 72);
    uint64_t v46 = *(void *)(a1 + 72);
    right = *(nw_txt_record **)(a2 + 64);
    uint64_t v41 = *(void *)(a2 + 56);
    uint64_t v42 = *(void *)(a1 + 56);
    unsigned int v38 = *(unsigned __int16 *)(a2 + 89);
    unsigned int v39 = *(unsigned __int16 *)(a1 + 89);
    if (v9) {
      return 0LL;
    }
  }

  if (v4 != v10 || v5 != v12)
  {
    char v17 = sub_18264F4EC();
    BOOL result = 0LL;
    if ((v17 & 1) == 0) {
      return result;
    }
  }

  if (v7)
  {
    if (!v13) {
      return 0LL;
    }
    if (v6 != v11 || v7 != v13)
    {
      char v18 = sub_18264F4EC();
      BOOL result = 0LL;
      if ((v18 & 1) == 0) {
        return result;
      }
    }
  }

  else if (v13)
  {
    return 0LL;
  }

  if (v8 >> 60 == 15)
  {
    uint64_t v19 = v46;
    if (v14 >> 60 == 15)
    {
      if (v44 == v43) {
        goto LABEL_28;
      }
      return 0LL;
    }

void sub_181BFE088(unsigned __int8 *a1)
{
  uint64_t v21 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v19 = *((void *)a1 + 3);
  uint64_t v20 = v2;
  uint64_t v23 = *((void *)a1 + 4);
  uint64_t v24 = v3;
  uint64_t v18 = *((void *)a1 + 5);
  uint64_t v4 = *((void *)a1 + 7);
  uint64_t v25 = *((void *)a1 + 6);
  uint64_t v5 = *((void *)a1 + 8);
  uint64_t v6 = *((void *)a1 + 9);
  unint64_t v22 = *((void *)a1 + 10);
  __int16 v7 = a1[88];
  __int16 v8 = *(_WORD *)(a1 + 89);
  unsigned __int16 v29 = 0;
  type metadata accessor for NWListener();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = swift_retain();
  NWListener.init(using:on:)(v10, &v29);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(v4);
    sub_181BE61C8(v6, v22);
  }

  else
  {
    uint64_t v17 = (uint64_t)&v17;
    v26[0] = v21;
    v26[1] = v20;
    __int16 v11 = v7 | (v8 << 8);
    void v26[2] = v24;
    v26[3] = v19;
    void v26[4] = v23;
    v26[5] = v18;
    v26[6] = v25;
    v26[7] = v4;
    uint64_t v12 = v4;
    void v26[8] = v5;
    v26[9] = v6;
    unint64_t v13 = v22;
    v26[10] = v22;
    char v28 = HIBYTE(v8);
    unint64_t v14 = *(os_unfair_lock_s **)(v9 + 16);
    uint64_t v15 = (uint64_t)&v14[4];
    uint64_t v16 = v14 + 48;
    __int16 v27 = v11;
    swift_retain();
    os_unfair_lock_lock(v16);
    sub_181BFC510(v15, (uint64_t)v26, v9);
    os_unfair_lock_unlock(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(v12);
    sub_181BE61C8(v6, v13);
    swift_release();
    swift_release();
  }

uint64_t sub_181BFE274()
{
  return swift_deallocObject();
}

uint64_t sub_181BFE2A0(nw_connection *a1)
{
  return sub_181BFB8D8(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_181BFE2C4()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_181BFE2F8(uint64_t a1, nw_error *a2)
{
}

uint64_t sub_181BFE304()
{
  return swift_deallocObject();
}

uint64_t sub_181BFE328(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_181BFE358(uint64_t a1)
{
  return sub_181BFBCFC(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_181BFE360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181BFE3A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(a8);
    return sub_181BE61C8(a10, a11);
  }

  return result;
}

uint64_t sub_181BFE418( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, int))
{
  return a1;
}

uint64_t sub_181BFE47C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181BD2FFC(a8);
    return sub_181BE4844(a10, a11);
  }

  return result;
}

uint64_t sub_181BFE4EC(uint64_t a1, uint64_t a2)
{
  return sub_181BFCDE4(a1, a2, *(void (**)(char *))(v2 + 16));
}

void *_s7Network10NWListenerC7launchd5usingACSgSS_AA12NWParametersCtcfC_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(os_unfair_lock_s **)(a3 + 16);
  uint64_t v5 = v4 + 4;
  uint64_t v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_181C96C68(v5, &v13);
  os_unfair_lock_unlock(v6);
  __int16 v7 = v13;
  uint64_t v8 = sub_18264EACC();
  swift_bridgeObjectRelease();
  BOOL v9 = nw_listener_create_with_launchd_key(v7, (const char *)(v8 + 32));
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for NWListener();
  uint64_t v10 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C420);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 192) = 0;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 155) = 0u;
  *(void *)(v11 + 176) = 0LL;
  *(_DWORD *)(v11 + 184) = 0;
  *(_WORD *)(v11 + 188) = 128;
  v10[3] = v9;
  v10[4] = a3;
  void v10[2] = v11;
  return v10;
}

unint64_t sub_181BFE608()
{
  unint64_t result = qword_18C58C428;
  if (!qword_18C58C428)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWListener.Service.Invitation.Route,  &type metadata for NWListener.Service.Invitation.Route);
    atomic_store(result, (unint64_t *)&qword_18C58C428);
  }

  return result;
}

unint64_t sub_181BFE650()
{
  unint64_t result = qword_18C58C430;
  if (!qword_18C58C430)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWListener.Service.Invitation.Scope,  &type metadata for NWListener.Service.Invitation.Scope);
    atomic_store(result, (unint64_t *)&qword_18C58C430);
  }

  return result;
}

uint64_t sub_181BFE694@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  *a2 = v3;
  a2[1] = v2;
  return sub_181BD2FFC(v3);
}

uint64_t sub_181BFE6A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(a2 + 56);
  sub_181BD2FFC(*a1);
  uint64_t result = sub_181BD6288(v5);
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + 64) = v4;
  return result;
}

uint64_t sub_181BFE6F4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 88);
  return result;
}

_BYTE *sub_181BFE700(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 88) = *result;
  return result;
}

uint64_t sub_181BFE70C@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(result + 89);
  return result;
}

_WORD *sub_181BFE718(_WORD *result, uint64_t a2)
{
  *(_WORD *)(a2 + 89) = *result;
  return result;
}

double sub_181BFE724@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181BFCB90(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181BFB948, a2);
}

double sub_181BFE744@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181BFCB90(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181BFBD74, a2);
}

double sub_181BFE764@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181BFCB90(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181BFC16C, a2);
}

uint64_t sub_181BFE78C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_listener_get_new_connection_limit(*(nw_listener_t *)(*(void *)a1 + 24LL));
  *a2 = result;
  return result;
}

double sub_181BFE7C0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181BFCB90(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181BFCFBC, a2);
}

uint64_t type metadata accessor for NWListener()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWListener()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWListener.__allocating_init(using:on:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t destroy for NWListener.Service(void *a1)
{
  uint64_t result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
  }

  unint64_t v3 = a1[10];
  if (v3 >> 60 != 15) {
    return sub_181BCD4F0(a1[9], v3);
  }
  return result;
}

uint64_t initializeWithCopy for NWListener.Service(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v8 = (_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 56) = *v8;
  }

  uint64_t v10 = (uint64_t *)(a2 + 72);
  unint64_t v11 = *(void *)(a2 + 80);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v10;
  }

  else
  {
    uint64_t v12 = *v10;
    sub_181BCD4AC(*v10, *(void *)(a2 + 80));
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = v11;
  }

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

uint64_t assignWithCopy for NWListener.Service(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v4)
    {
      *(void *)(a1 + 56) = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      goto LABEL_8;
    }

    sub_181BD73AC(a1 + 56);
  }

  else if (v4)
  {
    *(void *)(a1 + 56) = v4;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    goto LABEL_8;
  }

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_8:
  uint64_t v5 = (uint64_t *)(a2 + 72);
  unint64_t v6 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 != 15LL)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v8 = *v5;
      sub_181BCD4AC(*v5, *(void *)(a2 + 80));
      uint64_t v9 = *(void *)(a1 + 72);
      unint64_t v10 = *(void *)(a1 + 80);
      *(void *)(a1 + 72) = v8;
      *(void *)(a1 + 80) = v6;
      sub_181BCD4F0(v9, v10);
      goto LABEL_15;
    }

    sub_181BF86F4(a1 + 72);
    goto LABEL_13;
  }

  if (v6 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v5;
    goto LABEL_15;
  }

  uint64_t v7 = *v5;
  sub_181BCD4AC(*v5, *(void *)(a2 + 80));
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v6;
LABEL_15:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy91_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 75) = *(_OWORD *)(a2 + 75);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for NWListener.Service(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v7)
    {
      *(void *)(a1 + 56) = v7;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_unknownObjectRelease();
      goto LABEL_6;
    }

    sub_181BD73AC(a1 + 56);
  }

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_6:
  uint64_t v8 = (void *)(a2 + 72);
  unint64_t v9 = *(void *)(a1 + 80);
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 80);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = *v8;
      *(void *)(a1 + 80) = v10;
      sub_181BCD4F0(v11, v9);
      goto LABEL_11;
    }

    sub_181BF86F4(a1 + 72);
  }

  *(_OWORD *)(a1 + 72) = *(_OWORD *)v8;
LABEL_11:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWListener.Service(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 91)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181BD3028(v3, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWListener.Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 90) = 0;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 91) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 91) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWListener.Service()
{
  return &type metadata for NWListener.Service;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWListener.Service.Invitation(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }

uint64_t storeEnumTagSinglePayload for NWListener.Service.Invitation( _WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181BFEDD4 + 4 * byte_18265DF29[v4]))();
  }
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_181BFEE08 + 4 * byte_18265DF24[v4]))();
}

uint64_t sub_181BFEE08(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_181BFEE10(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x181BFEE18LL);
  }
  return result;
}

uint64_t sub_181BFEE24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x181BFEE2CLL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_181BFEE30(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_181BFEE38(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWListener.Service.Invitation()
{
  return &type metadata for NWListener.Service.Invitation;
}

ValueMetadata *type metadata accessor for NWListener.Service.Invitation.Route()
{
  return &type metadata for NWListener.Service.Invitation.Route;
}

uint64_t _s7Network10NWListenerC7ServiceV10InvitationV5RouteOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181BFEEB4 + 4 * byte_18265DF33[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181BFEEE8 + 4 * byte_18265DF2E[v4]))();
}

uint64_t sub_181BFEEE8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFEEF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181BFEEF8LL);
  }
  return result;
}

uint64_t sub_181BFEF04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181BFEF0CLL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_181BFEF10(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFEF18(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWListener.Service.Invitation.Scope()
{
  return &type metadata for NWListener.Service.Invitation.Scope;
}

ValueMetadata *type metadata accessor for NWListener.State()
{
  return &type metadata for NWListener.State;
}

uint64_t initializeBufferWithCopyOfBuffer for NWListener.ServiceRegistrationChange( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for NWEndpoint();
    int v6 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1) {
      __asm { BR              X10 }
    }

    __asm { BR              X10 }
  }

  uint64_t v7 = *a2;
  *a1 = *a2;
  uint64_t v8 = v7 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v8;
}

uint64_t destroy for NWListener.ServiceRegistrationChange(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for NWEndpoint();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch((int)result)
    {
      case 0:
        goto LABEL_4;
      case 1:
        goto LABEL_5;
      case 2:
        goto LABEL_7;
      case 3:
        goto LABEL_8;
      case 4:
        goto LABEL_9;
      default:
        return result;
    }
  }

  else
  {
    switch((int)result)
    {
      case 0:
LABEL_4:
        uint64_t result = sub_181BC6974(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
        break;
      case 1:
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = *(void *)(a1 + 48);
        if (result != 1) {
          goto LABEL_9;
        }
        break;
      case 2:
LABEL_7:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 3:
LABEL_8:
        uint64_t v4 = sub_18264E568();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
        break;
      case 4:
LABEL_9:
        uint64_t result = swift_unknownObjectRelease();
        break;
      default:
        return result;
    }
  }

  return result;
}

void initializeWithCopy for NWListener.ServiceRegistrationChange()
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for NWEndpoint();
  int v1 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1) {
    __asm { BR              X10 }
  }

  __asm { BR              X10 }

void sub_181BFF410()
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  sub_181BC683C(*(void *)v1, v3, v4, v5);
  *(void *)uint64_t v0 = v2;
  *(void *)(v0 + 8) = v3;
  *(void *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BFF5E0LL);
}

void sub_181BFF454()
{
  uint64_t v2 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BFF5E0LL);
}

void sub_181BFF470()
{
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BFF5E0LL);
}

void sub_181BFF4A0()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  JUMPOUT(0x181BFF4B8LL);
}

void sub_181BFF4C4()
{
  uint64_t v2 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BFF5E0LL);
}

void sub_181BFF4E0()
{
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BFF5E0LL);
}

void sub_181BFF510()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181BFF5E0LL);
}

void *sub_181BFF52C()
{
  uint64_t v2 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v2;
  uint64_t v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  uint64_t v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  uint64_t v5 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v5;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  return v0;
}

void sub_181BFF588()
{
  uint64_t v2 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v2;
  uint64_t v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  uint64_t v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  uint64_t v5 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v5;
  JUMPOUT(0x181BFF5D8LL);
}

uint64_t assignWithCopy for NWListener.ServiceRegistrationChange(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    sub_181BC920C( result,  (uint64_t (*)(void))type metadata accessor for NWListener.ServiceRegistrationChange);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for NWEndpoint();
    int v3 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1) {
      __asm { BR              X10 }
    }

    __asm { BR              X10 }
  }

  return result;
}

uint64_t type metadata accessor for NWListener.ServiceRegistrationChange()
{
  uint64_t result = qword_18C58C510;
  if (!qword_18C58C510) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for NWListener.ServiceRegistrationChange(void *a1, const void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for NWEndpoint();
  int v6 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    if (v6 == 3) {
      goto LABEL_5;
    }
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
    goto LABEL_7;
  }

  if (v6 != 3) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v7 = sub_18264E568();
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for NWListener.ServiceRegistrationChange(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_181BC920C( (uint64_t)a1,  (uint64_t (*)(void))type metadata accessor for NWListener.ServiceRegistrationChange);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for NWEndpoint();
    int v6 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v6 == 3) {
        goto LABEL_6;
      }
    }

    else if (v6 == 3)
    {
LABEL_6:
      uint64_t v7 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
    goto LABEL_8;
  }

  return a1;
}

uint64_t sub_181BFFBC4()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

void destroy for NWListener.LockedState(uint64_t a1)
{
  if (*(void *)a1) {
    swift_release();
  }
  if (*(void *)(a1 + 16)) {
    swift_release();
  }
  if (*(void *)(a1 + 32)) {
    swift_release();
  }
  if (*(void *)(a1 + 48)) {
    swift_release();
  }
  if (*(void *)(a1 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 120))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    unint64_t v2 = *(void *)(a1 + 144);
    if (v2 >> 60 != 15) {
      sub_181BCD4F0(*(void *)(a1 + 136), v2);
    }
  }
}

uint64_t initializeWithCopy for NWListener.LockedState(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_retain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }

  uint64_t v7 = *(void *)(a2 + 32);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }

  uint64_t v9 = *(void *)(a2 + 48);
  if (!v9)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 96);
    if (v11) {
      goto LABEL_12;
    }
LABEL_15:
    __int128 v16 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v16;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 139) = *(_OWORD *)(a2 + 139);
    __int128 v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    goto LABEL_21;
  }

  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  swift_retain();
  uint64_t v11 = *(void *)(a2 + 96);
  if (!v11) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v12 = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v15 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v12;
    *(void *)(a1 + 128) = v15;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  }

  uint64_t v18 = (uint64_t *)(a2 + 136);
  unint64_t v19 = *(void *)(a2 + 144);
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)v18;
  }

  else
  {
    uint64_t v20 = *v18;
    sub_181BCD4AC(*v18, *(void *)(a2 + 144));
    *(void *)(a1 + 136) = v20;
    *(void *)(a1 + 144) = v19;
  }

  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
LABEL_21:
  uint64_t v21 = *(void **)(a2 + 160);
  *(void *)(a1 + 160) = v21;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_WORD *)(a1 + 172) = *(_WORD *)(a2 + 172);
  id v22 = v21;
  return a1;
}

uint64_t assignWithCopy for NWListener.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (*(void *)(a1 + 16))
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  else if (v7)
  {
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9;
    swift_retain();
    goto LABEL_15;
  }

  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }

    swift_release();
  }

  else if (v10)
  {
    uint64_t v12 = a2[5];
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_22;
  }

  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (*(void *)(a1 + 48))
  {
    if (v13)
    {
      uint64_t v14 = a2[7];
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v14;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }

    swift_release();
  }

  else if (v13)
  {
    uint64_t v15 = a2[7];
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v15;
    swift_retain();
    goto LABEL_29;
  }

  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  __int128 v16 = (_OWORD *)(a1 + 64);
  __int128 v17 = a2 + 8;
  uint64_t v18 = a2[12];
  if (*(void *)(a1 + 96))
  {
    if (v18)
    {
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = a2[11];
      *(void *)(a1 + 96) = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = a2[13];
      *(void *)(a1 + 112) = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v19 = a2[15];
      if (*(void *)(a1 + 120))
      {
        if (v19)
        {
          *(void *)(a1 + 120) = v19;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(a1 + 128) = a2[16];
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
LABEL_43:
          unsigned __int16 v29 = a2 + 17;
          unint64_t v30 = a2[18];
          if (*(void *)(a1 + 144) >> 60 == 15LL)
          {
            if (v30 >> 60 != 15)
            {
              uint64_t v31 = *v29;
LABEL_53:
              sub_181BCD4AC(v31, v30);
              *(void *)(a1 + 136) = v31;
              *(void *)(a1 + 144) = v30;
              goto LABEL_55;
            }
          }

          else
          {
            if (v30 >> 60 != 15)
            {
              uint64_t v33 = *v29;
              sub_181BCD4AC(*v29, a2[18]);
              uint64_t v34 = *(void *)(a1 + 136);
              unint64_t v35 = *(void *)(a1 + 144);
              *(void *)(a1 + 136) = v33;
              *(void *)(a1 + 144) = v30;
              sub_181BCD4F0(v34, v35);
              goto LABEL_55;
            }

            sub_181BF86F4(a1 + 136);
          }

          *(_OWORD *)(a1 + 136) = *(_OWORD *)v29;
          goto LABEL_55;
        }

        sub_181BD73AC(a1 + 120);
      }

      else if (v19)
      {
        *(void *)(a1 + 120) = v19;
        *(void *)(a1 + 128) = a2[16];
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_43;
      }

      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      goto LABEL_43;
    }

    sub_181C002E0((void *)(a1 + 64));
    __int128 v21 = *((_OWORD *)a2 + 5);
    *__int128 v16 = *v17;
    *(_OWORD *)(a1 + 80) = v21;
    __int128 v23 = *((_OWORD *)a2 + 7);
    __int128 v22 = *((_OWORD *)a2 + 8);
    __int128 v24 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 139) = *(_OWORD *)((char *)a2 + 139);
    *(_OWORD *)(a1 + 112) = v23;
    *(_OWORD *)(a1 + 128) = v22;
    *(_OWORD *)(a1 + 96) = v24;
  }

  else
  {
    if (v18)
    {
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = a2[10];
      *(void *)(a1 + 88) = a2[11];
      *(void *)(a1 + 96) = a2[12];
      *(void *)(a1 + 104) = a2[13];
      *(void *)(a1 + 112) = a2[14];
      uint64_t v20 = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v20)
      {
        *(void *)(a1 + 120) = v20;
        *(void *)(a1 + 128) = a2[16];
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }

      else
      {
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      }

      unsigned int v32 = a2 + 17;
      unint64_t v30 = a2[18];
      if (v30 >> 60 != 15)
      {
        uint64_t v31 = *v32;
        goto LABEL_53;
      }

      *(_OWORD *)(a1 + 136) = *(_OWORD *)v32;
LABEL_55:
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)((char *)a2 + 153);
      goto LABEL_56;
    }

    __int128 v25 = *((_OWORD *)a2 + 5);
    *__int128 v16 = *v17;
    *(_OWORD *)(a1 + 80) = v25;
    __int128 v26 = *((_OWORD *)a2 + 6);
    __int128 v27 = *((_OWORD *)a2 + 7);
    __int128 v28 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 139) = *(_OWORD *)((char *)a2 + 139);
    *(_OWORD *)(a1 + 112) = v27;
    *(_OWORD *)(a1 + 128) = v28;
    *(_OWORD *)(a1 + 96) = v26;
  }

void *sub_181C002E0(void *a1)
{
  return a1;
}

__n128 __swift_memcpy174_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  *(_OWORD *)(a1 + 158) = *(__int128 *)((char *)a2 + 158);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for NWListener.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    goto LABEL_8;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (*(void *)(a1 + 16))
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v8;
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  else if (v7)
  {
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9;
    goto LABEL_15;
  }

  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_release();
      goto LABEL_22;
    }

    swift_release();
  }

  else if (v10)
  {
    uint64_t v12 = a2[5];
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v12;
    goto LABEL_22;
  }

  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (*(void *)(a1 + 48))
  {
    if (v13)
    {
      uint64_t v14 = a2[7];
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v14;
      swift_release();
      goto LABEL_29;
    }

    swift_release();
  }

  else if (v13)
  {
    uint64_t v15 = a2[7];
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v15;
    goto LABEL_29;
  }

  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  if (*(void *)(a1 + 96))
  {
    uint64_t v16 = a2[12];
    if (v16)
    {
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      uint64_t v17 = a2[10];
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = v17;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = a2[11];
      *(void *)(a1 + 96) = v16;
      swift_bridgeObjectRelease();
      uint64_t v18 = a2[14];
      *(void *)(a1 + 104) = a2[13];
      *(void *)(a1 + 112) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = a2[15];
      if (*(void *)(a1 + 120))
      {
        if (v19)
        {
          *(void *)(a1 + 120) = v19;
          swift_bridgeObjectRelease();
          *(void *)(a1 + 128) = a2[16];
          swift_unknownObjectRelease();
          goto LABEL_38;
        }

        sub_181BD73AC(a1 + 120);
      }

      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
LABEL_38:
      __int128 v22 = a2 + 17;
      unint64_t v23 = *(void *)(a1 + 144);
      if (v23 >> 60 != 15)
      {
        unint64_t v24 = a2[18];
        if (v24 >> 60 != 15)
        {
          uint64_t v25 = *(void *)(a1 + 136);
          *(void *)(a1 + 136) = *v22;
          *(void *)(a1 + 144) = v24;
          sub_181BCD4F0(v25, v23);
          goto LABEL_43;
        }

        sub_181BF86F4(a1 + 136);
      }

      *(_OWORD *)(a1 + 136) = *(_OWORD *)v22;
LABEL_43:
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_WORD *)(a1 + 153) = *(_WORD *)((char *)a2 + 153);
      goto LABEL_44;
    }

    sub_181C002E0((void *)(a1 + 64));
  }

  __int128 v20 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 139) = *(_OWORD *)((char *)a2 + 139);
  __int128 v21 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v21;
LABEL_44:
  __int128 v26 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = a2[20];

  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 42);
  *(_BYTE *)(a1 + 172) = *((_BYTE *)a2 + 172);
  *(_BYTE *)(a1 + 173) = *((_BYTE *)a2 + 173);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWListener.LockedState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 174)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWListener.LockedState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 172) = 0;
    *(_DWORD *)(result + 168) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 174) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 174) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWListener.LockedState()
{
  return &type metadata for NWListener.LockedState;
}

void sub_181C006D8(uint64_t a1)
{
}

uint64_t sub_181C006F0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181C00730(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t HTTPField.withUnsafeBytesOfValue<A>(_:)@<X0>( uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_181C93C94(a1, a2, *(void *)(v4 + 40), *(void *)(v4 + 48), a3, a4);
}

void static HTTPField.DynamicTableIndexingStrategy.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static HTTPField.DynamicTableIndexingStrategy.prefer.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static HTTPField.DynamicTableIndexingStrategy.avoid.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static HTTPField.DynamicTableIndexingStrategy.disallow.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t HTTPField.DynamicTableIndexingStrategy.hash(into:)()
{
  return sub_18264F660();
}

BOOL static HTTPField.DynamicTableIndexingStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HTTPField.DynamicTableIndexingStrategy.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t HTTPField.init(name:value:)@<X0>( __int128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = a3;
  uint64_t v5 = a2;
  __int128 v7 = *a1;
  uint64_t v8 = *((void *)a1 + 2);
  uint64_t v9 = *((void *)a1 + 3);
  *(_BYTE *)(a4 + 32) = 0;
  *(_OWORD *)a4 = v7;
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v9;
  if ((sub_181BCE7EC(a2, a3) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
    sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
    sub_18264EB14();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0LL;
    unint64_t v4 = 0xE000000000000000LL;
  }

  uint64_t v10 = sub_181C024EC(v5, v4);
  uint64_t v12 = v11;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a4 + 40) = v10;
  *(void *)(a4 + 48) = v12;
  return result;
}

double HTTPField.init<A>(name:value:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_181C00978(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_181C024EC, a5);
}

double HTTPField.init<A>(name:lenientValue:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_181C00978(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_181C02668, a5);
}

double sub_181C00978@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v22 = *(_OWORD *)v12;
  uint64_t v15 = *(void *)(v12 + 16);
  uint64_t v16 = *(void *)(v12 + 24);
  (*(void (**)(char *))(v11 + 16))(v14);
  uint64_t v17 = sub_181C93D44(v14, a3, a4);
  uint64_t v18 = a5(v17);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, a3);
  double result = *(double *)&v22;
  *(_OWORD *)a6 = v22;
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 24) = v16;
  *(_BYTE *)(a6 + 32) = 0;
  *(void *)(a6 + 40) = v18;
  *(void *)(a6 + 48) = v20;
  return result;
}

uint64_t HTTPField.name.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 HTTPField.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *uint64_t v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*HTTPField.name.modify())()
{
  return nullsub_1;
}

unint64_t HTTPField.value.getter()
{
  unint64_t v1 = *(void *)(v0 + 40);
  unint64_t v2 = *(void *)(v0 + 48);
  if ((sub_181BCE7EC(v1, v2) & 1) == 0) {
    return sub_181C9420C(v1, v2);
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_181C00B58@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(void *)(a1 + 48);
  if ((sub_181BCE7EC(v3, v4) & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v3 = sub_181C9420C(v3, v4);
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v4 = v7;
  }

  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t HTTPField.value.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  if ((sub_181BCE7EC(a1, a2) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
    sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
    sub_18264EB14();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0LL;
    unint64_t v4 = 0xE000000000000000LL;
  }

  uint64_t v6 = sub_181C024EC(v5, v4);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 48) = v8;
  return result;
}

void (*HTTPField.value.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  unint64_t v4 = *(void *)(v1 + 40);
  unint64_t v5 = *(void *)(v1 + 48);
  if ((sub_181BCE7EC(v4, v5) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v4 = sub_181C9420C(v4, v5);
    unint64_t v5 = v6;
  }

  v3[7] = 0LL;
  v3[4] = v4;
  v3[5] = v5;
  return sub_181C00D68;
}

void sub_181C00D68(unint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[4];
  unint64_t v5 = (*a1)[5];
  char v6 = sub_181BCE7EC(v4, v5);
  if ((a2 & 1) != 0)
  {
    if ((v6 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      unint64_t *v3 = v4;
      v3[1] = v5;
      void v3[2] = (unint64_t)sub_181C94200;
      v3[3] = 0LL;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
      sub_18264EB14();
      unint64_t v4 = 0LL;
      unint64_t v5 = 0xE000000000000000LL;
    }

    unint64_t v11 = v3[6];
    uint64_t v12 = sub_181C024EC(v4, v5);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v11 + 40) = v12;
    *(void *)(v11 + 48) = v14;
    swift_bridgeObjectRelease();
  }

  else
  {
    if ((v6 & 1) == 0)
    {
      unint64_t *v3 = v4;
      v3[1] = v5;
      void v3[2] = (unint64_t)sub_181C94200;
      v3[3] = 0LL;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
      sub_18264EB14();
      swift_bridgeObjectRelease();
      unint64_t v4 = 0LL;
      unint64_t v5 = 0xE000000000000000LL;
    }

    unint64_t v7 = v3[6];
    uint64_t v8 = sub_181C024EC(v4, v5);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v7 + 40) = v8;
    *(void *)(v7 + 48) = v10;
  }

  free(v3);
}

void HTTPField.indexingStrategy.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *HTTPField.indexingStrategy.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*HTTPField.indexingStrategy.modify())()
{
  return nullsub_1;
}

BOOL _s7Network9HTTPFieldV12isValidValueySbSSFZ_0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 1LL;
  }
  LOBYTE(sub_181BD3224(v4, v5) = (a2 & 0x1000000000000000LL) == 0 || (a1 & 0x800000000000000LL) != 0;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
LABEL_53:
    char v6 = sub_18264EBC8();
    unint64_t v8 = sub_18264EB98();
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      char v6 = a1;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      char v6 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
    }

    else
    {
      char v6 = *(_BYTE *)sub_18264F228();
    }

    unint64_t v8 = 65540LL;
  }

  BOOL result = 0LL;
  if (v6 != 9 && v6 != 32)
  {
    uint64_t v5 = 4LL << v5;
    while (1)
    {
      BOOL v9 = v6 == 32 || v6 == 9;
      if (4 * v2 == v8 >> 14) {
        return v6 != 9 && v6 != 32;
      }
      unint64_t v10 = v8 & 0xC;
      unint64_t v11 = v8;
      if (v10 == v5) {
        unint64_t v11 = sub_181C23710(v8, a1, a2);
      }
      unint64_t v12 = v11 >> 16;
      if (v11 >> 16 >= v2)
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }

      if ((a2 & 0x1000000000000000LL) != 0) {
        break;
      }
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        v15[0] = a1;
        v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        char v6 = *((_BYTE *)v15 + v12);
        if (v10 == v5) {
          goto LABEL_42;
        }
LABEL_35:
        if ((a2 & 0x1000000000000000LL) != 0) {
          goto LABEL_36;
        }
LABEL_18:
        unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      }

      else
      {
        uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a1 & 0x1000000000000000LL) == 0) {
          uint64_t v13 = sub_18264F228();
        }
        char v6 = *(_BYTE *)(v13 + v12);
        if (v10 != v5) {
          goto LABEL_35;
        }
LABEL_42:
        unint64_t v8 = sub_181C23710(v8, a1, a2);
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_18;
        }
LABEL_36:
        if (v2 <= v8 >> 16) {
          goto LABEL_52;
        }
        unint64_t v8 = sub_18264EB98();
      }
    }

    char v6 = sub_18264EBC8();
    if (v10 == v5) {
      goto LABEL_42;
    }
    goto LABEL_35;
  }

  return result;
}

BOOL sub_181C01160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  char v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v10 = &v14[-v9];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_18264EC10();
  swift_getAssociatedConformanceWitness();
  sub_18264F0C0();
  if ((v16 & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    return 1LL;
  }

  else
  {
    int v12 = v15;
    if (v15 != 9 && v15 != 32)
    {
      while (v12 == 9 || v12 == 32 || (v12 & 0x80) != 0 || (v12 - 127) > 0xFFFFFFA1)
      {
        sub_18264F0C0();
        if (v14[13] == 1)
        {
          (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
          return v12 != 32 && v12 != 9;
        }

        int v12 = v14[12];
      }
    }

    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    return 0LL;
  }

char *sub_181C01330@<X0>(char *result@<X0>, _BYTE *a2@<X8>)
{
  int v2 = *result;
  else {
    char v4 = 32;
  }
  if (v2 == 32) {
    char v4 = 32;
  }
  if (v2 != 9) {
    LOBYTE(sub_181BD3028(v3, v2) = v4;
  }
  *a2 = v2;
  return result;
}

BOOL sub_181C0136C(unsigned __int8 *a1)
{
  int v1 = *a1;
  return v1 == 9 || v1 == 32;
}

unint64_t sub_181C01384(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE((*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6) = 1;
  }
  uint64_t v7 = 4LL << v6;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = sub_181C23710(v8, a1, a2);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = sub_18264EBC8();
      char v13 = result;
      if (v10 != v7) {
        goto LABEL_18;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      char v13 = *((_BYTE *)v15 + v12);
      if (v10 != v7) {
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t result = v14;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = sub_18264F228();
      }
      char v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000LL) != 0) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
    }

    unint64_t result = sub_181C23710(v8, a1, a2);
    unint64_t v8 = result;
    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_22:
      if (v4 <= v8 >> 16) {
        goto LABEL_28;
      }
      unint64_t v8 = sub_18264EB98();
      goto LABEL_24;
    }

unsigned __int8 *sub_181C01520@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 10 || v2 == 13) {
    LOBYTE(sub_181BD3028(v3, v2) = 32;
  }
  *a2 = v2;
  return result;
}

BOOL static HTTPField.isValidValue<A>(_:)(uint64_t a1, uint64_t a2)
{
  return sub_181C01160(a1, a2);
}

uint64_t HTTPField.hash(into:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t HTTPField.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181C016A0()
{
  return sub_18264F684();
}

uint64_t sub_181C01758()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C017F4()
{
  return sub_18264F684();
}

uint64_t HTTPField.description.getter()
{
  unint64_t v1 = v0[5];
  unint64_t v2 = v0[6];
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain();
  sub_18264EB74();
  if ((sub_181BCE7EC(v1, v2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C9420C(v1, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_18264EB74();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_181C01988()
{
  unint64_t v1 = v0[5];
  unint64_t v2 = v0[6];
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain();
  sub_18264EB74();
  if ((sub_181BCE7EC(v1, v2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C9420C(v1, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_18264EB74();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t HTTPField.playgroundDescription.getter@<X0>(void *a1@<X8>)
{
  unint64_t v3 = v1[5];
  unint64_t v4 = v1[6];
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  swift_bridgeObjectRetain();
  sub_18264EB74();
  if ((sub_181BCE7EC(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C9420C(v3, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_18264EB74();
  uint64_t result = swift_bridgeObjectRelease();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t sub_181C01B5C@<X0>(void *a1@<X8>)
{
  unint64_t v3 = v1[5];
  unint64_t v4 = v1[6];
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  swift_bridgeObjectRetain();
  sub_18264EB74();
  if ((sub_181BCE7EC(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C9420C(v3, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_18264EB74();
  uint64_t result = swift_bridgeObjectRelease();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t sub_181C01C54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_181CAB17C(*a1, *a2);
}

uint64_t sub_181C01C60()
{
  return sub_18264F684();
}

uint64_t sub_181C01CF8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C01D6C()
{
  return sub_18264F684();
}

uint64_t sub_181C01E00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_181C02D94();
  *a1 = result;
  return result;
}

void sub_181C01E2C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000LL;
  unint64_t v4 = 0xE500000000000000LL;
  unint64_t v5 = 0x65756C6176LL;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000010LL;
    unint64_t v4 = 0x800000018272DB90LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701667182LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_181C01E84()
{
  unint64_t v1 = 0x65756C6176LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182LL;
  }
}

uint64_t sub_181C01ED8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_181C02D94();
  *a1 = result;
  return result;
}

uint64_t sub_181C01EFC()
{
  return 0LL;
}

void sub_181C01F08(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_181C01F14()
{
  return sub_18264F738();
}

uint64_t sub_181C01F3C()
{
  return sub_18264F744();
}

uint64_t HTTPField.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C558);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  BOOL v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v14 = *v1;
  uint64_t v8 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  int v19 = *((unsigned __int8 *)v1 + 32);
  uint64_t v9 = *((void *)v1 + 5);
  v13[0] = *((void *)v1 + 6);
  v13[1] = v9;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C027C8();
  sub_18264F714();
  __int128 v16 = v14;
  uint64_t v17 = v8;
  uint64_t v18 = v7;
  char v20 = 0;
  sub_181C0280C();
  uint64_t v10 = v15;
  sub_18264F45C();
  if (!v10)
  {
    int v11 = v19;
    LOBYTE(v16) = 1;
    sub_18264F444();
    if (v11)
    {
      LOBYTE(v16) = 2;
      sub_18264F474();
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t HTTPField.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C570);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C027C8();
  sub_18264F6E4();
  if (!v2)
  {
    char v31 = 0;
    sub_181C02850();
    sub_18264F3F0();
    unint64_t v9 = v28;
    uint64_t v10 = v30;
    uint64_t v25 = v29;
    unint64_t v26 = v27;
    LOBYTE(v27) = 1;
    uint64_t v11 = sub_18264F3D8();
    uint64_t v23 = v10;
    unint64_t v24 = v9;
    uint64_t v14 = v11;
    unint64_t v15 = v12;
    if (_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v11, v12))
    {
      uint64_t v22 = v14;
      LOBYTE(v27) = 2;
      __int16 v16 = sub_18264F3CC();
      uint64_t v17 = v23;
      __int16 v18 = v16;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v18 & 0x1FC) != 0) {
        char v19 = 0;
      }
      else {
        char v19 = v18;
      }
      unint64_t v20 = v24;
      *(void *)a2 = v26;
      *(void *)(a2 + 8) = v20;
      *(void *)(a2 + 16) = v25;
      *(void *)(a2 + 24) = v17;
      *(_BYTE *)(a2 + 32) = v19;
      *(void *)(a2 + 40) = v22;
      *(void *)(a2 + 48) = v15;
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v31 = 1;
      unint64_t v27 = 0LL;
      unint64_t v28 = 0xE000000000000000LL;
      sub_18264F168();
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD000000000000012LL;
      unint64_t v28 = 0x800000018272EB90LL;
      sub_18264EB74();
      swift_bridgeObjectRelease();
      sub_18264EB74();
      sub_18264F204();
      swift_allocError();
      sub_181C02894(&qword_18C58C580, &qword_18C58C570, MEMORY[0x189619B88]);
      sub_18264F1EC();
      swift_bridgeObjectRelease();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }

  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_181C02404@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPField.init(from:)(a1, a2);
}

uint64_t sub_181C02418(void *a1)
{
  return HTTPField.encode(to:)(a1);
}

uint64_t _s7Network9HTTPFieldV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    if (v2 != v5) {
      return 0LL;
    }
  }

  else
  {
    char v9 = sub_18264F4EC();
    uint64_t result = 0LL;
    if ((v9 & 1) == 0 || v2 != v5) {
      return result;
    }
  }

  if (v3 == v6 && v4 == v7) {
    return 1LL;
  }
  else {
    return sub_18264F4EC();
  }
}

uint64_t sub_181C024EC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(a1, a2))
  {
    *(void *)&__int128 v13 = v3;
    *((void *)&v13 + 1) = a2;
    uint64_t v14 = sub_181C01330;
    uint64_t v15 = 0LL;
    __int16 v16 = sub_181C0136C;
    uint64_t v17 = 0LL;
    __int16 v18 = sub_181C02E1C;
    uint64_t v19 = 0LL;
    __int128 v7 = v13;
    __int128 v8 = (unint64_t)sub_181C01330;
    __int128 v9 = (unint64_t)sub_181C0136C;
    __int128 v10 = (unint64_t)sub_181C02E1C;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C5C0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DFF0);
    if (swift_dynamicCast())
    {
      sub_181BE61DC(v5, (uint64_t)v11);
      __swift_project_boxed_opaque_existential_2(v11, v12);
      if ((sub_18264F378() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v11, v12);
        sub_18264F36C();
        uint64_t v3 = v7;
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
        return v3;
      }

      __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
    }

    else
    {
      uint64_t v6 = 0LL;
      memset(v5, 0, sizeof(v5));
      sub_181C02DDC((uint64_t)v5);
    }

    return sub_181C3A2A8(&v13);
  }

  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_181C02668(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if ((sub_181C01384(a1, a2) & 1) == 0)
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    __int128 v9 = sub_181C01520;
    uint64_t v10 = 0LL;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C5B0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DFF0);
    if (swift_dynamicCast())
    {
      sub_181BE61DC(v5, (uint64_t)v11);
      __swift_project_boxed_opaque_existential_2(v11, v12);
      if ((sub_18264F378() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v11, v12);
        sub_18264F36C();
        uint64_t v3 = *(void *)&v5[0];
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
        return v3;
      }

      __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
    }

    else
    {
      uint64_t v6 = 0LL;
      memset(v5, 0, sizeof(v5));
      sub_181C02DDC((uint64_t)v5);
    }

    return sub_181C3A360(v3, a2);
  }

  swift_bridgeObjectRetain();
  return v3;
}

unint64_t sub_181C027C8()
{
  unint64_t result = qword_18C58C560;
  if (!qword_18C58C560)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265E548, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58C560);
  }

  return result;
}

unint64_t sub_181C0280C()
{
  unint64_t result = qword_18C58C568;
  if (!qword_18C58C568)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_18C58C568);
  }

  return result;
}

unint64_t sub_181C02850()
{
  unint64_t result = qword_18C58C578;
  if (!qword_18C58C578)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_18C58C578);
  }

  return result;
}

uint64_t sub_181C02894(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E12084](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_181C028D8()
{
  unint64_t result = qword_18C58C588;
  if (!qword_18C58C588)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPField.DynamicTableIndexingStrategy,  &type metadata for HTTPField.DynamicTableIndexingStrategy);
    atomic_store(result, (unint64_t *)&qword_18C58C588);
  }

  return result;
}

unint64_t sub_181C02920()
{
  unint64_t result = qword_18C58C590;
  if (!qword_18C58C590)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPField, &type metadata for HTTPField);
    atomic_store(result, (unint64_t *)&qword_18C58C590);
  }

  return result;
}

uint64_t sub_181C02968(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return HTTPField.value.setter(v1, v2);
}

uint64_t destroy for HTTPField()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HTTPField(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HTTPField(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPField(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181BD3028(v3, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPField()
{
  return &type metadata for HTTPField;
}

ValueMetadata *type metadata accessor for HTTPField.DynamicTableIndexingStrategy()
{
  return &type metadata for HTTPField.DynamicTableIndexingStrategy;
}

uint64_t storeEnumTagSinglePayload for HTTPField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181C02C3C + 4 * byte_18265E295[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C02C70 + 4 * asc_18265E290[v4]))();
}

uint64_t sub_181C02C70(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C02C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C02C80LL);
  }
  return result;
}

uint64_t sub_181C02C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C02C94LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_181C02C98(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C02CA0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPField.CodingKeys()
{
  return &type metadata for HTTPField.CodingKeys;
}

unint64_t sub_181C02CC0()
{
  unint64_t result = qword_18C58C598;
  if (!qword_18C58C598)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265E520, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58C598);
  }

  return result;
}

unint64_t sub_181C02D08()
{
  unint64_t result = qword_18C58C5A0;
  if (!qword_18C58C5A0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265E458, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58C5A0);
  }

  return result;
}

unint64_t sub_181C02D50()
{
  unint64_t result = qword_18C58C5A8;
  if (!qword_18C58C5A8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265E480, &type metadata for HTTPField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58C5A8);
  }

  return result;
}

uint64_t sub_181C02D94()
{
  unint64_t v0 = sub_18264F390();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3LL;
  }
  else {
    return v0;
  }
}

uint64_t sub_181C02DDC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C5B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_181C02E20()
{
  qword_18C5A4958 = (uint64_t)&unk_189BA8B40;
}

void sub_181C02E34(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
}

void sub_181C02E44(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t sub_181C02E74@<X0>(void *a1@<X8>)
{
  if (qword_18C58B148 != -1) {
    swift_once();
  }
  *a1 = qword_18C5A4958;
  return swift_bridgeObjectRetain();
}

void sub_181C02EC4(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void sub_181C02EF8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_181C02F04()
{
  return sub_18264F684();
}

uint64_t sub_181C02F6C()
{
  return sub_18264E754();
}

uint64_t sub_181C02FA8()
{
  return sub_18264F684();
}

BOOL sub_181C0300C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_181C03020()
{
  uint64_t v0 = sub_18264E880();
  __swift_allocate_value_buffer(v0, qword_18C5A4960);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4960);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C670);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C678);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18265E5A0;
  uint64_t v6 = (void *)(v5 + v4);
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *uint64_t v6 = 1LL;
  *(void *)unint64_t v7 = "actorName";
  *(void *)(v7 + 8) = 9LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102C8];
  uint64_t v9 = sub_18264E868();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  uint64_t v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(void *)((char *)v6 + v3) = 2LL;
  *(void *)uint64_t v11 = "identifier";
  *((void *)v11 + 1) = 10LL;
  _BYTE v11[16] = 2;
  v10();
  return sub_18264E874();
}

uint64_t sub_181C03170()
{
  uint64_t result = sub_18264E760();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        sub_18264E7A8();
      }
      uint64_t result = sub_18264E760();
    }
  }

  return result;
}

uint64_t sub_181C03200()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = sub_18264E844(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000LL) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = sub_18264E844(), !v1))
    {
      type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
      return sub_18264E700();
    }
  }

  return result;
}

uint64_t sub_181C032D8@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  return sub_18264E70C();
}

unint64_t sub_181C03300()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_181C0331C()
{
  return sub_18264E7CC() & 1;
}

uint64_t (*sub_181C0333C())()
{
  return nullsub_1;
}

uint64_t sub_181C03350()
{
  return sub_181C03170();
}

uint64_t sub_181C03364()
{
  return sub_181C03200();
}

uint64_t sub_181C03378()
{
  return sub_18264E7FC();
}

uint64_t sub_181C0338C()
{
  return sub_18264E748() & 1;
}

uint64_t sub_181C033E4()
{
  return sub_18264E73C() & 1;
}

uint64_t sub_181C033FC@<X0>(uint64_t a1@<X8>)
{
  return sub_181C03D58(&qword_18C58B150, (uint64_t)qword_18C5A4960, a1);
}

uint64_t sub_181C03418()
{
  return sub_18264E7F0();
}

uint64_t sub_181C03460()
{
  return sub_18264E7FC();
}

uint64_t sub_181C034BC()
{
  uint64_t v0 = sub_18264E880();
  __swift_allocate_value_buffer(v0, qword_18C5A4978);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4978);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C670);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C678);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18265D160;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *(void *)(v5 + v4) = 1LL;
  *(void *)unint64_t v7 = "callID";
  *(void *)(v7 + 8) = 6LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102C8];
  uint64_t v9 = sub_18264E868();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = v6 + v3 + *(int *)(v1 + 48);
  *(void *)(v6 + v3) = 2LL;
  *(void *)unint64_t v11 = "recipient";
  *(void *)(v11 + 8) = 9LL;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  uint64_t v12 = (void *)(v6 + 2 * v3);
  __int128 v13 = (char *)v12 + *(int *)(v1 + 48);
  void *v12 = 3LL;
  *(void *)__int128 v13 = "invocationTarget";
  *((void *)v13 + 1) = 16LL;
  v13[16] = 2;
  v10();
  uint64_t v14 = (void *)(v6 + 3 * v3);
  uint64_t v15 = (char *)v14 + *(int *)(v1 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "genericSubs";
  *((void *)v15 + 1) = 11LL;
  v15[16] = 2;
  v10();
  __int16 v16 = (void *)(v6 + 4 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *__int16 v16 = 5LL;
  *(void *)uint64_t v17 = "arguments";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v10();
  __int16 v18 = (void *)(v6 + 5 * v3);
  uint64_t v19 = (char *)v18 + *(int *)(v1 + 48);
  void *v18 = 6LL;
  *(void *)uint64_t v19 = "options";
  *((void *)v19 + 1) = 7LL;
  v19[16] = 2;
  v10();
  return sub_18264E874();
}

uint64_t sub_181C036F4()
{
  uint64_t result = sub_18264E760();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
        case 3LL:
          sub_18264E7A8();
          break;
        case 2LL:
          sub_181C03818();
          break;
        case 4LL:
          sub_18264E79C();
          break;
        case 5LL:
          sub_18264E778();
          break;
        case 6LL:
          sub_18264E7B4();
          break;
        default:
          break;
      }

      uint64_t result = sub_18264E760();
    }
  }

  return result;
}

uint64_t sub_181C03818()
{
  return sub_18264E7C0();
}

uint64_t sub_181C038AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = sub_18264E844(), !v4))
  {
    uint64_t result = sub_181C03A28((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      unint64_t v11 = v3[3];
      uint64_t v12 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000LL) == 0) {
        uint64_t v12 = v3[2] & 0xFFFFFFFFFFFFLL;
      }
      if (v12) {
        sub_18264E844();
      }
      if (*(void *)(v3[4] + 16LL)) {
        sub_18264E838();
      }
      if (*(void *)(v3[5] + 16LL)) {
        sub_18264E814();
      }
      if (v3[6]) {
        sub_18264E850();
      }
      type metadata accessor for NWActorSystemProtobuf_RemoteCall(0LL);
      return sub_18264E700();
    }
  }

  return result;
}

uint64_t sub_181C03A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
  MEMORY[0x1895F8858](v5);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NWActorSystemProtobuf_RemoteCall(0LL);
  sub_181BE48BC(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_18C58C690);
  sub_181BC928C((uint64_t)v7, (uint64_t)v11, type metadata accessor for NWActorSystemProtobuf_ActorID);
  sub_181BD67D4(&qword_18C58C650, type metadata accessor for NWActorSystemProtobuf_ActorID, (uint64_t)&unk_18265EC90);
  sub_18264E85C();
  return sub_181BC920C((uint64_t)v11, type metadata accessor for NWActorSystemProtobuf_ActorID);
}

uint64_t sub_181C03B9C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  uint64_t v4 = MEMORY[0x18961AFE8];
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  a2[4] = v4;
  a2[5] = v4;
  a2[6] = 0LL;
  sub_18264E70C();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 40);
  uint64_t v6 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

unint64_t sub_181C03C0C()
{
  return 0xD000000000000020LL;
}

uint64_t sub_181C03C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_181C03C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_181C03CA8())()
{
  return nullsub_1;
}

uint64_t sub_181C03CBC()
{
  return sub_181C036F4();
}

uint64_t sub_181C03CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C038AC(a1, a2, a3);
}

uint64_t sub_181C03CE4()
{
  return sub_18264E748() & 1;
}

uint64_t sub_181C03D3C@<X0>(uint64_t a1@<X8>)
{
  return sub_181C03D58(&qword_18C58B158, (uint64_t)qword_18C5A4978, a1);
}

uint64_t sub_181C03D58@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = sub_18264E880();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a3, v6, v5);
}

uint64_t sub_181C03DC4()
{
  return sub_18264E7F0();
}

uint64_t sub_181C03E08()
{
  return sub_18264E7FC();
}

uint64_t sub_181C03E60()
{
  uint64_t v0 = sub_18264E880();
  __swift_allocate_value_buffer(v0, qword_18C5A4990);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4990);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C670);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C678);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18265E5B0;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *(void *)(v5 + v4) = 1LL;
  *(void *)unint64_t v7 = "callID";
  *(void *)(v7 + 8) = 6LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102C8];
  uint64_t v9 = sub_18264E868();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = v6 + v3 + *(int *)(v1 + 48);
  *(void *)(v6 + v3) = 2LL;
  *(void *)unint64_t v11 = "value";
  *(void *)(v11 + 8) = 5LL;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  uint64_t v12 = (void *)(v6 + 2 * v3);
  __int128 v13 = (char *)v12 + *(int *)(v1 + 48);
  void *v12 = 3LL;
  *(void *)__int128 v13 = "error";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v10();
  uint64_t v14 = (void *)(v6 + 3 * v3);
  uint64_t v15 = (char *)v14 + *(int *)(v1 + 48);
  *uint64_t v14 = 5LL;
  *(void *)uint64_t v15 = "metrics";
  *((void *)v15 + 1) = 7LL;
  v15[16] = 2;
  v10();
  return sub_18264E874();
}

uint64_t sub_181C04020()
{
  uint64_t result = sub_18264E760();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_18264E7A8();
          break;
        case 2LL:
          sub_18264E784();
          break;
        case 3LL:
          sub_181C0410C();
          break;
        case 5LL:
          sub_181C041A0();
          break;
        default:
          break;
      }

      uint64_t result = sub_18264E760();
    }
  }

  return result;
}

uint64_t sub_181C0410C()
{
  return sub_18264E7C0();
}

uint64_t sub_181C041A0()
{
  return sub_18264E7C0();
}

uint64_t sub_181C04234()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = sub_18264E844(), !v1)) {
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_181C04380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
  MEMORY[0x1895F8858](v5);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NWActorSystemProtobuf_Reply(0LL);
  sub_181BE48BC(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_18C58C6B0);
  sub_181BC928C((uint64_t)v7, (uint64_t)v11, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
  sub_181BD67D4(&qword_18C58C5D0, type metadata accessor for NWActorSystemProtobuf_Reply.Error, (uint64_t)&unk_18265E6F0);
  sub_18264E85C();
  return sub_181BC920C((uint64_t)v11, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
}

uint64_t sub_181C044F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
  MEMORY[0x1895F8858](v5);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NWActorSystemProtobuf_Reply(0LL);
  sub_181BE48BC(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_18C58C6A8);
  sub_181BC928C((uint64_t)v7, (uint64_t)v11, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
  sub_181BD67D4( &qword_18C58C5F0,  type metadata accessor for NWActorSystemProtobuf_Reply.Metrics,  (uint64_t)&unk_18265E858);
  sub_18264E85C();
  return sub_181BC920C((uint64_t)v11, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
}

uint64_t sub_181C04668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(_OWORD *)(a2 + 16) = xmmword_18265D190;
  sub_18264E70C();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

unint64_t sub_181C04704()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_181C04720()
{
  return sub_181C04020();
}

uint64_t sub_181C04734()
{
  return sub_181C04234();
}

uint64_t sub_181C04748()
{
  return sub_18264E748() & 1;
}

uint64_t sub_181C047A0@<X0>(uint64_t a1@<X8>)
{
  return sub_181C03D58(&qword_18C58B160, (uint64_t)qword_18C5A4990, a1);
}

uint64_t sub_181C047BC()
{
  return sub_18264E7F0();
}

uint64_t sub_181C04800()
{
  return sub_18264E7FC();
}

uint64_t sub_181C04858(uint64_t a1)
{
  return sub_181C04CA8(a1, 0x7363697274654D2ELL, 0xE800000000000000LL, qword_18C5A49A8, &qword_18C5A49A8[1]);
}

uint64_t sub_181C0487C()
{
  uint64_t v0 = sub_18264E880();
  __swift_allocate_value_buffer(v0, qword_18C5A49B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A49B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C670);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C678);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18265BE50;
  uint64_t v5 = v4 + v3 + *(int *)(v1 + 48);
  *(void *)(v4 + v3) = 1LL;
  *(void *)uint64_t v5 = "remoteExecutionTime";
  *(void *)(v5 + 8) = 19LL;
  *(_BYTE *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1896102C8];
  uint64_t v7 = sub_18264E868();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104LL))(v5, v6, v7);
  return sub_18264E874();
}

uint64_t sub_181C04980()
{
  while (1)
  {
    uint64_t result = sub_18264E760();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_18264E790();
    }
  }

  return result;
}

uint64_t sub_181C049EC()
{
  if (!*v0 || (uint64_t result = sub_18264E82C(), !v1))
  {
    type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
    return sub_18264E700();
  }

  return result;
}

uint64_t sub_181C04A7C@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  return sub_18264E70C();
}

uint64_t sub_181C04A9C(uint64_t a1, uint64_t a2)
{
  return sub_181C05078(a1, a2, &qword_18C58B168, qword_18C5A49A8);
}

uint64_t sub_181C04ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_181C04AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_181C04B3C())()
{
  return nullsub_1;
}

uint64_t sub_181C04B50()
{
  return sub_181C04980();
}

uint64_t sub_181C04B64()
{
  return sub_181C049EC();
}

uint64_t sub_181C04B78()
{
  return sub_18264E748() & 1;
}

uint64_t sub_181C04BD0@<X0>(uint64_t a1@<X8>)
{
  return sub_181C03D58(&qword_18C58B170, (uint64_t)qword_18C5A49B8, a1);
}

uint64_t sub_181C04BEC()
{
  return sub_18264E7F0();
}

uint64_t sub_181C04C30()
{
  return sub_18264E7FC();
}

uint64_t sub_181C04C88(uint64_t a1)
{
  return sub_181C04CA8(a1, 0x726F7272452ELL, 0xE600000000000000LL, qword_18C5A49D0, &qword_18C5A49D0[1]);
}

uint64_t sub_181C04CA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = sub_18264EB74();
  *a4 = 0xD00000000000001BLL;
  *a5 = 0x800000018272EC80LL;
  return result;
}

uint64_t sub_181C04D10()
{
  uint64_t v0 = sub_18264E880();
  __swift_allocate_value_buffer(v0, qword_18C5A49E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A49E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C670);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C678);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18265E5A0;
  uint64_t v6 = (void *)(v5 + v4);
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *uint64_t v6 = 1LL;
  *(void *)unint64_t v7 = "type";
  *(void *)(v7 + 8) = 4LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102C8];
  uint64_t v9 = sub_18264E868();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(void *)((char *)v6 + v3) = 2LL;
  *(void *)unint64_t v11 = "arguments";
  *((void *)v11 + 1) = 9LL;
  _BYTE v11[16] = 2;
  v10();
  return sub_18264E874();
}

uint64_t sub_181C04E60()
{
  uint64_t result = sub_18264E760();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_18264E778();
      }

      else if (result == 1)
      {
        sub_181C06E78();
        sub_18264E76C();
      }

      uint64_t result = sub_18264E760();
    }
  }

  return result;
}

uint64_t sub_181C04F40()
{
  if (!*v0 || (sub_181C06E78(), uint64_t result = sub_18264E808(), !v1))
  {
    if (!*(void *)(v0[2] + 16LL) || (uint64_t result = sub_18264E814(), !v1))
    {
      type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
      return sub_18264E700();
    }
  }

  return result;
}

uint64_t sub_181C05024@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = MEMORY[0x18961AFE8];
  return sub_18264E70C();
}

uint64_t sub_181C05058(uint64_t a1, uint64_t a2)
{
  return sub_181C05078(a1, a2, &qword_18C58B178, qword_18C5A49D0);
}

uint64_t sub_181C05078(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_181C050CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_181C0510C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_181C0514C()
{
  return sub_181C04E60();
}

uint64_t sub_181C05160()
{
  return sub_181C04F40();
}

uint64_t sub_181C05174()
{
  return sub_18264E748() & 1;
}

uint64_t sub_181C051CC@<X0>(uint64_t a1@<X8>)
{
  return sub_181C03D58(&qword_18C58B180, (uint64_t)qword_18C5A49E0, a1);
}

uint64_t sub_181C051E8()
{
  return sub_18264E7F0();
}

uint64_t sub_181C0522C()
{
  return sub_18264F684();
}

uint64_t sub_181C05280()
{
  return sub_18264E7FC();
}

uint64_t sub_181C052D4()
{
  return sub_18264F684();
}

uint64_t sub_181C05328()
{
  uint64_t v0 = sub_18264E880();
  __swift_allocate_value_buffer(v0, qword_18C5A49F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A49F8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C670);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C678);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18265D160;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + *(int *)(v1 + 48);
  *(void *)(v5 + v4) = 0LL;
  *(void *)unint64_t v7 = "ACTOR_RESOLUTION_FAILED";
  *(void *)(v7 + 8) = 23LL;
  *(_BYTE *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1896102C8];
  uint64_t v9 = sub_18264E868();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104LL);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  unint64_t v11 = v6 + v3 + *(int *)(v1 + 48);
  *(void *)(v6 + v3) = 1LL;
  *(void *)unint64_t v11 = "FAILED_TO_EXECUTE";
  *(void *)(v11 + 8) = 17LL;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  uint64_t v12 = (void *)(v6 + 2 * v3);
  __int128 v13 = (char *)v12 + *(int *)(v1 + 48);
  void *v12 = 2LL;
  *(void *)__int128 v13 = "UNDERLYING";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v10();
  uint64_t v14 = (void *)(v6 + 3 * v3);
  uint64_t v15 = (char *)v14 + *(int *)(v1 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "CODABLE_CLIENT";
  *((void *)v15 + 1) = 14LL;
  v15[16] = 2;
  v10();
  __int16 v16 = (void *)(v6 + 4 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *__int16 v16 = 4LL;
  *(void *)uint64_t v17 = "NONCODABLE_CLIENT";
  *((void *)v17 + 1) = 17LL;
  v17[16] = 2;
  v10();
  __int16 v18 = (void *)(v6 + 5 * v3);
  uint64_t v19 = (char *)v18 + *(int *)(v1 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "NSERROR";
  *((void *)v19 + 1) = 7LL;
  v19[16] = 2;
  v10();
  return sub_18264E874();
}

uint64_t sub_181C0555C@<X0>(uint64_t a1@<X8>)
{
  return sub_181C03D58(&qword_18C58B188, (uint64_t)qword_18C5A49F8, a1);
}

uint64_t sub_181C05578()
{
  return sub_181BD67D4( &qword_18C58C5C8,  type metadata accessor for NWActorSystemProtobuf_Reply.Error,  (uint64_t)&unk_18265E600);
}

uint64_t type metadata accessor for NWActorSystemProtobuf_Reply.Error(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58C9C0);
}

uint64_t sub_181C055B8()
{
  return sub_181BD67D4( &qword_18C58C5D0,  type metadata accessor for NWActorSystemProtobuf_Reply.Error,  (uint64_t)&unk_18265E6F0);
}

uint64_t sub_181C055E4()
{
  return sub_181BD67D4( &qword_18C58C5D8,  type metadata accessor for NWActorSystemProtobuf_Reply.Error,  (uint64_t)&unk_18265E628);
}

uint64_t sub_181C05610()
{
  return sub_181BD67D4( &qword_18C58C5E0,  type metadata accessor for NWActorSystemProtobuf_Reply.Error,  (uint64_t)&unk_18265E668);
}

uint64_t sub_181C0563C()
{
  return sub_181BD67D4( &qword_18C58C5E8,  type metadata accessor for NWActorSystemProtobuf_Reply.Metrics,  (uint64_t)&unk_18265E768);
}

uint64_t type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58C930);
}

uint64_t sub_181C0567C()
{
  return sub_181BD67D4( &qword_18C58C5F0,  type metadata accessor for NWActorSystemProtobuf_Reply.Metrics,  (uint64_t)&unk_18265E858);
}

uint64_t sub_181C056A8()
{
  return sub_181BD67D4( &qword_18C58C5F8,  type metadata accessor for NWActorSystemProtobuf_Reply.Metrics,  (uint64_t)&unk_18265E790);
}

uint64_t sub_181C056D4()
{
  return sub_181BD67D4( &qword_18C58C600,  type metadata accessor for NWActorSystemProtobuf_Reply.Metrics,  (uint64_t)&unk_18265E7D0);
}

uint64_t sub_181C05700()
{
  return sub_181BD67D4( &qword_18C58C608,  type metadata accessor for NWActorSystemProtobuf_Reply,  (uint64_t)&unk_18265E8D0);
}

uint64_t type metadata accessor for NWActorSystemProtobuf_Reply(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58C880);
}

uint64_t sub_181C05740()
{
  return sub_181BD67D4( &qword_18C58C610,  type metadata accessor for NWActorSystemProtobuf_Reply,  (uint64_t)&unk_18265E9C0);
}

uint64_t sub_181C0576C()
{
  return sub_181BD67D4( &qword_18C58C618,  type metadata accessor for NWActorSystemProtobuf_Reply,  (uint64_t)&unk_18265E8F8);
}

uint64_t sub_181C05798()
{
  return sub_181BD67D4( &qword_18C58C620,  type metadata accessor for NWActorSystemProtobuf_Reply,  (uint64_t)&unk_18265E938);
}

uint64_t sub_181C057C4()
{
  return sub_181BD67D4( &qword_18C58C628,  type metadata accessor for NWActorSystemProtobuf_RemoteCall,  (uint64_t)&unk_18265EA38);
}

uint64_t type metadata accessor for NWActorSystemProtobuf_RemoteCall(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58C7D0);
}

uint64_t sub_181C05804()
{
  return sub_181BD67D4( &qword_18C58C630,  type metadata accessor for NWActorSystemProtobuf_RemoteCall,  (uint64_t)&unk_18265EB28);
}

uint64_t sub_181C05830()
{
  return sub_181BD67D4( &qword_18C58C638,  type metadata accessor for NWActorSystemProtobuf_RemoteCall,  (uint64_t)&unk_18265EA60);
}

uint64_t sub_181C0585C()
{
  return sub_181BD67D4( &qword_18C58C640,  type metadata accessor for NWActorSystemProtobuf_RemoteCall,  (uint64_t)&unk_18265EAA0);
}

uint64_t sub_181C05888()
{
  return sub_181BD67D4( &qword_18C58C648,  type metadata accessor for NWActorSystemProtobuf_ActorID,  (uint64_t)&unk_18265EBA0);
}

uint64_t type metadata accessor for NWActorSystemProtobuf_ActorID(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58C738);
}

uint64_t sub_181C058C8()
{
  return sub_181BD67D4( &qword_18C58C650,  type metadata accessor for NWActorSystemProtobuf_ActorID,  (uint64_t)&unk_18265EC90);
}

uint64_t sub_181C058F4()
{
  return sub_181BD67D4( &qword_18C58C658,  type metadata accessor for NWActorSystemProtobuf_ActorID,  (uint64_t)&unk_18265EBC8);
}

uint64_t sub_181C05920()
{
  return sub_181BD67D4( &qword_18C58C660,  type metadata accessor for NWActorSystemProtobuf_ActorID,  (uint64_t)&unk_18265EC08);
}

uint64_t sub_181C0594C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_181C1B0A4((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_181C05A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_18264E484();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_18264E4A8();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = sub_18264E49C();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_181C1B0A4(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_181C05AD4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_181C05B20()
{
  return ((uint64_t (*)(void))((char *)&loc_181C05B54 + dword_181C05D2C[v0 >> 62]))();
}

uint64_t sub_181C05B64@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_181C05D4C(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (uint64_t *)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C698);
  MEMORY[0x1895F8858](v8);
  char v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (uint64_t *)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v47 - v16;
  MEMORY[0x1895F8858](v15);
  char v19 = (char *)&v47 - v18;
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  uint64_t v22 = *a2;
  uint64_t v23 = a2[1];
  uint64_t v50 = a2;
  if (v20 != v22 || v21 != v23)
  {
    char v24 = 0;
    if ((sub_18264F4EC() & 1) == 0) {
      return v24 & 1;
    }
  }

  uint64_t v25 = type metadata accessor for NWActorSystemProtobuf_RemoteCall(0LL);
  unint64_t v26 = a1;
  uint64_t v27 = v25;
  uint64_t v28 = *(int *)(v25 + 40);
  __int128 v49 = v26;
  sub_181BE48BC((uint64_t)v26 + v28, (uint64_t)v19, &qword_18C58C690);
  uint64_t v48 = v27;
  sub_181BE48BC((uint64_t)v50 + *(int *)(v27 + 40), (uint64_t)v17, &qword_18C58C690);
  uint64_t v29 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_181BE48BC((uint64_t)v19, (uint64_t)v10, &qword_18C58C690);
  sub_181BE48BC((uint64_t)v17, v29, &qword_18C58C690);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v30((uint64_t)v10, 1LL, v4) == 1)
  {
    sub_181BDA0F0((uint64_t)v17, &qword_18C58C690);
    sub_181BDA0F0((uint64_t)v19, &qword_18C58C690);
    if (v30(v29, 1LL, v4) == 1)
    {
      sub_181BDA0F0((uint64_t)v10, &qword_18C58C690);
      goto LABEL_24;
    }

    goto LABEL_9;
  }

  sub_181BE48BC((uint64_t)v10, (uint64_t)v14, &qword_18C58C690);
  if (v30(v29, 1LL, v4) == 1)
  {
    sub_181BDA0F0((uint64_t)v17, &qword_18C58C690);
    sub_181BDA0F0((uint64_t)v19, &qword_18C58C690);
    sub_181BC920C((uint64_t)v14, type metadata accessor for NWActorSystemProtobuf_ActorID);
LABEL_9:
    char v31 = &qword_18C58C698;
    uint64_t v32 = (uint64_t)v10;
LABEL_10:
    sub_181BDA0F0(v32, v31);
LABEL_11:
    char v24 = 0;
    return v24 & 1;
  }

  sub_181BC928C(v29, (uint64_t)v7, type metadata accessor for NWActorSystemProtobuf_ActorID);
  BOOL v34 = *v14 == *v7 && v14[1] == v7[1];
  if (!v34 && (sub_18264F4EC() & 1) == 0
    || (v14[2] == v7[2] ? (BOOL v35 = v14[3] == v7[3]) : (BOOL v35 = 0), !v35 && (sub_18264F4EC() & 1) == 0))
  {
    sub_181BC920C((uint64_t)v7, type metadata accessor for NWActorSystemProtobuf_ActorID);
    sub_181BDA0F0((uint64_t)v17, &qword_18C58C690);
    sub_181BDA0F0((uint64_t)v19, &qword_18C58C690);
    sub_181BC920C((uint64_t)v14, type metadata accessor for NWActorSystemProtobuf_ActorID);
    uint64_t v32 = (uint64_t)v10;
    char v31 = &qword_18C58C690;
    goto LABEL_10;
  }

  sub_18264E718();
  sub_181C063D0();
  char v36 = sub_18264EA24();
  sub_181BC920C((uint64_t)v7, type metadata accessor for NWActorSystemProtobuf_ActorID);
  sub_181BDA0F0((uint64_t)v17, &qword_18C58C690);
  sub_181BDA0F0((uint64_t)v19, &qword_18C58C690);
  sub_181BC920C((uint64_t)v14, type metadata accessor for NWActorSystemProtobuf_ActorID);
  sub_181BDA0F0((uint64_t)v10, &qword_18C58C690);
  if ((v36 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_24:
  char v37 = v49;
  if (v49[2] == v50[2] && v49[3] == v50[3] || (char v24 = 0, (sub_18264F4EC() & 1) != 0))
  {
    id v38 = v50;
    if ((sub_181C18A54((void *)v37[4], (void *)v50[4]) & 1) != 0
      && (sub_181C18B18(v37[5], v38[5]) & 1) != 0
      && v37[6] == v38[6])
    {
      int v39 = (char *)v37 + *(int *)(v48 + 36);
      uint64_t v40 = sub_18264E718();
      __int128 v49 = &v47;
      uint64_t v41 = *(void **)(v40 - 8);
      uint64_t v42 = v41[8];
      MEMORY[0x1895F8858](v40);
      int v43 = (char *)&v47 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v44 = (uint64_t (*)(char *, char *, uint64_t))v41[2];
      uint64_t v45 = v44(v43, v39, v40);
      MEMORY[0x1895F8858](v45);
      ((void (*)(char *))v44)(v43);
      sub_181C063D0();
      char v24 = sub_18264EA24();
      uint64_t v46 = (void (*)(char *, uint64_t))v41[1];
      v46(v43, v40);
      v46(v43, v40);
      return v24 & 1;
    }

    goto LABEL_11;
  }

  return v24 & 1;
}

uint64_t sub_181C06254(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = 0, (sub_18264F4EC() & 1) != 0))
  {
    BOOL v6 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v6 || (char v5 = 0, (sub_18264F4EC() & 1) != 0))
    {
      char v7 = (char *)a1 + *(int *)(type metadata accessor for NWActorSystemProtobuf_ActorID(0LL) + 24);
      uint64_t v8 = sub_18264E718();
      v16[1] = v16;
      uint64_t v9 = *(void **)(v8 - 8);
      uint64_t v10 = v9[8];
      MEMORY[0x1895F8858](v8);
      unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v12 = (uint64_t (*)(char *, char *, uint64_t))v9[2];
      uint64_t v13 = v12((char *)v16 - v11, v7, v8);
      MEMORY[0x1895F8858](v13);
      ((void (*)(char *))v12)((char *)v16 - v11);
      sub_181C063D0();
      char v5 = sub_18264EA24();
      uint64_t v14 = (void (*)(char *, uint64_t))v9[1];
      v14((char *)v16 - v11, v8);
      v14((char *)v16 - v11, v8);
    }
  }

  return v5 & 1;
}

unint64_t sub_181C063D0()
{
  unint64_t result = qword_18C58C680;
  if (!qword_18C58C680)
  {
    uint64_t v1 = sub_18264E718();
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189610128], v1);
    atomic_store(result, (unint64_t *)&qword_18C58C680);
  }

  return result;
}

uint64_t sub_181C06418(uint64_t *a1, void *a2)
{
  uint64_t v73 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v71 = *(void *)(v73 - 8);
  MEMORY[0x1895F8858](v73);
  uint64_t v68 = (uint64_t *)((char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B8);
  MEMORY[0x1895F8858](v5);
  char v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v69 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v74 = (uint64_t)&v64 - v12;
  MEMORY[0x1895F8858](v11);
  uint64_t v72 = (uint64_t)&v64 - v13;
  uint64_t v14 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v70 = (uint64_t *)((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6C0);
  MEMORY[0x1895F8858](v17);
  char v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v75 = (uint64_t *)((char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v64 - v24;
  MEMORY[0x1895F8858](v23);
  uint64_t v27 = (char *)&v64 - v26;
  uint64_t v28 = *a1;
  uint64_t v29 = a1[1];
  os_log_type_t v76 = a1;
  uint64_t v77 = a2;
  if (v28 == *a2 && v29 == a2[1] || (char v30 = 0, (sub_18264F4EC() & 1) != 0))
  {
    char v31 = v76;
    uint64_t v32 = v77;
    sub_181C05AD4(v76[2], v76[3]);
    if ((v33 & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v65 = v5;
    uint64_t v67 = v7;
    uint64_t v34 = type metadata accessor for NWActorSystemProtobuf_Reply(0LL);
    sub_181BE48BC((uint64_t)v31 + *(int *)(v34 + 28), (uint64_t)v27, &qword_18C58C6B0);
    uint64_t v66 = v34;
    sub_181BE48BC((uint64_t)v32 + *(int *)(v34 + 28), (uint64_t)v25, &qword_18C58C6B0);
    uint64_t v35 = (uint64_t)&v19[*(int *)(v17 + 48)];
    sub_181BE48BC((uint64_t)v27, (uint64_t)v19, &qword_18C58C6B0);
    sub_181BE48BC((uint64_t)v25, v35, &qword_18C58C6B0);
    char v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (v36((uint64_t)v19, 1LL, v14) == 1)
    {
      sub_181BDA0F0((uint64_t)v25, &qword_18C58C6B0);
      sub_181BDA0F0((uint64_t)v27, &qword_18C58C6B0);
      int v37 = v36(v35, 1LL, v14);
      uint64_t v38 = (uint64_t)v67;
      if (v37 == 1)
      {
        sub_181BDA0F0((uint64_t)v19, &qword_18C58C6B0);
LABEL_12:
        uint64_t v45 = v66;
        uint64_t v46 = v76;
        uint64_t v47 = v72;
        sub_181BE48BC((uint64_t)v76 + *(int *)(v66 + 32), v72, &qword_18C58C6A8);
        uint64_t v48 = v74;
        sub_181BE48BC((uint64_t)v77 + *(int *)(v45 + 32), v74, &qword_18C58C6A8);
        uint64_t v49 = v38 + *(int *)(v65 + 48);
        sub_181BE48BC(v47, v38, &qword_18C58C6A8);
        sub_181BE48BC(v48, v49, &qword_18C58C6A8);
        uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
        uint64_t v51 = v73;
        if (v50(v38, 1LL, v73) == 1)
        {
          sub_181BDA0F0(v48, &qword_18C58C6A8);
          sub_181BDA0F0(v47, &qword_18C58C6A8);
          if (v50(v49, 1LL, v51) == 1)
          {
            sub_181BDA0F0(v38, &qword_18C58C6A8);
LABEL_20:
            uint64_t v55 = (char *)v46 + *(int *)(v66 + 24);
            uint64_t v56 = sub_18264E718();
            os_log_type_t v76 = &v64;
            uint64_t v57 = *(void **)(v56 - 8);
            uint64_t v58 = v57[8];
            MEMORY[0x1895F8858](v56);
            uint64_t v59 = (char *)&v64 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v60 = (uint64_t (*)(char *, char *, uint64_t))v57[2];
            uint64_t v61 = v60(v59, v55, v56);
            MEMORY[0x1895F8858](v61);
            ((void (*)(char *))v60)(v59);
            sub_181C063D0();
            char v30 = sub_18264EA24();
            uint64_t v62 = (void (*)(char *, uint64_t))v57[1];
            v62(v59, v56);
            v62(v59, v56);
            return v30 & 1;
          }

          goto LABEL_17;
        }

        uint64_t v52 = v69;
        sub_181BE48BC(v38, (uint64_t)v69, &qword_18C58C6A8);
        if (v50(v49, 1LL, v51) == 1)
        {
          sub_181BDA0F0(v48, &qword_18C58C6A8);
          sub_181BDA0F0(v47, &qword_18C58C6A8);
          sub_181BC920C((uint64_t)v52, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
LABEL_17:
          uint64_t v41 = &qword_18C58C6B8;
          uint64_t v42 = v38;
          goto LABEL_22;
        }

        int64_t v53 = v68;
        sub_181BC928C(v49, (uint64_t)v68, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
        if (*v52 != *v53)
        {
          sub_181BC920C((uint64_t)v53, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
          sub_181BDA0F0(v74, &qword_18C58C6A8);
          sub_181BDA0F0(v47, &qword_18C58C6A8);
          sub_181BC920C((uint64_t)v52, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
          uint64_t v42 = v38;
          uint64_t v41 = &qword_18C58C6A8;
          goto LABEL_22;
        }

        sub_18264E718();
        sub_181C063D0();
        char v54 = sub_18264EA24();
        sub_181BC920C((uint64_t)v53, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
        sub_181BDA0F0(v74, &qword_18C58C6A8);
        sub_181BDA0F0(v47, &qword_18C58C6A8);
        sub_181BC920C((uint64_t)v52, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
        sub_181BDA0F0(v38, &qword_18C58C6A8);
        if ((v54 & 1) != 0) {
          goto LABEL_20;
        }
LABEL_23:
        char v30 = 0;
        return v30 & 1;
      }
    }

    else
    {
      int v39 = v75;
      sub_181BE48BC((uint64_t)v19, (uint64_t)v75, &qword_18C58C6B0);
      int v40 = v36(v35, 1LL, v14);
      uint64_t v38 = (uint64_t)v67;
      if (v40 != 1)
      {
        int v43 = v70;
        sub_181BC928C(v35, (uint64_t)v70, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
        char v44 = sub_181C06CBC(v39, v43);
        sub_181BC920C((uint64_t)v43, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
        sub_181BDA0F0((uint64_t)v25, &qword_18C58C6B0);
        sub_181BDA0F0((uint64_t)v27, &qword_18C58C6B0);
        sub_181BC920C((uint64_t)v39, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
        sub_181BDA0F0((uint64_t)v19, &qword_18C58C6B0);
        if ((v44 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_12;
      }

      sub_181BDA0F0((uint64_t)v25, &qword_18C58C6B0);
      sub_181BDA0F0((uint64_t)v27, &qword_18C58C6B0);
      sub_181BC920C((uint64_t)v39, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
    }

    uint64_t v41 = &qword_18C58C6C0;
    uint64_t v42 = (uint64_t)v19;
LABEL_22:
    sub_181BDA0F0(v42, v41);
    goto LABEL_23;
  }

  return v30 & 1;
}

uint64_t sub_181C06B74(void *a1, void *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v2 = (char *)a1 + *(int *)(type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL) + 20);
    uint64_t v3 = sub_18264E718();
    v12[1] = v12;
    uint64_t v4 = *(void **)(v3 - 8);
    uint64_t v5 = v4[8];
    MEMORY[0x1895F8858](v3);
    unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    char v7 = (uint64_t (*)(char *, char *, uint64_t))v4[2];
    uint64_t v8 = v7((char *)v12 - v6, v2, v3);
    MEMORY[0x1895F8858](v8);
    ((void (*)(char *))v7)((char *)v12 - v6);
    sub_181C063D0();
    char v9 = sub_18264EA24();
    uint64_t v10 = (void (*)(char *, uint64_t))v4[1];
    v10((char *)v12 - v6, v3);
    v10((char *)v12 - v6, v3);
  }

  else
  {
    char v9 = 0;
  }

  return v9 & 1;
}

uint64_t sub_181C06CBC(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*((_BYTE *)a2 + 8) == 1) {
    __asm { BR              X11 }
  }

  if (*a1 == v3 && (sub_181C18B18(a1[2], a2[2]) & 1) != 0)
  {
    uint64_t v4 = (char *)a1 + *(int *)(type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL) + 24);
    uint64_t v5 = sub_18264E718();
    v14[1] = v14;
    unint64_t v6 = *(void **)(v5 - 8);
    uint64_t v7 = v6[8];
    MEMORY[0x1895F8858](v5);
    unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    char v9 = (uint64_t (*)(char *, char *, uint64_t))v6[2];
    uint64_t v10 = v9((char *)v14 - v8, v4, v5);
    MEMORY[0x1895F8858](v10);
    ((void (*)(char *))v9)((char *)v14 - v8);
    sub_181C063D0();
    char v11 = sub_18264EA24();
    uint64_t v12 = (void (*)(char *, uint64_t))v6[1];
    v12((char *)v14 - v8, v5);
    v12((char *)v14 - v8, v5);
  }

  else
  {
    char v11 = 0;
  }

  return v11 & 1;
}

unint64_t sub_181C06E78()
{
  unint64_t result = qword_18C58C6D8;
  if (!qword_18C58C6D8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265EEC4, &type metadata for NWActorSystemProtobuf_Reply.Error.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_18C58C6D8);
  }

  return result;
}

uint64_t *sub_181C06EBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    unint64_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = sub_18264E718();
    char v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }

  return v3;
}

uint64_t sub_181C06F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_181C06FC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18264E718();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *sub_181C07048(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18264E718();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  return a1;
}

_OWORD *sub_181C070E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_18264E718();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

void *sub_181C07140(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_18264E718();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_181C071BC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C071C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_18264E718();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_181C07244()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C07250(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_18264E718();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_181C072C4()
{
  return sub_181C093C0();
}

uint64_t *sub_181C072D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    uint64_t *v4 = *a2;
    unint64_t v4 = (uint64_t *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[6];
    a1[5] = a2[5];
    a1[6] = v10;
    uint64_t v11 = *(int *)(a3 + 36);
    uint64_t v28 = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    a1[4] = v9;
    uint64_t v13 = sub_18264E718();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v28, v12, v13);
    uint64_t v15 = *(int *)(a3 + 40);
    uint64_t v16 = (uint64_t *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      uint64_t v22 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v22;
      uint64_t v23 = v17[3];
      void v16[2] = v17[2];
      v16[3] = v23;
      uint64_t v24 = *(int *)(v18 + 24);
      uint64_t v25 = (char *)v16 + v24;
      uint64_t v26 = (char *)v17 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v25, v26, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }
  }

  return v4;
}

uint64_t sub_181C0746C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_18264E718();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  }

  return result;
}

void *sub_181C0754C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[6];
  a1[5] = a2[5];
  a1[6] = v9;
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v26 = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  a1[4] = v8;
  uint64_t v12 = sub_18264E718();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v26, v11, v12);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    uint64_t v20 = v16[1];
    void *v15 = *v16;
    v15[1] = v20;
    uint64_t v21 = v16[3];
    void v15[2] = v16[2];
    uint64_t v15[3] = v21;
    uint64_t v22 = *(int *)(v17 + 24);
    uint64_t v23 = (char *)v15 + v22;
    uint64_t v24 = (char *)v16 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v23, v24, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  return a1;
}

void *sub_181C076B8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18264E718();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1LL, v15);
  int v18 = v17(v14, 1LL, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v13 + 2) = *((void *)v14 + 2);
      *((void *)v13 + 3) = *((void *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v9);
      return a1;
    }

    sub_181BC920C((uint64_t)v13, type metadata accessor for NWActorSystemProtobuf_ActorID);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
    memcpy(v13, v14, *(void *)(*(void *)(v23 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *((void *)v13 + 3) = *((void *)v14 + 3);
  uint64_t v19 = *(int *)(v15 + 24);
  uint64_t v20 = &v13[v19];
  uint64_t v21 = &v14[v19];
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

uint64_t sub_181C078E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = sub_18264E718();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    __int128 v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *sub_181C079FC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_18264E718();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19(v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      uint64_t v24 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v24;
      swift_bridgeObjectRelease();
      uint64_t v25 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v25;
      swift_bridgeObjectRelease();
      v13(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v11);
      return a1;
    }

    sub_181BC920C((uint64_t)v15, type metadata accessor for NWActorSystemProtobuf_ActorID);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    return a1;
  }

  __int128 v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t sub_181C07BB0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C07BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_18264E718();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 36);
    }

    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 40);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_181C07C60()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C07C6C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_18264E718();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 36);
    }

    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 40);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_181C07D0C()
{
  if (v0 <= 0x3F)
  {
    sub_181C08C30( 319LL,  qword_18C58C7E0,  (void (*)(uint64_t))type metadata accessor for NWActorSystemProtobuf_ActorID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }

uint64_t *sub_181C07DCC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    unint64_t v9 = a2[3];
    swift_bridgeObjectRetain();
    sub_181BCD4AC(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_18264E718();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    v14(v11, v12, v13);
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      *uint64_t v16 = *v17;
      *((_BYTE *)v16 + 8) = *((_BYTE *)v17 + 8);
      void v16[2] = v17[2];
      uint64_t v22 = *(int *)(v18 + 24);
      uint64_t v23 = (char *)v16 + v22;
      uint64_t v24 = (char *)v17 + v22;
      swift_bridgeObjectRetain();
      v14(v23, v24, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    uint64_t v25 = a3[8];
    uint64_t v26 = (uint64_t *)((char *)a1 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      void *v26 = *v27;
      v14((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }
  }

  return a1;
}

uint64_t sub_181C07FC4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_18264E718();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 24), v5);
  }

  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

void *sub_181C080DC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  swift_bridgeObjectRetain();
  sub_181BCD4AC(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_18264E718();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  v13(v10, v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    void *v15 = *v16;
    *((_BYTE *)v15 + 8) = *((_BYTE *)v16 + 8);
    void v15[2] = v16[2];
    uint64_t v20 = *(int *)(v17 + 24);
    uint64_t v21 = (char *)v15 + v20;
    uint64_t v22 = (char *)v16 + v20;
    swift_bridgeObjectRetain();
    v13(v21, v22, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    void *v24 = *v25;
    v13((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  return a1;
}

void *sub_181C082A8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_181BCD4AC(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  sub_181BCD4F0(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18264E718();
  uint64_t v40 = *(void *)(v13 - 8);
  int v39 = *(void (**)(char *, char *, uint64_t))(v40 + 24);
  v39(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19((uint64_t)v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      uint64_t v22 = *(void *)v16;
      *(_BYTE *)(v15 + 8) = v16[8];
      *(void *)uint64_t v15 = v22;
      *(void *)(v15 + 16) = *((void *)v16 + 2);
      uint64_t v23 = *(int *)(v17 + 24);
      uint64_t v24 = v15 + v23;
      uint64_t v25 = &v16[v23];
      uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v40 + 16);
      swift_bridgeObjectRetain();
      v26(v24, v25, v13);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_181BC920C(v15, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
    memcpy((void *)v15, v16, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v38 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = v16[8];
  *(void *)uint64_t v15 = v38;
  *(void *)(v15 + 16) = *((void *)v16 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39((char *)(v15 + *(int *)(v17 + 24)), &v16[*(int *)(v17 + 24)], v13);
LABEL_7:
  uint64_t v28 = a3[8];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  char v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (!v34)
  {
    if (!v35)
    {
      *(void *)uint64_t v29 = *(void *)v30;
      v39(&v29[*(int *)(v31 + 20)], &v30[*(int *)(v31 + 20)], v13);
      return a1;
    }

    sub_181BC920C((uint64_t)v29, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
    goto LABEL_12;
  }

  if (v35)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
    memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v29 = *(void *)v30;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&v29[*(int *)(v31 + 20)], &v30[*(int *)(v31 + 20)], v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  return a1;
}

_OWORD *sub_181C08570(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_18264E718();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    void *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    void v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)((char *)a1 + v18);
  int v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    void *v19 = *v20;
    v11((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

void *sub_181C08718(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_181BCD4F0(v7, v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_18264E718();
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 40);
  v32(v10, v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (v19)
  {
    if (!v20)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))( v14 + *(int *)(v16 + 24),  v15 + *(int *)(v16 + 24),  v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v20)
  {
    sub_181BC920C(v14, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_7;
  }

  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  v32((char *)(v14 + *(int *)(v16 + 24)), v15 + *(int *)(v16 + 24), v12);
LABEL_7:
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)(a2 + v22);
  uint64_t v25 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1LL, v25);
  int v29 = v27(v24, 1LL, v25);
  if (!v28)
  {
    if (!v29)
    {
      *(void *)uint64_t v23 = *(void *)v24;
      v32(&v23[*(int *)(v25 + 20)], (uint64_t)&v24[*(int *)(v25 + 20)], v12);
      return a1;
    }

    sub_181BC920C((uint64_t)v23, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
    goto LABEL_12;
  }

  if (v29)
  {
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v23 = *(void *)v24;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
  return a1;
}

uint64_t sub_181C089B0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C089BC(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_18264E718();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_181C08A88()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C08A94(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_18264E718();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_181C08B5C()
{
  if (v0 <= 0x3F)
  {
    sub_181C08C30( 319LL,  &qword_18C58C890,  (void (*)(uint64_t))type metadata accessor for NWActorSystemProtobuf_Reply.Error);
    if (v1 <= 0x3F)
    {
      sub_181C08C30( 319LL,  qword_18C58C898,  (void (*)(uint64_t))type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }

void sub_181C08C30(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255LL);
    unint64_t v4 = sub_18264F09C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }

uint64_t *sub_181C08C7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_18264E718();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_181C08D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

void *sub_181C08D3C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_18264E718();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

void *sub_181C08D98(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_18264E718();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

void *sub_181C08DF4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_18264E718();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_181C08E50(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_18264E718();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_181C08EAC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C08EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t sub_181C08EF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C08F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_181C08F48()
{
  uint64_t result = sub_18264E718();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *sub_181C08FC0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_18264E718();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_181C0906C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_18264E718();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_181C090B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_18264E718();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_181C09134(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = sub_18264E718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_181C091B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_18264E718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_181C09224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_18264E718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  return a1;
}

uint64_t sub_181C092A0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C092AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_18264E718();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_181C09328()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C09334(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_18264E718();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_181C093A8()
{
  return sub_181C093C0();
}

uint64_t sub_181C093C0()
{
  uint64_t result = sub_18264E718();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for NWActorSystemProtobuf_Reply.Error.TypeEnum()
{
  return &type metadata for NWActorSystemProtobuf_Reply.Error.TypeEnum;
}

unint64_t sub_181C09440()
{
  unint64_t result = qword_18C58CA00;
  if (!qword_18C58CA00)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265EDEC, &type metadata for NWActorSystemProtobuf_Reply.Error.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_18C58CA00);
  }

  return result;
}

unint64_t sub_181C09488()
{
  unint64_t result = qword_18C58CA08;
  if (!qword_18C58CA08)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58CA10);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C58CA08);
  }

  return result;
}

unint64_t sub_181C094D8()
{
  unint64_t result = qword_18C58CA18;
  if (!qword_18C58CA18)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265EE14, &type metadata for NWActorSystemProtobuf_Reply.Error.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_18C58CA18);
  }

  return result;
}

unint64_t sub_181C09520()
{
  unint64_t result = qword_18C58CA20;
  if (!qword_18C58CA20)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265EE54, &type metadata for NWActorSystemProtobuf_Reply.Error.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_18C58CA20);
  }

  return result;
}

  ;
}

uint64_t sub_181C09578()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WeakDistributedActor()
{
  return objc_opt_self();
}

uint64_t sub_181C095BC(uint64_t a1)
{
  return a1;
}

uint64_t static NWDiscoverableActor.connectionParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t static NWDiscoverableActor<>.discover(using:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a2;
  uint64_t v20 = a1;
  uint64_t v6 = (int *)type metadata accessor for NWActorDiscoveryMechanism(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v21, a3, a4);
  __int128 v18 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = v23;
  char v11 = v24;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  sub_181C09724(v19, (uint64_t)v8);
  uint64_t v14 = &v8[v6[5]];
  *(_OWORD *)uint64_t v14 = v18;
  *((void *)v14 + 2) = v9;
  *((void *)v14 + 3) = v10;
  _BYTE v14[32] = v11;
  *(void *)&v8[v6[6]] = v12;
  *(void *)&v8[v6[7]] = v13;
  static DistributedActor<>.discover(_:using:)((uint64_t)v8, v20);
  uint64_t v16 = v15;
  sub_181C09768((uint64_t)v8);
  return v16;
}

uint64_t sub_181C09724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C09768(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of static NWDiscoverableActor.browseDescriptor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static NWDiscoverableActor.browsingParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static NWDiscoverableActor.connectionParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_181C097BC()
{
  uint64_t v0 = sub_18264E934();
  __swift_allocate_value_buffer(v0, qword_18C58CA28);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_18C58CA28);
  if (qword_18C58B270 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4A60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_181C0984C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CA68);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C0B510();
  sub_18264F714();
  LOBYTE((*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v12) = 0;
  sub_18264F444();
  if (!v2)
  {
    __int128 v12 = *(_OWORD *)(v3 + 16);
    char v11 = 1;
    sub_181C0B554();
    sub_18264F45C();
    __int128 v12 = *(_OWORD *)(v3 + 32);
    char v11 = 2;
    sub_18264F45C();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_181C099B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CA88);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  __int128 v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C0B870();
  sub_18264F714();
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  char v18 = 0;
  sub_181C0B554();
  sub_18264F45C();
  if (!v5)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    char v18 = 1;
    sub_18264F45C();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_181C09B0C()
{
  uint64_t v1 = 0x7550726576726573LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x7550746E65696C63LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4449746567726174LL;
  }
}

uint64_t sub_181C09B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181C0BDF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_181C09BA4()
{
  return sub_18264F738();
}

uint64_t sub_181C09BCC()
{
  return sub_18264F744();
}

double sub_181C09BF4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_181C09C34(void *a1)
{
  return sub_181C0984C(a1);
}

uint64_t sub_181C09C48()
{
  if (*v0) {
    return 0x7550746E65696C63LL;
  }
  else {
    return 0x7550726576726573LL;
  }
}

uint64_t sub_181C09C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181C0BF88(a1, a2);
  *a3 = result;
  return result;
}

void sub_181C09CAC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_181C09CB8()
{
  return sub_18264F738();
}

uint64_t sub_181C09CE0()
{
  return sub_18264F744();
}

uint64_t sub_181C09D08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_181C0B8B4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_181C09D34(void *a1)
{
  return sub_181C099B8(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_181C09D50(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + sub_181C095BC(v0 + 16) = 0;
  *(void *)(v3 + sub_181C095BC(v0 + 16) = v7;
  *(_WORD *)(v3 + 24) = 0;
  *(void *)(v3 + 64) = 0LL;
  *(void *)(v3 + 72) = 0LL;
  *(void *)(v3 + 48) = a3;
  *(void *)(v3 + 56) = 0LL;
  *(void *)(v3 + 40) = a2;
  id v8 = objc_allocWithZone((Class)&OBJC_CLASS___NWRPFileTransferSession);
  swift_retain();
  char v9 = a1 & 1;
  id v10 = objc_msgSend(v8, sel_initAsTarget_, a1 & 1);
  *(void *)(v3 + 32) = v10;
  uint64_t v11 = MEMORY[0x1895F87A8];
  if ((a1 & 1) != 0)
  {
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    char v24 = sub_181C0B058;
    uint64_t v25 = v12;
    uint64_t v20 = v11;
    uint64_t v21 = 1107296256LL;
    uint64_t v22 = sub_181C0A000;
    uint64_t v23 = &block_descriptor_11;
    uint64_t v13 = _Block_copy(&v20);
    id v14 = v10;
    swift_release();
    objc_msgSend(v14, sel_setReceivedFileHandler_, v13);
    _Block_release(v13);

    id v10 = *(id *)(v3 + 32);
  }

  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = swift_allocObject();
  *(_BYTE *)(v16 + sub_181C095BC(v0 + 16) = v9;
  *(void *)(v16 + 24) = v15;
  char v24 = sub_181C0B04C;
  uint64_t v25 = v16;
  uint64_t v20 = v11;
  uint64_t v21 = 1107296256LL;
  uint64_t v22 = sub_181C32D2C;
  uint64_t v23 = &block_descriptor_7;
  uint64_t v17 = _Block_copy(&v20);
  id v18 = v10;
  swift_release();
  objc_msgSend(v18, sel_setCompletionHandler_, v17);
  swift_release();
  _Block_release(v17);

  return v3;
}

uint64_t sub_181C09F58(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(result + 64);
    if (v5)
    {
      sub_181BC904C(*(void *)(result + 64));
      swift_release();
      v5(a1, a2);
      return sub_181BD25B8((uint64_t)v5);
    }

    else
    {
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_181C0A000(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = sub_18264EA48();
  uint64_t v4 = v3;
  swift_retain();
  v1(v2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C0A054(char a1)
{
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_181C0A118();
      return swift_release();
    }
  }

  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v2 = result;
      sub_181C0A508();
      uint64_t v3 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16LL);
      os_unfair_lock_lock(v3);
      sub_181BF787C(v4, sub_181C0B060);
      os_unfair_lock_unlock(v3);
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_181C0A118()
{
  uint64_t v1 = v0;
  if (qword_18C58B190 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_18264E934();
  __swift_project_value_buffer(v2, (uint64_t)qword_18C58CA28);
  uint64_t v3 = (os_log_s *)sub_18264E91C();
  os_log_type_t v4 = sub_18264F018();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_181A5C000, v3, v4, "Invalidating file transfer session", v5, 2u);
    MEMORY[0x186E12168](v5, -1LL, -1LL);
  }

  return (*(uint64_t (**)(id))(v1 + 40))(objc_msgSend(*(id *)(v1 + 32), sel_invalidate));
}

void sub_181C0A200(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = *(void **)(v4 + 32);
    uint64_t v7 = (void *)sub_18264EA3C();
    objc_msgSend(v6, sel_setTargetID_, v7);
  }

  if (a4 >> 60 != 15)
  {
    id v8 = *(void **)(v4 + 32);
    char v9 = (void *)sub_18264E5EC();
    objc_msgSend(v8, sel_setPeerPublicKey_, v9);
  }

  id v10 = (os_unfair_lock_s *)(*(void *)(v4 + 16) + 16LL);
  os_unfair_lock_lock(v10);
  sub_181C4D620((void *(*)(uint64_t *__return_ptr))sub_181C0AFEC, &v11);
  os_unfair_lock_unlock(v10);
  if (v11 == 1) {
    sub_181C0A3A4();
  }
}

id sub_181C0A2F4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id result = objc_msgSend(v4, sel_targetID);
  if (result
    && (result, (id result = objc_msgSend(v4, sel_peerPublicKey)) != 0))
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_18264E5F8();
    unint64_t v9 = v8;

    id result = (id)sub_181BCD4F0(v7, v9);
    char v10 = 1;
  }

  else
  {
    char v10 = 0;
  }

  *(_BYTE *)(a1 + 24) = v10;
  *a2 = *(_BYTE *)(a1 + 25);
  return result;
}

void sub_181C0A3A4()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16LL);
  os_unfair_lock_lock(v1);
  sub_181C4D620((void *(*)(uint64_t *__return_ptr))sub_181C0AFD8, &v2);
  os_unfair_lock_unlock(v1);
  if (v2 == 1) {
    objc_msgSend(*(id *)(v0 + 32), sel_activate);
  }
}

uint64_t sub_181C0A428(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 32);
  uint64_t v4 = (void *)sub_18264E520();
  v7[4] = sub_181C0ACC8;
  v7[5] = a1;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1107296256LL;
  void v7[2] = sub_181C0A968;
  v7[3] = &block_descriptor_4;
  uint64_t v5 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_transferFileURL_completion_, v4, v5);
  _Block_release(v5);

  LOBYTE(v7[0]) = 0;
  return sub_181CA250C((unsigned __int8 *)v7);
}

void sub_181C0A508()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16LL);
  os_unfair_lock_lock(v1);
  sub_181C0AF8C(&v3);
  uint64_t v2 = v3;
  os_unfair_lock_unlock(v1);
  if (v2)
  {
    swift_retain();
    sub_18264EE5C();
    swift_release_n();
  }

uint64_t sub_181C0A58C(id a1)
{
  if (a1)
  {
    id v2 = a1;
    if (qword_18C58B190 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_18264E934();
    __swift_project_value_buffer(v3, (uint64_t)qword_18C58CA28);
    swift_retain();
    id v4 = a1;
    swift_retain();
    id v5 = a1;
    uint64_t v6 = (os_log_s *)sub_18264E91C();
    os_log_type_t v7 = sub_18264F000();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v23 = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      swift_retain();
      uint64_t v10 = sub_18264EAC0();
      sub_181BF7900(v10, v11, &v23);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      id v12 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
      uint64_t v13 = sub_18264EAC0();
      sub_181BF7900(v13, v14, &v23);
      sub_18264F0CC();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_181A5C000, v6, v7, "%s failed to transfer: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v9, -1LL, -1LL);
      MEMORY[0x186E12168](v8, -1LL, -1LL);
    }

    else
    {

      swift_release_n();
    }
  }

  else
  {
    if (qword_18C58B190 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_18264E934();
    __swift_project_value_buffer(v15, (uint64_t)qword_18C58CA28);
    swift_retain_n();
    uint64_t v16 = (os_log_s *)sub_18264E91C();
    os_log_type_t v17 = sub_18264F018();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v23 = v19;
      *(_DWORD *)id v18 = 136315138;
      swift_retain();
      uint64_t v20 = sub_18264EAC0();
      sub_181BF7900(v20, v21, &v23);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181A5C000, v16, v17, "%s transferred successfully", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v19, -1LL, -1LL);
      MEMORY[0x186E12168](v18, -1LL, -1LL);
    }

    else
    {

      swift_release_n();
    }
  }

  return sub_181CA20E4(a1);
}

void sub_181C0A968(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_181C0A9BC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v2);
  id v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = 0LL;
  void v6[3] = 0LL;
  void v6[4] = a1;
  swift_retain();
  *(void *)(a1 + 56) = sub_181C3B844((uint64_t)v4, (uint64_t)&unk_18C58CA48, (uint64_t)v6);
  return swift_release();
}

uint64_t sub_181C0AA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v5 = sub_18264F2AC();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C0AAF4()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_18C58CA50 + dword_18C58CA50);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_181C0AB74;
  return v3(0x43561A8829300000LL, 16LL, 0LL, 0LL, 1);
}

uint64_t sub_181C0AB74()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

uint64_t sub_181C0ABF4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C0AC2C()
{
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C0AC64()
{
  swift_release();
  swift_release();
  sub_181BD25B8(*(void *)(v0 + 64));
  return swift_deallocClassInstance();
}

uint64_t _s19FileTransferSessionCMa()
{
  return objc_opt_self();
}

uint64_t sub_181C0ACC8(void *a1)
{
  return sub_181C0A58C(a1);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_181C0ACE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = sub_18264F294();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + sub_181C095BC(v0 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_181C0AD8C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  sub_18264F2AC();
  sub_181BD67D4(&qword_18C58CA58, (uint64_t (*)(uint64_t))MEMORY[0x18961BF20], MEMORY[0x18961BF28]);
  sub_18264F5D0();
  sub_181BD67D4(&qword_18C58CA60, (uint64_t (*)(uint64_t))MEMORY[0x18961BF00], MEMORY[0x18961BF10]);
  sub_18264F2B8();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  void *v5 = v0;
  v5[1] = sub_181C0AEA4;
  return sub_18264F5DC();
}

uint64_t sub_181C0AEA4()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_181C0AF50()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_181C0AF8C(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0LL;
  *a1 = v2;
}

void *sub_181C0AF9C@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  id result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

void sub_181C0AFD8(_BYTE *a1@<X8>)
{
  *(_BYTE *)(v1 + 25) = 1;
  *a1 = *(_BYTE *)(v1 + 24);
}

id sub_181C0AFEC@<X0>(_BYTE *a1@<X8>)
{
  return sub_181C0A2F4(v1, a1);
}

uint64_t sub_181C0B004()
{
  return swift_deallocObject();
}

uint64_t sub_181C0B028()
{
  return swift_deallocObject();
}

uint64_t sub_181C0B04C()
{
  return sub_181C0A054(*(_BYTE *)(v0 + 16));
}

uint64_t sub_181C0B058(uint64_t a1, uint64_t a2)
{
  return sub_181C09F58(a1, a2);
}

uint64_t sub_181C0B060()
{
  return sub_181C0A9BC(v0);
}

uint64_t sub_181C0B078()
{
  return swift_deallocObject();
}

uint64_t sub_181C0B0A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + sub_181C095BC(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_181BC63C4;
  return sub_181C0AA94(a1, v4, v5, v6);
}

uint64_t _s20FileTransferResponseVwxx(uint64_t a1)
{
  return sub_181BCD4F0(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *_s20FileTransferResponseVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_181BCD4AC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_181BCD4AC(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *_s20FileTransferResponseVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_181BCD4AC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_181BCD4F0(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_181BCD4AC(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_181BCD4F0(v10, v11);
  return a1;
}

uint64_t *_s20FileTransferResponseVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_181BCD4F0(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_181BCD4F0(v6, v7);
  return a1;
}

uint64_t _s20FileTransferResponseVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s20FileTransferResponseVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + sub_181C095BC(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)id result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)id result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *_s20FileTransferResponseVMa()
{
  return &_s20FileTransferResponseVN;
}

uint64_t _s19FileTransferRequestVwxx(uint64_t a1)
{
  return sub_181BCD4F0(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void *_s19FileTransferRequestVwcp(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  swift_bridgeObjectRetain();
  sub_181BCD4AC(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v8 = a2[4];
  unint64_t v7 = a2[5];
  sub_181BCD4AC(v8, v7);
  a1[4] = v8;
  a1[5] = v7;
  return a1;
}

void *_s19FileTransferRequestVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  sub_181BCD4AC(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  sub_181BCD4F0(v6, v7);
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  sub_181BCD4AC(v9, v8);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  a1[4] = v9;
  a1[5] = v8;
  sub_181BCD4F0(v10, v11);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + sub_181C095BC(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *_s19FileTransferRequestVwta(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_181BCD4F0(v5, v6);
  uint64_t v7 = a1[4];
  unint64_t v8 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_181BCD4F0(v7, v8);
  return a1;
}

uint64_t _s19FileTransferRequestVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181BD3028(v3, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FileTransferRequestVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s19FileTransferRequestVMa()
{
  return &_s19FileTransferRequestVN;
}

unint64_t sub_181C0B510()
{
  unint64_t result = qword_18C58CA70;
  if (!qword_18C58CA70)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F2D0, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CA70);
  }

  return result;
}

unint64_t sub_181C0B554()
{
  unint64_t result = qword_18C58CA78;
  if (!qword_18C58CA78)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189606D88], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C58CA78);
  }

  return result;
}

uint64_t sub_181C0B598@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CA80);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C0B510();
  sub_18264F6E4();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  LOBYTE(v22) = 0;
  uint64_t v9 = sub_18264F3D8();
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  char v24 = 1;
  unint64_t v12 = sub_181C0B82C();
  swift_bridgeObjectRetain();
  unint64_t v21 = v12;
  sub_18264F3F0();
  char v24 = 2;
  unint64_t v18 = v23;
  uint64_t v19 = v22;
  sub_181BCD4AC(v22, v23);
  sub_18264F3F0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v22;
  unint64_t v14 = v23;
  swift_bridgeObjectRetain();
  unint64_t v16 = v18;
  uint64_t v15 = v19;
  sub_181BCD4AC(v19, v18);
  sub_181BCD4AC(v13, v14);
  sub_181BCD4F0(v15, v16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  swift_bridgeObjectRelease();
  sub_181BCD4F0(v15, v16);
  uint64_t result = sub_181BCD4F0(v13, v14);
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v15;
  a2[3] = v16;
  a2[4] = v13;
  a2[5] = v14;
  return result;
}

unint64_t sub_181C0B82C()
{
  unint64_t result = qword_18C58E6F0;
  if (!qword_18C58E6F0)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189606DA0], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C58E6F0);
  }

  return result;
}

unint64_t sub_181C0B870()
{
  unint64_t result = qword_18C58CA90;
  if (!qword_18C58CA90)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F280, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CA90);
  }

  return result;
}

uint64_t sub_181C0B8B4(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CA98);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_2(a1, v7);
  sub_181C0B870();
  sub_18264F6E4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }

  else
  {
    char v14 = 0;
    sub_181C0B82C();
    sub_18264F3F0();
    uint64_t v7 = v12;
    unint64_t v9 = v13;
    char v14 = 1;
    sub_181BCD4AC(v12, v13);
    sub_18264F3F0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v10 = v12;
    unint64_t v11 = v13;
    sub_181BCD4AC(v7, v9);
    sub_181BCD4AC(v10, v11);
    sub_181BCD4F0(v7, v9);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
    sub_181BCD4F0(v7, v9);
    sub_181BCD4F0(v10, v11);
  }

  return v7;
}

uint64_t _s20FileTransferResponseV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181C0BAF8 + 4 * byte_18265EFA5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C0BB2C + 4 * asc_18265EFA0[v4]))();
}

uint64_t sub_181C0BB2C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C0BB34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C0BB3CLL);
  }
  return result;
}

uint64_t sub_181C0BB48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C0BB50LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181C0BB54(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C0BB5C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s20FileTransferResponseV10CodingKeysOMa()
{
  return &_s20FileTransferResponseV10CodingKeysON;
}

uint64_t _s19FileTransferRequestV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181C0BBC4 + 4 * byte_18265EFAF[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C0BBF8 + 4 * byte_18265EFAA[v4]))();
}

uint64_t sub_181C0BBF8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C0BC00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C0BC08LL);
  }
  return result;
}

uint64_t sub_181C0BC14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C0BC1CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_181C0BC20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C0BC28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s19FileTransferRequestV10CodingKeysOMa()
{
  return &_s19FileTransferRequestV10CodingKeysON;
}

unint64_t sub_181C0BC48()
{
  unint64_t result = qword_18C58CAA0;
  if (!qword_18C58CAA0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F1A0, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CAA0);
  }

  return result;
}

unint64_t sub_181C0BC90()
{
  unint64_t result = qword_18C58CAA8;
  if (!qword_18C58CAA8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F258, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CAA8);
  }

  return result;
}

unint64_t sub_181C0BCD8()
{
  unint64_t result = qword_18C58CAB0;
  if (!qword_18C58CAB0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F1C8, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CAB0);
  }

  return result;
}

unint64_t sub_181C0BD20()
{
  unint64_t result = qword_18C58CAB8;
  if (!qword_18C58CAB8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F1F0, &_s20FileTransferResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CAB8);
  }

  return result;
}

unint64_t sub_181C0BD68()
{
  unint64_t result = qword_18C58CAC0;
  if (!qword_18C58CAC0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F110, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CAC0);
  }

  return result;
}

unint64_t sub_181C0BDB0()
{
  unint64_t result = qword_18C58CAC8;
  if (!qword_18C58CAC8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F138, &_s19FileTransferRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CAC8);
  }

  return result;
}

uint64_t sub_181C0BDF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449746567726174LL && a2 == 0xE800000000000000LL;
  if (v2 || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x7550726576726573LL && a2 == 0xEF79654B63696C62LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x7550746E65696C63LL && a2 == 0xEF79654B63696C62LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_181C0BF88(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7550726576726573LL && a2 == 0xEF79654B63696C62LL;
  if (v2 || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x7550746E65696C63LL && a2 == 0xEF79654B63696C62LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_181C0C0C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1) {
    return ((uint64_t (*)(void))((char *)&loc_181C0C0F8 + 4 * byte_18265F320[v2]))();
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0) {
    return 0LL;
  }
  return v2 == *(void *)a2;
}

void sub_181C0C148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }

uint64_t sub_181C0DAE8(int a1, uint64_t a2)
{
  if (!a2 || (MEMORY[0x186E0E688](a2), !v3)) {
    swift_bridgeObjectRelease();
  }
  uint64_t result = 0LL;
  switch(a1)
  {
    case -6:
      uint64_t result = 4LL;
      break;
    case -5:
      uint64_t result = 3LL;
      break;
    case -4:
      uint64_t result = 2LL;
      break;
    case -3:
      uint64_t result = 1LL;
      break;
    case -2:
      return result;
    default:
      uint64_t result = a1;
      break;
  }

  return result;
}

uint64_t sub_181C0DB9C(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0LL;
    }

    else
    {
      sub_18264E4C0();
      swift_allocObject();
      sub_18264E4B4();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_18264E5B0();
        uint64_t result = swift_allocObject();
        *(void *)(result + sub_181C095BC(v0 + 16) = 0LL;
        *(void *)(result + 24) = 0LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

unint64_t sub_181C0DC30()
{
  unint64_t result = qword_18C58CAD0;
  if (!qword_18C58CAD0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F334, &type metadata for GzipError);
    atomic_store(result, (unint64_t *)&qword_18C58CAD0);
  }

  return result;
}

uint64_t destroy for GzipError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GzipError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_181C095BC(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GzipError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + sub_181C095BC(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GzipError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_181C095BC(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GzipError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181BD3028(v3, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GzipError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_181C095BC(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GzipError()
{
  return &type metadata for GzipError;
}

ValueMetadata *type metadata accessor for GzipError.Kind()
{
  return &type metadata for GzipError.Kind;
}

uint64_t sub_181C0DDF0(uint64_t a1)
{
  return sub_181BE8FF4(a1, (uint64_t (*)(void))nw_protocol_copy_http_definition, &off_18C58CAE0);
}

uint64_t static NWProtocolHTTP.definition.getter()
{
  return sub_181BE8D9C(&qword_18C58B198);
}

BOOL sub_181C0DE20(void *a1)
{
  return nw_protocol_options_is_http_messaging(a1);
}

uint64_t NWProtocolHTTP.Options.__allocating_init()()
{
  return sub_181C0E0C8((uint64_t (*)(void))nw_http_messaging_create_options);
}

uint64_t NWProtocolHTTP.Options.deinit()
{
  return v0;
}

BOOL sub_181C0DE60(void *a1)
{
  return nw_protocol_metadata_is_http(a1);
}

uint64_t NWProtocolHTTP.Metadata.__allocating_init(request:)(const void *a1)
{
  uint64_t v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), a1, 0x120uLL);
  metadata_for_request = nw_http_create_metadata_for_request((void *)v2);
  swift_release();
  uint64_t result = swift_allocObject();
  *(void *)(result + sub_181C095BC(v0 + 16) = metadata_for_request;
  return result;
}

uint64_t NWProtocolHTTP.Metadata.__allocating_init(response:)(__int128 *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 3);
  char v4 = *((_BYTE *)a1 + 32);
  __int128 v9 = *(__int128 *)((char *)a1 + 40);
  __int128 v10 = *a1;
  uint64_t v5 = *((void *)a1 + 7);
  type metadata accessor for __NWHTTPResponse();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + sub_181C095BC(v0 + 16) = v10;
  *(void *)(v6 + 32) = v2;
  *(void *)(v6 + 40) = v3;
  *(_BYTE *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 56) = v9;
  *(void *)(v6 + 72) = v5;
  *(_OWORD *)(v6 + 80) = a1[4];
  metadata_for_response = nw_http_create_metadata_for_response((void *)v6);
  swift_release();
  uint64_t result = swift_allocObject();
  *(void *)(result + sub_181C095BC(v0 + 16) = metadata_for_response;
  return result;
}

uint64_t NWProtocolHTTP.Metadata.trailerFields.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)nw_http_metadata_copy_trailer_fields(*(void **)(v1 + 16));
  if (result)
  {
    uint64_t v4 = result;
    sub_181C87FF8(MEMORY[0x18961AFE8]);
    uint64_t v5 = (_DWORD *)swift_slowAlloc();
    _DWORD *v5 = 0;
    swift_beginAccess();
    uint64_t v6 = *(void *)(v4 + 16);
    swift_retain();
    MEMORY[0x186E12168](v5, -1LL, -1LL);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  *a1 = v6;
  return result;
}

uint64_t NWProtocolHTTP.deinit()
{
  return v0;
}

uint64_t NWProtocolHTTP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C0E078(uint64_t a1)
{
  return sub_181BE8FF4(a1, (uint64_t (*)(void))nw_protocol_copy_http_encoding_definition, qword_18C58CAE8);
}

uint64_t static NWProtocolHTTPEncoding.definition.getter()
{
  return sub_181BE8D9C(&qword_18C58B1A0);
}

BOOL sub_181C0E0A8(void *a1)
{
  return nw_protocol_options_is_http_encoding(a1);
}

uint64_t NWProtocolHTTPEncoding.Options.__allocating_init()()
{
  return sub_181C0E0C8((uint64_t (*)(void))nw_http_encoding_create_options);
}

uint64_t sub_181C0E0C8(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t result = swift_allocObject();
  *(void *)(result + sub_181C095BC(v0 + 16) = v1;
  return result;
}

uint64_t NWProtocolHTTPEncoding.deinit()
{
  return v0;
}

uint64_t NWConnection.ContentContext.__allocating_init(request:)(const void *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58A250);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + sub_181C095BC(v0 + 16) = xmmword_18265F3B0;
  type metadata accessor for __NWHTTPRequest();
  uint64_t v5 = swift_allocObject();
  memcpy((void *)(v5 + 16), a1, 0x120uLL);
  metadata_for_request = nw_http_create_metadata_for_request((void *)v5);
  swift_release();
  type metadata accessor for NWProtocolHTTP.Metadata();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + sub_181C095BC(v0 + 16) = metadata_for_request;
  *(void *)(inited + 32) = v7;
  sub_18264ECDC();
  return (*(uint64_t (**)(uint64_t, unint64_t, void, void, void, uint64_t, double))(v2 + 152))( 0x7165722D70747468LL,  0xEC00000074736575LL,  0LL,  0LL,  0LL,  inited,  0.5);
}

uint64_t NWConnection.ContentContext.__allocating_init(response:)(__int128 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  char v6 = *((_BYTE *)a1 + 32);
  __int128 v13 = *(__int128 *)((char *)a1 + 40);
  __int128 v14 = *a1;
  uint64_t v7 = *((void *)a1 + 7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58A250);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + sub_181C095BC(v0 + 16) = xmmword_18265F3B0;
  type metadata accessor for __NWHTTPResponse();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + sub_181C095BC(v0 + 16) = v14;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v5;
  *(_BYTE *)(v9 + 48) = v6;
  *(_OWORD *)(v9 + 56) = v13;
  *(void *)(v9 + 72) = v7;
  *(_OWORD *)(v9 + 80) = a1[4];
  metadata_for_response = nw_http_create_metadata_for_response((void *)v9);
  swift_release();
  type metadata accessor for NWProtocolHTTP.Metadata();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + sub_181C095BC(v0 + 16) = metadata_for_response;
  *(void *)(inited + 32) = v11;
  sub_18264ECDC();
  return (*(uint64_t (**)(uint64_t, unint64_t, void, void, void, uint64_t, double))(v2 + 152))( 0x7365722D70747468LL,  0xED000065736E6F70LL,  0LL,  0LL,  0LL,  inited,  0.5);
}

uint64_t NWConnection.ContentContext.httpRequest.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_18C58B198 != -1) {
    swift_once();
  }
  nw_protocol_metadata_t v3 = nw_content_context_copy_protocol_metadata( *(nw_content_context_t *)(v1 + 16),  *((nw_protocol_definition_t *)off_18C58CAE0 + 4));
  if (!v3) {
    goto LABEL_9;
  }
  nw_protocol_metadata_t v4 = v3;
  uint64_t v5 = sub_181C32C0C((uint64_t)v3);
  if (!v5)
  {
    swift_unknownObjectRelease();
LABEL_9:
    sub_181C0F1F4(v11);
    return sub_181C0F220((uint64_t)v11, a1);
  }

  ((void (*)(nw_protocol_metadata_t))v5[12])(v4);
  type metadata accessor for NWProtocolHTTP.Metadata();
  char v6 = *(void **)(swift_dynamicCastClassUnconditional() + 16);
  swift_retain();
  uint64_t v7 = (char *)nw_http_metadata_copy_request(v6);
  if (!v7)
  {
    swift_release_n();
    goto LABEL_9;
  }

  unint64_t v8 = v7 + 16;
  swift_beginAccess();
  memcpy(__dst, v8, sizeof(__dst));
  sub_181C0F308(__dst);
  swift_release_n();
  swift_unknownObjectRelease();
  memcpy(v11, __dst, sizeof(v11));
  nullsub_1(v11);
  return sub_181C0F220((uint64_t)v11, a1);
}

double NWConnection.ContentContext.httpResponse.getter@<D0>(void *a1@<X8>)
{
  if (qword_18C58B198 != -1) {
    swift_once();
  }
  nw_protocol_metadata_t v3 = nw_content_context_copy_protocol_metadata( *(nw_content_context_t *)(v1 + 16),  *((nw_protocol_definition_t *)off_18C58CAE0 + 4));
  if (v3)
  {
    nw_protocol_metadata_t v4 = v3;
    uint64_t v5 = sub_181C32C0C((uint64_t)v3);
    if (v5)
    {
      ((void (*)(nw_protocol_metadata_t))v5[12])(v4);
      type metadata accessor for NWProtocolHTTP.Metadata();
      char v6 = *(void **)(swift_dynamicCastClassUnconditional() + 16);
      swift_retain();
      uint64_t v7 = nw_http_metadata_copy_response(v6);
      if (v7)
      {
        unint64_t v8 = v7;
        swift_beginAccess();
        uint64_t v9 = v8[3];
        uint64_t v10 = v8[5];
        uint64_t v18 = v8[4];
        uint64_t v19 = v8[2];
        uint64_t v17 = *((unsigned __int8 *)v8 + 48);
        uint64_t v12 = v8[7];
        uint64_t v11 = v8[8];
        uint64_t v14 = v8[9];
        uint64_t v13 = v8[10];
        uint64_t v15 = v8[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release_n();
        swift_unknownObjectRelease();
        *a1 = v19;
        a1[1] = v9;
        a1[2] = v18;
        a1[3] = v10;
        a1[4] = v17;
        a1[5] = v12;
        a1[6] = v11;
        a1[7] = v14;
        a1[8] = v13;
        a1[9] = v15;
        return result;
      }

      swift_release_n();
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  double result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t NWConnection.__allocating_init(obliviousHTTPConnection:gatewayKeyConfig:contextID:mediaType:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  void v23[3] = a5;
  v23[8] = a4;
  v25[1] = *MEMORY[0x1895F89C0];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v8);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  v23[4] = *(void *)(v9 - 8);
  v23[5] = v9;
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)v23 - v13;
  uint64_t v15 = *(void **)(a1 + 16);
  swift_unknownObjectRetain();
  id v16 = nw_protocol_copy_oblivious_http_contexts_definition();
  uint64_t v17 = (nw_parameters *)nw_connection_copy_connected_parameters_with_protocol(v15, v16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    v23[0] = v12;
    v23[1] = v14;
    uint64_t v18 = nw_parameters_copy_default_protocol_stack(v17);
    v25[0] = 0LL;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + sub_181C095BC(v0 + 16) = v25;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + sub_181C095BC(v0 + 16) = sub_181C0F47C;
    *(void *)(v20 + 24) = v19;
    v23[7] = v19;
    void aBlock[4] = sub_181BD639C;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    _OWORD aBlock[2] = sub_181C0EC80;
    aBlock[3] = &block_descriptor_5;
    unint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v23[6] = v18;
    nw_protocol_stack_iterate_application_protocols(v18, v21);
    _Block_release(v21);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v21 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x181C0EC14LL);
    }

    if (v25[0]) {
      __asm { BR              X10 }
    }

    sub_181BCD4F0(a2, a3);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }

  else
  {
    sub_181BCD4F0(a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
  }

  return 0LL;
}

uint64_t sub_181C0EC60(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_181C0EC80(uint64_t a1, uint64_t a2)
{
  nw_protocol_metadata_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t NWConnection.__allocating_init<A>(obliviousHTTPConnection:standaloneAEADKey:contextID:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a5;
  uint64_t v46 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v9);
  uint64_t v40 = (uint64_t)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for NWEndpoint();
  uint64_t v11 = *(void *)(v41 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v41);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  id v16 = (char *)v37 - v15;
  uint64_t v17 = *(void **)(a1 + 16);
  swift_unknownObjectRetain();
  id v18 = nw_protocol_copy_oblivious_http_contexts_definition();
  uint64_t v19 = (nw_parameters *)nw_connection_copy_connected_parameters_with_protocol(v17, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (!v19)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
    return 0LL;
  }

  uint64_t v43 = a1;
  uint64_t v44 = a2;
  v37[0] = (uint64_t)v14;
  v37[1] = v5;
  uint64_t v38 = v16;
  uint64_t v20 = nw_parameters_copy_default_protocol_stack(v19);
  uint64_t v48 = 0LL;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + sub_181C095BC(v0 + 16) = &v48;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + sub_181C095BC(v0 + 16) = sub_181C0F5A8;
  *(void *)(v22 + 24) = v21;
  void aBlock[4] = sub_181BDA300;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  _OWORD aBlock[2] = sub_181C0EC80;
  aBlock[3] = &block_descriptor_13;
  unint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v42 = v20;
  nw_protocol_stack_iterate_application_protocols(v20, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v23 & 1) == 0)
  {
    uint64_t v25 = v48;
    if (v48)
    {
      uint64_t v39 = v21;
      uint64_t v26 = v44;
      MEMORY[0x1895F8858](result);
      v37[-2] = (uint64_t)v25;
      swift_unknownObjectRetain();
      sub_18264E4CC();
      nw_oblivious_http_set_context_id(v25, v46);
      uint64_t v27 = (nw_connection *)nw_connection_create_with_connection(*(void **)(v43 + 16), v19);
      if (v27)
      {
        uint64_t v28 = (uint64_t)v27;
        uint64_t v29 = v26;
        uint64_t v30 = nw_connection_copy_endpoint(v27);
        uint64_t v31 = v40;
        sub_181BDA308(v30, v40);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v31, 1LL, v41) != 1)
        {
          uint64_t v33 = (uint64_t)v38;
          sub_181BE4800(v31, (uint64_t)v38);
          uint64_t v34 = v37[0];
          sub_181BE4744(v33, v37[0]);
          type metadata accessor for NWParameters();
          uint64_t v35 = swift_allocObject();
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
          uint64_t v36 = swift_allocObject();
          *(_DWORD *)(v36 + 24) = 0;
          *(void *)(v36 + sub_181C095BC(v0 + 16) = v19;
          *(void *)(v35 + sub_181C095BC(v0 + 16) = v36;
          swift_allocObject();
          swift_unknownObjectRetain();
          uint64_t v32 = sub_181C6BD24(v34, v35, v28);
          swift_unknownObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(v29, a4);
          sub_181BE4788(v33);
          swift_release();
          swift_unknownObjectRelease();
          return v32;
        }

        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(v26, a4);
        sub_181C006F0(v31);
      }

      else
      {
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(v26, a4);
      }
    }

    else
    {
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(v44, a4);
    }

    swift_release();
    swift_unknownObjectRelease();
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_181C0F178(uint64_t result, uint64_t *a2)
{
  if (!*a2)
  {
    uint64_t v3 = result;
    uint64_t result = nw_protocol_options_is_oblivious_http((void *)result);
    if ((_DWORD)result)
    {
      *a2 = v3;
      swift_unknownObjectRetain();
      return swift_unknownObjectRelease();
    }
  }

  return result;
}

uint64_t type metadata accessor for NWProtocolHTTP.Metadata()
{
  return objc_opt_self();
}

double sub_181C0F1F4(_OWORD *a1)
{
  double result = 0.0;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_181C0F220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CAF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C0F268(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = sub_18264E484();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_18264E4A8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v11 = sub_18264E49C();
  if (v8)
  {
    if (v11 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = a4;
    uint64_t v14 = v8;
  }

  else
  {
    uint64_t v13 = a4;
    uint64_t v14 = 0LL;
    uint64_t v12 = 0LL;
  }

  nw_oblivious_http_set_config(v13, v14, v12);
  return swift_unknownObjectRelease();
}

void *sub_181C0F308(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[21];
  uint64_t v9 = a1[29];
  uint64_t v10 = a1[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_181BCECA4(v2, v3);
  sub_181BCECA4(v6, v5);
  sub_181BCECA4(v8, v7);
  sub_181BCECA4(v10, v9);
  swift_retain();
  return a1;
}

uint64_t sub_181C0F46C()
{
  return swift_deallocObject();
}

uint64_t sub_181C0F47C(uint64_t a1)
{
  return sub_181C0F178(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_181C0F494()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_181C0F4BC()
{
  return swift_deallocObject();
}

uint64_t sub_181C0F4CC()
{
  return swift_deallocObject();
}

uint64_t sub_181C0F4DC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a2 - a1;
    uint64_t v4 = a1;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  return nw_oblivious_http_set_standalone_aead_key(*(void **)(v2 + 16), v4, v3);
}

uint64_t type metadata accessor for NWProtocolHTTP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolHTTP.Options()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolHTTPEncoding()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolHTTPEncoding.Options()
{
  return objc_opt_self();
}

uint64_t NWInterface.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NWInterface.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_18264EACC();
  swift_bridgeObjectRelease();
  uint64_t v3 = nw_interface_create_with_name((char *)(v2 + 32));
  uint64_t result = swift_release();
  if (v3) {
    uint64_t v5 = (uint64_t)v3;
  }
  else {
    uint64_t v5 = 1LL;
  }
  *a1 = v5;
  return result;
}

uint64_t NWInterface.init(_:)@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if ((a1 & 0x8000000000000000LL) != 0 || HIDWORD(a1))
  {
    uint64_t result = sub_18264F318();
    __break(1u);
  }

  else
  {
    uint64_t result = (uint64_t)nw_interface_create_with_index(a1);
    if (result) {
      uint64_t v4 = result;
    }
    else {
      uint64_t v4 = 1LL;
    }
    *a2 = v4;
  }

  return result;
}

uint64_t NWInterface.name.getter()
{
  if (!*v0) {
    return 0x64696C61766E69LL;
  }
  uint64_t v1 = (nw_interface *)swift_unknownObjectRetain();
  nw_interface_get_name(v1);
  uint64_t v2 = sub_18264EB80();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t NWInterface.index.getter()
{
  if (*v0) {
    return nw_interface_get_index(*v0);
  }
  else {
    return -1LL;
  }
}

uint64_t NWInterface.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_181C0F778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = sub_181C8C190(a1);
  if ((v6 & 1) != 0)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_181C91D98();
      uint64_t v9 = v15;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, v10 + *(void *)(v12 + 72) * v7, v11);
    sub_181C4CC80(v7, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

uint64_t NWInterface.debugDescription.getter()
{
  if (!*v0) {
    return 0x64696C61766E69LL;
  }
  uint64_t v1 = (nw_interface *)swift_unknownObjectRetain();
  nw_interface_get_name(v1);
  uint64_t v2 = sub_18264EB80();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t NWInterface.hash(into:)()
{
  if (*v0)
  {
    nw_interface_get_index(*v0);
    sub_18264F654();
    uint64_t v1 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v1);
    sub_18264EB80();
    swift_unknownObjectRelease();
  }

  else
  {
    sub_18264F654();
  }

  sub_18264EB44();
  return swift_bridgeObjectRelease();
}

BOOL static NWInterface.InterfaceType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWInterface.InterfaceType.hash(into:)()
{
  return sub_18264F654();
}

nw_interface *NWInterface.type.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = *v1;
  if (*v1)
  {
    uint64_t result = (nw_interface *)nw_interface_get_type(result);
    else {
      char v4 = (char)result;
    }
  }

  else
  {
    char v4 = 0;
  }

  *a1 = v4;
  return result;
}

void *NWInterface.subtype.getter@<X0>(char *a1@<X8>)
{
  uint64_t result = *v1;
  if (!*v1) {
    goto LABEL_9;
  }
  uint64_t result = (void *)nw_interface_get_subtype(result);
  if ((int)result > 4000)
  {
    if ((_DWORD)result == 4001)
    {
      char v4 = 3;
      goto LABEL_10;
    }

    if ((_DWORD)result == 5001)
    {
      char v4 = 4;
      goto LABEL_10;
    }

BOOL static NWInterface.RadioType.Cellular.NewRadio5GVariant.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWInterface.RadioType.Cellular.NewRadio5GVariant.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWInterface.RadioType.Cellular.NewRadio5GVariant.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181C0FB08@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 0;
  switch((int)result)
  {
    case 1:
      goto LABEL_8;
    case 2:
      *a2 = 1;
      break;
    case 3:
      *a2 = 2;
      break;
    case 4:
      *a2 = 3;
      break;
    case 5:
      *a2 = 4;
      break;
    case 6:
      *a2 = 5;
      break;
    case 128:
      *a2 = 80;
      break;
    case 129:
      *a2 = 16;
      break;
    case 130:
      *a2 = 17;
      break;
    case 131:
      *a2 = 48;
      break;
    case 132:
      *a2 = 49;
      break;
    case 133:
      *a2 = 81;
      break;
    case 134:
      *a2 = 112;
      break;
    case 135:
      *a2 = 113;
      break;
    case 136:
      *a2 = -112;
      break;
    default:
      char v2 = 24;
LABEL_8:
      *a2 = v2;
      break;
  }

  return result;
}

void NWInterface.radioType.getter(char *a1@<X8>)
{
  if (*v1)
  {
    uint64_t v3 = (void *)swift_unknownObjectRetain();
    radio_os_log_type_t type = nw_interface_get_radio_type(v3);
    sub_181C0FB08(radio_type, a1);
    swift_unknownObjectRelease();
  }

  else
  {
    *a1 = 24;
  }

uint64_t NWInterface.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_18264F648();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_18264F654();
    char v2 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v2);
    sub_18264EB80();
    swift_unknownObjectRelease();
  }

  else
  {
    sub_18264F654();
  }

  sub_18264EB44();
  swift_bridgeObjectRelease();
  return sub_18264F684();
}

uint64_t sub_181C0FCF8()
{
  if (*v0)
  {
    nw_interface_get_index(*v0);
    sub_18264F654();
    uint64_t v1 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v1);
    sub_18264EB80();
    swift_unknownObjectRelease();
  }

  else
  {
    sub_18264F654();
  }

  sub_18264EB44();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C0FD98()
{
  uint64_t v1 = *v0;
  sub_18264F648();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_18264F654();
    char v2 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v2);
    sub_18264EB80();
    swift_unknownObjectRelease();
  }

  else
  {
    sub_18264F654();
  }

  sub_18264EB44();
  swift_bridgeObjectRelease();
  return sub_18264F684();
}

uint64_t sub_181C0FE48()
{
  if (!*v0) {
    return 0x64696C61766E69LL;
  }
  uint64_t v1 = (nw_interface *)swift_unknownObjectRetain();
  nw_interface_get_name(v1);
  uint64_t v2 = sub_18264EB80();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t NWPath.debugDescription.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for NWPath(0LL) + 52));
  if (!v1) {
    return 1701736302LL;
  }
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = sub_18264EA48();

  return v3;
}

uint64_t NWPath.nw.getter()
{
  return swift_unknownObjectRetain();
}

void NWPath.status.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

nw_path *NWPath.unsatisfiedReason.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = *(nw_path **)(v1 + *(int *)(type metadata accessor for NWPath(0LL) + 52));
  if (result)
  {
    uint64_t result = (nw_path *)nw_path_get_unsatisfied_reason(result);
    else {
      char v4 = (char)result;
    }
  }

  else
  {
    char v4 = 0;
  }

  *a1 = v4;
  return result;
}

uint64_t NWPath.availableInterfaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NWPath.isExpensive.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NWPath.isConstrained.getter()
{
  return sub_181C1013C((uint64_t (*)(void))nw_path_is_constrained);
}

uint64_t NWPath.supportsIPv4.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t NWPath.supportsIPv6.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t NWPath.supportsDNS.getter()
{
  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t NWPath.gateways.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NWPath.localEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWPath(0LL);
  return sub_181BE48BC(v1 + *(int *)(v3 + 44), a1, &qword_18C45E580);
}

uint64_t NWPath.remoteEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWPath(0LL);
  return sub_181BE48BC(v1 + *(int *)(v3 + 48), a1, &qword_18C45E580);
}

Swift::Bool __swiftcall NWPath.usesInterfaceType(_:)(Network::NWInterface::InterfaceType a1)
{
  id v2 = (unsigned __int8 *)a1;
  uint64_t v3 = *(nw_path **)(v1 + *(int *)(type metadata accessor for NWPath(0LL) + 52));
  if (v3) {
    LOBYTE(v3) = nw_path_uses_interface_type(v3, (nw_interface_type_t)*v2);
  }
  return (char)v3;
}

Swift::Bool __swiftcall NWPath.usesInterfaceSubtype(_:)(Network::NWInterface::InterfaceSubtype a1)
{
  id v2 = (char *)a1;
  uint64_t v3 = *(void **)(v1 + *(int *)(type metadata accessor for NWPath(0LL) + 52));
  if (v3) {
    LOBYTE(v3) = nw_path_uses_interface_subtype(v3, dword_18265FBFC[*v2]);
  }
  return (char)v3;
}

uint64_t NWPath.estimatedUploadThroughput.getter()
{
  return sub_181C100EC((uint64_t (*)(void))nw_path_get_estimated_upload_throughput);
}

uint64_t NWPath.estimatedDownloadThroughput.getter()
{
  return sub_181C100EC((uint64_t (*)(void))nw_path_get_estimated_download_throughput);
}

uint64_t sub_181C100EC(uint64_t (*a1)(void))
{
  uint64_t result = *(void *)(v1 + *(int *)(type metadata accessor for NWPath(0LL) + 52));
  if (result) {
    return a1();
  }
  return result;
}

uint64_t NWPath.isDirect.getter()
{
  return sub_181C1013C((uint64_t (*)(void))nw_path_is_direct);
}

uint64_t sub_181C1013C(uint64_t (*a1)(void))
{
  uint64_t result = *(void *)(v1 + *(int *)(type metadata accessor for NWPath(0LL) + 52));
  if (result) {
    return a1();
  }
  return result;
}

uint64_t sub_181C10170@<X0>(nw_path *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v35 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v35 - v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = (int *)type metadata accessor for NWPath(0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = MEMORY[0x18961AFE8];
  uint64_t v44 = MEMORY[0x18961AFE8];
  uint64_t v15 = type metadata accessor for NWEndpoint();
  id v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL);
  v16(v11, 1LL, 1LL, v15);
  v16(v9, 1LL, 1LL, v15);
  uint64_t v36 = a2;
  if (!a1)
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    *uint64_t v14 = 1;
    *((_DWORD *)v14 + 4) = 0;
LABEL_17:
    *((void *)v14 + 1) = v44;
    *((void *)v14 + 3) = v43;
    *(void *)&v14[v12[13]] = a1;
    sub_181BE625C((uint64_t)v11, (uint64_t)&v14[v12[11]], &qword_18C45E580);
    sub_181BE625C((uint64_t)v9, (uint64_t)&v14[v12[12]], &qword_18C45E580);
    sub_181BC928C((uint64_t)v14, v36, type metadata accessor for NWPath);
    sub_181BD25B8((uint64_t)v20);
    return sub_181BD25B8((uint64_t)v21);
  }

  uint64_t v17 = (nw_path *)swift_unknownObjectRetain();
  nw_path_status_t status = nw_path_get_status(v17);
  if (status == nw_path_status_satisfied)
  {
    *uint64_t v14 = 0;
  }

  else
  {
    if (status == nw_path_status_satisfiable) {
      char v19 = 2;
    }
    else {
      char v19 = 1;
    }
    *uint64_t v14 = v19;
  }

  _BYTE v14[16] = nw_path_is_expensive(a1);
  v14[19] = nw_path_has_dns(a1);
  v14[17] = nw_path_has_ipv4(a1);
  v14[18] = nw_path_has_ipv6(a1);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + sub_181C095BC(v0 + 16) = &v44;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + sub_181C095BC(v0 + 16) = sub_181BDA1A4;
  *(void *)(v23 + 24) = v22;
  uint64_t v41 = sub_181BC0808;
  uint64_t v42 = v23;
  uint64_t v24 = MEMORY[0x1895F87A8];
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_181C6AF34;
  uint64_t v40 = &block_descriptor_6;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_path_enumerate_interfaces(a1, v25);
  _Block_release(v25);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + sub_181C095BC(v0 + 16) = &v43;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + sub_181C095BC(v0 + 16) = sub_181C1843C;
    *(void *)(v29 + 24) = v28;
    uint64_t v41 = sub_181BC0808;
    uint64_t v42 = v29;
    uint64_t aBlock = v24;
    uint64_t v38 = 1107296256LL;
    uint64_t v39 = sub_181C6AF34;
    uint64_t v40 = &block_descriptor_41;
    uint64_t v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    nw_path_enumerate_gateways(a1, v30);
    _Block_release(v30);
    char v31 = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = nw_path_copy_effective_local_endpoint(a1);
      uint64_t v33 = v35;
      if (v32)
      {
        sub_181BDA308(v32, v35);
        sub_181BDA0F0((uint64_t)v11, &qword_18C45E580);
        sub_181BE625C(v33, (uint64_t)v11, &qword_18C45E580);
      }

      if (nw_path_copy_effective_remote_endpoint(a1))
      {
        uint64_t v34 = (nw_endpoint *)swift_unknownObjectRetain();
        sub_181BDA308(v34, v33);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        sub_181BDA0F0((uint64_t)v9, &qword_18C45E580);
        sub_181BE625C(v33, (uint64_t)v9, &qword_18C45E580);
      }

      else
      {
        swift_unknownObjectRelease();
      }

      uint64_t v21 = sub_181C1843C;
      uint64_t v20 = sub_181BDA1A4;
      goto LABEL_17;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_181C10614(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v13, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_181BDA0F0((uint64_t)v5, &qword_18C45E580);
  }

  else
  {
    sub_181BC928C((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    sub_181BC9248((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    unint64_t v14 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_181BC4EB8(0, *(void *)(v14 + 16) + 1LL, 1, v14);
      *a2 = v14;
    }

    unint64_t v17 = *(void *)(v14 + 16);
    unint64_t v16 = *(void *)(v14 + 24);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_181BC4EB8(v16 > 1, v17 + 1, 1, v14);
      *a2 = v14;
    }

    *(void *)(v14 + sub_181C095BC(v0 + 16) = v17 + 1;
    sub_181BC928C( (uint64_t)v10,  v14 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
    + *(void *)(v7 + 72) * v17,
      (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    sub_181BC920C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }

  return 1LL;
}

BOOL static NWPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWPath(0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(int *)(v5 + 52);
  uint64_t v9 = *(nw_path **)(a1 + v8);
  if (!v9)
  {
    sub_181BC9248(a2, (uint64_t)v7, type metadata accessor for NWPath);
    BOOL v11 = *(void *)&v7[*(int *)(v4 + 52)] == 0LL;
LABEL_6:
    sub_181BC920C((uint64_t)v7, type metadata accessor for NWPath);
    return v11;
  }

  uint64_t v10 = *(nw_path **)(a2 + v8);
  if (!v10)
  {
    sub_181BC9248(a2, (uint64_t)v7, type metadata accessor for NWPath);
    BOOL v11 = 0LL;
    goto LABEL_6;
  }

  return nw_path_is_equal(v9, v10);
}

BOOL sub_181C108C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(int *)(v8 + 52);
  uint64_t v10 = *(nw_path **)(v4 + v9);
  if (!v10)
  {
    sub_181BC9248(v5, (uint64_t)v7, type metadata accessor for NWPath);
    BOOL v12 = *(void *)&v7[*(int *)(a3 + 52)] == 0LL;
LABEL_6:
    sub_181BC920C((uint64_t)v7, type metadata accessor for NWPath);
    return v12;
  }

  BOOL v11 = *(nw_path **)(v5 + v9);
  if (!v11)
  {
    sub_181BC9248(v5, (uint64_t)v7, type metadata accessor for NWPath);
    BOOL v12 = 0LL;
    goto LABEL_6;
  }

  return nw_path_is_equal(v10, v11);
}

uint64_t sub_181C1098C(uint64_t a1)
{
  id v2 = *(void **)(v1 + *(int *)(a1 + 52));
  if (!v2) {
    return 1701736302LL;
  }
  id v3 = objc_msgSend(v2, sel_description);
  uint64_t v4 = sub_18264EA48();

  return v4;
}

void NWPathMonitor.currentPath.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x189619408] + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_181C10CDC(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_181C10A74(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x189619408] + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_181C10CDC(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_181C10AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWPath(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_181BC9248(a1, (uint64_t)v6, type metadata accessor for NWPath);
  uint64_t v7 = *(void *)(*(void *)a2 + 16LL);
  BOOL v12 = v6;
  uint64_t v8 = v7 + *(void *)(*MEMORY[0x189619408] + *(void *)v7 + 16LL);
  uint64_t v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_181C183C4(v8);
  os_unfair_lock_unlock(v9);
  return sub_181BC920C((uint64_t)v6, type metadata accessor for NWPath);
}

uint64_t NWPathMonitor.currentPath.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x189619408] + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_181C10C68(v4, a1);
  os_unfair_lock_unlock(v5);
  return sub_181BC920C(a1, type metadata accessor for NWPath);
}

uint64_t sub_181C10C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWPath(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, 0LL, 1LL, v4);
}

uint64_t sub_181C10CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BE48BC(a1, (uint64_t)v6, (uint64_t *)&unk_18C45E6E8);
  uint64_t v7 = type metadata accessor for NWPath(0LL);
  sub_181C10170(0LL, a2);
  return sub_181BDA0F0((uint64_t)v6, (uint64_t *)&unk_18C45E6E8);
}

void (*NWPathMonitor.currentPath.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  size_t v4 = *(void *)(*(void *)(type metadata accessor for NWPath(0LL) - 8) + 64LL);
  void *v3 = malloc(v4);
  uint64_t v5 = malloc(v4);
  uint64_t v6 = *(uint64_t **)(v1 + 16);
  v3[1] = v5;
  void v3[2] = v6;
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*MEMORY[0x189619408] + *v6 + 16);
  v3[3] = v8;
  uint64_t v9 = (uint64_t)v6 + v8;
  uint64_t v10 = *(unsigned int *)(v7 + 48);
  *((_DWORD *)v3 + 10) = v10;
  BOOL v11 = (os_unfair_lock_s *)((char *)v6 + ((v10 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_181C10CDC(v9, (uint64_t)v5);
  v3[4] = 0LL;
  os_unfair_lock_unlock(v11);
  return sub_181C10E9C;
}

void sub_181C10E9C(void ***a1, char a2)
{
  id v2 = *a1;
  size_t v4 = (*a1)[1];
  uint64_t v3 = (char *)(*a1)[2];
  uint64_t v5 = **a1;
  uint64_t v6 = (*((unsigned int *)*a1 + 10) + 3LL) & 0x1FFFFFFFCLL;
  uint64_t v7 = (os_unfair_lock_s *)&v3[v6];
  uint64_t v8 = (uint64_t)(*a1)[3] + (void)v3;
  if ((a2 & 1) != 0)
  {
    sub_181BC9248((uint64_t)(*a1)[1], (uint64_t)v5, type metadata accessor for NWPath);
    os_unfair_lock_lock(v7);
    sub_181C10C68(v8, (uint64_t)v5);
    os_unfair_lock_unlock(v7);
    sub_181BC920C((uint64_t)v5, type metadata accessor for NWPath);
  }

  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[v6]);
    sub_181C10C68(v8, (uint64_t)v4);
    os_unfair_lock_unlock(v7);
  }

  sub_181BC920C((uint64_t)v4, type metadata accessor for NWPath);
  free(v4);
  free(v5);
  free(v2);
}

uint64_t (*NWPathMonitor.pathUpdateHandler.getter())()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = v1 + *(void *)(*MEMORY[0x189619408] + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_181C112D4(v2, (uint64_t (**)(uint64_t))&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + sub_181C095BC(v0 + 16) = v5;
  return sub_181BD639C;
}

double sub_181C11050@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x189619408] + *(void *)v3 + 16LL);
  __int128 v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_181C112D4(v4, (uint64_t (**)(uint64_t))&v7);
  os_unfair_lock_unlock(v5);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_181C110DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    a1 = (uint64_t *)swift_allocObject();
    a1[2] = v1;
    a1[3] = v2;
    uint64_t v3 = sub_181BDA300;
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  MEMORY[0x1895F8858](a1);
  uint64_t v5 = v4 + *(void *)(*MEMORY[0x189619408] + *(void *)v4 + 16LL);
  __int128 v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  sub_181BC904C(v1);
  os_unfair_lock_lock(v6);
  sub_181C183AC(v5);
  os_unfair_lock_unlock(v6);
  return sub_181BD25B8((uint64_t)v3);
}

uint64_t NWPathMonitor.pathUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = v5 + *(void *)(*MEMORY[0x189619408] + *(void *)v5 + 16LL);
  __int128 v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_181C11268(v6, a1, a2);
  os_unfair_lock_unlock(v7);
  return sub_181BD25B8(a1);
}

uint64_t sub_181C11268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NWPathMonitor.LockedState(0LL) + 20));
  uint64_t v6 = *v5;
  sub_181BC904C(a2);
  uint64_t result = sub_181BD25B8(v6);
  uint64_t *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_181C112D4@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NWPathMonitor.LockedState(0LL) + 20));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + sub_181C095BC(v0 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    __int128 v7 = sub_181C1882C;
  }

  else
  {
    __int128 v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  *a2 = v7;
  a2[1] = (uint64_t (*)(uint64_t))v6;
  return sub_181BC904C(v4);
}

void (*NWPathMonitor.pathUpdateHandler.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(uint64_t **)(v1 + 16);
  void v3[2] = v4;
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*MEMORY[0x189619408] + *v4 + 16);
  v3[3] = v6;
  uint64_t v7 = (uint64_t)v4 + v6;
  uint64_t v8 = *(unsigned int *)(v5 + 48);
  *((_DWORD *)v3 + 10) = v8;
  uint64_t v9 = (os_unfair_lock_s *)((char *)v4 + ((v8 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_181C112D4(v7, v14);
  v3[4] = 0LL;
  os_unfair_lock_unlock(v9);
  uint64_t v10 = (uint64_t (*)())v14[0];
  if (v14[0])
  {
    __int128 v13 = *(_OWORD *)v14;
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + sub_181C095BC(v0 + 16) = v13;
    uint64_t v10 = sub_181BDA300;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  void *v3 = v10;
  v3[1] = v11;
  return sub_181C11444;
}

void sub_181C11444(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*((unsigned int *)*a1 + 10) + 3LL) & 0x1FFFFFFFCLL;
  uint64_t v7 = (os_unfair_lock_s *)(v5 + v6);
  uint64_t v8 = v5 + (*a1)[3];
  if ((a2 & 1) != 0)
  {
    sub_181BC904C(**a1);
    os_unfair_lock_lock(v7);
    sub_181C11268(v8, v3, v4);
    os_unfair_lock_unlock(v7);
    sub_181BD25B8(v3);
    sub_181BD25B8(*v2);
  }

  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + v6));
    sub_181C11268(v8, v3, v4);
    os_unfair_lock_unlock(v7);
    sub_181BD25B8(v3);
  }

  free(v2);
}

uint64_t sub_181C11524(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E588);
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v69 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v68 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E5A8);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  BOOL v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v74 = (char *)&v57 - v13;
  uint64_t v66 = sub_18264E964();
  uint64_t v65 = *(char **)(v66 - 8);
  MEMORY[0x1895F8858](v66);
  uint64_t v64 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_18264E97C();
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  MEMORY[0x1895F8858](v15);
  uint64_t v67 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NWPath(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x1895F8858](v17);
  uint64_t v72 = (uint64_t)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BDA0F0(a1, (uint64_t *)&unk_18C45E6E8);
  uint64_t v73 = a2;
  sub_181BC9248(a2, a1, type metadata accessor for NWPath);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a1, 0LL, 1LL, v17);
  uint64_t locked = type metadata accessor for NWPathMonitor.LockedState(0LL);
  uint64_t v21 = locked;
  uint64_t v22 = a1;
  uint64_t v23 = (uint64_t *)(a1 + *(int *)(locked + 20));
  uint64_t v24 = *v23;
  if (*v23)
  {
    uint64_t v25 = *(void **)(a1 + *(int *)(locked + 28));
    if (v25)
    {
      uint64_t v26 = v23[1];
      uint64_t v61 = v22;
      uint64_t v27 = v72;
      id v58 = v25;
      sub_181BC9248(v73, v72, type metadata accessor for NWPath);
      unint64_t v28 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + sub_181C095BC(v0 + 16) = v24;
      *(void *)(v29 + 24) = v26;
      sub_181BC928C(v27, v29 + v28, type metadata accessor for NWPath);
      void aBlock[4] = sub_181C18494;
      aBlock[5] = v29;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 1107296256LL;
      _OWORD aBlock[2] = sub_181C32D2C;
      aBlock[3] = &block_descriptor_63;
      uint64_t v59 = _Block_copy(aBlock);
      uint64_t v60 = v26;
      sub_181BC904C(v24);
      sub_181BC904C(v24);
      id v58 = v58;
      uint64_t v30 = v67;
      sub_18264E970();
      aBlock[8] = MEMORY[0x18961AFE8];
      uint64_t v57 = sub_181BD67D4( (unint64_t *)&qword_18C45E550,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
      sub_181C18498();
      char v31 = v64;
      uint64_t v32 = v66;
      sub_18264F108();
      uint64_t v33 = v30;
      uint64_t v34 = v59;
      id v35 = v58;
      MEMORY[0x186E0EBEC](0LL, v33, v31, v59);
      _Block_release(v34);

      sub_181BD25B8(v24);
      (*((void (**)(char *, uint64_t))v65 + 1))(v31, v32);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v63);
      swift_release();
      uint64_t v22 = v61;
    }
  }

  uint64_t v36 = *(void *)(v22 + *(int *)(v21 + 32));
  uint64_t v37 = *(void *)(v36 + 64);
  uint64_t v66 = v36 + 64;
  uint64_t v38 = 1LL << *(_BYTE *)(v36 + 32);
  uint64_t v39 = -1LL;
  if (v38 < 64) {
    uint64_t v39 = ~(-1LL << v38);
  }
  unint64_t v40 = v39 & v37;
  uint64_t v67 = (char *)((unint64_t)(v38 + 63) >> 6);
  uint64_t v65 = v67 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v42 = 0LL;
  if (!v40) {
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v46 = __clz(__rbit64(v40));
  v40 &= v40 - 1;
  unint64_t v47 = v46 | (v42 << 6);
  uint64_t v48 = (uint64_t)v74;
  while (2)
  {
    uint64_t v49 = *(void *)(v36 + 56);
    *(void *)BOOL v12 = *(void *)(*(void *)(v36 + 48) + 8 * v47);
    uint64_t v50 = v49 + *(void *)(v7 + 72) * v47;
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E5A0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(&v12[*(int *)(v51 + 48)], v50, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v12, 0LL, 1LL, v51);
    while (1)
    {
      sub_181BE625C((uint64_t)v12, v48, &qword_18C45E5A8);
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E5A0);
      uint64_t v43 = v48 + *(int *)(v56 + 48);
      uint64_t v44 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v68, v43, v6);
      sub_181BC9248(v73, v72, type metadata accessor for NWPath);
      uint64_t v45 = v69;
      sub_18264EDFC();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v45, v71);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v44, v6);
      if (v40) {
        goto LABEL_9;
      }
LABEL_11:
      uint64_t v52 = v42 + 1;
      uint64_t v48 = (uint64_t)v74;
      if (__OFADD__(v42, 1LL))
      {
        __break(1u);
        goto LABEL_32;
      }

      if (v52 < (uint64_t)v67)
      {
        unint64_t v53 = *(void *)(v66 + 8 * v52);
        if (v53) {
          goto LABEL_14;
        }
        uint64_t v54 = v42 + 2;
        ++v42;
        if (v52 + 1 < (uint64_t)v67)
        {
          unint64_t v53 = *(void *)(v66 + 8 * v54);
          if (v53) {
            goto LABEL_17;
          }
          uint64_t v42 = v52 + 1;
          if (v52 + 2 < (uint64_t)v67)
          {
            unint64_t v53 = *(void *)(v66 + 8 * (v52 + 2));
            if (v53)
            {
              v52 += 2LL;
              goto LABEL_14;
            }

            uint64_t v54 = v52 + 3;
            uint64_t v42 = v52 + 2;
          }
        }
      }

int *sub_181C11BDC(uint64_t a1)
{
  uint64_t v3 = sub_18264E964();
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_18264E97C();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NWPath(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t result = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  uint64_t v20 = result[9];
  if ((*(_BYTE *)(a1 + v20) & 1) != 0)
  {
    uint64_t v21 = (uint64_t *)(a1 + result[5]);
    uint64_t v22 = *v21;
    if (*v21 && *(void *)(a1 + result[7]))
    {
      uint64_t v23 = v21[1];
      id v40 = *(id *)(a1 + result[7]);
      uint64_t v41 = v23;
      sub_181BE48BC(a1, (uint64_t)v11, (uint64_t *)&unk_18C45E6E8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
      {
        return (int *)sub_181BDA0F0((uint64_t)v11, (uint64_t *)&unk_18C45E6E8);
      }

      else
      {
        sub_181BC928C((uint64_t)v11, (uint64_t)v18, type metadata accessor for NWPath);
        sub_181BC9248((uint64_t)v18, (uint64_t)v16, type metadata accessor for NWPath);
        unint64_t v32 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        uint64_t v33 = v22;
        uint64_t v34 = swift_allocObject();
        uint64_t v35 = v41;
        *(void *)(v34 + sub_181C095BC(v0 + 16) = v33;
        *(void *)(v34 + 24) = v35;
        sub_181BC928C((uint64_t)v16, v34 + v32, type metadata accessor for NWPath);
        uint64_t v51 = sub_181C18494;
        uint64_t v52 = v34;
        uint64_t aBlock = MEMORY[0x1895F87A8];
        uint64_t v48 = 1107296256LL;
        uint64_t v49 = sub_181C32D2C;
        uint64_t v50 = &block_descriptor_57;
        uint64_t v36 = _Block_copy(&aBlock);
        sub_181BC904C(v33);
        sub_181BC904C(v33);
        id v37 = v40;
        sub_18264E970();
        uint64_t v46 = MEMORY[0x18961AFE8];
        sub_181BD67D4( (unint64_t *)&qword_18C45E550,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
        sub_181C18498();
        uint64_t v38 = v45;
        sub_18264F108();
        MEMORY[0x186E0EBEC](0LL, v8, v5, v36);

        _Block_release(v36);
        sub_181BD25B8(v33);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v5, v38);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v43);
        sub_181BC920C((uint64_t)v18, type metadata accessor for NWPath);
        return (int *)swift_release();
      }
    }
  }

  else
  {
    *(_BYTE *)(a1 + v20) = 1;
    uint64_t v24 = *(nw_path_monitor **)(v1 + 24);
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    uint64_t v51 = sub_181C18480;
    uint64_t v52 = v25;
    uint64_t v26 = MEMORY[0x1895F87A8];
    uint64_t aBlock = MEMORY[0x1895F87A8];
    uint64_t v48 = 1107296256LL;
    uint64_t v49 = sub_181BFB944;
    uint64_t v50 = &block_descriptor_47;
    uint64_t v27 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_release();
    nw_path_monitor_set_update_handler(v24, v27);
    _Block_release(v27);
    swift_unknownObjectRelease();
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v51 = sub_181C18488;
    uint64_t v52 = v28;
    uint64_t aBlock = v26;
    uint64_t v48 = 1107296256LL;
    uint64_t v49 = sub_181C32D2C;
    uint64_t v50 = &block_descriptor_51;
    uint64_t v29 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_release();
    nw_path_monitor_set_cancel_handler(v24, v29);
    _Block_release(v29);
    swift_unknownObjectRelease();
    uint64_t v30 = (void *)nw_path_monitor_copy_parameters(v24);
    swift_unknownObjectRetain();
    uint64_t result = (int *)nw_parameters_copy_context(v30);
    if (result)
    {
      BOOL v31 = nw_context_copy_workloop(result);
      swift_unknownObjectRelease();
      nw_path_monitor_set_queue(v24, (dispatch_queue_t)v31);
      swift_unknownObjectRelease();

      nw_path_monitor_start(v24);
      return (int *)swift_unknownObjectRelease();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_181C120D8()
{
  uint64_t v0 = type metadata accessor for NWPath(0LL);
  MEMORY[0x1895F8858](v0);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = (nw_path *)swift_unknownObjectRetain();
    sub_181C10170(v5, (uint64_t)v2);
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t v7 = v6 + *(void *)(*MEMORY[0x189619408] + *(void *)v6 + 16LL);
    uint64_t v8 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(void *)v6 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v8);
    sub_181C11524(v7, (uint64_t)v2);
    os_unfair_lock_unlock(v8);
    swift_release();
    return sub_181BC920C((uint64_t)v2, type metadata accessor for NWPath);
  }

  return result;
}

uint64_t sub_181C121EC()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    swift_retain();
    swift_release();
    uint64_t v2 = v1 + *(void *)(*MEMORY[0x189619408] + *(void *)v1 + 16LL);
    uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v3);
    sub_181C1229C(v2);
    os_unfair_lock_unlock(v3);
    return swift_release();
  }

  return result;
}

uint64_t sub_181C1229C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E5A8);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  *(_BYTE *)(a1 + locked[10]) = 1;
  uint64_t v13 = locked[11];
  swift_release();
  *(void *)(a1 + v13) = 0LL;
  if (nw_utilities_minos_atleast())
  {
    uint64_t v14 = (uint64_t *)(a1 + locked[5]);
    sub_181BD25B8(*v14);
    *uint64_t v14 = 0LL;
    v14[1] = 0LL;
  }

  uint64_t v15 = *(void *)(a1 + locked[8]);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v33 = v15 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v34 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v35 = v15;
  int64_t v32 = v34 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0LL;
  if (!v19) {
    goto LABEL_10;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v23 = v22 | (v21 << 6);
  while (2)
  {
    uint64_t v24 = *(void *)(v35 + 56);
    *(void *)uint64_t v9 = *(void *)(*(void *)(v35 + 48) + 8 * v23);
    uint64_t v25 = v24 + *(void *)(v3 + 72) * v23;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E5A0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(&v9[*(int *)(v26 + 48)], v25, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v9, 0LL, 1LL, v26);
    while (1)
    {
      sub_181BE625C((uint64_t)v9, (uint64_t)v11, &qword_18C45E5A8);
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E5A0);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, &v11[*(int *)(v31 + 48)], v2);
      sub_18264EE08();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if (v19) {
        goto LABEL_8;
      }
LABEL_10:
      int64_t v27 = v21 + 1;
      if (__OFADD__(v21, 1LL))
      {
        __break(1u);
        goto LABEL_31;
      }

      if (v27 < v34)
      {
        unint64_t v28 = *(void *)(v33 + 8 * v27);
        if (v28) {
          goto LABEL_13;
        }
        int64_t v29 = v21 + 2;
        ++v21;
        if (v27 + 1 < v34)
        {
          unint64_t v28 = *(void *)(v33 + 8 * v29);
          if (v28) {
            goto LABEL_16;
          }
          int64_t v21 = v27 + 1;
          if (v27 + 2 < v34)
          {
            unint64_t v28 = *(void *)(v33 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2LL;
              goto LABEL_13;
            }

            int64_t v29 = v27 + 3;
            int64_t v21 = v27 + 2;
            if (v27 + 3 < v34) {
              break;
            }
          }
        }
      }

void NWPathMonitor.start(queue:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x189619408] + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_181C12688(v4, v1, a1);
  os_unfair_lock_unlock(v5);
}

int *sub_181C12688(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  uint64_t v7 = result[7];
  if (!*(void *)(a1 + v7))
  {
    uint64_t v8 = result[11];
    swift_retain();
    swift_release();
    *(void *)(a1 + v8) = a2;
    *(void *)(a1 + v7) = a3;
    id v9 = a3;
    return sub_181C11BDC(a1);
  }

  return result;
}

Swift::Void __swiftcall NWPathMonitor.cancel()()
{
}

void *NWPathMonitor.queue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = v1 + *(void *)(*MEMORY[0x189619408] + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void **)(v2 + *(int *)(type metadata accessor for NWPathMonitor.LockedState(0LL) + 28));
  id v5 = v4;
  os_unfair_lock_unlock(v3);
  return v4;
}

uint64_t NWPathMonitor.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  NWPathMonitor.init(_:)(a1);
  return v2;
}

uint64_t NWPathMonitor.init(_:)(uint64_t a1)
{
  uint64_t locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  MEMORY[0x1895F8858](locked);
  id v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NWPath(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = &v5[locked[5]];
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  *(void *)&v5[locked[6]] = 1LL;
  *(void *)&v5[locked[7]] = 0LL;
  *(void *)&v5[locked[8]] = MEMORY[0x18961AFF0];
  v5[locked[9]] = 0;
  v5[locked[10]] = 0;
  *(void *)&v5[locked[11]] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E768);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(void *)v8 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  sub_181BC9248( (uint64_t)v5,  v8 + *(void *)(*MEMORY[0x189619408] + *(void *)v8 + 16LL),  type metadata accessor for NWPathMonitor.LockedState);
  sub_181BC920C((uint64_t)v5, type metadata accessor for NWPathMonitor.LockedState);
  *(void *)(v1 + sub_181C095BC(v0 + 16) = v8;
  *(void *)(v1 + 24) = a1;
  return v1;
}

uint64_t NWPathMonitor.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  NWPathMonitor.init()();
  return v0;
}

uint64_t NWPathMonitor.init()()
{
  uint64_t locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  MEMORY[0x1895F8858](locked);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NWPath(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  id v5 = &v3[locked[5]];
  *(void *)id v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  *(void *)&v3[locked[6]] = 1LL;
  *(void *)&v3[locked[7]] = 0LL;
  *(void *)&v3[locked[8]] = MEMORY[0x18961AFF0];
  v3[locked[9]] = 0;
  v3[locked[10]] = 0;
  *(void *)&v3[locked[11]] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E768);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + ((*(unsigned int *)(*(void *)v6 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  sub_181BC9248( (uint64_t)v3,  v6 + *(void *)(*MEMORY[0x189619408] + *(void *)v6 + 16LL),  type metadata accessor for NWPathMonitor.LockedState);
  sub_181BC920C((uint64_t)v3, type metadata accessor for NWPathMonitor.LockedState);
  *(void *)(v0 + sub_181C095BC(v0 + 16) = v6;
  *(void *)(v0 + 24) = nw_path_monitor_create();
  return v0;
}

uint64_t NWPathMonitor.deinit()
{
  return v0;
}

uint64_t NWPathMonitor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static NWPathMonitor.ethernetChannel.getter()
{
  nw_path_monitor_t v0 = nw_path_monitor_create_for_ethernet_channel();
  uint64_t v1 = swift_allocObject();
  NWPathMonitor.init(_:)((uint64_t)v0);
  return v1;
}

uint64_t NWPathMonitor.__allocating_init(requiredInterfaceType:)(unsigned __int8 *a1)
{
  uint64_t v2 = swift_allocObject();
  NWPathMonitor.init(requiredInterfaceType:)(a1);
  return v2;
}

uint64_t NWPathMonitor.init(requiredInterfaceType:)(unsigned __int8 *a1)
{
  uint64_t locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  MEMORY[0x1895F8858](locked);
  id v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(a1) = *a1;
  uint64_t v6 = type metadata accessor for NWPath(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = &v5[locked[5]];
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  *(void *)&v5[locked[6]] = 1LL;
  *(void *)&v5[locked[7]] = 0LL;
  *(void *)&v5[locked[8]] = MEMORY[0x18961AFF0];
  v5[locked[9]] = 0;
  v5[locked[10]] = 0;
  *(void *)&v5[locked[11]] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E768);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(void *)v8 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  sub_181BC9248( (uint64_t)v5,  v8 + *(void *)(*MEMORY[0x189619408] + *(void *)v8 + 16LL),  type metadata accessor for NWPathMonitor.LockedState);
  sub_181BC920C((uint64_t)v5, type metadata accessor for NWPathMonitor.LockedState);
  *(void *)(v1 + sub_181C095BC(v0 + 16) = v8;
  *(void *)(v1 + 24) = nw_path_monitor_create_with_type((nw_interface_type_t)a1);
  return v1;
}

uint64_t NWPathMonitor.__allocating_init(prohibitedInterfaceTypes:)(uint64_t a1)
{
  uint64_t v2 = sub_181C13B24(a1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t NWPathMonitor.init(prohibitedInterfaceTypes:)(uint64_t a1)
{
  uint64_t v1 = sub_181C13B24(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t NWPathMonitor.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 24), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

int *sub_181C12DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58CD30);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  *uint64_t v6 = 1LL;
  (*(void (**)(void *, void))(v7 + 104))(v6, *MEMORY[0x18961BD48]);
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  type metadata accessor for NWPath(0LL);
  sub_18264EE50();
  uint64_t result = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  if ((*(_BYTE *)(a1 + result[9]) & 1) == 0) {
    return sub_181C11BDC(a1);
  }
  return result;
}

int *sub_181C12EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E934();
  uint64_t v63 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E588);
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v57 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
  MEMORY[0x1895F8858](v11);
  uint64_t v62 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NWPath(0LL);
  uint64_t v60 = *(uint8_t **)(v13 - 8);
  uint64_t v61 = v13;
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v56 = (uint64_t)&v52 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58CD40);
  MEMORY[0x1895F8858](v17);
  unint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x1895F8858](v20);
  unint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  if ((*(_BYTE *)(a2 + result[10]) & 1) == 0)
  {
    uint64_t v35 = result[6];
    uint64_t v36 = *(void *)(a2 + v35);
    if (!__OFADD__(v36, 1LL))
    {
      *(void *)(a2 + v35) = v36 + 1;
      id v37 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
      uint64_t v53 = v36;
      uint64_t v54 = v37;
      uint64_t v63 = a2;
      v37((char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v20);
      uint64_t v38 = v20;
      uint64_t v39 = a1;
      unint64_t v40 = (*(unsigned __int8 *)(v21 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      uint64_t v41 = a3;
      unint64_t v42 = (v22 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + sub_181C095BC(v0 + 16) = v41;
      unint64_t v44 = v43 + v40;
      uint64_t v45 = v39;
      uint64_t v46 = v38;
      (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v44, v23, v38);
      uint64_t v47 = v53;
      *(void *)(v43 + v42) = v53;
      swift_retain();
      sub_18264EDE4();
      v54(v19, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0LL, 1LL, v46);
      uint64_t v48 = v63;
      sub_181C353B8((uint64_t)v19, v47);
      uint64_t v49 = v62;
      sub_181BE48BC(v48, v62, (uint64_t *)&unk_18C45E6E8);
      uint64_t v50 = v56;
      sub_181BC928C(v49, v56, type metadata accessor for NWPath);
      sub_181BC9248(v50, v55, type metadata accessor for NWPath);
      uint64_t v51 = v57;
      sub_18264EDFC();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v51, v59);
      return (int *)sub_181BC920C(v50, type metadata accessor for NWPath);
    }

    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t result = (int *)(id)__nwlog_path_log();
  if (!result) {
    goto LABEL_13;
  }
  sub_18264E940();
  swift_retain_n();
  uint64_t v25 = (os_log_s *)sub_18264E91C();
  os_log_type_t v26 = sub_18264F000();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v62 = v20;
    int64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)int64_t v27 = 136315138;
    uint64_t v65 = v28;
    uint64_t v60 = v27 + 4;
    id v29 = objc_msgSend(*(id *)(a3 + 24), sel_description);
    uint64_t v59 = a3;
    id v30 = v29;
    uint64_t v31 = sub_18264EA48();
    uint64_t v61 = v6;
    uint64_t v32 = v31;
    unint64_t v34 = v33;

    uint64_t v64 = sub_181BF7900(v32, v34, &v65);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v25, v26, "%s Attempted to fetch paths for cancelled monitor", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v28, -1LL, -1LL);
    MEMORY[0x186E12168](v27, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v61);
  }

  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v6);
  }

  return (int *)sub_18264EE08();
}

void sub_181C13414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = v7 + *(void *)(*MEMORY[0x189619408] + *(void *)v7 + 16LL);
  uint64_t v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_181C134A4(v8, a3, a4, a2);
  os_unfair_lock_unlock(v9);
}

void sub_181C134A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58CD40);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  sub_18264EE08();
  uint64_t locked = type metadata accessor for NWPathMonitor.LockedState(0LL);
  sub_181C0F778(a3, (uint64_t)v9);
  sub_181BDA0F0((uint64_t)v9, (uint64_t *)&unk_18C58CD40);
}

uint64_t NWPathMonitor.Iterator.next()()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + sub_181C095BC(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  *id v1 = v0;
  v1[1] = sub_181BC63C4;
  return sub_18264EE2C();
}

uint64_t sub_181C135E8()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + sub_181C095BC(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  *id v1 = v0;
  v1[1] = sub_181C13654;
  return sub_18264EE2C();
}

uint64_t sub_181C13654()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181C136A0()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + sub_181C095BC(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  *id v1 = v0;
  v1[1] = sub_181C18858;
  return sub_18264EE2C();
}

uint64_t NWPathMonitor.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB10);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v13 = v12 + *(void *)(*MEMORY[0x189619408] + *(void *)v12 + 16LL);
  uint64_t v14 = (os_unfair_lock_s *)(v12 + ((*(unsigned int *)(*(void *)v12 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v14);
  sub_181C12DE0(v13, v2);
  os_unfair_lock_unlock(v14);
  sub_18264EE20();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(a1, v7, v4);
  return swift_release();
}

uint64_t sub_181C13858@<X0>(uint64_t a1@<X8>)
{
  v14[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB10);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(*(void *)v1 + 16LL);
  uint64_t v11 = v10 + *(void *)(*MEMORY[0x189619408] + *(void *)v10 + 16LL);
  uint64_t v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v12);
  sub_181C183DC(v11);
  os_unfair_lock_unlock(v12);
  sub_18264EE20();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(void, char *, uint64_t))(v3 + 32))(v14[0], v5, v2);
  return swift_release();
}

uint64_t _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(nw_interface_t *a1, nw_interface_t *a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    uint32_t index = nw_interface_get_index(*a1);
    if (v2 && index == nw_interface_get_index(v2))
    {
      uint64_t v4 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v4);
      uint64_t v5 = sub_18264EB80();
      unint64_t v7 = v6;
      swift_unknownObjectRelease();
      uint64_t v8 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v8);
      uint64_t v9 = sub_18264EB80();
      unint64_t v11 = v10;
      swift_unknownObjectRelease();
      if (v5 != v9) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }

    return 0LL;
  }

  if (v2)
  {
    nw_interface_get_index(*a2);
    return 0LL;
  }

  unint64_t v7 = 0xE700000000000000LL;
  unint64_t v11 = 0xE700000000000000LL;
LABEL_10:
  if (v7 == v11)
  {
    swift_bridgeObjectRelease_n();
    return 1LL;
  }

uint64_t type metadata accessor for NWPath(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C45E680);
}

uint64_t sub_181C13AEC()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NWPathMonitor.LockedState(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C45E5C8);
}

uint64_t sub_181C13B24(uint64_t a1)
{
  uint64_t locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0LL);
  MEMORY[0x1895F8858](locked);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NWPath(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  unint64_t v7 = &v5[locked[5]];
  *(void *)unint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  *(void *)&v5[locked[6]] = 1LL;
  *(void *)&v5[locked[7]] = 0LL;
  *(void *)&v5[locked[8]] = MEMORY[0x18961AFF0];
  v5[locked[9]] = 0;
  v5[locked[10]] = 0;
  *(void *)&v5[locked[11]] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E768);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(void *)v8 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  sub_181BC9248( (uint64_t)v5,  v8 + *(void *)(*MEMORY[0x189619408] + *(void *)v8 + 16LL),  type metadata accessor for NWPathMonitor.LockedState);
  sub_181BC920C((uint64_t)v5, type metadata accessor for NWPathMonitor.LockedState);
  *(void *)(v1 + sub_181C095BC(v0 + 16) = v8;
  nw_path_monitor_t v9 = nw_path_monitor_create();
  *(void *)(v1 + 24) = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    unint64_t v11 = v9;
    uint64_t v12 = (unsigned __int8 *)(a1 + 32);
    do
    {
      nw_interface_type_t v13 = *v12++;
      nw_path_monitor_prohibit_interface_type(v11, v13);
      --v10;
    }

    while (v10);
  }

  return v1;
}

unint64_t sub_181C13CAC()
{
  unint64_t result = qword_18C58CB18;
  if (!qword_18C58CB18)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWInterface.InterfaceType,  &type metadata for NWInterface.InterfaceType);
    atomic_store(result, (unint64_t *)&qword_18C58CB18);
  }

  return result;
}

unint64_t sub_181C13CF4()
{
  unint64_t result = qword_18C58CB20;
  if (!qword_18C58CB20)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWInterface.InterfaceSubtype,  &type metadata for NWInterface.InterfaceSubtype);
    atomic_store(result, (unint64_t *)&qword_18C58CB20);
  }

  return result;
}

unint64_t sub_181C13D3C()
{
  unint64_t result = qword_18C58CB28;
  if (!qword_18C58CB28)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWInterface.RadioType.WiFi,  &type metadata for NWInterface.RadioType.WiFi);
    atomic_store(result, (unint64_t *)&qword_18C58CB28);
  }

  return result;
}

unint64_t sub_181C13D84()
{
  unint64_t result = qword_18C58CB30;
  if (!qword_18C58CB30)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWInterface.RadioType.Cellular.NewRadio5GVariant,  &type metadata for NWInterface.RadioType.Cellular.NewRadio5GVariant);
    atomic_store(result, (unint64_t *)&qword_18C58CB30);
  }

  return result;
}

unint64_t sub_181C13DCC()
{
  unint64_t result = qword_18C58CB38;
  if (!qword_18C58CB38)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for NWInterface, &type metadata for NWInterface);
    atomic_store(result, (unint64_t *)&qword_18C58CB38);
  }

  return result;
}

unint64_t sub_181C13E14()
{
  unint64_t result = qword_18C58CB40;
  if (!qword_18C58CB40)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for NWPath.Status, &type metadata for NWPath.Status);
    atomic_store(result, (unint64_t *)&qword_18C58CB40);
  }

  return result;
}

unint64_t sub_181C13E5C()
{
  unint64_t result = qword_18C58CB48[0];
  if (!qword_18C58CB48[0])
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWPath.UnsatisfiedReason,  &type metadata for NWPath.UnsatisfiedReason);
    atomic_store(result, qword_18C58CB48);
  }

  return result;
}

uint64_t sub_181C13EA0()
{
  return MEMORY[0x18961A528];
}

uint64_t sub_181C13EAC()
{
  return sub_181BD67D4( (unint64_t *)&unk_18C58CB60,  type metadata accessor for NWPathMonitor.Iterator,  (uint64_t)&protocol conformance descriptor for NWPathMonitor.Iterator);
}

uint64_t type metadata accessor for NWPathMonitor.Iterator(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58CC88);
}

void *initializeBufferWithCopyOfBuffer for NWInterface(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for NWInterface()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for NWInterface(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for NWInterface(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWInterface(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWInterface(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWInterface()
{
  return &type metadata for NWInterface;
}

ValueMetadata *type metadata accessor for NWInterface.InterfaceType()
{
  return &type metadata for NWInterface.InterfaceType;
}

ValueMetadata *type metadata accessor for NWInterface.InterfaceSubtype()
{
  return &type metadata for NWInterface.InterfaceSubtype;
}

uint64_t getEnumTagSinglePayload for NWInterface.RadioType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 3) {
    goto LABEL_17;
  }
  if (a2 + 253 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 253) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 253;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 253;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 253;
    }
  }

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 253 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 253) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 2) {
    return ((uint64_t (*)(void))((char *)&loc_181C14174 + 4 * byte_18265F50D[v4]))();
  }
  *a1 = a2 - 3;
  return ((uint64_t (*)(void))((char *)sub_181C141A8 + 4 * byte_18265F508[v4]))();
}

uint64_t sub_181C141A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C141B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C141B8LL);
  }
  return result;
}

uint64_t sub_181C141C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C141D0LL);
  }
  *(_BYTE *)unint64_t result = (16 * (a2 & 1)) | 8;
  return result;
}

uint64_t sub_181C141D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C141DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C141E8(unsigned __int8 *a1)
{
  return (*a1 >> 4) & 1;
}

_BYTE *sub_181C141F4(_BYTE *result)
{
  *result &= ~0x10u;
  return result;
}

_BYTE *sub_181C14204(_BYTE *result, char a2)
{
  *unint64_t result = *result & 0xE7 | (16 * (a2 & 1));
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType()
{
  return &type metadata for NWInterface.RadioType;
}

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType.WiFi( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_181C14278 + 4 * byte_18265F517[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181C142AC + 4 * byte_18265F512[v4]))();
}

uint64_t sub_181C142AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C142B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C142BCLL);
  }
  return result;
}

uint64_t sub_181C142C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C142D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_181C142D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C142DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType.WiFi()
{
  return &type metadata for NWInterface.RadioType.WiFi;
}

uint64_t getEnumTagSinglePayload for NWInterface.RadioType.Cellular(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x7C) {
    goto LABEL_17;
  }
  if (a2 + 132 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 132) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 132;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 132;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 132;
    }
  }

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType.Cellular( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 132 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 132) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x7C) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x7B) {
    return ((uint64_t (*)(void))((char *)&loc_181C143E4 + 4 * byte_18265F521[v4]))();
  }
  *a1 = a2 - 124;
  return ((uint64_t (*)(void))((char *)sub_181C14418 + 4 * byte_18265F51C[v4]))();
}

uint64_t sub_181C14418(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C14420(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C14428LL);
  }
  return result;
}

uint64_t sub_181C14440(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C14448LL);
  }
  *(_BYTE *)unint64_t result = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
  return result;
}

uint64_t sub_181C1444C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C14454(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C14460(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0x3F) {
    return v1 >> 5;
  }
  else {
    return (v1 | 0xFFFFFFFE) + 2 * (v1 >> 5);
  }
}

_BYTE *sub_181C1447C(_BYTE *result)
{
  *result &= 0x1Fu;
  return result;
}

_BYTE *sub_181C1448C(_BYTE *result, unsigned int a2)
{
  if (a2 < 2) {
    *unint64_t result = *result & 1 | (32 * a2);
  }
  else {
    *unint64_t result = (a2 & 1 | (32 * (a2 >> 1))) + 32;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType.Cellular()
{
  return &type metadata for NWInterface.RadioType.Cellular;
}

uint64_t storeEnumTagSinglePayload for NWInterface.RadioType.Cellular.NewRadio5GVariant( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181C1451C + 4 * byte_18265F52B[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C14550 + 4 * byte_18265F526[v4]))();
}

uint64_t sub_181C14550(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C14558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C14560LL);
  }
  return result;
}

uint64_t sub_181C1456C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C14574LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181C14578(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C14580(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWInterface.RadioType.Cellular.NewRadio5GVariant()
{
  return &type metadata for NWInterface.RadioType.Cellular.NewRadio5GVariant;
}

void *initializeBufferWithCopyOfBuffer for NWPath(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + sub_181C095BC(v0 + 16) = *((_DWORD *)a2 + 4);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v7 = a3[11];
    uint64_t v8 = (void *)(a1 + v7);
    nw_path_monitor_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for NWEndpoint();
    unint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v11(v9, 1LL, v10))
    {
      uint64_t v14 = (char *)&loc_181C146A8 + 4 * byte_18265F530[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    uint64_t v15 = a3[12];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (!v11((char *)a2 + v15, 1LL, v10))
    {
      unint64_t v19 = (char *)&loc_181C1480C + 4 * byte_18265F535[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    *(void *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    swift_unknownObjectRetain();
  }

  return v4;
}

uint64_t destroy for NWPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  unsigned int v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL);
  if (!v6(v4, 1LL, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(_BYTE *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 48) != 1LL) {
          goto LABEL_12;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v9 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v4, v9);
        break;
      case 4u:
LABEL_12:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }

  uint64_t v7 = a1 + *(int *)(a2 + 48);
  if (!v6(v7, 1LL, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(_BYTE *)(v7 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v7 + 48) != 1LL) {
          goto LABEL_17;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v10 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v7, v10);
        break;
      case 4u:
LABEL_17:
        swift_unknownObjectRelease();
        break;
      default:
        return swift_unknownObjectRelease();
    }
  }

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + sub_181C095BC(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v10(v8, 1LL, v9))
  {
    uint64_t v12 = (char *)&loc_181C14BEC + 4 * byte_18265F544[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  uint64_t v13 = a3[12];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (!v10((const void *)(a2 + v13), 1LL, v9))
  {
    uint64_t v17 = (char *)&loc_181C14D50 + 4 * byte_18265F549[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + sub_181C095BC(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL);
  int v11 = v10(v7, 1LL, v9);
  int v12 = v10(v8, 1LL, v9);
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = (char *)&loc_181C14F70 + 4 * byte_18265F54E[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    goto LABEL_6;
  }

  if (v12)
  {
    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_9;
  }

  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t v15 = (char *)&loc_181C15028 + 4 * word_18265F554[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

void sub_181C153BC()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C15148LL);
}

void sub_181C153E4()
{
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C15148LL);
}

void sub_181C15418()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C15148LL);
}

void sub_181C15438()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1537CLL);
}

void sub_181C15460()
{
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1537CLL);
}

void sub_181C15494()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1537CLL);
}

void sub_181C154B4()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  uint64_t v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C15148LL);
}

void sub_181C15524()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  uint64_t v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1537CLL);
}

uint64_t initializeWithTake for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + sub_181C095BC(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v13 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v7, v8, *(void *)(v10 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v14 = a3[12];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v11((const void *)(a2 + v14), 1LL, v9))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v18 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v15, v16, v18);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v15, v16, *(void *)(v10 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + sub_181C095BC(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v16 = sub_18264E568();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v7, v8, v16);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }

      size_t v15 = *(void *)(v10 + 64);
LABEL_8:
      memcpy(v7, v8, v15);
      goto LABEL_14;
    }

    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
LABEL_7:
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580) - 8) + 64LL);
    goto LABEL_8;
  }

  if (v13) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v14 = sub_18264E568();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v7, v8, v14);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(v7, v8, *(void *)(v10 + 64));
  }

  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_14:
  uint64_t v17 = a3[12];
  uint64_t v18 = (void *)(a1 + v17);
  int v19 = (void *)(a2 + v17);
  int v20 = v11((void *)(a1 + v17), 1LL, v9);
  int v21 = v11(v19, 1LL, v9);
  if (!v20)
  {
    if (!v21)
    {
      if (a1 == a2) {
        goto LABEL_27;
      }
      sub_181BC920C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v24 = sub_18264E568();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v18, v19, v24);
        swift_storeEnumTagMultiPayload();
        goto LABEL_27;
      }

      size_t v23 = *(void *)(v10 + 64);
      goto LABEL_21;
    }

    sub_181BC920C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
LABEL_20:
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580) - 8) + 64LL);
LABEL_21:
    memcpy(v18, v19, v23);
    goto LABEL_27;
  }

  if (v21) {
    goto LABEL_20;
  }
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v22 = sub_18264E568();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v18, v19, v22);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(v18, v19, *(void *)(v10 + 64));
  }

  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v18, 0LL, 1LL, v9);
LABEL_27:
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWPath()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C15AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 44),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NWPath()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C15B5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 44),  a2,  a2,  v7);
  }

  return result;
}

void sub_181C15BD4()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for NWPath.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181C15CD8 + 4 * byte_18265F56D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C15D0C + 4 * byte_18265F568[v4]))();
}

uint64_t sub_181C15D0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C15D14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C15D1CLL);
  }
  return result;
}

uint64_t sub_181C15D28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C15D30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_181C15D34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C15D3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWPath.Status()
{
  return &type metadata for NWPath.Status;
}

uint64_t _s7Network11NWInterfaceV13InterfaceTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_181C15DA4 + 4 * byte_18265F577[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181C15DD8 + 4 * byte_18265F572[v4]))();
}

uint64_t sub_181C15DD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C15DE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C15DE8LL);
  }
  return result;
}

uint64_t sub_181C15DF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C15DFCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_181C15E00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C15E08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWPath.UnsatisfiedReason()
{
  return &type metadata for NWPath.UnsatisfiedReason;
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWPathMonitor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init(requiredInterfaceType:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWPathMonitor.__allocating_init(prohibitedInterfaceTypes:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t initializeBufferWithCopyOfBuffer for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NWPathMonitor.Iterator(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t initializeWithCopy for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for NWPathMonitor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWPathMonitor.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C16014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NWPathMonitor.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C16060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CB08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

void sub_181C160A4()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_181C16124( uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255LL);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }

uint64_t *sub_181C1617C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = (int *)type metadata accessor for NWPath(0LL);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
      memcpy(v4, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      uint64_t v34 = v8;
      *(_BYTE *)uint64_t v4 = *(_BYTE *)a2;
      v4[1] = a2[1];
      *((_DWORD *)v4 + 4) = *((_DWORD *)a2 + 4);
      v4[3] = a2[3];
      uint64_t v11 = v7[11];
      int v12 = (char *)v4 + v11;
      int v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for NWEndpoint();
      size_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v15(v13, 1LL, v14))
      {
        uint64_t v17 = (char *)&loc_181C162DC + 4 * byte_18265F57C[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }

      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      uint64_t v18 = v7[12];
      int v19 = (char *)v4 + v18;
      int v20 = (char *)a2 + v18;
      if (!v15((char *)a2 + v18, 1LL, v14))
      {
        uint64_t v22 = (char *)&loc_181C16450 + 4 * byte_18265F581[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }

      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
      *(uint64_t *)((char *)v4 + v7[13]) = *(uint64_t *)((char *)a2 + v7[13]);
      size_t v23 = *(void (**)(uint64_t *, void, uint64_t, int *))(v34 + 56);
      swift_unknownObjectRetain();
      v23(v4, 0LL, 1LL, v7);
    }

    uint64_t v24 = a3[5];
    uint64_t v25 = (uint64_t *)((char *)v4 + v24);
    os_log_type_t v26 = (uint64_t *)((char *)a2 + v24);
    if (*v26)
    {
      uint64_t v27 = v26[1];
      void *v25 = *v26;
      v25[1] = v27;
      swift_retain();
    }

    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }

    uint64_t v28 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    id v29 = *(void **)((char *)a2 + v28);
    *(uint64_t *)((char *)v4 + v28) = (uint64_t)v29;
    uint64_t v30 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *((_BYTE *)v4 + v30) = *((_BYTE *)a2 + v30);
    uint64_t v31 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *(uint64_t *)((char *)v4 + v31) = *(uint64_t *)((char *)a2 + v31);
    id v32 = v29;
    swift_bridgeObjectRetain();
  }

  swift_retain();
  return v4;
}

uint64_t sub_181C16610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWPath(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, 1LL, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = a1 + *(int *)(v4 + 44);
    uint64_t v6 = type metadata accessor for NWEndpoint();
    uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL);
    if (!v7(v5, 1LL, v6))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          sub_181BC6974(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(_BYTE *)(v5 + 24));
          break;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v5 + 48) != 1LL) {
            goto LABEL_16;
          }
          break;
        case 2u:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          uint64_t v10 = sub_18264E568();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v5, v10);
          break;
        case 4u:
LABEL_16:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }

    uint64_t v8 = a1 + *(int *)(v4 + 48);
    if (!v7(v8, 1LL, v6))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          sub_181BC6974(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(_BYTE *)(v8 + 24));
          break;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v8 + 48) != 1LL) {
            goto LABEL_21;
          }
          break;
        case 2u:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          uint64_t v11 = sub_18264E568();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v8, v11);
          break;
        case 4u:
LABEL_21:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }

    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  return swift_release();
}

_BYTE *sub_181C16850(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for NWPath(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    uint64_t v32 = v7;
    *a1 = *a2;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    uint64_t v9 = v6[11];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for NWEndpoint();
    int v13 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v13(v11, 1LL, v12))
    {
      size_t v15 = (char *)&loc_181C16988 + 4 * byte_18265F590[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    uint64_t v16 = v6[12];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    if (!v13(&a2[v16], 1LL, v12))
    {
      int v20 = (char *)&loc_181C16AF8 + 4 * byte_18265F595[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
    *(void *)&a1[v6[13]] = *(void *)&a2[v6[13]];
    uint64_t v21 = *(void (**)(_BYTE *, void, uint64_t, int *))(v32 + 56);
    swift_unknownObjectRetain();
    v21(a1, 0LL, 1LL, v6);
  }

  uint64_t v22 = a3[5];
  size_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  if (*v24)
  {
    uint64_t v25 = v24[1];
    *size_t v23 = *v24;
    v23[1] = v25;
    swift_retain();
  }

  else
  {
    *(_OWORD *)size_t v23 = *(_OWORD *)v24;
  }

  uint64_t v26 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v27 = *(void **)&a2[v26];
  *(void *)&a1[v26] = v27;
  uint64_t v28 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v28] = a2[v28];
  uint64_t v29 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(void *)&a1[v29] = *(void *)&a2[v29];
  id v30 = v27;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_181C16CB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for NWPath(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_181BC920C(a1, type metadata accessor for NWPath);
      goto LABEL_7;
    }

    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + sub_181C095BC(v0 + 16) = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
    *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v19 = v6[11];
    int v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    uint64_t v22 = type metadata accessor for NWEndpoint();
    size_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL);
    int v24 = v23(v20, 1LL, v22);
    int v25 = v23(v21, 1LL, v22);
    if (v24)
    {
      if (!v25)
      {
        uint64_t v26 = (char *)&loc_181C16EDC + 4 * word_18265F5A4[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
    }

    else
    {
      if (!v25)
      {
        if (a1 != a2)
        {
          sub_181BC920C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
          uint64_t v29 = (char *)&loc_181C17010 + 4 * word_18265F5AE[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }

void sub_181C1771C()
{
  *unint64_t v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C173D0LL);
}

void sub_181C17744()
{
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C173D0LL);
}

void sub_181C17778()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C173D0LL);
}

void sub_181C17798()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1760CLL);
}

void sub_181C177C0()
{
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1760CLL);
}

void sub_181C177F4()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1760CLL);
}

void sub_181C17814()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  uint64_t v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C173D0LL);
}

void sub_181C17888()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  uint64_t v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C1760CLL);
}

_BYTE *sub_181C178F8(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for NWPath(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    uint64_t v9 = v6[11];
    int v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for NWEndpoint();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48);
    if (v14(v11, 1LL, v12))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v16 = sub_18264E568();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v10, v11, v16);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(v10, v11, *(void *)(v13 + 64));
      }

      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v17 = v6[12];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    if (v14(&a2[v17], 1LL, v12))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v21 = sub_18264E568();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v18, v19, v21);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(v18, v19, *(void *)(v13 + 64));
      }

      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0LL, 1LL, v12);
    }

    *(void *)&a1[v6[13]] = *(void *)&a2[v6[13]];
    (*(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v22 = a3[5];
  size_t v23 = &a1[v22];
  int v24 = (uint64_t *)&a2[v22];
  uint64_t v25 = *v24;
  if (*v24)
  {
    uint64_t v26 = v24[1];
    *size_t v23 = v25;
    v23[1] = v26;
  }

  else
  {
    *(_OWORD *)size_t v23 = *(_OWORD *)v24;
  }

  uint64_t v27 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v27] = *(void *)&a2[v27];
  uint64_t v28 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v28] = a2[v28];
  uint64_t v29 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(void *)&a1[v29] = *(void *)&a2[v29];
  return a1;
}

uint64_t sub_181C17BB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for NWPath(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_181BC920C(a1, type metadata accessor for NWPath);
      goto LABEL_7;
    }

    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + sub_181C095BC(v0 + 16) = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
    *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRelease();
    uint64_t v19 = v6[11];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    uint64_t v22 = type metadata accessor for NWEndpoint();
    uint64_t v23 = *(void *)(v22 - 8);
    int v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
    int v25 = v24(v20, 1LL, v22);
    int v26 = v24(v21, 1LL, v22);
    if (v25)
    {
      if (!v26)
      {
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v27 = sub_18264E568();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v20, v21, v27);
          swift_storeEnumTagMultiPayload();
        }

        else
        {
          memcpy(v20, v21, *(void *)(v23 + 64));
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
LABEL_32:
        uint64_t v36 = v6[12];
        uint64_t v37 = (void *)(a1 + v36);
        uint64_t v38 = (void *)(a2 + v36);
        int v39 = v24((void *)(a1 + v36), 1LL, v22);
        int v40 = v24(v38, 1LL, v22);
        if (v39)
        {
          if (!v40)
          {
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              uint64_t v41 = sub_18264E568();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 32LL))(v37, v38, v41);
              swift_storeEnumTagMultiPayload();
            }

            else
            {
              memcpy(v37, v38, *(void *)(v23 + 64));
            }

            (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v37, 0LL, 1LL, v22);
            goto LABEL_45;
          }
        }

        else
        {
          if (!v40)
          {
            if (a1 == a2) {
              goto LABEL_45;
            }
            sub_181BC920C((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              uint64_t v43 = sub_18264E568();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v43 - 8) + 32LL))(v37, v38, v43);
              swift_storeEnumTagMultiPayload();
              goto LABEL_45;
            }

            size_t v42 = *(void *)(v23 + 64);
LABEL_39:
            memcpy(v37, v38, v42);
LABEL_45:
            *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
            swift_unknownObjectRelease();
            goto LABEL_46;
          }

          sub_181BC920C((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
        }

        size_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580) - 8) + 64LL);
        goto LABEL_39;
      }
    }

    else
    {
      if (!v26)
      {
        if (a1 == a2) {
          goto LABEL_32;
        }
        sub_181BC920C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          uint64_t v35 = sub_18264E568();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 32LL))(v20, v21, v35);
          swift_storeEnumTagMultiPayload();
          goto LABEL_32;
        }

        size_t v29 = *(void *)(v23 + 64);
LABEL_17:
        memcpy(v20, v21, v29);
        goto LABEL_32;
      }

      sub_181BC920C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    }

    size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580) - 8) + 64LL);
    goto LABEL_17;
  }

  if (v10)
  {
LABEL_7:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_46;
  }

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + sub_181C095BC(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v11 = v6[11];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for NWEndpoint();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v28 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v12, v13, v28);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v12, v13, *(void *)(v15 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v30 = v6[12];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  if (v16((const void *)(a2 + v30), 1LL, v14))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v34 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v31, v32, v34);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v31, v32, *(void *)(v15 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v31, 0LL, 1LL, v14);
  }

  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_46:
  uint64_t v44 = a3[5];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = a2 + v44;
  uint64_t v47 = *(void *)(a1 + v44);
  uint64_t v48 = *(void *)(a2 + v44);
  if (!v47)
  {
    if (v48)
    {
      uint64_t v50 = *(void *)(v46 + 8);
      *uint64_t v45 = v48;
      v45[1] = v50;
      goto LABEL_53;
    }

uint64_t sub_181C181DC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C181E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_181C18268()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C18274(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E6E8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

void sub_181C182F0()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_181C183AC(uint64_t a1)
{
  return sub_181C11268(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_181C183C4(uint64_t a1)
{
  return sub_181C10C68(a1, *(void *)(v1 + 16));
}

int *sub_181C183DC(uint64_t a1)
{
  return sub_181C12DE0(a1, v1);
}

uint64_t sub_181C183F4()
{
  return swift_deallocObject();
}

uint64_t sub_181C18404()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_181C1842C()
{
  return swift_deallocObject();
}

uint64_t sub_181C1843C(uint64_t a1)
{
  return sub_181C10614(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_181C18444()
{
  return swift_deallocObject();
}

int *sub_181C18454(uint64_t a1)
{
  return sub_181C12EC4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_181C1845C()
{
  return swift_deallocObject();
}

uint64_t sub_181C18480()
{
  return sub_181C120D8();
}

uint64_t sub_181C18488()
{
  return sub_181C121EC();
}

unint64_t sub_181C18498()
{
  unint64_t result = qword_18C45E570;
  if (!qword_18C45E570)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_18C45E560);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189618470], v1);
    atomic_store(result, (unint64_t *)&qword_18C45E570);
  }

  return result;
}

uint64_t objectdestroy_53Tm()
{
  uint64_t v1 = type metadata accessor for NWPath(0LL);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + *(int *)(v1 + 44);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL);
  if (!v6(v4, 1LL, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(_BYTE *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 48) != 1LL) {
          goto LABEL_12;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v9 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v4, v9);
        break;
      case 4u:
LABEL_12:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }

  uint64_t v7 = v3 + *(int *)(v1 + 48);
  if (!v6(v7, 1LL, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(_BYTE *)(v7 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v7 + 48) != 1LL) {
          goto LABEL_17;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v10 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v7, v10);
        break;
      case 4u:
LABEL_17:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181C18710()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NWPath(0LL) - 8) + 80LL);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_181C18750()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_181C187D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_181C13414( a1,  *(void *)(v1 + 16),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_181C1882C(uint64_t a1)
{
  return sub_181C0EC60(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_181C18894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = (uint64_t *)(a1 + 32);
  unint64_t v4 = (nw_interface **)(a2 + 32);
  while (1)
  {
    uint64_t v7 = *v3++;
    uint64_t v6 = v7;
    uint64_t v9 = *v4++;
    uint64_t v8 = v9;
    if (!v6) {
      break;
    }
    swift_unknownObjectRetain();
    uint64_t v10 = (nw_interface *)swift_unknownObjectRetain();
    uint32_t index = nw_interface_get_index(v10);
    if (!v8) {
      goto LABEL_20;
    }
    uint64_t v12 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v12);
    uint64_t v13 = sub_18264EB80();
    unint64_t v15 = v14;
    swift_unknownObjectRelease();
    uint64_t v16 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v16);
    uint64_t v17 = sub_18264EB80();
    unint64_t v19 = v18;
    swift_unknownObjectRelease();
    if (v13 == v17)
    {
LABEL_14:
      if (v15 != v19) {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!--v2) {
        return 1LL;
      }
    }

    else
    {
LABEL_5:
      char v5 = sub_18264F4EC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((v5 & 1) == 0) {
        return 0LL;
      }
      if (!--v2) {
        return 1LL;
      }
    }
  }

  swift_unknownObjectRetain();
  if (!v8)
  {
    unint64_t v15 = 0xE700000000000000LL;
    unint64_t v19 = 0xE700000000000000LL;
    goto LABEL_14;
  }

  nw_interface_get_index(v8);
LABEL_19:
  swift_unknownObjectRelease();
LABEL_20:
  swift_unknownObjectRelease();
  return 0LL;
}

uint64_t sub_181C18A54(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_18264F4EC(), result = 0LL, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1LL;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_18264F4EC() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_181C18B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2)
  {
    if (a1 != a2) {
      __asm { BR              X8 }
    }
  }

  return 1LL;
}

BOOL sub_181C1942C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  BOOL v5 = (unsigned __int8 *)(a1 + 33);
  char v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }

  while (v7 == v9 && v12);
  return result;
}

uint64_t NWEthernetChannel.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

uint64_t sub_181C194F4@<X0>(nw_error_t error@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  switch((int)result)
  {
    case 0:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000000LL;
      break;
    case 1:
      if (error)
      {
        nw_error_domain_t error_domain = nw_error_get_error_domain(error);
        switch(error_domain)
        {
          case nw_error_domain_tls:
            unsigned int error_code = nw_error_get_error_code(error);
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = error_code | 0x200000000LL;
            break;
          case nw_error_domain_dns:
            unsigned int v9 = nw_error_get_error_code(error);
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = v9 | 0x100000000LL;
            break;
          case nw_error_domain_posix:
            nw_error_get_error_code(error);
            uint64_t v7 = sub_18264E94C();
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            if ((v7 & 0x100000000LL) == 0) {
              unint64_t v5 = v7;
            }
            break;
          default:
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            break;
        }
      }

      else
      {
        unint64_t v5 = 50LL;
      }

      break;
    case 2:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000001LL;
      break;
    case 3:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000002LL;
      break;
    case 4:
      BOOL result = (uint64_t)sub_181BF9C34(error, (uint64_t)&v10);
      unint64_t v5 = 0x4000000016LL;
      if (v11 != 255LL) {
        unint64_t v5 = v10 | ((unint64_t)v11 << 32) | 0x4000000000LL;
      }
      break;
    default:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000003LL;
      break;
  }

  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = BYTE4(v5);
  return result;
}

void NWEthernetChannel.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 16);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 20);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 68));
}

uint64_t (*NWEthernetChannel.stateUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 17;
  os_unfair_lock_lock(v1 + 17);
  sub_181C19A84(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + sub_181C095BC(v0 + 16) = v5;
  return sub_181BD639C;
}

uint64_t sub_181C19764(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + sub_181C095BC(v0 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    int v4 = sub_181BDA300;
  }

  else
  {
    int v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  return NWEthernetChannel.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t NWEthernetChannel.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 68));
  uint64_t v6 = *(void *)(v5 + 24);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  LODWORD((*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6) = *(unsigned __int8 *)(v5 + 64);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 68));
  if ((_DWORD)v6 != 1) {
    return sub_181BD25B8(a1);
  }
  uint64_t v7 = *(nw_ethernet_channel **)(v2 + 16);
  int v8 = (void *)swift_allocObject();
  void v8[2] = v2;
  void v8[3] = a1;
  v8[4] = a2;
  void v11[4] = sub_181C1C008;
  v11[5] = v8;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  v11[2] = sub_181BD1944;
  void v11[3] = &block_descriptor_7;
  unsigned int v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_181BC904C(a1);
  swift_release();
  nw_ethernet_channel_set_state_changed_handler(v7, v9);
  sub_181BD25B8(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void sub_181C19940(uint64_t a1, nw_error *a2, uint64_t a3, void (*a4)(int *))
{
  uint64_t v7 = *(os_unfair_lock_s **)(a3 + 24);
  uint64_t v8 = (uint64_t)&v7[4];
  unsigned int v9 = v7 + 17;
  os_unfair_lock_lock(v7 + 17);
  sub_181C199D8(v8, a1, a2, (uint64_t)&v10);
  os_unfair_lock_unlock(v9);
  if (a4) {
    a4(&v10);
  }
}

uint64_t sub_181C199D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, nw_error *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_181C194F4(a3, a2, (uint64_t)&v11);
  unsigned int v9 = v11;
  unint64_t v10 = v11 | ((unint64_t)v12 << 32);
  *(_BYTE *)(a1 + 4) = v12;
  *(_DWORD *)a1 = v9;
  if (v10 >= 0x8000000003LL)
  {
    uint64_t result = nw_utilities_minos_atleast();
    if ((_DWORD)result)
    {
      sub_181BD25B8(*(void *)(a1 + 8));
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + sub_181C095BC(v0 + 16) = 0LL;
      uint64_t result = sub_181BD25B8(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0LL;
      *(void *)(a1 + 32) = 0LL;
    }
  }

  *(_DWORD *)a4 = v10;
  *(_BYTE *)(a4 + 4) = BYTE4(v10);
  return result;
}

uint64_t sub_181C19A84@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + sub_181C095BC(v0 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181BD639C;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWEthernetChannel.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 17;
  os_unfair_lock_lock(v3 + 17);
  sub_181C19A84(v4, v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + sub_181C095BC(v0 + 16) = v9;
    uint64_t v6 = sub_181BDA300;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_181C19BA0;
}

uint64_t sub_181C19BA0(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  NWEthernetChannel.stateUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BDA298,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t NWEthernetChannel.etherType.getter()
{
  return *(unsigned __int16 *)(v0 + 32);
}

uint64_t NWEthernetChannel.interface.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
  return swift_unknownObjectRetain();
}

uint64_t NWEthernetChannel.__allocating_init(on:etherType:)(nw_interface **a1, uint16_t a2)
{
  uint64_t v4 = swift_allocObject();
  NWEthernetChannel.init(on:etherType:)(a1, a2);
  return v4;
}

uint64_t NWEthernetChannel.init(on:etherType:)(nw_interface **a1, uint16_t a2)
{
  uint64_t v4 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CD50);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 68) = 0;
  *(_BYTE *)(result + 20) = 0x80;
  *(_DWORD *)(result + sub_181C095BC(v0 + 16) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 49) = 0u;
  *(void *)(v2 + 24) = result;
  *(_WORD *)(v2 + 32) = a2;
  *(void *)(v2 + 40) = v4;
  if (v4)
  {
    *(void *)(v2 + sub_181C095BC(v0 + 16) = nw_ethernet_channel_create(a2, v4);
    sub_181BC904C(0LL);
    NWEthernetChannel.stateUpdateHandler.setter(0LL, 0LL);
    return v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NWEthernetChannel.__allocating_init(on:etherType:parameters:)( nw_interface **a1, uint16_t a2, uint64_t a3)
{
  uint64_t v6 = sub_181C1C02C(a1, a2, a3);
  swift_release();
  return v6;
}

uint64_t NWEthernetChannel.init(on:etherType:parameters:)(nw_interface **a1, uint16_t a2, uint64_t a3)
{
  uint64_t v3 = sub_181C1C02C(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t NWEthernetChannel.maximumPayloadSize.getter()
{
  return nw_ethernet_channel_get_maximum_payload_size(*(nw_ethernet_channel_t *)(v0 + 16));
}

void NWEthernetChannel.start(queue:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 68));
  uint64_t v5 = *(void **)(v4 + 56);
  uint64_t v6 = a1;

  *(void *)(v4 + 56) = a1;
  *(_BYTE *)(v4 + 64) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 68));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 68));
  sub_181C19A84(v4 + 16, v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 68));
  if (v11[0])
  {
    __int128 v10 = *(_OWORD *)v11;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + sub_181C095BC(v0 + 16) = v10;
    uint64_t v8 = sub_181BDA300;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
  }

  sub_181BC904C((uint64_t)v8);
  sub_181BC904C((uint64_t)v8);
  NWEthernetChannel.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_181BD25B8((uint64_t)v8);
  sub_181BD25B8((uint64_t)v8);
  __int128 v9 = *(nw_ethernet_channel **)(v2 + 16);
  nw_ethernet_channel_set_queue(v9, v6);
  nw_ethernet_channel_start(v9);
}

void *NWEthernetChannel.queue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 68);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 68));
  uint64_t v3 = *(void **)(v1 + 56);
  id v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall NWEthernetChannel.cancel()()
{
}

void NWEthernetChannel.EthernetAddress.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_181C19F18()
{
  if (BYTE6(v1) == 6LL)
  {
    sub_181C1BD24(v2, v1);
    uint64_t v4 = v3;
    uint64_t result = sub_181BCD4F0(v2, v1);
  }

  else
  {
    uint64_t result = sub_181BCD4F0(v2, v1);
    uint64_t v4 = 0LL;
  }

  *uint64_t v0 = v4;
  return result;
}

uint64_t NWEthernetChannel.EthernetAddress.init(_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v60 = 58LL;
  uint64_t v61 = 0xE100000000000000LL;
  uint64_t v58 = &v60;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_181C1B30C(0x7FFFFFFFFFFFFFFFLL, 1, sub_181C1C13C, (uint64_t)v57, a1, a2);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(v6 + 16);
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = 0LL;
LABEL_22:
    *a3 = v17;
    return result;
  }

  uint64_t v50 = a3;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0LL;
  uint64_t v56 = v6;
  __int128 v9 = (unint64_t *)(v6 + 56);
  while (1)
  {
    unint64_t v11 = *(v9 - 3);
    unint64_t v10 = *(v9 - 2);
    if ((v10 ^ v11) < 0x4000) {
      goto LABEL_10;
    }
    unint64_t v13 = *(v9 - 1);
    unint64_t v12 = *v9;
    if ((*v9 & 0x1000000000000000LL) == 0) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __int16 v16 = sub_181C1B900(v11, v10, v13, v12, 16LL);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v16 & 0x100) == 0) {
      goto LABEL_16;
    }
LABEL_10:
    ++v8;
    v9 += 4;
    if (v7 == v8) {
      goto LABEL_20;
    }
  }

  if ((v12 & 0x2000000000000000LL) != 0)
  {
    uint64_t v60 = *(v9 - 1);
    uint64_t v61 = v12 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v14 = &v60;
  }

  else if ((v13 & 0x1000000000000000LL) != 0)
  {
    unint64_t v14 = (uint64_t *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v14 = (uint64_t *)sub_18264F228();
  }

  uint64_t result = sub_181C1C190((uint64_t)v14, v11, v10, v13, v12, 16LL);
  char v59 = BYTE1(result) & 1;
  if ((result & 0x100) != 0) {
    goto LABEL_10;
  }
LABEL_16:
  if (v7 >= v8)
  {
    if (v7 == v8)
    {
LABEL_20:
      uint64_t result = swift_bridgeObjectRelease_n();
LABEL_21:
      uint64_t v17 = 0LL;
      a3 = v50;
      goto LABEL_22;
    }

    uint64_t v18 = 1LL;
    uint64_t v19 = v7;
  }

  else
  {
    uint64_t v18 = -1LL;
    uint64_t v19 = v8;
    uint64_t v8 = v7;
  }

  uint64_t v20 = 0LL;
  uint64_t v52 = v18;
  uint64_t v54 = v6 + 88;
  uint64_t v51 = v19;
  do
  {
    BOOL v22 = __OFADD__(v20, v18);
    v20 += v18;
    if (v22) {
      goto LABEL_81;
    }
    if (v8 == v7) {
      goto LABEL_82;
    }
    unint64_t v21 = v8 + 1;
    if (v8 + 1 != v7)
    {
      uint64_t v23 = (unint64_t *)(v54 + 32 * v8);
      while (v8 >= -1)
      {
        if (v21 >= *(void *)(v56 + 16)) {
          goto LABEL_80;
        }
        unint64_t v25 = *(v23 - 3);
        unint64_t v24 = *(v23 - 2);
        if ((v24 ^ v25) >= 0x4000)
        {
          unint64_t v27 = *(v23 - 1);
          unint64_t v26 = *v23;
          if ((*v23 & 0x1000000000000000LL) != 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __int16 v29 = sub_181C1B900(v25, v24, v27, v26, 16LL);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if ((v29 & 0x100) == 0) {
              goto LABEL_44;
            }
          }

          else
          {
            if ((v26 & 0x2000000000000000LL) != 0)
            {
              uint64_t v60 = *(v23 - 1);
              uint64_t v61 = v26 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v28 = &v60;
            }

            else if ((v27 & 0x1000000000000000LL) != 0)
            {
              uint64_t v28 = (uint64_t *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }

            else
            {
              uint64_t v28 = (uint64_t *)sub_18264F228();
            }

            uint64_t result = sub_181C1C190((uint64_t)v28, v25, v24, v27, v26, 16LL);
            char v59 = BYTE1(result) & 1;
            if ((result & 0x100) == 0) {
              goto LABEL_44;
            }
          }
        }

        ++v21;
        v23 += 4;
        if (v7 == v21)
        {
          unint64_t v21 = v7;
LABEL_44:
          uint64_t v19 = v51;
          uint64_t v18 = v52;
          goto LABEL_25;
        }
      }

      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

    unint64_t v21 = v7;
LABEL_25:
    uint64_t v8 = v21;
  }

  while (v21 != v19);
  swift_bridgeObjectRelease();
  if (v20 <= 5)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_21;
  }

  uint64_t result = swift_bridgeObjectRetain_n();
  size_t v55 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v17 = (char *)MEMORY[0x18961AFE8];
  uint64_t v31 = v56 + 56;
  uint64_t v53 = (char *)(MEMORY[0x18961AFE8] + 32LL);
LABEL_48:
  uint64_t v32 = (unint64_t *)(v31 + 32 * v30++);
  while ((unint64_t)(v30 - 1) < *(void *)(v56 + 16))
  {
    unint64_t v34 = *(v32 - 3);
    unint64_t v33 = *(v32 - 2);
    if ((v33 ^ v34) >> 14)
    {
      unint64_t v36 = *(v32 - 1);
      unint64_t v35 = *v32;
      if ((*v32 & 0x1000000000000000LL) != 0)
      {
        swift_bridgeObjectRetain();
        LOWORD(v33) = sub_181C1B900(v34, v33, v36, v35, 16LL);
        uint64_t result = swift_bridgeObjectRelease();
        if ((v33 & 0x100) == 0) {
          goto LABEL_62;
        }
      }

      else
      {
        if ((v35 & 0x2000000000000000LL) != 0)
        {
          uint64_t v60 = *(v32 - 1);
          uint64_t v61 = v35 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v37 = &v60;
        }

        else if ((v36 & 0x1000000000000000LL) != 0)
        {
          uint64_t v37 = (uint64_t *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          uint64_t v37 = (uint64_t *)sub_18264F228();
        }

        uint64_t result = sub_181C1C190((uint64_t)v37, v34, v33, v36, v35, 16LL);
        LOBYTE(v33) = result;
        char v59 = BYTE1(result) & 1;
        if ((result & 0x100) == 0)
        {
LABEL_62:
          size_t v38 = v55;
          if (!v55)
          {
            unint64_t v39 = *((void *)v17 + 3);
            int64_t v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
            if (v40 <= 1) {
              uint64_t v41 = 1LL;
            }
            else {
              uint64_t v41 = v40;
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
            size_t v42 = (char *)swift_allocObject();
            size_t v43 = 2 * _swift_stdlib_malloc_size(v42) - 64;
            *((void *)v42 + 2) = v41;
            *((void *)v42 + 3) = v43;
            uint64_t v44 = v42 + 32;
            size_t v45 = *((void *)v17 + 3) >> 1;
            if (*((void *)v17 + 2))
            {
              uint64_t v46 = v17 + 32;
              if (v42 != v17 || v44 >= &v46[v45]) {
                memmove(v42 + 32, v46, v45);
              }
              *((void *)v17 + 2) = 0LL;
            }

            uint64_t v53 = &v44[v45];
            size_t v38 = (v43 >> 1) - v45;
            uint64_t result = swift_release();
            uint64_t v17 = v42;
          }

          uint64_t v31 = v56 + 56;
          size_t v55 = v38 - 1;
          if (__OFSUB__(v38, 1LL)) {
            goto LABEL_84;
          }
          *v53++ = v33;
          if (v30 != v7) {
            goto LABEL_48;
          }
LABEL_75:
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v47 = *((void *)v17 + 3);
          a3 = v50;
          if (v47 >= 2)
          {
            unint64_t v48 = v47 >> 1;
            BOOL v22 = __OFSUB__(v48, v55);
            unint64_t v49 = v48 - v55;
            if (v22) {
              goto LABEL_85;
            }
            *((void *)v17 + 2) = v49;
          }

          uint64_t result = swift_bridgeObjectRelease_n();
          goto LABEL_22;
        }
      }
    }

    ++v30;
    v32 += 4;
    if (v30 - v7 == 1) {
      goto LABEL_75;
    }
  }

uint64_t NWEthernetChannel.EthernetAddress.debugDescription.getter()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0B0);
  uint64_t result = swift_allocObject();
  uint64_t v3 = MEMORY[0x18961A610];
  *(_OWORD *)(result + sub_181C095BC(v0 + 16) = xmmword_18265D160;
  uint64_t v4 = MEMORY[0x18961A658];
  *(void *)(result + 56) = v3;
  *(void *)(result + 64) = v4;
  unint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }

  *(_BYTE *)(result + 32) = *(_BYTE *)(v1 + 32);
  *(void *)(result + 96) = v3;
  *(void *)(result + 104) = v4;
  if (v5 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  *(_BYTE *)(result + 72) = *(_BYTE *)(v1 + 33);
  *(void *)(result + 136) = v3;
  *(void *)(result + 144) = v4;
  if (v5 < 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  *(_BYTE *)(result + 112) = *(_BYTE *)(v1 + 34);
  *(void *)(result + 176) = v3;
  *(void *)(result + 184) = v4;
  if (v5 == 3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  *(_BYTE *)(result + 152) = *(_BYTE *)(v1 + 35);
  *(void *)(result + 2sub_181C095BC(v0 + 16) = v3;
  *(void *)(result + 224) = v4;
  if (v5 < 5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  *(_BYTE *)(result + 192) = *(_BYTE *)(v1 + 36);
  *(void *)(result + 256) = v3;
  *(void *)(result + 264) = v4;
  if (v5 != 5)
  {
    *(_BYTE *)(result + 232) = *(_BYTE *)(v1 + 37);
    return sub_18264EA78();
  }

uint64_t NWEthernetChannel.EthernetAddress.rawValue.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_181BE4A20(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t NWEthernetChannel.EthernetAddress.hash(into:)()
{
  uint64_t v1 = *v0;
  uint64_t result = sub_18264F654();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      ++v4;
      uint64_t result = sub_18264F660();
      --v3;
    }

    while (v3);
  }

  return result;
}

BOOL static NWEthernetChannel.EthernetAddress.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_181C1942C(*a1, *a2);
}

uint64_t NWEthernetChannel.EthernetAddress.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_18264F648();
  sub_18264F654();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      ++v3;
      sub_18264F660();
      --v2;
    }

    while (v2);
  }

  return sub_18264F684();
}

uint64_t sub_181C1A704()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = sub_18264F654();
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      ++v4;
      uint64_t result = sub_18264F660();
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_181C1A754()
{
  uint64_t v1 = *v0;
  sub_18264F648();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_18264F654();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      ++v3;
      sub_18264F660();
      --v2;
    }

    while (v2);
  }

  return sub_18264F684();
}