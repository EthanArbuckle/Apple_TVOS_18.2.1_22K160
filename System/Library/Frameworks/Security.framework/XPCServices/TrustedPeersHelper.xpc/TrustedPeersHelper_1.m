uint64_t sub_10009EA7C(uint64_t a1)
{
  return sub_10009EA98( a1,  type metadata accessor for EscrowInformation.Metadata._StorageClass,  sub_10009EAE0,  &qword_100251ED8);
}

uint64_t sub_10009EA98(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = a2(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t sub_10009EAE0()
{
  *(_OWORD *)(v0 + 16) = xmmword_1001DE6F0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  uint64_t v2 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs) = 0LL;
  v3 = (void *)(v0
                + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
  void *v3 = 0LL;
  v3[1] = 0xE000000000000000LL;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki) = xmmword_1001DE6F0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo) = xmmword_1001DE6F0;
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
  *uint64_t v6 = 0LL;
  v6[1] = 0xE000000000000000LL;
  v7 = (void *)(v0
                + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
  void *v7 = 0LL;
  v7[1] = 0xE000000000000000LL;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  uint64_t v9 = type metadata accessor for PasscodeGeneration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return v0;
}

uint64_t sub_10009EC08(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_1002520E8);
  __chkstk_darwin(v4, v5);
  uint64_t v76 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v7, v8);
  uint64_t v72 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100007578(&qword_1002520A0);
  __chkstk_darwin(v10, v11);
  uint64_t v68 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v75 = xmmword_1001DE6F0;
  *(_OWORD *)(v1 + 16) = xmmword_1001DE6F0;
  v13 = (uint64_t *)(v1 + 16);
  uint64_t v14 = v2
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  uint64_t v67 = v2
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  uint64_t v15 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  v69 = (void *)(v2
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
  *(void *)(v2
            + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs) = 0LL;
  v16 = (void *)(v2
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
  void *v16 = 0LL;
  v16[1] = 0xE000000000000000LL;
  uint64_t v17 = v2
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  uint64_t v70 = v2
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  uint64_t v18 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  v19 = (uint64_t *)(v2
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki);
  __int128 v20 = v75;
  *(_OWORD *)(v2
            + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki) = v75;
  v71 = (uint64_t *)(v2
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo);
  *(_OWORD *)(v2
            + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo) = v20;
  v21 = (void *)(v2
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
  v73 = (void *)(v2
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
  void *v21 = 0LL;
  v21[1] = 0xE000000000000000LL;
  v22 = (void *)(v2
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
  v74 = (void *)(v2
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
  void *v22 = 0LL;
  v22[1] = 0xE000000000000000LL;
  uint64_t v23 = v2
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  *(void *)&__int128 v75 = v2
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  uint64_t v24 = type metadata accessor for PasscodeGeneration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v23, 1LL, 1LL, v24);
  swift_beginAccess(a1 + 16, v94, 0LL, 0LL);
  uint64_t v26 = *(void *)(a1 + 16);
  unint64_t v25 = *(void *)(a1 + 24);
  swift_beginAccess(v13, v93, 1LL, 0LL);
  uint64_t v27 = *v13;
  unint64_t v28 = *(void *)(v2 + 24);
  uint64_t *v13 = v26;
  *(void *)(v2 + 24) = v25;
  sub_1000084E8(v26, v25);
  sub_10000852C(v27, v28);
  uint64_t v29 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata,  v92,  0LL,  0LL);
  uint64_t v30 = v68;
  sub_10000FC68(v29, v68, &qword_1002520A0);
  uint64_t v31 = v67;
  swift_beginAccess(v67, v91, 33LL, 0LL);
  sub_1000B66E0(v30, v31, &qword_1002520A0);
  swift_endAccess(v91);
  v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs,  v91,  0LL,  0LL);
  uint64_t v33 = *v32;
  v34 = v69;
  swift_beginAccess(v69, v90, 1LL, 0LL);
  void *v34 = v33;
  v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID,  v89,  0LL,  0LL);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  swift_beginAccess(v16, v88, 1LL, 0LL);
  uint64_t v38 = v16[1];
  void *v16 = v37;
  v16[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp,  &v87,  0LL,  0LL);
  uint64_t v40 = v72;
  sub_10000FC68(v39, v72, (uint64_t *)&unk_100256D30);
  uint64_t v41 = v70;
  swift_beginAccess(v70, v86, 33LL, 0LL);
  sub_1000B66E0(v40, v41, (uint64_t *)&unk_100256D30);
  swift_endAccess(v86);
  v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki,  v86,  0LL,  0LL);
  uint64_t v44 = *v42;
  unint64_t v43 = v42[1];
  swift_beginAccess(v19, &v85, 1LL, 0LL);
  uint64_t v45 = *v19;
  unint64_t v46 = v19[1];
  uint64_t *v19 = v44;
  v19[1] = v43;
  sub_1000084E8(v44, v43);
  sub_10000852C(v45, v46);
  v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo,  &v84,  0LL,  0LL);
  uint64_t v49 = *v47;
  unint64_t v48 = v47[1];
  v50 = v71;
  swift_beginAccess(v71, &v83, 1LL, 0LL);
  uint64_t v51 = *v50;
  unint64_t v52 = v50[1];
  uint64_t *v50 = v49;
  v50[1] = v48;
  sub_1000084E8(v49, v48);
  sub_10000852C(v51, v52);
  v53 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial,  &v82,  0LL,  0LL);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  v56 = v73;
  swift_beginAccess(v73, &v81, 1LL, 0LL);
  uint64_t v57 = v56[1];
  void *v56 = v55;
  v56[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v57);
  v58 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build,  &v80,  0LL,  0LL);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  v61 = v74;
  swift_beginAccess(v74, &v79, 1LL, 0LL);
  uint64_t v62 = v61[1];
  void *v61 = v60;
  v61[1] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v62);
  uint64_t v63 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration,  &v78,  0LL,  0LL);
  uint64_t v64 = v76;
  sub_10000FC68(v63, v76, &qword_1002520E8);
  swift_release(a1);
  uint64_t v65 = v75;
  swift_beginAccess(v75, v77, 33LL, 0LL);
  sub_1000B66E0(v64, v65, &qword_1002520E8);
  swift_endAccess(v77);
  return v2;
}

uint64_t sub_10009F1BC()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID
                                      + 8));
  sub_100041590( v0 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp,  (uint64_t *)&unk_100256D30);
  sub_10000852C( *(void *)(v0 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki),  *(void *)(v0 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki + 8));
  sub_10000852C( *(void *)(v0 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo),  *(void *)(v0 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo + 8));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial
                                      + 8));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build
                                      + 8));
  sub_100041590( v0 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration,  &qword_1002520E8);
  return v0;
}

uint64_t sub_10009F284()
{
  return sub_10009F290(sub_10009F1BC);
}

uint64_t sub_10009F290(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t EscrowInformation.Metadata.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100083EF8( a1,  a2,  a3,  type metadata accessor for EscrowInformation.Metadata,  type metadata accessor for EscrowInformation.Metadata._StorageClass,  sub_10009EC08,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10009F2E4);
}

uint64_t sub_10009F2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_10009F514( a2,  a1,  a3,  a4,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularBytesField(value:));
          break;
        case 2LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
          v16 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata;
          uint64_t v17 = (unint64_t *)&unk_1002529A0;
          uint64_t v18 = &protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata;
          goto LABEL_5;
        case 3LL:
          sub_10009F594( a2,  a1,  a3,  a4,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
          break;
        case 4LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID;
          goto LABEL_17;
        case 5LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
          v16 = (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp;
          uint64_t v17 = &qword_100256418;
          uint64_t v18 = &protocol conformance descriptor for Google_Protobuf_Timestamp;
          goto LABEL_5;
        case 6LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki;
          uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularBytesField(value:);
          goto LABEL_18;
        case 7LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo;
          uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularBytesField(value:);
          goto LABEL_18;
        case 8LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial;
          goto LABEL_17;
        case 9LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build;
LABEL_17:
          uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:);
LABEL_18:
          sub_10009F614(v19, v20, v21, v22, v23, v24);
          break;
        case 10LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
          v16 = type metadata accessor for PasscodeGeneration;
          uint64_t v17 = &qword_100252960;
          uint64_t v18 = &protocol conformance descriptor for PasscodeGeneration;
LABEL_5:
          sub_10009F698(v11, v12, v13, v14, v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
    }
  }

  return result;
}

uint64_t sub_10009F514( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 33LL, 0LL);
  a5(v8, a3, a4);
  return swift_endAccess(v10);
}

uint64_t sub_10009F594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a2 + *a5;
  swift_beginAccess(v7, v9, 33LL, 0LL);
  dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v7, a3, a4);
  return swift_endAccess(v9);
}

uint64_t sub_10009F614( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a2 + *a5;
  swift_beginAccess(v9, v11, 33LL, 0LL);
  a6(v9, a3, a4);
  return swift_endAccess(v11);
}

uint64_t sub_10009F698( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *a5;
  swift_beginAccess(v13, v17, 33LL, 0LL);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
  return swift_endAccess(v17);
}

uint64_t EscrowInformation.Metadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100084134( a1,  a2,  a3,  type metadata accessor for EscrowInformation.Metadata,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10009F780);
}

void sub_10009F780(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_10009F7E4()
{
  if ((v6 & 0xFF000000000000LL) == 0
    || (sub_1000084E8(v5, v6),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v5, v6, 1LL, v2, v0),
        uint64_t result = sub_10000852C(v5, v6),
        !v4))
  {
    uint64_t result = sub_10009FB94(v3, v1, v2, v0);
    if (!v4)
    {
      uint64_t v9 = (void *)(v3
                    + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
      swift_beginAccess( v3 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs,  v7 - 112,  0LL,  0LL);
      if (*v9) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v9, 3LL, v2, v0);
      }
      char v10 = (uint64_t *)(v3
                      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
      swift_beginAccess( v3 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID,  &v16,  0LL,  0LL);
      uint64_t v11 = *v10;
      unint64_t v12 = v10[1];
      uint64_t v13 = HIBYTE(v12) & 0xF;
      if ((v12 & 0x2000000000000000LL) == 0) {
        uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        swift_bridgeObjectRetain(v12);
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12);
        swift_bridgeObjectRelease(v12);
      }

      sub_10009FD20(v3, v1, v2, v0);
      uint64_t v14 = v3
          + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki;
      swift_beginAccess( v3 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki,  &v15,  0LL,  0LL);
      __asm { BR              X10 }
    }
  }

  return result;
}

uint64_t sub_10009F99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  if ((v12 & 0xFF000000000000LL) != 0)
  {
    sub_1000084E8(v11, v12);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v11, v12, 6LL, v8, v7);
    sub_10000852C(v11, v12);
    if (v10) {
      JUMPOUT(0x10009F86CLL);
    }
  }

  uint64_t v13 = v9
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo;
  uint64_t v14 = swift_beginAccess( v9 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo,  va,  0LL,  0LL);
  return ((uint64_t (*)(uint64_t))((char *)sub_10009FA3C + 4 * byte_1001DEDA9[*(void *)(v13 + 8) >> 62]))(v14);
}

void sub_10009FA3C(uint64_t a1, ...)
{
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  if ((v7 & 0xFF000000000000LL) == 0
    || (sub_1000084E8(v6, v7),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v6, v7, 7LL, v3, v1),
        sub_10000852C(v6, v7),
        !v5))
  {
    uint64_t v8 = (uint64_t *)(v4
                   + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
    swift_beginAccess( v4 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial,  va1,  0LL,  0LL);
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (!v11
      || (swift_bridgeObjectRetain(v10),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v9, v10),
          swift_bridgeObjectRelease(v10),
          !v5))
    {
      unint64_t v12 = (uint64_t *)(v4
                      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
      swift_beginAccess( v4 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build,  (uint64_t *)va,  0LL,  0LL);
      uint64_t v13 = *v12;
      unint64_t v14 = v12[1];
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000LL) == 0) {
        uint64_t v15 = v13 & 0xFFFFFFFFFFFFLL;
      }
      if (!v15
        || (swift_bridgeObjectRetain(v14),
            dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v13, v14),
            swift_bridgeObjectRelease(v14),
            !v5))
      {
        sub_10009FEB0(v4, v2, v3, v1);
      }
    }
  }

  JUMPOUT(0x10009F86CLL);
}

uint64_t sub_10009FB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_1002520A0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_1002520A0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
  uint64_t v17 = sub_1000077B8( &qword_1002529A0,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_10009FD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, (uint64_t *)&unk_100256D30);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v17 = sub_1000077B8( &qword_100256418,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_10009FEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_1002520E8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for PasscodeGeneration(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_1002520E8);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for PasscodeGeneration);
  uint64_t v17 = sub_1000077B8( &qword_100252960,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 10LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for PasscodeGeneration);
}

uint64_t static EscrowInformation.Metadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t (*)(uint64_t, uint64_t))sub_1000A0064) & 1;
}

BOOL sub_1000A0064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PasscodeGeneration(0LL);
  uint64_t v122 = *(void *)(v4 - 8);
  uint64_t v123 = v4;
  __chkstk_darwin(v4, v5);
  v119 = (void **)((char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v121 = sub_100007578(&qword_100256420);
  __chkstk_darwin(v121, v7);
  uint64_t v124 = (uint64_t)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100007578(&qword_1002520E8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  v120 = (void **)((char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11, v13);
  uint64_t v125 = (uint64_t)&v119 - v14;
  uint64_t v131 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v131, v15);
  v126 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = sub_100007578(&qword_100251638);
  __chkstk_darwin(v128, v17);
  uint64_t v130 = (uint64_t)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v127 = (uint64_t)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v23);
  uint64_t v132 = (uint64_t)&v119 - v24;
  uint64_t v25 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  uint64_t v136 = *(void *)(v25 - 8);
  uint64_t v137 = v25;
  __chkstk_darwin(v25, v26);
  v133 = (char *)&v119 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = sub_100007578(&qword_100256428);
  __chkstk_darwin(v135, v28);
  uint64_t v30 = (char *)&v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_1002520A0);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  v134 = (void **)((char *)&v119 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v33, v35);
  uint64_t v37 = (char *)&v119 - v36;
  swift_beginAccess(a1 + 16, v157, 0LL, 0LL);
  uint64_t v39 = *(void *)(a1 + 16);
  unint64_t v38 = *(void *)(a1 + 24);
  swift_beginAccess(a2 + 16, v156, 0LL, 0LL);
  uint64_t v40 = *(void *)(a2 + 16);
  unint64_t v41 = *(void *)(a2 + 24);
  swift_retain(a1);
  swift_retain(a2);
  sub_1000084E8(v39, v38);
  sub_1000084E8(v40, v41);
  sub_100041318(v39, v38);
  char v43 = v42;
  sub_10000852C(v40, v41);
  sub_10000852C(v39, v38);
  if ((v43 & 1) == 0)
  {
    swift_release(a1);
    uint64_t v50 = a2;
LABEL_18:
    swift_release(v50);
    return 0LL;
  }

  uint64_t v44 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata,  v155,  0LL,  0LL);
  sub_10000FC68(v44, (uint64_t)v37, &qword_1002520A0);
  uint64_t v45 = a2
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  swift_beginAccess( a2 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata,  v154,  0LL,  0LL);
  uint64_t v46 = (uint64_t)&v30[*(int *)(v135 + 48)];
  sub_10000FC68((uint64_t)v37, (uint64_t)v30, &qword_1002520A0);
  sub_10000FC68(v45, v46, &qword_1002520A0);
  uint64_t v47 = v137;
  unint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
  uint64_t v49 = a2;
  if (v48((uint64_t)v30, 1LL, v137) != 1)
  {
    uint64_t v51 = v134;
    sub_10000FC68((uint64_t)v30, (uint64_t)v134, &qword_1002520A0);
    if (v48(v46, 1LL, v47) != 1)
    {
      unint64_t v52 = v133;
      sub_100041608(v46, (uint64_t)v133, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
      char v53 = _s18TrustedPeersHelper17EscrowInformationV8MetadataV06ClientF0V2eeoiySbAG_AGtFZ_0(v51, v52);
      sub_1000415CC((uint64_t)v52, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
      sub_100041590((uint64_t)v37, &qword_1002520A0);
      sub_1000415CC((uint64_t)v51, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
      sub_100041590((uint64_t)v30, &qword_1002520A0);
      uint64_t v49 = a2;
      if ((v53 & 1) != 0) {
        goto LABEL_10;
      }
LABEL_17:
      swift_release(a1);
      uint64_t v50 = v49;
      goto LABEL_18;
    }

    sub_100041590((uint64_t)v37, &qword_1002520A0);
    sub_1000415CC((uint64_t)v51, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
    uint64_t v49 = a2;
LABEL_8:
    sub_100041590((uint64_t)v30, &qword_100256428);
    goto LABEL_17;
  }

  sub_100041590((uint64_t)v37, &qword_1002520A0);
  if (v48(v46, 1LL, v47) != 1) {
    goto LABEL_8;
  }
  sub_100041590((uint64_t)v30, &qword_1002520A0);
LABEL_10:
  uint64_t v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs,  v153,  0LL,  0LL);
  uint64_t v55 = *v54;
  v56 = (void *)(v49
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
  swift_beginAccess( v49 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs,  v152,  0LL,  0LL);
  if (v55 != *v56) {
    goto LABEL_17;
  }
  uint64_t v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID,  v151,  0LL,  0LL);
  uint64_t v58 = *v57;
  uint64_t v59 = v57[1];
  uint64_t v60 = (void *)(v49
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
  swift_beginAccess( v49 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID,  &v150,  0LL,  0LL);
  uint64_t v61 = v60[1];
  if ((v58 != *v60 || v59 != v61) && (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, *v60, v61, 0LL) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v62 = a1
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp,  &v149,  0LL,  0LL);
  uint64_t v63 = v132;
  sub_10000FC68(v62, v132, (uint64_t *)&unk_100256D30);
  uint64_t v64 = v49;
  uint64_t v65 = v49
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  swift_beginAccess( v49 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp,  &v148,  0LL,  0LL);
  uint64_t v66 = v130;
  uint64_t v67 = v130 + *(int *)(v128 + 48);
  sub_10000FC68(v63, v130, (uint64_t *)&unk_100256D30);
  sub_10000FC68(v65, v67, (uint64_t *)&unk_100256D30);
  uint64_t v68 = v129;
  v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
  uint64_t v70 = v131;
  if (v69(v66, 1LL, v131) != 1)
  {
    uint64_t v72 = v127;
    sub_10000FC68(v66, v127, (uint64_t *)&unk_100256D30);
    if (v69(v67, 1LL, v70) != 1)
    {
      v73 = v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v126, v67, v70);
      uint64_t v74 = sub_1000077B8( &qword_100251640,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
      char v75 = dispatch thunk of static Equatable.== infix(_:_:)(v72, v73, v70, v74);
      uint64_t v76 = *(void (**)(char *, uint64_t))(v68 + 8);
      v76(v73, v70);
      sub_100041590(v132, (uint64_t *)&unk_100256D30);
      v76((char *)v72, v70);
      sub_100041590(v66, (uint64_t *)&unk_100256D30);
      if ((v75 & 1) != 0) {
        goto LABEL_24;
      }
LABEL_36:
      swift_release(a1);
      uint64_t v50 = v64;
      goto LABEL_18;
    }

    sub_100041590(v132, (uint64_t *)&unk_100256D30);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v70);
LABEL_22:
    sub_100041590(v66, &qword_100251638);
    goto LABEL_36;
  }

  sub_100041590(v63, (uint64_t *)&unk_100256D30);
  if (v69(v67, 1LL, v70) != 1) {
    goto LABEL_22;
  }
  sub_100041590(v66, (uint64_t *)&unk_100256D30);
LABEL_24:
  v77 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki,  &v147,  0LL,  0LL);
  uint64_t v79 = *v77;
  unint64_t v78 = v77[1];
  uint64_t v80 = (uint64_t *)(v64
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki);
  swift_beginAccess( v64 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki,  &v146,  0LL,  0LL);
  uint64_t v82 = *v80;
  unint64_t v81 = v80[1];
  sub_1000084E8(v79, v78);
  sub_1000084E8(v82, v81);
  sub_100041318(v79, v78);
  char v84 = v83;
  sub_10000852C(v82, v81);
  sub_10000852C(v79, v78);
  if ((v84 & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v85 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo,  &v145,  0LL,  0LL);
  uint64_t v87 = *v85;
  unint64_t v86 = v85[1];
  v88 = (uint64_t *)(v64
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo);
  swift_beginAccess( v64 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo,  &v144,  0LL,  0LL);
  uint64_t v90 = *v88;
  unint64_t v89 = v88[1];
  sub_1000084E8(v87, v86);
  sub_1000084E8(v90, v89);
  sub_100041318(v87, v86);
  char v92 = v91;
  sub_10000852C(v90, v89);
  sub_10000852C(v87, v86);
  if ((v92 & 1) == 0) {
    goto LABEL_36;
  }
  v93 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial,  &v143,  0LL,  0LL);
  uint64_t v94 = *v93;
  uint64_t v95 = v93[1];
  v96 = (void *)(v64
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
  swift_beginAccess( v64 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial,  &v142,  0LL,  0LL);
  uint64_t v97 = v96[1];
  if ((v94 != *v96 || v95 != v97) && (_stringCompareWithSmolCheck(_:_:expecting:)(v94, v95, *v96, v97, 0LL) & 1) == 0) {
    goto LABEL_36;
  }
  v98 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build,  &v141,  0LL,  0LL);
  uint64_t v99 = *v98;
  uint64_t v100 = v98[1];
  v101 = (void *)(v64
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
  swift_beginAccess( v64 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build,  &v140,  0LL,  0LL);
  uint64_t v102 = v101[1];
  if ((v99 != *v101 || v100 != v102)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v99, v100, *v101, v102, 0LL) & 1) == 0)
  {
    goto LABEL_36;
  }

  uint64_t v103 = a1
       + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  swift_beginAccess( a1 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration,  &v139,  0LL,  0LL);
  uint64_t v104 = v125;
  sub_10000FC68(v103, v125, &qword_1002520E8);
  uint64_t v105 = v64
       + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  swift_beginAccess( v64 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration,  &v138,  0LL,  0LL);
  uint64_t v106 = v124;
  uint64_t v107 = v124 + *(int *)(v121 + 48);
  sub_10000FC68(v104, v124, &qword_1002520E8);
  sub_10000FC68(v105, v107, &qword_1002520E8);
  uint64_t v108 = v123;
  v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  if (v109(v106, 1LL, v123) != 1)
  {
    v110 = v120;
    sub_10000FC68(v106, (uint64_t)v120, &qword_1002520E8);
    if (v109(v107, 1LL, v108) == 1)
    {
      swift_release(a1);
      swift_release(v64);
      sub_100041590(v125, &qword_1002520E8);
      sub_1000415CC((uint64_t)v110, type metadata accessor for PasscodeGeneration);
      goto LABEL_40;
    }

    v113 = v119;
    sub_100041608(v107, (uint64_t)v119, type metadata accessor for PasscodeGeneration);
    if (*v110 != *v113)
    {
      swift_release(a1);
      swift_release(v64);
      sub_1000415CC((uint64_t)v113, type metadata accessor for PasscodeGeneration);
      sub_100041590(v125, &qword_1002520E8);
      sub_1000415CC((uint64_t)v110, type metadata accessor for PasscodeGeneration);
      uint64_t v112 = v106;
      v111 = &qword_1002520E8;
      goto LABEL_41;
    }

    uint64_t v114 = *(int *)(v108 + 20);
    v115 = (char *)v110 + v114;
    v116 = (char *)v113 + v114;
    uint64_t v117 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v118 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v115) = dispatch thunk of static Equatable.== infix(_:_:)(v115, v116, v117, v118);
    swift_release(a1);
    swift_release(v64);
    sub_1000415CC((uint64_t)v113, type metadata accessor for PasscodeGeneration);
    sub_100041590(v125, &qword_1002520E8);
    sub_1000415CC((uint64_t)v110, type metadata accessor for PasscodeGeneration);
    sub_100041590(v106, &qword_1002520E8);
    return (v115 & 1) != 0;
  }

  swift_release(a1);
  swift_release(v64);
  sub_100041590(v104, &qword_1002520E8);
  if (v109(v107, 1LL, v108) != 1)
  {
LABEL_40:
    v111 = &qword_100256420;
    uint64_t v112 = v106;
LABEL_41:
    sub_100041590(v112, v111);
    return 0LL;
  }

  sub_100041590(v106, &qword_1002520E8);
  return 1LL;
}

Swift::Int EscrowInformation.Metadata.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for EscrowInformation.Metadata,  &qword_100252338,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
}

uint64_t sub_1000A0CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0D0C(a1, &qword_100250E50, &qword_100251ED8, (uint64_t)sub_10009EA7C, a2);
}

uint64_t sub_1000A0D0C@<X0>( uint64_t a1@<X0>, void *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(int *)(a1 + 20);
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  uint64_t v11 = *a3;
  *(void *)(a5 + v10) = *a3;
  return swift_retain(v11);
}

uint64_t sub_1000A0D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowInformation.Metadata.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A0D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowInformation.Metadata.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A0D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256208,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A0DEC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E48,  (uint64_t)static EscrowInformation.Metadata._protobuf_nameMap,  (uint64_t)sub_10009E724,  a1);
}

uint64_t sub_1000A0E08(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252988,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A0E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252988,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_1000A0E98()
{
  v0._countAndFlagsBits = 0x4D746E65696C432ELL;
  v0._object = (void *)0xEF61746164617465LL;
  String.append(_:)(v0);
  static EscrowInformation.Metadata.ClientMetadata.protoMessageName = 0xD00000000000001ALL;
  unk_1002588D0 = 0x80000001001F6DD0LL;
}

uint64_t *EscrowInformation.Metadata.ClientMetadata.protoMessageName.unsafeMutableAddressor()
{
  if (qword_100250E58 != -1) {
    swift_once(&qword_100250E58, sub_1000A0E98);
  }
  return &static EscrowInformation.Metadata.ClientMetadata.protoMessageName;
}

uint64_t static EscrowInformation.Metadata.ClientMetadata.protoMessageName.getter()
{
  if (qword_100250E58 != -1) {
    swift_once(&qword_100250E58, sub_1000A0E98);
  }
  uint64_t v0 = static EscrowInformation.Metadata.ClientMetadata.protoMessageName;
  swift_bridgeObjectRetain(unk_1002588D0);
  return v0;
}

uint64_t sub_1000A0FA8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static EscrowInformation.Metadata.ClientMetadata._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static EscrowInformation.Metadata.ClientMetadata._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v33 = swift_allocObject(v1, v6 + 12 * v4, v5 | 7);
  *(_OWORD *)(v33 + 16) = xmmword_1001DECB0;
  uint64_t v7 = v33 + v6;
  uint64_t v8 = v33 + v6 + *(int *)(v2 + 48);
  *(void *)(v33 + v6) = 1LL;
  *(void *)uint64_t v8 = "secure_backup_metadata_timestamp";
  *(void *)(v8 + 8) = 32LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "secure_backup_numeric_passphrase_length";
  *(void *)(v12 + 8) = 39LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "secure_backup_uses_complex_passphrase";
  *((void *)v14 + 1) = 37LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "secure_backup_uses_numeric_passphrase";
  *((void *)v16 + 1) = 37LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "device_color";
  *((void *)v18 + 1) = 12LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "device_enclosure_color";
  *((void *)v20 + 1) = 22LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "device_mid";
  *((void *)v22 + 1) = 10LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "device_model";
  *((void *)v24 + 1) = 12LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "device_model_class";
  *(void *)(v25 + 8) = 18LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *uint64_t v26 = 10LL;
  *(void *)uint64_t v27 = "device_model_version";
  *((void *)v27 + 1) = 20LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "device_name";
  *((void *)v29 + 1) = 11LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *uint64_t v30 = 12LL;
  *(void *)uint64_t v31 = "device_platform";
  *((void *)v31 + 1) = 15LL;
  v31[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v33);
}

uint64_t EscrowInformation.Metadata.ClientMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E60,  (uint64_t)static EscrowInformation.Metadata.ClientMetadata._protobuf_nameMap,  (uint64_t)sub_1000A0FA8);
}

uint64_t static EscrowInformation.Metadata.ClientMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E60,  (uint64_t)static EscrowInformation.Metadata.ClientMetadata._protobuf_nameMap,  (uint64_t)sub_1000A0FA8,  a1);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_1000A14B0(a1, v5, a2, a3);
          break;
        case 2LL:
          uint64_t v12 = v5;
          goto LABEL_20;
        case 3LL:
          uint64_t v12 = v5 + 8;
          goto LABEL_20;
        case 4LL:
          uint64_t v12 = v5 + 16;
          goto LABEL_20;
        case 5LL:
          uint64_t v11 = v5 + 24;
          goto LABEL_5;
        case 6LL:
          uint64_t v11 = v5 + 40;
          goto LABEL_5;
        case 7LL:
          uint64_t v11 = v5 + 56;
          goto LABEL_5;
        case 8LL:
          uint64_t v11 = v5 + 72;
          goto LABEL_5;
        case 9LL:
          uint64_t v11 = v5 + 88;
          goto LABEL_5;
        case 10LL:
          uint64_t v11 = v5 + 104;
          goto LABEL_5;
        case 11LL:
          uint64_t v11 = v5 + 120;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v11, a2, a3);
          break;
        case 12LL:
          uint64_t v12 = v5 + 136;
LABEL_20:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v12, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000A14B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + *(int *)(type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL) + 64);
  uint64_t v7 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v8 = sub_1000077B8( &qword_100256418,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v6, v7, v8, a3, a4);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000A17F0((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v3, 2LL, a2, a3);
    }
    uint64_t v9 = v3[1];
    if (v9) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v9, 3LL, a2, a3);
    }
    uint64_t v10 = v3[2];
    if (v10) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v10, 4LL, a2, a3);
    }
    uint64_t v11 = v3[3];
    unint64_t v12 = v3[4];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v13) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12);
    }
    uint64_t v14 = v3[5];
    unint64_t v15 = v3[6];
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000LL) == 0) {
      uint64_t v16 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (v16) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v14, v15);
    }
    uint64_t v17 = v3[7];
    unint64_t v18 = v3[8];
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v19) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v17, v18);
    }
    uint64_t v20 = v3[9];
    unint64_t v21 = v3[10];
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000LL) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v22) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v20, v21);
    }
    uint64_t v23 = v3[11];
    unint64_t v24 = v3[12];
    uint64_t v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000LL) == 0) {
      uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
    }
    if (v25) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v23, v24);
    }
    uint64_t v26 = v3[13];
    unint64_t v27 = v3[14];
    uint64_t v28 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000LL) == 0) {
      uint64_t v28 = v26 & 0xFFFFFFFFFFFFLL;
    }
    if (v28) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v26, v27);
    }
    uint64_t v29 = v3[15];
    unint64_t v30 = v3[16];
    uint64_t v31 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000LL) == 0) {
      uint64_t v31 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (v31) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v29, v30);
    }
    uint64_t v32 = v3[17];
    if (v32) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v32, 12LL, a2, a3);
    }
    type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000A17F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 64), (uint64_t)v9, (uint64_t *)&unk_100256D30);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v17 = sub_1000077B8( &qword_100256418,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

Swift::Int EscrowInformation.Metadata.ClientMetadata.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  &qword_100252340,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_1000A1988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0xE000000000000000LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0xE000000000000000LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0xE000000000000000LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0xE000000000000000LL;
  *(void *)(a2 + 88) = 0LL;
  *(void *)(a2 + 96) = 0xE000000000000000LL;
  *(void *)(a2 + 104) = 0LL;
  *(void *)(a2 + 112) = 0xE000000000000000LL;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 128) = 0xE000000000000000LL;
  *(void *)(a2 + 136) = 0LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(a1 + 64);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000A1A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 60);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000A1A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 60);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_1000A1A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowInformation.Metadata.ClientMetadata.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A1A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowInformation.Metadata.ClientMetadata.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A1AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256200,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A1AFC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E60,  (uint64_t)static EscrowInformation.Metadata.ClientMetadata._protobuf_nameMap,  (uint64_t)sub_1000A0FA8,  a1);
}

uint64_t sub_1000A1B18(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002529A0,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002529A0,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
  return Message.hash(into:)(a1, a2, v4);
}

const char *PCSService.protoMessageName.unsafeMutableAddressor()
{
  return "PCSService";
}

uint64_t static PCSService.protoMessageName.getter()
{
  return 0x6976726553534350LL;
}

uint64_t sub_1000A1BD0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static PCSService._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static PCSService._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "service_identifier";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "public_key";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "zone";
  *(void *)(v14 + 8) = 4LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t PCSService._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250E68, (uint64_t)static PCSService._protobuf_nameMap, (uint64_t)sub_1000A1BD0);
}

uint64_t static PCSService._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250E68, (uint64_t)static PCSService._protobuf_nameMap, (uint64_t)sub_1000A1BD0, a1);
}

uint64_t PCSService.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + 24, a2, a3);
          break;
        case 2LL:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + 8, a2, a3);
          break;
        case 1LL:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3, a2, a3);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t PCSService.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  if (!(_DWORD)v5
    || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v5, 1LL, a2, a3), !v4))
  {
    __asm { BR              X10 }
  }

  return result;
}

Swift::Int PCSService.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for PCSService,  &qword_100252348,  (uint64_t)&protocol conformance descriptor for PCSService);
}

uint64_t sub_1000A1FBC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1001DE6F0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_1000A1FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000A2030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_1000A2070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PCSService.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A2084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PCSService.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A2098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561F8,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A20E8@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250E68, (uint64_t)static PCSService._protobuf_nameMap, (uint64_t)sub_1000A1BD0, a1);
}

uint64_t sub_1000A2104(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252350,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A2144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252350,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
  return Message.hash(into:)(a1, a2, v4);
}

void *DirectPCSIdentityFetchRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static DirectPCSIdentityFetchRequest.protoMessageName;
}

unint64_t static DirectPCSIdentityFetchRequest.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000A21BC(uint64_t a1)
{
  return sub_1000A21D4(a1, static DirectPCSIdentityFetchRequest._protobuf_nameMap, (uint64_t)"pcs_services", 12LL);
}

uint64_t sub_1000A21D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v7, a2);
  sub_100006BAC(v7, (uint64_t)a2);
  uint64_t v8 = sub_100007578(&qword_1002563F0);
  uint64_t v9 = sub_100007578(&qword_1002563F8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + 3 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001DE9D0;
  uint64_t v15 = (void *)(v14 + v13);
  uint64_t v16 = v14 + v13 + *(int *)(v9 + 48);
  *uint64_t v15 = 1LL;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = a4;
  *(_BYTE *)(v16 + 16) = 2;
  uint64_t v17 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v18 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v19 = *(void (**)(void))(*(void *)(v18 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v17, v18);
  uint64_t v20 = (char *)v15 + v11 + *(int *)(v9 + 48);
  *(void *)((char *)v15 + v11) = 2LL;
  *(void *)uint64_t v20 = "metrics";
  *((void *)v20 + 1) = 7LL;
  v20[16] = 2;
  v19();
  uint64_t v21 = (uint64_t)v15 + 2 * v11 + *(int *)(v9 + 48);
  *(void *)((char *)v15 + 2 * v11) = 3LL;
  *(void *)uint64_t v21 = "account_info";
  *(void *)(v21 + 8) = 12LL;
  *(_BYTE *)(v21 + 16) = 2;
  v19();
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t DirectPCSIdentityFetchRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E70,  (uint64_t)static DirectPCSIdentityFetchRequest._protobuf_nameMap,  (uint64_t)sub_1000A21BC);
}

uint64_t static DirectPCSIdentityFetchRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E70,  (uint64_t)static DirectPCSIdentityFetchRequest._protobuf_nameMap,  (uint64_t)sub_1000A21BC,  a1);
}

uint64_t DirectPCSIdentityFetchRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A23D4( a1,  a2,  a3,  type metadata accessor for PCSService,  &qword_100252350,  (uint64_t)&protocol conformance descriptor for PCSService,  type metadata accessor for DirectPCSIdentityFetchRequest);
}

uint64_t sub_1000A23D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v13 = v7;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    while ((v18 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          sub_1000A5148( a1,  v13,  a2,  a3,  a7,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          break;
        case 2LL:
          sub_1000A50A4( a1,  v13,  a2,  a3,  a7,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
        case 1LL:
          uint64_t v20 = a4(0LL);
          uint64_t v19 = sub_1000077B8(a5, a4, a6);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v13, v20, v19, a2, a3);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t DirectPCSIdentityFetchRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)v3;
  if (!*(void *)(*(void *)v3 + 16LL)
    || (uint64_t v9 = type metadata accessor for PCSService(0LL),
        v10 = sub_1000077B8( &qword_100252350,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1LL, v9, v10, a2, a3),  !v4))
  {
    uint64_t result = sub_1000A2678(v3, a1, a2, a3);
    if (!v4)
    {
      sub_1000A27EC(v3, a1, a2, a3);
      type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000A2678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  sub_10000FC68(a1 + *(int *)(Request + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_1000A27EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  sub_10000FC68(a1 + *(int *)(Request + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

uint64_t static DirectPCSIdentityFetchRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000AAC5C(a1, a2, (uint64_t)sub_10003DCA4, (char *)type metadata accessor for DirectPCSIdentityFetchRequest) & 1;
}

Swift::Int DirectPCSIdentityFetchRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for DirectPCSIdentityFetchRequest,  &qword_100252358,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
}

uint64_t sub_1000A29A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DirectPCSIdentityFetchRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A29B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DirectPCSIdentityFetchRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A29CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561F0,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A2A1C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E70,  (uint64_t)static DirectPCSIdentityFetchRequest._protobuf_nameMap,  (uint64_t)sub_1000A21BC,  a1);
}

uint64_t sub_1000A2A38(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256F20,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A2A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256F20,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *DirectPCSIdentity.protoMessageName.unsafeMutableAddressor()
{
  return &static DirectPCSIdentity.protoMessageName;
}

unint64_t static DirectPCSIdentity.protoMessageName.getter()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1000A2AF0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static DirectPCSIdentity._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static DirectPCSIdentity._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "item";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "pcs_service";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t DirectPCSIdentity._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250E78, (uint64_t)static DirectPCSIdentity._protobuf_nameMap, (uint64_t)sub_1000A2AF0);
}

uint64_t static DirectPCSIdentity._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E78,  (uint64_t)static DirectPCSIdentity._protobuf_nameMap,  (uint64_t)sub_1000A2AF0,  a1);
}

uint64_t DirectPCSIdentity.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A40E0( a1,  a2,  a3,  type metadata accessor for DirectPCSIdentity,  type metadata accessor for PCSService,  &qword_100252350,  (uint64_t)&protocol conformance descriptor for PCSService);
}

uint64_t DirectPCSIdentity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A2CD8( a1,  a2,  a3,  type metadata accessor for DirectPCSIdentity,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000A2D4C);
}

uint64_t sub_1000A2CD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1000A429C(v5, a1, a2, a3, a4);
  if (!v6)
  {
    a5(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000A2D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_1002517F8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PCSService(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DirectPCSIdentity(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, &qword_1002517F8);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for PCSService);
  uint64_t v17 = sub_1000077B8( &qword_100252350,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for PCSService);
}

Swift::Int DirectPCSIdentity.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for DirectPCSIdentity,  &qword_100252360,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
}

uint64_t sub_1000A2EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A2EF4( a1,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport,  type metadata accessor for PCSService,  a2);
}

uint64_t sub_1000A2EF4@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = a4 + *(int *)(a1 + 20);
  uint64_t v9 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a4 + *(int *)(a1 + 24);
  uint64_t v11 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_1000A2F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DirectPCSIdentity.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A2F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DirectPCSIdentity.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A2FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561E8,  type metadata accessor for DirectPCSIdentity,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A2FFC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E78,  (uint64_t)static DirectPCSIdentity._protobuf_nameMap,  (uint64_t)sub_1000A2AF0,  a1);
}

uint64_t sub_1000A3018(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252368,  type metadata accessor for DirectPCSIdentity,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252368,  type metadata accessor for DirectPCSIdentity,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
  return Message.hash(into:)(a1, a2, v4);
}

void *DirectPCSIdentityFetchResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static DirectPCSIdentityFetchResponse.protoMessageName;
}

unint64_t static DirectPCSIdentityFetchResponse.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000A30D0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static DirectPCSIdentityFetchResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static DirectPCSIdentityFetchResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "items";
  *(void *)(v9 + 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "synckeys";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t DirectPCSIdentityFetchResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E80,  (uint64_t)static DirectPCSIdentityFetchResponse._protobuf_nameMap,  (uint64_t)sub_1000A30D0);
}

uint64_t static DirectPCSIdentityFetchResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E80,  (uint64_t)static DirectPCSIdentityFetchResponse._protobuf_nameMap,  (uint64_t)sub_1000A30D0,  a1);
}

uint64_t DirectPCSIdentityFetchResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A48C4( a1,  a2,  a3,  type metadata accessor for DirectPCSIdentity,  &qword_100252368,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
}

uint64_t DirectPCSIdentityFetchResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4A10( a1,  a2,  a3,  type metadata accessor for DirectPCSIdentity,  &qword_100252368,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity,  (void (*)(void))type metadata accessor for DirectPCSIdentityFetchResponse);
}

uint64_t static DirectPCSIdentityFetchResponse.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000AA5E8(a1, a2, sub_10003DC90, type metadata accessor for DirectPCSIdentityFetchResponse) & 1;
}

Swift::Int DirectPCSIdentityFetchResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for DirectPCSIdentityFetchResponse,  &qword_100252370,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
}

uint64_t sub_1000A32FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DirectPCSIdentityFetchResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A3310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DirectPCSIdentityFetchResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A3324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561E0,  type metadata accessor for DirectPCSIdentityFetchResponse,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A3374@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E80,  (uint64_t)static DirectPCSIdentityFetchResponse._protobuf_nameMap,  (uint64_t)sub_1000A30D0,  a1);
}

uint64_t sub_1000A3390(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002529E8,  type metadata accessor for DirectPCSIdentityFetchResponse,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A33D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002529E8,  type metadata accessor for DirectPCSIdentityFetchResponse,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *CurrentCKKSItemSpecifier.protoMessageName.unsafeMutableAddressor()
{
  return &static CurrentCKKSItemSpecifier.protoMessageName;
}

unint64_t static CurrentCKKSItemSpecifier.protoMessageName.getter()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000A3448()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static CurrentCKKSItemSpecifier._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static CurrentCKKSItemSpecifier._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "zone";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "item_pointer_name";
  *((void *)v13 + 1) = 17LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t CurrentCKKSItemSpecifier._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E88,  (uint64_t)static CurrentCKKSItemSpecifier._protobuf_nameMap,  (uint64_t)sub_1000A3448);
}

uint64_t static CurrentCKKSItemSpecifier._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E88,  (uint64_t)static CurrentCKKSItemSpecifier._protobuf_nameMap,  (uint64_t)sub_1000A3448,  a1);
}

uint64_t sub_1000A35D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while (1)
    {
      if ((v10 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v11 = v4;
        goto LABEL_5;
      }

uint64_t CurrentCKKSItemSpecifier.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A3688(a1, a2, a3, (void (*)(void))type metadata accessor for CurrentCKKSItemSpecifier);
}

uint64_t sub_1000A3688(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v10 = v4[1];
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    unint64_t v13 = v4[3];
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v4[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
    {
      a4(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t static CurrentCKKSItemSpecifier.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000AD400(a1, a2, type metadata accessor for CurrentCKKSItemSpecifier) & 1;
}

Swift::Int CurrentCKKSItemSpecifier.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for CurrentCKKSItemSpecifier,  &qword_100252378,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
}

uint64_t sub_1000A37A8@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_1000A37D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentCKKSItemSpecifier.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A37E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561D8,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A3834@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E88,  (uint64_t)static CurrentCKKSItemSpecifier._protobuf_nameMap,  (uint64_t)sub_1000A3448,  a1);
}

uint64_t sub_1000A3850(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252380,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252380,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
  return Message.hash(into:)(a1, a2, v4);
}

void *CurrentItemFetchRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static CurrentItemFetchRequest.protoMessageName;
}

unint64_t static CurrentItemFetchRequest.protoMessageName.getter()
{
  return 0xD000000000000017LL;
}

uint64_t sub_1000A3908(uint64_t a1)
{
  return sub_1000A21D4(a1, static CurrentItemFetchRequest._protobuf_nameMap, (uint64_t)"current_items", 13LL);
}

uint64_t CurrentItemFetchRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E90,  (uint64_t)static CurrentItemFetchRequest._protobuf_nameMap,  (uint64_t)sub_1000A3908);
}

uint64_t static CurrentItemFetchRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E90,  (uint64_t)static CurrentItemFetchRequest._protobuf_nameMap,  (uint64_t)sub_1000A3908,  a1);
}

uint64_t CurrentItemFetchRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A23D4( a1,  a2,  a3,  type metadata accessor for CurrentCKKSItemSpecifier,  &qword_100252380,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier,  type metadata accessor for CurrentItemFetchRequest);
}

uint64_t CurrentItemFetchRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)v3;
  if (!*(void *)(*(void *)v3 + 16LL)
    || (uint64_t v9 = type metadata accessor for CurrentCKKSItemSpecifier(0LL),
        v10 = sub_1000077B8( &qword_100252380,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1LL, v9, v10, a2, a3),  !v4))
  {
    uint64_t result = sub_1000A3A9C(v3, a1, a2, a3);
    if (!v4)
    {
      sub_1000A3C10(v3, a1, a2, a3);
      type metadata accessor for CurrentItemFetchRequest(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000A3A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  sub_10000FC68(a1 + *(int *)(Request + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_1000A3C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  sub_10000FC68(a1 + *(int *)(Request + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

uint64_t static CurrentItemFetchRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000AAC5C(a1, a2, (uint64_t)sub_10003F364, (char *)type metadata accessor for CurrentItemFetchRequest) & 1;
}

Swift::Int CurrentItemFetchRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for CurrentItemFetchRequest,  &qword_100252388,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
}

uint64_t sub_1000A3DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentItemFetchRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A3DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentItemFetchRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A3DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561D0,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A3E40@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E90,  (uint64_t)static CurrentItemFetchRequest._protobuf_nameMap,  (uint64_t)sub_1000A3908,  a1);
}

uint64_t sub_1000A3E5C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256F40,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256F40,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *CurrentCKKSItem.protoMessageName.unsafeMutableAddressor()
{
  return &static CurrentCKKSItem.protoMessageName;
}

uint64_t static CurrentCKKSItem.protoMessageName.getter()
{
  return 0x43746E6572727543LL;
}

uint64_t sub_1000A3F1C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static CurrentCKKSItem._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static CurrentCKKSItem._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "item";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "item_specifier";
  *((void *)v13 + 1) = 14LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t CurrentCKKSItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250E98, (uint64_t)static CurrentCKKSItem._protobuf_nameMap, (uint64_t)sub_1000A3F1C);
}

uint64_t static CurrentCKKSItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250E98, (uint64_t)static CurrentCKKSItem._protobuf_nameMap, (uint64_t)sub_1000A3F1C, a1);
}

uint64_t CurrentCKKSItem.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A40E0( a1,  a2,  a3,  type metadata accessor for CurrentCKKSItem,  type metadata accessor for CurrentCKKSItemSpecifier,  &qword_100252380,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
}

uint64_t sub_1000A40E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v13 = v7;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    while ((v18 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1000A50A4(a1, v13, a2, a3, a4, a5, a6, a7);
      }

      else if (result == 1)
      {
        sub_1000A41D4( a1,  v13,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  &qword_1002521C8,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000A41D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 20);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t CurrentCKKSItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A2CD8( a1,  a2,  a3,  type metadata accessor for CurrentCKKSItem,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000A441C);
}

uint64_t sub_1000A429C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v21 = a4;
  uint64_t v20 = a3;
  uint64_t v7 = sub_100007578(&qword_1002517E0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a5(0LL);
  sub_10000FC68(a1 + *(int *)(v16 + 20), (uint64_t)v10, &qword_1002517E0);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
  uint64_t v18 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 1LL, v11, v18, v20, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1000A441C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for CurrentCKKSItem(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t *)&unk_100256F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for CurrentCKKSItemSpecifier);
  uint64_t v17 = sub_1000077B8( &qword_100252380,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for CurrentCKKSItemSpecifier);
}

Swift::Int CurrentCKKSItem.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for CurrentCKKSItem,  &qword_100252390,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
}

uint64_t sub_1000A45B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A2EF4( a1,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport,  type metadata accessor for CurrentCKKSItemSpecifier,  a2);
}

uint64_t sub_1000A45C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentCKKSItem.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A45D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentCKKSItem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A45EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561C8,  type metadata accessor for CurrentCKKSItem,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A463C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250E98, (uint64_t)static CurrentCKKSItem._protobuf_nameMap, (uint64_t)sub_1000A3F1C, a1);
}

uint64_t sub_1000A4658(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252398,  type metadata accessor for CurrentCKKSItem,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A4698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252398,  type metadata accessor for CurrentCKKSItem,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
  return Message.hash(into:)(a1, a2, v4);
}

void *CurrentItemFetchResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static CurrentItemFetchResponse.protoMessageName;
}

unint64_t static CurrentItemFetchResponse.protoMessageName.getter()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000A4710()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static CurrentItemFetchResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static CurrentItemFetchResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "items";
  *(void *)(v9 + 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "synckeys";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t CurrentItemFetchResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250EA0,  (uint64_t)static CurrentItemFetchResponse._protobuf_nameMap,  (uint64_t)sub_1000A4710);
}

uint64_t static CurrentItemFetchResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250EA0,  (uint64_t)static CurrentItemFetchResponse._protobuf_nameMap,  (uint64_t)sub_1000A4710,  a1);
}

uint64_t CurrentItemFetchResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A48C4( a1,  a2,  a3,  type metadata accessor for CurrentCKKSItem,  &qword_100252398,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
}

uint64_t sub_1000A48C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v7)
  {
    while (1)
    {
      if ((v14 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v15 = a4(0LL);
        uint64_t v16 = sub_1000077B8(a5, a4, a6);
        uint64_t v17 = v6;
        goto LABEL_5;
      }

uint64_t CurrentItemFetchResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4A10( a1,  a2,  a3,  type metadata accessor for CurrentCKKSItem,  &qword_100252398,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem,  (void (*)(void))type metadata accessor for CurrentItemFetchResponse);
}

uint64_t sub_1000A4A10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v9 = v7;
  uint64_t v10 = a3;
  uint64_t v13 = *v9;
  if (*(void *)(*v9 + 16LL))
  {
    uint64_t v28 = v9;
    uint64_t v18 = a4(0LL);
    uint64_t v19 = sub_1000077B8(a5, a4, a6);
    uint64_t v20 = v18;
    uint64_t v10 = a3;
    uint64_t v9 = v28;
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v13, 1LL, v20, v19, a2, v10);
    uint64_t v22 = a1;
    if (v8) {
      return result;
    }
  }

  else
  {
    uint64_t v22 = a1;
  }

  uint64_t v23 = v9[1];
  if (!*(void *)(v23 + 16)
    || (uint64_t v24 = v10,
        uint64_t v25 = type metadata accessor for Ckcode_RecordTransport(0LL),
        v26 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport),  v27 = v25,  v10 = v24,  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v23, 2LL, v27, v26, a2, v24),  !v8))
  {
    a7(0LL);
    return UnknownStorage.traverse<A>(visitor:)(v22, a2, v10);
  }

  return result;
}

uint64_t static CurrentItemFetchResponse.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000AA5E8(a1, a2, sub_10003F350, type metadata accessor for CurrentItemFetchResponse) & 1;
}

Swift::Int CurrentItemFetchResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for CurrentItemFetchResponse,  &qword_1002523A0,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
}

uint64_t sub_1000A4BB8@<X0>(void *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
  a1[1] = _swiftEmptyArrayStorage;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_1000A4BE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000A4C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_1000A4C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentItemFetchResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A4C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentItemFetchResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A4C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561C0,  type metadata accessor for CurrentItemFetchResponse,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A4CD8@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250EA0,  (uint64_t)static CurrentItemFetchResponse._protobuf_nameMap,  (uint64_t)sub_1000A4710,  a1);
}

uint64_t sub_1000A4CF4(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252A30,  type metadata accessor for CurrentItemFetchResponse,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A4D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252A30,  type metadata accessor for CurrentItemFetchResponse,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *RemoveUnreadableCKServerDataRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static RemoveUnreadableCKServerDataRequest.protoMessageName;
}

unint64_t static RemoveUnreadableCKServerDataRequest.protoMessageName.getter()
{
  return 0xD000000000000023LL;
}

uint64_t sub_1000A4DAC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static RemoveUnreadableCKServerDataRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static RemoveUnreadableCKServerDataRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "isGuitarfish";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "metrics";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "account_info";
  *(void *)(v14 + 8) = 12LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t RemoveUnreadableCKServerDataRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250EA8,  (uint64_t)static RemoveUnreadableCKServerDataRequest._protobuf_nameMap,  (uint64_t)sub_1000A4DAC);
}

uint64_t static RemoveUnreadableCKServerDataRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250EA8,  (uint64_t)static RemoveUnreadableCKServerDataRequest._protobuf_nameMap,  (uint64_t)sub_1000A4DAC,  a1);
}

uint64_t RemoveUnreadableCKServerDataRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          break;
        case 2LL:
          sub_1000A50A4( a1,  v5,  a2,  a3,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
        case 1LL:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v5, a2, a3);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000A50A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 24);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t sub_1000A5148( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 28);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t RemoveUnreadableCKServerDataRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*v3 != 1
    || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 1LL, a2, a3), !v4))
  {
    uint64_t result = sub_1000A52C4((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      sub_1000A5438((uint64_t)v3, a1, a2, a3);
      type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000A52C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_1000A5438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int RemoveUnreadableCKServerDataRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for RemoveUnreadableCKServerDataRequest,  &qword_1002523A8,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
}

uint64_t sub_1000A55CC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = &a2[*(int *)(a1 + 24)];
  uint64_t v5 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = &a2[*(int *)(a1 + 28)];
  uint64_t v7 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000A5658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000A5698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_1000A56D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoveUnreadableCKServerDataRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A56EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoveUnreadableCKServerDataRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A5700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561B8,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A5750@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250EA8,  (uint64_t)static RemoveUnreadableCKServerDataRequest._protobuf_nameMap,  (uint64_t)sub_1000A4DAC,  a1);
}

uint64_t sub_1000A576C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252A48,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A57AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252A48,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *RemoveUnreadableCKServerDataResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static RemoveUnreadableCKServerDataResponse.protoMessageName;
}

unint64_t static RemoveUnreadableCKServerDataResponse.protoMessageName.getter()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000A5824(uint64_t a1)
{
  return sub_1000A5830(a1, static RemoveUnreadableCKServerDataResponse._protobuf_nameMap);
}

uint64_t sub_1000A5830(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v3, a2);
  sub_100006BAC(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t RemoveUnreadableCKServerDataResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250EB0,  (uint64_t)static RemoveUnreadableCKServerDataResponse._protobuf_nameMap,  (uint64_t)sub_1000A5824);
}

uint64_t static RemoveUnreadableCKServerDataResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250EB0,  (uint64_t)static RemoveUnreadableCKServerDataResponse._protobuf_nameMap,  (uint64_t)sub_1000A5824,  a1);
}

uint64_t sub_1000A58AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  while (!v3 && (v7 & 1) == 0);
  return result;
}

uint64_t _s18TrustedPeersHelper36RemoveUnreadableCKServerDataResponseV2eeoiySbAC_ACtFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v17 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13((char *)&v17 - v11, a1, v4);
  v13(v9, a2, v4);
  uint64_t v14 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v14);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v9, v4);
  v15(v12, v4);
  return a2 & 1;
}

Swift::Int RemoveUnreadableCKServerDataResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for RemoveUnreadableCKServerDataResponse,  &qword_1002523B0,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
}

Swift::Int sub_1000A5A14(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1(0LL);
  uint64_t v7 = sub_1000077B8(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_1000A5A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002561B0,  type metadata accessor for RemoveUnreadableCKServerDataResponse,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A5AE0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250EB0,  (uint64_t)static RemoveUnreadableCKServerDataResponse._protobuf_nameMap,  (uint64_t)sub_1000A5824,  a1);
}

uint64_t sub_1000A5AFC(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252A60,  type metadata accessor for RemoveUnreadableCKServerDataResponse,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000A5B3C(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t sub_1000A5B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252A60,  type metadata accessor for RemoveUnreadableCKServerDataResponse,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000A5BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

uint64_t sub_1000A5C30(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for ViewKeys,  (uint64_t (*)(uint64_t, uint64_t))sub_100081DA0);
}

uint64_t _s18TrustedPeersHelper35RemoveUnreadableCKServerDataRequestV2eeoiySbAC_ACtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v106 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v102 = *(void *)(v106 - 8);
  uint64_t v5 = __chkstk_darwin(v106, v4);
  v101 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v100 = (char *)&v92 - v8;
  uint64_t v103 = type metadata accessor for AccountInfo(0LL);
  uint64_t v105 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v9);
  uint64_t v99 = (_DWORD *)((char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v104 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v104, v11);
  uint64_t v13 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100251F50);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v92 - v21;
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v92 - v24;
  uint64_t v26 = type metadata accessor for Metrics(0LL);
  uint64_t v107 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v30, v31);
  uint64_t v33 = (char *)&v92 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_100007578(&qword_100257000);
  uint64_t v36 = __chkstk_darwin(v34, v35);
  uint64_t v38 = __chkstk_darwin(v36, v37);
  __chkstk_darwin(v38, v39);
  if (*a1 != *a2) {
    goto LABEL_27;
  }
  uint64_t v94 = v29;
  uint64_t v95 = v25;
  uint64_t v97 = v22;
  v98 = (void *)v41;
  v93 = v18;
  v96 = v13;
  char v43 = (char *)&v92 - v40;
  uint64_t v44 = v42;
  uint64_t v45 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  uint64_t v46 = a1;
  sub_10000FC68((uint64_t)&a1[*(int *)(v45 + 24)], (uint64_t)v43, &qword_100257000);
  uint64_t v47 = a2;
  sub_10000FC68((uint64_t)&a2[*(int *)(v45 + 24)], v44, &qword_100257000);
  uint64_t v48 = (uint64_t)&v33[*(int *)(v30 + 48)];
  sub_10000FC68((uint64_t)v43, (uint64_t)v33, &qword_100257000);
  sub_10000FC68(v44, v48, &qword_100257000);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  uint64_t v50 = v26;
  if (v49((uint64_t)v33, 1LL, v26) == 1)
  {
    sub_100041590(v44, &qword_100257000);
    sub_100041590((uint64_t)v43, &qword_100257000);
    if (v49(v48, 1LL, v26) == 1)
    {
      sub_100041590((uint64_t)v33, &qword_100257000);
      uint64_t v51 = v106;
      goto LABEL_15;
    }

uint64_t _s18TrustedPeersHelper33FetchRecoverableTLKSharesResponseV4ViewV2eeoiySbAE_AEtFZ_0( uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  char v53 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  unint64_t v52 = (char *)&v51 - v9;
  uint64_t v10 = type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v55 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100251650);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100007578(&qword_100251648);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)&v51 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v51 - v28;
  uint64_t v30 = *a1;
  uint64_t v31 = a1[1];
  uint64_t v32 = *a2;
  uint64_t v33 = a2[1];
  v56 = a2;
  if (v30 == v32 && v31 == v33
    || (char v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) != 0))
  {
    uint64_t v51 = v4;
    uint64_t RecoverableTLKShares = type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
    sub_10000FC68((uint64_t)a1 + *(int *)(RecoverableTLKShares + 28), (uint64_t)v29, &qword_100251648);
    sub_10000FC68((uint64_t)v56 + *(int *)(RecoverableTLKShares + 28), (uint64_t)v26, &qword_100251648);
    uint64_t v36 = (uint64_t)&v17[*(int *)(v14 + 48)];
    sub_10000FC68((uint64_t)v29, (uint64_t)v17, &qword_100251648);
    sub_10000FC68((uint64_t)v26, v36, &qword_100251648);
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v37((uint64_t)v17, 1LL, v10) == 1)
    {
      sub_100041590((uint64_t)v26, &qword_100251648);
      sub_100041590((uint64_t)v29, &qword_100251648);
      if (v37(v36, 1LL, v10) == 1)
      {
        sub_100041590((uint64_t)v17, &qword_100251648);
LABEL_11:
        uint64_t v40 = v56;
        if ((sub_10003DB0C(a1[2], v56[2]) & 1) != 0)
        {
          uint64_t v41 = (char *)a1 + *(int *)(RecoverableTLKShares + 24);
          uint64_t v42 = v54;
          char v43 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
          uint64_t v44 = v51;
          uint64_t v45 = v52;
          v43(v52, v41, v51);
          uint64_t v46 = (char *)v40 + *(int *)(RecoverableTLKShares + 24);
          uint64_t v47 = v53;
          v43(v53, v46, v44);
          uint64_t v48 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v47, v44, v48);
          uint64_t v49 = *(void (**)(char *, uint64_t))(v42 + 8);
          v49(v47, v44);
          v49(v45, v44);
          return v34 & 1;
        }

uint64_t _s18TrustedPeersHelper32FetchRecoverableTLKSharesRequestV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v90 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  char v89 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v88 = (char *)&v85 - v9;
  uint64_t v97 = type metadata accessor for AccountInfo(0LL);
  uint64_t v94 = *(void *)(v97 - 8);
  __chkstk_darwin(v97, v10);
  uint64_t v87 = (_DWORD *)((char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v93 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v93, v12);
  uint64_t v98 = (uint64_t)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100251F50);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  char v91 = (_DWORD *)((char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v95 = (uint64_t)&v85 - v20;
  __chkstk_darwin(v19, v21);
  uint64_t v96 = (uint64_t)&v85 - v22;
  uint64_t v23 = type metadata accessor for Metrics(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v92 = (uint64_t *)((char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_100257000);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v35 = (uint64_t *)((char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = __chkstk_darwin(v33, v36);
  char v39 = (char *)&v85 - v38;
  __chkstk_darwin(v37, v40);
  uint64_t v42 = (char *)&v85 - v41;
  uint64_t v43 = *(void *)a1;
  uint64_t v44 = *((void *)a1 + 1);
  uint64_t v99 = a1;
  uint64_t v100 = a2;
  uint64_t v45 = *(void *)a2;
  uint64_t v46 = *((void *)a2 + 1);
  if (v43 == *(void *)a2 && v44 == v46
    || (char v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v45, v46, 0LL) & 1) != 0))
  {
    uint64_t v86 = v4;
    RecoverableTLKSharesuint64_t Request = (int *)type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
    sub_10000FC68((uint64_t)&v99[RecoverableTLKSharesRequest[6]], (uint64_t)v42, &qword_100257000);
    sub_10000FC68((uint64_t)&v100[RecoverableTLKSharesRequest[6]], (uint64_t)v39, &qword_100257000);
    uint64_t v49 = (uint64_t)&v30[*(int *)(v27 + 48)];
    sub_10000FC68((uint64_t)v42, (uint64_t)v30, &qword_100257000);
    sub_10000FC68((uint64_t)v39, v49, &qword_100257000);
    uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    if (v50((uint64_t)v30, 1LL, v23) == 1)
    {
      sub_100041590((uint64_t)v39, &qword_100257000);
      sub_100041590((uint64_t)v42, &qword_100257000);
      if (v50(v49, 1LL, v23) == 1)
      {
        sub_100041590((uint64_t)v30, &qword_100257000);
        goto LABEL_17;
      }
    }

    else
    {
      sub_10000FC68((uint64_t)v30, (uint64_t)v35, &qword_100257000);
      if (v50(v49, 1LL, v23) != 1)
      {
        char v53 = v92;
        sub_100041608(v49, (uint64_t)v92, type metadata accessor for Metrics);
        uint64_t v54 = v35[1];
        uint64_t v55 = v53[1];
        if ((*v35 != *v53 || v54 != v55)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v54, *v53, v55, 0LL) & 1) == 0
          || ((v56 = v35[2], uint64_t v57 = v35[3], v58 = v53[2], v59 = v53[3], v56 != v58) || v57 != v59)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, v58, v59, 0LL) & 1) == 0)
        {
          sub_1000415CC((uint64_t)v53, type metadata accessor for Metrics);
          uint64_t v64 = &qword_100257000;
          sub_100041590((uint64_t)v39, &qword_100257000);
          sub_100041590((uint64_t)v42, &qword_100257000);
          sub_1000415CC((uint64_t)v35, type metadata accessor for Metrics);
          uint64_t v52 = (uint64_t)v30;
          goto LABEL_29;
        }

        uint64_t v60 = *(int *)(v23 + 24);
        uint64_t v61 = (char *)v35 + v60;
        uint64_t v62 = (char *)v53 + v60;
        uint64_t v63 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        LOBYTE(v61) = dispatch thunk of static Equatable.== infix(_:_:)(v61, v62, v86, v63);
        sub_1000415CC((uint64_t)v53, type metadata accessor for Metrics);
        sub_100041590((uint64_t)v39, &qword_100257000);
        sub_100041590((uint64_t)v42, &qword_100257000);
        sub_1000415CC((uint64_t)v35, type metadata accessor for Metrics);
        sub_100041590((uint64_t)v30, &qword_100257000);
LABEL_17:
        uint64_t v64 = &qword_100251F50;
        uint64_t v65 = v96;
        sub_10000FC68((uint64_t)&v99[RecoverableTLKSharesRequest[7]], v96, &qword_100251F50);
        uint64_t v66 = v95;
        sub_10000FC68((uint64_t)&v100[RecoverableTLKSharesRequest[7]], v95, &qword_100251F50);
        uint64_t v67 = v98;
        uint64_t v68 = v98 + *(int *)(v93 + 48);
        sub_10000FC68(v65, v98, &qword_100251F50);
        sub_10000FC68(v66, v68, &qword_100251F50);
        uint64_t v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
        uint64_t v70 = v97;
        if (v69(v67, 1LL, v97) == 1)
        {
          sub_100041590(v66, &qword_100251F50);
          sub_100041590(v65, &qword_100251F50);
          if (v69(v68, 1LL, v70) == 1)
          {
            sub_100041590(v67, &qword_100251F50);
LABEL_20:
            uint64_t v71 = v90;
            uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
            uint64_t v73 = v88;
            uint64_t v74 = v86;
            v72(v88, &v99[RecoverableTLKSharesRequest[5]], v86);
            char v75 = v89;
            v72(v89, &v100[RecoverableTLKSharesRequest[5]], v74);
            uint64_t v76 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v47 = dispatch thunk of static Equatable.== infix(_:_:)(v73, v75, v74, v76);
            v77 = *(void (**)(char *, uint64_t))(v71 + 8);
            v77(v75, v74);
            v77(v73, v74);
            return v47 & 1;
          }

          goto LABEL_23;
        }

        unint64_t v78 = v91;
        sub_10000FC68(v67, (uint64_t)v91, &qword_100251F50);
        if (v69(v68, 1LL, v70) == 1)
        {
          sub_100041590(v66, &qword_100251F50);
          sub_100041590(v65, &qword_100251F50);
          sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
LABEL_23:
          uint64_t v51 = &qword_1002563E0;
          uint64_t v52 = v67;
          goto LABEL_30;
        }

        uint64_t v79 = v87;
        sub_100041608(v68, (uint64_t)v87, type metadata accessor for AccountInfo);
        if (*v78 == *v79)
        {
          uint64_t v80 = *(int *)(v70 + 20);
          unint64_t v81 = (char *)v78 + v80;
          uint64_t v82 = (char *)v79 + v80;
          uint64_t v83 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v81) = dispatch thunk of static Equatable.== infix(_:_:)(v81, v82, v86, v83);
          sub_1000415CC((uint64_t)v79, type metadata accessor for AccountInfo);
          sub_100041590(v66, &qword_100251F50);
          sub_100041590(v65, &qword_100251F50);
          sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
          sub_100041590(v67, &qword_100251F50);
LABEL_31:
          char v47 = 0;
          return v47 & 1;
        }

        sub_1000415CC((uint64_t)v79, type metadata accessor for AccountInfo);
        sub_100041590(v66, &qword_100251F50);
        sub_100041590(v65, &qword_100251F50);
        sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
        uint64_t v52 = v67;
LABEL_29:
        uint64_t v51 = v64;
        goto LABEL_30;
      }

      sub_100041590((uint64_t)v39, &qword_100257000);
      sub_100041590((uint64_t)v42, &qword_100257000);
      sub_1000415CC((uint64_t)v35, type metadata accessor for Metrics);
    }

    uint64_t v51 = &qword_1002563E8;
    uint64_t v52 = (uint64_t)v30;
LABEL_30:
    sub_100041590(v52, v51);
    goto LABEL_31;
  }

  return v47 & 1;
}

uint64_t _s18TrustedPeersHelper30ResetAccountCDPContentsRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v106 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v105 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v104 = (char *)&v99 - v8;
  uint64_t v113 = type metadata accessor for Metrics(0LL);
  uint64_t v110 = *(void *)(v113 - 8);
  __chkstk_darwin(v113, v9);
  uint64_t v107 = (uint64_t *)((char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v109 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v109, v11);
  uint64_t v114 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100257000);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v108 = (uint64_t *)((char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v111 = (uint64_t)&v99 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v112 = (uint64_t)&v99 - v21;
  uint64_t v22 = type metadata accessor for AccountInfo(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (_DWORD *)((char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_100251F50);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v35 = (char *)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v33, v36);
  char v39 = (char *)&v99 - v38;
  __chkstk_darwin(v37, v40);
  uint64_t v43 = (char *)&v99 - v42;
  uint64_t v44 = *a2;
  if (*((_BYTE *)a2 + 8) == 1) {
    __asm { BR              X11 }
  }

  if (*(void *)v41 != v44) {
    goto LABEL_39;
  }
  uint64_t v103 = v3;
  uint64_t v45 = *(void *)(v41 + 16);
  uint64_t v46 = *(void *)(v41 + 24);
  uint64_t v47 = a2[2];
  uint64_t v48 = a2[3];
  if (v45 == v47 && v46 == v48
    || (uint64_t v49 = v41,
        char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v47, v48, 0LL),
        uint64_t v41 = v49,
        char v51 = 0,
        (v50 & 1) != 0))
  {
    uint64_t v52 = *(void *)(v41 + 32);
    uint64_t v53 = *(void *)(v41 + 40);
    uint64_t v54 = a2[4];
    uint64_t v55 = a2[5];
    if (v52 == v54 && v53 == v55) {
      goto LABEL_10;
    }
    uint64_t v56 = v41;
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v54, v55, 0LL);
    uint64_t v41 = v56;
    char v51 = 0;
    if ((v57 & 1) != 0)
    {
LABEL_10:
      uint64_t v102 = v35;
      uint64_t v58 = v41;
      uint64_t v59 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
      uint64_t v60 = *(int *)(v59 + 40);
      uint64_t v101 = v58;
      sub_10000FC68(v58 + v60, (uint64_t)v43, &qword_100251F50);
      uint64_t v100 = v59;
      sub_10000FC68((uint64_t)a2 + *(int *)(v59 + 40), (uint64_t)v39, &qword_100251F50);
      uint64_t v61 = (uint64_t)&v30[*(int *)(v27 + 48)];
      sub_10000FC68((uint64_t)v43, (uint64_t)v30, &qword_100251F50);
      sub_10000FC68((uint64_t)v39, v61, &qword_100251F50);
      uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
      if (v62((uint64_t)v30, 1LL, v22) == 1)
      {
        sub_100041590((uint64_t)v39, &qword_100251F50);
        sub_100041590((uint64_t)v43, &qword_100251F50);
        if (v62(v61, 1LL, v22) == 1)
        {
          sub_100041590((uint64_t)v30, &qword_100251F50);
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v63 = v102;
        sub_10000FC68((uint64_t)v30, (uint64_t)v102, &qword_100251F50);
        if (v62(v61, 1LL, v22) != 1)
        {
          sub_100041608(v61, (uint64_t)v26, type metadata accessor for AccountInfo);
          if (*v63 != *v26)
          {
            sub_1000415CC((uint64_t)v26, type metadata accessor for AccountInfo);
            uint64_t v71 = &qword_100251F50;
            sub_100041590((uint64_t)v39, &qword_100251F50);
            sub_100041590((uint64_t)v43, &qword_100251F50);
            sub_1000415CC((uint64_t)v63, type metadata accessor for AccountInfo);
            uint64_t v65 = (uint64_t)v30;
            goto LABEL_37;
          }

          uint64_t v66 = *(int *)(v22 + 20);
          uint64_t v67 = (char *)v63 + v66;
          uint64_t v68 = (char *)v26 + v66;
          uint64_t v69 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v67) = dispatch thunk of static Equatable.== infix(_:_:)(v67, v68, v103, v69);
          sub_1000415CC((uint64_t)v26, type metadata accessor for AccountInfo);
          sub_100041590((uint64_t)v39, &qword_100251F50);
          sub_100041590((uint64_t)v43, &qword_100251F50);
          sub_1000415CC((uint64_t)v63, type metadata accessor for AccountInfo);
          sub_100041590((uint64_t)v30, &qword_100251F50);
LABEL_19:
          uint64_t v70 = v100;
          uint64_t v71 = &qword_100257000;
          uint64_t v72 = v112;
          sub_10000FC68(v101 + *(int *)(v100 + 44), v112, &qword_100257000);
          uint64_t v73 = v111;
          sub_10000FC68((uint64_t)a2 + *(int *)(v70 + 44), v111, &qword_100257000);
          uint64_t v74 = v114;
          uint64_t v75 = v114 + *(int *)(v109 + 48);
          sub_10000FC68(v72, v114, &qword_100257000);
          sub_10000FC68(v73, v75, &qword_100257000);
          uint64_t v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
          uint64_t v77 = v113;
          if (v76(v74, 1LL, v113) == 1)
          {
            sub_100041590(v73, &qword_100257000);
            sub_100041590(v72, &qword_100257000);
            if (v76(v75, 1LL, v77) == 1)
            {
              sub_100041590(v74, &qword_100257000);
LABEL_22:
              if (*(unsigned __int8 *)(v101 + 49) == *((unsigned __int8 *)a2 + 49))
              {
                uint64_t v78 = v106;
                uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
                uint64_t v80 = v103;
                unint64_t v81 = v104;
                v79(v104, v101 + *(int *)(v70 + 36), v103);
                uint64_t v82 = (uint64_t)a2 + *(int *)(v70 + 36);
                uint64_t v83 = v105;
                v79(v105, v82, v80);
                uint64_t v84 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v81, v83, v80, v84);
                uint64_t v85 = *(void (**)(char *, uint64_t))(v78 + 8);
                v85(v83, v80);
                v85(v81, v80);
                return v51 & 1;
              }

LABEL_39:
              char v51 = 0;
              return v51 & 1;
            }

            goto LABEL_26;
          }

          uint64_t v86 = v108;
          sub_10000FC68(v74, (uint64_t)v108, &qword_100257000);
          if (v76(v75, 1LL, v77) == 1)
          {
            sub_100041590(v73, &qword_100257000);
            sub_100041590(v72, &qword_100257000);
            sub_1000415CC((uint64_t)v86, type metadata accessor for Metrics);
LABEL_26:
            uint64_t v64 = &qword_1002563E8;
            uint64_t v65 = v74;
            goto LABEL_38;
          }

          uint64_t v87 = v107;
          sub_100041608(v75, (uint64_t)v107, type metadata accessor for Metrics);
          uint64_t v88 = v86[1];
          uint64_t v89 = v87[1];
          if (*v86 == *v87 && v88 == v89
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*v86, v88, *v87, v89, 0LL) & 1) != 0)
          {
            if ((uint64_t v90 = v86[2], v91 = v86[3], v92 = v87[2], v93 = v87[3], v90 == v92) && v91 == v93
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v90, v91, v92, v93, 0LL) & 1) != 0)
            {
              uint64_t v94 = *(int *)(v77 + 24);
              uint64_t v95 = (char *)v86 + v94;
              uint64_t v96 = (char *)v87 + v94;
              uint64_t v97 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              LOBYTE(v95) = dispatch thunk of static Equatable.== infix(_:_:)(v95, v96, v103, v97);
              sub_1000415CC((uint64_t)v87, type metadata accessor for Metrics);
              sub_100041590(v73, &qword_100257000);
              sub_100041590(v72, &qword_100257000);
              sub_1000415CC((uint64_t)v86, type metadata accessor for Metrics);
              sub_100041590(v74, &qword_100257000);
              goto LABEL_22;
            }
          }

          sub_1000415CC((uint64_t)v87, type metadata accessor for Metrics);
          sub_100041590(v73, &qword_100257000);
          sub_100041590(v72, &qword_100257000);
          sub_1000415CC((uint64_t)v86, type metadata accessor for Metrics);
          uint64_t v65 = v74;
LABEL_37:
          uint64_t v64 = v71;
          goto LABEL_38;
        }

        sub_100041590((uint64_t)v39, &qword_100251F50);
        sub_100041590((uint64_t)v43, &qword_100251F50);
        sub_1000415CC((uint64_t)v63, type metadata accessor for AccountInfo);
      }

      uint64_t v64 = &qword_1002563E0;
      uint64_t v65 = (uint64_t)v30;
LABEL_38:
      sub_100041590(v65, v64);
      goto LABEL_39;
    }
  }

  return v51 & 1;
}

              v133 = &qword_100256448;
              goto LABEL_40;
            }

            v156 = v208;
            sub_10000FC68(v108, (uint64_t)v208, &qword_100256CA0);
            if (v109(v107, 1LL, v102) == 1)
            {
              sub_100041590(v214, &qword_100256CA0);
              sub_100041590(v215, &qword_100256CA0);
              sub_1000415CC((uint64_t)v156, type metadata accessor for SignedPeerDynamicInfo);
              goto LABEL_39;
            }

            v157 = v207;
            sub_100041608(v107, v207, type metadata accessor for SignedPeerDynamicInfo);
            sub_100041318(*v156, v156[1]);
            v158 = (uint64_t)v156;
            v159 = v215;
            if ((v160 & 1) != 0)
            {
              sub_100041318(*(void *)(v158 + 16), *(void *)(v158 + 24));
              if ((v161 & 1) != 0)
              {
                v162 = *(int *)(v221 + 24);
                v163 = v158 + v162;
                v164 = v157;
                v165 = v157 + v162;
                v166 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                LOBYTE(v163) = dispatch thunk of static Equatable.== infix(_:_:)(v163, v165, v213, v166);
                sub_1000415CC(v164, type metadata accessor for SignedPeerDynamicInfo);
                sub_100041590(v214, &qword_100256CA0);
                sub_100041590(v159, &qword_100256CA0);
                sub_1000415CC(v158, type metadata accessor for SignedPeerDynamicInfo);
                sub_100041590(v216, &qword_100256CA0);
                if ((v163 & 1) == 0) {
                  goto LABEL_48;
                }
                goto LABEL_13;
              }
            }

            sub_1000415CC(v157, type metadata accessor for SignedPeerDynamicInfo);
            uint64_t v141 = &qword_100256CA0;
            sub_100041590(v214, &qword_100256CA0);
            sub_100041590(v159, &qword_100256CA0);
            sub_1000415CC(v158, type metadata accessor for SignedPeerDynamicInfo);
            v134 = v216;
LABEL_46:
            v133 = v141;
            goto LABEL_47;
          }
        }

        else
        {
          uint64_t v142 = v91;
          uint64_t v143 = v217;
          sub_10000FC68(v95, (uint64_t)v217, &qword_100251F18);
          uint64_t v144 = v97(v96, 1LL, v98);
          uint64_t v145 = v218;
          uint64_t v102 = v221;
          uint64_t v101 = v222;
          if (v144 != 1)
          {
            uint64_t v146 = v96;
            uint64_t v147 = v210;
            sub_100041608(v146, v210, type metadata accessor for SignedPeerStableInfo);
            sub_100041318(*v143, v143[1]);
            uint64_t v148 = (uint64_t)v143;
            if ((v149 & 1) == 0 || (sub_100041318(v143[2], v143[3]), (v150 & 1) == 0))
            {
              sub_1000415CC(v147, type metadata accessor for SignedPeerStableInfo);
              uint64_t v141 = &qword_100251F18;
              sub_100041590(v224, &qword_100251F18);
              sub_100041590(v225, &qword_100251F18);
              sub_1000415CC((uint64_t)v143, type metadata accessor for SignedPeerStableInfo);
              v134 = v226;
              goto LABEL_46;
            }

            v151 = *(int *)(v223 + 24);
            v152 = (char *)v143 + v151;
            v153 = v147;
            v154 = v147 + v151;
            v155 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v152) = dispatch thunk of static Equatable.== infix(_:_:)(v152, v154, v213, v155);
            sub_1000415CC(v153, type metadata accessor for SignedPeerStableInfo);
            sub_100041590(v224, &qword_100251F18);
            sub_100041590(v225, &qword_100251F18);
            sub_1000415CC(v148, type metadata accessor for SignedPeerStableInfo);
            sub_100041590(v226, &qword_100251F18);
            uint64_t v100 = v145;
            uint64_t v91 = v142;
            uint64_t v93 = v228;
            goto LABEL_10;
          }

          sub_100041590(v224, &qword_100251F18);
          sub_100041590(v225, &qword_100251F18);
          sub_1000415CC((uint64_t)v143, type metadata accessor for SignedPeerStableInfo);
        }

        v133 = &qword_100256450;
        v134 = v226;
LABEL_47:
        sub_100041590(v134, v133);
        goto LABEL_48;
      }
    }

    else
    {
      sub_10000FC68((uint64_t)v69, (uint64_t)v74, &qword_100256F80);
      if (v89(v88, 1LL, v61) != 1)
      {
        sub_100041608(v88, (uint64_t)v65, type metadata accessor for SignedPeerPermanentInfo);
        sub_100041318(*v74, v74[1]);
        if ((v135 & 1) == 0 || (sub_100041318(v74[2], v74[3]), (v136 & 1) == 0))
        {
          sub_1000415CC((uint64_t)v65, type metadata accessor for SignedPeerPermanentInfo);
          uint64_t v141 = &qword_100256F80;
          sub_100041590((uint64_t)v78, &qword_100256F80);
          sub_100041590((uint64_t)v81, &qword_100256F80);
          sub_1000415CC((uint64_t)v74, type metadata accessor for SignedPeerPermanentInfo);
          v134 = (uint64_t)v69;
          goto LABEL_46;
        }

        uint64_t v137 = *(int *)(v61 + 24);
        uint64_t v138 = (char *)v74 + v137;
        uint64_t v139 = &v65[v137];
        uint64_t v140 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        LOBYTE(v138) = dispatch thunk of static Equatable.== infix(_:_:)(v138, v139, v213, v140);
        sub_1000415CC((uint64_t)v65, type metadata accessor for SignedPeerPermanentInfo);
        sub_100041590((uint64_t)v78, &qword_100256F80);
        sub_100041590((uint64_t)v81, &qword_100256F80);
        sub_1000415CC((uint64_t)v74, type metadata accessor for SignedPeerPermanentInfo);
        sub_100041590((uint64_t)v69, &qword_100256F80);
        goto LABEL_7;
      }

      sub_100041590((uint64_t)v78, &qword_100256F80);
      sub_100041590((uint64_t)v81, &qword_100256F80);
      sub_1000415CC((uint64_t)v74, type metadata accessor for SignedPeerPermanentInfo);
    }

    v133 = &qword_100256480;
    v134 = (uint64_t)v69;
    goto LABEL_47;
  }

  return v86 & 1;
}

              char v51 = 0;
              return v51 & 1;
            }

            goto LABEL_26;
          }

          uint64_t v86 = v108;
          sub_10000FC68(v74, (uint64_t)v108, &qword_100257000);
          if (v76(v75, 1LL, v77) == 1)
          {
            sub_100041590(v73, &qword_100257000);
            sub_100041590(v72, &qword_100257000);
            sub_1000415CC((uint64_t)v86, type metadata accessor for Metrics);
LABEL_26:
            uint64_t v64 = &qword_1002563E8;
            uint64_t v65 = v74;
            goto LABEL_38;
          }

          uint64_t v87 = v107;
          sub_100041608(v75, (uint64_t)v107, type metadata accessor for Metrics);
          uint64_t v88 = v86[1];
          uint64_t v89 = v87[1];
          if (*v86 == *v87 && v88 == v89
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*v86, v88, *v87, v89, 0LL) & 1) != 0)
          {
            if ((uint64_t v90 = v86[2], v91 = v86[3], v92 = v87[2], v93 = v87[3], v90 == v92) && v91 == v93
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v90, v91, v92, v93, 0LL) & 1) != 0)
            {
              uint64_t v94 = *(int *)(v77 + 24);
              uint64_t v95 = (char *)v86 + v94;
              uint64_t v96 = (char *)v87 + v94;
              uint64_t v97 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              LOBYTE(v95) = dispatch thunk of static Equatable.== infix(_:_:)(v95, v96, v103, v97);
              sub_1000415CC((uint64_t)v87, type metadata accessor for Metrics);
              sub_100041590(v73, &qword_100257000);
              sub_100041590(v72, &qword_100257000);
              sub_1000415CC((uint64_t)v86, type metadata accessor for Metrics);
              sub_100041590(v74, &qword_100257000);
              goto LABEL_22;
            }
          }

          sub_1000415CC((uint64_t)v87, type metadata accessor for Metrics);
          sub_100041590(v73, &qword_100257000);
          sub_100041590(v72, &qword_100257000);
          sub_1000415CC((uint64_t)v86, type metadata accessor for Metrics);
          uint64_t v65 = v74;
LABEL_37:
          uint64_t v64 = v71;
          goto LABEL_38;
        }

        sub_100041590((uint64_t)v39, &qword_100251F50);
        sub_100041590((uint64_t)v43, &qword_100251F50);
        sub_1000415CC((uint64_t)v63, type metadata accessor for AccountInfo);
      }

      uint64_t v64 = &qword_1002563E0;
      uint64_t v65 = (uint64_t)v30;
LABEL_38:
      sub_100041590(v65, v64);
      goto LABEL_39;
    }
  }

  return v51 & 1;
}

  __break(1u);
  return result;
}

  sub_100172694(v7);
  uint64_t v1 = v97;
  uint64_t v0 = v99;
LABEL_40:
  uint64_t v33 = objc_msgSend(*(id *)(v0 + v1), "partiallyViableEscrowRecords", v95);
  if (v33)
  {
    uint64_t v34 = v33;
    v109[0] = 0LL;
    uint64_t v35 = type metadata accessor for EscrowRecordMO();
    uint64_t v36 = sub_1001B6D90();
    uint64_t v102 = v35;
    static Set._conditionallyBridgeFromObjectiveC(_:result:)(v34, v109, v35, v36);

    uint64_t v38 = v109[0];
    if (v109[0])
    {
      uint64_t v98 = v1;
      uint64_t v100 = v0;
      if ((v109[0] & 0xC000000000000001LL) != 0)
      {
        if (v109[0] >= 0LL) {
          char v39 = v109[0] & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          char v39 = v109[0];
        }
        uint64_t v40 = __CocoaSet.makeIterator()(v39);
        uint64_t v37 = Set.Iterator.init(_cocoa:)(v108, v40, v35, v36);
        uint64_t v38 = v108[0];
        uint64_t v41 = v108[1];
        uint64_t v42 = v108[2];
        uint64_t v43 = v108[3];
        uint64_t v44 = v108[4];
      }

      else
      {
        uint64_t v43 = 0LL;
        uint64_t v45 = -1LL << *(_BYTE *)(v109[0] + 32LL);
        uint64_t v41 = v109[0] + 56LL;
        uint64_t v42 = ~v45;
        uint64_t v46 = -v45;
        if (v46 < 64) {
          uint64_t v47 = ~(-1LL << v46);
        }
        else {
          uint64_t v47 = -1LL;
        }
        uint64_t v44 = v47 & *(void *)(v109[0] + 56LL);
      }

      uint64_t v96 = v42;
      uint64_t v48 = (unint64_t)(v42 + 64) >> 6;
      while (1)
      {
        if (v38 < 0)
        {
          uint64_t v54 = __CocoaSet.Iterator.next()(v37);
          if (!v54) {
            goto LABEL_78;
          }
          uint64_t v56 = v54;
          uint64_t v105 = (void *)v54;
          swift_unknownObjectRetain(v54, v55);
          swift_dynamicCast(v109, &v105, (char *)&type metadata for Swift.AnyObject + 8, v102, 7LL);
          char v50 = (id)v109[0];
          swift_unknownObjectRelease(v56);
          uint64_t v53 = v43;
          char v51 = v44;
          if (!v50) {
            goto LABEL_78;
          }
        }

        else
        {
          if (v44)
          {
            char v51 = (v44 - 1) & v44;
            uint64_t v52 = __clz(__rbit64(v44)) | (v43 << 6);
            uint64_t v53 = v43;
          }

          else
          {
            char v57 = v43 + 1;
            if (__OFADD__(v43, 1LL)) {
              goto LABEL_120;
            }
            if (v57 >= v48)
            {
LABEL_78:
              sub_100172694(v38);
              uint64_t v1 = v98;
              uint64_t v0 = v100;
              break;
            }

            uint64_t v58 = *(void *)(v41 + 8 * v57);
            uint64_t v53 = v43 + 1;
            if (!v58)
            {
              uint64_t v53 = v43 + 2;
              if (v43 + 2 >= v48) {
                goto LABEL_78;
              }
              uint64_t v58 = *(void *)(v41 + 8 * v53);
              if (!v58)
              {
                uint64_t v53 = v43 + 3;
                if (v43 + 3 >= v48) {
                  goto LABEL_78;
                }
                uint64_t v58 = *(void *)(v41 + 8 * v53);
                if (!v58)
                {
                  uint64_t v53 = v43 + 4;
                  if (v43 + 4 >= v48) {
                    goto LABEL_78;
                  }
                  uint64_t v58 = *(void *)(v41 + 8 * v53);
                  if (!v58)
                  {
                    uint64_t v59 = v43 + 5;
                    do
                    {
                      if (v48 == v59) {
                        goto LABEL_78;
                      }
                      uint64_t v58 = *(void *)(v41 + 8 * v59++);
                    }

                    while (!v58);
                    uint64_t v53 = v59 - 1;
                  }
                }
              }
            }

            char v51 = (v58 - 1) & v58;
            uint64_t v52 = __clz(__rbit64(v58)) + (v53 << 6);
          }

          char v50 = *(id *)(*(void *)(v38 + 48) + 8 * v52);
          if (!v50) {
            goto LABEL_78;
          }
        }

        uint64_t v60 = (void *)sub_1001B6DD8(v50, 1u);
        if (v60)
        {
          uint64_t v61 = v60;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
          uint64_t v63 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          uint64_t v62 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v63 >= v62 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
          }
          uint64_t v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v61);
          specialized Array._endMutation()(v49);

          char v50 = v61;
        }

        uint64_t v43 = v53;
        uint64_t v44 = v51;
      }
    }
  }

  uint64_t v64 = objc_msgSend(*(id *)(v0 + v1), "legacyEscrowRecords", v96);
  if (!v64) {
    return;
  }
  uint64_t v65 = v64;
  v109[0] = 0LL;
  uint64_t v66 = type metadata accessor for EscrowRecordMO();
  uint64_t v67 = sub_1001B6D90();
  uint64_t v103 = v66;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v65, v109, v66, v67);

  uint64_t v69 = v109[0];
  if (!v109[0]) {
    return;
  }
  if ((v109[0] & 0xC000000000000001LL) != 0)
  {
    if (v109[0] >= 0LL) {
      uint64_t v70 = v109[0] & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v70 = v109[0];
    }
    uint64_t v71 = __CocoaSet.makeIterator()(v70);
    uint64_t v68 = Set.Iterator.init(_cocoa:)(v109, v71, v66, v67);
    uint64_t v69 = v109[0];
    uint64_t v72 = v109[1];
    uint64_t v73 = v109[2];
    uint64_t v74 = v109[3];
    uint64_t v75 = v109[4];
  }

  else
  {
    uint64_t v74 = 0LL;
    uint64_t v76 = -1LL << *(_BYTE *)(v109[0] + 32LL);
    uint64_t v72 = v109[0] + 56LL;
    uint64_t v73 = ~v76;
    uint64_t v77 = -v76;
    if (v77 < 64) {
      uint64_t v78 = ~(-1LL << v77);
    }
    else {
      uint64_t v78 = -1LL;
    }
    uint64_t v75 = v78 & *(void *)(v109[0] + 56LL);
  }

  uint64_t v79 = (unint64_t)(v73 + 64) >> 6;
  while (2)
  {
    if (v69 < 0)
    {
      uint64_t v85 = __CocoaSet.Iterator.next()(v68);
      if (!v85) {
        goto LABEL_117;
      }
      uint64_t v87 = v85;
      uint64_t v104 = v85;
      swift_unknownObjectRetain(v85, v86);
      swift_dynamicCast(&v105, &v104, (char *)&type metadata for Swift.AnyObject + 8, v103, 7LL);
      unint64_t v81 = v105;
      swift_unknownObjectRelease(v87);
      uint64_t v84 = v74;
      uint64_t v82 = v75;
      if (!v81) {
        goto LABEL_117;
      }
      goto LABEL_114;
    }

    if (v75)
    {
      uint64_t v82 = (v75 - 1) & v75;
      uint64_t v83 = __clz(__rbit64(v75)) | (v74 << 6);
      uint64_t v84 = v74;
LABEL_113:
      unint64_t v81 = *(id *)(*(void *)(v69 + 48) + 8 * v83);
      if (!v81) {
        goto LABEL_117;
      }
LABEL_114:
      uint64_t v91 = (void *)sub_1001B6DD8(v81, 2u);
      if (v91)
      {
        uint64_t v92 = v91;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v92);
        uint64_t v94 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t v93 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v94 >= v93 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1, v94 + 1, 1LL);
        }
        uint64_t v80 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v94, v92);
        specialized Array._endMutation()(v80);

        unint64_t v81 = v92;
      }

      uint64_t v74 = v84;
      uint64_t v75 = v82;
      continue;
    }

    break;
  }

  uint64_t v88 = v74 + 1;
  if (__OFADD__(v74, 1LL)) {
    goto LABEL_121;
  }
  if (v88 >= v79) {
    goto LABEL_117;
  }
  uint64_t v89 = *(void *)(v72 + 8 * v88);
  uint64_t v84 = v74 + 1;
  if (v89) {
    goto LABEL_112;
  }
  uint64_t v84 = v74 + 2;
  if (v74 + 2 >= v79) {
    goto LABEL_117;
  }
  uint64_t v89 = *(void *)(v72 + 8 * v84);
  if (v89) {
    goto LABEL_112;
  }
  uint64_t v84 = v74 + 3;
  if (v74 + 3 >= v79) {
    goto LABEL_117;
  }
  uint64_t v89 = *(void *)(v72 + 8 * v84);
  if (v89) {
    goto LABEL_112;
  }
  uint64_t v84 = v74 + 4;
  if (v74 + 4 >= v79) {
    goto LABEL_117;
  }
  uint64_t v89 = *(void *)(v72 + 8 * v84);
  if (v89)
  {
LABEL_112:
    uint64_t v82 = (v89 - 1) & v89;
    uint64_t v83 = __clz(__rbit64(v89)) + (v84 << 6);
    goto LABEL_113;
  }

  uint64_t v90 = v74 + 5;
  while (v79 != v90)
  {
    uint64_t v89 = *(void *)(v72 + 8 * v90++);
    if (v89)
    {
      uint64_t v84 = v90 - 1;
      goto LABEL_112;
    }
  }

uint64_t sub_1000A7990( void *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v24 - v15;
  if ((a3(*a1, *(void *)a2) & 1) != 0)
  {
    uint64_t v17 = a4(0LL);
    uint64_t v18 = (char *)a1 + *(int *)(v17 + 20);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v19(v16, v18, v8);
    v19(v13, &a2[*(int *)(v17 + 20)], v8);
    uint64_t v20 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v8, v20);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v13, v8);
    v22(v16, v8);
  }

  else
  {
    char v21 = 0;
  }

  return v21 & 1;
}

uint64_t _s18TrustedPeersHelper27PerformATOPRVActionsRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = a1;
  uint64_t v95 = a2;
  uint64_t v86 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v84 = *(void *)(v86 - 8);
  uint64_t v3 = __chkstk_darwin(v86, v2);
  uint64_t v83 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3, v5);
  uint64_t v82 = (char *)&v80 - v6;
  uint64_t v92 = type metadata accessor for AccountInfo(0LL);
  uint64_t v89 = *(void *)(v92 - 8);
  __chkstk_darwin(v92, v7);
  unint64_t v81 = (_DWORD *)((char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v88 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v88, v9);
  uint64_t v93 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100007578(&qword_100251F50);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v85 = (_DWORD *)((char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v90 = (uint64_t)&v80 - v17;
  __chkstk_darwin(v16, v18);
  uint64_t v91 = (uint64_t)&v80 - v19;
  uint64_t v20 = type metadata accessor for Metrics(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (uint64_t *)((char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100007578(&qword_100257000);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v33 = (uint64_t *)((char *)&v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = __chkstk_darwin(v31, v34);
  uint64_t v37 = (char *)&v80 - v36;
  __chkstk_darwin(v35, v38);
  uint64_t v40 = (char *)&v80 - v39;
  uint64_t v41 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  sub_10000FC68(v94 + *(int *)(v41 + 20), (uint64_t)v40, &qword_100257000);
  uint64_t v87 = v41;
  sub_10000FC68(v95 + *(int *)(v41 + 20), (uint64_t)v37, &qword_100257000);
  uint64_t v42 = (uint64_t)&v28[*(int *)(v25 + 48)];
  sub_10000FC68((uint64_t)v40, (uint64_t)v28, &qword_100257000);
  sub_10000FC68((uint64_t)v37, v42, &qword_100257000);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v43((uint64_t)v28, 1LL, v20) == 1)
  {
    sub_100041590((uint64_t)v37, &qword_100257000);
    sub_100041590((uint64_t)v40, &qword_100257000);
    if (v43(v42, 1LL, v20) == 1)
    {
      sub_100041590((uint64_t)v28, &qword_100257000);
      goto LABEL_14;
    }

uint64_t sub_1000A82B0(char *a1, char *a2)
{
  return sub_1000AAC5C(a1, a2, (uint64_t)sub_10003EE24, (char *)type metadata accessor for FetchPolicyDocumentsRequest);
}

uint64_t _s18TrustedPeersHelper26FetchViableBottlesResponseV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v20 - v11;
  if ((sub_10003F018(*a1, *a2) & 1) != 0
    && (sub_10003F018(a1[1], a2[1]) & 1) != 0
    && (sub_10003F1EC(a1[2], a2[2]) & 1) != 0
    && a1[3] == a2[3]
    && a1[4] == a2[4]
    && a1[5] == a2[5]
    && a1[6] == a2[6])
  {
    uint64_t ViableBottlesResponse = type metadata accessor for FetchViableBottlesResponse(0LL);
    uint64_t v14 = (char *)a1 + *(int *)(ViableBottlesResponse + 44);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v9, (char *)a2 + *(int *)(ViableBottlesResponse + 44), v4);
    uint64_t v16 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v9, v4);
    v18(v12, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t _s18TrustedPeersHelper25GetSupportAppInfoResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v24 - v11;
  if ((sub_10003F33C(*(void *)a1, *(void *)a2) & 1) == 0
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
LABEL_8:
    char v17 = 0;
    return v17 & 1;
  }

  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  if (v13 == v15 && v14 == v16
    || (char v17 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL) & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
    {
      uint64_t SupportAppInfoResponse = type metadata accessor for GetSupportAppInfoResponse(0LL);
      uint64_t v20 = a1 + *(int *)(SupportAppInfoResponse + 36);
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v21(v12, v20, v4);
      v21(v9, a2 + *(int *)(SupportAppInfoResponse + 36), v4);
      uint64_t v22 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v22);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v9, v4);
      v23(v12, v4);
      return v17 & 1;
    }

    goto LABEL_8;
  }

  return v17 & 1;
}

uint64_t _s18TrustedPeersHelper25FetchViableBottlesRequestV2eeoiySbAC_ACtFZ_0(uint64_t *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v94 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v93 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v92 = (char *)&v89 - v9;
  uint64_t v101 = type metadata accessor for AccountInfo(0LL);
  uint64_t v98 = *(void *)(v101 - 8);
  __chkstk_darwin(v101, v10);
  uint64_t v91 = (_DWORD *)((char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v97 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v97, v12);
  uint64_t v102 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100251F50);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v95 = (_DWORD *)((char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v99 = (uint64_t)&v89 - v20;
  __chkstk_darwin(v19, v21);
  uint64_t v100 = (uint64_t)&v89 - v22;
  uint64_t v23 = type metadata accessor for Metrics(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v96 = (uint64_t *)((char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_100257000);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v103 = (uint64_t *)((char *)&v89 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = __chkstk_darwin(v33, v35);
  uint64_t v38 = (char *)&v89 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v41 = (char *)&v89 - v40;
  uint64_t v42 = *a1;
  uint64_t v43 = a1;
  int v44 = *((unsigned __int8 *)a1 + 8);
  uint64_t v45 = *(void *)a2;
  uint64_t v104 = a2;
  if (v44) {
    uint64_t v42 = v42 != 0;
  }
  if (a2[8] == 1)
  {
    if (v45)
    {
      if (v42 != 1) {
        goto LABEL_36;
      }
    }

    else if (v42)
    {
      goto LABEL_36;
    }
  }

  else if (v42 != v45)
  {
    goto LABEL_36;
  }

  uint64_t v90 = v4;
  ViableBottlesuint64_t Request = type metadata accessor for FetchViableBottlesRequest(0LL);
  uint64_t v47 = (char *)v43;
  sub_10000FC68((uint64_t)v43 + *(int *)(ViableBottlesRequest + 24), (uint64_t)v41, &qword_100257000);
  sub_10000FC68((uint64_t)&v104[*(int *)(ViableBottlesRequest + 24)], (uint64_t)v38, &qword_100257000);
  uint64_t v48 = (uint64_t)&v30[*(int *)(v27 + 48)];
  sub_10000FC68((uint64_t)v41, (uint64_t)v30, &qword_100257000);
  sub_10000FC68((uint64_t)v38, v48, &qword_100257000);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v49((uint64_t)v30, 1LL, v23) == 1)
  {
    sub_100041590((uint64_t)v38, &qword_100257000);
    sub_100041590((uint64_t)v41, &qword_100257000);
    if (v49(v48, 1LL, v23) == 1)
    {
      sub_100041590((uint64_t)v30, &qword_100257000);
      goto LABEL_23;
    }

uint64_t _s18TrustedPeersHelper24RemoveRecoveryKeyRequestV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v173 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v163 = *(void *)(v173 - 8);
  uint64_t v5 = __chkstk_darwin(v173, v4);
  v162 = (char *)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  v161 = (char *)&v159 - v8;
  uint64_t v184 = type metadata accessor for AccountInfo(0LL);
  uint64_t v167 = *(void *)(v184 - 8);
  __chkstk_darwin(v184, v9);
  v160 = (_DWORD *)((char *)&v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v166 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v166, v11);
  uint64_t v168 = (uint64_t)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F50);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  v164 = (_DWORD *)((char *)&v159 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  v182 = (char *)&v159 - v19;
  __chkstk_darwin(v18, v20);
  v183 = (char *)&v159 - v21;
  uint64_t v181 = type metadata accessor for Metrics(0LL);
  uint64_t v172 = *(void *)(v181 - 8);
  __chkstk_darwin(v181, v22);
  v165 = (int **)((char *)&v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v171 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v171, v24);
  uint64_t v174 = (uint64_t)&v159 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100007578(&qword_100257000);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  v169 = (int **)((char *)&v159 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v176 = (uint64_t)&v159 - v32;
  __chkstk_darwin(v31, v33);
  v180 = (char *)&v159 - v34;
  uint64_t v35 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v178 = *(void *)(v35 - 8);
  uint64_t v179 = v35;
  __chkstk_darwin(v35, v36);
  uint64_t v170 = (uint64_t)&v159 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v177 = sub_100007578(&qword_100256448);
  __chkstk_darwin(v177, v38);
  uint64_t v187 = (uint64_t)&v159 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_100007578(&qword_100256CA0);
  uint64_t v42 = __chkstk_darwin(v40, v41);
  v175 = (uint64_t *)((char *)&v159 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v45 = __chkstk_darwin(v42, v44);
  uint64_t v185 = (uint64_t)&v159 - v46;
  __chkstk_darwin(v45, v47);
  uint64_t v186 = (uint64_t)&v159 - v48;
  uint64_t v49 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49, v51);
  uint64_t v53 = (char *)&v159 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = sub_100007578(&qword_100256450);
  __chkstk_darwin(v54, v55);
  uint64_t v57 = (char *)&v159 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = sub_100007578(&qword_100251F18);
  uint64_t v60 = __chkstk_darwin(v58, v59);
  uint64_t v62 = (uint64_t *)((char *)&v159 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v64 = __chkstk_darwin(v60, v63);
  uint64_t v66 = (char *)&v159 - v65;
  __chkstk_darwin(v64, v67);
  uint64_t v69 = (char *)&v159 - v68;
  uint64_t v70 = *(void *)a1;
  uint64_t v71 = *((void *)a1 + 1);
  v188 = a1;
  v189 = a2;
  uint64_t v72 = *(void *)a2;
  uint64_t v73 = *((void *)a2 + 1);
  if (v70 == *(void *)a2 && v71 == v73
    || (char v74 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v72, v73, 0LL) & 1) != 0))
  {
    if ((uint64_t v75 = *((void *)v188 + 2),
          uint64_t v76 = *((void *)v188 + 3),
          uint64_t v77 = *((void *)v189 + 2),
          uint64_t v78 = *((void *)v189 + 3),
          v75 == v77)
      && v76 == v78
      || (char v74 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v77, v78, 0LL) & 1) != 0))
    {
      uint64_t v79 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
      sub_10000FC68((uint64_t)&v188[*(int *)(v79 + 28)], (uint64_t)v69, &qword_100251F18);
      sub_10000FC68((uint64_t)&v189[*(int *)(v79 + 28)], (uint64_t)v66, &qword_100251F18);
      uint64_t v80 = (uint64_t)&v57[*(int *)(v54 + 48)];
      sub_10000FC68((uint64_t)v69, (uint64_t)v57, &qword_100251F18);
      sub_10000FC68((uint64_t)v66, v80, &qword_100251F18);
      uint64_t v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
      if (v81((uint64_t)v57, 1LL, v49) == 1)
      {
        sub_100041590((uint64_t)v66, &qword_100251F18);
        sub_100041590((uint64_t)v69, &qword_100251F18);
        if (v81(v80, 1LL, v49) == 1)
        {
          sub_100041590((uint64_t)v57, &qword_100251F18);
LABEL_10:
          uint64_t v82 = v186;
          sub_10000FC68((uint64_t)&v188[*(int *)(v79 + 32)], v186, &qword_100256CA0);
          v159 = (int *)v79;
          uint64_t v83 = (uint64_t)&v189[*(int *)(v79 + 32)];
          uint64_t v84 = v185;
          sub_10000FC68(v83, v185, &qword_100256CA0);
          uint64_t v85 = v187;
          uint64_t v86 = v187 + *(int *)(v177 + 48);
          sub_10000FC68(v82, v187, &qword_100256CA0);
          sub_10000FC68(v84, v86, &qword_100256CA0);
          uint64_t v87 = v179;
          uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v178 + 48);
          if (v88(v85, 1LL, v179) == 1)
          {
            sub_100041590(v84, &qword_100256CA0);
            sub_100041590(v82, &qword_100256CA0);
            int v89 = v88(v86, 1LL, v87);
            uint64_t v91 = (uint64_t)v183;
            uint64_t v90 = v184;
            uint64_t v92 = v181;
            uint64_t v93 = (uint64_t)v182;
            uint64_t v94 = (uint64_t)v180;
            uint64_t v95 = v176;
            if (v89 == 1)
            {
              sub_100041590(v187, &qword_100256CA0);
LABEL_13:
              uint64_t v96 = v159;
              sub_10000FC68((uint64_t)&v188[v159[9]], v94, &qword_100257000);
              sub_10000FC68((uint64_t)&v189[v96[9]], v95, &qword_100257000);
              uint64_t v97 = v174;
              uint64_t v98 = v174 + *(int *)(v171 + 48);
              sub_10000FC68(v94, v174, &qword_100257000);
              uint64_t v99 = v97;
              sub_10000FC68(v95, v98, &qword_100257000);
              uint64_t v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v172 + 48);
              if (v100(v99, 1LL, v92) == 1)
              {
                sub_100041590(v95, &qword_100257000);
                uint64_t v99 = v174;
                sub_100041590(v94, &qword_100257000);
                if (v100(v98, 1LL, v92) == 1)
                {
                  sub_100041590(v99, &qword_100257000);
LABEL_46:
                  uint64_t v138 = v159;
                  sub_10000FC68((uint64_t)&v188[v159[10]], v91, &qword_100251F50);
                  sub_10000FC68((uint64_t)&v189[v138[10]], v93, &qword_100251F50);
                  uint64_t v139 = v168;
                  uint64_t v140 = v168 + *(int *)(v166 + 48);
                  sub_10000FC68(v91, v168, &qword_100251F50);
                  uint64_t v141 = v139;
                  sub_10000FC68(v93, v140, &qword_100251F50);
                  uint64_t v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48);
                  if (v142(v141, 1LL, v90) == 1)
                  {
                    sub_100041590(v93, &qword_100251F50);
                    uint64_t v141 = v168;
                    sub_100041590(v91, &qword_100251F50);
                    if (v142(v140, 1LL, v90) == 1)
                    {
                      sub_100041590(v141, &qword_100251F50);
LABEL_55:
                      uint64_t v150 = v159;
                      uint64_t v151 = v163;
                      v152 = *(void (**)(char *, char *, uint64_t))(v163 + 16);
                      v153 = v161;
                      uint64_t v154 = v173;
                      v152(v161, &v188[v159[6]], v173);
                      v155 = v162;
                      v152(v162, &v189[v150[6]], v154);
                      uint64_t v156 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                      char v74 = dispatch thunk of static Equatable.== infix(_:_:)(v153, v155, v154, v156);
                      v157 = *(void (**)(char *, uint64_t))(v151 + 8);
                      v157(v155, v154);
                      v157(v153, v154);
                      return v74 & 1;
                    }

                    goto LABEL_51;
                  }

                  uint64_t v143 = v164;
                  sub_10000FC68(v141, (uint64_t)v164, &qword_100251F50);
                  if (v142(v140, 1LL, v90) == 1)
                  {
                    sub_100041590(v93, &qword_100251F50);
                    sub_100041590(v91, &qword_100251F50);
                    sub_1000415CC((uint64_t)v143, type metadata accessor for AccountInfo);
LABEL_51:
                    uint64_t v101 = &qword_1002563E0;
                    uint64_t v102 = v141;
                    goto LABEL_33;
                  }

                  uint64_t v144 = v160;
                  sub_100041608(v140, (uint64_t)v160, type metadata accessor for AccountInfo);
                  if (*v143 == *v144)
                  {
                    uint64_t v145 = *(int *)(v90 + 20);
                    uint64_t v146 = (char *)v143 + v145;
                    uint64_t v147 = v141;
                    uint64_t v148 = (char *)v144 + v145;
                    uint64_t v149 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                    LOBYTE(v146) = dispatch thunk of static Equatable.== infix(_:_:)(v146, v148, v173, v149);
                    sub_1000415CC((uint64_t)v144, type metadata accessor for AccountInfo);
                    sub_100041590(v93, &qword_100251F50);
                    sub_100041590(v91, &qword_100251F50);
                    sub_1000415CC((uint64_t)v143, type metadata accessor for AccountInfo);
                    sub_100041590(v147, &qword_100251F50);
                    goto LABEL_34;
                  }

                  sub_1000415CC((uint64_t)v144, type metadata accessor for AccountInfo);
                  uint64_t v158 = v141;
                  uint64_t v109 = &qword_100251F50;
                  sub_100041590(v93, &qword_100251F50);
                  sub_100041590(v91, &qword_100251F50);
                  sub_1000415CC((uint64_t)v143, type metadata accessor for AccountInfo);
                  uint64_t v102 = v158;
                  goto LABEL_32;
                }

LABEL_38:
                uint64_t v101 = &qword_1002563E8;
                uint64_t v102 = v99;
                goto LABEL_33;
              }

              uint64_t v124 = v169;
              sub_10000FC68(v99, (uint64_t)v169, &qword_100257000);
              if (v100(v98, 1LL, v92) == 1)
              {
                sub_100041590(v176, &qword_100257000);
                sub_100041590(v94, &qword_100257000);
                sub_1000415CC((uint64_t)v124, type metadata accessor for Metrics);
                goto LABEL_38;
              }

              uint64_t v125 = v165;
              sub_100041608(v98, (uint64_t)v165, type metadata accessor for Metrics);
              uint64_t v126 = v124[1];
              uint64_t v127 = v125[1];
              uint64_t v128 = (uint64_t)v124;
              if (*v124 == *v125 && v126 == v127
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*v124, v126, *v125, v127, 0LL) & 1) != 0)
              {
                if ((uint64_t v129 = v124[2], v130 = v124[3], v131 = v125[2], v132 = v125[3], v129 == v131) && v130 == v132
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v129, v130, v131, v132, 0LL) & 1) != 0)
                {
                  uint64_t v133 = *(int *)(v92 + 24);
                  v134 = (char *)v124 + v133;
                  uint64_t v135 = (uint64_t)v125;
                  uint64_t v136 = (char *)v125 + v133;
                  uint64_t v137 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                  LOBYTE(v134) = dispatch thunk of static Equatable.== infix(_:_:)(v134, v136, v173, v137);
                  sub_1000415CC(v135, type metadata accessor for Metrics);
                  sub_100041590(v176, &qword_100257000);
                  sub_100041590(v94, &qword_100257000);
                  sub_1000415CC(v128, type metadata accessor for Metrics);
                  sub_100041590(v174, &qword_100257000);
                  goto LABEL_46;
                }
              }

              sub_1000415CC((uint64_t)v125, type metadata accessor for Metrics);
              uint64_t v109 = &qword_100257000;
              sub_100041590(v176, &qword_100257000);
              sub_100041590(v94, &qword_100257000);
              sub_1000415CC((uint64_t)v124, type metadata accessor for Metrics);
              uint64_t v102 = v174;
LABEL_32:
              uint64_t v101 = v109;
              goto LABEL_33;
            }
          }

          else
          {
            uint64_t v110 = v175;
            sub_10000FC68(v85, (uint64_t)v175, &qword_100256CA0);
            int v111 = v88(v86, 1LL, v87);
            uint64_t v91 = (uint64_t)v183;
            uint64_t v90 = v184;
            uint64_t v92 = v181;
            uint64_t v93 = (uint64_t)v182;
            uint64_t v94 = (uint64_t)v180;
            if (v111 != 1)
            {
              uint64_t v112 = v86;
              uint64_t v113 = v170;
              sub_100041608(v112, v170, type metadata accessor for SignedPeerDynamicInfo);
              sub_100041318(*v110, v110[1]);
              if ((v114 & 1) == 0 || (sub_100041318(v110[2], v110[3]), (v115 & 1) == 0))
              {
                sub_1000415CC(v113, type metadata accessor for SignedPeerDynamicInfo);
                uint64_t v109 = &qword_100256CA0;
                sub_100041590(v185, &qword_100256CA0);
                sub_100041590(v186, &qword_100256CA0);
                sub_1000415CC((uint64_t)v110, type metadata accessor for SignedPeerDynamicInfo);
                uint64_t v102 = v85;
                goto LABEL_32;
              }

              uint64_t v116 = *(int *)(v87 + 24);
              uint64_t v117 = (uint64_t)v110;
              uint64_t v118 = (char *)v110 + v116;
              uint64_t v119 = v113;
              uint64_t v120 = v113 + v116;
              uint64_t v121 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              LOBYTE(v118) = dispatch thunk of static Equatable.== infix(_:_:)(v118, v120, v173, v121);
              sub_1000415CC(v119, type metadata accessor for SignedPeerDynamicInfo);
              uint64_t v122 = v85;
              sub_100041590(v185, &qword_100256CA0);
              sub_100041590(v186, &qword_100256CA0);
              sub_1000415CC(v117, type metadata accessor for SignedPeerDynamicInfo);
              uint64_t v95 = v176;
              sub_100041590(v122, &qword_100256CA0);
              goto LABEL_13;
            }

            sub_100041590(v185, &qword_100256CA0);
            sub_100041590(v186, &qword_100256CA0);
            sub_1000415CC((uint64_t)v110, type metadata accessor for SignedPeerDynamicInfo);
          }

          uint64_t v101 = &qword_100256448;
          uint64_t v102 = v187;
LABEL_33:
          sub_100041590(v102, v101);
LABEL_34:
          char v74 = 0;
          return v74 & 1;
        }
      }

      else
      {
        sub_10000FC68((uint64_t)v57, (uint64_t)v62, &qword_100251F18);
        if (v81(v80, 1LL, v49) != 1)
        {
          sub_100041608(v80, (uint64_t)v53, type metadata accessor for SignedPeerStableInfo);
          sub_100041318(*v62, v62[1]);
          if ((v103 & 1) == 0 || (sub_100041318(v62[2], v62[3]), (v104 & 1) == 0))
          {
            sub_1000415CC((uint64_t)v53, type metadata accessor for SignedPeerStableInfo);
            uint64_t v109 = &qword_100251F18;
            sub_100041590((uint64_t)v66, &qword_100251F18);
            sub_100041590((uint64_t)v69, &qword_100251F18);
            sub_1000415CC((uint64_t)v62, type metadata accessor for SignedPeerStableInfo);
            uint64_t v102 = (uint64_t)v57;
            goto LABEL_32;
          }

          uint64_t v105 = *(int *)(v49 + 24);
          uint64_t v106 = (char *)v62 + v105;
          uint64_t v107 = &v53[v105];
          uint64_t v108 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v106) = dispatch thunk of static Equatable.== infix(_:_:)(v106, v107, v173, v108);
          sub_1000415CC((uint64_t)v53, type metadata accessor for SignedPeerStableInfo);
          sub_100041590((uint64_t)v66, &qword_100251F18);
          sub_100041590((uint64_t)v69, &qword_100251F18);
          sub_1000415CC((uint64_t)v62, type metadata accessor for SignedPeerStableInfo);
          sub_100041590((uint64_t)v57, &qword_100251F18);
          goto LABEL_10;
        }

        sub_100041590((uint64_t)v66, &qword_100251F18);
        sub_100041590((uint64_t)v69, &qword_100251F18);
        sub_1000415CC((uint64_t)v62, type metadata accessor for SignedPeerStableInfo);
      }

      uint64_t v101 = &qword_100256450;
      uint64_t v102 = (uint64_t)v57;
      goto LABEL_33;
    }
  }

  return v74 & 1;
}
}

    uint64_t v11 = v149;
LABEL_40:
    uint64_t v15 = v34;
    uint64_t v9 = v142;
    uint64_t v10 = v145;
    if ((v31 & 1) != 0)
    {
LABEL_41:
      if (v34 < v10) {
        goto LABEL_158;
      }
      if (v10 < v34)
      {
        uint64_t v54 = (uint64_t *)(v140 + 8 * v34);
        uint64_t v55 = v34;
        uint64_t v56 = v10;
        uint64_t v57 = (uint64_t *)(v11 + 8 * v10);
        do
        {
          if (v56 != --v55)
          {
            if (!v11) {
              goto LABEL_163;
            }
            uint64_t v58 = *v57;
            *uint64_t v57 = *v54;
            *uint64_t v54 = v58;
          }

          ++v56;
          --v54;
          ++v57;
        }

        while (v56 < v55);
      }

      uint64_t v15 = v34;
    }
  }

  if (v15 >= v146) {
    goto LABEL_75;
  }
  if (__OFSUB__(v15, v10)) {
    goto LABEL_156;
  }
  if (v15 - v10 >= v141) {
    goto LABEL_75;
  }
  if (__OFADD__(v10, v141)) {
    goto LABEL_159;
  }
  uint64_t v59 = v146;
  if (v10 + v141 < v146) {
    uint64_t v59 = v10 + v141;
  }
  if (v59 >= v10)
  {
    if (v15 == v59) {
      goto LABEL_75;
    }
    uint64_t v143 = v9;
    uint64_t v144 = v59;
    uint64_t v60 = v140 + 8 * v15;
LABEL_61:
    uint64_t v62 = v60;
    uint64_t v63 = *(void **)(v11 + 8 * v15);
    uint64_t v64 = v10;
    uint64_t v147 = v62;
    uint64_t v65 = v62;
    uint64_t v151 = v15;
    while (1)
    {
      uint64_t v66 = *(void **)v65;
      uint64_t v67 = v63;
      uint64_t v68 = v66;
      uint64_t v69 = [v67 v12[64]];
      if (v69 == [v68 v12[64]])
      {
        uint64_t v70 = [v67 policyHash];
        uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
        uint64_t v73 = v72;

        char v74 = [v68 policyHash];
        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        uint64_t v77 = v76;

        if (v71 == v75 && v73 == v77)
        {

          swift_bridgeObjectRelease_n(v73, 2LL);
          uint64_t v11 = v149;
          uint64_t v61 = v151;
          uint64_t v12 = &selRef_setAllSelves_;
LABEL_60:
          uint64_t v15 = v61 + 1;
          uint64_t v60 = v147 + 8;
          uint64_t v10 = v145;
          if (v15 != v144) {
            goto LABEL_61;
          }
          uint64_t v15 = v144;
          uint64_t v9 = v143;
LABEL_75:
          if (v15 < v10) {
            goto LABEL_151;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
            uint64_t v9 = sub_1001AC060(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
          }
          uint64_t v84 = *((void *)v9 + 2);
          uint64_t v83 = *((void *)v9 + 3);
          uint64_t v14 = v84 + 1;
          v152 = v15;
          if (v84 >= v83 >> 1) {
            uint64_t v9 = sub_1001AC060((char *)(v83 > 1), v84 + 1, 1, v9);
          }
          *((void *)v9 + 2) = v14;
          uint64_t v85 = v9 + 32;
          uint64_t v86 = &v9[16 * v84 + 32];
          *(void *)uint64_t v86 = v10;
          *((void *)v86 + 1) = v152;
          if (v84)
          {
LABEL_81:
            uint64_t v87 = v14 - 1;
            if (v14 >= 4)
            {
              uint64_t v92 = &v85[16 * v14];
              uint64_t v93 = *((void *)v92 - 8);
              uint64_t v94 = *((void *)v92 - 7);
              uint64_t v98 = __OFSUB__(v94, v93);
              uint64_t v95 = v94 - v93;
              if (v98) {
                goto LABEL_140;
              }
              uint64_t v97 = *((void *)v92 - 6);
              uint64_t v96 = *((void *)v92 - 5);
              uint64_t v98 = __OFSUB__(v96, v97);
              uint64_t v90 = v96 - v97;
              uint64_t v91 = v98;
              if (v98) {
                goto LABEL_141;
              }
              uint64_t v99 = v14 - 2;
              uint64_t v100 = &v85[16 * v14 - 32];
              uint64_t v102 = *(void *)v100;
              uint64_t v101 = *((void *)v100 + 1);
              uint64_t v98 = __OFSUB__(v101, v102);
              char v103 = v101 - v102;
              if (v98) {
                goto LABEL_143;
              }
              uint64_t v98 = __OFADD__(v90, v103);
              char v104 = v90 + v103;
              if (v98) {
                goto LABEL_146;
              }
              if (v104 >= v95)
              {
                uint64_t v122 = &v85[16 * v87];
                uint64_t v124 = *(void *)v122;
                uint64_t v123 = *((void *)v122 + 1);
                uint64_t v98 = __OFSUB__(v123, v124);
                uint64_t v125 = v123 - v124;
                if (v98) {
                  goto LABEL_150;
                }
                char v115 = v90 < v125;
              }

              else
              {
LABEL_94:
                if ((v91 & 1) != 0) {
                  goto LABEL_142;
                }
                uint64_t v99 = v14 - 2;
                uint64_t v105 = &v85[16 * v14 - 32];
                uint64_t v107 = *(void *)v105;
                uint64_t v106 = *((void *)v105 + 1);
                uint64_t v108 = __OFSUB__(v106, v107);
                uint64_t v109 = v106 - v107;
                uint64_t v110 = v108;
                if (v108) {
                  goto LABEL_145;
                }
                int v111 = &v85[16 * v87];
                uint64_t v113 = *(void *)v111;
                uint64_t v112 = *((void *)v111 + 1);
                uint64_t v98 = __OFSUB__(v112, v113);
                char v114 = v112 - v113;
                if (v98) {
                  goto LABEL_148;
                }
                if (__OFADD__(v109, v114)) {
                  goto LABEL_149;
                }
                if (v109 + v114 < v90) {
                  goto LABEL_106;
                }
                char v115 = v90 < v114;
              }

              if (v115) {
                uint64_t v87 = v99;
              }
            }

            else
            {
              if (v14 == 3)
              {
                int v89 = *((void *)v9 + 4);
                uint64_t v88 = *((void *)v9 + 5);
                uint64_t v98 = __OFSUB__(v88, v89);
                uint64_t v90 = v88 - v89;
                uint64_t v91 = v98;
                goto LABEL_94;
              }

              uint64_t v116 = *((void *)v9 + 4);
              uint64_t v117 = *((void *)v9 + 5);
              uint64_t v98 = __OFSUB__(v117, v116);
              uint64_t v109 = v117 - v116;
              uint64_t v110 = v98;
LABEL_106:
              if ((v110 & 1) != 0) {
                goto LABEL_144;
              }
              uint64_t v118 = &v85[16 * v87];
              uint64_t v120 = *(void *)v118;
              uint64_t v119 = *((void *)v118 + 1);
              uint64_t v98 = __OFSUB__(v119, v120);
              uint64_t v121 = v119 - v120;
              if (v98) {
                goto LABEL_147;
              }
              if (v121 < v109) {
                goto LABEL_14;
              }
            }

            uint64_t v126 = v87 - 1;
            if (v87 - 1 >= v14)
            {
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
              break;
            }

            if (!v11) {
              goto LABEL_162;
            }
            uint64_t v127 = &v85[16 * v126];
            uint64_t v128 = *(void *)v127;
            uint64_t v129 = &v85[16 * v87];
            uint64_t v130 = *((void *)v129 + 1);
            sub_1001551CC( (void **)(v11 + 8LL * *(void *)v127),  (id *)(v11 + 8LL * *(void *)v129),  v11 + 8 * v130,  v148);
            if (v1) {
              goto LABEL_134;
            }
            if (v130 < v128) {
              goto LABEL_137;
            }
            if (v87 > *((void *)v9 + 2)) {
              goto LABEL_138;
            }
            *(void *)uint64_t v127 = v128;
            *(void *)&v85[16 * v126 + 8] = v130;
            uint64_t v131 = *((void *)v9 + 2);
            if (v87 >= v131) {
              goto LABEL_139;
            }
            uint64_t v14 = v131 - 1;
            memmove(&v85[16 * v87], v129 + 16, 16 * (v131 - 1 - v87));
            *((void *)v9 + 2) = v131 - 1;
            uint64_t v12 = &selRef_setAllSelves_;
            if (v131 <= 2) {
              goto LABEL_14;
            }
            goto LABEL_81;
          }

          uint64_t v14 = 1LL;
LABEL_14:
          uint64_t v13 = v146;
          uint64_t v10 = v152;
          if (v152 >= v146) {
            goto LABEL_123;
          }
          goto LABEL_15;
        }

        uint64_t v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v73, v75, v77, 1LL);

        swift_bridgeObjectRelease(v73);
        swift_bridgeObjectRelease(v77);
        uint64_t v11 = v149;
        uint64_t v12 = &selRef_setAllSelves_;
        if ((v79 & 1) == 0) {
          goto LABEL_59;
        }
      }

      else
      {
        uint64_t v80 = [v67 v12[64]];
        uint64_t v81 = [v68 v12[64]];

        if (v80 >= v81)
        {
LABEL_59:
          uint64_t v61 = v151;
          goto LABEL_60;
        }
      }

      uint64_t v61 = v151;
      if (!v11) {
        goto LABEL_161;
      }
      uint64_t v82 = *(void **)v65;
      uint64_t v63 = *(void **)(v65 + 8);
      *(void *)uint64_t v65 = v63;
      *(void *)(v65 + 8) = v82;
      v65 -= 8LL;
      if (v151 == ++v64) {
        goto LABEL_60;
      }
    }
  }

  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
}

              sub_100172694(v1);
              return;
            }
          }
        }
      }
    }

        uint64_t v21 = 0LL;
        goto LABEL_6;
      }

      uint64_t v14 = v22;
      uint64_t v34 = v24;
    }

    else
    {
      uint64_t v23 = 0LL;
      uint64_t v34 = 0LL;
    }

    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v7 keyclass]);
    uint64_t v36 = [v35 isEqualToString:@"tlk"];

    if (!v36)
    {
      uint64_t v23 = 0LL;
      uint64_t v22 = v14;
      goto LABEL_22;
    }

    v70[0] = kSecClass;
    v70[1] = kSecUseDataProtectionKeychain;
    v71[0] = kSecClassInternetPassword;
    v71[1] = &__kCFBooleanTrue;
    v71[2] = @"com.apple.security.ckks";
    v70[2] = kSecAttrAccessGroup;
    v70[3] = kSecAttrDescription;
    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v7 keyclass]);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v63 stringByAppendingString:@"-nonsync"]);
    v71[3] = v37;
    v70[4] = kSecAttrServer;
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 zoneName]);
    v71[4] = v39;
    v70[5] = kSecAttrAccount;
    uint64_t v64 = v16;
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v7 uuid]);
    v71[5] = v40;
    v71[6] = &__kCFBooleanTrue;
    v70[6] = kSecReturnAttributes;
    v70[7] = kSecReturnData;
    v70[8] = kSecAttrSynchronizable;
    v71[7] = &__kCFBooleanTrue;
    v71[8] = &__kCFBooleanFalse;
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v71,  v70,  9LL));
    uint64_t v22 = [v41 mutableCopy];

    uint64_t v65 = 0LL;
    uint64_t v24 = (id *)objc_claimAutoreleasedReturnValue([v64 queryKeyMaterialInKeychain:v22 error:&v65]);
    uint64_t v23 = v65;

    if (v23)
    {
      if ([v23 code] == (id)-25300)
      {
        uint64_t v34 = v24;
LABEL_22:
        if (v61)
        {
          uint64_t v45 = v34;
          if (v19) {
            uint64_t v46 = (uint64_t)[v19 code];
          }
          else {
            uint64_t v46 = -50LL;
          }
          uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v19 code]));
          char *v61 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"securityd",  v46,  v58,  v19));

          uint64_t v34 = v45;
        }

        uint64_t v20 = v34;
        uint64_t v21 = v20;
        goto LABEL_5;
      }

      if (v61)
      {
        uint64_t v51 = v61;
        uint64_t v52 = [v23 code];
        v68[0] = NSLocalizedDescriptionKey;
        uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v23 code]));
        v68[1] = NSUnderlyingErrorKey;
        v69[0] = v53;
        v69[1] = v23;
        uint64_t v54 = v69;
        uint64_t v55 = v68;
        goto LABEL_37;
      }

      goto LABEL_38;
    }

    uint64_t v56 = sub_1001CF4C0(@"ckkskey", 0LL);
    uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v7 uuid]);
      *(_DWORD *)buf = 138412290;
      uint64_t v75 = v49;
      uint64_t v50 = "loaded a stashed TLK (%@)";
      goto LABEL_31;
    }

    goto LABEL_32;
  }

  uint64_t v21 = a5;
  if (a5)
  {
    uint64_t v42 = [v19 code];
    v78[0] = NSLocalizedDescriptionKey;
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v19 code]));
    v78[1] = NSUnderlyingErrorKey;
    v79[0] = v43;
    v79[1] = v19;
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v79,  v78,  2LL));
    void *v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"securityd",  v42,  v44));

    uint64_t v21 = 0LL;
  }

  uint64_t v24 = 0LL;
  uint64_t v22 = v14;
  uint64_t v23 = v19;
LABEL_6:

  return v21;
}

uint64_t _s18TrustedPeersHelper24GetSupportAppInfoRequestV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v97 = a1;
  uint64_t v98 = a2;
  uint64_t v89 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v86 = *(void *)(v89 - 8);
  uint64_t v3 = __chkstk_darwin(v89, v2);
  uint64_t v85 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3, v5);
  uint64_t v84 = (char *)&v83 - v6;
  uint64_t v94 = type metadata accessor for AccountInfo(0LL);
  uint64_t v91 = *(void *)(v94 - 8);
  __chkstk_darwin(v94, v7);
  uint64_t v87 = (_DWORD *)((char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v90 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v90, v9);
  uint64_t v95 = (uint64_t)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100007578(&qword_100251F50);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v88 = (_DWORD *)((char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v92 = (uint64_t)&v83 - v17;
  __chkstk_darwin(v16, v18);
  uint64_t v93 = (uint64_t)&v83 - v19;
  uint64_t v20 = type metadata accessor for Metrics(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (uint64_t *)((char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100007578(&qword_100257000);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v33 = (uint64_t *)((char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = __chkstk_darwin(v31, v34);
  uint64_t v37 = (char *)&v83 - v36;
  __chkstk_darwin(v35, v38);
  uint64_t v40 = (char *)&v83 - v39;
  SupportAppInfouint64_t Request = type metadata accessor for GetSupportAppInfoRequest(0LL);
  sub_10000FC68((uint64_t)v97 + *(int *)(SupportAppInfoRequest + 24), (uint64_t)v40, &qword_100257000);
  uint64_t v96 = SupportAppInfoRequest;
  sub_10000FC68((uint64_t)v98 + *(int *)(SupportAppInfoRequest + 24), (uint64_t)v37, &qword_100257000);
  uint64_t v42 = (uint64_t)&v28[*(int *)(v25 + 48)];
  sub_10000FC68((uint64_t)v40, (uint64_t)v28, &qword_100257000);
  sub_10000FC68((uint64_t)v37, v42, &qword_100257000);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v43((uint64_t)v28, 1LL, v20) == 1)
  {
    sub_100041590((uint64_t)v37, &qword_100257000);
    sub_100041590((uint64_t)v40, &qword_100257000);
    if (v43(v42, 1LL, v20) == 1)
    {
      sub_100041590((uint64_t)v28, &qword_100257000);
      goto LABEL_14;
    }

LABEL_14:
  uint64_t v56 = v96;
  uint64_t v57 = v97;
  uint64_t v58 = v93;
  sub_10000FC68((uint64_t)v97 + *(int *)(v96 + 28), v93, &qword_100251F50);
  uint64_t v59 = v98;
  uint64_t v60 = v92;
  sub_10000FC68((uint64_t)v98 + *(int *)(v56 + 28), v92, &qword_100251F50);
  uint64_t v61 = v95;
  uint64_t v62 = v95 + *(int *)(v90 + 48);
  sub_10000FC68(v58, v95, &qword_100251F50);
  sub_10000FC68(v60, v62, &qword_100251F50);
  uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  uint64_t v64 = v94;
  if (v63(v61, 1LL, v94) == 1)
  {
    sub_100041590(v60, &qword_100251F50);
    sub_100041590(v58, &qword_100251F50);
    if (v63(v62, 1LL, v64) == 1)
    {
      sub_100041590(v61, &qword_100251F50);
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v76 = v88;
  sub_10000FC68(v61, (uint64_t)v88, &qword_100251F50);
  if (v63(v62, 1LL, v64) == 1)
  {
    sub_100041590(v60, &qword_100251F50);
    sub_100041590(v58, &qword_100251F50);
    sub_1000415CC((uint64_t)v76, type metadata accessor for AccountInfo);
LABEL_21:
    uint64_t v44 = &qword_1002563E0;
    uint64_t v45 = v61;
    goto LABEL_27;
  }

  uint64_t v77 = v87;
  sub_100041608(v62, (uint64_t)v87, type metadata accessor for AccountInfo);
  if (*v76 != *v77)
  {
    sub_1000415CC((uint64_t)v77, type metadata accessor for AccountInfo);
    sub_100041590(v60, &qword_100251F50);
    sub_100041590(v58, &qword_100251F50);
    sub_1000415CC((uint64_t)v76, type metadata accessor for AccountInfo);
    uint64_t v45 = v61;
    uint64_t v44 = &qword_100251F50;
    goto LABEL_27;
  }

  uint64_t v78 = *(int *)(v64 + 20);
  uint64_t v79 = (char *)v76 + v78;
  uint64_t v80 = (char *)v77 + v78;
  uint64_t v81 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v79) = dispatch thunk of static Equatable.== infix(_:_:)(v79, v80, v89, v81);
  sub_1000415CC((uint64_t)v77, type metadata accessor for AccountInfo);
  sub_100041590(v60, &qword_100251F50);
  sub_100041590(v58, &qword_100251F50);
  sub_1000415CC((uint64_t)v76, type metadata accessor for AccountInfo);
  sub_100041590(v61, &qword_100251F50);
LABEL_17:
  if (*v57 != *v59) {
    goto LABEL_28;
  }
  uint64_t v65 = v96;
  uint64_t v66 = (char *)v57 + *(int *)(v96 + 20);
  uint64_t v67 = v86;
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  uint64_t v69 = v84;
  uint64_t v70 = v89;
  v68(v84, v66, v89);
  uint64_t v71 = (char *)v59 + *(int *)(v65 + 20);
  uint64_t v72 = v85;
  v68(v85, v71, v70);
  uint64_t v73 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v74 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v72, v70, v73);
  uint64_t v75 = *(void (**)(char *, uint64_t))(v67 + 8);
  v75(v72, v70);
  v75(v69, v70);
  return v74 & 1;
}

  return swift_bridgeObjectRelease_n(a1, 2LL);
}

    sub_100151880( (Swift::Int *)&v50,  v44,  (uint64_t (*)(void))type metadata accessor for PolicyMO,  &qword_100256BF8);
    sub_10000852C(v31, v32);

LABEL_16:
    a3 = v49;
    goto LABEL_17;
  }

  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v21);
  uint64_t v34 = [v19 version];
  uint64_t v35 = [v34 versionNumber];

  sub_100151B2C((uint64_t *)&v50, (uint64_t)v35);
  sub_10000852C(v46, v16);

  uint64_t result = [v20 hasChanges];
  a3 = v49;
  return result;
}

      uint64_t v39 = (os_log_s *)v38;
      goto LABEL_15;
    }

    if (v34)
    {
      char v103 = a8;
      uint64_t v102 = a7;
      char v104 = *(id *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v35 = (void **)swift_allocObject(&unk_100238708, 168LL, 7LL);
      v35[2] = a5;
      v35[3] = a6;
      v35[4] = a7;
      v35[5] = a8;
      v35[6] = a9;
      v35[7] = a10;
      v35[8] = v107;
      v35[9] = a3;
      uint64_t v38 = a11;
      uint64_t v39 = a12;
      v35[10] = a4;
      v35[11] = a11;
      v35[12] = a12;
      v35[13] = (void *)a13;
      v35[14] = (void *)a14;
      v35[15] = (void *)a15;
      v35[16] = (void *)a16;
      v35[17] = (void *)a17;
      v35[18] = (void *)a18;
      v35[19] = (void *)a19;
      v35[20] = (void *)a20;
      uint64_t v66 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238730, 32LL, 7LL);
      *(void *)v66->endpoint = sub_100171DA8;
      *(void *)v66->containerMap = v35;
      v110[3] = sub_100176BD4;
      int v111 = v66;
      aBlock = _NSConcreteStackBlock;
      v110[0] = 1107296256LL;
      v110[1] = sub_1000DC9F8;
      v110[2] = &unk_100238748;
      uint64_t v67 = _Block_copy(&aBlock);
      uint64_t v106 = v111;
      swift_bridgeObjectRetain(a10);
      swift_retain(a4);
      swift_bridgeObjectRetain(a11);
      swift_bridgeObjectRetain(a12);
      uint64_t v68 = v107;
      uint64_t v69 = a5;
      swift_bridgeObjectRetain(v102);
      uint64_t v70 = v103;
      uint64_t v71 = a9;
      sub_1000084E8(a13, a14);
      sub_1000084E8(a15, a16);
      sub_1000084E8(a17, a18);
      sub_1000084E8(a19, a20);
      swift_retain(v66);
      swift_release(v106, v72, v73, v74, v75, v76, v77, v78);
      [v104 performBlockAndWait:v67];

      _Block_release(v67);
      LOBYTE(v68) = swift_isEscapingClosureAtFileLocation(v66, "", 108LL, 6203LL, 45LL, 1LL);
      swift_release((_TtC18TrustedPeersHelper6Client *)v35, v79, v80, v81, v82, v83, v84, v85);
      swift_release(v66, v86, v87, v88, v89, v90, v91, v92);
      __break(1u);
      goto LABEL_14;
    }

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v94 = type metadata accessor for Logger(0LL);
    uint64_t v95 = sub_100006BAC(v94, (uint64_t)qword_1002567D0);
    uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
    uint64_t v97 = static os_log_type_t.info.getter(v96);
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v98 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "preapprovedJoin: no peers preapprove our key", v98, 2u);
      swift_slowDealloc(v98, -1LL, -1LL);
    }

    uint64_t v99 = sub_100043F74();
    uint64_t v100 = swift_allocError(&type metadata for ContainerError, v99, 0LL, 0LL);
    *(_OWORD *)uint64_t v101 = xmmword_1001E6910;
    *(_BYTE *)(v101 + 16) = 13;
    ((void (*)(void, void, void *, void, uint64_t))a3)(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v100);
    swift_errorRelease();
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v46, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v47 = swift_errorRetain(a2);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    uint64_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
    if (os_log_type_enabled(v48, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v54 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v54;
      *(_DWORD *)uint64_t v53 = 136446210;
      uint64_t v112 = a2;
      swift_errorRetain(a2);
      uint64_t v55 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v56 = String.init<A>(describing:)(&v112, v55);
      uint64_t v58 = (_TtC18TrustedPeersHelper6Client *)v57;
      uint64_t v112 = sub_10017C4C4(v56, v57, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v52,  "preapprovedJoin: Don't have my own keys: can't join: %{public}s",  v53,  0xCu);
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    ((void (*)(void, void, void *, void, uint64_t))a3)(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, a2);
  }

  uint64_t v22 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v22 + 48) + 8 * a2) = a1;
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v24 = __OFADD__(v23, 1LL);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v22 + 16) = v25;
  }
}

  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

  uint64_t v24 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v27;
  }
}

uint64_t sub_1000AA5E8( void *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v24 - v15;
  if ((a3(*a1, *(void *)a2) & 1) != 0 && (sub_10003DB0C(a1[1], *((void *)a2 + 1)) & 1) != 0)
  {
    uint64_t v17 = a4(0LL);
    uint64_t v18 = (char *)a1 + *(int *)(v17 + 24);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v19(v16, v18, v8);
    v19(v13, &a2[*(int *)(v17 + 24)], v8);
    uint64_t v20 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v8, v20);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v13, v8);
    v22(v16, v8);
  }

  else
  {
    char v21 = 0;
  }

  return v21 & 1;
}

uint64_t sub_1000AA734(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for JoinWithVoucherResponse);
}

uint64_t _s18TrustedPeersHelper38EscrowProxyFederationMoveRecordRequestV2eeoiySbAC_ACtFZ_0( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  char v74 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v73 = (char *)&v69 - v9;
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v72 = (uint64_t *)((char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100007578(&qword_100257000);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)&v69 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v69 - v28;
  uint64_t v30 = a1[1];
  uint64_t v31 = a2[1];
  if (*a1 == *a2 && v30 == v31
    || (char v32 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v30, *a2, v31, 0LL) & 1) != 0))
  {
    if ((uint64_t v33 = a1[2], v34 = a1[3], v35 = a2[2], v36 = a2[3], v33 == v35) && v34 == v36
      || (char v32 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 0LL) & 1) != 0))
    {
      if ((uint64_t v37 = a1[4], v38 = a1[5], v39 = a2[4], v40 = a2[5], v37 == v39) && v38 == v40
        || (char v32 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL) & 1) != 0))
      {
        uint64_t v71 = v22;
        uint64_t v41 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
        sub_10000FC68((uint64_t)a1 + *(int *)(v41 + 32), (uint64_t)v29, &qword_100257000);
        uint64_t v70 = v41;
        sub_10000FC68((uint64_t)a2 + *(int *)(v41 + 32), (uint64_t)v26, &qword_100257000);
        uint64_t v42 = (uint64_t)&v17[*(int *)(v14 + 48)];
        sub_10000FC68((uint64_t)v29, (uint64_t)v17, &qword_100257000);
        sub_10000FC68((uint64_t)v26, v42, &qword_100257000);
        uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
        if (v43((uint64_t)v17, 1LL, v10) == 1)
        {
          sub_100041590((uint64_t)v26, &qword_100257000);
          sub_100041590((uint64_t)v29, &qword_100257000);
          if (v43(v42, 1LL, v10) == 1)
          {
            sub_100041590((uint64_t)v17, &qword_100257000);
            uint64_t v44 = v76;
LABEL_13:
            uint64_t v45 = v70;
            uint64_t v46 = (char *)a1 + *(int *)(v70 + 28);
            uint64_t v47 = v75;
            uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
            uint64_t v49 = v73;
            v48(v73, v46, v44);
            uint64_t v50 = (char *)a2 + *(int *)(v45 + 28);
            uint64_t v51 = v74;
            v48(v74, v50, v44);
            uint64_t v52 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v51, v44, v52);
            uint64_t v53 = *(void (**)(char *, uint64_t))(v47 + 8);
            v53(v51, v44);
            v53(v49, v44);
            return v32 & 1;
          }
        }

        else
        {
          uint64_t v54 = v71;
          sub_10000FC68((uint64_t)v17, (uint64_t)v71, &qword_100257000);
          if (v43(v42, 1LL, v10) != 1)
          {
            uint64_t v58 = v72;
            sub_100041608(v42, (uint64_t)v72, type metadata accessor for Metrics);
            uint64_t v59 = v54[1];
            uint64_t v60 = v58[1];
            if (*v54 == *v58 && v59 == v60
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*v54, v59, *v58, v60, 0LL) & 1) != 0)
            {
              if ((v61 = v54[2], uint64_t v62 = v54[3], v63 = v58[2], v64 = v58[3], v61 == v63) && v62 == v64
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, v63, v64, 0LL) & 1) != 0)
              {
                uint64_t v65 = *(int *)(v10 + 24);
                uint64_t v66 = (char *)v54 + v65;
                uint64_t v67 = (char *)v58 + v65;
                uint64_t v68 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                uint64_t v44 = v76;
                LOBYTE(v66) = dispatch thunk of static Equatable.== infix(_:_:)(v66, v67, v76, v68);
                sub_1000415CC((uint64_t)v58, type metadata accessor for Metrics);
                sub_100041590((uint64_t)v26, &qword_100257000);
                sub_100041590((uint64_t)v29, &qword_100257000);
                sub_1000415CC((uint64_t)v54, type metadata accessor for Metrics);
                sub_100041590((uint64_t)v17, &qword_100257000);
LABEL_18:
                char v32 = 0;
                return v32 & 1;
              }
            }

            sub_1000415CC((uint64_t)v58, type metadata accessor for Metrics);
            sub_100041590((uint64_t)v26, &qword_100257000);
            sub_100041590((uint64_t)v29, &qword_100257000);
            sub_1000415CC((uint64_t)v54, type metadata accessor for Metrics);
            uint64_t v56 = (uint64_t)v17;
            uint64_t v55 = &qword_100257000;
LABEL_17:
            sub_100041590(v56, v55);
            goto LABEL_18;
          }

          sub_100041590((uint64_t)v26, &qword_100257000);
          sub_100041590((uint64_t)v29, &qword_100257000);
          sub_1000415CC((uint64_t)v54, type metadata accessor for Metrics);
        }

        uint64_t v55 = &qword_1002563E8;
        uint64_t v56 = (uint64_t)v17;
        goto LABEL_17;
      }
    }
  }

  return v32 & 1;
}

uint64_t sub_1000AAC5C(char *a1, char *a2, uint64_t a3, char *a4)
{
  uint64_t v109 = a4;
  uint64_t v110 = (char *)a3;
  uint64_t v106 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v100 = *(void *)(v106 - 8);
  uint64_t v7 = __chkstk_darwin(v106, v6);
  uint64_t v99 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v98 = (char *)&v93 - v10;
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  uint64_t v103 = *(void *)(v11 - 8);
  uint64_t v104 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v97 = (_DWORD *)((char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v102 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v102, v14);
  uint64_t v105 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100251F50);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v101 = (_DWORD *)((char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char *)&v93 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v93 - v25;
  uint64_t v27 = type metadata accessor for Metrics(0LL);
  uint64_t v107 = *(char **)(v27 - 8);
  uint64_t v108 = v27;
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (char *)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_100007578(&qword_100257000);
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v39 = (char *)&v93 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = __chkstk_darwin(v37, v40);
  uint64_t v43 = (char *)&v93 - v42;
  __chkstk_darwin(v41, v44);
  uint64_t v46 = (char *)&v93 - v45;
  uint64_t v94 = v30;
  uint64_t v95 = v26;
  uint64_t v110 = v39;
  uint64_t v96 = v23;
  uint64_t v47 = ((uint64_t (*)(void))v109)(0LL);
  uint64_t v48 = *(int *)(v47 + 24);
  uint64_t v109 = a1;
  sub_10000FC68((uint64_t)&a1[v48], (uint64_t)v46, &qword_100257000);
  sub_10000FC68((uint64_t)&a2[*(int *)(v47 + 24)], (uint64_t)v43, &qword_100257000);
  uint64_t v49 = (uint64_t)&v34[*(int *)(v31 + 48)];
  sub_10000FC68((uint64_t)v46, (uint64_t)v34, &qword_100257000);
  sub_10000FC68((uint64_t)v43, v49, &qword_100257000);
  uint64_t v50 = v108;
  uint64_t v51 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v107 + 6);
  uint64_t v52 = a2;
  if (v51((uint64_t)v34, 1LL, v108) == 1)
  {
    sub_100041590((uint64_t)v43, &qword_100257000);
    sub_100041590((uint64_t)v46, &qword_100257000);
    if (v51(v49, 1LL, v50) == 1)
    {
      sub_100041590((uint64_t)v34, &qword_100257000);
      uint64_t v53 = v106;
      goto LABEL_15;
    }

uint64_t sub_1000AB47C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for SetRecoveryKeyResponse);
}

uint64_t _s18TrustedPeersHelper22PolicyDocumentMapEntryV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v62 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v61 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v60 = (char *)&v59 - v8;
  uint64_t v9 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v64 = (uint64_t *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = sub_100007578(&qword_100251670);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100007578(&qword_100251668);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (uint64_t *)((char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v25 = (char *)&v59 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v59 - v27;
  uint64_t v29 = type metadata accessor for PolicyDocumentMapEntry(0LL);
  uint64_t v30 = *(int *)(v29 + 24);
  uint64_t v65 = a1;
  sub_10000FC68((uint64_t)a1 + v30, (uint64_t)v28, &qword_100251668);
  uint64_t v31 = v29;
  sub_10000FC68(v66 + *(int *)(v29 + 24), (uint64_t)v25, &qword_100251668);
  uint64_t v32 = (uint64_t)&v16[*(int *)(v13 + 48)];
  sub_10000FC68((uint64_t)v28, (uint64_t)v16, &qword_100251668);
  sub_10000FC68((uint64_t)v25, v32, &qword_100251668);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v33((uint64_t)v16, 1LL, v9) == 1)
  {
    sub_100041590((uint64_t)v25, &qword_100251668);
    sub_100041590((uint64_t)v28, &qword_100251668);
    if (v33(v32, 1LL, v9) == 1)
    {
      sub_100041590((uint64_t)v16, &qword_100251668);
      goto LABEL_4;
    }

    goto LABEL_8;
  }

  sub_10000FC68((uint64_t)v16, (uint64_t)v21, &qword_100251668);
  if (v33(v32, 1LL, v9) == 1)
  {
    sub_100041590((uint64_t)v25, &qword_100251668);
    sub_100041590((uint64_t)v28, &qword_100251668);
    sub_1000415CC((uint64_t)v21, type metadata accessor for PolicyDocumentKey);
LABEL_8:
    uint64_t v46 = &qword_100251670;
    uint64_t v47 = (uint64_t)v16;
LABEL_18:
    sub_100041590(v47, v46);
    goto LABEL_19;
  }

  uint64_t v48 = v64;
  sub_100041608(v32, (uint64_t)v64, type metadata accessor for PolicyDocumentKey);
  if (*v21 != *v48
    || ((uint64_t v49 = v21[1], v50 = v21[2], v51 = v48[1], v52 = v48[2], v49 == v51) ? (v53 = v50 == v52) : (v53 = 0),
        !v53 && (_stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, v51, v52, 0LL) & 1) == 0))
  {
    sub_1000415CC((uint64_t)v48, type metadata accessor for PolicyDocumentKey);
    sub_100041590((uint64_t)v25, &qword_100251668);
    sub_100041590((uint64_t)v28, &qword_100251668);
    sub_1000415CC((uint64_t)v21, type metadata accessor for PolicyDocumentKey);
    uint64_t v47 = (uint64_t)v16;
    uint64_t v46 = &qword_100251668;
    goto LABEL_18;
  }

  uint64_t v54 = *(int *)(v9 + 24);
  uint64_t v55 = (char *)v21 + v54;
  uint64_t v56 = (char *)v48 + v54;
  uint64_t v57 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v55) = dispatch thunk of static Equatable.== infix(_:_:)(v55, v56, v63, v57);
  sub_1000415CC((uint64_t)v48, type metadata accessor for PolicyDocumentKey);
  sub_100041590((uint64_t)v25, &qword_100251668);
  sub_100041590((uint64_t)v28, &qword_100251668);
  sub_1000415CC((uint64_t)v21, type metadata accessor for PolicyDocumentKey);
  sub_100041590((uint64_t)v16, &qword_100251668);
LABEL_4:
  uint64_t v34 = v65;
  uint64_t v35 = v66;
  sub_100041318(*v65, v65[1]);
  if ((v36 & 1) == 0)
  {
LABEL_19:
    char v44 = 0;
    return v44 & 1;
  }

  uint64_t v37 = (char *)v34 + *(int *)(v31 + 20);
  uint64_t v39 = v62;
  uint64_t v38 = v63;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  uint64_t v41 = v60;
  v40(v60, v37, v63);
  uint64_t v42 = v61;
  v40(v61, (char *)(v35 + *(int *)(v31 + 20)), v38);
  uint64_t v43 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v42, v38);
  v45(v41, v38);
  return v44 & 1;
}

uint64_t _s18TrustedPeersHelper8TLKShareV2eeoiySbAC_ACtFZ_0(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v47 - v11;
  uint64_t v13 = a1[1];
  uint64_t v14 = *((void *)a2 + 1);
  if (*a1 != *(void *)a2 || v13 != v14)
  {
    char v16 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v13, *(void *)a2, v14, 0LL) & 1) == 0) {
      return v16 & 1;
    }
  }

  if (a1[2] != *((void *)a2 + 2) || a1[3] != *((void *)a2 + 3)) {
    goto LABEL_29;
  }
  uint64_t v17 = a1[4];
  uint64_t v18 = a1[5];
  uint64_t v19 = *((void *)a2 + 4);
  uint64_t v20 = *((void *)a2 + 5);
  if (v17 != v19 || v18 != v20)
  {
    char v16 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL) & 1) == 0) {
      return v16 & 1;
    }
  }

  if (a1[6] != *((void *)a2 + 6)) {
    goto LABEL_29;
  }
  uint64_t v21 = a1[7];
  uint64_t v22 = a1[8];
  uint64_t v23 = *((void *)a2 + 7);
  uint64_t v24 = *((void *)a2 + 8);
  if (v21 == v23 && v22 == v24
    || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v23, v24, 0LL) & 1) != 0))
  {
    if ((uint64_t v25 = a1[9], v26 = a1[10], v27 = *((void *)a2 + 9), v28 = *((void *)a2 + 10), v25 == v27) && v26 == v28
      || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0LL) & 1) != 0))
    {
      if ((uint64_t v29 = a1[11], v30 = a1[12], v31 = *((void *)a2 + 11), v32 = *((void *)a2 + 12), v29 == v31)
        && v30 == v32
        || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0LL) & 1) != 0))
      {
        if ((uint64_t v33 = a1[13], v34 = a1[14], v35 = *((void *)a2 + 13), v36 = *((void *)a2 + 14), v33 == v35)
          && v34 == v36
          || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 0LL) & 1) != 0))
        {
          if (a1[15] == *((void *)a2 + 15))
          {
            uint64_t v37 = a1[16];
            uint64_t v38 = a1[17];
            uint64_t v39 = *((void *)a2 + 16);
            uint64_t v40 = *((void *)a2 + 17);
            if (v37 == v39 && v38 == v40
              || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL) & 1) != 0))
            {
              uint64_t v41 = type metadata accessor for TLKShare(0LL);
              uint64_t v42 = (char *)a1 + *(int *)(v41 + 60);
              uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
              v43(v12, v42, v4);
              v43(v9, &a2[*(int *)(v41 + 60)], v4);
              uint64_t v44 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v44);
              uint64_t v45 = *(void (**)(char *, uint64_t))(v5 + 8);
              v45(v9, v4);
              v45(v12, v4);
            }

            return v16 & 1;
          }

LABEL_29:
          char v16 = 0;
        }
      }
    }
  }

  return v16 & 1;
}

  __break(1u);
LABEL_30:
  __break(1u);
}

  swift_release(a1);
  return v28;
}

      goto LABEL_30;
    }

uint64_t sub_1000ABB98(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_10008AB84);
}

uint64_t _s18TrustedPeersHelper22GetRepairActionRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v90 = *(void *)(v92 - 8);
  uint64_t v5 = __chkstk_darwin(v92, v4);
  uint64_t v89 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v88 = (char *)&v86 - v8;
  uint64_t v97 = type metadata accessor for AccountInfo(0LL);
  uint64_t v94 = *(void *)(v97 - 8);
  __chkstk_darwin(v97, v9);
  uint64_t v87 = (_DWORD *)((char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v93 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v93, v11);
  uint64_t v98 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F50);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v91 = (_DWORD *)((char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v95 = (uint64_t)&v86 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v96 = (uint64_t)&v86 - v21;
  uint64_t v22 = type metadata accessor for Metrics(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (uint64_t *)((char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v27, v28);
  uint64_t v99 = (uint64_t)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100007578(&qword_100257000);
  uint64_t v32 = __chkstk_darwin(v30, v31);
  uint64_t v34 = (uint64_t *)((char *)&v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = __chkstk_darwin(v32, v35);
  uint64_t v38 = (char *)&v86 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v41 = (char *)&v86 - v40;
  uint64_t v42 = *(void *)(a1 + 8);
  uint64_t v43 = *(void *)(a2 + 8);
  if (*(void *)a1 == *(void *)a2 && v42 == v43
    || (char v44 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v42, *(void *)a2, v43, 0LL) & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
      || (sub_10003F56C(*(void **)(a1 + 24), *(void **)(a2 + 24)) & 1) == 0
      || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    {
      goto LABEL_33;
    }

    RepairActionuint64_t Request = type metadata accessor for GetRepairActionRequest(0LL);
    sub_10000FC68(a1 + *(int *)(RepairActionRequest + 36), (uint64_t)v41, &qword_100257000);
    uint64_t v86 = RepairActionRequest;
    sub_10000FC68(a2 + *(int *)(RepairActionRequest + 36), (uint64_t)v38, &qword_100257000);
    uint64_t v46 = v99;
    uint64_t v47 = v99 + *(int *)(v27 + 48);
    sub_10000FC68((uint64_t)v41, v99, &qword_100257000);
    sub_10000FC68((uint64_t)v38, v47, &qword_100257000);
    uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    if (v48(v46, 1LL, v22) == 1)
    {
      sub_100041590((uint64_t)v38, &qword_100257000);
      uint64_t v46 = v99;
      sub_100041590((uint64_t)v41, &qword_100257000);
      if (v48(v47, 1LL, v22) == 1)
      {
        sub_100041590(v46, &qword_100257000);
        goto LABEL_20;
      }
    }

    else
    {
      sub_10000FC68(v46, (uint64_t)v34, &qword_100257000);
      if (v48(v47, 1LL, v22) != 1)
      {
        sub_100041608(v47, (uint64_t)v26, type metadata accessor for Metrics);
        uint64_t v51 = v34[1];
        uint64_t v52 = v26[1];
        if ((*v34 != *v26 || v51 != v52)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(*v34, v51, *v26, v52, 0LL) & 1) == 0
          || ((v53 = v34[2], uint64_t v54 = v34[3], v55 = v26[2], v56 = v26[3], v53 != v55) || v54 != v56)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, v55, v56, 0LL) & 1) == 0)
        {
          sub_1000415CC((uint64_t)v26, type metadata accessor for Metrics);
          uint64_t v62 = &qword_100257000;
          sub_100041590((uint64_t)v38, &qword_100257000);
          sub_100041590((uint64_t)v41, &qword_100257000);
          sub_1000415CC((uint64_t)v34, type metadata accessor for Metrics);
          uint64_t v50 = v46;
          goto LABEL_31;
        }

        uint64_t v57 = *(int *)(v22 + 24);
        uint64_t v58 = (char *)v34 + v57;
        uint64_t v59 = (char *)v26 + v57;
        uint64_t v60 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        LOBYTE(v58) = dispatch thunk of static Equatable.== infix(_:_:)(v58, v59, v92, v60);
        sub_1000415CC((uint64_t)v26, type metadata accessor for Metrics);
        sub_100041590((uint64_t)v38, &qword_100257000);
        sub_100041590((uint64_t)v41, &qword_100257000);
        sub_1000415CC((uint64_t)v34, type metadata accessor for Metrics);
        sub_100041590(v46, &qword_100257000);
LABEL_20:
        uint64_t v61 = v86;
        uint64_t v62 = &qword_100251F50;
        uint64_t v63 = v96;
        sub_10000FC68(a1 + *(int *)(v86 + 40), v96, &qword_100251F50);
        uint64_t v64 = v95;
        sub_10000FC68(a2 + *(int *)(v61 + 40), v95, &qword_100251F50);
        uint64_t v65 = v98;
        uint64_t v66 = v98 + *(int *)(v93 + 48);
        sub_10000FC68(v63, v98, &qword_100251F50);
        sub_10000FC68(v64, v66, &qword_100251F50);
        uint64_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
        uint64_t v68 = v97;
        if (v67(v65, 1LL, v97) == 1)
        {
          sub_100041590(v64, &qword_100251F50);
          sub_100041590(v63, &qword_100251F50);
          if (v67(v66, 1LL, v68) == 1)
          {
            sub_100041590(v65, &qword_100251F50);
LABEL_29:
            uint64_t v75 = v86;
            uint64_t v76 = a1 + *(int *)(v86 + 32);
            uint64_t v77 = v90;
            uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
            uint64_t v79 = v88;
            uint64_t v80 = v92;
            v78(v88, v76, v92);
            uint64_t v81 = a2 + *(int *)(v75 + 32);
            uint64_t v82 = v89;
            v78(v89, v81, v80);
            uint64_t v83 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v44 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v82, v80, v83);
            uint64_t v84 = *(void (**)(char *, uint64_t))(v77 + 8);
            v84(v82, v80);
            v84(v79, v80);
            return v44 & 1;
          }

          goto LABEL_25;
        }

        uint64_t v69 = v91;
        sub_10000FC68(v65, (uint64_t)v91, &qword_100251F50);
        if (v67(v66, 1LL, v68) == 1)
        {
          sub_100041590(v64, &qword_100251F50);
          sub_100041590(v63, &qword_100251F50);
          sub_1000415CC((uint64_t)v69, type metadata accessor for AccountInfo);
LABEL_25:
          uint64_t v49 = &qword_1002563E0;
          uint64_t v50 = v65;
          goto LABEL_32;
        }

        uint64_t v70 = v87;
        sub_100041608(v66, (uint64_t)v87, type metadata accessor for AccountInfo);
        if (*v69 == *v70)
        {
          uint64_t v71 = *(int *)(v68 + 20);
          uint64_t v72 = (char *)v69 + v71;
          uint64_t v73 = (char *)v70 + v71;
          uint64_t v74 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v72) = dispatch thunk of static Equatable.== infix(_:_:)(v72, v73, v92, v74);
          sub_1000415CC((uint64_t)v70, type metadata accessor for AccountInfo);
          sub_100041590(v64, &qword_100251F50);
          sub_100041590(v63, &qword_100251F50);
          sub_1000415CC((uint64_t)v69, type metadata accessor for AccountInfo);
          sub_100041590(v65, &qword_100251F50);
LABEL_33:
          char v44 = 0;
          return v44 & 1;
        }

        sub_1000415CC((uint64_t)v70, type metadata accessor for AccountInfo);
        sub_100041590(v64, &qword_100251F50);
        sub_100041590(v63, &qword_100251F50);
        sub_1000415CC((uint64_t)v69, type metadata accessor for AccountInfo);
        uint64_t v50 = v65;
LABEL_31:
        uint64_t v49 = v62;
        goto LABEL_32;
      }

      sub_100041590((uint64_t)v38, &qword_100257000);
      sub_100041590((uint64_t)v41, &qword_100257000);
      sub_1000415CC((uint64_t)v34, type metadata accessor for Metrics);
    }

    uint64_t v49 = &qword_1002563E8;
    uint64_t v50 = v46;
LABEL_32:
    sub_100041590(v50, v49);
    goto LABEL_33;
  }

  return v44 & 1;
}

uint64_t _s18TrustedPeersHelper21SetRecoveryKeyRequestV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v144 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v137 = *(void *)(v144 - 8);
  uint64_t v5 = __chkstk_darwin(v144, v4);
  uint64_t v136 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v135 = (char *)&v131 - v8;
  uint64_t v146 = type metadata accessor for AccountInfo(0LL);
  uint64_t v142 = *(void *)(v146 - 8);
  __chkstk_darwin(v146, v9);
  uint64_t v138 = (_DWORD *)((char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v141 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v141, v11);
  uint64_t v147 = (char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F50);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v139 = (_DWORD *)((char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v145 = (char *)&v131 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v143 = (char *)&v131 - v21;
  uint64_t v22 = type metadata accessor for Metrics(0LL);
  uint64_t v149 = *(void *)(v22 - 8);
  uint64_t v150 = v22;
  __chkstk_darwin(v22, v23);
  uint64_t v140 = (uint64_t *)((char *)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v148 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v148, v25);
  uint64_t v151 = (uint64_t)&v131 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100007578(&qword_100257000);
  uint64_t v29 = __chkstk_darwin(v27, v28);
  uint64_t v31 = (char *)&v131 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v29, v32);
  uint64_t v152 = (uint64_t)&v131 - v34;
  __chkstk_darwin(v33, v35);
  uint64_t v153 = (uint64_t)&v131 - v36;
  uint64_t v37 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v39);
  uint64_t v41 = (char *)&v131 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_100007578(&qword_100256450);
  __chkstk_darwin(v42, v43);
  uint64_t v154 = (uint64_t)&v131 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_100007578(&qword_100251F18);
  uint64_t v47 = __chkstk_darwin(v45, v46);
  uint64_t v49 = (uint64_t *)((char *)&v131 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v51 = __chkstk_darwin(v47, v50);
  uint64_t v53 = (char *)&v131 - v52;
  __chkstk_darwin(v51, v54);
  uint64_t v56 = (char *)&v131 - v55;
  uint64_t v57 = *a1;
  uint64_t v58 = a1[1];
  uint64_t v59 = *a2;
  uint64_t v60 = a2[1];
  v155 = a2;
  if (v57 == v59 && v58 == v60
    || (char v61 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v59, v60, 0LL) & 1) != 0))
  {
    if ((uint64_t v62 = a1[2], v63 = a1[3], v64 = v155[2], v65 = v155[3], v62 == v64) && v63 == v65
      || (char v61 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v64, v65, 0LL) & 1) != 0))
    {
      uint64_t v66 = v155;
      sub_100041318(a1[4], a1[5]);
      if ((v67 & 1) == 0) {
        goto LABEL_42;
      }
      sub_100041318(a1[6], a1[7]);
      if ((v68 & 1) == 0) {
        goto LABEL_42;
      }
      uint64_t v132 = v31;
      uint64_t v69 = type metadata accessor for SetRecoveryKeyRequest(0LL);
      uint64_t v70 = *(int *)(v69 + 44);
      v134 = a1;
      sub_10000FC68((uint64_t)a1 + v70, (uint64_t)v56, &qword_100251F18);
      uint64_t v133 = (int *)v69;
      sub_10000FC68((uint64_t)v66 + *(int *)(v69 + 44), (uint64_t)v53, &qword_100251F18);
      uint64_t v71 = v154;
      uint64_t v72 = v154 + *(int *)(v42 + 48);
      sub_10000FC68((uint64_t)v56, v154, &qword_100251F18);
      sub_10000FC68((uint64_t)v53, v72, &qword_100251F18);
      uint64_t v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      if (v73(v71, 1LL, v37) == 1)
      {
        sub_100041590((uint64_t)v53, &qword_100251F18);
        sub_100041590((uint64_t)v56, &qword_100251F18);
        if (v73(v72, 1LL, v37) == 1)
        {
          sub_100041590(v71, &qword_100251F18);
          goto LABEL_12;
        }
      }

      else
      {
        sub_10000FC68(v71, (uint64_t)v49, &qword_100251F18);
        if (v73(v72, 1LL, v37) != 1)
        {
          sub_100041608(v72, (uint64_t)v41, type metadata accessor for SignedPeerStableInfo);
          sub_100041318(*v49, v49[1]);
          if ((v90 & 1) == 0 || (sub_100041318(v49[2], v49[3]), (v91 & 1) == 0))
          {
            sub_1000415CC((uint64_t)v41, type metadata accessor for SignedPeerStableInfo);
            uint64_t v96 = &qword_100251F18;
            sub_100041590((uint64_t)v53, &qword_100251F18);
            sub_100041590((uint64_t)v56, &qword_100251F18);
            sub_1000415CC((uint64_t)v49, type metadata accessor for SignedPeerStableInfo);
            uint64_t v89 = v71;
            goto LABEL_24;
          }

          uint64_t v92 = *(int *)(v37 + 24);
          uint64_t v93 = (char *)v49 + v92;
          uint64_t v94 = &v41[v92];
          uint64_t v95 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v93) = dispatch thunk of static Equatable.== infix(_:_:)(v93, v94, v144, v95);
          sub_1000415CC((uint64_t)v41, type metadata accessor for SignedPeerStableInfo);
          sub_100041590((uint64_t)v53, &qword_100251F18);
          sub_100041590((uint64_t)v56, &qword_100251F18);
          sub_1000415CC((uint64_t)v49, type metadata accessor for SignedPeerStableInfo);
          sub_100041590(v71, &qword_100251F18);
LABEL_12:
          uint64_t v74 = v134;
          uint64_t v75 = v155;
          if ((sub_10003F630(v134[8], v155[8]) & 1) == 0) {
            goto LABEL_42;
          }
          uint64_t v76 = v133;
          uint64_t v77 = v153;
          sub_10000FC68((uint64_t)v74 + v133[12], v153, &qword_100257000);
          uint64_t v78 = v152;
          sub_10000FC68((uint64_t)v75 + v76[12], v152, &qword_100257000);
          uint64_t v79 = v151;
          uint64_t v80 = v151 + *(int *)(v148 + 48);
          sub_10000FC68(v77, v151, &qword_100257000);
          sub_10000FC68(v78, v80, &qword_100257000);
          uint64_t v81 = v150;
          uint64_t v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
          if (v82(v79, 1LL, v150) == 1)
          {
            sub_100041590(v78, &qword_100257000);
            sub_100041590(v77, &qword_100257000);
            int v83 = v82(v80, 1LL, v81);
            uint64_t v85 = v146;
            uint64_t v84 = (uint64_t)v147;
            uint64_t v86 = (uint64_t)v143;
            uint64_t v87 = (uint64_t)v145;
            if (v83 == 1)
            {
              sub_100041590(v79, &qword_100257000);
LABEL_35:
              sub_10000FC68((uint64_t)v74 + v76[13], v86, &qword_100251F50);
              sub_10000FC68((uint64_t)v155 + v76[13], v87, &qword_100251F50);
              uint64_t v111 = v84 + *(int *)(v141 + 48);
              sub_10000FC68(v86, v84, &qword_100251F50);
              sub_10000FC68(v87, v111, &qword_100251F50);
              uint64_t v112 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
              if (v112(v84, 1LL, v85) == 1)
              {
                sub_100041590(v87, &qword_100251F50);
                sub_100041590(v86, &qword_100251F50);
                if (v112(v111, 1LL, v85) == 1)
                {
                  sub_100041590(v84, &qword_100251F50);
                  goto LABEL_47;
                }

                goto LABEL_40;
              }

              uint64_t v113 = v139;
              sub_10000FC68(v84, (uint64_t)v139, &qword_100251F50);
              if (v112(v111, 1LL, v85) == 1)
              {
                sub_100041590(v87, &qword_100251F50);
                sub_100041590(v86, &qword_100251F50);
                sub_1000415CC((uint64_t)v113, type metadata accessor for AccountInfo);
LABEL_40:
                uint64_t v88 = &qword_1002563E0;
                uint64_t v89 = v84;
                goto LABEL_41;
              }

              char v115 = v138;
              sub_100041608(v111, (uint64_t)v138, type metadata accessor for AccountInfo);
              if (*v113 == *v115)
              {
                uint64_t v116 = *(int *)(v85 + 20);
                uint64_t v117 = (char *)v113 + v116;
                uint64_t v118 = (uint64_t)v113;
                uint64_t v119 = (char *)v115 + v116;
                uint64_t v120 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                LOBYTE(v117) = dispatch thunk of static Equatable.== infix(_:_:)(v117, v119, v144, v120);
                sub_1000415CC((uint64_t)v115, type metadata accessor for AccountInfo);
                sub_100041590(v87, &qword_100251F50);
                sub_100041590(v86, &qword_100251F50);
                sub_1000415CC(v118, type metadata accessor for AccountInfo);
                sub_100041590(v84, &qword_100251F50);
                if ((v117 & 1) != 0)
                {
LABEL_47:
                  uint64_t v121 = v155;
                  if ((sub_10003F644(v74[9], v155[9]) & 1) != 0)
                  {
                    uint64_t v122 = (uint64_t)v74 + v76[10];
                    uint64_t v123 = v137;
                    uint64_t v124 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 16);
                    uint64_t v125 = v135;
                    uint64_t v126 = v144;
                    v124(v135, v122, v144);
                    uint64_t v127 = v136;
                    v124(v136, (uint64_t)v121 + v76[10], v126);
                    uint64_t v128 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                    char v61 = dispatch thunk of static Equatable.== infix(_:_:)(v125, v127, v126, v128);
                    uint64_t v129 = *(void (**)(char *, uint64_t))(v123 + 8);
                    v129(v127, v126);
                    v129(v125, v126);
                    return v61 & 1;
                  }
                }

LABEL_42:
                char v61 = 0;
                return v61 & 1;
              }

              sub_1000415CC((uint64_t)v115, type metadata accessor for AccountInfo);
              uint64_t v130 = (uint64_t)v113;
              uint64_t v96 = &qword_100251F50;
              sub_100041590(v87, &qword_100251F50);
              sub_100041590(v86, &qword_100251F50);
              sub_1000415CC(v130, type metadata accessor for AccountInfo);
              uint64_t v89 = v84;
              goto LABEL_24;
            }

      if (a10)
      {
        uint64_t v131 = [a10 excludedPeerIDs];
        v313 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v131,  &type metadata for String,  &protocol witness table for String);
      }

      else
      {
        v313 = &_swiftEmptySetSingleton;
      }

      uint64_t v132 = [v301 excludedPeerIDs];
      uint64_t v133 = (char *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v132,  &type metadata for String,  &protocol witness table for String);

      v134 = [*(id *)((char *)v95 + (void)v94) allCustodianRecoveryKeys];
      uint64_t v135 = sub_100007620(0LL, &qword_100256B80, &OBJC_CLASS___TPCustodianRecoveryKey_ptr);
      uint64_t v136 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v134, v135);

      if ((unint64_t)v136 >> 62)
      {
        if (v136 < 0) {
          v293 = v136;
        }
        else {
          v293 = v136 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v136);
        uint64_t v137 = _CocoaArrayWrapper.endIndex.getter(v293);
        swift_bridgeObjectRelease(v136);
      }

      else
      {
        uint64_t v137 = *(void *)((v136 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      uint64_t v138 = v301;
      v300 = v98;
      if (v137)
      {
        v297 = v133;
        v322 = _swiftEmptyArrayStorage;
        sub_10014E670(0, v137 & ~(v137 >> 63), 0);
        if (v137 < 0) {
          __break(1u);
        }
        uint64_t v139 = 0LL;
        uint64_t v140 = v322;
        do
        {
          if ((v136 & 0xC000000000000001LL) != 0) {
            uint64_t v141 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v139, v136);
          }
          else {
            uint64_t v141 = *(id *)(v136 + 8 * v139 + 32);
          }
          uint64_t v142 = v141;
          uint64_t v143 = [v141 peerID];
          uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
          uint64_t v146 = v145;

          v322 = v140;
          uint64_t v148 = v140[2];
          uint64_t v147 = v140[3];
          if (v148 >= v147 >> 1)
          {
            sub_10014E670(v147 > 1, v148 + 1, 1);
            uint64_t v140 = v322;
          }

          ++v139;
          v140[2] = v148 + 1;
          uint64_t v149 = &v140[2 * v148];
          v149[4] = v144;
          v149[5] = v146;
        }

        while (v137 != v139);
        swift_bridgeObjectRelease(v136);
        uint64_t v27 = v314;
        uint64_t v138 = v301;
        uint64_t v133 = v297;
      }

      else
      {
        swift_bridgeObjectRelease(v136);
        uint64_t v140 = _swiftEmptyArrayStorage;
      }

      if (v313[2] <= *((void *)v133 + 2) >> 3)
      {
        v322 = v133;
        uint64_t v152 = v313;
        sub_1001560D8((uint64_t)v313);
        swift_bridgeObjectRelease(v152);
        uint64_t v151 = v322;
      }

      else
      {
        uint64_t v150 = v313;
        uint64_t v151 = sub_10015626C((uint64_t)v313, (uint64_t)v133);
        swift_bridgeObjectRelease(v150);
      }

      uint64_t v153 = sub_1001566D4((uint64_t)v140, (uint64_t)v151);
      swift_bridgeObjectRelease(v140);
      if (*(void *)(v153 + 16))
      {
        uint64_t v154 = swift_retain(v153);
        v155 = (os_log_s *)Logger.logObject.getter(v154);
        v159 = static os_log_type_t.error.getter(v155, v156, v157, v158);
        if (os_log_type_enabled(v155, v159))
        {
          v160 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v161 = (void *)swift_slowAlloc(32LL, -1LL);
          v322 = v161;
          *(_DWORD *)v160 = 136315138;
          v162 = swift_retain(v153);
          uint64_t v163 = Set.description.getter(v162, &type metadata for String, &protocol witness table for String);
          v165 = v164;
          swift_release(v153);
          uint64_t v166 = v163;
          uint64_t v138 = v301;
          uint64_t v167 = v314;
          v318 = sub_10017C4C4(v166, v165, (uint64_t *)&v322);
          uint64_t v27 = v167;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v160 + 4, v160 + 12);
          swift_release_n(v153, 2LL);
          swift_bridgeObjectRelease(v165);
          _os_log_impl((void *)&_mh_execute_header, v155, v159, "Found CRKs that are being distrusted: %s", v160, 0xCu);
          swift_arrayDestroy(v161, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v161, -1LL, -1LL);
          swift_slowDealloc(v160, -1LL, -1LL);
        }

        else
        {

          swift_release_n(v153, 2LL);
        }

        uint64_t v171 = v312;
        uint64_t v172 = objc_allocWithZone(&OBJC_CLASS___SecTapToRadar);
        uint64_t v173 = String._bridgeToObjectiveC()();
        uint64_t v174 = String._bridgeToObjectiveC()();
        v175 = String._bridgeToObjectiveC()();
        uint64_t v176 = [v172 initTapToRadar:v173 description:v174 radar:v175];

        [v176 trigger];
        if ((v171 & 1) != 0) {
          goto LABEL_68;
        }
      }

      else
      {
        swift_release(v153);
        if ((v312 & 1) != 0)
        {
LABEL_68:
          uint64_t v170 = 1;
          goto LABEL_69;
        }
      }

      uint64_t v168 = v300;
      v169 = [v168 dynamicInfo];
      uint64_t v170 = sub_10016FFD0(v138, v169);

LABEL_69:
      uint64_t v177 = v310;
      uint64_t v178 = v138;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      uint64_t v179 = [v178 data];
      v180 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v179);
      v182 = v181;

      *uint64_t v177 = v180;
      v177[1] = v182;
      v183 = [v178 sig];
      uint64_t v184 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v183);
      uint64_t v186 = v185;

      v177[2] = v184;
      v177[3] = v186;
      swift_bridgeObjectRetain_n(v27, 2LL);
      uint64_t v187 = v178;
      v188 = (os_log_s *)Logger.logObject.getter(v187);
      v189 = static os_log_type_t.info.getter(v188);
      v190 = os_log_type_enabled(v188, v189);
      v313 = v187;
      if (v190)
      {
        v191 = swift_slowAlloc(22LL, -1LL);
        v192 = (void *)swift_slowAlloc(8LL, -1LL);
        v312 = swift_slowAlloc(32LL, -1LL);
        v322 = (void *)v312;
        *(_DWORD *)v191 = 136446466;
        swift_bridgeObjectRetain(v314);
        v193 = v317;
        v318 = sub_10017C4C4(v317, v314, (uint64_t *)&v322);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v191 + 4, v191 + 12);
        swift_bridgeObjectRelease_n(v314, 3LL);
        *(_WORD *)(v191 + 12) = 2114;
        v318 = (uint64_t)v187;
        v194 = v187;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v191 + 14, v191 + 22);
        *v192 = v311;

        _os_log_impl( (void *)&_mh_execute_header,  v188,  v189,  "updateTrustIfNeeded: attempting updateTrust for %{public}s with: %{public}@",  (uint8_t *)v191,  0x16u);
        v195 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v192, 1LL, v195);
        uint64_t v27 = v314;
        swift_slowDealloc(v192, -1LL, -1LL);
        v196 = v312;
        swift_arrayDestroy(v312, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v196, -1LL, -1LL);
        swift_slowDealloc(v191, -1LL, -1LL);

        v199 = v309;
      }

      else
      {

        v197 = swift_bridgeObjectRelease_n(v27, 2LL);
        v199 = v309;
        v193 = v317;
      }

      v200 = (uint64_t)v308;
      __chkstk_darwin(v197, v198);
      *(&v296 - 4) = (uint64_t)v315;
      *(&v296 - 3) = v193;
      v294 = v27;
      v295 = (uint64_t)v310;
      v201 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
      v202 = updated;
      static Message.with(_:)(sub_1001735E4, &v296 - 6, updated, v201);
      if (v325)
      {
        v203 = v305;
        v204 = v303;
        v205 = v325;
        _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
        v206 = [v205 data];
        v207 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v206);
        v209 = v208;

        *v204 = v207;
        v204[1] = v209;
        v210 = [v205 sig];
        v211 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v210);
        v213 = v212;

        v204[2] = v211;
        v204[3] = v213;
        v214 = v200 + *(int *)(v202 + 36);
        sub_100041590(v214, &qword_100251F18);
        sub_100041608((uint64_t)v204, v214, type metadata accessor for SignedPeerStableInfo);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v304 + 56))(v214, 0LL, 1LL, v203);
      }

      v215 = v315;
      v216 = *(void *)&v315[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      v217 = *(void *)&v315[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v315[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v216);
      v218 = swift_allocObject(&unk_100239838, 145LL, 7LL);
      v219 = (void (*)(void, void, void))v316;
      *(void *)(v218 + 16) = v215;
      *(void *)(v218 + 24) = v219;
      *(void *)(v218 + 32) = v199;
      v220 = v298;
      sub_1000B669C((uint64_t)v298, v218 + 40, &qword_100256E00);
      *(_BYTE *)(v218 + 144) = v170 & 1;
      v221 = *(void *)(v217 + 16);
      v222 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v221 + 32);
      v223 = v215;
      swift_retain(v199);
      sub_100173474( v220,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
      v222(v200, sub_100171B0C, v218, v216, v221);
      swift_release(v218);
      sub_1000415CC(v200, type metadata accessor for UpdateTrustRequest);

      sub_1000415CC((uint64_t)v310, type metadata accessor for SignedPeerDynamicInfo);
LABEL_75:
      char v67 = v325;
LABEL_76:

      return;
    }

              sub_100172694(v3);
              return;
            }
          }
        }
      }
    }

      uint64_t v5 = v89;
      uint64_t v3 = v86;
      if (!v10) {
        goto LABEL_7;
      }
LABEL_6:
      uint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
    }
  }

  uint64_t v15 = v6 + 1;
  if (v6 + 1 >= v88) {
    goto LABEL_52;
  }
  uint64_t v14 = *(void *)&v87[8 * v15];
  if (v14)
  {
LABEL_16:
    uint64_t v6 = v15;
    goto LABEL_17;
  }

  uint64_t v15 = v6 + 2;
  if (v6 + 2 >= v88)
  {
LABEL_52:
    swift_release(v5);
LABEL_53:
    sub_1000DE140();
    return;
  }

  uint64_t v14 = *(void *)&v87[8 * v15];
  if (v14) {
    goto LABEL_16;
  }
  uint64_t v15 = v6 + 3;
  if (v6 + 3 >= v88) {
    goto LABEL_52;
  }
  uint64_t v14 = *(void *)&v87[8 * v15];
  if (v14) {
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v6 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v6 >= v88) {
      goto LABEL_52;
    }
    uint64_t v14 = *(void *)&v87[8 * v6];
    ++v15;
    if (v14) {
      goto LABEL_17;
    }
  }

  __break(1u);
  swift_once(&qword_100250EB8, sub_1000DD078);
  uint64_t v73 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v73, (uint64_t)qword_1002567D0);
  swift_errorRetain(0LL);
  uint64_t v74 = swift_errorRetain(0LL);
  uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
  uint64_t v79 = static os_log_type_t.error.getter(v75, v76, v77, v78);
  if (os_log_type_enabled(v75, v79))
  {
    uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v81 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v80 = 138543362;
    swift_errorRetain(0LL);
    uint64_t v82 = _swift_stdlib_bridgeErrorToNSError(0LL);
    *(void *)&uint64_t v92 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v80 + 4, v80 + 12);
    *uint64_t v81 = v82;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v75,  v79,  "onqueueRemoveDuplicateMachineIDs error saving: %{public}@",  v80,  0xCu);
    int v83 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v81, 1LL, v83);
    swift_slowDealloc(v81, -1LL, -1LL);
    swift_slowDealloc(v80, -1LL, -1LL);

    swift_errorRelease();
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }

    char v61 = [v56 machineID];
    if (v61)
    {
      uint64_t v62 = v61;
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      uint64_t v65 = v64;

      if (v63 == a1 && v65 == v100)
      {
        swift_bridgeObjectRelease(v100, v66, v67, (int64_t)v100, v68, v69, v70, v71);
LABEL_46:
        if ([v56 status] == (id)1)
        {
          sub_100172694(v15);

          return 1LL;
        }

        if (qword_100250ED8 != -1) {
          swift_once(&qword_100250ED8, sub_1001A5008);
        }
        uint64_t v72 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v72, (uint64_t)qword_100257C18);
        swift_bridgeObjectRetain_n(v100, 2LL);
        uint64_t v73 = v56;
        uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
        uint64_t v75 = static os_log_type_t.info.getter(v74);
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = swift_slowAlloc(22LL, -1LL);
          int v98 = swift_slowAlloc(64LL, -1LL);
          uint64_t v103 = (void *)v98;
          *(_DWORD *)uint64_t v76 = 136446466;
          type = v75;
          swift_bridgeObjectRetain(v100);
          uint64_t v102 = sub_10017C4C4(a1, (unint64_t)v100, (uint64_t *)&v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v76 + 4, v76 + 12);
          swift_bridgeObjectRelease_n(v100, 3LL);
          *(_WORD *)(v76 + 12) = 2082;
          uint64_t v77 = v73;
          uint64_t v78 = [v77 description];
          uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
          uint64_t v81 = v80;

          uint64_t v102 = sub_10017C4C4(v79, (unint64_t)v81, (uint64_t *)&v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v76 + 14, v76 + 22);

          swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
          _os_log_impl( (void *)&_mh_execute_header,  v74,  type,  "machineID %{public}s not explicitly allowed: %{public}s",  (uint8_t *)v76,  0x16u);
          swift_arrayDestroy(v98, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v98, -1LL, -1LL);
          swift_slowDealloc(v76, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v100, 2LL);
        }

        sub_100172694(v15);
        return 0LL;
      }

      uint64_t v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, a1, v100, 0LL);
      swift_bridgeObjectRelease(v65, v42, v43, v44, v45, v46, v47, v48);
      if ((v41 & 1) != 0) {
        goto LABEL_46;
      }
    }

    a2 = v51;
    uint64_t v29 = v49;
  }

  if (v29)
  {
    uint64_t v49 = (v29 - 1) & v29;
    uint64_t v50 = __clz(__rbit64(v29)) | (a2 << 6);
    uint64_t v51 = a2;
LABEL_41:
    uint64_t v56 = *(id *)(*(void *)(v15 + 48) + 8 * v50);
    if (!v56) {
      goto LABEL_54;
    }
    goto LABEL_42;
  }

  uint64_t v57 = a2 + 1;
  if (!__OFADD__(a2, 1LL))
  {
    if (v57 >= v97) {
      goto LABEL_54;
    }
    uint64_t v58 = (unint64_t)v100;
    uint64_t v59 = *(void *)(v99 + 8 * v57);
    uint64_t v51 = a2 + 1;
    if (!v59)
    {
      uint64_t v51 = a2 + 2;
      uint64_t v59 = *(void *)(v99 + 8 * v51);
      if (!v59)
      {
        uint64_t v51 = a2 + 3;
        uint64_t v59 = *(void *)(v99 + 8 * v51);
        if (!v59)
        {
          uint64_t v51 = a2 + 4;
          uint64_t v59 = *(void *)(v99 + 8 * v51);
          if (!v59)
          {
            uint64_t v60 = a2 + 5;
            while (v97 != v60)
            {
              uint64_t v59 = *(void *)(v99 + 8 * v60++);
              if (v59)
              {
                uint64_t v51 = v60 - 1;
                goto LABEL_40;
              }
            }

              sub_100172694(v1);
              return;
            }
          }
        }
      }
    }

        __break(1u);
        goto LABEL_43;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_42;
  }

  uint64_t v108 = v48;
  _convertNSErrorToError(_:)(v48);

  swift_willThrow(v109);
  sub_10000852C(a9, a10);
  sub_10000852C(a7, a8);
  sub_10000852C(v124, v127);
  sub_10000852C(a1, a2);
  swift_unknownObjectRelease(v20);

  uint64_t v104 = v121;
  uint64_t v105 = &qword_100257000;
LABEL_34:

  sub_10000852C(*(void *)v104, *((void *)v104 + 1));
  if (v126) {
    sub_10000852C(*(void *)&v19[v105[424]], *(void *)&v19[v105[424] + 8]);
  }
LABEL_36:

  uint64_t v106 = type metadata accessor for BottledPeer();
  swift_deallocPartialClassInstance(v19, v106, 168LL, 7LL);
  return v19;
}

uint64_t sub_1000AD014(uint64_t a1, uint64_t a2)
{
  return sub_1000AD020(a1, a2, type metadata accessor for FetchChangesResponse);
}

uint64_t sub_1000AD020(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v52 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v10);
  uint64_t v51 = (char *)&v48 - v11;
  uint64_t v12 = type metadata accessor for Changes(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v48 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100256440);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v55 = (uint64_t)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v48 - v26;
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v48 - v29;
  uint64_t v31 = a3(0LL);
  uint64_t v32 = *(int *)(v31 + 20);
  uint64_t v49 = a1;
  sub_10000FC68(a1 + v32, (uint64_t)v30, (uint64_t *)&unk_100256C90);
  uint64_t v33 = *(int *)(v31 + 20);
  uint64_t v50 = a2;
  sub_10000FC68(a2 + v33, (uint64_t)v27, (uint64_t *)&unk_100256C90);
  uint64_t v34 = (uint64_t)&v19[*(int *)(v16 + 48)];
  sub_10000FC68((uint64_t)v30, (uint64_t)v19, (uint64_t *)&unk_100256C90);
  sub_10000FC68((uint64_t)v27, v34, (uint64_t *)&unk_100256C90);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v35((uint64_t)v19, 1LL, v12) != 1)
  {
    uint64_t v36 = v55;
    sub_10000FC68((uint64_t)v19, v55, (uint64_t *)&unk_100256C90);
    if (v35(v34, 1LL, v12) != 1)
    {
      uint64_t v37 = v48;
      sub_100041608(v34, v48, type metadata accessor for Changes);
      char v38 = _s18TrustedPeersHelper7ChangesV2eeoiySbAC_ACtFZ_0(v36, v37);
      sub_1000415CC(v37, type metadata accessor for Changes);
      sub_100041590((uint64_t)v27, (uint64_t *)&unk_100256C90);
      sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256C90);
      sub_1000415CC(v36, type metadata accessor for Changes);
      sub_100041590((uint64_t)v19, (uint64_t *)&unk_100256C90);
      if ((v38 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v45 = 0;
      return v45 & 1;
    }

    sub_100041590((uint64_t)v27, (uint64_t *)&unk_100256C90);
    sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256C90);
    sub_1000415CC(v36, type metadata accessor for Changes);
LABEL_6:
    sub_100041590((uint64_t)v19, &qword_100256440);
    goto LABEL_9;
  }

  sub_100041590((uint64_t)v27, (uint64_t *)&unk_100256C90);
  sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256C90);
  if (v35(v34, 1LL, v12) != 1) {
    goto LABEL_6;
  }
  sub_100041590((uint64_t)v19, (uint64_t *)&unk_100256C90);
LABEL_8:
  uint64_t v40 = v53;
  uint64_t v39 = v54;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  uint64_t v42 = v51;
  v41(v51, v49, v54);
  uint64_t v43 = v52;
  v41(v52, v50, v39);
  uint64_t v44 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v39, v44);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v40 + 8);
  v46(v43, v39);
  v46(v42, v39);
  return v45 & 1;
}

uint64_t sub_1000AD3F4(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for UpdateTrustResponse);
}

uint64_t sub_1000AD400(void *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = a1[1];
  uint64_t v16 = *((void *)a2 + 1);
  BOOL v17 = *a1 == *(void *)a2 && v15 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v15, *(void *)a2, v16, 0LL) & 1) != 0))
  {
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[3];
    uint64_t v21 = *((void *)a2 + 2);
    uint64_t v22 = *((void *)a2 + 3);
    BOOL v23 = v19 == v21 && v20 == v22;
    if (v23 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v21, v22, 0LL) & 1) != 0))
    {
      uint64_t v24 = a3(0LL);
      uint64_t v25 = (char *)a1 + *(int *)(v24 + 24);
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v26(v14, v25, v6);
      v26(v11, &a2[*(int *)(v24 + 24)], v6);
      uint64_t v27 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v11, v6, v27);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
      v28(v11, v6);
      v28(v14, v6);
    }
  }

  return v18 & 1;
}

uint64_t _s18TrustedPeersHelper19FetchChangesRequestV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v79 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v78 = (char *)&v75 - v9;
  uint64_t v87 = type metadata accessor for AccountInfo(0LL);
  uint64_t v84 = *(void *)(v87 - 8);
  __chkstk_darwin(v87, v10);
  uint64_t v77 = (_DWORD *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v83 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v83, v12);
  uint64_t v88 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100251F50);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v81 = (_DWORD *)((char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v85 = (uint64_t)&v75 - v20;
  __chkstk_darwin(v19, v21);
  uint64_t v86 = (uint64_t)&v75 - v22;
  uint64_t v23 = type metadata accessor for Metrics(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v82 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_100257000);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v35 = (uint64_t *)((char *)&v75 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = __chkstk_darwin(v33, v36);
  uint64_t v39 = (char *)&v75 - v38;
  __chkstk_darwin(v37, v40);
  uint64_t v42 = (char *)&v75 - v41;
  uint64_t v43 = *(void *)a1;
  uint64_t v44 = *((void *)a1 + 1);
  uint64_t v89 = a1;
  char v90 = a2;
  uint64_t v45 = *(void *)a2;
  uint64_t v46 = *((void *)a2 + 1);
  if (v43 == *(void *)a2 && v44 == v46
    || (char v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v45, v46, 0LL) & 1) != 0))
  {
    uint64_t v76 = v4;
    Changesuint64_t Request = (int *)type metadata accessor for FetchChangesRequest(0LL);
    sub_10000FC68((uint64_t)&v89[ChangesRequest[6]], (uint64_t)v42, &qword_100257000);
    sub_10000FC68((uint64_t)&v90[ChangesRequest[6]], (uint64_t)v39, &qword_100257000);
    uint64_t v49 = (uint64_t)&v30[*(int *)(v27 + 48)];
    sub_10000FC68((uint64_t)v42, (uint64_t)v30, &qword_100257000);
    sub_10000FC68((uint64_t)v39, v49, &qword_100257000);
    uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    if (v50((uint64_t)v30, 1LL, v23) == 1)
    {
      sub_100041590((uint64_t)v39, &qword_100257000);
      sub_100041590((uint64_t)v42, &qword_100257000);
      if (v50(v49, 1LL, v23) == 1)
      {
        sub_100041590((uint64_t)v30, &qword_100257000);
LABEL_11:
        uint64_t v55 = v86;
        sub_10000FC68((uint64_t)&v89[ChangesRequest[7]], v86, &qword_100251F50);
        uint64_t v56 = v85;
        sub_10000FC68((uint64_t)&v90[ChangesRequest[7]], v85, &qword_100251F50);
        uint64_t v57 = v88;
        uint64_t v58 = v88 + *(int *)(v83 + 48);
        sub_10000FC68(v55, v88, &qword_100251F50);
        sub_10000FC68(v56, v58, &qword_100251F50);
        uint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
        uint64_t v60 = v87;
        if (v59(v57, 1LL, v87) == 1)
        {
          sub_100041590(v56, &qword_100251F50);
          sub_100041590(v55, &qword_100251F50);
          if (v59(v58, 1LL, v60) == 1)
          {
            sub_100041590(v57, &qword_100251F50);
LABEL_19:
            uint64_t v67 = v80;
            char v68 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
            uint64_t v69 = v78;
            uint64_t v70 = v76;
            v68(v78, &v89[ChangesRequest[5]], v76);
            uint64_t v71 = v79;
            v68(v79, &v90[ChangesRequest[5]], v70);
            uint64_t v72 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v47 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v71, v70, v72);
            uint64_t v73 = *(void (**)(char *, uint64_t))(v67 + 8);
            v73(v71, v70);
            v73(v69, v70);
            return v47 & 1;
          }

          goto LABEL_16;
        }

        char v61 = v81;
        sub_10000FC68(v57, (uint64_t)v81, &qword_100251F50);
        if (v59(v58, 1LL, v60) == 1)
        {
          sub_100041590(v56, &qword_100251F50);
          sub_100041590(v55, &qword_100251F50);
          sub_1000415CC((uint64_t)v61, type metadata accessor for AccountInfo);
LABEL_16:
          uint64_t v51 = &qword_1002563E0;
          uint64_t v52 = v57;
          goto LABEL_21;
        }

        uint64_t v62 = v77;
        sub_100041608(v58, (uint64_t)v77, type metadata accessor for AccountInfo);
        if (*v61 != *v62)
        {
          sub_1000415CC((uint64_t)v62, type metadata accessor for AccountInfo);
          sub_100041590(v56, &qword_100251F50);
          sub_100041590(v55, &qword_100251F50);
          sub_1000415CC((uint64_t)v61, type metadata accessor for AccountInfo);
          uint64_t v52 = v57;
          uint64_t v51 = &qword_100251F50;
          goto LABEL_21;
        }

        uint64_t v63 = *(int *)(v60 + 20);
        uint64_t v64 = (char *)v61 + v63;
        uint64_t v65 = (char *)v62 + v63;
        uint64_t v66 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        LOBYTE(v64) = dispatch thunk of static Equatable.== infix(_:_:)(v64, v65, v76, v66);
        sub_1000415CC((uint64_t)v62, type metadata accessor for AccountInfo);
        sub_100041590(v56, &qword_100251F50);
        sub_100041590(v55, &qword_100251F50);
        sub_1000415CC((uint64_t)v61, type metadata accessor for AccountInfo);
        sub_100041590(v57, &qword_100251F50);
LABEL_22:
        char v47 = 0;
        return v47 & 1;
      }
    }

    else
    {
      sub_10000FC68((uint64_t)v30, (uint64_t)v35, &qword_100257000);
      if (v50(v49, 1LL, v23) != 1)
      {
        uint64_t v53 = v82;
        sub_100041608(v49, (uint64_t)v82, type metadata accessor for Metrics);
        char v54 = sub_1000AD400(v35, v53, type metadata accessor for Metrics);
        sub_1000415CC((uint64_t)v53, type metadata accessor for Metrics);
        sub_100041590((uint64_t)v39, &qword_100257000);
        sub_100041590((uint64_t)v42, &qword_100257000);
        sub_1000415CC((uint64_t)v35, type metadata accessor for Metrics);
        sub_100041590((uint64_t)v30, &qword_100257000);
        if ((v54 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_11;
      }

      sub_100041590((uint64_t)v39, &qword_100257000);
      sub_100041590((uint64_t)v42, &qword_100257000);
      sub_1000415CC((uint64_t)v35, type metadata accessor for Metrics);
    }

    uint64_t v51 = &qword_1002563E8;
    uint64_t v52 = (uint64_t)v30;
LABEL_21:
    sub_100041590(v52, v51);
    goto LABEL_22;
  }

  return v47 & 1;
}

uint64_t _s18TrustedPeersHelper18UpdateTrustRequestV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v205 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v184 = *(void *)(v205 - 8);
  uint64_t v5 = __chkstk_darwin(v205, v4);
  v183 = (char *)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  v182 = (char *)&v180 - v8;
  uint64_t v208 = type metadata accessor for AccountInfo(0LL);
  uint64_t v188 = *(void *)(v208 - 8);
  __chkstk_darwin(v208, v9);
  uint64_t v181 = (_DWORD *)((char *)&v180 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v187 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v187, v11);
  uint64_t v190 = (uint64_t)&v180 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F50);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v185 = (_DWORD *)((char *)&v180 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v189 = (uint64_t)&v180 - v19;
  __chkstk_darwin(v18, v20);
  v192 = (char *)&v180 - v21;
  uint64_t v195 = type metadata accessor for Metrics(0LL);
  uint64_t v194 = *(void *)(v195 - 8);
  __chkstk_darwin(v195, v22);
  uint64_t v186 = (char *)&v180 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v193 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v193, v24);
  uint64_t v199 = (uint64_t)&v180 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100007578(&qword_100257000);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  v207 = (char *)&v180 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v197 = (uint64_t)&v180 - v32;
  __chkstk_darwin(v31, v33);
  uint64_t v198 = (uint64_t)&v180 - v34;
  uint64_t v35 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v201 = *(void *)(v35 - 8);
  uint64_t v202 = v35;
  __chkstk_darwin(v35, v36);
  v191 = (char *)&v180 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v200 = sub_100007578(&qword_100256490);
  __chkstk_darwin(v200, v38);
  uint64_t v203 = (uint64_t)&v180 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_100007578(&qword_100256D20);
  uint64_t v42 = __chkstk_darwin(v40, v41);
  v196 = (char *)&v180 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v42, v44);
  uint64_t v211 = (uint64_t)&v180 - v46;
  __chkstk_darwin(v45, v47);
  uint64_t v212 = (uint64_t)&v180 - v48;
  uint64_t v213 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v210 = *(void *)(v213 - 8);
  __chkstk_darwin(v213, v49);
  uint64_t v204 = (uint64_t)&v180 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v209 = sub_100007578(&qword_100256448);
  __chkstk_darwin(v209, v51);
  v216 = (char *)&v180 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100007578(&qword_100256CA0);
  uint64_t v55 = __chkstk_darwin(v53, v54);
  v206 = (uint64_t *)((char *)&v180 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v58 = __chkstk_darwin(v55, v57);
  uint64_t v214 = (uint64_t)&v180 - v59;
  __chkstk_darwin(v58, v60);
  uint64_t v215 = (uint64_t)&v180 - v61;
  uint64_t v62 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v63 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v64);
  uint64_t v66 = (char *)&v180 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100007578(&qword_100256450);
  __chkstk_darwin(v67, v68);
  uint64_t v70 = (char *)&v180 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_100007578(&qword_100251F18);
  uint64_t v73 = __chkstk_darwin(v71, v72);
  uint64_t v75 = (uint64_t *)((char *)&v180 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v77 = __chkstk_darwin(v73, v76);
  uint64_t v79 = (char *)&v180 - v78;
  __chkstk_darwin(v77, v80);
  uint64_t v82 = (char *)&v180 - v81;
  uint64_t v83 = *(void *)a1;
  uint64_t v84 = *((void *)a1 + 1);
  v217 = a2;
  v218 = a1;
  uint64_t v85 = *a2;
  uint64_t v86 = a2[1];
  if (v83 == *a2 && v84 == v86
    || (char v87 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, v85, v86, 0LL) & 1) != 0))
  {
    if ((v88 = *((void *)v218 + 2), uint64_t v89 = *((void *)v218 + 3), v90 = v217[2], v91 = v217[3], v88 == v90)
      && v89 == v91
      || (char v87 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, v90, v91, 0LL) & 1) != 0))
    {
      uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
      sub_10000FC68((uint64_t)&v218[*(int *)(updated + 36)], (uint64_t)v82, &qword_100251F18);
      v180 = (int *)updated;
      sub_10000FC68((uint64_t)v217 + *(int *)(updated + 36), (uint64_t)v79, &qword_100251F18);
      uint64_t v93 = (uint64_t)&v70[*(int *)(v67 + 48)];
      sub_10000FC68((uint64_t)v82, (uint64_t)v70, &qword_100251F18);
      sub_10000FC68((uint64_t)v79, v93, &qword_100251F18);
      uint64_t v94 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
      if (v94((uint64_t)v70, 1LL, v62) == 1)
      {
        sub_100041590((uint64_t)v79, &qword_100251F18);
        sub_100041590((uint64_t)v82, &qword_100251F18);
        if (v94(v93, 1LL, v62) == 1)
        {
          sub_100041590((uint64_t)v70, &qword_100251F18);
          goto LABEL_10;
        }
      }

      else
      {
        sub_10000FC68((uint64_t)v70, (uint64_t)v75, &qword_100251F18);
        if (v94(v93, 1LL, v62) != 1)
        {
          sub_100041608(v93, (uint64_t)v66, type metadata accessor for SignedPeerStableInfo);
          sub_100041318(*v75, v75[1]);
          if ((v117 & 1) == 0 || (sub_100041318(v75[2], v75[3]), (v118 & 1) == 0))
          {
            uint64_t v123 = type metadata accessor for SignedPeerStableInfo;
            sub_1000415CC((uint64_t)v66, type metadata accessor for SignedPeerStableInfo);
            uint64_t v124 = &qword_100251F18;
            sub_100041590((uint64_t)v79, &qword_100251F18);
            sub_100041590((uint64_t)v82, &qword_100251F18);
            uint64_t v125 = (uint64_t)v75;
            goto LABEL_34;
          }

          uint64_t v119 = *(int *)(v62 + 24);
          uint64_t v120 = (char *)v75 + v119;
          uint64_t v121 = &v66[v119];
          uint64_t v122 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v120) = dispatch thunk of static Equatable.== infix(_:_:)(v120, v121, v205, v122);
          sub_1000415CC((uint64_t)v66, type metadata accessor for SignedPeerStableInfo);
          sub_100041590((uint64_t)v79, &qword_100251F18);
          sub_100041590((uint64_t)v82, &qword_100251F18);
          sub_1000415CC((uint64_t)v75, type metadata accessor for SignedPeerStableInfo);
          sub_100041590((uint64_t)v70, &qword_100251F18);
LABEL_10:
          uint64_t v95 = v180;
          uint64_t v96 = v218;
          uint64_t v97 = v215;
          sub_10000FC68((uint64_t)&v218[v180[10]], v215, &qword_100256CA0);
          int v98 = v217;
          uint64_t v99 = v214;
          sub_10000FC68((uint64_t)v217 + v95[10], v214, &qword_100256CA0);
          uint64_t v70 = v216;
          uint64_t v100 = (uint64_t)&v216[*(int *)(v209 + 48)];
          sub_10000FC68(v97, (uint64_t)v216, &qword_100256CA0);
          sub_10000FC68(v99, v100, &qword_100256CA0);
          uint64_t v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
          uint64_t v102 = v213;
          if (v101((uint64_t)v70, 1LL, v213) == 1)
          {
            sub_100041590(v99, &qword_100256CA0);
            sub_100041590(v97, &qword_100256CA0);
            int v103 = v101(v100, 1LL, v102);
            uint64_t v104 = v207;
            uint64_t v105 = v208;
            uint64_t v107 = v211;
            uint64_t v106 = v212;
            if (v103 == 1)
            {
              sub_100041590((uint64_t)v216, &qword_100256CA0);
              goto LABEL_13;
            }

            goto LABEL_28;
          }

          uint64_t v126 = v206;
          sub_10000FC68((uint64_t)v70, (uint64_t)v206, &qword_100256CA0);
          int v127 = v101(v100, 1LL, v102);
          uint64_t v107 = v211;
          uint64_t v106 = v212;
          if (v127 == 1)
          {
            sub_100041590(v214, &qword_100256CA0);
            sub_100041590(v215, &qword_100256CA0);
            sub_1000415CC((uint64_t)v126, type metadata accessor for SignedPeerDynamicInfo);
LABEL_28:
            char v115 = &qword_100256448;
            uint64_t v116 = (uint64_t)v216;
            goto LABEL_36;
          }

          uint64_t v128 = v100;
          uint64_t v129 = v204;
          sub_100041608(v128, v204, type metadata accessor for SignedPeerDynamicInfo);
          sub_100041318(*v126, v126[1]);
          if ((v130 & 1) != 0)
          {
            sub_100041318(v126[2], v126[3]);
            if ((v131 & 1) != 0)
            {
              uint64_t v132 = *(int *)(v213 + 24);
              uint64_t v133 = (char *)v126 + v132;
              uint64_t v134 = v129;
              uint64_t v135 = v129 + v132;
              uint64_t v136 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              LOBYTE(v133) = dispatch thunk of static Equatable.== infix(_:_:)(v133, v135, v205, v136);
              sub_1000415CC(v134, type metadata accessor for SignedPeerDynamicInfo);
              uint64_t v137 = (uint64_t)v70;
              sub_100041590(v214, &qword_100256CA0);
              sub_100041590(v215, &qword_100256CA0);
              uint64_t v105 = v208;
              sub_1000415CC((uint64_t)v206, type metadata accessor for SignedPeerDynamicInfo);
              uint64_t v104 = v207;
              sub_100041590(v137, &qword_100256CA0);
LABEL_13:
              if ((sub_10003F630(*((void *)v96 + 4), v98[4]) & 1) == 0
                || (sub_10003F644(*((void *)v96 + 5), v98[5]) & 1) == 0)
              {
                goto LABEL_37;
              }

              uint64_t v108 = v180;
              sub_10000FC68((uint64_t)&v96[v180[11]], v106, &qword_100256D20);
              sub_10000FC68((uint64_t)v98 + v108[11], v107, &qword_100256D20);
              uint64_t v109 = v203;
              uint64_t v110 = v203 + *(int *)(v200 + 48);
              sub_10000FC68(v106, v203, &qword_100256D20);
              uint64_t v111 = v109;
              sub_10000FC68(v107, v110, &qword_100256D20);
              uint64_t v112 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48);
              uint64_t v113 = v106;
              uint64_t v114 = v202;
              if (v112(v111, 1LL, v202) == 1)
              {
                sub_100041590(v107, &qword_100256D20);
                uint64_t v111 = v203;
                sub_100041590(v113, &qword_100256D20);
                if (v112(v110, 1LL, v114) == 1)
                {
                  sub_100041590(v111, &qword_100256D20);
                  goto LABEL_43;
                }
              }

              else
              {
                uint64_t v140 = v196;
                sub_10000FC68(v111, (uint64_t)v196, &qword_100256D20);
                if (v112(v110, 1LL, v114) != 1)
                {
                  uint64_t v141 = v191;
                  sub_100041608(v110, (uint64_t)v191, type metadata accessor for IdmsTrustedDevicesVersion);
                  char v142 = _s18TrustedPeersHelper04IdmsA14DevicesVersionV2eeoiySbAC_ACtFZ_0(v140, v141);
                  sub_1000415CC((uint64_t)v141, type metadata accessor for IdmsTrustedDevicesVersion);
                  sub_100041590(v211, &qword_100256D20);
                  sub_100041590(v212, &qword_100256D20);
                  sub_1000415CC((uint64_t)v140, type metadata accessor for IdmsTrustedDevicesVersion);
                  sub_100041590(v111, &qword_100256D20);
                  if ((v142 & 1) == 0) {
                    goto LABEL_37;
                  }
LABEL_43:
                  uint64_t v143 = v180;
                  uint64_t v144 = v198;
                  sub_10000FC68((uint64_t)&v96[v180[12]], v198, &qword_100257000);
                  uint64_t v145 = (uint64_t)v98 + v143[12];
                  uint64_t v146 = v197;
                  sub_10000FC68(v145, v197, &qword_100257000);
                  uint64_t v147 = v199;
                  uint64_t v148 = v199 + *(int *)(v193 + 48);
                  sub_10000FC68(v144, v199, &qword_100257000);
                  uint64_t v149 = v147;
                  sub_10000FC68(v146, v148, &qword_100257000);
                  uint64_t v150 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v194 + 48);
                  uint64_t v151 = v195;
                  if (v150(v149, 1LL, v195) == 1)
                  {
                    sub_100041590(v146, &qword_100257000);
                    uint64_t v149 = v199;
                    sub_100041590(v144, &qword_100257000);
                    int v152 = v150(v148, 1LL, v151);
                    uint64_t v153 = (uint64_t)v192;
                    if (v152 == 1)
                    {
                      sub_100041590(v149, &qword_100257000);
LABEL_50:
                      v157 = v180;
                      sub_10000FC68((uint64_t)&v96[v180[13]], v153, &qword_100251F50);
                      uint64_t v158 = v189;
                      sub_10000FC68((uint64_t)v98 + v157[13], v189, &qword_100251F50);
                      uint64_t v159 = v190;
                      uint64_t v160 = v190 + *(int *)(v187 + 48);
                      sub_10000FC68(v153, v190, &qword_100251F50);
                      uint64_t v161 = v159;
                      sub_10000FC68(v158, v160, &qword_100251F50);
                      v162 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
                      if (v162(v161, 1LL, v105) == 1)
                      {
                        sub_100041590(v158, &qword_100251F50);
                        uint64_t v161 = v190;
                        sub_100041590(v153, &qword_100251F50);
                        if (v162(v160, 1LL, v105) == 1)
                        {
                          sub_100041590(v161, &qword_100251F50);
LABEL_58:
                          uint64_t v171 = v180;
                          uint64_t v172 = v184;
                          uint64_t v173 = *(void (**)(char *, char *, uint64_t))(v184 + 16);
                          uint64_t v174 = v182;
                          uint64_t v175 = v205;
                          v173(v182, &v96[v180[8]], v205);
                          uint64_t v176 = (char *)v98 + v171[8];
                          uint64_t v177 = v183;
                          v173(v183, v176, v175);
                          uint64_t v178 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                          char v87 = dispatch thunk of static Equatable.== infix(_:_:)(v174, v177, v175, v178);
                          uint64_t v179 = *(void (**)(char *, uint64_t))(v172 + 8);
                          v179(v177, v175);
                          v179(v174, v175);
                          return v87 & 1;
                        }

                        goto LABEL_55;
                      }

                      uint64_t v163 = v185;
                      sub_10000FC68(v161, (uint64_t)v185, &qword_100251F50);
                      if (v162(v160, 1LL, v105) == 1)
                      {
                        sub_100041590(v189, &qword_100251F50);
                        sub_100041590(v153, &qword_100251F50);
                        sub_1000415CC((uint64_t)v163, type metadata accessor for AccountInfo);
LABEL_55:
                        char v115 = &qword_1002563E0;
                        uint64_t v116 = v161;
                        goto LABEL_36;
                      }

                      v164 = v181;
                      sub_100041608(v160, (uint64_t)v181, type metadata accessor for AccountInfo);
                      uint64_t v165 = (uint64_t)v163;
                      if (*v163 == *v164)
                      {
                        uint64_t v166 = *(int *)(v105 + 20);
                        uint64_t v167 = (char *)v163 + v166;
                        uint64_t v168 = (uint64_t)v164;
                        v169 = (char *)v164 + v166;
                        uint64_t v170 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                        LOBYTE(v167) = dispatch thunk of static Equatable.== infix(_:_:)(v167, v169, v205, v170);
                        sub_1000415CC(v168, type metadata accessor for AccountInfo);
                        sub_100041590(v189, &qword_100251F50);
                        sub_100041590(v153, &qword_100251F50);
                        sub_1000415CC(v165, type metadata accessor for AccountInfo);
                        sub_100041590(v190, &qword_100251F50);
                        goto LABEL_37;
                      }

                      sub_1000415CC((uint64_t)v164, type metadata accessor for AccountInfo);
                      uint64_t v124 = &qword_100251F50;
                      sub_100041590(v189, &qword_100251F50);
                      sub_100041590(v153, &qword_100251F50);
                      sub_1000415CC((uint64_t)v163, type metadata accessor for AccountInfo);
                      uint64_t v116 = v190;
                      goto LABEL_35;
                    }
                  }

                  else
                  {
                    sub_10000FC68(v149, (uint64_t)v104, &qword_100257000);
                    int v154 = v150(v148, 1LL, v151);
                    uint64_t v153 = (uint64_t)v192;
                    if (v154 != 1)
                    {
                      v155 = v186;
                      sub_100041608(v148, (uint64_t)v186, type metadata accessor for Metrics);
                      char v156 = sub_1000AD400(v104, v155, type metadata accessor for Metrics);
                      sub_1000415CC((uint64_t)v155, type metadata accessor for Metrics);
                      sub_100041590(v197, &qword_100257000);
                      sub_100041590(v198, &qword_100257000);
                      sub_1000415CC((uint64_t)v104, type metadata accessor for Metrics);
                      sub_100041590(v149, &qword_100257000);
                      if ((v156 & 1) == 0) {
                        goto LABEL_37;
                      }
                      goto LABEL_50;
                    }

                    sub_100041590(v197, &qword_100257000);
                    sub_100041590(v198, &qword_100257000);
                    sub_1000415CC((uint64_t)v104, type metadata accessor for Metrics);
                  }

                  char v115 = &qword_1002563E8;
                  uint64_t v116 = v149;
                  goto LABEL_36;
                }

                sub_100041590(v211, &qword_100256D20);
                sub_100041590(v212, &qword_100256D20);
                sub_1000415CC((uint64_t)v140, type metadata accessor for IdmsTrustedDevicesVersion);
              }

              char v115 = &qword_100256490;
              uint64_t v116 = v111;
              goto LABEL_36;
            }
          }

          uint64_t v138 = v126;
          uint64_t v123 = type metadata accessor for SignedPeerDynamicInfo;
          sub_1000415CC(v129, type metadata accessor for SignedPeerDynamicInfo);
          uint64_t v124 = &qword_100256CA0;
          sub_100041590(v214, &qword_100256CA0);
          sub_100041590(v215, &qword_100256CA0);
          uint64_t v125 = (uint64_t)v138;
LABEL_34:
          sub_1000415CC(v125, v123);
          uint64_t v116 = (uint64_t)v70;
LABEL_35:
          char v115 = v124;
          goto LABEL_36;
        }

        sub_100041590((uint64_t)v79, &qword_100251F18);
        sub_100041590((uint64_t)v82, &qword_100251F18);
        sub_1000415CC((uint64_t)v75, type metadata accessor for SignedPeerStableInfo);
      }

      char v115 = &qword_100256450;
      uint64_t v116 = (uint64_t)v70;
LABEL_36:
      sub_100041590(v116, v115);
LABEL_37:
      char v87 = 0;
    }
  }

  return v87 & 1;
}

uint64_t _s18TrustedPeersHelper18PasscodeGenerationV2eeoiySbAC_ACtFZ_0(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v20 - v11;
  if (*a1 == *(void *)a2)
  {
    uint64_t v13 = type metadata accessor for PasscodeGeneration(0LL);
    uint64_t v14 = (char *)a1 + *(int *)(v13 + 20);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v9, &a2[*(int *)(v13 + 20)], v4);
    uint64_t v16 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v9, v4);
    v18(v12, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t _s18TrustedPeersHelper17PolicyDocumentKeyV2eeoiySbAC_ACtFZ_0(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v25 - v11;
  if (*a1 == *(void *)a2)
  {
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
    uint64_t v15 = *((void *)a2 + 1);
    uint64_t v16 = *((void *)a2 + 2);
    BOOL v17 = v13 == v15 && v14 == v16;
    if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL) & 1) != 0))
    {
      uint64_t v19 = type metadata accessor for PolicyDocumentKey(0LL);
      uint64_t v20 = (char *)a1 + *(int *)(v19 + 24);
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v21(v12, v20, v4);
      v21(v9, &a2[*(int *)(v19 + 24)], v4);
      uint64_t v22 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v22);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v9, v4);
      v23(v12, v4);
    }
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t sub_1000AF16C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for EstablishResponse);
}

uint64_t sub_1000AF178(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v59 = a3;
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v54 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v53 = (char *)&v52 - v10;
  uint64_t v11 = type metadata accessor for Changes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v57 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100007578(&qword_100256440);
  __chkstk_darwin(v15, v16);
  char v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v21, v24);
  uint64_t v27 = (char *)&v52 - v26;
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v52 - v29;
  uint64_t v31 = ((uint64_t (*)(void))v59)(0LL);
  uint64_t v32 = *(int *)(v31 + 24);
  uint64_t v58 = a1;
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = v31;
  sub_10000FC68(v33, (uint64_t)v30, (uint64_t *)&unk_100256C90);
  uint64_t v35 = *(int *)(v34 + 24);
  uint64_t v59 = a2;
  sub_10000FC68((uint64_t)a2 + v35, (uint64_t)v27, (uint64_t *)&unk_100256C90);
  uint64_t v36 = (uint64_t)&v18[*(int *)(v15 + 48)];
  sub_10000FC68((uint64_t)v30, (uint64_t)v18, (uint64_t *)&unk_100256C90);
  sub_10000FC68((uint64_t)v27, v36, (uint64_t *)&unk_100256C90);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v37((uint64_t)v18, 1LL, v11) == 1)
  {
    sub_100041590((uint64_t)v27, (uint64_t *)&unk_100256C90);
    sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256C90);
    if (v37(v36, 1LL, v11) == 1)
    {
      sub_100041590((uint64_t)v18, (uint64_t *)&unk_100256C90);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_10000FC68((uint64_t)v18, (uint64_t)v23, (uint64_t *)&unk_100256C90);
  if (v37(v36, 1LL, v11) == 1)
  {
    sub_100041590((uint64_t)v27, (uint64_t *)&unk_100256C90);
    sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256C90);
    sub_1000415CC((uint64_t)v23, type metadata accessor for Changes);
LABEL_6:
    sub_100041590((uint64_t)v18, &qword_100256440);
LABEL_10:
    char v49 = 0;
    return v49 & 1;
  }

  uint64_t v38 = v57;
  sub_100041608(v36, v57, type metadata accessor for Changes);
  char v39 = _s18TrustedPeersHelper7ChangesV2eeoiySbAC_ACtFZ_0((uint64_t)v23, v38);
  sub_1000415CC(v38, type metadata accessor for Changes);
  sub_100041590((uint64_t)v27, (uint64_t *)&unk_100256C90);
  sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256C90);
  sub_1000415CC((uint64_t)v23, type metadata accessor for Changes);
  sub_100041590((uint64_t)v18, (uint64_t *)&unk_100256C90);
  if ((v39 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v40 = v58;
  uint64_t v41 = v59;
  if ((sub_10003DB0C(*v58, *v59) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v42 = (char *)v40 + *(int *)(v34 + 20);
  uint64_t v44 = v55;
  uint64_t v43 = v56;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  uint64_t v46 = v53;
  v45(v53, v42, v56);
  uint64_t v47 = v54;
  v45(v54, (char *)v41 + *(int *)(v34 + 20), v43);
  uint64_t v48 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v47, v43, v48);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v44 + 8);
  v50(v47, v43);
  v50(v46, v43);
  return v49 & 1;
}

uint64_t _s18TrustedPeersHelper17EscrowInformationV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  int v103 = a1;
  uint64_t v104 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v92 = *(void *)(v2 - 8);
  uint64_t v93 = v2;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v91 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v6);
  uint64_t v90 = (char *)&v89 - v7;
  uint64_t v100 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t v98 = *(void *)(v100 - 8);
  __chkstk_darwin(v100, v8);
  uint64_t v94 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = sub_100007578(&qword_100256430);
  __chkstk_darwin(v97, v10);
  uint64_t v101 = (uint64_t)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100007578(&qword_100252098);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v95 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v102 = (uint64_t)&v89 - v18;
  __chkstk_darwin(v17, v19);
  uint64_t v99 = (uint64_t)&v89 - v20;
  uint64_t v21 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100007578(&qword_100251638);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v32 = __chkstk_darwin(v30, v31);
  uint64_t v34 = (char *)&v89 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v32, v35);
  uint64_t v38 = (char *)&v89 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v41 = (char *)&v89 - v40;
  uint64_t v42 = type metadata accessor for EscrowInformation(0LL);
  sub_10000FC68((uint64_t)v103 + *(int *)(v42 + 48), (uint64_t)v41, (uint64_t *)&unk_100256D30);
  uint64_t v96 = v42;
  sub_10000FC68((uint64_t)v104 + *(int *)(v42 + 48), (uint64_t)v38, (uint64_t *)&unk_100256D30);
  uint64_t v43 = (uint64_t)&v29[*(int *)(v26 + 48)];
  sub_10000FC68((uint64_t)v41, (uint64_t)v29, (uint64_t *)&unk_100256D30);
  sub_10000FC68((uint64_t)v38, v43, (uint64_t *)&unk_100256D30);
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v44((uint64_t)v29, 1LL, v21) == 1)
  {
    sub_100041590((uint64_t)v38, (uint64_t *)&unk_100256D30);
    sub_100041590((uint64_t)v41, (uint64_t *)&unk_100256D30);
    if (v44(v43, 1LL, v21) == 1)
    {
      sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
      goto LABEL_9;
    }

uint64_t _s18TrustedPeersHelper17EscrowInformationV8MetadataV06ClientF0V2eeoiySbAG_AGtFZ_0( void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v84 = *(void *)(v4 - 8);
  uint64_t v85 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v83 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v82 = (char *)&v81 - v9;
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100007578(&qword_100251638);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v88 = (uint64_t)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v26 = (char *)&v81 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v81 - v28;
  uint64_t v30 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  uint64_t v31 = *(int *)(v30 + 64);
  uint64_t v86 = a1;
  uint64_t v32 = (uint64_t)a1 + v31;
  uint64_t v33 = v30;
  sub_10000FC68(v32, (uint64_t)v29, (uint64_t *)&unk_100256D30);
  uint64_t v34 = *(int *)(v33 + 64);
  char v87 = a2;
  sub_10000FC68((uint64_t)&a2[v34], (uint64_t)v26, (uint64_t *)&unk_100256D30);
  uint64_t v35 = (uint64_t)&v18[*(int *)(v15 + 48)];
  sub_10000FC68((uint64_t)v29, (uint64_t)v18, (uint64_t *)&unk_100256D30);
  sub_10000FC68((uint64_t)v26, v35, (uint64_t *)&unk_100256D30);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v18, 1LL, v10) == 1)
  {
    sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
    sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
    if (v36(v35, 1LL, v10) == 1)
    {
      sub_100041590((uint64_t)v18, (uint64_t *)&unk_100256D30);
      goto LABEL_8;
    }

uint64_t _s18TrustedPeersHelper17DirectPCSIdentityV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v76 = *(void *)(v3 - 8);
  uint64_t v77 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v75 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v74 = (char *)&v72 - v8;
  uint64_t v84 = type metadata accessor for PCSService(0LL);
  uint64_t v81 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v9);
  uint64_t v73 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_100007578(&qword_100256410);
  __chkstk_darwin(v80, v11);
  uint64_t v85 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_1002517F8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v78 = (uint64_t)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v82 = (uint64_t)&v72 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v83 = (uint64_t)&v72 - v21;
  uint64_t v22 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v79 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100007578(&qword_100256408);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100007578(&qword_1002517E0);
  uint64_t v32 = __chkstk_darwin(v30, v31);
  uint64_t v34 = (char *)&v72 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v32, v35);
  uint64_t v38 = (char *)&v72 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v41 = (char *)&v72 - v40;
  uint64_t v42 = type metadata accessor for DirectPCSIdentity(0LL);
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v86 = a1;
  sub_10000FC68(a1 + v43, (uint64_t)v41, &qword_1002517E0);
  sub_10000FC68(v87 + *(int *)(v42 + 20), (uint64_t)v38, &qword_1002517E0);
  uint64_t v44 = (uint64_t)&v29[*(int *)(v26 + 48)];
  sub_10000FC68((uint64_t)v41, (uint64_t)v29, &qword_1002517E0);
  sub_10000FC68((uint64_t)v38, v44, &qword_1002517E0);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v45((uint64_t)v29, 1LL, v22) != 1)
  {
    sub_10000FC68((uint64_t)v29, (uint64_t)v34, &qword_1002517E0);
    if (v45(v44, 1LL, v22) != 1)
    {
      uint64_t v48 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v79, v44, v22);
      uint64_t v49 = sub_1000077B8( &qword_100251630,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)(v34, v48, v22, v49);
      uint64_t v51 = *(void (**)(char *, uint64_t))(v23 + 8);
      v51(v48, v22);
      sub_100041590((uint64_t)v38, &qword_1002517E0);
      sub_100041590((uint64_t)v41, &qword_1002517E0);
      v51(v34, v22);
      sub_100041590((uint64_t)v29, &qword_1002517E0);
      if ((v50 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }

    sub_100041590((uint64_t)v38, &qword_1002517E0);
    sub_100041590((uint64_t)v41, &qword_1002517E0);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v34, v22);
LABEL_6:
    uint64_t v46 = &qword_100256408;
    uint64_t v47 = (uint64_t)v29;
LABEL_14:
    sub_100041590(v47, v46);
    goto LABEL_15;
  }

  sub_100041590((uint64_t)v38, &qword_1002517E0);
  sub_100041590((uint64_t)v41, &qword_1002517E0);
  if (v45(v44, 1LL, v22) != 1) {
    goto LABEL_6;
  }
  sub_100041590((uint64_t)v29, &qword_1002517E0);
LABEL_8:
  uint64_t v52 = v86;
  uint64_t v53 = v83;
  sub_10000FC68(v86 + *(int *)(v42 + 24), v83, &qword_1002517F8);
  uint64_t v54 = v87;
  uint64_t v55 = v82;
  sub_10000FC68(v87 + *(int *)(v42 + 24), v82, &qword_1002517F8);
  uint64_t v56 = v85;
  uint64_t v57 = v85 + *(int *)(v80 + 48);
  sub_10000FC68(v53, v85, &qword_1002517F8);
  sub_10000FC68(v55, v57, &qword_1002517F8);
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  uint64_t v59 = v84;
  if (v58(v56, 1LL, v84) == 1)
  {
    sub_100041590(v55, &qword_1002517F8);
    sub_100041590(v53, &qword_1002517F8);
    if (v58(v57, 1LL, v59) == 1)
    {
      sub_100041590(v56, &qword_1002517F8);
LABEL_18:
      uint64_t v66 = v76;
      uint64_t v65 = v77;
      uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
      uint64_t v68 = v74;
      v67(v74, v52, v77);
      uint64_t v69 = v75;
      v67(v75, v54, v65);
      uint64_t v70 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v61 = dispatch thunk of static Equatable.== infix(_:_:)(v68, v69, v65, v70);
      uint64_t v71 = *(void (**)(char *, uint64_t))(v66 + 8);
      v71(v69, v65);
      v71(v68, v65);
      return v61 & 1;
    }

    goto LABEL_13;
  }

  uint64_t v60 = v78;
  sub_10000FC68(v56, v78, &qword_1002517F8);
  if (v58(v57, 1LL, v59) == 1)
  {
    sub_100041590(v55, &qword_1002517F8);
    sub_100041590(v53, &qword_1002517F8);
    sub_1000415CC(v60, type metadata accessor for PCSService);
LABEL_13:
    uint64_t v46 = &qword_100256410;
    uint64_t v47 = v56;
    goto LABEL_14;
  }

  uint64_t v63 = v73;
  sub_100041608(v57, v73, type metadata accessor for PCSService);
  char v64 = _s18TrustedPeersHelper10PCSServiceV2eeoiySbAC_ACtFZ_0(v60, v63);
  sub_1000415CC(v63, type metadata accessor for PCSService);
  sub_100041590(v55, &qword_1002517F8);
  sub_100041590(v53, &qword_1002517F8);
  sub_1000415CC(v60, type metadata accessor for PCSService);
  sub_100041590(v56, &qword_1002517F8);
  if ((v64 & 1) != 0) {
    goto LABEL_18;
  }
LABEL_15:
  char v61 = 0;
  return v61 & 1;
}

uint64_t _s18TrustedPeersHelper16SupportAppDeviceV2eeoiySbAC_ACtFZ_0()
{
  uint64_t v81 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v0 = *(void *)(v81 - 8);
  uint64_t v2 = __chkstk_darwin(v81, v1);
  uint64_t v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2, v5);
  uint64_t v7 = (char *)&v72 - v6;
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251638);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v23 = (char *)&v72 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v29 = (char *)&v72 - v28;
  if (*v26 != *v25) {
    goto LABEL_20;
  }
  uint64_t v77 = v12;
  uint64_t v78 = v13;
  uint64_t v79 = v9;
  uint64_t v80 = v16;
  uint64_t v74 = v7;
  uint64_t v75 = v4;
  uint64_t v76 = v0;
  if (v26[1] != v25[1] || v26[2] != v25[2]) {
    goto LABEL_20;
  }
  uint64_t v30 = v27;
  uint64_t v31 = *((void *)v26 + 1);
  uint64_t v32 = *((void *)v26 + 2);
  uint64_t v33 = *((void *)v25 + 1);
  uint64_t v34 = *((void *)v25 + 2);
  if (v31 != v33 || v32 != v34)
  {
    uint64_t v35 = v25;
    uint64_t v36 = v26;
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0LL);
    uint64_t v26 = v36;
    uint64_t v25 = v35;
    char v38 = 0;
    if ((v37 & 1) == 0) {
      return v38 & 1;
    }
  }

  uint64_t v39 = v25;
  uint64_t v40 = v26;
  if ((sub_10003F82C(*((void *)v26 + 3), *((void *)v25 + 3)) & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v41 = type metadata accessor for SupportAppDevice(0LL);
  uint64_t v42 = *(int *)(v41 + 48);
  uint64_t v73 = v40;
  sub_10000FC68((uint64_t)&v40[v42], (uint64_t)v29, (uint64_t *)&unk_100256D30);
  uint64_t v43 = *(int *)(v41 + 48);
  uint64_t v72 = v39;
  sub_10000FC68((uint64_t)&v39[v43], (uint64_t)v23, (uint64_t *)&unk_100256D30);
  uint64_t v44 = (uint64_t)v80;
  uint64_t v45 = (uint64_t)&v80[*(int *)(v78 + 48)];
  sub_10000FC68((uint64_t)v29, (uint64_t)v80, (uint64_t *)&unk_100256D30);
  sub_10000FC68((uint64_t)v23, v45, (uint64_t *)&unk_100256D30);
  uint64_t v46 = v79;
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  if (v47(v44, 1LL, v8) != 1)
  {
    sub_10000FC68(v44, v30, (uint64_t *)&unk_100256D30);
    if (v47(v45, 1LL, v8) == 1)
    {
      sub_100041590((uint64_t)v23, (uint64_t *)&unk_100256D30);
      sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v8);
      goto LABEL_13;
    }

    uint64_t v48 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v77, v45, v8);
    uint64_t v49 = sub_1000077B8( &qword_100251640,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
    uint64_t v50 = v8;
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v48, v8, v49);
    uint64_t v52 = v44;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v46 + 8);
    v53(v48, v50);
    sub_100041590((uint64_t)v23, (uint64_t *)&unk_100256D30);
    sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
    v53((char *)v30, v50);
    sub_100041590(v52, (uint64_t *)&unk_100256D30);
    if ((v51 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_20:
    char v38 = 0;
    return v38 & 1;
  }

  sub_100041590((uint64_t)v23, (uint64_t *)&unk_100256D30);
  uint64_t v44 = (uint64_t)v80;
  sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
  if (v47(v45, 1LL, v8) != 1)
  {
LABEL_13:
    sub_100041590(v44, &qword_100251638);
    char v38 = 0;
    return v38 & 1;
  }

  sub_100041590(v44, (uint64_t *)&unk_100256D30);
LABEL_15:
  uint64_t v54 = v72;
  uint64_t v55 = v73;
  uint64_t v56 = *((void *)v73 + 4);
  uint64_t v57 = *((void *)v72 + 4);
  if (v73[40]) {
    uint64_t v56 = v56 != 0;
  }
  if (v72[40] == 1)
  {
    if (v57)
    {
      if (v56 != 1) {
        goto LABEL_20;
      }
    }

    else if (v56)
    {
      goto LABEL_20;
    }
  }

  else if (v56 != v57)
  {
    goto LABEL_20;
  }

  uint64_t v59 = *((void *)v73 + 6);
  uint64_t v60 = *((void *)v73 + 7);
  uint64_t v61 = *((void *)v72 + 6);
  uint64_t v62 = *((void *)v72 + 7);
  if (v59 == v61 && v60 == v62
    || (char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v61, v62, 0LL),
        uint64_t v54 = v72,
        uint64_t v55 = v73,
        char v38 = 0,
        (v63 & 1) != 0))
  {
    uint64_t v64 = v76;
    uint64_t v65 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v76 + 16);
    uint64_t v66 = v74;
    uint64_t v67 = v81;
    uint64_t v68 = v54;
    v65(v74, &v55[*(int *)(v41 + 44)], v81);
    uint64_t v69 = v75;
    v65(v75, &v68[*(int *)(v41 + 44)], v67);
    uint64_t v70 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v38 = dispatch thunk of static Equatable.== infix(_:_:)(v66, v69, v67, v70);
    uint64_t v71 = *(void (**)(char *, uint64_t))(v64 + 8);
    v71(v69, v67);
    v71(v66, v67);
  }

  return v38 & 1;
}

uint64_t _s18TrustedPeersHelper7ViewKeyV2eeoiySbAC_ACtFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = a1[1];
  uint64_t v14 = *(void *)(a2 + 8);
  if (*a1 != *(void *)a2 || v13 != v14)
  {
    char v16 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v13, *(void *)a2, v14, 0LL) & 1) == 0) {
      return v16 & 1;
    }
  }

  uint64_t v17 = a1[2];
  uint64_t v18 = a1[3];
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)(a2 + 24);
  if (v17 != v19 || v18 != v20)
  {
    char v16 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL) & 1) == 0) {
      return v16 & 1;
    }
  }

  uint64_t v22 = a1[4];
  uint64_t v23 = *(void *)(a2 + 32);
  if (*(_BYTE *)(a2 + 40) != 1)
  {
    if (v22 == v23) {
      goto LABEL_17;
    }
    goto LABEL_25;
  }

  if (!v23)
  {
    if (!v22) {
      goto LABEL_17;
    }
LABEL_25:
    char v16 = 0;
    return v16 & 1;
  }

  if (v23 == 1)
  {
    if (v22 != 1) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }

  if (v22 != 2) {
    goto LABEL_25;
  }
LABEL_17:
  uint64_t v24 = a1[6];
  uint64_t v25 = a1[7];
  uint64_t v26 = *(void *)(a2 + 48);
  uint64_t v27 = *(void *)(a2 + 56);
  if (v24 == v26 && v25 == v27
    || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0LL) & 1) != 0))
  {
    uint64_t v28 = a1[8];
    uint64_t v29 = a1[9];
    uint64_t v30 = *(void *)(a2 + 64);
    uint64_t v31 = *(void *)(a2 + 72);
    if (v28 == v30 && v29 == v31
      || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0LL) & 1) != 0))
    {
      uint64_t v32 = type metadata accessor for ViewKey(0LL);
      uint64_t v33 = (char *)a1 + *(int *)(v32 + 36);
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v34(v12, v33, v4);
      v34(v9, (char *)(a2 + *(int *)(v32 + 36)), v4);
      uint64_t v35 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v35);
      uint64_t v36 = *(void (**)(char *, uint64_t))(v5 + 8);
      v36(v9, v4);
      v36(v12, v4);
    }
  }

  return v16 & 1;
}

uint64_t sub_1000B1054(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for EstablishRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_100088030);
}

uint64_t _s18TrustedPeersHelper15ViewKeysRecordsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v121 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v106 = *(void *)(v3 - 8);
  uint64_t v107 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v105 = &v102[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5, v7);
  uint64_t v104 = &v102[-v8];
  uint64_t v9 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v116 = &v102[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = sub_100007578(&qword_100256408);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v110 = &v102[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v113 = &v102[-v19];
  __chkstk_darwin(v18, v20);
  uint64_t v22 = &v102[-v21];
  uint64_t v23 = sub_100007578(&qword_1002517E0);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v108 = &v102[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v112 = &v102[-v29];
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v109 = &v102[-v32];
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v111 = &v102[-v35];
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v119 = &v102[-v38];
  uint64_t v40 = __chkstk_darwin(v37, v39);
  char v117 = &v102[-v41];
  uint64_t v43 = __chkstk_darwin(v40, v42);
  uint64_t v45 = &v102[-v44];
  uint64_t v47 = __chkstk_darwin(v43, v46);
  uint64_t v49 = &v102[-v48];
  __chkstk_darwin(v47, v50);
  uint64_t v52 = &v102[-v51];
  uint64_t v53 = type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v54 = *(int *)(v53 + 20);
  uint64_t v115 = a1;
  sub_10000FC68(a1 + v54, (uint64_t)v52, &qword_1002517E0);
  uint64_t v118 = v53;
  sub_10000FC68(v121 + *(int *)(v53 + 20), (uint64_t)v49, &qword_1002517E0);
  uint64_t v114 = v13;
  uint64_t v55 = *(int *)(v13 + 48);
  uint64_t v56 = v9;
  uint64_t v57 = (uint64_t)&v22[v55];
  sub_10000FC68((uint64_t)v52, (uint64_t)v22, &qword_1002517E0);
  sub_10000FC68((uint64_t)v49, v57, &qword_1002517E0);
  uint64_t v120 = v10;
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v58((uint64_t)v22, 1LL, v9) == 1)
  {
    sub_100041590((uint64_t)v49, &qword_1002517E0);
    sub_100041590((uint64_t)v52, &qword_1002517E0);
    if (v58(v57, 1LL, v9) == 1)
    {
      sub_100041590((uint64_t)v22, &qword_1002517E0);
      goto LABEL_8;
    }

uint64_t _s18TrustedPeersHelper15CurrentCKKSItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v85 = *(void *)(v3 - 8);
  uint64_t v86 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v84 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v83 = (char *)&v81 - v8;
  uint64_t v92 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v89 = *(void *)(v92 - 8);
  __chkstk_darwin(v92, v9);
  uint64_t v82 = (uint64_t *)((char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v88 = sub_100007578(&qword_100256400);
  __chkstk_darwin(v88, v11);
  uint64_t v93 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578((uint64_t *)&unk_100256F50);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v87 = (uint64_t *)((char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v90 = (uint64_t)&v81 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v91 = (uint64_t)&v81 - v21;
  uint64_t v22 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100007578(&qword_100256408);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_1002517E0);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v95 = (uint64_t)&v81 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v33, v35);
  uint64_t v38 = (char *)&v81 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v41 = (char *)&v81 - v40;
  uint64_t v42 = type metadata accessor for CurrentCKKSItem(0LL);
  uint64_t v43 = *(int *)(v42 + 20);
  uint64_t v94 = a1;
  sub_10000FC68(a1 + v43, (uint64_t)v41, &qword_1002517E0);
  sub_10000FC68(v96 + *(int *)(v42 + 20), (uint64_t)v38, &qword_1002517E0);
  uint64_t v44 = (uint64_t)&v30[*(int *)(v27 + 48)];
  sub_10000FC68((uint64_t)v41, (uint64_t)v30, &qword_1002517E0);
  sub_10000FC68((uint64_t)v38, v44, &qword_1002517E0);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v45((uint64_t)v30, 1LL, v22) != 1)
  {
    sub_10000FC68((uint64_t)v30, v95, &qword_1002517E0);
    if (v45(v44, 1LL, v22) != 1)
    {
      uint64_t v47 = v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v26, v44, v22);
      uint64_t v48 = sub_1000077B8( &qword_100251630,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
      uint64_t v49 = v95;
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)(v95, v47, v22, v48);
      uint64_t v51 = *(void (**)(char *, uint64_t))(v23 + 8);
      v51(v47, v22);
      sub_100041590((uint64_t)v38, &qword_1002517E0);
      sub_100041590((uint64_t)v41, &qword_1002517E0);
      v51((char *)v49, v22);
      sub_100041590((uint64_t)v30, &qword_1002517E0);
      if ((v50 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_8;
    }

    sub_100041590((uint64_t)v38, &qword_1002517E0);
    sub_100041590((uint64_t)v41, &qword_1002517E0);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v95, v22);
LABEL_6:
    uint64_t v46 = &qword_100256408;
LABEL_14:
    uint64_t v61 = (uint64_t)v30;
LABEL_15:
    sub_100041590(v61, v46);
    goto LABEL_16;
  }

  sub_100041590((uint64_t)v38, &qword_1002517E0);
  sub_100041590((uint64_t)v41, &qword_1002517E0);
  if (v45(v44, 1LL, v22) != 1) {
    goto LABEL_6;
  }
  sub_100041590((uint64_t)v30, &qword_1002517E0);
LABEL_8:
  uint64_t v52 = v94;
  uint64_t v53 = v91;
  sub_10000FC68(v94 + *(int *)(v42 + 24), v91, (uint64_t *)&unk_100256F50);
  uint64_t v54 = v96;
  uint64_t v55 = v90;
  sub_10000FC68(v96 + *(int *)(v42 + 24), v90, (uint64_t *)&unk_100256F50);
  uint64_t v30 = v93;
  uint64_t v56 = (uint64_t)&v93[*(int *)(v88 + 48)];
  sub_10000FC68(v53, (uint64_t)v93, (uint64_t *)&unk_100256F50);
  sub_10000FC68(v55, v56, (uint64_t *)&unk_100256F50);
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  uint64_t v58 = v92;
  if (v57((uint64_t)v30, 1LL, v92) == 1)
  {
    sub_100041590(v55, (uint64_t *)&unk_100256F50);
    sub_100041590(v53, (uint64_t *)&unk_100256F50);
    if (v57(v56, 1LL, v58) == 1)
    {
      sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256F50);
      uint64_t v59 = v86;
LABEL_25:
      uint64_t v75 = v85;
      uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
      uint64_t v77 = v83;
      v76(v83, v52, v59);
      uint64_t v78 = v84;
      v76(v84, v54, v59);
      uint64_t v79 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v62 = dispatch thunk of static Equatable.== infix(_:_:)(v77, v78, v59, v79);
      uint64_t v80 = *(void (**)(char *, uint64_t))(v75 + 8);
      v80(v78, v59);
      v80(v77, v59);
      return v62 & 1;
    }

    goto LABEL_13;
  }

  uint64_t v60 = v87;
  sub_10000FC68((uint64_t)v30, (uint64_t)v87, (uint64_t *)&unk_100256F50);
  if (v57(v56, 1LL, v58) == 1)
  {
    sub_100041590(v55, (uint64_t *)&unk_100256F50);
    sub_100041590(v53, (uint64_t *)&unk_100256F50);
    sub_1000415CC((uint64_t)v60, type metadata accessor for CurrentCKKSItemSpecifier);
LABEL_13:
    uint64_t v46 = &qword_100256400;
    goto LABEL_14;
  }

  uint64_t v64 = v82;
  sub_100041608(v56, (uint64_t)v82, type metadata accessor for CurrentCKKSItemSpecifier);
  uint64_t v65 = v60[1];
  uint64_t v66 = v64[1];
  if ((*v60 != *v64 || v65 != v66) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v60, v65, *v64, v66, 0LL) & 1) == 0
    || ((uint64_t v67 = v60[2], v68 = v60[3], v69 = v64[2], v70 = v64[3], v67 != v69) || v68 != v70)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, v69, v70, 0LL) & 1) == 0)
  {
    sub_1000415CC((uint64_t)v64, type metadata accessor for CurrentCKKSItemSpecifier);
    sub_100041590(v55, (uint64_t *)&unk_100256F50);
    sub_100041590(v53, (uint64_t *)&unk_100256F50);
    sub_1000415CC((uint64_t)v60, type metadata accessor for CurrentCKKSItemSpecifier);
    uint64_t v61 = (uint64_t)v30;
    uint64_t v46 = (uint64_t *)&unk_100256F50;
    goto LABEL_15;
  }

  uint64_t v71 = *(int *)(v58 + 24);
  uint64_t v72 = (char *)v60 + v71;
  uint64_t v73 = (char *)v64 + v71;
  uint64_t v74 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  uint64_t v59 = v86;
  LOBYTE(v72) = dispatch thunk of static Equatable.== infix(_:_:)(v72, v73, v86, v74);
  sub_1000415CC((uint64_t)v64, type metadata accessor for CurrentCKKSItemSpecifier);
  sub_100041590(v55, (uint64_t *)&unk_100256F50);
  sub_100041590(v53, (uint64_t *)&unk_100256F50);
  sub_1000415CC((uint64_t)v60, type metadata accessor for CurrentCKKSItemSpecifier);
  sub_100041590((uint64_t)v30, (uint64_t *)&unk_100256F50);
LABEL_16:
  char v62 = 0;
  return v62 & 1;
}

uint64_t _s18TrustedPeersHelper14SupportAppViewV2eeoiySbAC_ACtFZ_0(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v57 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v56 = (char *)&v53 - v9;
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v59 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100251638);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)&v53 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v53 - v28;
  uint64_t v30 = *a1;
  uint64_t v31 = a1[1];
  uint64_t v32 = *a2;
  uint64_t v33 = a2[1];
  uint64_t v60 = a2;
  if (v30 == v32 && v31 == v33
    || (char v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) != 0))
  {
    uint64_t v55 = v4;
    uint64_t v35 = type metadata accessor for SupportAppView(0LL);
    sub_10000FC68((uint64_t)a1 + *(int *)(v35 + 28), (uint64_t)v29, (uint64_t *)&unk_100256D30);
    uint64_t v54 = v35;
    sub_10000FC68((uint64_t)v60 + *(int *)(v35 + 28), (uint64_t)v26, (uint64_t *)&unk_100256D30);
    uint64_t v36 = (uint64_t)&v17[*(int *)(v14 + 48)];
    sub_10000FC68((uint64_t)v29, (uint64_t)v17, (uint64_t *)&unk_100256D30);
    sub_10000FC68((uint64_t)v26, v36, (uint64_t *)&unk_100256D30);
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v37((uint64_t)v17, 1LL, v10) == 1)
    {
      sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
      sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
      if (v37(v36, 1LL, v10) == 1)
      {
        sub_100041590((uint64_t)v17, (uint64_t *)&unk_100256D30);
        goto LABEL_11;
      }
    }

    else
    {
      sub_10000FC68((uint64_t)v17, (uint64_t)v22, (uint64_t *)&unk_100256D30);
      if (v37(v36, 1LL, v10) != 1)
      {
        uint64_t v38 = v59;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v59, v36, v10);
        uint64_t v39 = sub_1000077B8( &qword_100251640,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v38, v10, v39);
        uint64_t v41 = *(void (**)(char *, uint64_t))(v11 + 8);
        v41(v38, v10);
        sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
        sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
        v41(v22, v10);
        sub_100041590((uint64_t)v17, (uint64_t *)&unk_100256D30);
        if ((v40 & 1) != 0)
        {
LABEL_11:
          uint64_t v42 = v60;
          if (*((unsigned __int8 *)a1 + 16) == *((unsigned __int8 *)v60 + 16))
          {
            uint64_t v45 = v54;
            uint64_t v44 = v55;
            uint64_t v46 = v58;
            uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
            uint64_t v48 = v56;
            v47(v56, (char *)a1 + *(int *)(v54 + 24), v55);
            uint64_t v49 = (char *)v42 + *(int *)(v45 + 24);
            char v50 = v57;
            v47(v57, v49, v44);
            uint64_t v51 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v50, v44, v51);
            uint64_t v52 = *(void (**)(char *, uint64_t))(v46 + 8);
            v52(v50, v44);
            v52(v48, v44);
            return v34 & 1;
          }
        }

uint64_t _s18TrustedPeersHelper14PeerDifferenceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v46 - 8);
  uint64_t v5 = __chkstk_darwin(v46, v4);
  uint64_t v49 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v48 = (char *)&v43 - v8;
  uint64_t v9 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v44 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251660);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100007578(&qword_100251658);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v25 = (char *)&v43 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v43 - v27;
  uint64_t v45 = a1;
  sub_10000FC68(a1, (uint64_t)&v43 - v27, &qword_100251658);
  uint64_t v47 = a2;
  sub_10000FC68(a2, (uint64_t)v25, &qword_100251658);
  uint64_t v29 = (uint64_t)&v16[*(int *)(v13 + 48)];
  sub_10000FC68((uint64_t)v28, (uint64_t)v16, &qword_100251658);
  sub_10000FC68((uint64_t)v25, v29, &qword_100251658);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v30((uint64_t)v16, 1LL, v9) != 1)
  {
    sub_10000FC68((uint64_t)v16, (uint64_t)v21, &qword_100251658);
    if (v30(v29, 1LL, v9) != 1)
    {
      uint64_t v31 = v44;
      sub_100041608(v29, v44, type metadata accessor for PeerDifference.OneOf_Operation);
      char v32 = _s18TrustedPeersHelper14PeerDifferenceV15OneOf_OperationO21__derived_enum_equalsySbAE_AEtFZ_0( (uint64_t)v21,  v31);
      sub_1000415CC(v31, type metadata accessor for PeerDifference.OneOf_Operation);
      sub_100041590((uint64_t)v25, &qword_100251658);
      sub_100041590((uint64_t)v28, &qword_100251658);
      sub_1000415CC((uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
      sub_100041590((uint64_t)v16, &qword_100251658);
      if ((v32 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v40 = 0;
      return v40 & 1;
    }

    sub_100041590((uint64_t)v25, &qword_100251658);
    sub_100041590((uint64_t)v28, &qword_100251658);
    sub_1000415CC((uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
LABEL_6:
    sub_100041590((uint64_t)v16, &qword_100251660);
    goto LABEL_9;
  }

  sub_100041590((uint64_t)v25, &qword_100251658);
  sub_100041590((uint64_t)v28, &qword_100251658);
  if (v30(v29, 1LL, v9) != 1) {
    goto LABEL_6;
  }
  sub_100041590((uint64_t)v16, &qword_100251658);
LABEL_8:
  uint64_t v33 = type metadata accessor for PeerDifference(0LL);
  uint64_t v34 = v46;
  uint64_t v35 = v50;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v37 = v48;
  v36(v48, v45 + *(int *)(v33 + 20), v46);
  uint64_t v38 = v49;
  v36(v49, v47 + *(int *)(v33 + 20), v34);
  uint64_t v39 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v38, v34, v39);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
  v41(v38, v34);
  v41(v37, v34);
  return v40 & 1;
}

uint64_t sub_1000B2874(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v24 - v13;
  sub_100041318(*a1, a1[1]);
  if ((v15 & 1) != 0 && (sub_100041318(a1[2], a1[3]), (v16 & 1) != 0))
  {
    uint64_t v17 = a3(0LL);
    uint64_t v18 = (char *)a1 + *(int *)(v17 + 24);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v19(v14, v18, v6);
    v19(v11, (char *)(a2 + *(int *)(v17 + 24)), v6);
    uint64_t v20 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v11, v6, v20);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
    v22(v11, v6);
    v22(v14, v6);
  }

  else
  {
    char v21 = 0;
  }

  return v21 & 1;
}

uint64_t _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v213 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v193 = *(void *)(v213 - 8);
  uint64_t v5 = __chkstk_darwin(v213, v4);
  v192 = (char *)&v190 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  v191 = (char *)&v190 - v8;
  uint64_t v198 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v197 = *(void *)(v198 - 8);
  __chkstk_darwin(v198, v9);
  uint64_t v190 = (uint64_t)&v190 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v196 = sub_100007578(&qword_100256470);
  __chkstk_darwin(v196, v11);
  uint64_t v199 = (uint64_t)&v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F28);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v194 = (uint64_t *)((char *)&v190 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v203 = (char *)&v190 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v204 = (char *)&v190 - v21;
  uint64_t v218 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v202 = *(void *)(v218 - 8);
  __chkstk_darwin(v218, v22);
  uint64_t v195 = (uint64_t)&v190 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v201 = sub_100007578(&qword_100256478);
  __chkstk_darwin(v201, v24);
  uint64_t v206 = (uint64_t)&v190 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100007578(&qword_100251F20);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v200 = (uint64_t *)((char *)&v190 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v205 = (uint64_t)&v190 - v32;
  __chkstk_darwin(v31, v33);
  uint64_t v222 = (uint64_t)&v190 - v34;
  uint64_t v221 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v212 = *(void *)(v221 - 8);
  __chkstk_darwin(v221, v35);
  uint64_t v207 = (uint64_t)&v190 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v211 = sub_100007578(&qword_100256448);
  __chkstk_darwin(v211, v37);
  uint64_t v216 = (uint64_t)&v190 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = sub_100007578(&qword_100256CA0);
  uint64_t v41 = __chkstk_darwin(v39, v40);
  uint64_t v208 = (uint64_t *)((char *)&v190 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v214 = (uint64_t)&v190 - v45;
  __chkstk_darwin(v44, v46);
  uint64_t v215 = (uint64_t)&v190 - v47;
  uint64_t v223 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v220 = *(void *)(v223 - 8);
  __chkstk_darwin(v223, v48);
  uint64_t v210 = (uint64_t)&v190 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v219 = sub_100007578(&qword_100256450);
  __chkstk_darwin(v219, v50);
  uint64_t v226 = (uint64_t)&v190 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = sub_100007578(&qword_100251F18);
  uint64_t v54 = __chkstk_darwin(v52, v53);
  v217 = (uint64_t *)((char *)&v190 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v57 = __chkstk_darwin(v54, v56);
  uint64_t v224 = (uint64_t)&v190 - v58;
  __chkstk_darwin(v57, v59);
  uint64_t v225 = (uint64_t)&v190 - v60;
  uint64_t v61 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v62 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v63);
  uint64_t v65 = (char *)&v190 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = sub_100007578(&qword_100256480);
  __chkstk_darwin(v66, v67);
  uint64_t v69 = (char *)&v190 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = sub_100007578(&qword_100256F80);
  uint64_t v72 = __chkstk_darwin(v70, v71);
  uint64_t v74 = (uint64_t *)((char *)&v190 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v76 = __chkstk_darwin(v72, v75);
  uint64_t v78 = (char *)&v190 - v77;
  __chkstk_darwin(v76, v79);
  uint64_t v81 = (char *)&v190 - v80;
  uint64_t v82 = *a1;
  uint64_t v83 = a1[1];
  v227 = a1;
  v228 = a2;
  uint64_t v84 = *a2;
  uint64_t v85 = a2[1];
  if (v82 == *a2 && v83 == v85
    || (char v86 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, v84, v85, 0LL) & 1) != 0))
  {
    uint64_t v87 = type metadata accessor for Peer(0LL);
    sub_10000FC68((uint64_t)v227 + *(int *)(v87 + 28), (uint64_t)v81, &qword_100256F80);
    uint64_t v209 = (int *)v87;
    sub_10000FC68((uint64_t)v228 + *(int *)(v87 + 28), (uint64_t)v78, &qword_100256F80);
    uint64_t v88 = (uint64_t)&v69[*(int *)(v66 + 48)];
    sub_10000FC68((uint64_t)v81, (uint64_t)v69, &qword_100256F80);
    sub_10000FC68((uint64_t)v78, v88, &qword_100256F80);
    uint64_t v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
    if (v89((uint64_t)v69, 1LL, v61) == 1)
    {
      sub_100041590((uint64_t)v78, &qword_100256F80);
      sub_100041590((uint64_t)v81, &qword_100256F80);
      if (v89(v88, 1LL, v61) == 1)
      {
        sub_100041590((uint64_t)v69, &qword_100256F80);
LABEL_7:
        uint64_t v90 = v209;
        uint64_t v91 = v227;
        uint64_t v92 = v225;
        sub_10000FC68((uint64_t)v227 + v209[8], v225, &qword_100251F18);
        uint64_t v93 = v228;
        uint64_t v94 = v224;
        sub_10000FC68((uint64_t)v228 + v90[8], v224, &qword_100251F18);
        uint64_t v95 = v226;
        uint64_t v96 = v226 + *(int *)(v219 + 48);
        sub_10000FC68(v92, v226, &qword_100251F18);
        sub_10000FC68(v94, v96, &qword_100251F18);
        uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v220 + 48);
        uint64_t v98 = v223;
        if (v97(v95, 1LL, v223) == 1)
        {
          sub_100041590(v94, &qword_100251F18);
          sub_100041590(v92, &qword_100251F18);
          int v99 = v97(v96, 1LL, v98);
          uint64_t v100 = v218;
          uint64_t v102 = v221;
          uint64_t v101 = v222;
          if (v99 == 1)
          {
            sub_100041590(v226, &qword_100251F18);
LABEL_10:
            int v103 = v209;
            uint64_t v104 = v215;
            sub_10000FC68((uint64_t)v91 + v209[9], v215, &qword_100256CA0);
            uint64_t v105 = v214;
            sub_10000FC68((uint64_t)v93 + v103[9], v214, &qword_100256CA0);
            uint64_t v106 = v216;
            uint64_t v107 = v216 + *(int *)(v211 + 48);
            sub_10000FC68(v104, v216, &qword_100256CA0);
            uint64_t v108 = v106;
            sub_10000FC68(v105, v107, &qword_100256CA0);
            uint64_t v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
            if (v109(v108, 1LL, v102) == 1)
            {
              sub_100041590(v105, &qword_100256CA0);
              uint64_t v108 = v216;
              sub_100041590(v104, &qword_100256CA0);
              if (v109(v107, 1LL, v102) == 1)
              {
                sub_100041590(v108, &qword_100256CA0);
LABEL_13:
                if ((sub_10003FC3C(v91[2], v93[2]) & 1) == 0) {
                  goto LABEL_48;
                }
                uint64_t v110 = v209;
                sub_10000FC68((uint64_t)v91 + v209[10], v101, &qword_100251F20);
                uint64_t v111 = (uint64_t)v93 + v110[10];
                uint64_t v112 = v205;
                sub_10000FC68(v111, v205, &qword_100251F20);
                uint64_t v113 = v206;
                uint64_t v114 = v206 + *(int *)(v201 + 48);
                sub_10000FC68(v101, v206, &qword_100251F20);
                uint64_t v108 = v113;
                sub_10000FC68(v112, v114, &qword_100251F20);
                uint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 48);
                if (v115(v108, 1LL, v100) == 1)
                {
                  sub_100041590(v112, &qword_100251F20);
                  uint64_t v108 = v206;
                  sub_100041590(v101, &qword_100251F20);
                  int v116 = v115(v114, 1LL, v100);
                  uint64_t v117 = (uint64_t)v204;
                  uint64_t v118 = (uint64_t)v203;
                  if (v116 == 1)
                  {
                    sub_100041590(v108, &qword_100251F20);
                    goto LABEL_17;
                  }
                }

                else
                {
                  uint64_t v168 = v200;
                  sub_10000FC68(v108, (uint64_t)v200, &qword_100251F20);
                  int v169 = v115(v114, 1LL, v100);
                  uint64_t v117 = (uint64_t)v204;
                  uint64_t v118 = (uint64_t)v203;
                  if (v169 != 1)
                  {
                    uint64_t v170 = v195;
                    sub_100041608(v114, v195, type metadata accessor for SignedRecoveryVoucher);
                    sub_100041318(*v168, v168[1]);
                    uint64_t v171 = (uint64_t)v168;
                    if ((v172 & 1) == 0 || (sub_100041318(v168[2], v168[3]), (v173 & 1) == 0))
                    {
                      sub_1000415CC(v170, type metadata accessor for SignedRecoveryVoucher);
                      uint64_t v141 = &qword_100251F20;
                      sub_100041590(v205, &qword_100251F20);
                      sub_100041590(v222, &qword_100251F20);
                      sub_1000415CC((uint64_t)v168, type metadata accessor for SignedRecoveryVoucher);
                      uint64_t v179 = &v230;
LABEL_66:
                      uint64_t v134 = *(v179 - 32);
                      goto LABEL_46;
                    }

                    uint64_t v174 = *(int *)(v100 + 24);
                    uint64_t v175 = (char *)v168 + v174;
                    uint64_t v176 = v170;
                    uint64_t v177 = v170 + v174;
                    uint64_t v178 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                    LOBYTE(v175) = dispatch thunk of static Equatable.== infix(_:_:)(v175, v177, v213, v178);
                    sub_1000415CC(v176, type metadata accessor for SignedRecoveryVoucher);
                    sub_100041590(v205, &qword_100251F20);
                    sub_100041590(v222, &qword_100251F20);
                    sub_1000415CC(v171, type metadata accessor for SignedRecoveryVoucher);
                    sub_100041590(v206, &qword_100251F20);
LABEL_17:
                    uint64_t v119 = v209;
                    sub_10000FC68((uint64_t)v91 + v209[11], v117, &qword_100251F28);
                    sub_10000FC68((uint64_t)v93 + v119[11], v118, &qword_100251F28);
                    uint64_t v120 = v199;
                    uint64_t v121 = v199 + *(int *)(v196 + 48);
                    sub_10000FC68(v117, v199, &qword_100251F28);
                    uint64_t v108 = v120;
                    sub_10000FC68(v118, v121, &qword_100251F28);
                    uint64_t v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48);
                    uint64_t v123 = v198;
                    if (v122(v108, 1LL, v198) == 1)
                    {
                      sub_100041590(v118, &qword_100251F28);
                      uint64_t v108 = v199;
                      sub_100041590(v117, &qword_100251F28);
                      if (v122(v121, 1LL, v123) == 1)
                      {
                        sub_100041590(v108, &qword_100251F28);
LABEL_20:
                        uint64_t v124 = v209;
                        uint64_t v125 = (uint64_t)v91 + v209[6];
                        uint64_t v126 = v193;
                        int v127 = *(void (**)(char *, uint64_t, uint64_t))(v193 + 16);
                        uint64_t v128 = v191;
                        uint64_t v129 = v213;
                        v127(v191, v125, v213);
                        char v130 = v192;
                        v127(v192, (uint64_t)v93 + v124[6], v129);
                        uint64_t v131 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                        char v86 = dispatch thunk of static Equatable.== infix(_:_:)(v128, v130, v129, v131);
                        uint64_t v132 = *(void (**)(char *, uint64_t))(v126 + 8);
                        v132(v130, v129);
                        v132(v128, v129);
                        return v86 & 1;
                      }

                      goto LABEL_60;
                    }

                    v180 = v194;
                    sub_10000FC68(v108, (uint64_t)v194, &qword_100251F28);
                    if (v122(v121, 1LL, v123) == 1)
                    {
                      sub_100041590(v118, &qword_100251F28);
                      sub_100041590(v117, &qword_100251F28);
                      sub_1000415CC((uint64_t)v180, type metadata accessor for SignedCustodianRecoveryKey);
LABEL_60:
                      uint64_t v133 = &qword_100256470;
                      goto LABEL_40;
                    }

                    uint64_t v181 = v190;
                    sub_100041608(v121, v190, type metadata accessor for SignedCustodianRecoveryKey);
                    sub_100041318(*v180, v180[1]);
                    uint64_t v182 = (uint64_t)v180;
                    if ((v183 & 1) != 0)
                    {
                      sub_100041318(v180[2], v180[3]);
                      if ((v184 & 1) != 0)
                      {
                        uint64_t v185 = *(int *)(v198 + 24);
                        uint64_t v186 = (char *)v180 + v185;
                        uint64_t v187 = v181;
                        uint64_t v188 = v181 + v185;
                        uint64_t v189 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                        LOBYTE(v186) = dispatch thunk of static Equatable.== infix(_:_:)(v186, v188, v213, v189);
                        sub_1000415CC(v187, type metadata accessor for SignedCustodianRecoveryKey);
                        sub_100041590(v118, &qword_100251F28);
                        sub_100041590(v117, &qword_100251F28);
                        sub_1000415CC(v182, type metadata accessor for SignedCustodianRecoveryKey);
                        sub_100041590(v199, &qword_100251F28);
LABEL_48:
                        char v86 = 0;
                        return v86 & 1;
                      }
                    }

                    sub_1000415CC(v181, type metadata accessor for SignedCustodianRecoveryKey);
                    uint64_t v141 = &qword_100251F28;
                    sub_100041590(v118, &qword_100251F28);
                    sub_100041590(v117, &qword_100251F28);
                    sub_1000415CC((uint64_t)v180, type metadata accessor for SignedCustodianRecoveryKey);
                    uint64_t v179 = &v229;
                    goto LABEL_66;
                  }

                  sub_100041590(v205, &qword_100251F20);
                  sub_100041590(v222, &qword_100251F20);
                  sub_1000415CC((uint64_t)v168, type metadata accessor for SignedRecoveryVoucher);
                }

                uint64_t v133 = &qword_100256478;
LABEL_40:
                uint64_t v134 = v108;
                goto LABEL_47;
              }

uint64_t _s18TrustedPeersHelper14PeerDifferenceV15OneOf_OperationO21__derived_enum_equalsySbAE_AEtFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v3 = type metadata accessor for Peer(0LL);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v37 = (void **)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (void **)((char *)&v37 - v9);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (void **)((char *)&v37 - v12);
  uint64_t v14 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (void **)((char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (void **)((char *)&v37 - v21);
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (void **)((char *)&v37 - v24);
  uint64_t v26 = sub_100007578(&qword_100256468);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v30 = (char *)&v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = (uint64_t)&v30[*(int *)(v28 + 48)];
  sub_10004164C(a1, (uint64_t)v30, type metadata accessor for PeerDifference.OneOf_Operation);
  sub_10004164C(v38, v31, type metadata accessor for PeerDifference.OneOf_Operation);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v14);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_10004164C((uint64_t)v30, (uint64_t)v22, type metadata accessor for PeerDifference.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload(v31, v14) == 1)
      {
        sub_100041608(v31, (uint64_t)v10, type metadata accessor for Peer);
        char v33 = _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(v22, v10);
        sub_1000415CC((uint64_t)v10, type metadata accessor for Peer);
        uint64_t v34 = (uint64_t)v22;
LABEL_12:
        sub_1000415CC(v34, type metadata accessor for Peer);
        sub_1000415CC((uint64_t)v30, type metadata accessor for PeerDifference.OneOf_Operation);
        return v33 & 1;
      }

      uint64_t v18 = v22;
    }

    else
    {
      sub_10004164C((uint64_t)v30, (uint64_t)v18, type metadata accessor for PeerDifference.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload(v31, v14) == 2)
      {
        uint64_t v35 = v37;
        sub_100041608(v31, (uint64_t)v37, type metadata accessor for Peer);
        char v33 = _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(v18, v35);
        sub_1000415CC((uint64_t)v35, type metadata accessor for Peer);
        uint64_t v34 = (uint64_t)v18;
        goto LABEL_12;
      }
    }
  }

  else
  {
    sub_10004164C((uint64_t)v30, (uint64_t)v25, type metadata accessor for PeerDifference.OneOf_Operation);
    if (!swift_getEnumCaseMultiPayload(v31, v14))
    {
      sub_100041608(v31, (uint64_t)v13, type metadata accessor for Peer);
      char v33 = _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(v25, v13);
      sub_1000415CC((uint64_t)v13, type metadata accessor for Peer);
      uint64_t v34 = (uint64_t)v25;
      goto LABEL_12;
    }

    uint64_t v18 = v25;
  }

  sub_1000415CC((uint64_t)v18, type metadata accessor for Peer);
  sub_100041590((uint64_t)v30, &qword_100256468);
  char v33 = 0;
  return v33 & 1;
}

uint64_t _s18TrustedPeersHelper7ChangesV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a2 + 8);
  BOOL v15 = *(void *)a1 == *(void *)a2 && v13 == v14;
  if (v15
    || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v13, *(void *)a2, v14, 0LL) & 1) != 0))
  {
    if ((sub_100040DE0(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0
      && (sub_100041318(*(void *)(a1 + 24), *(void *)(a1 + 32)), (v17 & 1) != 0)
      && (sub_100041318(*(void *)(a1 + 40), *(void *)(a1 + 48)), (v18 & 1) != 0)
      && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
    {
      uint64_t v20 = type metadata accessor for Changes(0LL);
      uint64_t v21 = a1 + *(int *)(v20 + 36);
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v22(v12, v21, v4);
      v22(v9, a2 + *(int *)(v20 + 36), v4);
      uint64_t v23 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v23);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v9, v4);
      v24(v12, v4);
    }

    else
    {
      char v16 = 0;
    }
  }

  return v16 & 1;
}

uint64_t _s18TrustedPeersHelper13ResetResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v49 = (char *)&v46 - v9;
  uint64_t v10 = type metadata accessor for Changes(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v46 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100256440);
  __chkstk_darwin(v14, v15);
  char v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v53 = (uint64_t)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (char *)&v46 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v46 - v27;
  uint64_t v29 = type metadata accessor for ResetResponse(0LL);
  uint64_t v30 = *(int *)(v29 + 20);
  uint64_t v47 = a1;
  sub_10000FC68(a1 + v30, (uint64_t)v28, (uint64_t *)&unk_100256C90);
  uint64_t v31 = *(int *)(v29 + 20);
  uint64_t v48 = a2;
  sub_10000FC68(a2 + v31, (uint64_t)v25, (uint64_t *)&unk_100256C90);
  uint64_t v32 = (uint64_t)&v17[*(int *)(v14 + 48)];
  sub_10000FC68((uint64_t)v28, (uint64_t)v17, (uint64_t *)&unk_100256C90);
  sub_10000FC68((uint64_t)v25, v32, (uint64_t *)&unk_100256C90);
  char v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v33((uint64_t)v17, 1LL, v10) != 1)
  {
    uint64_t v34 = v53;
    sub_10000FC68((uint64_t)v17, v53, (uint64_t *)&unk_100256C90);
    if (v33(v32, 1LL, v10) != 1)
    {
      uint64_t v35 = v46;
      sub_100041608(v32, v46, type metadata accessor for Changes);
      char v36 = _s18TrustedPeersHelper7ChangesV2eeoiySbAC_ACtFZ_0(v34, v35);
      sub_1000415CC(v35, type metadata accessor for Changes);
      sub_100041590((uint64_t)v25, (uint64_t *)&unk_100256C90);
      sub_100041590((uint64_t)v28, (uint64_t *)&unk_100256C90);
      sub_1000415CC(v34, type metadata accessor for Changes);
      sub_100041590((uint64_t)v17, (uint64_t *)&unk_100256C90);
      if ((v36 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v43 = 0;
      return v43 & 1;
    }

    sub_100041590((uint64_t)v25, (uint64_t *)&unk_100256C90);
    sub_100041590((uint64_t)v28, (uint64_t *)&unk_100256C90);
    sub_1000415CC(v34, type metadata accessor for Changes);
LABEL_6:
    sub_100041590((uint64_t)v17, &qword_100256440);
    goto LABEL_9;
  }

  sub_100041590((uint64_t)v25, (uint64_t *)&unk_100256C90);
  sub_100041590((uint64_t)v28, (uint64_t *)&unk_100256C90);
  if (v33(v32, 1LL, v10) != 1) {
    goto LABEL_6;
  }
  sub_100041590((uint64_t)v17, (uint64_t *)&unk_100256C90);
LABEL_8:
  uint64_t v38 = v51;
  uint64_t v37 = v52;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  uint64_t v40 = v49;
  v39(v49, v47, v52);
  uint64_t v41 = v50;
  v39(v50, v48, v37);
  uint64_t v42 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v41, v37, v42);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
  v44(v41, v37);
  v44(v40, v37);
  return v43 & 1;
}

uint64_t _s18TrustedPeersHelper12ResetRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v106 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v105 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v104 = (char *)&v99 - v8;
  uint64_t v113 = type metadata accessor for Metrics(0LL);
  uint64_t v110 = *(void *)(v113 - 8);
  __chkstk_darwin(v113, v9);
  uint64_t v107 = (uint64_t *)((char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v109 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v109, v11);
  uint64_t v114 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100257000);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v108 = (uint64_t *)((char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v111 = (uint64_t)&v99 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v112 = (uint64_t)&v99 - v21;
  uint64_t v22 = type metadata accessor for AccountInfo(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (_DWORD *)((char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_100251F50);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v35 = (char *)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v33, v36);
  uint64_t v39 = (char *)&v99 - v38;
  __chkstk_darwin(v37, v40);
  char v43 = (char *)&v99 - v42;
  uint64_t v44 = *a2;
  if (*((_BYTE *)a2 + 8) == 1) {
    __asm { BR              X11 }
  }

  if (*(void *)v41 != v44) {
    goto LABEL_39;
  }
  uint64_t v103 = v3;
  uint64_t v45 = *(void *)(v41 + 16);
  uint64_t v46 = *(void *)(v41 + 24);
  uint64_t v47 = a2[2];
  uint64_t v48 = a2[3];
  if (v45 == v47 && v46 == v48
    || (uint64_t v49 = v41,
        char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v47, v48, 0LL),
        uint64_t v41 = v49,
        char v51 = 0,
        (v50 & 1) != 0))
  {
    uint64_t v52 = *(void *)(v41 + 32);
    uint64_t v53 = *(void *)(v41 + 40);
    uint64_t v54 = a2[4];
    uint64_t v55 = a2[5];
    if (v52 == v54 && v53 == v55) {
      goto LABEL_10;
    }
    uint64_t v56 = v41;
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v54, v55, 0LL);
    uint64_t v41 = v56;
    char v51 = 0;
    if ((v57 & 1) != 0)
    {
LABEL_10:
      uint64_t v102 = v35;
      uint64_t v58 = v41;
      uint64_t v59 = type metadata accessor for ResetRequest(0LL);
      uint64_t v60 = *(int *)(v59 + 40);
      uint64_t v101 = v58;
      sub_10000FC68(v58 + v60, (uint64_t)v43, &qword_100251F50);
      uint64_t v100 = v59;
      sub_10000FC68((uint64_t)a2 + *(int *)(v59 + 40), (uint64_t)v39, &qword_100251F50);
      uint64_t v61 = (uint64_t)&v30[*(int *)(v27 + 48)];
      sub_10000FC68((uint64_t)v43, (uint64_t)v30, &qword_100251F50);
      sub_10000FC68((uint64_t)v39, v61, &qword_100251F50);
      uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
      if (v62((uint64_t)v30, 1LL, v22) == 1)
      {
        sub_100041590((uint64_t)v39, &qword_100251F50);
        sub_100041590((uint64_t)v43, &qword_100251F50);
        if (v62(v61, 1LL, v22) == 1)
        {
          sub_100041590((uint64_t)v30, &qword_100251F50);
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v63 = v102;
        sub_10000FC68((uint64_t)v30, (uint64_t)v102, &qword_100251F50);
        if (v62(v61, 1LL, v22) != 1)
        {
          sub_100041608(v61, (uint64_t)v26, type metadata accessor for AccountInfo);
          if (*v63 != *v26)
          {
            sub_1000415CC((uint64_t)v26, type metadata accessor for AccountInfo);
            uint64_t v71 = &qword_100251F50;
            sub_100041590((uint64_t)v39, &qword_100251F50);
            sub_100041590((uint64_t)v43, &qword_100251F50);
            sub_1000415CC((uint64_t)v63, type metadata accessor for AccountInfo);
            uint64_t v65 = (uint64_t)v30;
            goto LABEL_37;
          }

          uint64_t v66 = *(int *)(v22 + 20);
          uint64_t v67 = (char *)v63 + v66;
          uint64_t v68 = (char *)v26 + v66;
          uint64_t v69 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v67) = dispatch thunk of static Equatable.== infix(_:_:)(v67, v68, v103, v69);
          sub_1000415CC((uint64_t)v26, type metadata accessor for AccountInfo);
          sub_100041590((uint64_t)v39, &qword_100251F50);
          sub_100041590((uint64_t)v43, &qword_100251F50);
          sub_1000415CC((uint64_t)v63, type metadata accessor for AccountInfo);
          sub_100041590((uint64_t)v30, &qword_100251F50);
LABEL_19:
          uint64_t v70 = v100;
          uint64_t v71 = &qword_100257000;
          uint64_t v72 = v112;
          sub_10000FC68(v101 + *(int *)(v100 + 44), v112, &qword_100257000);
          uint64_t v73 = v111;
          sub_10000FC68((uint64_t)a2 + *(int *)(v70 + 44), v111, &qword_100257000);
          uint64_t v74 = v114;
          uint64_t v75 = v114 + *(int *)(v109 + 48);
          sub_10000FC68(v72, v114, &qword_100257000);
          sub_10000FC68(v73, v75, &qword_100257000);
          uint64_t v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
          uint64_t v77 = v113;
          if (v76(v74, 1LL, v113) == 1)
          {
            sub_100041590(v73, &qword_100257000);
            sub_100041590(v72, &qword_100257000);
            if (v76(v75, 1LL, v77) == 1)
            {
              sub_100041590(v74, &qword_100257000);
LABEL_22:
              if (*(unsigned __int8 *)(v101 + 49) == *((unsigned __int8 *)a2 + 49))
              {
                uint64_t v78 = v106;
                uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
                uint64_t v80 = v103;
                uint64_t v81 = v104;
                v79(v104, v101 + *(int *)(v70 + 36), v103);
                uint64_t v82 = (uint64_t)a2 + *(int *)(v70 + 36);
                uint64_t v83 = v105;
                v79(v105, v82, v80);
                uint64_t v84 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v81, v83, v80, v84);
                uint64_t v85 = *(void (**)(char *, uint64_t))(v78 + 8);
                v85(v83, v80);
                v85(v81, v80);
                return v51 & 1;
              }

uint64_t _s18TrustedPeersHelper11AccountInfoV2eeoiySbAC_ACtFZ_0(_DWORD *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v20 - v11;
  if (*a1 == *(_DWORD *)a2)
  {
    uint64_t v13 = type metadata accessor for AccountInfo(0LL);
    uint64_t v14 = (char *)a1 + *(int *)(v13 + 20);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v9, &a2[*(int *)(v13 + 20)], v4);
    uint64_t v16 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v9, v4);
    v18(v12, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t _s18TrustedPeersHelper10PCSServiceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v25 - v11;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && (sub_100041318(*(void *)(a1 + 8), *(void *)(a1 + 16)), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v17 = *(void *)(a2 + 32);
    if (v14 == v16 && v15 == v17
      || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0LL) & 1) != 0))
    {
      uint64_t v19 = type metadata accessor for PCSService(0LL);
      uint64_t v20 = a1 + *(int *)(v19 + 28);
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v21(v12, v20, v4);
      v21(v9, a2 + *(int *)(v19 + 28), v4);
      uint64_t v22 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v22);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v9, v4);
      v23(v12, v4);
    }
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t _s18TrustedPeersHelper6BottleV2eeoiySbAC_ACtFZ_0(uint64_t *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v32 - v11;
  sub_100041318(*a1, a1[1]);
  if ((v13 & 1) != 0
    && (sub_100041318(a1[2], a1[3]), (v14 & 1) != 0)
    && (sub_100041318(a1[4], a1[5]), (v15 & 1) != 0)
    && (sub_100041318(a1[6], a1[7]), (v16 & 1) != 0))
  {
    uint64_t v17 = a1[8];
    uint64_t v18 = a1[9];
    uint64_t v19 = *((void *)a2 + 8);
    uint64_t v20 = *((void *)a2 + 9);
    if (v17 == v19 && v18 == v20
      || (char v21 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL) & 1) != 0))
    {
      uint64_t v22 = a1[10];
      uint64_t v23 = a1[11];
      uint64_t v24 = *((void *)a2 + 10);
      uint64_t v25 = *((void *)a2 + 11);
      if (v22 == v24 && v23 == v25
        || (char v21 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v24, v25, 0LL) & 1) != 0))
      {
        uint64_t v26 = type metadata accessor for Bottle(0LL);
        uint64_t v27 = (char *)a1 + *(int *)(v26 + 40);
        uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v28(v12, v27, v4);
        v28(v9, &a2[*(int *)(v26 + 40)], v4);
        uint64_t v29 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v29);
        uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
        v30(v9, v4);
        v30(v12, v4);
      }
    }
  }

  else
  {
    char v21 = 0;
  }

  return v21 & 1;
}

uint64_t sub_1000B52A4(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for EscrowPair,  (uint64_t (*)(uint64_t, uint64_t))sub_1000845C4);
}

uint64_t sub_1000B52B8( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  char v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  char v16 = (char *)&v26 - v15;
  uint64_t v17 = *(int *)(a3(0LL) + 20);
  uint64_t v18 = *(void *)(a1 + v17);
  uint64_t v19 = *(void *)(a2 + v17);
  if (v18 == v19
    || (swift_retain(*(void *)(a1 + v17)),
        swift_retain(v19),
        char v20 = a4(v18, v19),
        swift_release(v19),
        swift_release(v18),
        (v20 & 1) != 0))
  {
    char v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v21(v16, a1, v8);
    v21(v13, a2, v8);
    uint64_t v22 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v8, v22);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v13, v8);
    v24(v16, v8);
  }

  else
  {
    char v23 = 0;
  }

  return v23 & 1;
}

uint64_t type metadata accessor for ViewKeys(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253260, (uint64_t)&nominal type descriptor for ViewKeys);
}

uint64_t type metadata accessor for ViewKeys._StorageClass(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_1002554D0, (uint64_t)&nominal type descriptor for ViewKeys._StorageClass);
}

uint64_t type metadata accessor for ViewKey(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002531C0, (uint64_t)&nominal type descriptor for ViewKey);
}

uint64_t type metadata accessor for FetchRecoverableTLKSharesResponse.View(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100254518,  (uint64_t)&nominal type descriptor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t type metadata accessor for ViewKeysRecords(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_1002532F0, (uint64_t)&nominal type descriptor for ViewKeysRecords);
}

uint64_t type metadata accessor for CurrentCKKSItem(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_1002552A0, (uint64_t)&nominal type descriptor for CurrentCKKSItem);
}

uint64_t type metadata accessor for CurrentCKKSItemSpecifier(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100255170, (uint64_t)&nominal type descriptor for CurrentCKKSItemSpecifier);
}

uint64_t type metadata accessor for DirectPCSIdentity(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100255038, (uint64_t)&nominal type descriptor for DirectPCSIdentity);
}

uint64_t type metadata accessor for PCSService(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254F08, (uint64_t)&nominal type descriptor for PCSService);
}

uint64_t type metadata accessor for ResetRequest(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_1002537C8, (uint64_t)&nominal type descriptor for ResetRequest);
}

uint64_t type metadata accessor for Metrics(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253730, (uint64_t)&nominal type descriptor for Metrics);
}

uint64_t type metadata accessor for EstablishRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253918, (uint64_t)&nominal type descriptor for EstablishRequest);
}

uint64_t type metadata accessor for JoinWithVoucherRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253A40, (uint64_t)&nominal type descriptor for JoinWithVoucherRequest);
}

uint64_t type metadata accessor for UpdateTrustRequest(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100253B68, (uint64_t)&nominal type descriptor for UpdateTrustRequest);
}

uint64_t type metadata accessor for SetRecoveryKeyRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253CB8, (uint64_t)&nominal type descriptor for SetRecoveryKeyRequest);
}

uint64_t type metadata accessor for FetchChangesRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254188, (uint64_t)&nominal type descriptor for FetchChangesRequest);
}

uint64_t type metadata accessor for FetchViableBottlesRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002542B0, (uint64_t)&nominal type descriptor for FetchViableBottlesRequest);
}

uint64_t type metadata accessor for FetchPolicyDocumentsRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002545B8, (uint64_t)&nominal type descriptor for FetchPolicyDocumentsRequest);
}

uint64_t type metadata accessor for GetRepairActionRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002546E0, (uint64_t)&nominal type descriptor for GetRepairActionRequest);
}

uint64_t type metadata accessor for GetSupportAppInfoRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254A00, (uint64_t)&nominal type descriptor for GetSupportAppInfoRequest);
}

uint64_t type metadata accessor for ResetAccountCDPContentsRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254B38, (uint64_t)&nominal type descriptor for ResetAccountCDPContentsRequest);
}

uint64_t type metadata accessor for AddCustodianRecoveryKeyRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254060, (uint64_t)&nominal type descriptor for AddCustodianRecoveryKeyRequest);
}

uint64_t type metadata accessor for FetchRecoverableTLKSharesRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002543F0, (uint64_t)&nominal type descriptor for FetchRecoverableTLKSharesRequest);
}

uint64_t type metadata accessor for RemoveRecoveryKeyRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253E00, (uint64_t)&nominal type descriptor for RemoveRecoveryKeyRequest);
}

uint64_t type metadata accessor for PerformATOPRVActionsRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253F38, (uint64_t)&nominal type descriptor for PerformATOPRVActionsRequest);
}

uint64_t type metadata accessor for CurrentItemFetchRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100255208, (uint64_t)&nominal type descriptor for CurrentItemFetchRequest);
}

uint64_t type metadata accessor for DirectPCSIdentityFetchRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254FA0, (uint64_t)&nominal type descriptor for DirectPCSIdentityFetchRequest);
}

uint64_t type metadata accessor for RemoveUnreadableCKServerDataRequest(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002553D8, (uint64_t)&nominal type descriptor for RemoveUnreadableCKServerDataRequest);
}

uint64_t _s18TrustedPeersHelper04IdmsA14DevicesVersionV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v55 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v54 = (char *)&v51 - v10;
  uint64_t v11 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v53 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100007578(&qword_100251638);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v56 = (uint64_t)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v26 = (char *)&v51 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v51 - v28;
  uint64_t v30 = *(void *)a1;
  uint64_t v31 = *((void *)a1 + 1);
  char v57 = a1;
  uint64_t v58 = a2;
  uint64_t v32 = *(void *)a2;
  uint64_t v33 = *((void *)a2 + 1);
  if (v30 == *(void *)a2 && v31 == v33
    || (char v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) != 0))
  {
    uint64_t v51 = v5;
    uint64_t v52 = v4;
    uint64_t v35 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
    sub_10000FC68((uint64_t)&v57[*(int *)(v35 + 24)], (uint64_t)v29, (uint64_t *)&unk_100256D30);
    sub_10000FC68((uint64_t)&v58[*(int *)(v35 + 24)], (uint64_t)v26, (uint64_t *)&unk_100256D30);
    uint64_t v36 = (uint64_t)&v18[*(int *)(v15 + 48)];
    sub_10000FC68((uint64_t)v29, (uint64_t)v18, (uint64_t *)&unk_100256D30);
    sub_10000FC68((uint64_t)v26, v36, (uint64_t *)&unk_100256D30);
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v37((uint64_t)v18, 1LL, v11) == 1)
    {
      sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
      sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
      if (v37(v36, 1LL, v11) == 1)
      {
        sub_100041590((uint64_t)v18, (uint64_t *)&unk_100256D30);
LABEL_11:
        uint64_t v44 = v51;
        uint64_t v43 = v52;
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
        uint64_t v46 = v54;
        v45(v54, &v57[*(int *)(v35 + 20)], v52);
        uint64_t v47 = v55;
        v45(v55, &v58[*(int *)(v35 + 20)], v43);
        uint64_t v48 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v47, v43, v48);
        uint64_t v49 = *(void (**)(char *, uint64_t))(v44 + 8);
        v49(v47, v43);
        v49(v46, v43);
        return v34 & 1;
      }
    }

    else
    {
      uint64_t v38 = v56;
      sub_10000FC68((uint64_t)v18, v56, (uint64_t *)&unk_100256D30);
      if (v37(v36, 1LL, v11) != 1)
      {
        uint64_t v39 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v53, v36, v11);
        uint64_t v40 = sub_1000077B8( &qword_100251640,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v39, v11, v40);
        uint64_t v42 = *(void (**)(char *, uint64_t))(v12 + 8);
        v42(v39, v11);
        sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
        sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
        v42((char *)v38, v11);
        sub_100041590((uint64_t)v18, (uint64_t *)&unk_100256D30);
        if ((v41 & 1) != 0) {
          goto LABEL_11;
        }
LABEL_12:
        char v34 = 0;
        return v34 & 1;
      }

      sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
      sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v38, v11);
    }

    sub_100041590((uint64_t)v18, &qword_100251638);
    goto LABEL_12;
  }

  return v34 & 1;
}

  ;
}

uint64_t sub_1000B5A98(uint64_t result)
{
  switch(result)
  {
    case 4LL:
      uint64_t result = 3LL;
      break;
    case 8LL:
      uint64_t result = 4LL;
      break;
    case 16LL:
      uint64_t result = 5LL;
      break;
    default:
      return result;
  }

  return result;
}

  ;
}

uint64_t type metadata accessor for SignedPeerPermanentInfo(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100252AC8, (uint64_t)&nominal type descriptor for SignedPeerPermanentInfo);
}

uint64_t type metadata accessor for SignedPeerStableInfo(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100252B60, (uint64_t)&nominal type descriptor for SignedPeerStableInfo);
}

uint64_t type metadata accessor for SignedPeerDynamicInfo(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100252BF8, (uint64_t)&nominal type descriptor for SignedPeerDynamicInfo);
}

uint64_t type metadata accessor for SignedVoucher(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100252C90, (uint64_t)&nominal type descriptor for SignedVoucher);
}

uint64_t type metadata accessor for SignedRecoveryVoucher(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100252D28, (uint64_t)&nominal type descriptor for SignedRecoveryVoucher);
}

uint64_t type metadata accessor for SignedCustodianRecoveryKey(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100252DC0, (uint64_t)&nominal type descriptor for SignedCustodianRecoveryKey);
}

uint64_t type metadata accessor for IdmsTrustedDevicesVersion(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100252E58, (uint64_t)&nominal type descriptor for IdmsTrustedDevicesVersion);
}

uint64_t type metadata accessor for Peer(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100252EF8, (uint64_t)&nominal type descriptor for Peer);
}

uint64_t type metadata accessor for PeerDifference.OneOf_Operation(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253078, (uint64_t)&nominal type descriptor for PeerDifference.OneOf_Operation);
}

uint64_t type metadata accessor for PeerDifference(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100252FC8, (uint64_t)&nominal type descriptor for PeerDifference);
}

uint64_t type metadata accessor for TLKShare(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253108, (uint64_t)&nominal type descriptor for TLKShare);
}

uint64_t type metadata accessor for Bottle(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253390, (uint64_t)&nominal type descriptor for Bottle);
}

uint64_t type metadata accessor for EscrowPair(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253438, (uint64_t)&nominal type descriptor for EscrowPair);
}

uint64_t type metadata accessor for EscrowPair._StorageClass(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100255628, (uint64_t)&nominal type descriptor for EscrowPair._StorageClass);
}

uint64_t type metadata accessor for EscrowInformation(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100254D00, (uint64_t)&nominal type descriptor for EscrowInformation);
}

uint64_t type metadata accessor for EscrowInformation.Metadata(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254DB8, (uint64_t)&nominal type descriptor for EscrowInformation.Metadata);
}

uint64_t type metadata accessor for Changes(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002534C8, (uint64_t)&nominal type descriptor for Changes);
}

uint64_t type metadata accessor for PolicyDocumentKey(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253568, (uint64_t)&nominal type descriptor for PolicyDocumentKey);
}

uint64_t type metadata accessor for PolicyDocumentMapEntry(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100253600, (uint64_t)&nominal type descriptor for PolicyDocumentMapEntry);
}

uint64_t type metadata accessor for AccountInfo(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002536A0, (uint64_t)&nominal type descriptor for AccountInfo);
}

uint64_t type metadata accessor for ResetResponse(uint64_t a1)
{
  return sub_1000B6920(a1, (uint64_t *)&unk_100253880, (uint64_t)&nominal type descriptor for ResetResponse);
}

uint64_t type metadata accessor for EstablishRequest._StorageClass(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100255748,  (uint64_t)&nominal type descriptor for EstablishRequest._StorageClass);
}

uint64_t type metadata accessor for EstablishResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002539A8, (uint64_t)&nominal type descriptor for EstablishResponse);
}

uint64_t type metadata accessor for JoinWithVoucherRequest._StorageClass(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002558C0, (uint64_t)&nominal type descriptor for JoinWithVoucherRequest._StorageClass);
}

uint64_t type metadata accessor for JoinWithVoucherResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253AD0, (uint64_t)&nominal type descriptor for JoinWithVoucherResponse);
}

uint64_t type metadata accessor for UpdateTrustResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253C20, (uint64_t)&nominal type descriptor for UpdateTrustResponse);
}

uint64_t type metadata accessor for SetRecoveryKeyResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253D68, (uint64_t)&nominal type descriptor for SetRecoveryKeyResponse);
}

uint64_t type metadata accessor for RemoveRecoveryKeyResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253EA8, (uint64_t)&nominal type descriptor for RemoveRecoveryKeyResponse);
}

uint64_t type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(uint64_t a1)
{
  return sub_1000B6920( a1,  qword_100255A70,  (uint64_t)&nominal type descriptor for AddCustodianRecoveryKeyRequest._StorageClass);
}

uint64_t type metadata accessor for AddCustodianRecoveryKeyResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002540F0, (uint64_t)&nominal type descriptor for AddCustodianRecoveryKeyResponse);
}

uint64_t type metadata accessor for FetchChangesResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254220, (uint64_t)&nominal type descriptor for FetchChangesResponse);
}

uint64_t type metadata accessor for FetchViableBottlesResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254348, (uint64_t)&nominal type descriptor for FetchViableBottlesResponse);
}

uint64_t type metadata accessor for FetchRecoverableTLKSharesResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254488, (uint64_t)&nominal type descriptor for FetchRecoverableTLKSharesResponse);
}

uint64_t type metadata accessor for FetchPolicyDocumentsResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254650, (uint64_t)&nominal type descriptor for FetchPolicyDocumentsResponse);
}

uint64_t type metadata accessor for EscrowProxyFederationMoveRecordRequest(uint64_t a1)
{
  return sub_1000B6920( a1,  qword_100254788,  (uint64_t)&nominal type descriptor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t type metadata accessor for GetRepairActionResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254828, (uint64_t)&nominal type descriptor for GetRepairActionResponse);
}

uint64_t type metadata accessor for GetRepairActionResponse._StorageClass(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100255C40,  (uint64_t)&nominal type descriptor for GetRepairActionResponse._StorageClass);
}

uint64_t sub_1000B5DF0(uint64_t a1)
{
  uint64_t v3 = sub_100007578((uint64_t *)&unk_100256FF0);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  uint64_t v8 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = (void *)(v1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords) = 0LL;
  uint64_t v10 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords) = 0LL;
  uint64_t v72 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords) = 0LL;
  uint64_t v73 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled) = 0;
  uint64_t v74 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares) = 0LL;
  uint64_t v75 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares) = 0LL;
  uint64_t v76 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares) = 0LL;
  uint64_t v77 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled) = 0;
  uint64_t v78 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers) = 0LL;
  uint64_t v79 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers) = 0LL;
  uint64_t v80 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers) = 0LL;
  uint64_t v81 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup) = 0LL;
  uint64_t v82 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled) = 0;
  uint64_t v83 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords) = 0LL;
  uint64_t v84 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers) = 0LL;
  uint64_t v85 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers) = 0LL;
  char v86 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords) = 0LL;
  uint64_t v87 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords) = 0LL;
  uint64_t v88 = (void *)(v1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords) = 0LL;
  uint64_t v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed) = 0;
  uint64_t v90 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed) = 0;
  swift_beginAccess(a1 + 16, v135, 0LL, 0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(_BYTE *)(a1 + 24);
  swift_beginAccess(v1 + 16, v134, 1LL, 0LL);
  *(void *)(v1 + 16) = v11;
  *(_BYTE *)(v1 + 24) = v12;
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest,  v133,  0LL,  0LL);
  sub_10000FC68(v13, (uint64_t)v6, (uint64_t *)&unk_100256FF0);
  swift_beginAccess(v7, v132, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v6, v7, (uint64_t *)&unk_100256FF0);
  swift_endAccess(v132);
  uint64_t v14 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords,  v132,  0LL,  0LL);
  uint64_t v15 = *v14;
  swift_beginAccess(v9, v131, 1LL, 0LL);
  *uint64_t v9 = v15;
  uint64_t v16 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords,  v130,  0LL,  0LL);
  uint64_t v17 = *v16;
  swift_beginAccess(v10, v129, 1LL, 0LL);
  *uint64_t v10 = v17;
  uint64_t v18 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords,  &v128,  0LL,  0LL);
  uint64_t v19 = *v18;
  uint64_t v20 = v72;
  swift_beginAccess(v72, &v127, 1LL, 0LL);
  *uint64_t v20 = v19;
  uint64_t v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled,  &v126,  0LL,  0LL);
  LOBYTE(v21) = *v21;
  uint64_t v22 = v73;
  swift_beginAccess(v73, &v125, 1LL, 0LL);
  _BYTE *v22 = (_BYTE)v21;
  uint64_t v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares,  &v124,  0LL,  0LL);
  uint64_t v24 = *v23;
  uint64_t v25 = v74;
  swift_beginAccess(v74, &v123, 1LL, 0LL);
  *uint64_t v25 = v24;
  uint64_t v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares,  &v122,  0LL,  0LL);
  uint64_t v27 = *v26;
  uint64_t v28 = v75;
  swift_beginAccess(v75, &v121, 1LL, 0LL);
  *uint64_t v28 = v27;
  uint64_t v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares,  &v120,  0LL,  0LL);
  uint64_t v30 = *v29;
  uint64_t v31 = v76;
  swift_beginAccess(v76, &v119, 1LL, 0LL);
  *uint64_t v31 = v30;
  uint64_t v32 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled,  &v118,  0LL,  0LL);
  LOBYTE(v32) = *v32;
  uint64_t v33 = v77;
  swift_beginAccess(v77, &v117, 1LL, 0LL);
  *uint64_t v33 = (_BYTE)v32;
  char v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers,  &v116,  0LL,  0LL);
  uint64_t v35 = *v34;
  uint64_t v36 = v78;
  swift_beginAccess(v78, &v115, 1LL, 0LL);
  *uint64_t v36 = v35;
  uint64_t v37 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers,  &v114,  0LL,  0LL);
  uint64_t v38 = *v37;
  uint64_t v39 = v79;
  swift_beginAccess(v79, &v113, 1LL, 0LL);
  *uint64_t v39 = v38;
  uint64_t v40 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers,  &v112,  0LL,  0LL);
  uint64_t v41 = *v40;
  uint64_t v42 = v80;
  swift_beginAccess(v80, &v111, 1LL, 0LL);
  void *v42 = v41;
  uint64_t v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup,  &v110,  0LL,  0LL);
  uint64_t v44 = *v43;
  uint64_t v45 = v81;
  swift_beginAccess(v81, &v109, 1LL, 0LL);
  *uint64_t v45 = v44;
  uint64_t v46 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled,  &v108,  0LL,  0LL);
  LOBYTE(v46) = *v46;
  uint64_t v47 = v82;
  swift_beginAccess(v82, &v107, 1LL, 0LL);
  _BYTE *v47 = (_BYTE)v46;
  uint64_t v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords,  &v106,  0LL,  0LL);
  uint64_t v49 = *v48;
  char v50 = v83;
  swift_beginAccess(v83, &v105, 1LL, 0LL);
  void *v50 = v49;
  uint64_t v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers,  &v104,  0LL,  0LL);
  uint64_t v52 = *v51;
  uint64_t v53 = v84;
  swift_beginAccess(v84, &v103, 1LL, 0LL);
  void *v53 = v52;
  uint64_t v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers,  &v102,  0LL,  0LL);
  uint64_t v55 = *v54;
  uint64_t v56 = v85;
  swift_beginAccess(v85, &v101, 1LL, 0LL);
  void *v56 = v55;
  char v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords,  &v100,  0LL,  0LL);
  uint64_t v58 = *v57;
  uint64_t v59 = v86;
  swift_beginAccess(v86, &v99, 1LL, 0LL);
  *uint64_t v59 = v58;
  uint64_t v60 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords,  &v98,  0LL,  0LL);
  uint64_t v61 = *v60;
  uint64_t v62 = v87;
  swift_beginAccess(v87, &v97, 1LL, 0LL);
  *uint64_t v62 = v61;
  uint64_t v63 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords,  &v96,  0LL,  0LL);
  uint64_t v64 = *v63;
  uint64_t v65 = v88;
  swift_beginAccess(v88, &v95, 1LL, 0LL);
  *uint64_t v65 = v64;
  uint64_t v66 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed,  &v94,  0LL,  0LL);
  LOBYTE(v66) = *v66;
  uint64_t v67 = v89;
  swift_beginAccess(v89, &v93, 1LL, 0LL);
  *uint64_t v67 = (_BYTE)v66;
  uint64_t v68 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
  swift_beginAccess(v68, &v92, 0LL, 0LL);
  LOBYTE(v68) = *v68;
  uint64_t v69 = v90;
  swift_beginAccess(v90, &v91, 1LL, 0LL);
  _BYTE *v69 = (_BYTE)v68;
  return v1;
}

uint64_t type metadata accessor for SupportAppView(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002548B8, (uint64_t)&nominal type descriptor for SupportAppView);
}

uint64_t type metadata accessor for SupportAppDevice(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254950, (uint64_t)&nominal type descriptor for SupportAppDevice);
}

uint64_t type metadata accessor for GetSupportAppInfoResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254A98, (uint64_t)&nominal type descriptor for GetSupportAppInfoResponse);
}

uint64_t type metadata accessor for PasscodeGeneration(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254C70, (uint64_t)&nominal type descriptor for PasscodeGeneration);
}

uint64_t type metadata accessor for EscrowInformation.Metadata._StorageClass(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100255FD8,  (uint64_t)&nominal type descriptor for EscrowInformation.Metadata._StorageClass);
}

uint64_t type metadata accessor for EscrowInformation.Metadata.ClientMetadata(uint64_t a1)
{
  return sub_1000B6920( a1,  qword_100254E48,  (uint64_t)&nominal type descriptor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_1000B669C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007578(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B66E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007578(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for DirectPCSIdentityFetchResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_1002550D8, (uint64_t)&nominal type descriptor for DirectPCSIdentityFetchResponse);
}

uint64_t type metadata accessor for CurrentItemFetchResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100255340, (uint64_t)&nominal type descriptor for CurrentItemFetchResponse);
}

unint64_t sub_1000B674C()
{
  unint64_t result = qword_100252148;
  if (!qword_100252148)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ViewKeyClass, &type metadata for ViewKeyClass);
    atomic_store(result, (unint64_t *)&qword_100252148);
  }

  return result;
}

unint64_t sub_1000B6790()
{
  unint64_t result = qword_1002521A8;
  if (!qword_1002521A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResetReason, &type metadata for ResetReason);
    atomic_store(result, (unint64_t *)&qword_1002521A8);
  }

  return result;
}

uint64_t type metadata accessor for PerformATOPRVActionsResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100253FD0, (uint64_t)&nominal type descriptor for PerformATOPRVActionsResponse);
}

unint64_t sub_1000B67E8()
{
  unint64_t result = qword_100252250;
  if (!qword_100252250)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FilteringRequest,  &type metadata for FilteringRequest);
    atomic_store(result, (unint64_t *)&qword_100252250);
  }

  return result;
}

unint64_t sub_1000B682C()
{
  unint64_t result = qword_1002522E0;
  if (!qword_1002522E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SupportAppDeviceStatus,  &type metadata for SupportAppDeviceStatus);
    atomic_store(result, (unint64_t *)&qword_1002522E0);
  }

  return result;
}

uint64_t type metadata accessor for ResetAccountCDPContentsResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100254BE0, (uint64_t)&nominal type descriptor for ResetAccountCDPContentsResponse);
}

unint64_t sub_1000B6884()
{
  unint64_t result = qword_100252320;
  if (!qword_100252320)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RecordStatus, &type metadata for RecordStatus);
    atomic_store(result, (unint64_t *)&qword_100252320);
  }

  return result;
}

unint64_t sub_1000B68C8()
{
  unint64_t result = qword_100252328;
  if (!qword_100252328)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SOSViability, &type metadata for SOSViability);
    atomic_store(result, (unint64_t *)&qword_100252328);
  }

  return result;
}

uint64_t type metadata accessor for RemoveUnreadableCKServerDataResponse(uint64_t a1)
{
  return sub_1000B6920(a1, qword_100255470, (uint64_t)&nominal type descriptor for RemoveUnreadableCKServerDataResponse);
}

uint64_t sub_1000B6920(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

unint64_t sub_1000B6958()
{
  unint64_t result = qword_1002523B8;
  if (!qword_1002523B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ViewKeyClass, &type metadata for ViewKeyClass);
    atomic_store(result, (unint64_t *)&qword_1002523B8);
  }

  return result;
}

unint64_t sub_1000B69A0()
{
  unint64_t result = qword_1002523C0;
  if (!qword_1002523C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ViewKeyClass, &type metadata for ViewKeyClass);
    atomic_store(result, (unint64_t *)&qword_1002523C0);
  }

  return result;
}

uint64_t sub_1000B69E4()
{
  return sub_1000B70EC(&qword_1002523C8, &qword_1002523D0);
}

unint64_t sub_1000B6A0C()
{
  unint64_t result = qword_1002523D8;
  if (!qword_1002523D8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ViewKeyClass, &type metadata for ViewKeyClass);
    atomic_store(result, (unint64_t *)&qword_1002523D8);
  }

  return result;
}

unint64_t sub_1000B6A54()
{
  unint64_t result = qword_1002523E0;
  if (!qword_1002523E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResetReason, &type metadata for ResetReason);
    atomic_store(result, (unint64_t *)&qword_1002523E0);
  }

  return result;
}

unint64_t sub_1000B6A9C()
{
  unint64_t result = qword_1002523E8;
  if (!qword_1002523E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResetReason, &type metadata for ResetReason);
    atomic_store(result, (unint64_t *)&qword_1002523E8);
  }

  return result;
}

uint64_t sub_1000B6AE0()
{
  return sub_1000B70EC(&qword_1002523F0, &qword_1002523F8);
}

unint64_t sub_1000B6B08()
{
  unint64_t result = qword_100252400;
  if (!qword_100252400)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResetReason, &type metadata for ResetReason);
    atomic_store(result, (unint64_t *)&qword_100252400);
  }

  return result;
}

unint64_t sub_1000B6B50()
{
  unint64_t result = qword_100252408;
  if (!qword_100252408)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AccountFlags, &type metadata for AccountFlags);
    atomic_store(result, (unint64_t *)&qword_100252408);
  }

  return result;
}

unint64_t sub_1000B6B98()
{
  unint64_t result = qword_100252410;
  if (!qword_100252410)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AccountFlags, &type metadata for AccountFlags);
    atomic_store(result, (unint64_t *)&qword_100252410);
  }

  return result;
}

uint64_t sub_1000B6BDC()
{
  return sub_1000B70EC(&qword_100252418, &qword_100252420);
}

unint64_t sub_1000B6C04()
{
  unint64_t result = qword_100252428;
  if (!qword_100252428)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AccountFlags, &type metadata for AccountFlags);
    atomic_store(result, (unint64_t *)&qword_100252428);
  }

  return result;
}

unint64_t sub_1000B6C4C()
{
  unint64_t result = qword_100252430;
  if (!qword_100252430)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FilteringRequest,  &type metadata for FilteringRequest);
    atomic_store(result, (unint64_t *)&qword_100252430);
  }

  return result;
}

unint64_t sub_1000B6C94()
{
  unint64_t result = qword_100252438;
  if (!qword_100252438)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FilteringRequest,  &type metadata for FilteringRequest);
    atomic_store(result, (unint64_t *)&qword_100252438);
  }

  return result;
}

uint64_t sub_1000B6CD8()
{
  return sub_1000B70EC(&qword_100252440, &qword_100252448);
}

unint64_t sub_1000B6D00()
{
  unint64_t result = qword_100252450;
  if (!qword_100252450)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FilteringRequest,  &type metadata for FilteringRequest);
    atomic_store(result, (unint64_t *)&qword_100252450);
  }

  return result;
}

unint64_t sub_1000B6D48()
{
  unint64_t result = qword_100252458;
  if (!qword_100252458)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RepairAction, &type metadata for RepairAction);
    atomic_store(result, (unint64_t *)&qword_100252458);
  }

  return result;
}

unint64_t sub_1000B6D90()
{
  unint64_t result = qword_100252460;
  if (!qword_100252460)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RepairAction, &type metadata for RepairAction);
    atomic_store(result, (unint64_t *)&qword_100252460);
  }

  return result;
}

uint64_t sub_1000B6DD4()
{
  return sub_1000B70EC(&qword_100252468, &qword_100252470);
}

unint64_t sub_1000B6DFC()
{
  unint64_t result = qword_100252478;
  if (!qword_100252478)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RepairAction, &type metadata for RepairAction);
    atomic_store(result, (unint64_t *)&qword_100252478);
  }

  return result;
}

unint64_t sub_1000B6E44()
{
  unint64_t result = qword_100252480;
  if (!qword_100252480)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SupportAppDeviceStatus,  &type metadata for SupportAppDeviceStatus);
    atomic_store(result, (unint64_t *)&qword_100252480);
  }

  return result;
}

unint64_t sub_1000B6E8C()
{
  unint64_t result = qword_100252488;
  if (!qword_100252488)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SupportAppDeviceStatus,  &type metadata for SupportAppDeviceStatus);
    atomic_store(result, (unint64_t *)&qword_100252488);
  }

  return result;
}

uint64_t sub_1000B6ED0()
{
  return sub_1000B70EC(&qword_100252490, &qword_100252498);
}

unint64_t sub_1000B6EF8()
{
  unint64_t result = qword_1002524A0;
  if (!qword_1002524A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SupportAppDeviceStatus,  &type metadata for SupportAppDeviceStatus);
    atomic_store(result, (unint64_t *)&qword_1002524A0);
  }

  return result;
}

unint64_t sub_1000B6F40()
{
  unint64_t result = qword_1002524A8;
  if (!qword_1002524A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RecordStatus, &type metadata for RecordStatus);
    atomic_store(result, (unint64_t *)&qword_1002524A8);
  }

  return result;
}

unint64_t sub_1000B6F88()
{
  unint64_t result = qword_1002524B0;
  if (!qword_1002524B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RecordStatus, &type metadata for RecordStatus);
    atomic_store(result, (unint64_t *)&qword_1002524B0);
  }

  return result;
}

uint64_t sub_1000B6FCC()
{
  return sub_1000B70EC(&qword_1002524B8, &qword_1002524C0);
}

unint64_t sub_1000B6FF4()
{
  unint64_t result = qword_1002524C8;
  if (!qword_1002524C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RecordStatus, &type metadata for RecordStatus);
    atomic_store(result, (unint64_t *)&qword_1002524C8);
  }

  return result;
}

unint64_t sub_1000B703C()
{
  unint64_t result = qword_1002524D0;
  if (!qword_1002524D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SOSViability, &type metadata for SOSViability);
    atomic_store(result, (unint64_t *)&qword_1002524D0);
  }

  return result;
}

unint64_t sub_1000B7084()
{
  unint64_t result = qword_1002524D8;
  if (!qword_1002524D8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SOSViability, &type metadata for SOSViability);
    atomic_store(result, (unint64_t *)&qword_1002524D8);
  }

  return result;
}

uint64_t sub_1000B70C8()
{
  return sub_1000B70EC(&qword_1002524E0, &qword_1002524E8);
}

uint64_t sub_1000B70EC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000076A4(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000B7130()
{
  unint64_t result = qword_1002524F0;
  if (!qword_1002524F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SOSViability, &type metadata for SOSViability);
    atomic_store(result, (unint64_t *)&qword_1002524F0);
  }

  return result;
}

uint64_t sub_1000B7174()
{
  return sub_1000077B8( &qword_1002524F8,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
}

uint64_t sub_1000B71A0()
{
  return sub_1000077B8( &qword_100252500,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
}

uint64_t sub_1000B71CC()
{
  return sub_1000077B8( &qword_1002520F8,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
}

uint64_t sub_1000B71F8()
{
  return sub_1000077B8( &qword_100252508,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
}

uint64_t sub_1000B7224()
{
  return sub_1000077B8( &qword_100252510,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
}

uint64_t sub_1000B7250()
{
  return sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
}

uint64_t sub_1000B727C()
{
  return sub_1000077B8( &qword_100252100,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
}

uint64_t sub_1000B72A8()
{
  return sub_1000077B8( &qword_100252520,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
}

uint64_t sub_1000B72D4()
{
  return sub_1000077B8( &qword_100252528,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
}

uint64_t sub_1000B7300()
{
  return sub_1000077B8( &qword_100252530,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
}

uint64_t sub_1000B732C()
{
  return sub_1000077B8( &qword_100252108,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
}

uint64_t sub_1000B7358()
{
  return sub_1000077B8( &qword_100252538,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
}

uint64_t sub_1000B7384()
{
  return sub_1000077B8( &qword_100252540,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
}

uint64_t sub_1000B73B0()
{
  return sub_1000077B8( &qword_100257010,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
}

uint64_t sub_1000B73DC()
{
  return sub_1000077B8( &qword_100252110,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
}

uint64_t sub_1000B7408()
{
  return sub_1000077B8( &qword_100252548,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
}

uint64_t sub_1000B7434()
{
  return sub_1000077B8( &qword_100252550,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
}

uint64_t sub_1000B7460()
{
  return sub_1000077B8( &qword_100252558,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
}

uint64_t sub_1000B748C()
{
  return sub_1000077B8( &qword_100252118,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
}

uint64_t sub_1000B74B8()
{
  return sub_1000077B8( &qword_100252560,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
}

uint64_t sub_1000B74E4()
{
  return sub_1000077B8( &qword_100252568,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
}

uint64_t sub_1000B7510()
{
  return sub_1000077B8( &qword_100252570,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
}

uint64_t sub_1000B753C()
{
  return sub_1000077B8( &qword_100252120,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
}

uint64_t sub_1000B7568()
{
  return sub_1000077B8( &qword_100252578,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
}

uint64_t sub_1000B7594()
{
  return sub_1000077B8( &qword_100252580,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
}

uint64_t sub_1000B75C0()
{
  return sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
}

uint64_t sub_1000B75EC()
{
  return sub_1000077B8( &qword_100252128,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
}

uint64_t sub_1000B7618()
{
  return sub_1000077B8( &qword_100252590,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
}

uint64_t sub_1000B7644()
{
  return sub_1000077B8( &qword_100252598,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
}

uint64_t sub_1000B7670()
{
  return sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
}

uint64_t sub_1000B769C()
{
  return sub_1000077B8( &qword_100252130,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
}

uint64_t sub_1000B76C8()
{
  return sub_1000077B8( &qword_1002525A0,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
}

uint64_t sub_1000B76F4()
{
  return sub_1000077B8( &qword_1002525A8,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
}

uint64_t sub_1000B7720()
{
  return sub_1000077B8( &qword_100252178,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
}

uint64_t sub_1000B774C()
{
  return sub_1000077B8( &qword_100252138,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
}

uint64_t sub_1000B7778()
{
  return sub_1000077B8( &qword_1002525B0,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
}

uint64_t sub_1000B77A4()
{
  return sub_1000077B8( &qword_1002525B8,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
}

uint64_t sub_1000B77D0()
{
  return sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
}

uint64_t sub_1000B77FC()
{
  return sub_1000077B8( &qword_100252140,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
}

uint64_t sub_1000B7828()
{
  return sub_1000077B8( &qword_1002525C0,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
}

uint64_t sub_1000B7854()
{
  return sub_1000077B8( &qword_1002525C8,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
}

uint64_t sub_1000B7880()
{
  return sub_1000077B8( (unint64_t *)&qword_1002517F0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
}

uint64_t sub_1000B78AC()
{
  return sub_1000077B8( &qword_100252150,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
}

uint64_t sub_1000B78D8()
{
  return sub_1000077B8( &qword_1002525D0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
}

uint64_t sub_1000B7904()
{
  return sub_1000077B8( &qword_1002525D8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
}

uint64_t sub_1000B7930()
{
  return sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
}

uint64_t sub_1000B795C()
{
  return sub_1000077B8( &qword_100252158,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
}

uint64_t sub_1000B7988()
{
  return sub_1000077B8( &qword_1002525E0,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
}

uint64_t sub_1000B79B4()
{
  return sub_1000077B8( &qword_1002525E8,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
}

uint64_t sub_1000B79E0()
{
  return sub_1000077B8( &qword_1002525F0,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
}

uint64_t sub_1000B7A0C()
{
  return sub_1000077B8( &qword_100252160,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
}

uint64_t sub_1000B7A38()
{
  return sub_1000077B8( &qword_1002525F8,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
}

uint64_t sub_1000B7A64()
{
  return sub_1000077B8( &qword_100252600,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
}

uint64_t sub_1000B7A90()
{
  return sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
}

uint64_t sub_1000B7ABC()
{
  return sub_1000077B8( &qword_100252168,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
}

uint64_t sub_1000B7AE8()
{
  return sub_1000077B8( &qword_100252608,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
}

uint64_t sub_1000B7B14()
{
  return sub_1000077B8( &qword_100252610,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
}

uint64_t sub_1000B7B40()
{
  return sub_1000077B8( &qword_100252260,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
}

uint64_t sub_1000B7B6C()
{
  return sub_1000077B8( &qword_100252170,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
}

uint64_t sub_1000B7B98()
{
  return sub_1000077B8( &qword_100252618,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
}

uint64_t sub_1000B7BC4()
{
  return sub_1000077B8( &qword_100252620,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
}

uint64_t sub_1000B7BF0()
{
  return sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
}

uint64_t sub_1000B7C1C()
{
  return sub_1000077B8( &qword_100252180,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
}

uint64_t sub_1000B7C48()
{
  return sub_1000077B8( &qword_100252630,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
}

uint64_t sub_1000B7C74()
{
  return sub_1000077B8( &qword_100252638,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
}

uint64_t sub_1000B7CA0()
{
  return sub_1000077B8( &qword_100252298,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
}

uint64_t sub_1000B7CCC()
{
  return sub_1000077B8( &qword_100252188,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
}

uint64_t sub_1000B7CF8()
{
  return sub_1000077B8( &qword_100252640,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
}

uint64_t sub_1000B7D24()
{
  return sub_1000077B8( &qword_100252648,  type metadata accessor for PolicyDocumentMapEntry,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
}

uint64_t sub_1000B7D50()
{
  return sub_1000077B8( &qword_1002522A8,  type metadata accessor for PolicyDocumentMapEntry,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
}

uint64_t sub_1000B7D7C()
{
  return sub_1000077B8( &qword_100252190,  type metadata accessor for PolicyDocumentMapEntry,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
}

uint64_t sub_1000B7DA8()
{
  return sub_1000077B8( &qword_100252650,  type metadata accessor for PolicyDocumentMapEntry,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
}

uint64_t sub_1000B7DD4()
{
  return sub_1000077B8( &qword_100252658,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
}

uint64_t sub_1000B7E00()
{
  return sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
}

uint64_t sub_1000B7E2C()
{
  return sub_1000077B8( &qword_100252198,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
}

uint64_t sub_1000B7E58()
{
  return sub_1000077B8( &qword_100252660,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
}

uint64_t sub_1000B7E84()
{
  return sub_1000077B8( &qword_100252668,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
}

uint64_t sub_1000B7EB0()
{
  return sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
}

uint64_t sub_1000B7EDC()
{
  return sub_1000077B8( &qword_1002521A0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
}

uint64_t sub_1000B7F08()
{
  return sub_1000077B8( &qword_100252670,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
}

uint64_t sub_1000B7F34()
{
  return sub_1000077B8( &qword_100252678,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
}

uint64_t sub_1000B7F60()
{
  return sub_1000077B8( (unint64_t *)&unk_100257080,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
}

uint64_t sub_1000B7F8C()
{
  return sub_1000077B8( &qword_1002521B0,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
}

uint64_t sub_1000B7FB8()
{
  return sub_1000077B8( &qword_100252680,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
}

uint64_t sub_1000B7FE4()
{
  return sub_1000077B8( &qword_100252688,  type metadata accessor for ResetResponse,  (uint64_t)&protocol conformance descriptor for ResetResponse);
}

uint64_t sub_1000B8010()
{
  return sub_1000077B8( &qword_100252690,  type metadata accessor for ResetResponse,  (uint64_t)&protocol conformance descriptor for ResetResponse);
}

uint64_t sub_1000B803C()
{
  return sub_1000077B8( &qword_1002521B8,  type metadata accessor for ResetResponse,  (uint64_t)&protocol conformance descriptor for ResetResponse);
}

uint64_t sub_1000B8068()
{
  return sub_1000077B8( &qword_100252698,  type metadata accessor for ResetResponse,  (uint64_t)&protocol conformance descriptor for ResetResponse);
}

uint64_t sub_1000B8094()
{
  return sub_1000077B8( &qword_1002526A0,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
}

uint64_t sub_1000B80C0()
{
  return sub_1000077B8( &qword_1002526A8,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
}

uint64_t sub_1000B80EC()
{
  return sub_1000077B8( &qword_1002521C0,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
}

uint64_t sub_1000B8118()
{
  return sub_1000077B8( &qword_1002526B0,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
}

uint64_t sub_1000B8144()
{
  return sub_1000077B8( &qword_1002526B8,  type metadata accessor for EstablishResponse,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
}

uint64_t sub_1000B8170()
{
  return sub_1000077B8( &qword_1002526C0,  type metadata accessor for EstablishResponse,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
}

uint64_t sub_1000B819C()
{
  return sub_1000077B8( &qword_1002521D0,  type metadata accessor for EstablishResponse,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
}

uint64_t sub_1000B81C8()
{
  return sub_1000077B8( &qword_1002526C8,  type metadata accessor for EstablishResponse,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
}

uint64_t sub_1000B81F4()
{
  return sub_1000077B8( &qword_1002526D0,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
}

uint64_t sub_1000B8220()
{
  return sub_1000077B8( &qword_1002526D8,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
}

uint64_t sub_1000B824C()
{
  return sub_1000077B8( &qword_1002521D8,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
}

uint64_t sub_1000B8278()
{
  return sub_1000077B8( &qword_1002526E0,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
}

uint64_t sub_1000B82A4()
{
  return sub_1000077B8( &qword_1002526E8,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
}

uint64_t sub_1000B82D0()
{
  return sub_1000077B8( &qword_1002526F0,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
}

uint64_t sub_1000B82FC()
{
  return sub_1000077B8( &qword_1002521E0,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
}

uint64_t sub_1000B8328()
{
  return sub_1000077B8( &qword_1002526F8,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
}

uint64_t sub_1000B8354()
{
  return sub_1000077B8( &qword_100252700,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
}

uint64_t sub_1000B8380()
{
  return sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
}

uint64_t sub_1000B83AC()
{
  return sub_1000077B8( &qword_1002521F0,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
}

uint64_t sub_1000B83D8()
{
  return sub_1000077B8( &qword_100252710,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
}

uint64_t sub_1000B8404()
{
  return sub_1000077B8( &qword_100252718,  type metadata accessor for UpdateTrustResponse,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
}

uint64_t sub_1000B8430()
{
  return sub_1000077B8( &qword_100252720,  type metadata accessor for UpdateTrustResponse,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
}

uint64_t sub_1000B845C()
{
  return sub_1000077B8( &qword_1002521F8,  type metadata accessor for UpdateTrustResponse,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
}

uint64_t sub_1000B8488()
{
  return sub_1000077B8( &qword_100252728,  type metadata accessor for UpdateTrustResponse,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
}

uint64_t sub_1000B84B4()
{
  return sub_1000077B8( &qword_100252730,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
}

uint64_t sub_1000B84E0()
{
  return sub_1000077B8( (unint64_t *)&unk_100256D40,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
}

uint64_t sub_1000B850C()
{
  return sub_1000077B8( &qword_100252200,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
}

uint64_t sub_1000B8538()
{
  return sub_1000077B8( &qword_100252738,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
}

uint64_t sub_1000B8564()
{
  return sub_1000077B8( &qword_100252740,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
}

uint64_t sub_1000B8590()
{
  return sub_1000077B8( &qword_100252748,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
}

uint64_t sub_1000B85BC()
{
  return sub_1000077B8( &qword_100252208,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
}

uint64_t sub_1000B85E8()
{
  return sub_1000077B8( &qword_100252750,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
}

uint64_t sub_1000B8614()
{
  return sub_1000077B8( &qword_100252758,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
}

uint64_t sub_1000B8640()
{
  return sub_1000077B8( (unint64_t *)&unk_100256C80,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
}

uint64_t sub_1000B866C()
{
  return sub_1000077B8( &qword_100252210,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
}

uint64_t sub_1000B8698()
{
  return sub_1000077B8( &qword_100252760,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
}

uint64_t sub_1000B86C4()
{
  return sub_1000077B8( &qword_100252768,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
}

uint64_t sub_1000B86F0()
{
  return sub_1000077B8( &qword_100252770,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
}

uint64_t sub_1000B871C()
{
  return sub_1000077B8( &qword_100252218,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
}

uint64_t sub_1000B8748()
{
  return sub_1000077B8( &qword_100252778,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
}

uint64_t sub_1000B8774()
{
  return sub_1000077B8( &qword_100252780,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
}

uint64_t sub_1000B87A0()
{
  return sub_1000077B8( &qword_100252788,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
}

uint64_t sub_1000B87CC()
{
  return sub_1000077B8( &qword_100252220,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
}

uint64_t sub_1000B87F8()
{
  return sub_1000077B8( &qword_100252790,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
}

uint64_t sub_1000B8824()
{
  return sub_1000077B8( &qword_100252798,  type metadata accessor for PerformATOPRVActionsResponse,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
}

uint64_t sub_1000B8850()
{
  return sub_1000077B8( &qword_1002527A0,  type metadata accessor for PerformATOPRVActionsResponse,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
}

uint64_t sub_1000B887C()
{
  return sub_1000077B8( &qword_100252228,  type metadata accessor for PerformATOPRVActionsResponse,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
}

uint64_t sub_1000B88A8()
{
  return sub_1000077B8( &qword_1002527A8,  type metadata accessor for PerformATOPRVActionsResponse,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
}

uint64_t sub_1000B88D4()
{
  return sub_1000077B8( &qword_1002527B0,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
}

uint64_t sub_1000B8900()
{
  return sub_1000077B8( (unint64_t *)&unk_100257070,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
}

uint64_t sub_1000B892C()
{
  return sub_1000077B8( &qword_100252230,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
}

uint64_t sub_1000B8958()
{
  return sub_1000077B8( &qword_1002527B8,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
}

uint64_t sub_1000B8984()
{
  return sub_1000077B8( &qword_1002527C0,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
}

uint64_t sub_1000B89B0()
{
  return sub_1000077B8( &qword_1002527C8,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
}

uint64_t sub_1000B89DC()
{
  return sub_1000077B8( &qword_100252238,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
}

uint64_t sub_1000B8A08()
{
  return sub_1000077B8( &qword_1002527D0,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
}

uint64_t sub_1000B8A34()
{
  return sub_1000077B8( &qword_1002527D8,  type metadata accessor for FetchChangesRequest,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
}

uint64_t sub_1000B8A60()
{
  return sub_1000077B8( (unint64_t *)&unk_100256FB0,  type metadata accessor for FetchChangesRequest,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
}

uint64_t sub_1000B8A8C()
{
  return sub_1000077B8( &qword_100252240,  type metadata accessor for FetchChangesRequest,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
}

uint64_t sub_1000B8AB8()
{
  return sub_1000077B8( &qword_1002527E0,  type metadata accessor for FetchChangesRequest,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
}

uint64_t sub_1000B8AE4()
{
  return sub_1000077B8( &qword_1002527E8,  type metadata accessor for FetchChangesResponse,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
}

uint64_t sub_1000B8B10()
{
  return sub_1000077B8( &qword_1002527F0,  type metadata accessor for FetchChangesResponse,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
}

uint64_t sub_1000B8B3C()
{
  return sub_1000077B8( &qword_100252248,  type metadata accessor for FetchChangesResponse,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
}

uint64_t sub_1000B8B68()
{
  return sub_1000077B8( &qword_1002527F8,  type metadata accessor for FetchChangesResponse,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
}

uint64_t sub_1000B8B94()
{
  return sub_1000077B8( &qword_100252800,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
}

uint64_t sub_1000B8BC0()
{
  return sub_1000077B8( (unint64_t *)&unk_100257020,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
}

uint64_t sub_1000B8BEC()
{
  return sub_1000077B8( &qword_100252258,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
}

uint64_t sub_1000B8C18()
{
  return sub_1000077B8( &qword_100252808,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
}

uint64_t sub_1000B8C44()
{
  return sub_1000077B8( &qword_100252810,  type metadata accessor for FetchViableBottlesResponse,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
}

uint64_t sub_1000B8C70()
{
  return sub_1000077B8( &qword_100252818,  type metadata accessor for FetchViableBottlesResponse,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
}

uint64_t sub_1000B8C9C()
{
  return sub_1000077B8( &qword_100252270,  type metadata accessor for FetchViableBottlesResponse,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
}

uint64_t sub_1000B8CC8()
{
  return sub_1000077B8( &qword_100252820,  type metadata accessor for FetchViableBottlesResponse,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
}

uint64_t sub_1000B8CF4()
{
  return sub_1000077B8( &qword_100252828,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_1000B8D20()
{
  return sub_1000077B8( &qword_100252830,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_1000B8D4C()
{
  return sub_1000077B8( &qword_100252278,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_1000B8D78()
{
  return sub_1000077B8( &qword_100252838,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_1000B8DA4()
{
  return sub_1000077B8( &qword_100252840,  type metadata accessor for FetchRecoverableTLKSharesResponse,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
}

uint64_t sub_1000B8DD0()
{
  return sub_1000077B8( &qword_100252848,  type metadata accessor for FetchRecoverableTLKSharesResponse,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
}

uint64_t sub_1000B8DFC()
{
  return sub_1000077B8( &qword_100252288,  type metadata accessor for FetchRecoverableTLKSharesResponse,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
}

uint64_t sub_1000B8E28()
{
  return sub_1000077B8( &qword_100252850,  type metadata accessor for FetchRecoverableTLKSharesResponse,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
}

uint64_t sub_1000B8E54()
{
  return sub_1000077B8( &qword_100252858,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t sub_1000B8E80()
{
  return sub_1000077B8( &qword_100252280,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t sub_1000B8EAC()
{
  return sub_1000077B8( &qword_100252290,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t sub_1000B8ED8()
{
  return sub_1000077B8( &qword_100252860,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t sub_1000B8F04()
{
  return sub_1000077B8( &qword_100252868,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
}

uint64_t sub_1000B8F30()
{
  return sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
}

uint64_t sub_1000B8F5C()
{
  return sub_1000077B8( &qword_1002522A0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
}

uint64_t sub_1000B8F88()
{
  return sub_1000077B8( &qword_100252870,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
}

uint64_t sub_1000B8FB4()
{
  return sub_1000077B8( &qword_100252878,  type metadata accessor for FetchPolicyDocumentsResponse,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
}

uint64_t sub_1000B8FE0()
{
  return sub_1000077B8( &qword_100252880,  type metadata accessor for FetchPolicyDocumentsResponse,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
}

uint64_t sub_1000B900C()
{
  return sub_1000077B8( &qword_1002522B0,  type metadata accessor for FetchPolicyDocumentsResponse,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
}

uint64_t sub_1000B9038()
{
  return sub_1000077B8( &qword_100252888,  type metadata accessor for FetchPolicyDocumentsResponse,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
}

uint64_t sub_1000B9064()
{
  return sub_1000077B8( &qword_100252890,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
}

uint64_t sub_1000B9090()
{
  return sub_1000077B8( &qword_100252898,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
}

uint64_t sub_1000B90BC()
{
  return sub_1000077B8( &qword_1002522B8,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
}

uint64_t sub_1000B90E8()
{
  return sub_1000077B8( &qword_1002528A0,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
}

uint64_t sub_1000B9114()
{
  return sub_1000077B8( &qword_1002528A8,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t sub_1000B9140()
{
  return sub_1000077B8( &qword_1002528B0,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t sub_1000B916C()
{
  return sub_1000077B8( &qword_1002522C0,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t sub_1000B9198()
{
  return sub_1000077B8( &qword_1002528B8,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t sub_1000B91C4()
{
  return sub_1000077B8( &qword_1002528C0,  type metadata accessor for GetRepairActionResponse,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
}

uint64_t sub_1000B91F0()
{
  return sub_1000077B8( &qword_1002528C8,  type metadata accessor for GetRepairActionResponse,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
}

uint64_t sub_1000B921C()
{
  return sub_1000077B8( &qword_1002522C8,  type metadata accessor for GetRepairActionResponse,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
}

uint64_t sub_1000B9248()
{
  return sub_1000077B8( &qword_1002528D0,  type metadata accessor for GetRepairActionResponse,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
}

uint64_t sub_1000B9274()
{
  return sub_1000077B8( &qword_1002528D8,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
}

uint64_t sub_1000B92A0()
{
  return sub_1000077B8( &qword_1002522D8,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
}

uint64_t sub_1000B92CC()
{
  return sub_1000077B8( &qword_1002522D0,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
}

uint64_t sub_1000B92F8()
{
  return sub_1000077B8( &qword_1002528E0,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
}

uint64_t sub_1000B9324()
{
  return sub_1000077B8( &qword_1002528E8,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
}

uint64_t sub_1000B9350()
{
  return sub_1000077B8( &qword_1002522F8,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
}

uint64_t sub_1000B937C()
{
  return sub_1000077B8( &qword_1002522E8,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
}

uint64_t sub_1000B93A8()
{
  return sub_1000077B8( &qword_1002528F0,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
}

uint64_t sub_1000B93D4()
{
  return sub_1000077B8( &qword_1002528F8,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
}

uint64_t sub_1000B9400()
{
  return sub_1000077B8( &qword_100252900,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
}

uint64_t sub_1000B942C()
{
  return sub_1000077B8( &qword_1002522F0,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
}

uint64_t sub_1000B9458()
{
  return sub_1000077B8( &qword_100252908,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
}

uint64_t sub_1000B9484()
{
  return sub_1000077B8( &qword_100252910,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
}

uint64_t sub_1000B94B0()
{
  return sub_1000077B8( &qword_100252918,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
}

uint64_t sub_1000B94DC()
{
  return sub_1000077B8( &qword_100252300,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
}

uint64_t sub_1000B9508()
{
  return sub_1000077B8( &qword_100252920,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
}

uint64_t sub_1000B9534()
{
  return sub_1000077B8( &qword_100252928,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
}

uint64_t sub_1000B9560()
{
  return sub_1000077B8( &qword_100252930,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
}

uint64_t sub_1000B958C()
{
  return sub_1000077B8( &qword_100252308,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
}

uint64_t sub_1000B95B8()
{
  return sub_1000077B8( &qword_100252938,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
}

uint64_t sub_1000B95E4()
{
  return sub_1000077B8( &qword_100252940,  type metadata accessor for ResetAccountCDPContentsResponse,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
}

uint64_t sub_1000B9610()
{
  return sub_1000077B8( &qword_100252948,  type metadata accessor for ResetAccountCDPContentsResponse,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
}

uint64_t sub_1000B963C()
{
  return sub_1000077B8( &qword_100252310,  type metadata accessor for ResetAccountCDPContentsResponse,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
}

uint64_t sub_1000B9668()
{
  return sub_1000077B8( &qword_100252950,  type metadata accessor for ResetAccountCDPContentsResponse,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
}

uint64_t sub_1000B9694()
{
  return sub_1000077B8( &qword_100252958,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
}

uint64_t sub_1000B96C0()
{
  return sub_1000077B8( &qword_100252960,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
}

uint64_t sub_1000B96EC()
{
  return sub_1000077B8( &qword_100252318,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
}

uint64_t sub_1000B9718()
{
  return sub_1000077B8( &qword_100252968,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
}

uint64_t sub_1000B9744()
{
  return sub_1000077B8( &qword_100252970,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
}

uint64_t sub_1000B9770()
{
  return sub_1000077B8( &qword_100252268,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
}

uint64_t sub_1000B979C()
{
  return sub_1000077B8( &qword_100252330,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
}

uint64_t sub_1000B97C8()
{
  return sub_1000077B8( &qword_100252978,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
}

uint64_t sub_1000B97F4()
{
  return sub_1000077B8( &qword_100252980,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
}

uint64_t sub_1000B9820()
{
  return sub_1000077B8( &qword_100252988,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
}

uint64_t sub_1000B984C()
{
  return sub_1000077B8( &qword_100252338,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
}

uint64_t sub_1000B9878()
{
  return sub_1000077B8( &qword_100252990,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
}

uint64_t sub_1000B98A4()
{
  return sub_1000077B8( &qword_100252998,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_1000B98D0()
{
  return sub_1000077B8( &qword_1002529A0,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_1000B98FC()
{
  return sub_1000077B8( &qword_100252340,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_1000B9928()
{
  return sub_1000077B8( &qword_1002529A8,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_1000B9954()
{
  return sub_1000077B8( &qword_1002529B0,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
}

uint64_t sub_1000B9980()
{
  return sub_1000077B8( &qword_100252350,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
}

uint64_t sub_1000B99AC()
{
  return sub_1000077B8( &qword_100252348,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
}

uint64_t sub_1000B99D8()
{
  return sub_1000077B8( &qword_1002529B8,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
}

uint64_t sub_1000B9A04()
{
  return sub_1000077B8( &qword_1002529C0,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
}

uint64_t sub_1000B9A30()
{
  return sub_1000077B8( (unint64_t *)&unk_100256F20,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
}

uint64_t sub_1000B9A5C()
{
  return sub_1000077B8( &qword_100252358,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
}

uint64_t sub_1000B9A88()
{
  return sub_1000077B8( &qword_1002529C8,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
}

uint64_t sub_1000B9AB4()
{
  return sub_1000077B8( &qword_1002529D0,  type metadata accessor for DirectPCSIdentity,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
}

uint64_t sub_1000B9AE0()
{
  return sub_1000077B8( &qword_100252368,  type metadata accessor for DirectPCSIdentity,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
}

uint64_t sub_1000B9B0C()
{
  return sub_1000077B8( &qword_100252360,  type metadata accessor for DirectPCSIdentity,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
}

uint64_t sub_1000B9B38()
{
  return sub_1000077B8( &qword_1002529D8,  type metadata accessor for DirectPCSIdentity,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentity);
}

uint64_t sub_1000B9B64()
{
  return sub_1000077B8( &qword_1002529E0,  type metadata accessor for DirectPCSIdentityFetchResponse,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
}

uint64_t sub_1000B9B90()
{
  return sub_1000077B8( &qword_1002529E8,  type metadata accessor for DirectPCSIdentityFetchResponse,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
}

uint64_t sub_1000B9BBC()
{
  return sub_1000077B8( &qword_100252370,  type metadata accessor for DirectPCSIdentityFetchResponse,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
}

uint64_t sub_1000B9BE8()
{
  return sub_1000077B8( &qword_1002529F0,  type metadata accessor for DirectPCSIdentityFetchResponse,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchResponse);
}

uint64_t sub_1000B9C14()
{
  return sub_1000077B8( &qword_1002529F8,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
}

uint64_t sub_1000B9C40()
{
  return sub_1000077B8( &qword_100252380,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
}

uint64_t sub_1000B9C6C()
{
  return sub_1000077B8( &qword_100252378,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
}

uint64_t sub_1000B9C98()
{
  return sub_1000077B8( &qword_100252A00,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
}

uint64_t sub_1000B9CC4()
{
  return sub_1000077B8( &qword_100252A08,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
}

uint64_t sub_1000B9CF0()
{
  return sub_1000077B8( (unint64_t *)&unk_100256F40,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
}

uint64_t sub_1000B9D1C()
{
  return sub_1000077B8( &qword_100252388,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
}

uint64_t sub_1000B9D48()
{
  return sub_1000077B8( &qword_100252A10,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
}

uint64_t sub_1000B9D74()
{
  return sub_1000077B8( &qword_100252A18,  type metadata accessor for CurrentCKKSItem,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
}

uint64_t sub_1000B9DA0()
{
  return sub_1000077B8( &qword_100252398,  type metadata accessor for CurrentCKKSItem,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
}

uint64_t sub_1000B9DCC()
{
  return sub_1000077B8( &qword_100252390,  type metadata accessor for CurrentCKKSItem,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
}

uint64_t sub_1000B9DF8()
{
  return sub_1000077B8( &qword_100252A20,  type metadata accessor for CurrentCKKSItem,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItem);
}

uint64_t sub_1000B9E24()
{
  return sub_1000077B8( &qword_100252A28,  type metadata accessor for CurrentItemFetchResponse,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
}

uint64_t sub_1000B9E50()
{
  return sub_1000077B8( &qword_100252A30,  type metadata accessor for CurrentItemFetchResponse,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
}

uint64_t sub_1000B9E7C()
{
  return sub_1000077B8( &qword_1002523A0,  type metadata accessor for CurrentItemFetchResponse,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
}

uint64_t sub_1000B9EA8()
{
  return sub_1000077B8( &qword_100252A38,  type metadata accessor for CurrentItemFetchResponse,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchResponse);
}

uint64_t sub_1000B9ED4()
{
  return sub_1000077B8( &qword_100252A40,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
}

uint64_t sub_1000B9F00()
{
  return sub_1000077B8( &qword_100252A48,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
}

uint64_t sub_1000B9F2C()
{
  return sub_1000077B8( &qword_1002523A8,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
}

uint64_t sub_1000B9F58()
{
  return sub_1000077B8( &qword_100252A50,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
}

uint64_t sub_1000B9F84()
{
  return sub_1000077B8( &qword_100252A58,  type metadata accessor for RemoveUnreadableCKServerDataResponse,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
}

uint64_t sub_1000B9FB0()
{
  return sub_1000077B8( &qword_100252A60,  type metadata accessor for RemoveUnreadableCKServerDataResponse,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
}

uint64_t sub_1000B9FDC()
{
  return sub_1000077B8( &qword_1002523B0,  type metadata accessor for RemoveUnreadableCKServerDataResponse,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
}

uint64_t sub_1000BA008()
{
  return sub_1000077B8( &qword_100252A68,  type metadata accessor for RemoveUnreadableCKServerDataResponse,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataResponse);
}

uint64_t initializeBufferWithCopyOfBuffer for ViewKeyClass(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ViewKeyClass()
{
  return &type metadata for ViewKeyClass;
}

uint64_t getEnumTagSinglePayload for ResetReason(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ResetReason(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000BA0A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000BA0C4(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for ResetReason()
{
  return &type metadata for ResetReason;
}

ValueMetadata *type metadata accessor for AccountFlags()
{
  return &type metadata for AccountFlags;
}

ValueMetadata *type metadata accessor for FilteringRequest()
{
  return &type metadata for FilteringRequest;
}

ValueMetadata *type metadata accessor for RepairAction()
{
  return &type metadata for RepairAction;
}

ValueMetadata *type metadata accessor for SupportAppDeviceStatus()
{
  return &type metadata for SupportAppDeviceStatus;
}

ValueMetadata *type metadata accessor for RecordStatus()
{
  return &type metadata for RecordStatus;
}

ValueMetadata *type metadata accessor for SOSViability()
{
  return &type metadata for SOSViability;
}

uint64_t getEnumTagSinglePayload for SignedPeerPermanentInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA178);
}

uint64_t storeEnumTagSinglePayload for SignedPeerPermanentInfo( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA188);
}

uint64_t sub_1000BA18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA7CC(a1, a2, a3, (uint64_t)&unk_1001E5FD8, (uint64_t)&unk_1001E5FD8);
}

uint64_t getEnumTagSinglePayload for SignedPeerStableInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA1A8);
}

uint64_t storeEnumTagSinglePayload for SignedPeerStableInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA1B8);
}

uint64_t getEnumTagSinglePayload for SignedPeerDynamicInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA1C8);
}

uint64_t storeEnumTagSinglePayload for SignedPeerDynamicInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA1D8);
}

uint64_t getEnumTagSinglePayload for SignedVoucher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA1E8);
}

uint64_t storeEnumTagSinglePayload for SignedVoucher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA1F8);
}

uint64_t getEnumTagSinglePayload for SignedRecoveryVoucher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA208);
}

uint64_t storeEnumTagSinglePayload for SignedRecoveryVoucher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA218);
}

uint64_t *_s18TrustedPeersHelper23SignedPeerPermanentInfoVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000084E8(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1000084E8(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    char v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  }

  return a1;
}

uint64_t _s18TrustedPeersHelper23SignedPeerPermanentInfoVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *_s18TrustedPeersHelper23SignedPeerPermanentInfoVwcp_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000084E8(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000084E8(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  char v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  return a1;
}

uint64_t *_s18TrustedPeersHelper23SignedPeerPermanentInfoVwca_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000084E8(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000852C(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000084E8(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10000852C(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  return a1;
}

uint64_t *_s18TrustedPeersHelper23SignedPeerPermanentInfoVwta_0(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000852C(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10000852C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedCustodianRecoveryKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA4DC);
}

uint64_t sub_1000BA4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for SignedCustodianRecoveryKey( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA574);
}

char *sub_1000BA578(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)unint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IdmsTrustedDevicesVersion( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100007578((uint64_t *)&unk_100256D30);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v4;
}

uint64_t destroy for IdmsTrustedDevicesVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

void *initializeWithCopy for IdmsTrustedDevicesVersion(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *assignWithCopy for IdmsTrustedDevicesVersion(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v10) = v17(v13, 1LL, v15);
  int v18 = v17(v14, 1LL, v15);
  if (!(_DWORD)v10)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

_OWORD *initializeWithTake for IdmsTrustedDevicesVersion(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  return a1;
}

void *assignWithTake for IdmsTrustedDevicesVersion(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v10) = v17(v13, 1LL, v15);
  int v18 = v17(v14, 1LL, v15);
  if (!(_DWORD)v10)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdmsTrustedDevicesVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BAC5C);
}

uint64_t sub_1000BAC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for IdmsTrustedDevicesVersion( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BAD0C);
}

uint64_t sub_1000BAD0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000BADAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Peer(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    a1[2] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v66 = v13;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100007578(&qword_100256F80);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      sub_1000084E8(*v16, v22);
      *uint64_t v15 = v21;
      v15[1] = v22;
      uint64_t v23 = v16[2];
      unint64_t v24 = v16[3];
      sub_1000084E8(v23, v24);
      v15[2] = v23;
      v15[3] = v24;
      uint64_t v13 = v66;
      v66((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }

    uint64_t v25 = a3[8];
    uint64_t v26 = (uint64_t *)((char *)v4 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for SignedPeerStableInfo(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_100007578(&qword_100251F18);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      uint64_t v31 = *v27;
      unint64_t v32 = v27[1];
      sub_1000084E8(*v27, v32);
      *uint64_t v26 = v31;
      v26[1] = v32;
      uint64_t v33 = v27[2];
      unint64_t v34 = v27[3];
      sub_1000084E8(v33, v34);
      v26[2] = v33;
      v26[3] = v34;
      uint64_t v13 = v66;
      v66((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }

    uint64_t v35 = a3[9];
    uint64_t v36 = (uint64_t *)((char *)v4 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v38 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v37, 1LL, v38))
    {
      uint64_t v40 = sub_100007578(&qword_100256CA0);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      uint64_t v41 = *v37;
      unint64_t v42 = v37[1];
      sub_1000084E8(*v37, v42);
      *uint64_t v36 = v41;
      v36[1] = v42;
      uint64_t v43 = v37[2];
      unint64_t v44 = v37[3];
      sub_1000084E8(v43, v44);
      v36[2] = v43;
      v36[3] = v44;
      uint64_t v13 = v66;
      v66((char *)v36 + *(int *)(v38 + 24), (char *)v37 + *(int *)(v38 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
    }

    uint64_t v45 = a3[10];
    uint64_t v46 = (uint64_t *)((char *)v4 + v45);
    uint64_t v47 = (uint64_t *)((char *)a2 + v45);
    uint64_t v48 = type metadata accessor for SignedRecoveryVoucher(0LL);
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48))(v47, 1LL, v48))
    {
      uint64_t v50 = sub_100007578(&qword_100251F20);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64LL));
    }

    else
    {
      uint64_t v51 = *v47;
      unint64_t v52 = v47[1];
      sub_1000084E8(*v47, v52);
      *uint64_t v46 = v51;
      v46[1] = v52;
      uint64_t v53 = v47[2];
      unint64_t v54 = v47[3];
      sub_1000084E8(v53, v54);
      v46[2] = v53;
      v46[3] = v54;
      uint64_t v13 = v66;
      v66((char *)v46 + *(int *)(v48 + 24), (char *)v47 + *(int *)(v48 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0LL, 1LL, v48);
    }

    uint64_t v55 = a3[11];
    uint64_t v56 = (uint64_t *)((char *)v4 + v55);
    char v57 = (uint64_t *)((char *)a2 + v55);
    uint64_t v58 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    uint64_t v59 = *(void *)(v58 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v59 + 48))(v57, 1LL, v58))
    {
      uint64_t v60 = sub_100007578(&qword_100251F28);
      memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    }

    else
    {
      uint64_t v61 = *v57;
      unint64_t v62 = v57[1];
      sub_1000084E8(*v57, v62);
      void *v56 = v61;
      v56[1] = v62;
      uint64_t v63 = v57[2];
      unint64_t v64 = v57[3];
      sub_1000084E8(v63, v64);
      v56[2] = v63;
      v56[3] = v64;
      v13((char *)v56 + *(int *)(v58 + 24), (char *)v57 + *(int *)(v58 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0LL, 1LL, v58);
    }
  }

  return v4;
}

uint64_t destroy for Peer(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v17(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    sub_10000852C(*(void *)v6, *(void *)(v6 + 8));
    sub_10000852C(*(void *)(v6 + 16), *(void *)(v6 + 24));
    v17(v6 + *(int *)(v7 + 24), v5);
  }

  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    sub_10000852C(*(void *)v8, *(void *)(v8 + 8));
    sub_10000852C(*(void *)(v8 + 16), *(void *)(v8 + 24));
    v17(v8 + *(int *)(v9 + 24), v5);
  }

  uint64_t v10 = a1 + a2[9];
  uint64_t v11 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    sub_10000852C(*(void *)v10, *(void *)(v10 + 8));
    sub_10000852C(*(void *)(v10 + 16), *(void *)(v10 + 24));
    v17(v10 + *(int *)(v11 + 24), v5);
  }

  uint64_t v12 = a1 + a2[10];
  uint64_t v13 = type metadata accessor for SignedRecoveryVoucher(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    sub_10000852C(*(void *)v12, *(void *)(v12 + 8));
    sub_10000852C(*(void *)(v12 + 16), *(void *)(v12 + 24));
    v17(v12 + *(int *)(v13 + 24), v5);
  }

  uint64_t v14 = a1 + a2[11];
  uint64_t v15 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15);
  if (!(_DWORD)result)
  {
    sub_10000852C(*(void *)v14, *(void *)(v14 + 8));
    sub_10000852C(*(void *)(v14 + 16), *(void *)(v14 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v17)(v14 + *(int *)(v15 + 24), v5);
  }

  return result;
}

void *initializeWithCopy for Peer(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v64 = v12;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578(&qword_100256F80);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    sub_1000084E8(*v15, v20);
    *uint64_t v14 = v19;
    v14[1] = v20;
    uint64_t v21 = v15[2];
    unint64_t v22 = v15[3];
    sub_1000084E8(v21, v22);
    v14[2] = v21;
    v14[3] = v22;
    uint64_t v12 = v64;
    v64((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v23 = a3[8];
  unint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100007578(&qword_100251F18);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    uint64_t v29 = *v25;
    unint64_t v30 = v25[1];
    sub_1000084E8(*v25, v30);
    *unint64_t v24 = v29;
    v24[1] = v30;
    uint64_t v31 = v25[2];
    unint64_t v32 = v25[3];
    sub_1000084E8(v31, v32);
    v24[2] = v31;
    v24[3] = v32;
    uint64_t v12 = v64;
    v64((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  uint64_t v33 = a3[9];
  unint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  uint64_t v36 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v35, 1LL, v36))
  {
    uint64_t v38 = sub_100007578(&qword_100256CA0);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    uint64_t v39 = *v35;
    unint64_t v40 = v35[1];
    sub_1000084E8(*v35, v40);
    void *v34 = v39;
    v34[1] = v40;
    uint64_t v41 = v35[2];
    unint64_t v42 = v35[3];
    sub_1000084E8(v41, v42);
    v34[2] = v41;
    v34[3] = v42;
    uint64_t v12 = v64;
    v64((char *)v34 + *(int *)(v36 + 24), (char *)v35 + *(int *)(v36 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
  }

  uint64_t v43 = a3[10];
  unint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  uint64_t v46 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v47 + 48))(v45, 1LL, v46))
  {
    uint64_t v48 = sub_100007578(&qword_100251F20);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    uint64_t v49 = *v45;
    unint64_t v50 = v45[1];
    sub_1000084E8(*v45, v50);
    *unint64_t v44 = v49;
    v44[1] = v50;
    uint64_t v51 = v45[2];
    unint64_t v52 = v45[3];
    sub_1000084E8(v51, v52);
    v44[2] = v51;
    v44[3] = v52;
    uint64_t v12 = v64;
    v64((char *)v44 + *(int *)(v46 + 24), (char *)v45 + *(int *)(v46 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
  }

  uint64_t v53 = a3[11];
  unint64_t v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v56 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v57 + 48))(v55, 1LL, v56))
  {
    uint64_t v58 = sub_100007578(&qword_100251F28);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    uint64_t v59 = *v55;
    unint64_t v60 = v55[1];
    sub_1000084E8(*v55, v60);
    *unint64_t v54 = v59;
    v54[1] = v60;
    uint64_t v61 = v55[2];
    unint64_t v62 = v55[3];
    sub_1000084E8(v61, v62);
    v54[2] = v61;
    v54[3] = v62;
    v12((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0LL, 1LL, v56);
  }

  return a1;
}

void *assignWithCopy for Peer(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v121 = *(void *)(v13 - 8);
  uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v121 + 24);
  v120(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      uint64_t v22 = *v16;
      unint64_t v23 = v16[1];
      sub_1000084E8(*v16, v23);
      *uint64_t v15 = v22;
      v15[1] = v23;
      uint64_t v24 = v16[2];
      unint64_t v25 = v16[3];
      sub_1000084E8(v24, v25);
      v15[2] = v24;
      v15[3] = v25;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v15 + *(int *)(v17 + 24),  (char *)v16 + *(int *)(v17 + 24),  v13);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_1000415CC((uint64_t)v15, type metadata accessor for SignedPeerPermanentInfo);
LABEL_6:
    uint64_t v26 = sub_100007578(&qword_100256F80);
    memcpy(v15, v16, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v80 = *v16;
  unint64_t v81 = v16[1];
  sub_1000084E8(*v16, v81);
  uint64_t v82 = *v15;
  unint64_t v83 = v15[1];
  *uint64_t v15 = v80;
  v15[1] = v81;
  sub_10000852C(v82, v83);
  uint64_t v84 = v16[2];
  unint64_t v85 = v16[3];
  sub_1000084E8(v84, v85);
  uint64_t v86 = v15[2];
  unint64_t v87 = v15[3];
  v15[2] = v84;
  v15[3] = v85;
  sub_10000852C(v86, v87);
  v120((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v13);
LABEL_7:
  uint64_t v27 = a3[8];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  unint64_t v32 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1LL, v30);
  int v34 = v32(v29, 1LL, v30);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = *v29;
      unint64_t v36 = v29[1];
      sub_1000084E8(*v29, v36);
      *uint64_t v28 = v35;
      v28[1] = v36;
      uint64_t v37 = v29[2];
      unint64_t v38 = v29[3];
      sub_1000084E8(v37, v38);
      v28[2] = v37;
      v28[3] = v38;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v28 + *(int *)(v30 + 24),  (char *)v29 + *(int *)(v30 + 24),  v13);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v34)
  {
    sub_1000415CC((uint64_t)v28, type metadata accessor for SignedPeerStableInfo);
LABEL_12:
    uint64_t v39 = sub_100007578(&qword_100251F18);
    memcpy(v28, v29, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v88 = *v29;
  unint64_t v89 = v29[1];
  sub_1000084E8(*v29, v89);
  uint64_t v90 = *v28;
  unint64_t v91 = v28[1];
  *uint64_t v28 = v88;
  v28[1] = v89;
  sub_10000852C(v90, v91);
  uint64_t v92 = v29[2];
  unint64_t v93 = v29[3];
  sub_1000084E8(v92, v93);
  uint64_t v94 = v28[2];
  unint64_t v95 = v28[3];
  v28[2] = v92;
  v28[3] = v93;
  sub_10000852C(v94, v95);
  v120((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v13);
LABEL_13:
  uint64_t v40 = a3[9];
  uint64_t v41 = (void *)((char *)a1 + v40);
  unint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1LL, v43);
  int v47 = v45(v42, 1LL, v43);
  if (v46)
  {
    if (!v47)
    {
      uint64_t v48 = *v42;
      unint64_t v49 = v42[1];
      sub_1000084E8(*v42, v49);
      *uint64_t v41 = v48;
      v41[1] = v49;
      uint64_t v50 = v42[2];
      unint64_t v51 = v42[3];
      sub_1000084E8(v50, v51);
      v41[2] = v50;
      v41[3] = v51;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v41 + *(int *)(v43 + 24),  (char *)v42 + *(int *)(v43 + 24),  v13);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v47)
  {
    sub_1000415CC((uint64_t)v41, type metadata accessor for SignedPeerDynamicInfo);
LABEL_18:
    uint64_t v52 = sub_100007578(&qword_100256CA0);
    memcpy(v41, v42, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_19;
  }

  uint64_t v96 = *v42;
  unint64_t v97 = v42[1];
  sub_1000084E8(*v42, v97);
  uint64_t v98 = *v41;
  unint64_t v99 = v41[1];
  *uint64_t v41 = v96;
  v41[1] = v97;
  sub_10000852C(v98, v99);
  uint64_t v100 = v42[2];
  unint64_t v101 = v42[3];
  sub_1000084E8(v100, v101);
  uint64_t v102 = v41[2];
  unint64_t v103 = v41[3];
  v41[2] = v100;
  v41[3] = v101;
  sub_10000852C(v102, v103);
  v120((char *)v41 + *(int *)(v43 + 24), (char *)v42 + *(int *)(v43 + 24), v13);
LABEL_19:
  uint64_t v53 = a3[10];
  unint64_t v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v56 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1LL, v56);
  int v60 = v58(v55, 1LL, v56);
  if (v59)
  {
    if (!v60)
    {
      uint64_t v61 = *v55;
      unint64_t v62 = v55[1];
      sub_1000084E8(*v55, v62);
      *unint64_t v54 = v61;
      v54[1] = v62;
      uint64_t v63 = v55[2];
      unint64_t v64 = v55[3];
      sub_1000084E8(v63, v64);
      v54[2] = v63;
      v54[3] = v64;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v54 + *(int *)(v56 + 24),  (char *)v55 + *(int *)(v56 + 24),  v13);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0LL, 1LL, v56);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v60)
  {
    sub_1000415CC((uint64_t)v54, type metadata accessor for SignedRecoveryVoucher);
LABEL_24:
    uint64_t v65 = sub_100007578(&qword_100251F20);
    memcpy(v54, v55, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_25;
  }

  uint64_t v104 = *v55;
  unint64_t v105 = v55[1];
  sub_1000084E8(*v55, v105);
  uint64_t v106 = *v54;
  unint64_t v107 = v54[1];
  *unint64_t v54 = v104;
  v54[1] = v105;
  sub_10000852C(v106, v107);
  uint64_t v108 = v55[2];
  unint64_t v109 = v55[3];
  sub_1000084E8(v108, v109);
  uint64_t v110 = v54[2];
  unint64_t v111 = v54[3];
  v54[2] = v108;
  v54[3] = v109;
  sub_10000852C(v110, v111);
  v120((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v13);
LABEL_25:
  uint64_t v66 = a3[11];
  uint64_t v67 = (void *)((char *)a1 + v66);
  uint64_t v68 = (void *)((char *)a2 + v66);
  uint64_t v69 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48);
  int v72 = v71(v67, 1LL, v69);
  int v73 = v71(v68, 1LL, v69);
  if (!v72)
  {
    if (!v73)
    {
      uint64_t v112 = *v68;
      unint64_t v113 = v68[1];
      sub_1000084E8(*v68, v113);
      uint64_t v114 = *v67;
      unint64_t v115 = v67[1];
      *uint64_t v67 = v112;
      v67[1] = v113;
      sub_10000852C(v114, v115);
      uint64_t v116 = v68[2];
      unint64_t v117 = v68[3];
      sub_1000084E8(v116, v117);
      uint64_t v118 = v67[2];
      unint64_t v119 = v67[3];
      v67[2] = v116;
      v67[3] = v117;
      sub_10000852C(v118, v119);
      v120((char *)v67 + *(int *)(v69 + 24), (char *)v68 + *(int *)(v69 + 24), v13);
      return a1;
    }

    sub_1000415CC((uint64_t)v67, type metadata accessor for SignedCustodianRecoveryKey);
    goto LABEL_30;
  }

  if (v73)
  {
LABEL_30:
    uint64_t v78 = sub_100007578(&qword_100251F28);
    memcpy(v67, v68, *(void *)(*(void *)(v78 - 8) + 64LL));
    return a1;
  }

  uint64_t v74 = *v68;
  unint64_t v75 = v68[1];
  sub_1000084E8(*v68, v75);
  *uint64_t v67 = v74;
  v67[1] = v75;
  uint64_t v76 = v68[2];
  unint64_t v77 = v68[3];
  sub_1000084E8(v76, v77);
  v67[2] = v76;
  v67[3] = v77;
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v67 + *(int *)(v69 + 24),  (char *)v68 + *(int *)(v69 + 24),  v13);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0LL, 1LL, v69);
  return a1;
}

uint64_t initializeWithTake for Peer(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100256F80);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = a3[8];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  int v20 = (_OWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100007578(&qword_100251F18);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    __int128 v24 = v20[1];
    _OWORD *v19 = *v20;
    v19[1] = v24;
    v10((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  uint64_t v25 = a3[9];
  uint64_t v26 = (_OWORD *)(a1 + v25);
  uint64_t v27 = (_OWORD *)(a2 + v25);
  uint64_t v28 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
  {
    uint64_t v30 = sub_100007578(&qword_100256CA0);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    __int128 v31 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v31;
    v10((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
  }

  uint64_t v32 = a3[10];
  int v33 = (_OWORD *)(a1 + v32);
  int v34 = (_OWORD *)(a2 + v32);
  uint64_t v35 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_100007578(&qword_100251F20);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    __int128 v38 = v34[1];
    *int v33 = *v34;
    v33[1] = v38;
    v10((char *)v33 + *(int *)(v35 + 24), (char *)v34 + *(int *)(v35 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  uint64_t v39 = a3[11];
  uint64_t v40 = (_OWORD *)(a1 + v39);
  uint64_t v41 = (_OWORD *)(a2 + v39);
  uint64_t v42 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
  {
    uint64_t v44 = sub_100007578(&qword_100251F28);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    __int128 v45 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v45;
    v10((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
  }

  return a1;
}

void *assignWithTake for Peer(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v85 = *(void *)(v12 - 8);
  uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v85 + 40);
  v84(v10, v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (v19)
  {
    if (!v20)
    {
      __int128 v21 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v21;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))( &v14[*(int *)(v16 + 24)],  &v15[*(int *)(v16 + 24)],  v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v20)
  {
    sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerPermanentInfo);
LABEL_6:
    uint64_t v22 = sub_100007578(&qword_100256F80);
    memcpy(v14, v15, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v64 = *(void *)v14;
  unint64_t v65 = *((void *)v14 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  sub_10000852C(v64, v65);
  uint64_t v66 = *((void *)v14 + 2);
  unint64_t v67 = *((void *)v14 + 3);
  *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
  sub_10000852C(v66, v67);
  v84(&v14[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v12);
LABEL_7:
  uint64_t v23 = a3[8];
  __int128 v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28(v25, 1LL, v26);
  if (v29)
  {
    if (!v30)
    {
      __int128 v31 = *((_OWORD *)v25 + 1);
      *(_OWORD *)__int128 v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v31;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))( &v24[*(int *)(v26 + 24)],  &v25[*(int *)(v26 + 24)],  v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v30)
  {
    sub_1000415CC((uint64_t)v24, type metadata accessor for SignedPeerStableInfo);
LABEL_12:
    uint64_t v32 = sub_100007578(&qword_100251F18);
    memcpy(v24, v25, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v68 = *(void *)v24;
  unint64_t v69 = *((void *)v24 + 1);
  *(_OWORD *)__int128 v24 = *(_OWORD *)v25;
  sub_10000852C(v68, v69);
  uint64_t v70 = *((void *)v24 + 2);
  unint64_t v71 = *((void *)v24 + 3);
  *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
  sub_10000852C(v70, v71);
  v84(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v12);
LABEL_13:
  uint64_t v33 = a3[9];
  int v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  __int128 v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1LL, v36);
  int v40 = v38(v35, 1LL, v36);
  if (v39)
  {
    if (!v40)
    {
      __int128 v41 = *((_OWORD *)v35 + 1);
      *(_OWORD *)int v34 = *(_OWORD *)v35;
      *((_OWORD *)v34 + 1) = v41;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))( &v34[*(int *)(v36 + 24)],  &v35[*(int *)(v36 + 24)],  v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v40)
  {
    sub_1000415CC((uint64_t)v34, type metadata accessor for SignedPeerDynamicInfo);
LABEL_18:
    uint64_t v42 = sub_100007578(&qword_100256CA0);
    memcpy(v34, v35, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_19;
  }

  uint64_t v72 = *(void *)v34;
  unint64_t v73 = *((void *)v34 + 1);
  *(_OWORD *)int v34 = *(_OWORD *)v35;
  sub_10000852C(v72, v73);
  uint64_t v74 = *((void *)v34 + 2);
  unint64_t v75 = *((void *)v34 + 3);
  *((_OWORD *)v34 + 1) = *((_OWORD *)v35 + 1);
  sub_10000852C(v74, v75);
  v84(&v34[*(int *)(v36 + 24)], &v35[*(int *)(v36 + 24)], v12);
LABEL_19:
  uint64_t v43 = a3[10];
  uint64_t v44 = (char *)a1 + v43;
  __int128 v45 = (char *)a2 + v43;
  uint64_t v46 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v44, 1LL, v46);
  int v50 = v48(v45, 1LL, v46);
  if (v49)
  {
    if (!v50)
    {
      __int128 v51 = *((_OWORD *)v45 + 1);
      *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
      *((_OWORD *)v44 + 1) = v51;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))( &v44[*(int *)(v46 + 24)],  &v45[*(int *)(v46 + 24)],  v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v50)
  {
    sub_1000415CC((uint64_t)v44, type metadata accessor for SignedRecoveryVoucher);
LABEL_24:
    uint64_t v52 = sub_100007578(&qword_100251F20);
    memcpy(v44, v45, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_25;
  }

  uint64_t v76 = *(void *)v44;
  unint64_t v77 = *((void *)v44 + 1);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  sub_10000852C(v76, v77);
  uint64_t v78 = *((void *)v44 + 2);
  unint64_t v79 = *((void *)v44 + 3);
  *((_OWORD *)v44 + 1) = *((_OWORD *)v45 + 1);
  sub_10000852C(v78, v79);
  v84(&v44[*(int *)(v46 + 24)], &v45[*(int *)(v46 + 24)], v12);
LABEL_25:
  uint64_t v53 = a3[11];
  unint64_t v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v56 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1LL, v56);
  int v60 = v58(v55, 1LL, v56);
  if (!v59)
  {
    if (!v60)
    {
      uint64_t v80 = *v54;
      unint64_t v81 = v54[1];
      *(_OWORD *)unint64_t v54 = *(_OWORD *)v55;
      sub_10000852C(v80, v81);
      uint64_t v82 = v54[2];
      unint64_t v83 = v54[3];
      *((_OWORD *)v54 + 1) = *((_OWORD *)v55 + 1);
      sub_10000852C(v82, v83);
      v84((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v12);
      return a1;
    }

    sub_1000415CC((uint64_t)v54, type metadata accessor for SignedCustodianRecoveryKey);
    goto LABEL_30;
  }

  if (v60)
  {
LABEL_30:
    uint64_t v62 = sub_100007578(&qword_100251F28);
    memcpy(v54, v55, *(void *)(*(void *)(v62 - 8) + 64LL));
    return a1;
  }

  __int128 v61 = *((_OWORD *)v55 + 1);
  *(_OWORD *)unint64_t v54 = *(_OWORD *)v55;
  *((_OWORD *)v54 + 1) = v61;
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))( (char *)v54 + *(int *)(v56 + 24),  (char *)v55 + *(int *)(v56 + 24),  v12);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0LL, 1LL, v56);
  return a1;
}

uint64_t getEnumTagSinglePayload for Peer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BC7E8);
}

uint64_t sub_1000BC7E8(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100256F80);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100251F18);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a3[8];
        }

        else
        {
          uint64_t v14 = sub_100007578(&qword_100256CA0);
          uint64_t v9 = *(void *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            uint64_t v10 = v14;
            uint64_t v11 = a3[9];
          }

          else
          {
            uint64_t v15 = sub_100007578(&qword_100251F20);
            uint64_t v9 = *(void *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              uint64_t v10 = v15;
              uint64_t v11 = a3[10];
            }

            else
            {
              uint64_t v10 = sub_100007578(&qword_100251F28);
              uint64_t v9 = *(void *)(v10 - 8);
              uint64_t v11 = a3[11];
            }
          }
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Peer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BC938);
}

uint64_t sub_1000BC938(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100256F80);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100251F18);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a4[8];
        }

        else
        {
          uint64_t v14 = sub_100007578(&qword_100256CA0);
          uint64_t v9 = *(void *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            uint64_t v10 = v14;
            uint64_t v11 = a4[9];
          }

          else
          {
            uint64_t v15 = sub_100007578(&qword_100251F20);
            uint64_t v9 = *(void *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              uint64_t v10 = v15;
              uint64_t v11 = a4[10];
            }

            else
            {
              uint64_t v10 = sub_100007578(&qword_100251F28);
              uint64_t v9 = *(void *)(v10 - 8);
              uint64_t v11 = a4[11];
            }
          }
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000BCA78(uint64_t a1)
{
  v14[0] = &unk_1001E6000;
  v14[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v14[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_100252F08, type metadata accessor for SignedPeerPermanentInfo);
    if (v5 <= 0x3F)
    {
      v14[3] = *(void *)(v4 - 8) + 64LL;
      sub_1000BCBD4(319LL, &qword_100252F10, type metadata accessor for SignedPeerStableInfo);
      if (v7 <= 0x3F)
      {
        v14[4] = *(void *)(v6 - 8) + 64LL;
        sub_1000BCBD4(319LL, &qword_100252F18, type metadata accessor for SignedPeerDynamicInfo);
        if (v9 <= 0x3F)
        {
          v14[5] = *(void *)(v8 - 8) + 64LL;
          sub_1000BCBD4(319LL, &qword_100252F20, type metadata accessor for SignedRecoveryVoucher);
          if (v11 <= 0x3F)
          {
            v14[6] = *(void *)(v10 - 8) + 64LL;
            sub_1000BCBD4( 319LL,  (unint64_t *)&unk_100252F28,  type metadata accessor for SignedCustodianRecoveryKey);
            if (v13 <= 0x3F)
            {
              v14[7] = *(void *)(v12 - 8) + 64LL;
              swift_initStructMetadata(a1, 256LL, 8LL, v14, a1 + 16);
            }
          }
        }
      }
    }
  }

void sub_1000BCBD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

void *initializeBufferWithCopyOfBuffer for PeerDifference(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = sub_100007578(&qword_100251658);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
LABEL_27:
      uint64_t v92 = *(int *)(a3 + 20);
      unint64_t v93 = (char *)a1 + v92;
      uint64_t v94 = (char *)a2 + v92;
      uint64_t v95 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 16LL))(v93, v94, v95);
      return a1;
    }

    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
    uint64_t v102 = v8;
    unsigned int v101 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      uint64_t v13 = a2[2];
      a1[2] = v13;
      uint64_t v14 = type metadata accessor for Peer(0LL);
      uint64_t v15 = *(int *)(v14 + 24);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v19 = v12;
      int v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v13);
      v20(v16, v17, v18);
      uint64_t v100 = (int *)v14;
      uint64_t v21 = *(int *)(v14 + 28);
      uint64_t v22 = (void *)((char *)a1 + v21);
      uint64_t v23 = (void *)((char *)a2 + v21);
      uint64_t v24 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v98 = v20;
      uint64_t v99 = v18;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24))
      {
        uint64_t v26 = sub_100007578(&qword_100256F80);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
      }

      else
      {
        uint64_t v43 = *v23;
        unint64_t v44 = v23[1];
        sub_1000084E8(*v23, v44);
        void *v22 = v43;
        v22[1] = v44;
        uint64_t v45 = v23[2];
        unint64_t v46 = v23[3];
        sub_1000084E8(v45, v46);
        v22[2] = v45;
        v22[3] = v46;
        v98((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v99);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
      }

      uint64_t v47 = v100[8];
      uint64_t v48 = (void *)((char *)a1 + v47);
      int v49 = (void *)((char *)a2 + v47);
      uint64_t v50 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v49, 1LL, v50))
      {
LABEL_13:
        uint64_t v52 = sub_100007578(&qword_100251F18);
        memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
LABEL_17:
        uint64_t v62 = v100[9];
        uint64_t v63 = (void *)((char *)a1 + v62);
        uint64_t v64 = (void *)((char *)a2 + v62);
        uint64_t v65 = type metadata accessor for SignedPeerDynamicInfo(0LL);
        uint64_t v66 = *(void *)(v65 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v66 + 48))(v64, 1LL, v65))
        {
          uint64_t v67 = sub_100007578(&qword_100256CA0);
          memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64LL));
        }

        else
        {
          uint64_t v68 = *v64;
          unint64_t v69 = v64[1];
          sub_1000084E8(*v64, v69);
          *uint64_t v63 = v68;
          v63[1] = v69;
          uint64_t v70 = v64[2];
          unint64_t v71 = v64[3];
          sub_1000084E8(v70, v71);
          v63[2] = v70;
          v63[3] = v71;
          v98((char *)v63 + *(int *)(v65 + 24), (char *)v64 + *(int *)(v65 + 24), v99);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0LL, 1LL, v65);
        }

        uint64_t v72 = v100[10];
        unint64_t v73 = (void *)((char *)a1 + v72);
        uint64_t v74 = (void *)((char *)a2 + v72);
        uint64_t v75 = type metadata accessor for SignedRecoveryVoucher(0LL);
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v76 + 48))(v74, 1LL, v75))
        {
          uint64_t v77 = sub_100007578(&qword_100251F20);
          memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
        }

        else
        {
          uint64_t v78 = *v74;
          unint64_t v79 = v74[1];
          sub_1000084E8(*v74, v79);
          void *v73 = v78;
          v73[1] = v79;
          uint64_t v80 = v74[2];
          unint64_t v81 = v74[3];
          sub_1000084E8(v80, v81);
          v73[2] = v80;
          v73[3] = v81;
          v98((char *)v73 + *(int *)(v75 + 24), (char *)v74 + *(int *)(v75 + 24), v99);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0LL, 1LL, v75);
        }

        uint64_t v82 = v100[11];
        unint64_t v83 = (void *)((char *)a1 + v82);
        uint64_t v84 = (void *)((char *)a2 + v82);
        uint64_t v85 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
        uint64_t v86 = *(void *)(v85 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v86 + 48))(v84, 1LL, v85))
        {
          uint64_t v87 = sub_100007578(&qword_100251F28);
          memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64LL));
        }

        else
        {
          uint64_t v88 = *v84;
          unint64_t v89 = v84[1];
          sub_1000084E8(*v84, v89);
          *unint64_t v83 = v88;
          v83[1] = v89;
          uint64_t v90 = v84[2];
          unint64_t v91 = v84[3];
          sub_1000084E8(v90, v91);
          v83[2] = v90;
          v83[3] = v91;
          v98((char *)v83 + *(int *)(v85 + 24), (char *)v84 + *(int *)(v85 + 24), v99);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0LL, 1LL, v85);
        }

        swift_storeEnumTagMultiPayload(a1, v7, v101);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v102 + 56))(a1, 0LL, 1LL, v7);
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v97 = v7;
      uint64_t v27 = a2[1];
      *a1 = *a2;
      a1[1] = v27;
      uint64_t v28 = a2[2];
      a1[2] = v28;
      int v29 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v30 = v29[6];
      __int128 v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      uint64_t v33 = type metadata accessor for UnknownStorage(0LL);
      int v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16LL);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      uint64_t v35 = v32;
      uint64_t v36 = v34;
      v34(v31, v35, v33);
      uint64_t v100 = v29;
      uint64_t v37 = v29[7];
      __int128 v38 = (void *)((char *)a1 + v37);
      int v39 = (void *)((char *)a2 + v37);
      uint64_t v40 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v98 = v36;
      uint64_t v99 = v33;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
      {
        uint64_t v42 = sub_100007578(&qword_100256F80);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
      }

      else
      {
        uint64_t v53 = *v39;
        unint64_t v54 = v39[1];
        sub_1000084E8(*v39, v54);
        *__int128 v38 = v53;
        v38[1] = v54;
        uint64_t v55 = v39[2];
        unint64_t v56 = v39[3];
        sub_1000084E8(v55, v56);
        v38[2] = v55;
        v38[3] = v56;
        v98((char *)v38 + *(int *)(v40 + 24), (char *)v39 + *(int *)(v40 + 24), v99);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
      }

      uint64_t v57 = v29[8];
      uint64_t v48 = (void *)((char *)a1 + v57);
      int v49 = (void *)((char *)a2 + v57);
      uint64_t v50 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v7 = v97;
    }

    uint64_t v58 = *v49;
    unint64_t v59 = v49[1];
    sub_1000084E8(*v49, v59);
    *uint64_t v48 = v58;
    v48[1] = v59;
    uint64_t v60 = v49[2];
    unint64_t v61 = v49[3];
    sub_1000084E8(v60, v61);
    v48[2] = v60;
    v48[3] = v61;
    v98((char *)v48 + *(int *)(v50 + 24), (char *)v49 + *(int *)(v50 + 24), v99);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0LL, 1LL, v50);
    goto LABEL_17;
  }

  uint64_t v10 = *a2;
  *a1 = *a2;
  a1 = (void *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
  swift_retain(v10);
  return a1;
}

uint64_t destroy for PeerDifference(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, 1LL, v4)
    && swift_getEnumCaseMultiPayload(a1, v4) <= 2)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    swift_bridgeObjectRelease(*(void *)(a1 + 16));
    int v5 = (int *)type metadata accessor for Peer(0LL);
    uint64_t v6 = a1 + v5[6];
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
    v8(v6, v7);
    uint64_t v9 = a1 + v5[7];
    uint64_t v10 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
    {
      sub_10000852C(*(void *)v9, *(void *)(v9 + 8));
      sub_10000852C(*(void *)(v9 + 16), *(void *)(v9 + 24));
      v8(v9 + *(int *)(v10 + 24), v7);
    }

    uint64_t v11 = a1 + v5[8];
    uint64_t v12 = type metadata accessor for SignedPeerStableInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12))
    {
      sub_10000852C(*(void *)v11, *(void *)(v11 + 8));
      sub_10000852C(*(void *)(v11 + 16), *(void *)(v11 + 24));
      v8(v11 + *(int *)(v12 + 24), v7);
    }

    uint64_t v13 = a1 + v5[9];
    uint64_t v14 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v13, 1LL, v14))
    {
      sub_10000852C(*(void *)v13, *(void *)(v13 + 8));
      sub_10000852C(*(void *)(v13 + 16), *(void *)(v13 + 24));
      v8(v13 + *(int *)(v14 + 24), v7);
    }

    uint64_t v15 = a1 + v5[10];
    uint64_t v16 = type metadata accessor for SignedRecoveryVoucher(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v15, 1LL, v16))
    {
      sub_10000852C(*(void *)v15, *(void *)(v15 + 8));
      sub_10000852C(*(void *)(v15 + 16), *(void *)(v15 + 24));
      v8(v15 + *(int *)(v16 + 24), v7);
    }

    uint64_t v17 = a1 + v5[11];
    uint64_t v18 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v17, 1LL, v18))
    {
      sub_10000852C(*(void *)v17, *(void *)(v17 + 8));
      sub_10000852C(*(void *)(v17 + 16), *(void *)(v17 + 24));
      v8(v17 + *(int *)(v18 + 24), v7);
    }
  }

  uint64_t v19 = a1 + *(int *)(a2 + 20);
  uint64_t v20 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8LL))(v19, v20);
}

void *initializeWithCopy for PeerDifference(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    uint64_t v151 = v7;
    uint64_t v152 = a3;
    unsigned int v150 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v26 = a2[1];
      *a1 = *a2;
      a1[1] = v26;
      uint64_t v27 = a2[2];
      a1[2] = v27;
      uint64_t v12 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v28 = v12[6];
      int v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL);
      uint64_t v33 = v26;
      uint64_t v16 = v31;
      swift_bridgeObjectRetain(v33);
      uint64_t v34 = v27;
      uint64_t v35 = v32;
      swift_bridgeObjectRetain(v34);
      v32(v29, v30, v16);
      uint64_t v36 = v12[7];
      uint64_t v20 = (void *)((char *)a1 + v36);
      uint64_t v21 = (void *)((char *)a2 + v36);
      uint64_t v22 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v146 = v16;
      uint64_t v148 = v35;
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
      {
        uint64_t v54 = *v21;
        unint64_t v55 = v21[1];
        sub_1000084E8(*v21, v55);
        *uint64_t v20 = v54;
        v20[1] = v55;
        goto LABEL_12;
      }
    }

    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v38 = a2[1];
        *a1 = *a2;
        a1[1] = v38;
        uint64_t v39 = a2[2];
        a1[2] = v39;
        uint64_t v40 = (int *)type metadata accessor for Peer(0LL);
        uint64_t v41 = v40[6];
        uint64_t v42 = (char *)a1 + v41;
        uint64_t v43 = (char *)a2 + v41;
        uint64_t v44 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16LL);
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v39);
        unint64_t v46 = v43;
        uint64_t v47 = v45;
        v45(v42, v46, v44);
        uint64_t v48 = v40[7];
        int v49 = (void *)((char *)a1 + v48);
        uint64_t v50 = (void *)((char *)a2 + v48);
        uint64_t v51 = type metadata accessor for SignedPeerPermanentInfo(0LL);
        uint64_t v52 = *(void *)(v51 - 8);
        uint64_t v147 = v44;
        char v149 = v47;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v52 + 48))(v50, 1LL, v51))
        {
          uint64_t v53 = sub_100007578(&qword_100256F80);
          memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
        }

        else
        {
          uint64_t v98 = *v50;
          unint64_t v99 = v50[1];
          sub_1000084E8(*v50, v99);
          *int v49 = v98;
          v49[1] = v99;
          uint64_t v100 = v50[2];
          unint64_t v101 = v50[3];
          sub_1000084E8(v100, v101);
          v49[2] = v100;
          v49[3] = v101;
          uint64_t v44 = v147;
          v149((char *)v49 + *(int *)(v51 + 24), (char *)v50 + *(int *)(v51 + 24), v147);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0LL, 1LL, v51);
        }

        uint64_t v102 = v40[8];
        unint64_t v103 = (void *)((char *)a1 + v102);
        uint64_t v104 = (void *)((char *)a2 + v102);
        uint64_t v105 = type metadata accessor for SignedPeerStableInfo(0LL);
        uint64_t v106 = *(void *)(v105 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v106 + 48))(v104, 1LL, v105))
        {
          uint64_t v107 = sub_100007578(&qword_100251F18);
          memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64LL));
        }

        else
        {
          uint64_t v108 = *v104;
          unint64_t v109 = v104[1];
          sub_1000084E8(*v104, v109);
          *unint64_t v103 = v108;
          v103[1] = v109;
          uint64_t v110 = v104[2];
          unint64_t v111 = v104[3];
          sub_1000084E8(v110, v111);
          v103[2] = v110;
          v103[3] = v111;
          uint64_t v44 = v147;
          v149((char *)v103 + *(int *)(v105 + 24), (char *)v104 + *(int *)(v105 + 24), v147);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0LL, 1LL, v105);
        }

        uint64_t v112 = v40[9];
        unint64_t v113 = (void *)((char *)a1 + v112);
        uint64_t v114 = (void *)((char *)a2 + v112);
        uint64_t v115 = type metadata accessor for SignedPeerDynamicInfo(0LL);
        uint64_t v116 = *(void *)(v115 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v116 + 48))(v114, 1LL, v115))
        {
          uint64_t v117 = sub_100007578(&qword_100256CA0);
          memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64LL));
        }

        else
        {
          uint64_t v118 = *v114;
          unint64_t v119 = v114[1];
          sub_1000084E8(*v114, v119);
          void *v113 = v118;
          v113[1] = v119;
          uint64_t v120 = v114[2];
          unint64_t v121 = v114[3];
          sub_1000084E8(v120, v121);
          v113[2] = v120;
          v113[3] = v121;
          uint64_t v44 = v147;
          v149((char *)v113 + *(int *)(v115 + 24), (char *)v114 + *(int *)(v115 + 24), v147);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0LL, 1LL, v115);
        }

        uint64_t v122 = v40[10];
        uint64_t v123 = (void *)((char *)a1 + v122);
        uint64_t v124 = (void *)((char *)a2 + v122);
        uint64_t v125 = type metadata accessor for SignedRecoveryVoucher(0LL);
        uint64_t v126 = *(void *)(v125 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v126 + 48))(v124, 1LL, v125))
        {
          uint64_t v127 = sub_100007578(&qword_100251F20);
          memcpy(v123, v124, *(void *)(*(void *)(v127 - 8) + 64LL));
        }

        else
        {
          uint64_t v128 = *v124;
          unint64_t v129 = v124[1];
          sub_1000084E8(*v124, v129);
          *uint64_t v123 = v128;
          v123[1] = v129;
          uint64_t v130 = v124[2];
          unint64_t v131 = v124[3];
          sub_1000084E8(v130, v131);
          v123[2] = v130;
          v123[3] = v131;
          uint64_t v44 = v147;
          v149((char *)v123 + *(int *)(v125 + 24), (char *)v124 + *(int *)(v125 + 24), v147);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v126 + 56))(v123, 0LL, 1LL, v125);
        }

        uint64_t v132 = v40[11];
        unint64_t v89 = (void *)((char *)a1 + v132);
        uint64_t v90 = (void *)((char *)a2 + v132);
        uint64_t v133 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
        uint64_t v134 = *(void *)(v133 - 8);
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v134 + 48))(v90, 1LL, v133))
        {
          uint64_t v136 = v44;
          uint64_t v137 = *v90;
          unint64_t v138 = v90[1];
          sub_1000084E8(*v90, v138);
          *unint64_t v89 = v137;
          v89[1] = v138;
          uint64_t v139 = v90[2];
          unint64_t v140 = v90[3];
          sub_1000084E8(v139, v140);
          v89[2] = v139;
          v89[3] = v140;
          v149((char *)v89 + *(int *)(v133 + 24), (char *)v90 + *(int *)(v133 + 24), v136);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v134 + 56))(v89, 0LL, 1LL, v133);
          goto LABEL_37;
        }

        goto LABEL_35;
      }

      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = a2[2];
      a1[2] = v11;
      uint64_t v12 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v13 = v12[6];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v17 = v10;
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v11);
      v18(v14, v15, v16);
      uint64_t v19 = v12[7];
      uint64_t v20 = (void *)((char *)a1 + v19);
      uint64_t v21 = (void *)((char *)a2 + v19);
      uint64_t v22 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v146 = v16;
      uint64_t v148 = v18;
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
      {
        uint64_t v25 = *v21;
        unint64_t v24 = v21[1];
        sub_1000084E8(*v21, v24);
        *uint64_t v20 = v25;
        v20[1] = v24;
LABEL_12:
        uint64_t v56 = v21[2];
        unint64_t v57 = v21[3];
        sub_1000084E8(v56, v57);
        v20[2] = v56;
        v20[3] = v57;
        uint64_t v16 = v146;
        v148((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v146);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
LABEL_13:
        uint64_t v58 = v12[8];
        unint64_t v59 = (void *)((char *)a1 + v58);
        uint64_t v60 = (void *)((char *)a2 + v58);
        uint64_t v61 = type metadata accessor for SignedPeerStableInfo(0LL);
        uint64_t v62 = *(void *)(v61 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v62 + 48))(v60, 1LL, v61))
        {
          uint64_t v63 = sub_100007578(&qword_100251F18);
          memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64LL));
        }

        else
        {
          uint64_t v64 = *v60;
          unint64_t v65 = v60[1];
          sub_1000084E8(*v60, v65);
          *unint64_t v59 = v64;
          v59[1] = v65;
          uint64_t v66 = v60[2];
          unint64_t v67 = v60[3];
          sub_1000084E8(v66, v67);
          v59[2] = v66;
          v59[3] = v67;
          uint64_t v16 = v146;
          v148((char *)v59 + *(int *)(v61 + 24), (char *)v60 + *(int *)(v61 + 24), v146);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0LL, 1LL, v61);
        }

        uint64_t v68 = v12[9];
        unint64_t v69 = (void *)((char *)a1 + v68);
        uint64_t v70 = (void *)((char *)a2 + v68);
        uint64_t v71 = type metadata accessor for SignedPeerDynamicInfo(0LL);
        uint64_t v72 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v70, 1LL, v71))
        {
          uint64_t v73 = sub_100007578(&qword_100256CA0);
          memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64LL));
        }

        else
        {
          uint64_t v74 = *v70;
          unint64_t v75 = v70[1];
          sub_1000084E8(*v70, v75);
          void *v69 = v74;
          v69[1] = v75;
          uint64_t v76 = v70[2];
          unint64_t v77 = v70[3];
          sub_1000084E8(v76, v77);
          v69[2] = v76;
          v69[3] = v77;
          uint64_t v16 = v146;
          v148((char *)v69 + *(int *)(v71 + 24), (char *)v70 + *(int *)(v71 + 24), v146);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0LL, 1LL, v71);
        }

        uint64_t v78 = v12[10];
        unint64_t v79 = (void *)((char *)a1 + v78);
        uint64_t v80 = (void *)((char *)a2 + v78);
        uint64_t v81 = type metadata accessor for SignedRecoveryVoucher(0LL);
        uint64_t v82 = *(void *)(v81 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v82 + 48))(v80, 1LL, v81))
        {
          uint64_t v83 = sub_100007578(&qword_100251F20);
          memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
        }

        else
        {
          uint64_t v84 = *v80;
          unint64_t v85 = v80[1];
          sub_1000084E8(*v80, v85);
          *unint64_t v79 = v84;
          v79[1] = v85;
          uint64_t v86 = v80[2];
          unint64_t v87 = v80[3];
          sub_1000084E8(v86, v87);
          v79[2] = v86;
          v79[3] = v87;
          uint64_t v16 = v146;
          v148((char *)v79 + *(int *)(v81 + 24), (char *)v80 + *(int *)(v81 + 24), v146);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0LL, 1LL, v81);
        }

        uint64_t v88 = v12[11];
        unint64_t v89 = (void *)((char *)a1 + v88);
        uint64_t v90 = (void *)((char *)a2 + v88);
        uint64_t v91 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
        uint64_t v92 = *(void *)(v91 - 8);
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v92 + 48))(v90, 1LL, v91))
        {
          uint64_t v93 = v16;
          uint64_t v94 = *v90;
          unint64_t v95 = v90[1];
          sub_1000084E8(*v90, v95);
          *unint64_t v89 = v94;
          v89[1] = v95;
          uint64_t v96 = v90[2];
          unint64_t v97 = v90[3];
          sub_1000084E8(v96, v97);
          v89[2] = v96;
          v89[3] = v97;
          v148((char *)v89 + *(int *)(v91 + 24), (char *)v90 + *(int *)(v91 + 24), v93);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0LL, 1LL, v91);
LABEL_37:
          a3 = v152;
          swift_storeEnumTagMultiPayload(a1, v6, v150);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v151 + 56))(a1, 0LL, 1LL, v6);
          goto LABEL_38;
        }

LABEL_35:
        uint64_t v135 = sub_100007578(&qword_100251F28);
        memcpy(v89, v90, *(void *)(*(void *)(v135 - 8) + 64LL));
        goto LABEL_37;
      }
    }

    uint64_t v37 = sub_100007578(&qword_100256F80);
    memcpy(v20, v21, *(void *)(*(void *)(v37 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v8 = sub_100007578(&qword_100251658);
  memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
LABEL_38:
  uint64_t v141 = *(int *)(a3 + 20);
  char v142 = (char *)a1 + v141;
  uint64_t v143 = (char *)a2 + v141;
  uint64_t v144 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v144 - 8) + 16LL))(v142, v143, v144);
  return a1;
}

              sub_100172694(a1);

              swift_release(v29);
              return;
            }
          }
        }
      }
    }

    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_3;
  }

  uint64_t v38 = result;
  uint64_t v39 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      unint64_t v55 = result;
    }
    else {
      unint64_t v55 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    a3 = _CocoaArrayWrapper.endIndex.getter(v55);
    uint64_t result = swift_bridgeObjectRelease(v38);
    if (a3 < 0) {
      goto LABEL_49;
    }
    if (a3 >= 1) {
      a4 = 1LL;
    }
    else {
      a4 = a3;
    }
    swift_bridgeObjectRetain(v38);
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter(v55);
    uint64_t result = swift_bridgeObjectRelease(v38);
    if (v56 >= a4)
    {
      swift_bridgeObjectRetain(v38);
      unint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v55);
      uint64_t result = swift_bridgeObjectRelease(v38);
      if (v57 >= a3) {
        goto LABEL_10;
      }
      __break(1u);
    }

          uint64_t v27 = (char *)v27 + 1;
        }

        while (v23 != v27);
        uint64_t v23 = [v21 countByEnumeratingWithState:&v48 objects:v60 count:16];
      }

      while (v23);
    }

    int v5 = v42;
    uint64_t v4 = v43;
  }

  objc_autoreleasePoolPop(v5);

  return v6;
}

void *assignWithCopy for PeerDifference(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (v9)
  {
    if (!v10)
    {
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      uint64_t v299 = a3;
      unsigned int v295 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        uint64_t v12 = a2[1];
        a1[1] = v12;
        uint64_t v13 = a2[2];
        a1[2] = v13;
        uint64_t v14 = type metadata accessor for Peer(0LL);
        uint64_t v15 = *(int *)(v14 + 24);
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL);
        uint64_t v20 = v12;
        uint64_t v21 = v18;
        swift_bridgeObjectRetain(v20);
        uint64_t v22 = v13;
        uint64_t v23 = v19;
        swift_bridgeObjectRetain(v22);
        v19(v16, v17, v21);
        v291 = (int *)v14;
        uint64_t v24 = *(int *)(v14 + 28);
        uint64_t v25 = (void *)((char *)a1 + v24);
        uint64_t v26 = (void *)((char *)a2 + v24);
        uint64_t v27 = type metadata accessor for SignedPeerPermanentInfo(0LL);
        uint64_t v28 = *(void *)(v27 - 8);
        v289 = v23;
        uint64_t v290 = v21;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
        {
          uint64_t v29 = sub_100007578(&qword_100256F80);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
        }

        else
        {
          uint64_t v64 = *v26;
          unint64_t v65 = v26[1];
          sub_1000084E8(*v26, v65);
          *uint64_t v25 = v64;
          v25[1] = v65;
          uint64_t v66 = v26[2];
          unint64_t v67 = v26[3];
          sub_1000084E8(v66, v67);
          v25[2] = v66;
          v25[3] = v67;
          v289((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v290);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
        }

        uint64_t v68 = v291[8];
        unint64_t v69 = (void *)((char *)a1 + v68);
        uint64_t v70 = (void *)((char *)a2 + v68);
        uint64_t v71 = type metadata accessor for SignedPeerStableInfo(0LL);
        uint64_t v72 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v70, 1LL, v71))
        {
LABEL_19:
          uint64_t v73 = sub_100007578(&qword_100251F18);
          memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64LL));
LABEL_27:
          uint64_t v115 = v291[9];
          uint64_t v116 = (void *)((char *)a1 + v115);
          uint64_t v117 = (void *)((char *)a2 + v115);
          uint64_t v118 = type metadata accessor for SignedPeerDynamicInfo(0LL);
          uint64_t v119 = *(void *)(v118 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v119 + 48))(v117, 1LL, v118))
          {
            uint64_t v120 = sub_100007578(&qword_100256CA0);
            memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64LL));
          }

          else
          {
            uint64_t v121 = *v117;
            unint64_t v122 = v117[1];
            sub_1000084E8(*v117, v122);
            void *v116 = v121;
            v116[1] = v122;
            uint64_t v123 = v117[2];
            unint64_t v124 = v117[3];
            sub_1000084E8(v123, v124);
            v116[2] = v123;
            v116[3] = v124;
            v289((char *)v116 + *(int *)(v118 + 24), (char *)v117 + *(int *)(v118 + 24), v290);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(v116, 0LL, 1LL, v118);
          }

          uint64_t v125 = v291[10];
          uint64_t v126 = (void *)((char *)a1 + v125);
          uint64_t v127 = (void *)((char *)a2 + v125);
          uint64_t v128 = type metadata accessor for SignedRecoveryVoucher(0LL);
          uint64_t v129 = *(void *)(v128 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v129 + 48))(v127, 1LL, v128))
          {
            uint64_t v130 = sub_100007578(&qword_100251F20);
            memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64LL));
          }

          else
          {
            uint64_t v131 = *v127;
            unint64_t v132 = v127[1];
            sub_1000084E8(*v127, v132);
            void *v126 = v131;
            v126[1] = v132;
            uint64_t v133 = v127[2];
            unint64_t v134 = v127[3];
            sub_1000084E8(v133, v134);
            v126[2] = v133;
            v126[3] = v134;
            v289((char *)v126 + *(int *)(v128 + 24), (char *)v127 + *(int *)(v128 + 24), v290);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v129 + 56))(v126, 0LL, 1LL, v128);
          }

          uint64_t v135 = v291[11];
          uint64_t v136 = (void *)((char *)a1 + v135);
          uint64_t v137 = (void *)((char *)a2 + v135);
          uint64_t v138 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
          uint64_t v139 = *(void *)(v138 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v139 + 48))(v137, 1LL, v138))
          {
            uint64_t v140 = sub_100007578(&qword_100251F28);
            memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64LL));
          }

          else
          {
            uint64_t v141 = *v137;
            unint64_t v142 = v137[1];
            sub_1000084E8(*v137, v142);
            *uint64_t v136 = v141;
            v136[1] = v142;
            uint64_t v143 = v137[2];
            unint64_t v144 = v137[3];
            sub_1000084E8(v143, v144);
            v136[2] = v143;
            v136[3] = v144;
            v289((char *)v136 + *(int *)(v138 + 24), (char *)v137 + *(int *)(v138 + 24), v290);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v139 + 56))(v136, 0LL, 1LL, v138);
          }

          a3 = v299;
          swift_storeEnumTagMultiPayload(a1, v6, v295);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
          goto LABEL_80;
        }
      }

      else
      {
        uint64_t v288 = v7;
        *a1 = *a2;
        uint64_t v48 = a2[1];
        a1[1] = v48;
        uint64_t v49 = a2[2];
        a1[2] = v49;
        uint64_t v50 = (int *)type metadata accessor for Peer(0LL);
        uint64_t v51 = v50[6];
        uint64_t v52 = (char *)a1 + v51;
        uint64_t v53 = (char *)a2 + v51;
        uint64_t v54 = type metadata accessor for UnknownStorage(0LL);
        unint64_t v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16LL);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v49);
        uint64_t v56 = v53;
        unint64_t v57 = v55;
        v55(v52, v56, v54);
        v291 = v50;
        uint64_t v58 = v50[7];
        unint64_t v59 = (void *)((char *)a1 + v58);
        uint64_t v60 = (void *)((char *)a2 + v58);
        uint64_t v61 = type metadata accessor for SignedPeerPermanentInfo(0LL);
        uint64_t v62 = *(void *)(v61 - 8);
        v289 = v57;
        uint64_t v290 = v54;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v62 + 48))(v60, 1LL, v61))
        {
          uint64_t v63 = sub_100007578(&qword_100256F80);
          memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64LL));
        }

        else
        {
          uint64_t v107 = *v60;
          unint64_t v106 = v60[1];
          sub_1000084E8(*v60, v106);
          *unint64_t v59 = v107;
          v59[1] = v106;
          uint64_t v108 = v60[2];
          unint64_t v109 = v60[3];
          sub_1000084E8(v108, v109);
          v59[2] = v108;
          v59[3] = v109;
          v289((char *)v59 + *(int *)(v61 + 24), (char *)v60 + *(int *)(v61 + 24), v290);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0LL, 1LL, v61);
        }

        uint64_t v110 = v50[8];
        unint64_t v69 = (void *)((char *)a1 + v110);
        uint64_t v70 = (void *)((char *)a2 + v110);
        uint64_t v71 = type metadata accessor for SignedPeerStableInfo(0LL);
        uint64_t v72 = *(void *)(v71 - 8);
        uint64_t v7 = v288;
      }

      uint64_t v111 = *v70;
      unint64_t v112 = v70[1];
      sub_1000084E8(*v70, v112);
      void *v69 = v111;
      v69[1] = v112;
      uint64_t v113 = v70[2];
      unint64_t v114 = v70[3];
      sub_1000084E8(v113, v114);
      v69[2] = v113;
      v69[3] = v114;
      v289((char *)v69 + *(int *)(v71 + 24), (char *)v70 + *(int *)(v71 + 24), v290);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0LL, 1LL, v71);
      goto LABEL_27;
    }

LABEL_9:
    uint64_t v30 = sub_100007578(&qword_100251658);
    memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_80;
  }

  if (v10)
  {
    sub_1000415CC((uint64_t)a1, type metadata accessor for PeerDifference.OneOf_Operation);
    goto LABEL_9;
  }

  if (a1 != a2)
  {
    sub_1000415CC((uint64_t)a1, type metadata accessor for PeerDifference.OneOf_Operation);
    int v31 = swift_getEnumCaseMultiPayload(a2, v6);
    uint64_t v300 = a3;
    if (v31 == 2)
    {
      *a1 = *a2;
      uint64_t v74 = a2[1];
      a1[1] = v74;
      uint64_t v75 = a2[2];
      a1[2] = v75;
      uint64_t v76 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v77 = v76[6];
      uint64_t v78 = (char *)a1 + v77;
      unint64_t v79 = (char *)a2 + v77;
      uint64_t v80 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16LL);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v75);
      uint64_t v82 = v79;
      uint64_t v83 = v81;
      v81(v78, v82, v80);
      uint64_t v84 = v76[7];
      unint64_t v85 = (void *)((char *)a1 + v84);
      uint64_t v86 = (void *)((char *)a2 + v84);
      uint64_t v87 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v88 = *(void *)(v87 - 8);
      uint64_t v293 = v80;
      v297 = v83;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v88 + 48))(v86, 1LL, v87))
      {
        uint64_t v89 = sub_100007578(&qword_100256F80);
        memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64LL));
      }

      else
      {
        uint64_t v156 = *v86;
        unint64_t v155 = v86[1];
        sub_1000084E8(*v86, v155);
        *unint64_t v85 = v156;
        v85[1] = v155;
        uint64_t v157 = v86[2];
        unint64_t v158 = v86[3];
        sub_1000084E8(v157, v158);
        v85[2] = v157;
        v85[3] = v158;
        uint64_t v80 = v293;
        v297((char *)v85 + *(int *)(v87 + 24), (char *)v86 + *(int *)(v87 + 24), v293);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0LL, 1LL, v87);
      }

      uint64_t v159 = v76[8];
      char v160 = (void *)((char *)a1 + v159);
      char v161 = (void *)((char *)a2 + v159);
      uint64_t v162 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v163 = *(void *)(v162 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v163 + 48))(v161, 1LL, v162))
      {
        uint64_t v164 = sub_100007578(&qword_100251F18);
        memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64LL));
      }

      else
      {
        uint64_t v185 = *v161;
        unint64_t v186 = v161[1];
        sub_1000084E8(*v161, v186);
        void *v160 = v185;
        v160[1] = v186;
        uint64_t v187 = v161[2];
        unint64_t v188 = v161[3];
        sub_1000084E8(v187, v188);
        v160[2] = v187;
        v160[3] = v188;
        uint64_t v80 = v293;
        v297((char *)v160 + *(int *)(v162 + 24), (char *)v161 + *(int *)(v162 + 24), v293);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v163 + 56))(v160, 0LL, 1LL, v162);
      }

      uint64_t v189 = v76[9];
      uint64_t v190 = (void *)((char *)a1 + v189);
      v191 = (void *)((char *)a2 + v189);
      uint64_t v192 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v193 = *(void *)(v192 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v193 + 48))(v191, 1LL, v192))
      {
        uint64_t v194 = sub_100007578(&qword_100256CA0);
        memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64LL));
      }

      else
      {
        uint64_t v215 = *v191;
        unint64_t v216 = v191[1];
        sub_1000084E8(*v191, v216);
        *uint64_t v190 = v215;
        v190[1] = v216;
        uint64_t v217 = v191[2];
        unint64_t v218 = v191[3];
        sub_1000084E8(v217, v218);
        v190[2] = v217;
        v190[3] = v218;
        uint64_t v80 = v293;
        v297((char *)v190 + *(int *)(v192 + 24), (char *)v191 + *(int *)(v192 + 24), v293);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v193 + 56))(v190, 0LL, 1LL, v192);
      }

      uint64_t v219 = v76[10];
      uint64_t v220 = (void *)((char *)a1 + v219);
      uint64_t v221 = (void *)((char *)a2 + v219);
      uint64_t v222 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v223 = *(void *)(v222 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v223 + 48))(v221, 1LL, v222))
      {
        uint64_t v224 = sub_100007578(&qword_100251F20);
        memcpy(v220, v221, *(void *)(*(void *)(v224 - 8) + 64LL));
      }

      else
      {
        uint64_t v245 = *v221;
        unint64_t v246 = v221[1];
        sub_1000084E8(*v221, v246);
        *uint64_t v220 = v245;
        v220[1] = v246;
        uint64_t v247 = v221[2];
        unint64_t v248 = v221[3];
        sub_1000084E8(v247, v248);
        v220[2] = v247;
        v220[3] = v248;
        uint64_t v80 = v293;
        v297((char *)v220 + *(int *)(v222 + 24), (char *)v221 + *(int *)(v222 + 24), v293);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v223 + 56))(v220, 0LL, 1LL, v222);
      }

      uint64_t v249 = v76[11];
      v250 = (void *)((char *)a1 + v249);
      v251 = (void *)((char *)a2 + v249);
      uint64_t v252 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v253 = *(void *)(v252 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v253 + 48))(v251, 1LL, v252))
      {
        uint64_t v254 = sub_100007578(&qword_100251F28);
        memcpy(v250, v251, *(void *)(*(void *)(v254 - 8) + 64LL));
      }

      else
      {
        uint64_t v273 = v80;
        uint64_t v274 = *v251;
        unint64_t v275 = v251[1];
        sub_1000084E8(*v251, v275);
        void *v250 = v274;
        v250[1] = v275;
        uint64_t v276 = v251[2];
        unint64_t v277 = v251[3];
        sub_1000084E8(v276, v277);
        v250[2] = v276;
        v250[3] = v277;
        v297((char *)v250 + *(int *)(v252 + 24), (char *)v251 + *(int *)(v252 + 24), v273);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v253 + 56))(v250, 0LL, 1LL, v252);
      }

      v270 = a1;
      uint64_t v271 = v6;
      uint64_t v272 = 2LL;
    }

    else if (v31 == 1)
    {
      *a1 = *a2;
      uint64_t v32 = a2[1];
      a1[1] = v32;
      uint64_t v33 = a2[2];
      a1[2] = v33;
      uint64_t v34 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v35 = v34[6];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16LL);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      uint64_t v40 = v37;
      uint64_t v41 = v39;
      v39(v36, v40, v38);
      uint64_t v42 = v34[7];
      uint64_t v43 = (void *)((char *)a1 + v42);
      uint64_t v44 = (void *)((char *)a2 + v42);
      uint64_t v45 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v46 = *(void *)(v45 - 8);
      uint64_t v292 = v38;
      v296 = v41;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v46 + 48))(v44, 1LL, v45))
      {
        uint64_t v47 = sub_100007578(&qword_100256F80);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
      }

      else
      {
        uint64_t v146 = *v44;
        unint64_t v145 = v44[1];
        sub_1000084E8(*v44, v145);
        *uint64_t v43 = v146;
        v43[1] = v145;
        uint64_t v147 = v44[2];
        unint64_t v148 = v44[3];
        sub_1000084E8(v147, v148);
        v43[2] = v147;
        v43[3] = v148;
        uint64_t v38 = v292;
        v296((char *)v43 + *(int *)(v45 + 24), (char *)v44 + *(int *)(v45 + 24), v292);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0LL, 1LL, v45);
      }

      uint64_t v149 = v34[8];
      unsigned int v150 = (void *)((char *)a1 + v149);
      uint64_t v151 = (void *)((char *)a2 + v149);
      uint64_t v152 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v153 = *(void *)(v152 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v153 + 48))(v151, 1LL, v152))
      {
        uint64_t v154 = sub_100007578(&qword_100251F18);
        memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64LL));
      }

      else
      {
        uint64_t v175 = *v151;
        unint64_t v176 = v151[1];
        sub_1000084E8(*v151, v176);
        *unsigned int v150 = v175;
        v150[1] = v176;
        uint64_t v177 = v151[2];
        unint64_t v178 = v151[3];
        sub_1000084E8(v177, v178);
        v150[2] = v177;
        v150[3] = v178;
        uint64_t v38 = v292;
        v296((char *)v150 + *(int *)(v152 + 24), (char *)v151 + *(int *)(v152 + 24), v292);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v153 + 56))(v150, 0LL, 1LL, v152);
      }

      uint64_t v179 = v34[9];
      v180 = (void *)((char *)a1 + v179);
      uint64_t v181 = (void *)((char *)a2 + v179);
      uint64_t v182 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v183 = *(void *)(v182 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v183 + 48))(v181, 1LL, v182))
      {
        uint64_t v184 = sub_100007578(&qword_100256CA0);
        memcpy(v180, v181, *(void *)(*(void *)(v184 - 8) + 64LL));
      }

      else
      {
        uint64_t v205 = *v181;
        unint64_t v206 = v181[1];
        sub_1000084E8(*v181, v206);
        void *v180 = v205;
        v180[1] = v206;
        uint64_t v207 = v181[2];
        unint64_t v208 = v181[3];
        sub_1000084E8(v207, v208);
        v180[2] = v207;
        v180[3] = v208;
        uint64_t v38 = v292;
        v296((char *)v180 + *(int *)(v182 + 24), (char *)v181 + *(int *)(v182 + 24), v292);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v183 + 56))(v180, 0LL, 1LL, v182);
      }

      uint64_t v209 = v34[10];
      uint64_t v210 = (void *)((char *)a1 + v209);
      uint64_t v211 = (void *)((char *)a2 + v209);
      uint64_t v212 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v213 = *(void *)(v212 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v213 + 48))(v211, 1LL, v212))
      {
        uint64_t v214 = sub_100007578(&qword_100251F20);
        memcpy(v210, v211, *(void *)(*(void *)(v214 - 8) + 64LL));
      }

      else
      {
        uint64_t v235 = *v211;
        unint64_t v236 = v211[1];
        sub_1000084E8(*v211, v236);
        *uint64_t v210 = v235;
        v210[1] = v236;
        uint64_t v237 = v211[2];
        unint64_t v238 = v211[3];
        sub_1000084E8(v237, v238);
        v210[2] = v237;
        v210[3] = v238;
        uint64_t v38 = v292;
        v296((char *)v210 + *(int *)(v212 + 24), (char *)v211 + *(int *)(v212 + 24), v292);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v213 + 56))(v210, 0LL, 1LL, v212);
      }

      uint64_t v239 = v34[11];
      v240 = (void *)((char *)a1 + v239);
      v241 = (void *)((char *)a2 + v239);
      uint64_t v242 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v243 = *(void *)(v242 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v243 + 48))(v241, 1LL, v242))
      {
        uint64_t v244 = sub_100007578(&qword_100251F28);
        memcpy(v240, v241, *(void *)(*(void *)(v244 - 8) + 64LL));
      }

      else
      {
        uint64_t v265 = v38;
        uint64_t v266 = *v241;
        unint64_t v267 = v241[1];
        sub_1000084E8(*v241, v267);
        void *v240 = v266;
        v240[1] = v267;
        uint64_t v268 = v241[2];
        unint64_t v269 = v241[3];
        sub_1000084E8(v268, v269);
        v240[2] = v268;
        v240[3] = v269;
        v296((char *)v240 + *(int *)(v242 + 24), (char *)v241 + *(int *)(v242 + 24), v265);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v243 + 56))(v240, 0LL, 1LL, v242);
      }

      v270 = a1;
      uint64_t v271 = v6;
      uint64_t v272 = 1LL;
    }

    else
    {
      *a1 = *a2;
      uint64_t v90 = a2[1];
      a1[1] = v90;
      uint64_t v91 = a2[2];
      a1[2] = v91;
      uint64_t v92 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v93 = v92[6];
      uint64_t v94 = (char *)a1 + v93;
      unint64_t v95 = (char *)a2 + v93;
      uint64_t v96 = type metadata accessor for UnknownStorage(0LL);
      unint64_t v97 = *(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 16LL);
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRetain(v91);
      uint64_t v98 = v95;
      unint64_t v99 = v97;
      v97(v94, v98, v96);
      uint64_t v100 = v92[7];
      unint64_t v101 = (void *)((char *)a1 + v100);
      uint64_t v102 = (void *)((char *)a2 + v100);
      uint64_t v103 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v104 = *(void *)(v103 - 8);
      uint64_t v294 = v96;
      v298 = v99;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v104 + 48))(v102, 1LL, v103))
      {
        uint64_t v105 = sub_100007578(&qword_100256F80);
        memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64LL));
      }

      else
      {
        uint64_t v166 = *v102;
        unint64_t v165 = v102[1];
        sub_1000084E8(*v102, v165);
        void *v101 = v166;
        v101[1] = v165;
        uint64_t v167 = v102[2];
        unint64_t v168 = v102[3];
        sub_1000084E8(v167, v168);
        v101[2] = v167;
        v101[3] = v168;
        uint64_t v96 = v294;
        v298((char *)v101 + *(int *)(v103 + 24), (char *)v102 + *(int *)(v103 + 24), v294);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0LL, 1LL, v103);
      }

      uint64_t v169 = v92[8];
      uint64_t v170 = (void *)((char *)a1 + v169);
      uint64_t v171 = (void *)((char *)a2 + v169);
      uint64_t v172 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v173 = *(void *)(v172 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v173 + 48))(v171, 1LL, v172))
      {
        uint64_t v174 = sub_100007578(&qword_100251F18);
        memcpy(v170, v171, *(void *)(*(void *)(v174 - 8) + 64LL));
      }

      else
      {
        uint64_t v195 = *v171;
        unint64_t v196 = v171[1];
        sub_1000084E8(*v171, v196);
        *uint64_t v170 = v195;
        v170[1] = v196;
        uint64_t v197 = v171[2];
        unint64_t v198 = v171[3];
        sub_1000084E8(v197, v198);
        v170[2] = v197;
        v170[3] = v198;
        uint64_t v96 = v294;
        v298((char *)v170 + *(int *)(v172 + 24), (char *)v171 + *(int *)(v172 + 24), v294);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v173 + 56))(v170, 0LL, 1LL, v172);
      }

      uint64_t v199 = v92[9];
      uint64_t v200 = (void *)((char *)a1 + v199);
      uint64_t v201 = (void *)((char *)a2 + v199);
      uint64_t v202 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v203 = *(void *)(v202 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v203 + 48))(v201, 1LL, v202))
      {
        uint64_t v204 = sub_100007578(&qword_100256CA0);
        memcpy(v200, v201, *(void *)(*(void *)(v204 - 8) + 64LL));
      }

      else
      {
        uint64_t v225 = *v201;
        unint64_t v226 = v201[1];
        sub_1000084E8(*v201, v226);
        *uint64_t v200 = v225;
        v200[1] = v226;
        uint64_t v227 = v201[2];
        unint64_t v228 = v201[3];
        sub_1000084E8(v227, v228);
        v200[2] = v227;
        v200[3] = v228;
        uint64_t v96 = v294;
        v298((char *)v200 + *(int *)(v202 + 24), (char *)v201 + *(int *)(v202 + 24), v294);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v203 + 56))(v200, 0LL, 1LL, v202);
      }

      uint64_t v229 = v92[10];
      uint64_t v230 = (void *)((char *)a1 + v229);
      v231 = (void *)((char *)a2 + v229);
      uint64_t v232 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v233 = *(void *)(v232 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v233 + 48))(v231, 1LL, v232))
      {
        uint64_t v234 = sub_100007578(&qword_100251F20);
        memcpy(v230, v231, *(void *)(*(void *)(v234 - 8) + 64LL));
      }

      else
      {
        uint64_t v255 = *v231;
        unint64_t v256 = v231[1];
        sub_1000084E8(*v231, v256);
        *uint64_t v230 = v255;
        v230[1] = v256;
        uint64_t v257 = v231[2];
        unint64_t v258 = v231[3];
        sub_1000084E8(v257, v258);
        v230[2] = v257;
        v230[3] = v258;
        uint64_t v96 = v294;
        v298((char *)v230 + *(int *)(v232 + 24), (char *)v231 + *(int *)(v232 + 24), v294);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v233 + 56))(v230, 0LL, 1LL, v232);
      }

      uint64_t v259 = v92[11];
      v260 = (void *)((char *)a1 + v259);
      v261 = (void *)((char *)a2 + v259);
      uint64_t v262 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v263 = *(void *)(v262 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v263 + 48))(v261, 1LL, v262))
      {
        uint64_t v264 = sub_100007578(&qword_100251F28);
        memcpy(v260, v261, *(void *)(*(void *)(v264 - 8) + 64LL));
      }

      else
      {
        uint64_t v278 = v96;
        uint64_t v279 = *v261;
        unint64_t v280 = v261[1];
        sub_1000084E8(*v261, v280);
        void *v260 = v279;
        v260[1] = v280;
        uint64_t v281 = v261[2];
        unint64_t v282 = v261[3];
        sub_1000084E8(v281, v282);
        v260[2] = v281;
        v260[3] = v282;
        v298((char *)v260 + *(int *)(v262 + 24), (char *)v261 + *(int *)(v262 + 24), v278);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v263 + 56))(v260, 0LL, 1LL, v262);
      }

      v270 = a1;
      uint64_t v271 = v6;
      uint64_t v272 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v270, v271, v272);
    a3 = v300;
  }

    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_10;
  }

  int v31 = objc_allocWithZone((Class)type metadata accessor for OctagonSelfPeerKeys());
  uint64_t v32 = a1;
  swift_bridgeObjectRetain(a4);
  uint64_t v54 = sub_100044CDC(a3, a4, a5, v32);
  unint64_t v65 = *(id *)&isEscapingClosureAtFileLocation[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  unint64_t v55 = (os_log_s *)swift_allocObject(&unk_100238F00, 168LL, 7LL);
  *((void *)v55 + 2) = a9;
  *((void *)v55 + 3) = v54;
  uint64_t v56 = a11;
  *((void *)v55 + 4) = a10;
  *((void *)v55 + 5) = a11;
  *((void *)v55 + 6) = a6;
  *((void *)v55 + 7) = a7;
  a6 = a15;
  *((void *)v55 + 8) = isEscapingClosureAtFileLocation;
  *((void *)v55 + 9) = a12;
  *((void *)v55 + 10) = a13;
  *((void *)v55 + 11) = a14;
  *((void *)v55 + 12) = a15;
  *((void *)v55 + 13) = a16;
  *((void *)v55 + 14) = a17;
  *((void *)v55 + 15) = a18;
  *((void *)v55 + 16) = a19;
  *((void *)v55 + 17) = a20;
  *((void *)v55 + 18) = a21;
  *((void *)v55 + 19) = a22;
  *((void *)v55 + 20) = a23;
  uint64_t v26 = swift_allocObject(&unk_100238F28, 32LL, 7LL);
  *(void *)(v26 + 16) = sub_100172A64;
  *(void *)(v26 + 24) = v55;
  aBlock[4] = (uint64_t)sub_100176BD4;
  uint64_t v68 = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000DC9F8;
  aBlock[3] = (uint64_t)&unk_100238F40;
  uint64_t v66 = _Block_copy(aBlock);
  uint64_t v63 = v68;
  swift_bridgeObjectRetain(a15);
  unint64_t v57 = v54;
  swift_bridgeObjectRetain(a9);
  uint64_t v58 = a10;
  swift_bridgeObjectRetain(a11);
  swift_retain(a7);
  unint64_t v59 = isEscapingClosureAtFileLocation;
  swift_bridgeObjectRetain(a13);
  uint64_t v60 = a14;
  sub_1000084E8(a16, a17);
  sub_1000084E8(a18, a19);
  sub_1000084E8(a20, a21);
  sub_1000084E8(a22, a23);
  swift_retain(v26);
  swift_release(v63);
  [v65 performBlockAndWait:v66];

  _Block_release(v66);
  isEscapingClosureAtFileLocation = (char *)swift_isEscapingClosureAtFileLocation(v26, "", 108LL, 3142LL, 37LL, 1LL);

  swift_release(v55);
  uint64_t result = swift_release(v26);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  return result;
}

    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_10;
  }

  uint64_t v20 = objc_allocWithZone((Class)type metadata accessor for OctagonSelfPeerKeys());
  uint64_t v21 = a1;
  swift_bridgeObjectRetain(a4);
  uint64_t v43 = sub_100044CDC(a3, a4, a5, v21);
  uint64_t v53 = *(id *)&a8[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v44 = (os_log_s *)swift_allocObject(&unk_10023AA80, 88LL, 7LL);
  *((void *)v44 + 2) = a8;
  *((void *)v44 + 3) = a9;
  *((void *)v44 + 4) = a10;
  *((void *)v44 + 5) = a6;
  *((void *)v44 + 6) = a7;
  *((void *)v44 + 7) = a11;
  *((void *)v44 + 8) = a12;
  *((void *)v44 + 9) = v43;
  *((void *)v44 + 10) = a13;
  uint64_t v45 = swift_allocObject(&unk_10023AAA8, 32LL, 7LL);
  *(void *)(v45 + 16) = sub_1001738B8;
  *(void *)(v45 + 24) = v44;
  aBlock[4] = (uint64_t)sub_100176BD4;
  uint64_t v56 = v45;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000DC9F8;
  aBlock[3] = (uint64_t)&unk_10023AAC0;
  uint64_t v46 = _Block_copy(aBlock);
  a6 = v56;
  uint64_t v47 = v43;
  uint64_t v48 = a8;
  swift_bridgeObjectRetain(a10);
  swift_retain(a7);
  swift_bridgeObjectRetain(a11);
  swift_bridgeObjectRetain(a12);
  uint64_t v49 = a13;
  swift_retain(v45);
  swift_release(a6);
  [v53 performBlockAndWait:v46];

  _Block_release(v46);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v45, "", 108LL, 6527LL, 37LL, 1LL);

  swift_release(v44);
  uint64_t result = swift_release(v45);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  return result;
}

  uint64_t v34 = [a5 modelID];
  a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v33 = v35;

LABEL_10:
  swift_bridgeObjectRetain(a4);
  uint64_t v36 = sub_10011F6F8(a3, v33, a6);
  swift_bridgeObjectRelease(v33, v37, v38, v39, v40, v41, v42, v43);
  uint64_t v44 = a5;
  uint64_t v45 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v46 = a2;
  uint64_t v47 = *(id *)(a2 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  uint64_t v48 = [v44 peerID];
  if (!v48)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v50 = v49;
    uint64_t v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  }

  uint64_t v103 = 0LL;
  uint64_t v58 = [v47 peerWithID:v48 error:&v103];

  if (v103)
  {
    unint64_t v59 = v103;

    swift_willThrow(v60);
LABEL_14:
    uint64_t v61 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v61, (uint64_t)qword_1002567D0);
    swift_errorRetain(v59);
    uint64_t v62 = swift_errorRetain(v59);
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    unint64_t v67 = static os_log_type_t.error.getter(v63, v64, v65, v66);
    if (os_log_type_enabled(v63, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v69 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v103 = v69;
      *(_DWORD *)uint64_t v68 = 136446210;
      unint64_t v101 = (uint64_t)v59;
      swift_errorRetain(v59);
      uint64_t v70 = sub_100007578(&qword_100251D70);
      uint64_t v71 = String.init<A>(describing:)(&v101, v70);
      uint64_t v73 = (_TtC18TrustedPeersHelper6Client *)v72;
      unint64_t v101 = sub_10017C4C4(v71, v72, (uint64_t *)&v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v67, "Fetching the syncing policy failed: %{public}s", v68, 0xCu);
      swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v59);
    a7(0LL, 0LL, v59);
    swift_errorRelease();
    swift_errorRelease();
    return;
  }

  if (v58)
  {
    uint64_t v81 = [v58 dynamicInfo];
    if (v81)
    {
      uint64_t v82 = v81;
      uint64_t v83 = *(void **)(v46 + v45);
      uint64_t v103 = 0LL;
      uint64_t v84 = [v83 userViewSyncabilityConsensusAmongTrustedPeers:v82 error:&v103];
      if (!v103)
      {
        uint64_t v94 = v84;
        unint64_t v95 = v36;
        a7(v36, v94, 0LL);

        return;
      }

      unint64_t v59 = v103;
      swift_willThrow(v59);

      goto LABEL_14;
    }
  }

  unint64_t v85 = type metadata accessor for Logger(0LL);
  uint64_t v86 = sub_100006BAC(v85, (uint64_t)qword_1002567D0);
  uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
  uint64_t v91 = static os_log_type_t.error.getter(v87, v88, v89, v90);
  if (os_log_type_enabled(v87, v91))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v92 = 0;
    _os_log_impl((void *)&_mh_execute_header, v87, v91, "fetchCurrentPolicy with no dynamic info", v92, 2u);
    swift_slowDealloc(v92, -1LL, -1LL);
  }

  uint64_t v93 = v36;
  a7(v36, 0LL, 0LL);
}

  sub_100041590((uint64_t)&v23, &qword_1002573F0);
  uint64_t v12 = 0LL;
LABEL_10:
  uint64_t v13 = [v1 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v15 = v14;

  uint64_t v16 = [v1 code];
  if (v12)
  {
    uint64_t v17 = sub_1001777AC(v12);
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  uint64_t v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  if (v17)
  {
    v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
  }

  else
  {
    v19.super.isa = 0LL;
  }

  uint64_t v20 = [objc_allocWithZone(NSError) initWithDomain:v18 code:v16 userInfo:v19.super.isa];

  return v20;
}

  uint64_t v116 = 0LL;
  uint64_t v117 = 0LL;
LABEL_10:
  uint64_t v115 = a3;
  uint64_t v23 = a10;
  uint64_t v24 = a11;
  uint64_t v25 = a13;
  uint64_t v26 = a14;
  uint64_t v27 = a15;
  unint64_t v114 = a16;
  swift_retain(self);
  if (v23)
  {
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(a10);
    uint64_t v29 = v28;

    if (v24) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v113 = 0LL;
    uint64_t v29 = 0LL;
    if (v24)
    {
LABEL_12:
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(a11);
      int v31 = v30;

      if (v25) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }

  uint64_t v111 = 0LL;
  int v31 = 0LL;
  if (v25)
  {
LABEL_13:
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(a13);
    uint64_t v34 = v33;

    if (v26) {
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v35 = 0LL;
    uint64_t v37 = 0LL;
    if (v27) {
      goto LABEL_15;
    }
LABEL_20:
    uint64_t v38 = 0LL;
    uint64_t v40 = 0LL;
    goto LABEL_21;
  }

  if (a7) {
    uint64_t v15 = _convertErrorToNSError(_:)(a7);
  }
  else {
    uint64_t v15 = 0LL;
  }
  uint64_t v16 = (id)v15;
  (*(void (**)(uint64_t, Class, Class, Class, uint64_t))(a8 + 16))(a8, isa, v14, a5, a6);
}

  return v5;
}

  uint64_t v4 = 0LL;
LABEL_10:
  int v5 = -[NSString hash](self->_deviceColor, "hash", v14);
  uint64_t v6 = -[NSString hash](self->_deviceEnclosureColor, "hash");
  uint64_t v7 = -[NSString hash](self->_deviceMid, "hash");
  uint64_t v8 = -[NSString hash](self->_deviceModel, "hash");
  int v9 = -[NSString hash](self->_deviceModelClass, "hash");
  int v10 = -[NSString hash](self->_deviceModelVersion, "hash");
  uint64_t v11 = -[NSString hash](self->_deviceName, "hash");
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    uint64_t v12 = 2654435761u * self->_devicePlatform;
  }
  else {
    uint64_t v12 = 0LL;
  }
  return v15 ^ v16 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12;
}

  uint64_t v24 = 0LL;
  if (a4) {
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  21LL,  @"Data failed to parse as a CKKSSerializedKey"));
  }
LABEL_11:

  return v24;
}

LABEL_80:
  uint64_t v283 = *(int *)(a3 + 20);
  v284 = (char *)a1 + v283;
  v285 = (char *)a2 + v283;
  uint64_t v286 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v286 - 8) + 24LL))(v284, v285, v286);
  return a1;
}

void *initializeWithTake for PeerDifference(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100007578(&qword_100251658);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    goto LABEL_30;
  }

  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  uint64_t v88 = a3;
  unsigned int v87 = EnumCaseMultiPayload;
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v22 = type metadata accessor for Peer(0LL);
    uint64_t v23 = *(int *)(v22 + 24);
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL);
    v27(v24, v25, v26);
    uint64_t v83 = (int *)v22;
    uint64_t v28 = *(int *)(v22 + 28);
    uint64_t v29 = (_OWORD *)((char *)a1 + v28);
    uint64_t v30 = (_OWORD *)((char *)a2 + v28);
    uint64_t v31 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v84 = v26;
    unint64_t v85 = v27;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = sub_100007578(&qword_100256F80);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      __int128 v53 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v53;
      v27((char *)v29 + *(int *)(v31 + 24), (char *)v30 + *(int *)(v31 + 24), v26);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
    }

    int v10 = v83;
  }

  else
  {
    uint64_t v86 = v7;
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      int v10 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v11 = v10[6];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL);
      v15(v12, v13, v14);
      uint64_t v16 = v10[7];
      uint64_t v17 = (_OWORD *)((char *)a1 + v16);
      uint64_t v18 = (_OWORD *)((char *)a2 + v16);
      uint64_t v19 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v84 = v14;
      unint64_t v85 = v15;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
      {
        uint64_t v21 = sub_100007578(&qword_100256F80);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
      }

      else
      {
        __int128 v45 = v18[1];
        *uint64_t v17 = *v18;
        v17[1] = v45;
        v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v14);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      }

      uint64_t v46 = v10[8];
      uint64_t v47 = (_OWORD *)((char *)a1 + v46);
      uint64_t v48 = (_OWORD *)((char *)a2 + v46);
      uint64_t v49 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v50 = *(void *)(v49 - 8);
      uint64_t v7 = v86;
LABEL_19:
      uint64_t v56 = sub_100007578(&qword_100251F18);
      memcpy(v47, v48, *(void *)(*(void *)(v56 - 8) + 64LL));
      uint64_t v52 = v84;
      goto LABEL_20;
    }

    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    int v10 = (int *)type metadata accessor for Peer(0LL);
    uint64_t v34 = v10[6];
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL);
    v38(v35, v36, v37);
    uint64_t v39 = v10[7];
    uint64_t v40 = (_OWORD *)((char *)a1 + v39);
    uint64_t v41 = (_OWORD *)((char *)a2 + v39);
    uint64_t v42 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v84 = v37;
    unint64_t v85 = v38;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
    {
      uint64_t v44 = sub_100007578(&qword_100256F80);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
    }

    else
    {
      __int128 v54 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v54;
      v38((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v37);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
    }

    uint64_t v7 = v86;
  }

  uint64_t v55 = v10[8];
  uint64_t v47 = (_OWORD *)((char *)a1 + v55);
  uint64_t v48 = (_OWORD *)((char *)a2 + v55);
  uint64_t v49 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
LABEL_14:
  __int128 v51 = v48[1];
  _OWORD *v47 = *v48;
  v47[1] = v51;
  uint64_t v52 = v84;
  v85((char *)v47 + *(int *)(v49 + 24), (char *)v48 + *(int *)(v49 + 24), v84);
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0LL, 1LL, v49);
LABEL_20:
  uint64_t v57 = v10[9];
  uint64_t v58 = (_OWORD *)((char *)a1 + v57);
  unint64_t v59 = (_OWORD *)((char *)a2 + v57);
  uint64_t v60 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1LL, v60))
  {
    uint64_t v62 = sub_100007578(&qword_100256CA0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    __int128 v63 = v59[1];
    _OWORD *v58 = *v59;
    v58[1] = v63;
    v85((char *)v58 + *(int *)(v60 + 24), (char *)v59 + *(int *)(v60 + 24), v52);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0LL, 1LL, v60);
  }

  uint64_t v64 = v10[10];
  unint64_t v65 = (_OWORD *)((char *)a1 + v64);
  uint64_t v66 = (_OWORD *)((char *)a2 + v64);
  uint64_t v67 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v68 = *(void *)(v67 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v68 + 48))(v66, 1LL, v67))
  {
    uint64_t v69 = sub_100007578(&qword_100251F20);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64LL));
  }

  else
  {
    __int128 v70 = v66[1];
    *unint64_t v65 = *v66;
    v65[1] = v70;
    v85((char *)v65 + *(int *)(v67 + 24), (char *)v66 + *(int *)(v67 + 24), v52);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0LL, 1LL, v67);
  }

  uint64_t v71 = v10[11];
  uint64_t v72 = (_OWORD *)((char *)a1 + v71);
  uint64_t v73 = (_OWORD *)((char *)a2 + v71);
  uint64_t v74 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v75 = *(void *)(v74 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v75 + 48))(v73, 1LL, v74))
  {
    uint64_t v76 = sub_100007578(&qword_100251F28);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
  }

  else
  {
    __int128 v77 = v73[1];
    *uint64_t v72 = *v73;
    v72[1] = v77;
    v85((char *)v72 + *(int *)(v74 + 24), (char *)v73 + *(int *)(v74 + 24), v52);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0LL, 1LL, v74);
  }

  a3 = v88;
  swift_storeEnumTagMultiPayload(a1, v6, v87);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_30:
  uint64_t v78 = *(int *)(a3 + 20);
  unint64_t v79 = (char *)a1 + v78;
  uint64_t v80 = (char *)a2 + v78;
  uint64_t v81 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32LL))(v79, v80, v81);
  return a1;
}

void *assignWithTake for PeerDifference(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v189 = a3;
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v11 = type metadata accessor for Peer(0LL);
      uint64_t v12 = *(int *)(v11 + 24);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL);
      v16(v13, v14, v15);
      unint64_t v186 = (int *)v11;
      uint64_t v17 = *(int *)(v11 + 28);
      uint64_t v18 = (_OWORD *)((char *)a1 + v17);
      uint64_t v19 = (_OWORD *)((char *)a2 + v17);
      uint64_t v20 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v187 = v16;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
      {
        uint64_t v22 = sub_100007578(&qword_100256F80);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
      }

      else
      {
        __int128 v37 = v19[1];
        *uint64_t v18 = *v19;
        v18[1] = v37;
        v16((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
      }

      uint64_t v38 = v186[8];
      uint64_t v39 = (_OWORD *)((char *)a1 + v38);
      uint64_t v40 = (_OWORD *)((char *)a2 + v38);
      uint64_t v41 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v42 + 48))(v40, 1LL, v41))
      {
        uint64_t v43 = sub_100007578(&qword_100251F18);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64LL));
        uint64_t v44 = v15;
      }

      else
      {
        __int128 v45 = v40[1];
        *uint64_t v39 = *v40;
        v39[1] = v45;
        uint64_t v44 = v15;
        v187((char *)v39 + *(int *)(v41 + 24), (char *)v40 + *(int *)(v41 + 24), v15);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0LL, 1LL, v41);
      }

      uint64_t v46 = v186[9];
      uint64_t v47 = (_OWORD *)((char *)a1 + v46);
      uint64_t v48 = (_OWORD *)((char *)a2 + v46);
      uint64_t v49 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v50 = *(void *)(v49 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v50 + 48))(v48, 1LL, v49))
      {
        uint64_t v51 = sub_100007578(&qword_100256CA0);
        memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64LL));
      }

      else
      {
        __int128 v52 = v48[1];
        _OWORD *v47 = *v48;
        v47[1] = v52;
        v187((char *)v47 + *(int *)(v49 + 24), (char *)v48 + *(int *)(v49 + 24), v44);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0LL, 1LL, v49);
      }

      uint64_t v53 = v186[10];
      __int128 v54 = (_OWORD *)((char *)a1 + v53);
      uint64_t v55 = (_OWORD *)((char *)a2 + v53);
      uint64_t v56 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v57 = *(void *)(v56 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v57 + 48))(v55, 1LL, v56))
      {
        uint64_t v58 = sub_100007578(&qword_100251F20);
        memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
      }

      else
      {
        __int128 v59 = v55[1];
        *__int128 v54 = *v55;
        v54[1] = v59;
        v187((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v44);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0LL, 1LL, v56);
      }

      uint64_t v60 = v186[11];
      uint64_t v61 = (_OWORD *)((char *)a1 + v60);
      uint64_t v62 = (_OWORD *)((char *)a2 + v60);
      uint64_t v63 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v64 = *(void *)(v63 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v64 + 48))(v62, 1LL, v63))
      {
        uint64_t v65 = sub_100007578(&qword_100251F28);
        memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
      }

      else
      {
        __int128 v66 = v62[1];
        _OWORD *v61 = *v62;
        v61[1] = v66;
        v187((char *)v61 + *(int *)(v63 + 24), (char *)v62 + *(int *)(v63 + 24), v44);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0LL, 1LL, v63);
      }

      a3 = v189;
      swift_storeEnumTagMultiPayload(a1, v6, EnumCaseMultiPayload);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      goto LABEL_74;
    }

LABEL_74:
  uint64_t v181 = *(int *)(a3 + 20);
  uint64_t v182 = (char *)a1 + v181;
  uint64_t v183 = (char *)a2 + v181;
  uint64_t v184 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 40LL))(v182, v183, v184);
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerDifference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C0514);
}

uint64_t sub_1000C0514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251658);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PeerDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C0598);
}

uint64_t sub_1000C0598(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100007578(&qword_100251658);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1000C0618(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for UnknownStorage(319LL);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v6, a1 + 16);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for PeerDifference.OneOf_Operation( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v24);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v25 = a2[1];
      *a1 = *a2;
      a1[1] = v25;
      uint64_t v26 = a2[2];
      a1[2] = v26;
      uint64_t v27 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v28 = v27[6];
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v32 = *(void (**)(void, void, void))(*(void *)(v31 - 8) + 16LL);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      uint64_t v33 = v30;
      uint64_t v34 = v32;
      v32(v29, v33, v31);
      uint64_t v35 = v27[7];
      uint64_t v36 = (uint64_t *)((char *)a1 + v35);
      __int128 v37 = (uint64_t *)((char *)a2 + v35);
      uint64_t v38 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v194 = v34;
      uint64_t v197 = v31;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v37, 1LL, v38))
      {
        uint64_t v40 = sub_100007578(&qword_100256F80);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
      }

      else
      {
        uint64_t v67 = *v37;
        unint64_t v68 = v37[1];
        sub_1000084E8(*v37, v68);
        *uint64_t v36 = v67;
        v36[1] = v68;
        uint64_t v69 = v37[2];
        unint64_t v70 = v37[3];
        sub_1000084E8(v69, v70);
        v36[2] = v69;
        v36[3] = v70;
        uint64_t v34 = v194;
        uint64_t v31 = v197;
        v194((char *)v36 + *(int *)(v38 + 24), (char *)v37 + *(int *)(v38 + 24), v197);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
      }

      uint64_t v71 = v27[8];
      uint64_t v72 = (uint64_t *)((char *)a1 + v71);
      uint64_t v73 = (uint64_t *)((char *)a2 + v71);
      uint64_t v74 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v75 = *(void *)(v74 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v75 + 48))(v73, 1LL, v74))
      {
        uint64_t v76 = sub_100007578(&qword_100251F18);
        memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
      }

      else
      {
        uint64_t v87 = *v73;
        unint64_t v88 = v73[1];
        sub_1000084E8(*v73, v88);
        *uint64_t v72 = v87;
        v72[1] = v88;
        uint64_t v89 = v73[2];
        unint64_t v90 = v73[3];
        sub_1000084E8(v89, v90);
        v72[2] = v89;
        v72[3] = v90;
        uint64_t v34 = v194;
        uint64_t v31 = v197;
        v194((char *)v72 + *(int *)(v74 + 24), (char *)v73 + *(int *)(v74 + 24), v197);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0LL, 1LL, v74);
      }

      uint64_t v91 = v27[9];
      uint64_t v92 = (uint64_t *)((char *)a1 + v91);
      uint64_t v93 = (uint64_t *)((char *)a2 + v91);
      uint64_t v94 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v95 = *(void *)(v94 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v95 + 48))(v93, 1LL, v94))
      {
        uint64_t v96 = sub_100007578(&qword_100256CA0);
        memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64LL));
      }

      else
      {
        uint64_t v107 = *v93;
        unint64_t v108 = v93[1];
        sub_1000084E8(*v93, v108);
        *uint64_t v92 = v107;
        v92[1] = v108;
        uint64_t v109 = v93[2];
        unint64_t v110 = v93[3];
        sub_1000084E8(v109, v110);
        v92[2] = v109;
        v92[3] = v110;
        uint64_t v34 = v194;
        uint64_t v31 = v197;
        v194((char *)v92 + *(int *)(v94 + 24), (char *)v93 + *(int *)(v94 + 24), v197);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0LL, 1LL, v94);
      }

      uint64_t v111 = v27[10];
      __int128 v112 = (uint64_t *)((char *)a1 + v111);
      uint64_t v113 = (uint64_t *)((char *)a2 + v111);
      uint64_t v114 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v115 = *(void *)(v114 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v115 + 48))(v113, 1LL, v114))
      {
        uint64_t v116 = sub_100007578(&qword_100251F20);
        memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64LL));
      }

      else
      {
        uint64_t v127 = *v113;
        unint64_t v128 = v113[1];
        sub_1000084E8(*v113, v128);
        *__int128 v112 = v127;
        v112[1] = v128;
        uint64_t v129 = v113[2];
        unint64_t v130 = v113[3];
        sub_1000084E8(v129, v130);
        v112[2] = v129;
        v112[3] = v130;
        uint64_t v34 = v194;
        uint64_t v31 = v197;
        v194((char *)v112 + *(int *)(v114 + 24), (char *)v113 + *(int *)(v114 + 24), v197);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0LL, 1LL, v114);
      }

      uint64_t v131 = v27[11];
      uint64_t v132 = (uint64_t *)((char *)a1 + v131);
      __int128 v133 = (uint64_t *)((char *)a2 + v131);
      uint64_t v134 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v135 = *(void *)(v134 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v135 + 48))(v133, 1LL, v134))
      {
        uint64_t v136 = sub_100007578(&qword_100251F28);
        memcpy(v132, v133, *(void *)(*(void *)(v136 - 8) + 64LL));
      }

      else
      {
        uint64_t v144 = *v133;
        unint64_t v145 = v133[1];
        sub_1000084E8(*v133, v145);
        *uint64_t v132 = v144;
        v132[1] = v145;
        uint64_t v146 = v133[2];
        unint64_t v147 = v133[3];
        sub_1000084E8(v146, v147);
        v132[2] = v146;
        v132[3] = v147;
        v34((char *)v132 + *(int *)(v134 + 24), (char *)v133 + *(int *)(v134 + 24), v31);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v135 + 56))(v132, 0LL, 1LL, v134);
      }

      uint64_t v141 = a1;
      uint64_t v142 = a3;
      uint64_t v143 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[2];
      a1[2] = v9;
      uint64_t v10 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v11 = v10[6];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v15 = *(void (**)(void, void, void))(*(void *)(v14 - 8) + 16LL);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      uint64_t v16 = v13;
      uint64_t v17 = v15;
      v15(v12, v16, v14);
      uint64_t v18 = v10[7];
      uint64_t v19 = (uint64_t *)((char *)a1 + v18);
      uint64_t v20 = (uint64_t *)((char *)a2 + v18);
      uint64_t v21 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v193 = v17;
      uint64_t v196 = v14;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
      {
        uint64_t v23 = sub_100007578(&qword_100256F80);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
      }

      else
      {
        uint64_t v57 = *v20;
        unint64_t v58 = v20[1];
        sub_1000084E8(*v20, v58);
        void *v19 = v57;
        v19[1] = v58;
        uint64_t v59 = v20[2];
        unint64_t v60 = v20[3];
        sub_1000084E8(v59, v60);
        v19[2] = v59;
        v19[3] = v60;
        uint64_t v17 = v193;
        uint64_t v14 = v196;
        v193((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v196);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
      }

      uint64_t v61 = v10[8];
      uint64_t v62 = (uint64_t *)((char *)a1 + v61);
      uint64_t v63 = (uint64_t *)((char *)a2 + v61);
      uint64_t v64 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v65 = *(void *)(v64 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v65 + 48))(v63, 1LL, v64))
      {
        uint64_t v66 = sub_100007578(&qword_100251F18);
        memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
      }

      else
      {
        uint64_t v77 = *v63;
        unint64_t v78 = v63[1];
        sub_1000084E8(*v63, v78);
        *uint64_t v62 = v77;
        v62[1] = v78;
        uint64_t v79 = v63[2];
        unint64_t v80 = v63[3];
        sub_1000084E8(v79, v80);
        v62[2] = v79;
        v62[3] = v80;
        uint64_t v17 = v193;
        uint64_t v14 = v196;
        v193((char *)v62 + *(int *)(v64 + 24), (char *)v63 + *(int *)(v64 + 24), v196);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0LL, 1LL, v64);
      }

      uint64_t v81 = v10[9];
      uint64_t v82 = (uint64_t *)((char *)a1 + v81);
      uint64_t v83 = (uint64_t *)((char *)a2 + v81);
      uint64_t v84 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v85 = *(void *)(v84 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v85 + 48))(v83, 1LL, v84))
      {
        uint64_t v86 = sub_100007578(&qword_100256CA0);
        memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64LL));
      }

      else
      {
        uint64_t v97 = *v83;
        unint64_t v98 = v83[1];
        sub_1000084E8(*v83, v98);
        *uint64_t v82 = v97;
        v82[1] = v98;
        uint64_t v99 = v83[2];
        unint64_t v100 = v83[3];
        sub_1000084E8(v99, v100);
        v82[2] = v99;
        v82[3] = v100;
        uint64_t v17 = v193;
        uint64_t v14 = v196;
        v193((char *)v82 + *(int *)(v84 + 24), (char *)v83 + *(int *)(v84 + 24), v196);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0LL, 1LL, v84);
      }

      uint64_t v101 = v10[10];
      uint64_t v102 = (uint64_t *)((char *)a1 + v101);
      uint64_t v103 = (uint64_t *)((char *)a2 + v101);
      uint64_t v104 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v105 = *(void *)(v104 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v105 + 48))(v103, 1LL, v104))
      {
        uint64_t v106 = sub_100007578(&qword_100251F20);
        memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64LL));
      }

      else
      {
        uint64_t v117 = *v103;
        unint64_t v118 = v103[1];
        sub_1000084E8(*v103, v118);
        *uint64_t v102 = v117;
        v102[1] = v118;
        uint64_t v119 = v103[2];
        unint64_t v120 = v103[3];
        sub_1000084E8(v119, v120);
        v102[2] = v119;
        v102[3] = v120;
        uint64_t v17 = v193;
        uint64_t v14 = v196;
        v193((char *)v102 + *(int *)(v104 + 24), (char *)v103 + *(int *)(v104 + 24), v196);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0LL, 1LL, v104);
      }

      uint64_t v121 = v10[11];
      unint64_t v122 = (uint64_t *)((char *)a1 + v121);
      uint64_t v123 = (uint64_t *)((char *)a2 + v121);
      uint64_t v124 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v125 = *(void *)(v124 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v125 + 48))(v123, 1LL, v124))
      {
        uint64_t v126 = sub_100007578(&qword_100251F28);
        memcpy(v122, v123, *(void *)(*(void *)(v126 - 8) + 64LL));
      }

      else
      {
        uint64_t v137 = *v123;
        unint64_t v138 = v123[1];
        sub_1000084E8(*v123, v138);
        *unint64_t v122 = v137;
        v122[1] = v138;
        uint64_t v139 = v123[2];
        unint64_t v140 = v123[3];
        sub_1000084E8(v139, v140);
        v122[2] = v139;
        v122[3] = v140;
        v17((char *)v122 + *(int *)(v124 + 24), (char *)v123 + *(int *)(v124 + 24), v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(v122, 0LL, 1LL, v124);
      }

      uint64_t v141 = a1;
      uint64_t v142 = a3;
      uint64_t v143 = 1LL;
    }

    else
    {
      uint64_t v41 = a2[1];
      *a1 = *a2;
      a1[1] = v41;
      uint64_t v42 = a2[2];
      a1[2] = v42;
      uint64_t v43 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v44 = v43[6];
      __int128 v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      uint64_t v47 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v48 = *(void (**)(void, void, void))(*(void *)(v47 - 8) + 16LL);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      uint64_t v49 = v46;
      uint64_t v50 = v48;
      v48(v45, v49, v47);
      uint64_t v51 = v43[7];
      __int128 v52 = (uint64_t *)((char *)a1 + v51);
      uint64_t v53 = (uint64_t *)((char *)a2 + v51);
      uint64_t v54 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v55 = *(void *)(v54 - 8);
      uint64_t v195 = v50;
      uint64_t v198 = v47;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v55 + 48))(v53, 1LL, v54))
      {
        uint64_t v56 = sub_100007578(&qword_100256F80);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
      }

      else
      {
        uint64_t v148 = *v53;
        unint64_t v149 = v53[1];
        sub_1000084E8(*v53, v149);
        *__int128 v52 = v148;
        v52[1] = v149;
        uint64_t v150 = v53[2];
        unint64_t v151 = v53[3];
        sub_1000084E8(v150, v151);
        v52[2] = v150;
        v52[3] = v151;
        uint64_t v50 = v195;
        uint64_t v47 = v198;
        v195((char *)v52 + *(int *)(v54 + 24), (char *)v53 + *(int *)(v54 + 24), v198);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0LL, 1LL, v54);
      }

      uint64_t v152 = v43[8];
      uint64_t v153 = (uint64_t *)((char *)a1 + v152);
      __int128 v154 = (uint64_t *)((char *)a2 + v152);
      uint64_t v155 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v156 = *(void *)(v155 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v156 + 48))(v154, 1LL, v155))
      {
        uint64_t v157 = sub_100007578(&qword_100251F18);
        memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64LL));
      }

      else
      {
        uint64_t v158 = *v154;
        unint64_t v159 = v154[1];
        sub_1000084E8(*v154, v159);
        void *v153 = v158;
        v153[1] = v159;
        uint64_t v160 = v154[2];
        unint64_t v161 = v154[3];
        sub_1000084E8(v160, v161);
        v153[2] = v160;
        v153[3] = v161;
        uint64_t v50 = v195;
        uint64_t v47 = v198;
        v195((char *)v153 + *(int *)(v155 + 24), (char *)v154 + *(int *)(v155 + 24), v198);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v156 + 56))(v153, 0LL, 1LL, v155);
      }

      uint64_t v162 = v43[9];
      uint64_t v163 = (uint64_t *)((char *)a1 + v162);
      uint64_t v164 = (uint64_t *)((char *)a2 + v162);
      uint64_t v165 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v166 = *(void *)(v165 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v166 + 48))(v164, 1LL, v165))
      {
        uint64_t v167 = sub_100007578(&qword_100256CA0);
        memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64LL));
      }

      else
      {
        uint64_t v168 = *v164;
        unint64_t v169 = v164[1];
        sub_1000084E8(*v164, v169);
        *uint64_t v163 = v168;
        v163[1] = v169;
        uint64_t v170 = v164[2];
        unint64_t v171 = v164[3];
        sub_1000084E8(v170, v171);
        v163[2] = v170;
        v163[3] = v171;
        uint64_t v50 = v195;
        uint64_t v47 = v198;
        v195((char *)v163 + *(int *)(v165 + 24), (char *)v164 + *(int *)(v165 + 24), v198);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v166 + 56))(v163, 0LL, 1LL, v165);
      }

      uint64_t v172 = v43[10];
      uint64_t v173 = (uint64_t *)((char *)a1 + v172);
      uint64_t v174 = (uint64_t *)((char *)a2 + v172);
      uint64_t v175 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v176 = *(void *)(v175 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v176 + 48))(v174, 1LL, v175))
      {
        uint64_t v177 = sub_100007578(&qword_100251F20);
        memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64LL));
      }

      else
      {
        uint64_t v178 = *v174;
        unint64_t v179 = v174[1];
        sub_1000084E8(*v174, v179);
        *uint64_t v173 = v178;
        v173[1] = v179;
        uint64_t v180 = v174[2];
        unint64_t v181 = v174[3];
        sub_1000084E8(v180, v181);
        v173[2] = v180;
        v173[3] = v181;
        uint64_t v50 = v195;
        uint64_t v47 = v198;
        v195((char *)v173 + *(int *)(v175 + 24), (char *)v174 + *(int *)(v175 + 24), v198);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0LL, 1LL, v175);
      }

      uint64_t v182 = v43[11];
      uint64_t v183 = (uint64_t *)((char *)a1 + v182);
      uint64_t v184 = (uint64_t *)((char *)a2 + v182);
      uint64_t v185 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v186 = *(void *)(v185 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v186 + 48))(v184, 1LL, v185))
      {
        uint64_t v187 = sub_100007578(&qword_100251F28);
        memcpy(v183, v184, *(void *)(*(void *)(v187 - 8) + 64LL));
      }

      else
      {
        uint64_t v188 = *v184;
        unint64_t v189 = v184[1];
        sub_1000084E8(*v184, v189);
        void *v183 = v188;
        v183[1] = v189;
        uint64_t v190 = v184[2];
        unint64_t v191 = v184[3];
        sub_1000084E8(v190, v191);
        v183[2] = v190;
        v183[3] = v191;
        v50((char *)v183 + *(int *)(v185 + 24), (char *)v184 + *(int *)(v185 + 24), v47);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v186 + 56))(v183, 0LL, 1LL, v185);
      }

      uint64_t v141 = a1;
      uint64_t v142 = a3;
      uint64_t v143 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v141, v142, v143);
  }

  return a1;
}

uint64_t destroy for PeerDifference.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 2)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    swift_bridgeObjectRelease(*(void *)(a1 + 16));
    uint64_t v4 = (int *)type metadata accessor for Peer(0LL);
    uint64_t v5 = a1 + v4[6];
    uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
    v17(v5, v6);
    uint64_t v7 = a1 + v4[7];
    uint64_t v8 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8))
    {
      sub_10000852C(*(void *)v7, *(void *)(v7 + 8));
      sub_10000852C(*(void *)(v7 + 16), *(void *)(v7 + 24));
      v17(v7 + *(int *)(v8 + 24), v6);
    }

    uint64_t v9 = a1 + v4[8];
    uint64_t v10 = type metadata accessor for SignedPeerStableInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
    {
      sub_10000852C(*(void *)v9, *(void *)(v9 + 8));
      sub_10000852C(*(void *)(v9 + 16), *(void *)(v9 + 24));
      v17(v9 + *(int *)(v10 + 24), v6);
    }

    uint64_t v11 = a1 + v4[9];
    uint64_t v12 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12))
    {
      sub_10000852C(*(void *)v11, *(void *)(v11 + 8));
      sub_10000852C(*(void *)(v11 + 16), *(void *)(v11 + 24));
      v17(v11 + *(int *)(v12 + 24), v6);
    }

    uint64_t v13 = a1 + v4[10];
    uint64_t v14 = type metadata accessor for SignedRecoveryVoucher(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v13, 1LL, v14))
    {
      sub_10000852C(*(void *)v13, *(void *)(v13 + 8));
      sub_10000852C(*(void *)(v13 + 16), *(void *)(v13 + 24));
      v17(v13 + *(int *)(v14 + 24), v6);
    }

    uint64_t v15 = a1 + v4[11];
    uint64_t v16 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v15, 1LL, v16);
    if (!(_DWORD)result)
    {
      sub_10000852C(*(void *)v15, *(void *)(v15 + 8));
      sub_10000852C(*(void *)(v15 + 16), *(void *)(v15 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v17)(v15 + *(int *)(v16 + 24), v6);
    }
  }

  return result;
}

void *initializeWithCopy for PeerDifference.OneOf_Operation(void *a1, void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v123 = a3;
  unsigned int v122 = EnumCaseMultiPayload;
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    a1[2] = v8;
    uint64_t v9 = (int *)type metadata accessor for Peer(0LL);
    uint64_t v10 = v9[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13);
    uint64_t v15 = v9[7];
    uint64_t v16 = (void *)((char *)a1 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v120 = v14;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_100007578(&qword_100256F80);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      uint64_t v35 = *v17;
      unint64_t v36 = v17[1];
      sub_1000084E8(*v17, v36);
      void *v16 = v35;
      v16[1] = v36;
      uint64_t v37 = v17[2];
      unint64_t v38 = v17[3];
      sub_1000084E8(v37, v38);
      v16[2] = v37;
      v16[3] = v38;
      uint64_t v14 = v120;
      v120((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    uint64_t v39 = v9[8];
    uint64_t v40 = (void *)((char *)a1 + v39);
    uint64_t v41 = (void *)((char *)a2 + v39);
    uint64_t v42 = type metadata accessor for SignedPeerStableInfo(0LL);
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
    {
      uint64_t v44 = sub_100007578(&qword_100251F18);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
    }

    else
    {
      uint64_t v45 = *v41;
      unint64_t v46 = v41[1];
      sub_1000084E8(*v41, v46);
      *uint64_t v40 = v45;
      v40[1] = v46;
      uint64_t v47 = v41[2];
      unint64_t v48 = v41[3];
      sub_1000084E8(v47, v48);
      v40[2] = v47;
      v40[3] = v48;
      uint64_t v14 = v120;
      v120((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
    }

    uint64_t v49 = v9[9];
    uint64_t v50 = (void *)((char *)a1 + v49);
    uint64_t v51 = (void *)((char *)a2 + v49);
    uint64_t v52 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    uint64_t v53 = *(void *)(v52 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v53 + 48))(v51, 1LL, v52))
    {
      uint64_t v54 = sub_100007578(&qword_100256CA0);
      memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    }

    else
    {
      uint64_t v55 = *v51;
      unint64_t v56 = v51[1];
      sub_1000084E8(*v51, v56);
      void *v50 = v55;
      v50[1] = v56;
      uint64_t v57 = v51[2];
      unint64_t v58 = v51[3];
      sub_1000084E8(v57, v58);
      v50[2] = v57;
      v50[3] = v58;
      uint64_t v14 = v120;
      v120((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0LL, 1LL, v52);
    }

    uint64_t v59 = v9[10];
    unint64_t v60 = (void *)((char *)a1 + v59);
    uint64_t v61 = (void *)((char *)a2 + v59);
    uint64_t v62 = type metadata accessor for SignedRecoveryVoucher(0LL);
    uint64_t v63 = *(void *)(v62 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v63 + 48))(v61, 1LL, v62))
    {
      uint64_t v64 = sub_100007578(&qword_100251F20);
      memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      uint64_t v65 = *v61;
      unint64_t v66 = v61[1];
      sub_1000084E8(*v61, v66);
      *unint64_t v60 = v65;
      v60[1] = v66;
      uint64_t v67 = v61[2];
      unint64_t v68 = v61[3];
      sub_1000084E8(v67, v68);
      v60[2] = v67;
      v60[3] = v68;
      uint64_t v14 = v120;
      v120((char *)v60 + *(int *)(v62 + 24), (char *)v61 + *(int *)(v62 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0LL, 1LL, v62);
    }

    uint64_t v69 = v9[11];
    unint64_t v70 = (void *)((char *)a1 + v69);
    uint64_t v71 = (void *)((char *)a2 + v69);
    uint64_t v72 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    uint64_t v73 = *(void *)(v72 - 8);
    if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v73 + 48))(v71, 1LL, v72))
    {
      uint64_t v74 = *v71;
      unint64_t v75 = v71[1];
      sub_1000084E8(*v71, v75);
      *unint64_t v70 = v74;
      v70[1] = v75;
      uint64_t v76 = v71[2];
      unint64_t v77 = v71[3];
      sub_1000084E8(v76, v77);
      v70[2] = v76;
      v70[3] = v77;
      v14((char *)v70 + *(int *)(v72 + 24), (char *)v71 + *(int *)(v72 + 24), v13);
LABEL_32:
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0LL, 1LL, v72);
      goto LABEL_33;
    }
  }

  else
  {
    uint64_t v21 = a2[1];
    *a1 = *a2;
    a1[1] = v21;
    uint64_t v22 = a2[2];
    a1[2] = v22;
    uint64_t v23 = (int *)type metadata accessor for Peer(0LL);
    uint64_t v24 = v23[6];
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v28(v25, v26, v27);
    uint64_t v29 = v23[7];
    uint64_t v30 = (void *)((char *)a1 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v121 = v28;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = sub_100007578(&qword_100256F80);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      uint64_t v79 = *v31;
      unint64_t v78 = v31[1];
      sub_1000084E8(*v31, v78);
      *uint64_t v30 = v79;
      v30[1] = v78;
      uint64_t v80 = v31[2];
      unint64_t v81 = v31[3];
      sub_1000084E8(v80, v81);
      v30[2] = v80;
      v30[3] = v81;
      uint64_t v28 = v121;
      v121((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }

    uint64_t v82 = v23[8];
    uint64_t v83 = (void *)((char *)a1 + v82);
    uint64_t v84 = (void *)((char *)a2 + v82);
    uint64_t v85 = type metadata accessor for SignedPeerStableInfo(0LL);
    uint64_t v86 = *(void *)(v85 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v86 + 48))(v84, 1LL, v85))
    {
      uint64_t v87 = sub_100007578(&qword_100251F18);
      memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64LL));
    }

    else
    {
      uint64_t v88 = *v84;
      unint64_t v89 = v84[1];
      sub_1000084E8(*v84, v89);
      *uint64_t v83 = v88;
      v83[1] = v89;
      uint64_t v90 = v84[2];
      unint64_t v91 = v84[3];
      sub_1000084E8(v90, v91);
      v83[2] = v90;
      v83[3] = v91;
      uint64_t v28 = v121;
      v121((char *)v83 + *(int *)(v85 + 24), (char *)v84 + *(int *)(v85 + 24), v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0LL, 1LL, v85);
    }

    uint64_t v92 = v23[9];
    uint64_t v93 = (void *)((char *)a1 + v92);
    uint64_t v94 = (void *)((char *)a2 + v92);
    uint64_t v95 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    uint64_t v96 = *(void *)(v95 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v96 + 48))(v94, 1LL, v95))
    {
      uint64_t v97 = sub_100007578(&qword_100256CA0);
      memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64LL));
    }

    else
    {
      uint64_t v98 = *v94;
      unint64_t v99 = v94[1];
      sub_1000084E8(*v94, v99);
      void *v93 = v98;
      v93[1] = v99;
      uint64_t v100 = v94[2];
      unint64_t v101 = v94[3];
      sub_1000084E8(v100, v101);
      v93[2] = v100;
      v93[3] = v101;
      uint64_t v28 = v121;
      v121((char *)v93 + *(int *)(v95 + 24), (char *)v94 + *(int *)(v95 + 24), v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0LL, 1LL, v95);
    }

    uint64_t v102 = v23[10];
    uint64_t v103 = (void *)((char *)a1 + v102);
    uint64_t v104 = (void *)((char *)a2 + v102);
    uint64_t v105 = type metadata accessor for SignedRecoveryVoucher(0LL);
    uint64_t v106 = *(void *)(v105 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v106 + 48))(v104, 1LL, v105))
    {
      uint64_t v107 = sub_100007578(&qword_100251F20);
      memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64LL));
    }

    else
    {
      uint64_t v108 = *v104;
      unint64_t v109 = v104[1];
      sub_1000084E8(*v104, v109);
      *uint64_t v103 = v108;
      v103[1] = v109;
      uint64_t v110 = v104[2];
      unint64_t v111 = v104[3];
      sub_1000084E8(v110, v111);
      v103[2] = v110;
      v103[3] = v111;
      uint64_t v28 = v121;
      v121((char *)v103 + *(int *)(v105 + 24), (char *)v104 + *(int *)(v105 + 24), v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0LL, 1LL, v105);
    }

    uint64_t v112 = v23[11];
    unint64_t v70 = (void *)((char *)a1 + v112);
    uint64_t v71 = (void *)((char *)a2 + v112);
    uint64_t v72 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    uint64_t v73 = *(void *)(v72 - 8);
    if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v73 + 48))(v71, 1LL, v72))
    {
      uint64_t v114 = v28;
      uint64_t v115 = *v71;
      unint64_t v116 = v71[1];
      sub_1000084E8(*v71, v116);
      *unint64_t v70 = v115;
      v70[1] = v116;
      uint64_t v117 = v71[2];
      unint64_t v118 = v71[3];
      sub_1000084E8(v117, v118);
      v70[2] = v117;
      v70[3] = v118;
      v114((char *)v70 + *(int *)(v72 + 24), (char *)v71 + *(int *)(v72 + 24), v27);
      goto LABEL_32;
    }
  }

  uint64_t v113 = sub_100007578(&qword_100251F28);
  memcpy(v70, v71, *(void *)(*(void *)(v113 - 8) + 64LL));
LABEL_33:
  swift_storeEnumTagMultiPayload(a1, v123, v122);
  return a1;
}

void *assignWithCopy for PeerDifference.OneOf_Operation(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000415CC((uint64_t)a1, type metadata accessor for PeerDifference.OneOf_Operation);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v123 = a3;
    unsigned int v122 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      uint64_t v8 = a2[2];
      a1[2] = v8;
      uint64_t v9 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v10 = v9[6];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      v14(v11, v12, v13);
      uint64_t v15 = v9[7];
      uint64_t v16 = (void *)((char *)a1 + v15);
      uint64_t v17 = (void *)((char *)a2 + v15);
      uint64_t v18 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v19 = *(void *)(v18 - 8);
      unint64_t v120 = v14;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
      {
        uint64_t v20 = sub_100007578(&qword_100256F80);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
      }

      else
      {
        uint64_t v35 = *v17;
        unint64_t v36 = v17[1];
        sub_1000084E8(*v17, v36);
        void *v16 = v35;
        v16[1] = v36;
        uint64_t v37 = v17[2];
        unint64_t v38 = v17[3];
        sub_1000084E8(v37, v38);
        v16[2] = v37;
        v16[3] = v38;
        uint64_t v14 = v120;
        v120((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
      }

      uint64_t v39 = v9[8];
      uint64_t v40 = (void *)((char *)a1 + v39);
      uint64_t v41 = (void *)((char *)a2 + v39);
      uint64_t v42 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
      {
        uint64_t v44 = sub_100007578(&qword_100251F18);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
      }

      else
      {
        uint64_t v45 = *v41;
        unint64_t v46 = v41[1];
        sub_1000084E8(*v41, v46);
        *uint64_t v40 = v45;
        v40[1] = v46;
        uint64_t v47 = v41[2];
        unint64_t v48 = v41[3];
        sub_1000084E8(v47, v48);
        v40[2] = v47;
        v40[3] = v48;
        uint64_t v14 = v120;
        v120((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
      }

      uint64_t v49 = v9[9];
      uint64_t v50 = (void *)((char *)a1 + v49);
      uint64_t v51 = (void *)((char *)a2 + v49);
      uint64_t v52 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v53 + 48))(v51, 1LL, v52))
      {
        uint64_t v54 = sub_100007578(&qword_100256CA0);
        memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
      }

      else
      {
        uint64_t v55 = *v51;
        unint64_t v56 = v51[1];
        sub_1000084E8(*v51, v56);
        void *v50 = v55;
        v50[1] = v56;
        uint64_t v57 = v51[2];
        unint64_t v58 = v51[3];
        sub_1000084E8(v57, v58);
        v50[2] = v57;
        v50[3] = v58;
        uint64_t v14 = v120;
        v120((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0LL, 1LL, v52);
      }

      uint64_t v59 = v9[10];
      unint64_t v60 = (void *)((char *)a1 + v59);
      uint64_t v61 = (void *)((char *)a2 + v59);
      uint64_t v62 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v63 = *(void *)(v62 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v63 + 48))(v61, 1LL, v62))
      {
        uint64_t v64 = sub_100007578(&qword_100251F20);
        memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
      }

      else
      {
        uint64_t v65 = *v61;
        unint64_t v66 = v61[1];
        sub_1000084E8(*v61, v66);
        *unint64_t v60 = v65;
        v60[1] = v66;
        uint64_t v67 = v61[2];
        unint64_t v68 = v61[3];
        sub_1000084E8(v67, v68);
        v60[2] = v67;
        v60[3] = v68;
        uint64_t v14 = v120;
        v120((char *)v60 + *(int *)(v62 + 24), (char *)v61 + *(int *)(v62 + 24), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0LL, 1LL, v62);
      }

      uint64_t v69 = v9[11];
      unint64_t v70 = (void *)((char *)a1 + v69);
      uint64_t v71 = (void *)((char *)a2 + v69);
      uint64_t v72 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v73 = *(void *)(v72 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v73 + 48))(v71, 1LL, v72))
      {
        uint64_t v74 = *v71;
        unint64_t v75 = v71[1];
        sub_1000084E8(*v71, v75);
        *unint64_t v70 = v74;
        v70[1] = v75;
        uint64_t v76 = v71[2];
        unint64_t v77 = v71[3];
        sub_1000084E8(v76, v77);
        v70[2] = v76;
        v70[3] = v77;
        v14((char *)v70 + *(int *)(v72 + 24), (char *)v71 + *(int *)(v72 + 24), v13);
LABEL_33:
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0LL, 1LL, v72);
        goto LABEL_34;
      }
    }

    else
    {
      *a1 = *a2;
      uint64_t v21 = a2[1];
      a1[1] = v21;
      uint64_t v22 = a2[2];
      a1[2] = v22;
      uint64_t v23 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v24 = v23[6];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v28(v25, v26, v27);
      uint64_t v29 = v23[7];
      uint64_t v30 = (void *)((char *)a1 + v29);
      uint64_t v31 = (void *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v121 = v28;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
      {
        uint64_t v34 = sub_100007578(&qword_100256F80);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
      }

      else
      {
        uint64_t v79 = *v31;
        unint64_t v78 = v31[1];
        sub_1000084E8(*v31, v78);
        *uint64_t v30 = v79;
        v30[1] = v78;
        uint64_t v80 = v31[2];
        unint64_t v81 = v31[3];
        sub_1000084E8(v80, v81);
        v30[2] = v80;
        v30[3] = v81;
        uint64_t v28 = v121;
        v121((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
      }

      uint64_t v82 = v23[8];
      uint64_t v83 = (void *)((char *)a1 + v82);
      uint64_t v84 = (void *)((char *)a2 + v82);
      uint64_t v85 = type metadata accessor for SignedPeerStableInfo(0LL);
      uint64_t v86 = *(void *)(v85 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v86 + 48))(v84, 1LL, v85))
      {
        uint64_t v87 = sub_100007578(&qword_100251F18);
        memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64LL));
      }

      else
      {
        uint64_t v88 = *v84;
        unint64_t v89 = v84[1];
        sub_1000084E8(*v84, v89);
        *uint64_t v83 = v88;
        v83[1] = v89;
        uint64_t v90 = v84[2];
        unint64_t v91 = v84[3];
        sub_1000084E8(v90, v91);
        v83[2] = v90;
        v83[3] = v91;
        uint64_t v28 = v121;
        v121((char *)v83 + *(int *)(v85 + 24), (char *)v84 + *(int *)(v85 + 24), v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0LL, 1LL, v85);
      }

      uint64_t v92 = v23[9];
      uint64_t v93 = (void *)((char *)a1 + v92);
      uint64_t v94 = (void *)((char *)a2 + v92);
      uint64_t v95 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      uint64_t v96 = *(void *)(v95 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v96 + 48))(v94, 1LL, v95))
      {
        uint64_t v97 = sub_100007578(&qword_100256CA0);
        memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64LL));
      }

      else
      {
        uint64_t v98 = *v94;
        unint64_t v99 = v94[1];
        sub_1000084E8(*v94, v99);
        void *v93 = v98;
        v93[1] = v99;
        uint64_t v100 = v94[2];
        unint64_t v101 = v94[3];
        sub_1000084E8(v100, v101);
        v93[2] = v100;
        v93[3] = v101;
        uint64_t v28 = v121;
        v121((char *)v93 + *(int *)(v95 + 24), (char *)v94 + *(int *)(v95 + 24), v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0LL, 1LL, v95);
      }

      uint64_t v102 = v23[10];
      uint64_t v103 = (void *)((char *)a1 + v102);
      uint64_t v104 = (void *)((char *)a2 + v102);
      uint64_t v105 = type metadata accessor for SignedRecoveryVoucher(0LL);
      uint64_t v106 = *(void *)(v105 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v106 + 48))(v104, 1LL, v105))
      {
        uint64_t v107 = sub_100007578(&qword_100251F20);
        memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64LL));
      }

      else
      {
        uint64_t v108 = *v104;
        unint64_t v109 = v104[1];
        sub_1000084E8(*v104, v109);
        *uint64_t v103 = v108;
        v103[1] = v109;
        uint64_t v110 = v104[2];
        unint64_t v111 = v104[3];
        sub_1000084E8(v110, v111);
        v103[2] = v110;
        v103[3] = v111;
        uint64_t v28 = v121;
        v121((char *)v103 + *(int *)(v105 + 24), (char *)v104 + *(int *)(v105 + 24), v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0LL, 1LL, v105);
      }

      uint64_t v112 = v23[11];
      unint64_t v70 = (void *)((char *)a1 + v112);
      uint64_t v71 = (void *)((char *)a2 + v112);
      uint64_t v72 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      uint64_t v73 = *(void *)(v72 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v73 + 48))(v71, 1LL, v72))
      {
        uint64_t v114 = v28;
        uint64_t v115 = *v71;
        unint64_t v116 = v71[1];
        sub_1000084E8(*v71, v116);
        *unint64_t v70 = v115;
        v70[1] = v116;
        uint64_t v117 = v71[2];
        unint64_t v118 = v71[3];
        sub_1000084E8(v117, v118);
        v70[2] = v117;
        v70[3] = v118;
        v114((char *)v70 + *(int *)(v72 + 24), (char *)v71 + *(int *)(v72 + 24), v27);
        goto LABEL_33;
      }
    }

    uint64_t v113 = sub_100007578(&qword_100251F28);
    memcpy(v70, v71, *(void *)(*(void *)(v113 - 8) + 64LL));
LABEL_34:
    swift_storeEnumTagMultiPayload(a1, v123, v122);
  }

  return a1;
}

uint64_t initializeWithTake for PeerDifference.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v49 = a3;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL);
  v12(v9, v10, v11);
  uint64_t v13 = v7[7];
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578(&qword_100256F80);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    __int128 v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v20 = v7[8];
  uint64_t v21 = (_OWORD *)(a1 + v20);
  uint64_t v22 = (_OWORD *)(a2 + v20);
  uint64_t v23 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100007578(&qword_100251F18);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    __int128 v26 = v22[1];
    _OWORD *v21 = *v22;
    v21[1] = v26;
    v12((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  uint64_t v27 = v7[9];
  uint64_t v28 = (_OWORD *)(a1 + v27);
  uint64_t v29 = (_OWORD *)(a2 + v27);
  uint64_t v30 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
  {
    uint64_t v32 = sub_100007578(&qword_100256CA0);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    __int128 v33 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v33;
    v12((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  }

  uint64_t v34 = v7[10];
  uint64_t v35 = (_OWORD *)(a1 + v34);
  unint64_t v36 = (_OWORD *)(a2 + v34);
  uint64_t v37 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    uint64_t v39 = sub_100007578(&qword_100251F20);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    __int128 v40 = v36[1];
    _OWORD *v35 = *v36;
    v35[1] = v40;
    v12((char *)v35 + *(int *)(v37 + 24), (char *)v36 + *(int *)(v37 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  uint64_t v41 = v7[11];
  uint64_t v42 = (_OWORD *)(a1 + v41);
  uint64_t v43 = (_OWORD *)(a2 + v41);
  uint64_t v44 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1LL, v44))
  {
    uint64_t v46 = sub_100007578(&qword_100251F28);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    __int128 v47 = v43[1];
    _OWORD *v42 = *v43;
    v42[1] = v47;
    v12((char *)v42 + *(int *)(v44 + 24), (char *)v43 + *(int *)(v44 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0LL, 1LL, v44);
  }

  swift_storeEnumTagMultiPayload(a1, v49, EnumCaseMultiPayload);
  return a1;
}

uint64_t assignWithTake for PeerDifference.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000415CC(a1, type metadata accessor for PeerDifference.OneOf_Operation);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v49 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v7 = (int *)type metadata accessor for Peer(0LL);
    uint64_t v8 = v7[6];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL);
    v12(v9, v10, v11);
    uint64_t v13 = v7[7];
    uint64_t v14 = (_OWORD *)(a1 + v13);
    uint64_t v15 = (_OWORD *)(a2 + v13);
    uint64_t v16 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100007578(&qword_100256F80);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      __int128 v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v20 = v7[8];
    uint64_t v21 = (_OWORD *)(a1 + v20);
    uint64_t v22 = (_OWORD *)(a2 + v20);
    uint64_t v23 = type metadata accessor for SignedPeerStableInfo(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_100007578(&qword_100251F18);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      __int128 v26 = v22[1];
      _OWORD *v21 = *v22;
      v21[1] = v26;
      v12((uint64_t)v21 + *(int *)(v23 + 24), (uint64_t)v22 + *(int *)(v23 + 24), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
    }

    uint64_t v27 = v7[9];
    uint64_t v28 = (_OWORD *)(a1 + v27);
    uint64_t v29 = (_OWORD *)(a2 + v27);
    uint64_t v30 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
    {
      uint64_t v32 = sub_100007578(&qword_100256CA0);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      __int128 v33 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v33;
      v12((uint64_t)v28 + *(int *)(v30 + 24), (uint64_t)v29 + *(int *)(v30 + 24), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
    }

    uint64_t v34 = v7[10];
    uint64_t v35 = (_OWORD *)(a1 + v34);
    unint64_t v36 = (_OWORD *)(a2 + v34);
    uint64_t v37 = type metadata accessor for SignedRecoveryVoucher(0LL);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
    {
      uint64_t v39 = sub_100007578(&qword_100251F20);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      __int128 v40 = v36[1];
      _OWORD *v35 = *v36;
      v35[1] = v40;
      v12((uint64_t)v35 + *(int *)(v37 + 24), (uint64_t)v36 + *(int *)(v37 + 24), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
    }

    uint64_t v41 = v7[11];
    uint64_t v42 = (_OWORD *)(a1 + v41);
    uint64_t v43 = (_OWORD *)(a2 + v41);
    uint64_t v44 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1LL, v44))
    {
      uint64_t v46 = sub_100007578(&qword_100251F28);
      memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      __int128 v47 = v43[1];
      _OWORD *v42 = *v43;
      v42[1] = v47;
      v12((uint64_t)v42 + *(int *)(v44 + 24), (uint64_t)v43 + *(int *)(v44 + 24), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0LL, 1LL, v44);
    }

    swift_storeEnumTagMultiPayload(a1, v49, EnumCaseMultiPayload);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for PeerDifference.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for PeerDifference.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1000C2C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000C2C7C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Peer(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for TLKShare(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v3 = *a2;
    unint64_t v3 = (void *)(v18 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v18);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    uint64_t v8 = a2[8];
    uint64_t v7 = a2[9];
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v7;
    uint64_t v10 = a2[10];
    uint64_t v9 = a2[11];
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v9;
    uint64_t v12 = a2[12];
    uint64_t v11 = a2[13];
    *(void *)(a1 + 96) = v12;
    *(void *)(a1 + 104) = v11;
    uint64_t v13 = a2[14];
    *(void *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
    uint64_t v14 = a2[17];
    uint64_t v15 = *(int *)(a3 + 60);
    uint64_t v20 = (uint64_t)a2 + v15;
    uint64_t v21 = a1 + v15;
    *(void *)(a1 + 136) = v14;
    uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    v17(v21, v20, v16);
  }

  return v3;
}

uint64_t destroy for TLKShare(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 60);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for TLKShare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v6;
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v8;
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = v10;
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 136);
  uint64_t v14 = *(int *)(a3 + 60);
  uint64_t v18 = a2 + v14;
  uint64_t v19 = a1 + v14;
  *(void *)(a1 + 136) = v13;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  v16(v19, v18, v15);
  return a1;
}

void *assignWithCopy for TLKShare(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[9] = a2[9];
  uint64_t v12 = a2[10];
  uint64_t v13 = a1[10];
  a1[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[11] = a2[11];
  uint64_t v14 = a2[12];
  uint64_t v15 = a1[12];
  a1[12] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[13] = a2[13];
  uint64_t v16 = a2[14];
  uint64_t v17 = a1[14];
  a1[14] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[15] = a2[15];
  a1[16] = a2[16];
  uint64_t v18 = a2[17];
  uint64_t v19 = a1[17];
  a1[17] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(int *)(a3 + 60);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 24LL))(v21, v22, v23);
  return a1;
}

uint64_t initializeWithTake for TLKShare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v5 = *(int *)(a3 + 60);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TLKShare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v17 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(int *)(a3 + 60);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40LL))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for TLKShare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3270);
}

uint64_t sub_1000C3270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 60),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for TLKShare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C32F8);
}

uint64_t sub_1000C32F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 60),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000C336C(uint64_t a1)
{
  v4[0] = &unk_1001E6000;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[3] = &unk_1001E6000;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_1001E6000;
  v4[6] = &unk_1001E6000;
  v4[7] = &unk_1001E6000;
  v4[8] = &unk_1001E6000;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = &unk_1001E6000;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[11] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 12LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for ViewKey(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v3 = *a2;
    unint64_t v3 = (void *)(v14 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v14);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    uint64_t v7 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    uint64_t v8 = a2[9];
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (uint64_t)a2 + v9;
    uint64_t v11 = a1 + v9;
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v8;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v11, v10, v12);
  }

  return v3;
}

uint64_t destroy for ViewKey(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for ViewKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a2 + v8;
  uint64_t v10 = a1 + v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v10, v9, v11);
  return a1;
}

uint64_t assignWithCopy for ViewKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ViewKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for ViewKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3824);
}

uint64_t storeEnumTagSinglePayload for ViewKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3834);
}

uint64_t sub_1000C3838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C505C( a1,  a2,  a3,  (uint64_t)&unk_1001E6000,  (uint64_t)"\t",  (uint64_t)&unk_1001E6000,  (uint64_t)&unk_1001E6000);
}

uint64_t getEnumTagSinglePayload for ViewKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3878);
}

uint64_t storeEnumTagSinglePayload for ViewKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3888);
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewKeysRecords(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_100007578(&qword_1002517E0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1LL, v11))
    {
      uint64_t v19 = sub_100007578(&qword_1002517E0);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0LL, 1LL, v11);
    }

    uint64_t v20 = a3[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    if (v13(v22, 1LL, v11))
    {
      uint64_t v23 = sub_100007578(&qword_1002517E0);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v21, v22, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v21, 0LL, 1LL, v11);
    }
  }

  return a1;
}

uint64_t destroy for ViewKeysRecords(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + a2[6];
  if (!v8(v9, 1LL, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v10, 1LL, v6);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t initializeWithCopy for ViewKeysRecords(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1LL, v10))
  {
    uint64_t v17 = sub_100007578(&qword_1002517E0);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0LL, 1LL, v10);
  }

  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v12(v20, 1LL, v10))
  {
    uint64_t v21 = sub_100007578(&qword_1002517E0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v19, v20, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v19, 0LL, 1LL, v10);
  }

  return a1;
}

uint64_t assignWithCopy for ViewKeysRecords(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1LL, v10);
  int v20 = v12(v18, 1LL, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    uint64_t v21 = sub_100007578(&qword_1002517E0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v17, v18, v10);
LABEL_13:
  uint64_t v22 = a3[7];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  int v25 = v12((void *)(a1 + v22), 1LL, v10);
  int v26 = v12(v24, 1LL, v10);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v23, v24, v10);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v23, v10);
    goto LABEL_18;
  }

  if (v26)
  {
LABEL_18:
    uint64_t v27 = sub_100007578(&qword_1002517E0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v23, v24, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v23, 0LL, 1LL, v10);
  return a1;
}

uint64_t initializeWithTake for ViewKeysRecords(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1LL, v10))
  {
    uint64_t v17 = sub_100007578(&qword_1002517E0);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0LL, 1LL, v10);
  }

  uint64_t v18 = a3[7];
  int v19 = (void *)(a1 + v18);
  int v20 = (const void *)(a2 + v18);
  if (v12(v20, 1LL, v10))
  {
    uint64_t v21 = sub_100007578(&qword_1002517E0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v19, v20, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v19, 0LL, 1LL, v10);
  }

  return a1;
}

uint64_t assignWithTake for ViewKeysRecords(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1LL, v10);
  int v20 = v12(v18, 1LL, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    uint64_t v21 = sub_100007578(&qword_1002517E0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v17, v18, v10);
LABEL_13:
  uint64_t v22 = a3[7];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  int v25 = v12((void *)(a1 + v22), 1LL, v10);
  int v26 = v12(v24, 1LL, v10);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v23, v24, v10);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v23, v10);
    goto LABEL_18;
  }

  if (v26)
  {
LABEL_18:
    uint64_t v27 = sub_100007578(&qword_1002517E0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v23, v24, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v23, 0LL, 1LL, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewKeysRecords(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C4438);
}

uint64_t sub_1000C4438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD11C(a1, a2, a3, &qword_1002517E0);
}

uint64_t storeEnumTagSinglePayload for ViewKeysRecords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C4450);
}

uint64_t sub_1000C4450(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000CD1AC(a1, a2, a3, a4, &qword_1002517E0);
}

void sub_1000C445C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4( 319LL,  (unint64_t *)&unk_100253300,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = v7;
      swift_initStructMetadata(a1, 256LL, 4LL, &v6, a1 + 16);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for Bottle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000084E8(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1000084E8(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_1000084E8(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_1000084E8(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = a2[9];
    a1[8] = a2[8];
    a1[9] = v15;
    uint64_t v16 = a2[10];
    uint64_t v17 = a2[11];
    uint64_t v18 = *(int *)(a3 + 40);
    int v19 = (char *)a1 + v18;
    int v20 = (char *)a2 + v18;
    a1[10] = v16;
    a1[11] = v17;
    uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    v22(v19, v20, v21);
  }

  return a1;
}

uint64_t destroy for Bottle(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *initializeWithCopy for Bottle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000084E8(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000084E8(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000084E8(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_1000084E8(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = a2[9];
  a1[8] = a2[8];
  a1[9] = v14;
  uint64_t v15 = a2[10];
  uint64_t v16 = a2[11];
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = (char *)a1 + v17;
  int v19 = (char *)a2 + v17;
  a1[10] = v15;
  a1[11] = v16;
  uint64_t v20 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  v21(v18, v19, v20);
  return a1;
}

uint64_t *assignWithCopy for Bottle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000084E8(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000852C(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000084E8(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10000852C(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_1000084E8(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10000852C(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_1000084E8(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10000852C(v20, v21);
  a1[8] = a2[8];
  uint64_t v22 = a2[9];
  uint64_t v23 = a1[9];
  a1[9] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[10] = a2[10];
  uint64_t v24 = a2[11];
  uint64_t v25 = a1[11];
  a1[11] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *(int *)(a3 + 40);
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24LL))(v27, v28, v29);
  return a1;
}

_OWORD *initializeWithTake for Bottle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  __int128 v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  __int128 v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for Bottle(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000852C(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10000852C(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10000852C(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10000852C(v12, v13);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = a1[9];
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = a1[11];
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(int *)(a3 + 40);
  unint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40LL))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Bottle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C49A0);
}

uint64_t sub_1000C49A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 40),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Bottle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C4A28);
}

uint64_t sub_1000C4A28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 72) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 40),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000C4A9C(uint64_t a1)
{
  v4[0] = &unk_1001E5FD8;
  v4[1] = &unk_1001E5FD8;
  v4[2] = &unk_1001E5FD8;
  void v4[3] = &unk_1001E5FD8;
  v4[4] = &unk_1001E6000;
  v4[5] = &unk_1001E6000;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for EscrowPair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C4B2C);
}

uint64_t storeEnumTagSinglePayload for EscrowPair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C4B3C);
}

uint64_t initializeBufferWithCopyOfBuffer for Changes(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    a1 = v17 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = v8;
    unint64_t v10 = a2[4];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    sub_1000084E8(v9, v10);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v10;
    uint64_t v11 = a2[5];
    unint64_t v12 = a2[6];
    sub_1000084E8(v11, v12);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  }

  return a1;
}

uint64_t destroy for Changes(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for Changes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  unint64_t v9 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_1000084E8(v8, v9);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  sub_1000084E8(v10, v11);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  return a1;
}

uint64_t assignWithCopy for Changes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_1000084E8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_10000852C(v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_1000084E8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_10000852C(v16, v17);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24LL))(v19, v20, v21);
  return a1;
}

uint64_t initializeWithTake for Changes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Changes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10000852C(v9, v10);
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10000852C(v11, v12);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Changes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C4F34);
}

uint64_t sub_1000C4F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 36),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Changes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C4FC0);
}

uint64_t sub_1000C4FC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 36),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000C5038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C505C( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.BridgeObject + 64,  (uint64_t)&unk_1001E5FD8,  (uint64_t)&unk_1001E5FD8,  (uint64_t)&unk_1001E60A0);
}

uint64_t sub_1000C505C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v10[0] = &unk_1001E6000;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  v10[4] = a7;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    v10[5] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 6LL, v10, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PolicyDocumentKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[2];
    a1[2] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for PolicyDocumentKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for PolicyDocumentKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for PolicyDocumentKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for PolicyDocumentKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PolicyDocumentKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PolicyDocumentKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C53A4);
}

uint64_t sub_1000C53A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for PolicyDocumentKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C542C);
}

uint64_t sub_1000C542C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000C54A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA7CC(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64, (uint64_t)&unk_1001E6000);
}

uint64_t *initializeBufferWithCopyOfBuffer for PolicyDocumentMapEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000084E8(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for PolicyDocumentKey(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100007578(&qword_100251668);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      uint64_t v21 = v16[2];
      v15[2] = v21;
      uint64_t v22 = *(int *)(v17 + 24);
      uint64_t v23 = (char *)v15 + v22;
      uint64_t v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain(v21);
      v13(v23, v24, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }
  }

  return a1;
}

uint64_t destroy for PolicyDocumentMapEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 16));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  }

  return result;
}

uint64_t *initializeWithCopy for PolicyDocumentMapEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000084E8(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578(&qword_100251668);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    uint64_t v19 = v15[2];
    v14[2] = v19;
    uint64_t v20 = *(int *)(v16 + 24);
    uint64_t v21 = (char *)v14 + v20;
    uint64_t v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain(v19);
    v12(v21, v22, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t *assignWithCopy for PolicyDocumentMapEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000084E8(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000852C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21(v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = *((void *)v18 + 1);
      uint64_t v30 = *((void *)v18 + 2);
      uint64_t v31 = *((void *)v17 + 2);
      *((void *)v17 + 2) = v30;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v31);
      v15(&v17[*(int *)(v19 + 24)], &v18[*(int *)(v19 + 24)], v13);
      return a1;
    }

    sub_1000415CC((uint64_t)v17, type metadata accessor for PolicyDocumentKey);
    goto LABEL_6;
  }

  if (v22)
  {
LABEL_6:
    uint64_t v28 = sub_100007578(&qword_100251668);
    memcpy(v17, v18, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  uint64_t v23 = *((void *)v18 + 2);
  *((void *)v17 + 2) = v23;
  uint64_t v24 = *(int *)(v19 + 24);
  uint64_t v25 = &v17[v24];
  uint64_t v26 = &v18[v24];
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain(v23);
  v27(v25, v26, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

_OWORD *initializeWithTake for PolicyDocumentMapEntry(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100251668);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *(_OWORD *)(v12 + 1) = *(_OWORD *)(v13 + 1);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t *assignWithTake for PolicyDocumentMapEntry(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000852C(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19((uint64_t)v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      uint64_t v23 = *(void *)(v15 + 16);
      *(void *)(v15 + 16) = *((void *)v16 + 2);
      swift_bridgeObjectRelease(v23);
      v13((char *)(v15 + *(int *)(v17 + 24)), &v16[*(int *)(v17 + 24)], v11);
      return a1;
    }

    sub_1000415CC(v15, type metadata accessor for PolicyDocumentKey);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v21 = sub_100007578(&qword_100251668);
    memcpy((void *)v15, v16, *(void *)(*(void *)(v21 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v15 = *(void *)v16;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v15 + *(int *)(v17 + 24), &v16[*(int *)(v17 + 24)], v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PolicyDocumentMapEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C5C34);
}

uint64_t sub_1000C5C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_100007578(&qword_100251668);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for PolicyDocumentMapEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C5CF0);
}

char *sub_1000C5CF0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100007578(&qword_100251668);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1000C5D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AccountInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    unint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

_DWORD *initializeWithCopy for AccountInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for AccountInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for AccountInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for AccountInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C5FBC);
}

uint64_t storeEnumTagSinglePayload for AccountInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C5FCC);
}

uint64_t sub_1000C5FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D57B0(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int32 + 64);
}

uint64_t getEnumTagSinglePayload for Metrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6000);
}

uint64_t storeEnumTagSinglePayload for Metrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6010);
}

uint64_t sub_1000C6014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA7CC(a1, a2, a3, (uint64_t)&unk_1001E6000, (uint64_t)&unk_1001E6000);
}

uint64_t getEnumTagSinglePayload for ResetRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6048);
}

uint64_t storeEnumTagSinglePayload for ResetRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6058);
}

uint64_t getEnumTagSinglePayload for ResetResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6084);
}

uint64_t sub_1000C6084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD11C(a1, a2, a3, (uint64_t *)&unk_100256C90);
}

uint64_t storeEnumTagSinglePayload for ResetResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C609C);
}

uint64_t sub_1000C609C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000CD1AC(a1, a2, a3, a4, (uint64_t *)&unk_100256C90);
}

uint64_t getEnumTagSinglePayload for EstablishRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C60B8);
}

uint64_t storeEnumTagSinglePayload for EstablishRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C60C8);
}

uint64_t getEnumTagSinglePayload for EstablishResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C60F0);
}

uint64_t storeEnumTagSinglePayload for EstablishResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6100);
}

void sub_1000C6104(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for JoinWithVoucherRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6130);
}

uint64_t storeEnumTagSinglePayload for JoinWithVoucherRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6140);
}

uint64_t *_s18TrustedPeersHelper17EstablishResponseVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Changes(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100007578((uint64_t *)&unk_100256C90);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      uint64_t v20 = v15[2];
      uint64_t v21 = v15[3];
      v14[2] = v20;
      unint64_t v22 = v15[4];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      sub_1000084E8(v21, v22);
      v14[3] = v21;
      v14[4] = v22;
      uint64_t v23 = v15[5];
      unint64_t v24 = v15[6];
      sub_1000084E8(v23, v24);
      v14[5] = v23;
      v14[6] = v24;
      *((_BYTE *)v14 + 56) = *((_BYTE *)v15 + 56);
      v12((char *)v14 + *(int *)(v16 + 36), (char *)v15 + *(int *)(v16 + 36), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v7;
}

uint64_t _s18TrustedPeersHelper17EstablishResponseVwxx_0(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = (void *)((char *)a1 + *(int *)(a2 + 24));
  uint64_t v7 = type metadata accessor for Changes(0LL);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[2]);
    sub_10000852C(v6[3], v6[4]);
    sub_10000852C(v6[5], v6[6]);
    return ((uint64_t (*)(char *, uint64_t))v9)((char *)v6 + *(int *)(v7 + 36), v5);
  }

  return result;
}

uint64_t *_s18TrustedPeersHelper17EstablishResponseVwcp_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Changes(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[2];
    uint64_t v20 = v14[3];
    v13[2] = v19;
    unint64_t v21 = v14[4];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    sub_1000084E8(v20, v21);
    v13[3] = v20;
    v13[4] = v21;
    uint64_t v22 = v14[5];
    unint64_t v23 = v14[6];
    sub_1000084E8(v22, v23);
    v13[5] = v22;
    v13[6] = v23;
    *((_BYTE *)v13 + 56) = *((_BYTE *)v14 + 56);
    v11((char *)v13 + *(int *)(v15 + 36), (char *)v14 + *(int *)(v15 + 36), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *_s18TrustedPeersHelper17EstablishResponseVwtk_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Changes(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *(_OWORD *)((char *)v12 + 24) = *(_OWORD *)((char *)v13 + 24);
    *(_OWORD *)((char *)v12 + 40) = *(_OWORD *)((char *)v13 + 40);
    *((_BYTE *)v12 + 56) = *((_BYTE *)v13 + 56);
    v10((char *)v12 + *(int *)(v14 + 36), (char *)v13 + *(int *)(v14 + 36), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for JoinWithVoucherResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6624);
}

uint64_t storeEnumTagSinglePayload for JoinWithVoucherResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6634);
}

uint64_t *initializeBufferWithCopyOfBuffer for UpdateTrustRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
    uint64_t v10 = a3[8];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    a1[4] = v9;
    a1[5] = v8;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    uint64_t v15 = v8;
    uint64_t v16 = a3;
    swift_bridgeObjectRetain(v15);
    v14(v11, v12, v13);
    uint64_t v17 = a3[9];
    uint64_t v18 = (uint64_t *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = type metadata accessor for SignedPeerStableInfo(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v79 = v14;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
    {
      uint64_t v22 = sub_100007578(&qword_100251F18);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      uint64_t v24 = v13;
      uint64_t v25 = *v19;
      unint64_t v26 = v19[1];
      sub_1000084E8(*v19, v26);
      *uint64_t v18 = v25;
      v18[1] = v26;
      uint64_t v27 = v19[2];
      unint64_t v28 = v19[3];
      sub_1000084E8(v27, v28);
      v18[2] = v27;
      v18[3] = v28;
      uint64_t v13 = v24;
      uint64_t v16 = a3;
      v14((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
    }

    uint64_t v29 = v16[10];
    uint64_t v30 = (uint64_t *)((char *)v4 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = sub_100007578(&qword_100256CA0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      uint64_t v35 = v13;
      uint64_t v36 = *v31;
      unint64_t v37 = v31[1];
      sub_1000084E8(*v31, v37);
      *uint64_t v30 = v36;
      v30[1] = v37;
      uint64_t v38 = v31[2];
      unint64_t v39 = v31[3];
      sub_1000084E8(v38, v39);
      v30[2] = v38;
      v30[3] = v39;
      uint64_t v13 = v35;
      v79((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }

    uint64_t v40 = v16[11];
    uint64_t v41 = (uint64_t *)((char *)v4 + v40);
    uint64_t v42 = (uint64_t *)((char *)a2 + v40);
    uint64_t v43 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
    uint64_t v44 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48))(v42, 1LL, v43))
    {
      uint64_t v45 = sub_100007578(&qword_100256D20);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64LL));
    }

    else
    {
      uint64_t v46 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v46;
      uint64_t v47 = *(int *)(v43 + 20);
      uint64_t v48 = v13;
      uint64_t v49 = (char *)v41 + v47;
      uint64_t v50 = (char *)v42 + v47;
      swift_bridgeObjectRetain(v46);
      uint64_t v81 = v48;
      v79(v49, v50, v48);
      uint64_t v51 = *(int *)(v43 + 24);
      uint64_t v52 = (char *)v41 + v51;
      uint64_t v53 = (char *)v42 + v51;
      uint64_t v54 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1LL, v54))
      {
        uint64_t v56 = sub_100007578((uint64_t *)&unk_100256D30);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0LL, 1LL, v54);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
      uint64_t v13 = v81;
    }

    uint64_t v57 = v16[12];
    unint64_t v58 = (uint64_t *)((char *)v4 + v57);
    uint64_t v59 = (uint64_t *)((char *)a2 + v57);
    uint64_t v60 = type metadata accessor for Metrics(0LL);
    uint64_t v61 = *(void *)(v60 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v61 + 48))(v59, 1LL, v60))
    {
      uint64_t v62 = sub_100007578(&qword_100257000);
      memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64LL));
      uint64_t v63 = v79;
    }

    else
    {
      uint64_t v64 = v59[1];
      void *v58 = *v59;
      v58[1] = v64;
      uint64_t v65 = v13;
      uint64_t v66 = v59[3];
      v58[2] = v59[2];
      v58[3] = v66;
      uint64_t v67 = *(int *)(v60 + 24);
      unint64_t v68 = (char *)v58 + v67;
      uint64_t v69 = (char *)v59 + v67;
      swift_bridgeObjectRetain(v64);
      uint64_t v70 = v66;
      uint64_t v13 = v65;
      swift_bridgeObjectRetain(v70);
      uint64_t v71 = v65;
      uint64_t v63 = v79;
      v79(v68, v69, v71);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0LL, 1LL, v60);
    }

    uint64_t v72 = v16[13];
    uint64_t v73 = (_DWORD *)((char *)v4 + v72);
    uint64_t v74 = (_DWORD *)((char *)a2 + v72);
    uint64_t v75 = type metadata accessor for AccountInfo(0LL);
    uint64_t v76 = *(void *)(v75 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v76 + 48))(v74, 1LL, v75))
    {
      uint64_t v77 = sub_100007578(&qword_100251F50);
      memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
    }

    else
    {
      _DWORD *v73 = *v74;
      v63((char *)v73 + *(int *)(v75 + 20), (char *)v74 + *(int *)(v75 + 20), v13);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0LL, 1LL, v75);
    }
  }

  return v4;
}

uint64_t destroy for UpdateTrustRequest(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v20 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v20(v4, v5);
  uint64_t v6 = (char *)a1 + a2[9];
  uint64_t v7 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    sub_10000852C(*(void *)v6, *((void *)v6 + 1));
    sub_10000852C(*((void *)v6 + 2), *((void *)v6 + 3));
    v20(&v6[*(int *)(v7 + 24)], v5);
  }

  uint64_t v8 = (char *)a1 + a2[10];
  uint64_t v9 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    sub_10000852C(*(void *)v8, *((void *)v8 + 1));
    sub_10000852C(*((void *)v8 + 2), *((void *)v8 + 3));
    v20(&v8[*(int *)(v9 + 24)], v5);
  }

  uint64_t v10 = (char *)a1 + a2[11];
  uint64_t v11 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    swift_bridgeObjectRelease(*((void *)v10 + 1));
    v20(&v10[*(int *)(v11 + 20)], v5);
    uint64_t v12 = &v10[*(int *)(v11 + 24)];
    uint64_t v13 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
  }

  uint64_t v15 = (char *)a1 + a2[12];
  uint64_t v16 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v15, 1LL, v16))
  {
    swift_bridgeObjectRelease(*((void *)v15 + 1));
    swift_bridgeObjectRelease(*((void *)v15 + 3));
    v20(&v15[*(int *)(v16 + 24)], v5);
  }

  uint64_t v17 = (char *)a1 + a2[13];
  uint64_t v18 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v17, 1LL, v18);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v20)(&v17[*(int *)(v18 + 20)], v5);
  }
  return result;
}

void *initializeWithCopy for UpdateTrustRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v10 = a3[8];
  uint64_t v80 = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  a1[4] = v9;
  a1[5] = v8;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  uint64_t v14 = v8;
  uint64_t v15 = a2;
  uint64_t v16 = v13;
  swift_bridgeObjectRetain(v14);
  v13(v80, v11, v12);
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)v15 + v17);
  uint64_t v20 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v81 = v15;
  uint64_t v82 = v13;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
  {
    uint64_t v22 = sub_100007578(&qword_100251F18);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    uint64_t v23 = v12;
    uint64_t v24 = *v19;
    unint64_t v25 = v19[1];
    sub_1000084E8(*v19, v25);
    *uint64_t v18 = v24;
    v18[1] = v25;
    uint64_t v26 = v19[2];
    unint64_t v27 = v19[3];
    sub_1000084E8(v26, v27);
    v18[2] = v26;
    v18[3] = v27;
    uint64_t v12 = v23;
    uint64_t v15 = v81;
    v16((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  uint64_t v28 = a3[10];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)v15 + v28);
  uint64_t v31 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
  {
    uint64_t v33 = sub_100007578(&qword_100256CA0);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    uint64_t v34 = v12;
    uint64_t v35 = *v30;
    unint64_t v36 = v30[1];
    sub_1000084E8(*v30, v36);
    *uint64_t v29 = v35;
    v29[1] = v36;
    uint64_t v37 = v30[2];
    unint64_t v38 = v30[3];
    sub_1000084E8(v37, v38);
    v29[2] = v37;
    v29[3] = v38;
    uint64_t v12 = v34;
    v82((char *)v29 + *(int *)(v31 + 24), (char *)v30 + *(int *)(v31 + 24), v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  }

  uint64_t v39 = a3[11];
  uint64_t v40 = (void *)((char *)a1 + v39);
  uint64_t v41 = (void *)((char *)v15 + v39);
  uint64_t v42 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
  {
    uint64_t v44 = sub_100007578(&qword_100256D20);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    uint64_t v45 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v45;
    uint64_t v46 = *(int *)(v42 + 20);
    uint64_t v47 = v12;
    uint64_t v48 = (char *)v40 + v46;
    uint64_t v49 = (char *)v41 + v46;
    swift_bridgeObjectRetain(v45);
    uint64_t v79 = v47;
    v82(v48, v49, v47);
    uint64_t v50 = *(int *)(v42 + 24);
    uint64_t v51 = (char *)v40 + v50;
    uint64_t v52 = (char *)v41 + v50;
    uint64_t v53 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1LL, v53))
    {
      uint64_t v55 = sub_100007578((uint64_t *)&unk_100256D30);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0LL, 1LL, v53);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
    uint64_t v12 = v79;
  }

  uint64_t v56 = a3[12];
  uint64_t v57 = (void *)((char *)a1 + v56);
  unint64_t v58 = (void *)((char *)v15 + v56);
  uint64_t v59 = type metadata accessor for Metrics(0LL);
  uint64_t v60 = *(void *)(v59 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v60 + 48))(v58, 1LL, v59))
  {
    uint64_t v61 = sub_100007578(&qword_100257000);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64LL));
    uint64_t v62 = v82;
  }

  else
  {
    uint64_t v63 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v63;
    uint64_t v64 = v12;
    uint64_t v65 = v58[3];
    v57[2] = v58[2];
    v57[3] = v65;
    uint64_t v66 = *(int *)(v59 + 24);
    uint64_t v67 = (char *)v57 + v66;
    unint64_t v68 = (char *)v58 + v66;
    swift_bridgeObjectRetain(v63);
    uint64_t v69 = v65;
    uint64_t v12 = v64;
    swift_bridgeObjectRetain(v69);
    uint64_t v70 = v64;
    uint64_t v62 = v82;
    v82(v67, v68, v70);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0LL, 1LL, v59);
  }

  uint64_t v71 = a3[13];
  uint64_t v72 = a1;
  uint64_t v73 = (_DWORD *)((char *)a1 + v71);
  uint64_t v74 = (_DWORD *)((char *)v81 + v71);
  uint64_t v75 = type metadata accessor for AccountInfo(0LL);
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v76 + 48))(v74, 1LL, v75))
  {
    uint64_t v77 = sub_100007578(&qword_100251F50);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
  }

  else
  {
    _DWORD *v73 = *v74;
    v62((char *)v73 + *(int *)(v75 + 20), (char *)v74 + *(int *)(v75 + 20), v12);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0LL, 1LL, v75);
  }

  return v72;
}

void *assignWithCopy for UpdateTrustRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[5];
  uint64_t v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v121 = *(void *)(v17 - 8);
  uint64_t v122 = v17;
  unint64_t v120 = *(void (**)(char *, char *))(v121 + 24);
  v120(v15, v16);
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1LL, v21);
  int v25 = v23(v20, 1LL, v21);
  if (v24)
  {
    if (!v25)
    {
      uint64_t v26 = *v20;
      unint64_t v27 = v20[1];
      sub_1000084E8(*v20, v27);
      uint64_t *v19 = v26;
      v19[1] = v27;
      uint64_t v28 = v20[2];
      unint64_t v29 = v20[3];
      sub_1000084E8(v28, v29);
      v19[2] = v28;
      v19[3] = v29;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v19 + *(int *)(v21 + 24),  (char *)v20 + *(int *)(v21 + 24),  v122);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v25)
  {
    sub_1000415CC((uint64_t)v19, type metadata accessor for SignedPeerStableInfo);
LABEL_6:
    uint64_t v30 = sub_100007578(&qword_100251F18);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v66 = *v20;
  unint64_t v67 = v20[1];
  sub_1000084E8(*v20, v67);
  uint64_t v68 = *v19;
  unint64_t v69 = v19[1];
  uint64_t *v19 = v66;
  v19[1] = v67;
  sub_10000852C(v68, v69);
  uint64_t v70 = v20[2];
  unint64_t v71 = v20[3];
  sub_1000084E8(v70, v71);
  uint64_t v72 = v19[2];
  unint64_t v73 = v19[3];
  v19[2] = v70;
  v19[3] = v71;
  sub_10000852C(v72, v73);
  ((void (*)(char *, char *, uint64_t))v120)( (char *)v19 + *(int *)(v21 + 24),  (char *)v20 + *(int *)(v21 + 24),  v122);
LABEL_7:
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  uint64_t v34 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  unint64_t v36 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1LL, v34);
  int v38 = v36(v33, 1LL, v34);
  if (v37)
  {
    if (!v38)
    {
      uint64_t v39 = *v33;
      unint64_t v40 = v33[1];
      sub_1000084E8(*v33, v40);
      uint64_t *v32 = v39;
      v32[1] = v40;
      uint64_t v41 = v33[2];
      unint64_t v42 = v33[3];
      sub_1000084E8(v41, v42);
      v32[2] = v41;
      v32[3] = v42;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v32 + *(int *)(v34 + 24),  (char *)v33 + *(int *)(v34 + 24),  v122);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v38)
  {
    sub_1000415CC((uint64_t)v32, type metadata accessor for SignedPeerDynamicInfo);
LABEL_12:
    uint64_t v43 = sub_100007578(&qword_100256CA0);
    memcpy(v32, v33, *(void *)(*(void *)(v43 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v74 = *v33;
  unint64_t v75 = v33[1];
  sub_1000084E8(*v33, v75);
  uint64_t v76 = *v32;
  unint64_t v77 = v32[1];
  uint64_t *v32 = v74;
  v32[1] = v75;
  sub_10000852C(v76, v77);
  uint64_t v78 = v33[2];
  unint64_t v79 = v33[3];
  sub_1000084E8(v78, v79);
  uint64_t v80 = v32[2];
  unint64_t v81 = v32[3];
  v32[2] = v78;
  v32[3] = v79;
  sub_10000852C(v80, v81);
  ((void (*)(char *, char *, uint64_t))v120)( (char *)v32 + *(int *)(v34 + 24),  (char *)v33 + *(int *)(v34 + 24),  v122);
LABEL_13:
  uint64_t v44 = a3[11];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1LL, v47);
  int v51 = v49(v46, 1LL, v47);
  if (!v50)
  {
    if (!v51)
    {
      *(void *)uint64_t v45 = *(void *)v46;
      uint64_t v82 = *((void *)v46 + 1);
      uint64_t v83 = *((void *)v45 + 1);
      *((void *)v45 + 1) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v83);
      ((void (*)(char *, char *, uint64_t))v120)(&v45[*(int *)(v47 + 20)], &v46[*(int *)(v47 + 20)], v122);
      uint64_t v84 = *(int *)(v47 + 24);
      uint64_t v85 = &v45[v84];
      uint64_t v86 = &v46[v84];
      uint64_t v87 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
      uint64_t v88 = *(void *)(v87 - 8);
      unint64_t v89 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48);
      LODWORD(v83) = v89(v85, 1LL, v87);
      int v90 = v89(v86, 1LL, v87);
      if ((_DWORD)v83)
      {
        if (!v90)
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v85, v86, v87);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0LL, 1LL, v87);
          goto LABEL_28;
        }
      }

      else
      {
        if (!v90)
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 24))(v85, v86, v87);
          goto LABEL_28;
        }

        (*(void (**)(char *, uint64_t))(v88 + 8))(v85, v87);
      }

      size_t v63 = *(void *)(*(void *)(sub_100007578((uint64_t *)&unk_100256D30) - 8) + 64LL);
      uint64_t v64 = v85;
      uint64_t v65 = v86;
LABEL_20:
      memcpy(v64, v65, v63);
      goto LABEL_28;
    }

    sub_1000415CC((uint64_t)v45, type metadata accessor for IdmsTrustedDevicesVersion);
LABEL_19:
    size_t v63 = *(void *)(*(void *)(sub_100007578(&qword_100256D20) - 8) + 64LL);
    uint64_t v64 = v45;
    uint64_t v65 = v46;
    goto LABEL_20;
  }

  if (v51) {
    goto LABEL_19;
  }
  *(void *)uint64_t v45 = *(void *)v46;
  uint64_t v52 = *((void *)v46 + 1);
  *((void *)v45 + 1) = v52;
  uint64_t v53 = *(int *)(v47 + 20);
  uint64_t v54 = &v45[v53];
  uint64_t v55 = &v46[v53];
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
  swift_bridgeObjectRetain(v52);
  v56(v54, v55, v122);
  uint64_t v57 = *(int *)(v47 + 24);
  unint64_t v58 = &v45[v57];
  uint64_t v59 = &v46[v57];
  uint64_t v60 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1LL, v60))
  {
    uint64_t v62 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v58, v59, v60);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0LL, 1LL, v60);
  }

  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
LABEL_28:
  uint64_t v91 = a3[12];
  uint64_t v92 = (void *)((char *)a1 + v91);
  uint64_t v93 = (void *)((char *)a2 + v91);
  uint64_t v94 = type metadata accessor for Metrics(0LL);
  uint64_t v95 = *(void *)(v94 - 8);
  uint64_t v96 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v95 + 48);
  int v97 = v96(v92, 1LL, v94);
  int v98 = v96(v93, 1LL, v94);
  if (v97)
  {
    if (!v98)
    {
      *uint64_t v92 = *v93;
      uint64_t v99 = v93[1];
      v92[1] = v99;
      v92[2] = v93[2];
      uint64_t v100 = v93[3];
      v92[3] = v100;
      uint64_t v101 = *(int *)(v94 + 24);
      uint64_t v102 = (char *)v92 + v101;
      uint64_t v103 = (char *)v93 + v101;
      uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRetain(v100);
      v104(v102, v103, v122);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0LL, 1LL, v94);
      goto LABEL_34;
    }

    goto LABEL_33;
  }

  if (v98)
  {
    sub_1000415CC((uint64_t)v92, type metadata accessor for Metrics);
LABEL_33:
    uint64_t v105 = sub_100007578(&qword_100257000);
    memcpy(v92, v93, *(void *)(*(void *)(v105 - 8) + 64LL));
    goto LABEL_34;
  }

  *uint64_t v92 = *v93;
  uint64_t v116 = v93[1];
  uint64_t v117 = v92[1];
  v92[1] = v116;
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRelease(v117);
  v92[2] = v93[2];
  uint64_t v118 = v93[3];
  uint64_t v119 = v92[3];
  v92[3] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease(v119);
  ((void (*)(char *, char *, uint64_t))v120)( (char *)v92 + *(int *)(v94 + 24),  (char *)v93 + *(int *)(v94 + 24),  v122);
LABEL_34:
  uint64_t v106 = a3[13];
  uint64_t v107 = (_DWORD *)((char *)a1 + v106);
  uint64_t v108 = (_DWORD *)((char *)a2 + v106);
  uint64_t v109 = type metadata accessor for AccountInfo(0LL);
  uint64_t v110 = *(void *)(v109 - 8);
  unint64_t v111 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v110 + 48);
  int v112 = v111(v107, 1LL, v109);
  int v113 = v111(v108, 1LL, v109);
  if (!v112)
  {
    if (!v113)
    {
      *uint64_t v107 = *v108;
      ((void (*)(char *, char *, uint64_t))v120)( (char *)v107 + *(int *)(v109 + 20),  (char *)v108 + *(int *)(v109 + 20),  v122);
      return a1;
    }

    sub_1000415CC((uint64_t)v107, type metadata accessor for AccountInfo);
    goto LABEL_39;
  }

  if (v113)
  {
LABEL_39:
    uint64_t v114 = sub_100007578(&qword_100251F50);
    memcpy(v107, v108, *(void *)(*(void *)(v114 - 8) + 64LL));
    return a1;
  }

  *uint64_t v107 = *v108;
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))( (char *)v107 + *(int *)(v109 + 20),  (char *)v108 + *(int *)(v109 + 20),  v122);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0LL, 1LL, v109);
  return a1;
}

_OWORD *initializeWithTake for UpdateTrustRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[8];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[9];
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578(&qword_100251F18);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    __int128 v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v19 = a3[10];
  uint64_t v20 = (_OWORD *)((char *)a1 + v19);
  uint64_t v21 = (_OWORD *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100007578(&qword_100256CA0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    __int128 v25 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v25;
    v11((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  uint64_t v26 = a3[11];
  unint64_t v27 = (_OWORD *)((char *)a1 + v26);
  uint64_t v28 = (_OWORD *)((char *)a2 + v26);
  uint64_t v29 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100007578(&qword_100256D20);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    *unint64_t v27 = *v28;
    uint64_t v52 = v11;
    uint64_t v53 = v10;
    v11((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v10);
    uint64_t v32 = *(int *)(v29 + 24);
    uint64_t v33 = (char *)v27 + v32;
    uint64_t v34 = (char *)v28 + v32;
    uint64_t v35 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
    {
      uint64_t v37 = sub_100007578((uint64_t *)&unk_100256D30);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
    }

    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    uint64_t v11 = v52;
    uint64_t v10 = v53;
  }

  uint64_t v38 = a3[12];
  uint64_t v39 = (_OWORD *)((char *)a1 + v38);
  unint64_t v40 = (_OWORD *)((char *)a2 + v38);
  uint64_t v41 = type metadata accessor for Metrics(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v42 + 48))(v40, 1LL, v41))
  {
    uint64_t v43 = sub_100007578(&qword_100257000);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64LL));
  }

  else
  {
    __int128 v44 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v44;
    v11((char *)v39 + *(int *)(v41 + 24), (char *)v40 + *(int *)(v41 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0LL, 1LL, v41);
  }

  uint64_t v45 = a3[13];
  uint64_t v46 = (_DWORD *)((char *)a1 + v45);
  uint64_t v47 = (_DWORD *)((char *)a2 + v45);
  uint64_t v48 = type metadata accessor for AccountInfo(0LL);
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1LL, v48))
  {
    uint64_t v50 = sub_100007578(&qword_100251F50);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    *uint64_t v46 = *v47;
    v11((char *)v46 + *(int *)(v48 + 20), (char *)v47 + *(int *)(v48 + 20), v10);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0LL, 1LL, v48);
  }

  return a1;
}

void *assignWithTake for UpdateTrustRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v97 = *(void *)(v15 - 8);
  uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v97 + 40);
  v96(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v16;
  __int128 v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (v22)
  {
    if (!v23)
    {
      __int128 v24 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v24;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))( &v17[*(int *)(v19 + 24)],  &v18[*(int *)(v19 + 24)],  v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v23)
  {
    sub_1000415CC((uint64_t)v17, type metadata accessor for SignedPeerStableInfo);
LABEL_6:
    uint64_t v25 = sub_100007578(&qword_100251F18);
    memcpy(v17, v18, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v53 = *(void *)v17;
  unint64_t v54 = *((void *)v17 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  sub_10000852C(v53, v54);
  uint64_t v55 = *((void *)v17 + 2);
  unint64_t v56 = *((void *)v17 + 3);
  *((_OWORD *)v17 + 1) = *((_OWORD *)v18 + 1);
  sub_10000852C(v55, v56);
  v96(&v17[*(int *)(v19 + 24)], &v18[*(int *)(v19 + 24)], v15);
LABEL_7:
  uint64_t v26 = a3[10];
  unint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1LL, v29);
  int v33 = v31(v28, 1LL, v29);
  uint64_t v98 = v15;
  if (v32)
  {
    if (!v33)
    {
      __int128 v34 = *((_OWORD *)v28 + 1);
      *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v34;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))( &v27[*(int *)(v29 + 24)],  &v28[*(int *)(v29 + 24)],  v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v33)
  {
    sub_1000415CC((uint64_t)v27, type metadata accessor for SignedPeerDynamicInfo);
LABEL_12:
    uint64_t v35 = sub_100007578(&qword_100256CA0);
    memcpy(v27, v28, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v57 = *(void *)v27;
  unint64_t v58 = *((void *)v27 + 1);
  *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
  sub_10000852C(v57, v58);
  uint64_t v59 = *((void *)v27 + 2);
  unint64_t v60 = *((void *)v27 + 3);
  *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
  sub_10000852C(v59, v60);
  v96(&v27[*(int *)(v29 + 24)], &v28[*(int *)(v29 + 24)], v15);
LABEL_13:
  uint64_t v36 = a3[11];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1LL, v39);
  int v43 = v41(v38, 1LL, v39);
  if (!v42)
  {
    if (!v43)
    {
      uint64_t v61 = *((void *)v38 + 1);
      uint64_t v62 = *((void *)v37 + 1);
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = v61;
      swift_bridgeObjectRelease(v62);
      v96(&v37[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v98);
      uint64_t v63 = *(int *)(v39 + 24);
      uint64_t v64 = &v37[v63];
      uint64_t v65 = &v38[v63];
      uint64_t v66 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
      uint64_t v67 = *(void *)(v66 - 8);
      uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
      int v69 = v68(v64, 1LL, v66);
      int v70 = v68(v65, 1LL, v66);
      if (v69)
      {
        if (!v70)
        {
          (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0LL, 1LL, v66);
          goto LABEL_28;
        }
      }

      else
      {
        if (!v70)
        {
          (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v64, v65, v66);
          goto LABEL_28;
        }

        (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
      }

      size_t v50 = *(void *)(*(void *)(sub_100007578((uint64_t *)&unk_100256D30) - 8) + 64LL);
      int v51 = v64;
      uint64_t v52 = v65;
LABEL_20:
      memcpy(v51, v52, v50);
      goto LABEL_28;
    }

    sub_1000415CC((uint64_t)v37, type metadata accessor for IdmsTrustedDevicesVersion);
LABEL_19:
    size_t v50 = *(void *)(*(void *)(sub_100007578(&qword_100256D20) - 8) + 64LL);
    int v51 = v37;
    uint64_t v52 = v38;
    goto LABEL_20;
  }

  if (v43) {
    goto LABEL_19;
  }
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(&v37[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v98);
  uint64_t v44 = *(int *)(v39 + 24);
  uint64_t v45 = &v37[v44];
  uint64_t v46 = &v38[v44];
  uint64_t v47 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1LL, v47))
  {
    uint64_t v49 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
  }

  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
LABEL_28:
  uint64_t v71 = a3[12];
  uint64_t v72 = (void *)((char *)a1 + v71);
  unint64_t v73 = (void *)((char *)a2 + v71);
  uint64_t v74 = type metadata accessor for Metrics(0LL);
  uint64_t v75 = *(void *)(v74 - 8);
  uint64_t v76 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v75 + 48);
  int v77 = v76(v72, 1LL, v74);
  int v78 = v76(v73, 1LL, v74);
  if (v77)
  {
    if (!v78)
    {
      __int128 v79 = *((_OWORD *)v73 + 1);
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
      *((_OWORD *)v72 + 1) = v79;
      uint64_t v80 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))( (char *)v72 + *(int *)(v74 + 24),  (char *)v73 + *(int *)(v74 + 24),  v98);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0LL, 1LL, v74);
      goto LABEL_34;
    }

    goto LABEL_33;
  }

  if (v78)
  {
    sub_1000415CC((uint64_t)v72, type metadata accessor for Metrics);
LABEL_33:
    uint64_t v81 = sub_100007578(&qword_100257000);
    memcpy(v72, v73, *(void *)(*(void *)(v81 - 8) + 64LL));
    uint64_t v80 = v98;
    goto LABEL_34;
  }

  uint64_t v92 = v73[1];
  uint64_t v93 = v72[1];
  *uint64_t v72 = *v73;
  v72[1] = v92;
  swift_bridgeObjectRelease(v93);
  uint64_t v94 = v73[3];
  uint64_t v95 = v72[3];
  v72[2] = v73[2];
  v72[3] = v94;
  swift_bridgeObjectRelease(v95);
  uint64_t v80 = v98;
  v96((char *)v72 + *(int *)(v74 + 24), (char *)v73 + *(int *)(v74 + 24), v98);
LABEL_34:
  uint64_t v82 = a3[13];
  uint64_t v83 = (char *)a1 + v82;
  uint64_t v84 = (char *)a2 + v82;
  uint64_t v85 = type metadata accessor for AccountInfo(0LL);
  uint64_t v86 = *(void *)(v85 - 8);
  uint64_t v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 48);
  int v88 = v87(v83, 1LL, v85);
  int v89 = v87(v84, 1LL, v85);
  if (!v88)
  {
    if (!v89)
    {
      *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
      v96(&v83[*(int *)(v85 + 20)], &v84[*(int *)(v85 + 20)], v80);
      return a1;
    }

    sub_1000415CC((uint64_t)v83, type metadata accessor for AccountInfo);
    goto LABEL_39;
  }

  if (v89)
  {
LABEL_39:
    uint64_t v90 = sub_100007578(&qword_100251F50);
    memcpy(v83, v84, *(void *)(*(void *)(v90 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(&v83[*(int *)(v85 + 20)], &v84[*(int *)(v85 + 20)], v80);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0LL, 1LL, v85);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateTrustRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C84A8);
}

uint64_t sub_1000C84A8(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[8];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F18);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[9];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100256CA0);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a3[10];
        }

        else
        {
          uint64_t v14 = sub_100007578(&qword_100256D20);
          uint64_t v9 = *(void *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            uint64_t v10 = v14;
            uint64_t v11 = a3[11];
          }

          else
          {
            uint64_t v15 = sub_100007578(&qword_100257000);
            uint64_t v9 = *(void *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              uint64_t v10 = v15;
              uint64_t v11 = a3[12];
            }

            else
            {
              uint64_t v10 = sub_100007578(&qword_100251F50);
              uint64_t v9 = *(void *)(v10 - 8);
              uint64_t v11 = a3[13];
            }
          }
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for UpdateTrustRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C85F8);
}

uint64_t sub_1000C85F8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[8];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F18);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[9];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100256CA0);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a4[10];
        }

        else
        {
          uint64_t v14 = sub_100007578(&qword_100256D20);
          uint64_t v9 = *(void *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            uint64_t v10 = v14;
            uint64_t v11 = a4[11];
          }

          else
          {
            uint64_t v15 = sub_100007578(&qword_100257000);
            uint64_t v9 = *(void *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              uint64_t v10 = v15;
              uint64_t v11 = a4[12];
            }

            else
            {
              uint64_t v10 = sub_100007578(&qword_100251F50);
              uint64_t v9 = *(void *)(v10 - 8);
              uint64_t v11 = a4[13];
            }
          }
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000C8738(uint64_t a1)
{
  v14[0] = &unk_1001E6000;
  v14[1] = &unk_1001E6000;
  v14[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v14[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v14[4] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_100252F10, type metadata accessor for SignedPeerStableInfo);
    if (v5 <= 0x3F)
    {
      v14[5] = *(void *)(v4 - 8) + 64LL;
      sub_1000BCBD4(319LL, &qword_100252F18, type metadata accessor for SignedPeerDynamicInfo);
      if (v7 <= 0x3F)
      {
        v14[6] = *(void *)(v6 - 8) + 64LL;
        sub_1000BCBD4(319LL, (unint64_t *)&unk_100253B78, type metadata accessor for IdmsTrustedDevicesVersion);
        if (v9 <= 0x3F)
        {
          v14[7] = *(void *)(v8 - 8) + 64LL;
          sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
          if (v11 <= 0x3F)
          {
            void v14[8] = *(void *)(v10 - 8) + 64LL;
            sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
            if (v13 <= 0x3F)
            {
              v14[9] = *(void *)(v12 - 8) + 64LL;
              swift_initStructMetadata(a1, 256LL, 10LL, v14, a1 + 16);
            }
          }
        }
      }
    }
  }

uint64_t getEnumTagSinglePayload for UpdateTrustResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C88A4);
}

uint64_t storeEnumTagSinglePayload for UpdateTrustResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C88B4);
}

uint64_t *initializeBufferWithCopyOfBuffer for SetRecoveryKeyRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v26);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    sub_1000084E8(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[6];
    unint64_t v12 = a2[7];
    sub_1000084E8(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    uint64_t v13 = a2[8];
    uint64_t v14 = a2[9];
    a1[8] = v13;
    a1[9] = v14;
    uint64_t v15 = a3[10];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    v19(v16, v17, v18);
    uint64_t v20 = a3[11];
    uint64_t v21 = (uint64_t *)((char *)a1 + v20);
    int v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = type metadata accessor for SignedPeerStableInfo(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_100007578(&qword_100251F18);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      uint64_t v52 = v18;
      unint64_t v27 = v19;
      uint64_t v28 = *v22;
      unint64_t v29 = v22[1];
      sub_1000084E8(*v22, v29);
      void *v21 = v28;
      v21[1] = v29;
      uint64_t v30 = v22[2];
      unint64_t v31 = v22[3];
      sub_1000084E8(v30, v31);
      v21[2] = v30;
      v21[3] = v31;
      uint64_t v19 = v27;
      uint64_t v18 = v52;
      v19((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
    }

    uint64_t v32 = a3[12];
    int v33 = (uint64_t *)((char *)a1 + v32);
    __int128 v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = type metadata accessor for Metrics(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
    {
      uint64_t v37 = sub_100007578(&qword_100257000);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    }

    else
    {
      uint64_t v38 = v34[1];
      *int v33 = *v34;
      v33[1] = v38;
      uint64_t v39 = v34[3];
      v33[2] = v34[2];
      v33[3] = v39;
      uint64_t v40 = *(int *)(v35 + 24);
      uint64_t v53 = v18;
      uint64_t v41 = v19;
      int v42 = (char *)v33 + v40;
      int v43 = (char *)v34 + v40;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      uint64_t v44 = v42;
      uint64_t v19 = v41;
      uint64_t v18 = v53;
      v19(v44, v43, v53);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
    }

    uint64_t v45 = a3[13];
    uint64_t v46 = (_DWORD *)((char *)a1 + v45);
    uint64_t v47 = (_DWORD *)((char *)a2 + v45);
    uint64_t v48 = type metadata accessor for AccountInfo(0LL);
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1LL, v48))
    {
      uint64_t v50 = sub_100007578(&qword_100251F50);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64LL));
    }

    else
    {
      *uint64_t v46 = *v47;
      v19((char *)v46 + *(int *)(v48 + 20), (char *)v47 + *(int *)(v48 + 20), v18);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0LL, 1LL, v48);
    }
  }

  return a1;
}

uint64_t destroy for SetRecoveryKeyRequest(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[10];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v13(v4, v5);
  uint64_t v6 = (char *)a1 + a2[11];
  uint64_t v7 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    sub_10000852C(*(void *)v6, *((void *)v6 + 1));
    sub_10000852C(*((void *)v6 + 2), *((void *)v6 + 3));
    v13(&v6[*(int *)(v7 + 24)], v5);
  }

  uint64_t v8 = (char *)a1 + a2[12];
  uint64_t v9 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    swift_bridgeObjectRelease(*((void *)v8 + 1));
    swift_bridgeObjectRelease(*((void *)v8 + 3));
    v13(&v8[*(int *)(v9 + 24)], v5);
  }

  unint64_t v10 = (char *)a1 + a2[13];
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v13)(&v10[*(int *)(v11 + 20)], v5);
  }
  return result;
}

void *initializeWithCopy for SetRecoveryKeyRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_1000084E8(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_1000084E8(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = a2[8];
  uint64_t v13 = a2[9];
  a1[8] = v12;
  a1[9] = v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  v18(v15, v16, v17);
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100007578(&qword_100251F18);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    uint64_t v51 = v17;
    uint64_t v25 = v18;
    uint64_t v26 = *v21;
    unint64_t v27 = v21[1];
    sub_1000084E8(*v21, v27);
    *uint64_t v20 = v26;
    v20[1] = v27;
    uint64_t v28 = v21[2];
    unint64_t v29 = v21[3];
    sub_1000084E8(v28, v29);
    v20[2] = v28;
    v20[3] = v29;
    uint64_t v18 = v25;
    uint64_t v17 = v51;
    v18((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v51);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  uint64_t v30 = a3[12];
  unint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v33 = type metadata accessor for Metrics(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = sub_100007578(&qword_100257000);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    uint64_t v36 = v32[1];
    *unint64_t v31 = *v32;
    v31[1] = v36;
    uint64_t v37 = v32[3];
    v31[2] = v32[2];
    v31[3] = v37;
    uint64_t v38 = *(int *)(v33 + 24);
    uint64_t v52 = a3;
    uint64_t v39 = v17;
    uint64_t v40 = v18;
    uint64_t v41 = (char *)v31 + v38;
    int v42 = (char *)v32 + v38;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    int v43 = v41;
    uint64_t v18 = v40;
    uint64_t v17 = v39;
    a3 = v52;
    v18(v43, v42, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  uint64_t v44 = a3[13];
  uint64_t v45 = (_DWORD *)((char *)a1 + v44);
  uint64_t v46 = (_DWORD *)((char *)a2 + v44);
  uint64_t v47 = type metadata accessor for AccountInfo(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1LL, v47))
  {
    uint64_t v49 = sub_100007578(&qword_100251F50);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    *uint64_t v45 = *v46;
    v18((char *)v45 + *(int *)(v47 + 20), (char *)v46 + *(int *)(v47 + 20), v17);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
  }

  return a1;
}

void *assignWithCopy for SetRecoveryKeyRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000084E8(v10, v11);
  uint64_t v12 = a1[4];
  unint64_t v13 = a1[5];
  a1[4] = v10;
  a1[5] = v11;
  sub_10000852C(v12, v13);
  uint64_t v14 = a2[6];
  unint64_t v15 = a2[7];
  sub_1000084E8(v14, v15);
  uint64_t v16 = a1[6];
  unint64_t v17 = a1[7];
  a1[6] = v14;
  a1[7] = v15;
  sub_10000852C(v16, v17);
  uint64_t v18 = a2[8];
  uint64_t v19 = a1[8];
  a1[8] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a2[9];
  uint64_t v21 = a1[9];
  a1[9] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[10];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v78 = *(void *)(v25 - 8);
  uint64_t v79 = v25;
  uint64_t v26 = *(void (**)(char *, char *))(v78 + 24);
  v26(v23, v24);
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)((char *)a1 + v27);
  unint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1LL, v30);
  int v34 = v32(v29, 1LL, v30);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = *v29;
      unint64_t v36 = v29[1];
      sub_1000084E8(*v29, v36);
      *uint64_t v28 = v35;
      v28[1] = v36;
      uint64_t v37 = v29[2];
      unint64_t v38 = v29[3];
      sub_1000084E8(v37, v38);
      v28[2] = v37;
      v28[3] = v38;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))( (char *)v28 + *(int *)(v30 + 24),  (char *)v29 + *(int *)(v30 + 24),  v79);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v34)
  {
    sub_1000415CC((uint64_t)v28, type metadata accessor for SignedPeerStableInfo);
LABEL_6:
    uint64_t v39 = sub_100007578(&qword_100251F18);
    memcpy(v28, v29, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v65 = *v29;
  unint64_t v66 = v29[1];
  sub_1000084E8(*v29, v66);
  uint64_t v67 = *v28;
  unint64_t v68 = v28[1];
  *uint64_t v28 = v65;
  v28[1] = v66;
  sub_10000852C(v67, v68);
  uint64_t v69 = v29[2];
  unint64_t v70 = v29[3];
  sub_1000084E8(v69, v70);
  uint64_t v71 = v28[2];
  unint64_t v72 = v28[3];
  v28[2] = v69;
  v28[3] = v70;
  sub_10000852C(v71, v72);
  ((void (*)(char *, char *, uint64_t))v26)( (char *)v28 + *(int *)(v30 + 24),  (char *)v29 + *(int *)(v30 + 24),  v79);
LABEL_7:
  uint64_t v40 = a3[12];
  uint64_t v41 = (void *)((char *)a1 + v40);
  int v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = type metadata accessor for Metrics(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1LL, v43);
  int v47 = v45(v42, 1LL, v43);
  int v77 = (void (*)(char *, char *, uint64_t))v26;
  if (v46)
  {
    if (!v47)
    {
      *uint64_t v41 = *v42;
      uint64_t v48 = v42[1];
      v41[1] = v48;
      v41[2] = v42[2];
      uint64_t v49 = v42[3];
      v41[3] = v49;
      uint64_t v50 = *(int *)(v43 + 24);
      uint64_t v51 = (char *)v41 + v50;
      uint64_t v52 = (char *)v42 + v50;
      uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      v53(v51, v52, v79);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v47)
  {
    sub_1000415CC((uint64_t)v41, type metadata accessor for Metrics);
LABEL_12:
    uint64_t v54 = sub_100007578(&qword_100257000);
    memcpy(v41, v42, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_13;
  }

  *uint64_t v41 = *v42;
  uint64_t v73 = v42[1];
  uint64_t v74 = v41[1];
  v41[1] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v41[2] = v42[2];
  uint64_t v75 = v42[3];
  uint64_t v76 = v41[3];
  v41[3] = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  ((void (*)(char *, char *, uint64_t))v26)( (char *)v41 + *(int *)(v43 + 24),  (char *)v42 + *(int *)(v43 + 24),  v79);
LABEL_13:
  uint64_t v55 = a3[13];
  unint64_t v56 = (char *)a1 + v55;
  uint64_t v57 = (char *)a2 + v55;
  uint64_t v58 = type metadata accessor for AccountInfo(0LL);
  uint64_t v59 = *(void *)(v58 - 8);
  unint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  int v61 = v60(v56, 1LL, v58);
  int v62 = v60(v57, 1LL, v58);
  if (!v61)
  {
    if (!v62)
    {
      *(_DWORD *)unint64_t v56 = *(_DWORD *)v57;
      v77(&v56[*(int *)(v58 + 20)], &v57[*(int *)(v58 + 20)], v79);
      return a1;
    }

    sub_1000415CC((uint64_t)v56, type metadata accessor for AccountInfo);
    goto LABEL_18;
  }

  if (v62)
  {
LABEL_18:
    uint64_t v63 = sub_100007578(&qword_100251F50);
    memcpy(v56, v57, *(void *)(*(void *)(v63 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)unint64_t v56 = *(_DWORD *)v57;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(&v56[*(int *)(v58 + 20)], &v57[*(int *)(v58 + 20)], v79);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0LL, 1LL, v58);
  return a1;
}

_OWORD *initializeWithTake for SetRecoveryKeyRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  __int128 v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = a3[10];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL);
  v12(v9, v10, v11);
  uint64_t v13 = a3[11];
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  unint64_t v15 = (_OWORD *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578(&qword_100251F18);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    __int128 v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v20 = a3[12];
  uint64_t v21 = (_OWORD *)((char *)a1 + v20);
  uint64_t v22 = (_OWORD *)((char *)a2 + v20);
  uint64_t v23 = type metadata accessor for Metrics(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100007578(&qword_100257000);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    __int128 v26 = v22[1];
    _OWORD *v21 = *v22;
    v21[1] = v26;
    v12((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  uint64_t v27 = a3[13];
  uint64_t v28 = (_DWORD *)((char *)a1 + v27);
  unint64_t v29 = (_DWORD *)((char *)a2 + v27);
  uint64_t v30 = type metadata accessor for AccountInfo(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
  {
    uint64_t v32 = sub_100007578(&qword_100251F50);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    *uint64_t v28 = *v29;
    v12((char *)v28 + *(int *)(v30 + 20), (char *)v29 + *(int *)(v30 + 20), v11);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  }

  return a1;
}

void *assignWithTake for SetRecoveryKeyRequest(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10000852C(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10000852C(v12, v13);
  uint64_t v14 = a1[8];
  a1[8] = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a1[9];
  a1[9] = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v59 = *(void *)(v19 - 8);
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 40);
  v58(v17, v18, v19);
  uint64_t v20 = a3[11];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1LL, v23);
  int v27 = v25(v22, 1LL, v23);
  if (v26)
  {
    if (!v27)
    {
      __int128 v28 = *((_OWORD *)v22 + 1);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v28;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))( &v21[*(int *)(v23 + 24)],  &v22[*(int *)(v23 + 24)],  v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v27)
  {
    sub_1000415CC((uint64_t)v21, type metadata accessor for SignedPeerStableInfo);
LABEL_6:
    uint64_t v29 = sub_100007578(&qword_100251F18);
    memcpy(v21, v22, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v50 = *(void *)v21;
  unint64_t v51 = *((void *)v21 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  sub_10000852C(v50, v51);
  uint64_t v52 = *((void *)v21 + 2);
  unint64_t v53 = *((void *)v21 + 3);
  *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
  sub_10000852C(v52, v53);
  v58(&v21[*(int *)(v23 + 24)], (uint64_t)&v22[*(int *)(v23 + 24)], v19);
LABEL_7:
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = type metadata accessor for Metrics(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1LL, v33);
  int v37 = v35(v32, 1LL, v33);
  if (v36)
  {
    if (!v37)
    {
      __int128 v38 = *((_OWORD *)v32 + 1);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v38;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))( (char *)v31 + *(int *)(v33 + 24),  (char *)v32 + *(int *)(v33 + 24),  v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v37)
  {
    sub_1000415CC((uint64_t)v31, type metadata accessor for Metrics);
LABEL_12:
    uint64_t v39 = sub_100007578(&qword_100257000);
    memcpy(v31, v32, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v54 = v32[1];
  uint64_t v55 = v31[1];
  *uint64_t v31 = *v32;
  v31[1] = v54;
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = v32[3];
  uint64_t v57 = v31[3];
  v31[2] = v32[2];
  v31[3] = v56;
  swift_bridgeObjectRelease(v57);
  v58((char *)v31 + *(int *)(v33 + 24), (uint64_t)v32 + *(int *)(v33 + 24), v19);
LABEL_13:
  uint64_t v40 = a3[13];
  uint64_t v41 = (char *)a1 + v40;
  int v42 = (char *)(a2 + v40);
  uint64_t v43 = type metadata accessor for AccountInfo(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1LL, v43);
  int v47 = v45(v42, 1LL, v43);
  if (!v46)
  {
    if (!v47)
    {
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      v58(&v41[*(int *)(v43 + 20)], (uint64_t)&v42[*(int *)(v43 + 20)], v19);
      return a1;
    }

    sub_1000415CC((uint64_t)v41, type metadata accessor for AccountInfo);
    goto LABEL_18;
  }

  if (v47)
  {
LABEL_18:
    uint64_t v48 = sub_100007578(&qword_100251F50);
    memcpy(v41, v42, *(void *)(*(void *)(v48 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(&v41[*(int *)(v43 + 20)], &v42[*(int *)(v43 + 20)], v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetRecoveryKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C9AB8);
}

uint64_t sub_1000C9AB8(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[10];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F18);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[11];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100257000);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a3[12];
        }

        else
        {
          uint64_t v10 = sub_100007578(&qword_100251F50);
          uint64_t v9 = *(void *)(v10 - 8);
          uint64_t v11 = a3[13];
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for SetRecoveryKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C9BB8);
}

uint64_t sub_1000C9BB8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[10];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F18);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[11];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100257000);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a4[12];
        }

        else
        {
          uint64_t v10 = sub_100007578(&qword_100251F50);
          uint64_t v9 = *(void *)(v10 - 8);
          uint64_t v11 = a4[13];
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000C9CA8(uint64_t a1)
{
  v10[0] = &unk_1001E6000;
  v10[1] = &unk_1001E6000;
  v10[2] = &unk_1001E5FD8;
  v10[3] = &unk_1001E5FD8;
  v10[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v10[6] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_100252F10, type metadata accessor for SignedPeerStableInfo);
    if (v5 <= 0x3F)
    {
      v10[7] = *(void *)(v4 - 8) + 64LL;
      sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
      if (v7 <= 0x3F)
      {
        v10[8] = *(void *)(v6 - 8) + 64LL;
        sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
        if (v9 <= 0x3F)
        {
          v10[9] = *(void *)(v8 - 8) + 64LL;
          swift_initStructMetadata(a1, 256LL, 10LL, v10, a1 + 16);
        }
      }
    }
  }

uint64_t getEnumTagSinglePayload for SetRecoveryKeyResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C9DC8);
}

uint64_t storeEnumTagSinglePayload for SetRecoveryKeyResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C9DD8);
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoveRecoveryKeyRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for SignedPeerStableInfo(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v57 = v12;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100007578(&qword_100251F18);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v21 = v13;
      uint64_t v22 = *v16;
      unint64_t v23 = v16[1];
      sub_1000084E8(*v16, v23);
      *uint64_t v15 = v22;
      v15[1] = v23;
      uint64_t v24 = v16[2];
      unint64_t v25 = v16[3];
      sub_1000084E8(v24, v25);
      v15[2] = v24;
      v15[3] = v25;
      uint64_t v13 = v21;
      uint64_t v12 = v57;
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v57);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }

    uint64_t v26 = a3[8];
    int v27 = (uint64_t *)((char *)v4 + v26);
    __int128 v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
    {
      uint64_t v31 = sub_100007578(&qword_100256CA0);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = *v28;
      unint64_t v34 = v28[1];
      sub_1000084E8(*v28, v34);
      *int v27 = v33;
      v27[1] = v34;
      uint64_t v35 = v28[2];
      unint64_t v36 = v28[3];
      sub_1000084E8(v35, v36);
      v27[2] = v35;
      v27[3] = v36;
      uint64_t v13 = v32;
      uint64_t v12 = v57;
      v13((char *)v27 + *(int *)(v29 + 24), (char *)v28 + *(int *)(v29 + 24), v57);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    }

    uint64_t v37 = a3[9];
    __int128 v38 = (uint64_t *)((char *)v4 + v37);
    uint64_t v39 = (uint64_t *)((char *)a2 + v37);
    uint64_t v40 = type metadata accessor for Metrics(0LL);
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
    {
      uint64_t v42 = sub_100007578(&qword_100257000);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      uint64_t v43 = v39[1];
      *__int128 v38 = *v39;
      v38[1] = v43;
      uint64_t v44 = v39[3];
      v38[2] = v39[2];
      v38[3] = v44;
      uint64_t v45 = *(int *)(v40 + 24);
      int v46 = v13;
      int v47 = (char *)v38 + v45;
      uint64_t v48 = (char *)v39 + v45;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v44);
      uint64_t v49 = v47;
      uint64_t v13 = v46;
      uint64_t v12 = v57;
      v13(v49, v48, v57);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
    }

    uint64_t v50 = a3[10];
    unint64_t v51 = (_DWORD *)((char *)v4 + v50);
    uint64_t v52 = (_DWORD *)((char *)a2 + v50);
    uint64_t v53 = type metadata accessor for AccountInfo(0LL);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1LL, v53))
    {
      uint64_t v55 = sub_100007578(&qword_100251F50);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      *unint64_t v51 = *v52;
      v13((char *)v51 + *(int *)(v53 + 20), (char *)v52 + *(int *)(v53 + 20), v12);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0LL, 1LL, v53);
    }
  }

  return v4;
}

uint64_t destroy for RemoveRecoveryKeyRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v15(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    sub_10000852C(*(void *)v6, *(void *)(v6 + 8));
    sub_10000852C(*(void *)(v6 + 16), *(void *)(v6 + 24));
    v15(v6 + *(int *)(v7 + 24), v5);
  }

  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    sub_10000852C(*(void *)v8, *(void *)(v8 + 8));
    sub_10000852C(*(void *)(v8 + 16), *(void *)(v8 + 24));
    v15(v8 + *(int *)(v9 + 24), v5);
  }

  uint64_t v10 = a1 + a2[9];
  uint64_t v11 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    swift_bridgeObjectRelease(*(void *)(v10 + 8));
    swift_bridgeObjectRelease(*(void *)(v10 + 24));
    v15(v10 + *(int *)(v11 + 24), v5);
  }

  uint64_t v12 = a1 + a2[10];
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v12 + *(int *)(v13 + 20), v5);
  }
  return result;
}

void *initializeWithCopy for RemoveRecoveryKeyRequest(void *a1, void *a2, int *a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = v3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578(&qword_100251F18);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v56 = v11;
    uint64_t v19 = v12;
    uint64_t v20 = *v15;
    unint64_t v21 = v15[1];
    sub_1000084E8(*v15, v21);
    *uint64_t v14 = v20;
    v14[1] = v21;
    uint64_t v22 = v15[2];
    unint64_t v23 = v15[3];
    sub_1000084E8(v22, v23);
    v14[2] = v22;
    v14[3] = v23;
    uint64_t v12 = v19;
    uint64_t v11 = v56;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v56);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v24 = v3[8];
  unint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v27 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_100007578(&qword_100256CA0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    uint64_t v57 = v11;
    uint64_t v30 = v12;
    uint64_t v31 = *v26;
    unint64_t v32 = v26[1];
    sub_1000084E8(*v26, v32);
    *unint64_t v25 = v31;
    v25[1] = v32;
    uint64_t v33 = v26[2];
    unint64_t v34 = v26[3];
    sub_1000084E8(v33, v34);
    v25[2] = v33;
    v25[3] = v34;
    uint64_t v12 = v30;
    uint64_t v11 = v57;
    v12((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v57);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  }

  uint64_t v35 = v3[9];
  unint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  uint64_t v38 = type metadata accessor for Metrics(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48))(v37, 1LL, v38))
  {
    uint64_t v40 = sub_100007578(&qword_100257000);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    uint64_t v41 = v37[1];
    *unint64_t v36 = *v37;
    v36[1] = v41;
    uint64_t v42 = v37[3];
    v36[2] = v37[2];
    v36[3] = v42;
    uint64_t v43 = *(int *)(v38 + 24);
    uint64_t v58 = v3;
    uint64_t v44 = v11;
    uint64_t v45 = v12;
    int v46 = (char *)v36 + v43;
    int v47 = (char *)v37 + v43;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    uint64_t v48 = v46;
    uint64_t v12 = v45;
    uint64_t v11 = v44;
    unint64_t v3 = v58;
    v12(v48, v47, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
  }

  uint64_t v49 = v3[10];
  uint64_t v50 = (_DWORD *)((char *)a1 + v49);
  unint64_t v51 = (_DWORD *)((char *)a2 + v49);
  uint64_t v52 = type metadata accessor for AccountInfo(0LL);
  uint64_t v53 = *(void *)(v52 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1LL, v52))
  {
    uint64_t v54 = sub_100007578(&qword_100251F50);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    _DWORD *v50 = *v51;
    v12((char *)v50 + *(int *)(v52 + 20), (char *)v51 + *(int *)(v52 + 20), v11);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0LL, 1LL, v52);
  }

  return a1;
}

void *assignWithCopy for RemoveRecoveryKeyRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v88 = *(void *)(v13 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v88 + 24);
  v14(v11, v12, v13);
  int v89 = a3;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1LL, v18);
  int v22 = v20(v17, 1LL, v18);
  if (v21)
  {
    if (!v22)
    {
      uint64_t v23 = *v17;
      unint64_t v24 = v17[1];
      sub_1000084E8(*v17, v24);
      uint64_t *v16 = v23;
      v16[1] = v24;
      uint64_t v25 = v17[2];
      unint64_t v26 = v17[3];
      sub_1000084E8(v25, v26);
      v16[2] = v25;
      v16[3] = v26;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))( (char *)v16 + *(int *)(v18 + 24),  (char *)v17 + *(int *)(v18 + 24),  v13);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v22)
  {
    sub_1000415CC((uint64_t)v16, type metadata accessor for SignedPeerStableInfo);
LABEL_6:
    uint64_t v27 = sub_100007578(&qword_100251F18);
    memcpy(v16, v17, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v67 = *v17;
  unint64_t v68 = v17[1];
  sub_1000084E8(*v17, v68);
  uint64_t v69 = *v16;
  unint64_t v70 = v16[1];
  uint64_t *v16 = v67;
  v16[1] = v68;
  sub_10000852C(v69, v70);
  uint64_t v71 = v17[2];
  unint64_t v72 = v17[3];
  sub_1000084E8(v71, v72);
  uint64_t v73 = v16[2];
  unint64_t v74 = v16[3];
  v16[2] = v71;
  v16[3] = v72;
  sub_10000852C(v73, v74);
  v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
LABEL_7:
  uint64_t v28 = v89[8];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v31 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (v34)
  {
    if (!v35)
    {
      uint64_t v36 = *v30;
      unint64_t v37 = v30[1];
      sub_1000084E8(*v30, v37);
      *uint64_t v29 = v36;
      v29[1] = v37;
      uint64_t v38 = v30[2];
      unint64_t v39 = v30[3];
      sub_1000084E8(v38, v39);
      v29[2] = v38;
      v29[3] = v39;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))( (char *)v29 + *(int *)(v31 + 24),  (char *)v30 + *(int *)(v31 + 24),  v13);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v35)
  {
    sub_1000415CC((uint64_t)v29, type metadata accessor for SignedPeerDynamicInfo);
LABEL_12:
    uint64_t v40 = sub_100007578(&qword_100256CA0);
    memcpy(v29, v30, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v75 = *v30;
  unint64_t v76 = v30[1];
  sub_1000084E8(*v30, v76);
  uint64_t v77 = *v29;
  unint64_t v78 = v29[1];
  *uint64_t v29 = v75;
  v29[1] = v76;
  sub_10000852C(v77, v78);
  uint64_t v79 = v30[2];
  unint64_t v80 = v30[3];
  sub_1000084E8(v79, v80);
  uint64_t v81 = v29[2];
  unint64_t v82 = v29[3];
  v29[2] = v79;
  v29[3] = v80;
  sub_10000852C(v81, v82);
  v14((char *)v29 + *(int *)(v31 + 24), (char *)v30 + *(int *)(v31 + 24), v13);
LABEL_13:
  uint64_t v41 = v89[9];
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v44 = type metadata accessor for Metrics(0LL);
  uint64_t v45 = *(void *)(v44 - 8);
  int v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1LL, v44);
  int v48 = v46(v43, 1LL, v44);
  uint64_t v87 = v14;
  if (v47)
  {
    uint64_t v49 = v13;
    if (!v48)
    {
      void *v42 = *v43;
      uint64_t v50 = v43[1];
      v42[1] = v50;
      v42[2] = v43[2];
      uint64_t v51 = v43[3];
      v42[3] = v51;
      uint64_t v52 = *(int *)(v44 + 24);
      uint64_t v53 = (char *)v42 + v52;
      uint64_t v54 = (char *)v43 + v52;
      uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v51);
      v55(v53, v54, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0LL, 1LL, v44);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v48)
  {
    uint64_t v49 = v13;
    sub_1000415CC((uint64_t)v42, type metadata accessor for Metrics);
LABEL_18:
    uint64_t v56 = sub_100007578(&qword_100257000);
    memcpy(v42, v43, *(void *)(*(void *)(v56 - 8) + 64LL));
    goto LABEL_19;
  }

  void *v42 = *v43;
  uint64_t v83 = v43[1];
  uint64_t v84 = v42[1];
  v42[1] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  v42[2] = v43[2];
  uint64_t v85 = v43[3];
  uint64_t v86 = v42[3];
  v42[3] = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  uint64_t v49 = v13;
  v14((char *)v42 + *(int *)(v44 + 24), (char *)v43 + *(int *)(v44 + 24), v13);
LABEL_19:
  uint64_t v57 = v89[10];
  uint64_t v58 = (char *)a1 + v57;
  uint64_t v59 = (char *)a2 + v57;
  uint64_t v60 = type metadata accessor for AccountInfo(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  int v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v58, 1LL, v60);
  int v64 = v62(v59, 1LL, v60);
  if (!v63)
  {
    if (!v64)
    {
      *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
      v87(&v58[*(int *)(v60 + 20)], &v59[*(int *)(v60 + 20)], v49);
      return a1;
    }

    sub_1000415CC((uint64_t)v58, type metadata accessor for AccountInfo);
    goto LABEL_24;
  }

  if (v64)
  {
LABEL_24:
    uint64_t v65 = sub_100007578(&qword_100251F50);
    memcpy(v58, v59, *(void *)(*(void *)(v65 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(&v58[*(int *)(v60 + 20)], &v59[*(int *)(v60 + 20)], v49);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0LL, 1LL, v60);
  return a1;
}

_OWORD *initializeWithTake for RemoveRecoveryKeyRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578(&qword_100251F18);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    __int128 v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v19 = a3[8];
  uint64_t v20 = (_OWORD *)((char *)a1 + v19);
  int v21 = (_OWORD *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100007578(&qword_100256CA0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    __int128 v25 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v25;
    v11((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  uint64_t v26 = a3[9];
  uint64_t v27 = (_OWORD *)((char *)a1 + v26);
  uint64_t v28 = (_OWORD *)((char *)a2 + v26);
  uint64_t v29 = type metadata accessor for Metrics(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100007578(&qword_100257000);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    __int128 v32 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v32;
    v11((char *)v27 + *(int *)(v29 + 24), (char *)v28 + *(int *)(v29 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  uint64_t v33 = a3[10];
  int v34 = (_DWORD *)((char *)a1 + v33);
  int v35 = (_DWORD *)((char *)a2 + v33);
  uint64_t v36 = type metadata accessor for AccountInfo(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1LL, v36))
  {
    uint64_t v38 = sub_100007578(&qword_100251F50);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    _DWORD *v34 = *v35;
    v11((char *)v34 + *(int *)(v36 + 20), (char *)v35 + *(int *)(v36 + 20), v10);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
  }

  return a1;
}

void *assignWithTake for RemoveRecoveryKeyRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v67 = *(void *)(v13 - 8);
  unint64_t v66 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
  v66(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      __int128 v22 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v22;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))( &v15[*(int *)(v17 + 24)],  &v16[*(int *)(v17 + 24)],  v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_1000415CC((uint64_t)v15, type metadata accessor for SignedPeerStableInfo);
LABEL_6:
    uint64_t v23 = sub_100007578(&qword_100251F18);
    memcpy(v15, v16, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v54 = *(void *)v15;
  unint64_t v55 = *((void *)v15 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  sub_10000852C(v54, v55);
  uint64_t v56 = *((void *)v15 + 2);
  unint64_t v57 = *((void *)v15 + 3);
  *((_OWORD *)v15 + 1) = *((_OWORD *)v16 + 1);
  sub_10000852C(v56, v57);
  v66(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v13);
LABEL_7:
  uint64_t v24 = a3[8];
  __int128 v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1LL, v27);
  int v31 = v29(v26, 1LL, v27);
  if (v30)
  {
    if (!v31)
    {
      __int128 v32 = *((_OWORD *)v26 + 1);
      *(_OWORD *)__int128 v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v32;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))( &v25[*(int *)(v27 + 24)],  &v26[*(int *)(v27 + 24)],  v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v31)
  {
    sub_1000415CC((uint64_t)v25, type metadata accessor for SignedPeerDynamicInfo);
LABEL_12:
    uint64_t v33 = sub_100007578(&qword_100256CA0);
    memcpy(v25, v26, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v58 = *(void *)v25;
  unint64_t v59 = *((void *)v25 + 1);
  *(_OWORD *)__int128 v25 = *(_OWORD *)v26;
  sub_10000852C(v58, v59);
  uint64_t v60 = *((void *)v25 + 2);
  unint64_t v61 = *((void *)v25 + 3);
  *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
  sub_10000852C(v60, v61);
  v66(&v25[*(int *)(v27 + 24)], &v26[*(int *)(v27 + 24)], v13);
LABEL_13:
  uint64_t v34 = a3[9];
  int v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v37 = type metadata accessor for Metrics(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  unint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1LL, v37);
  int v41 = v39(v36, 1LL, v37);
  if (v40)
  {
    if (!v41)
    {
      __int128 v42 = *((_OWORD *)v36 + 1);
      *(_OWORD *)int v35 = *(_OWORD *)v36;
      *((_OWORD *)v35 + 1) = v42;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))( (char *)v35 + *(int *)(v37 + 24),  (char *)v36 + *(int *)(v37 + 24),  v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v41)
  {
    sub_1000415CC((uint64_t)v35, type metadata accessor for Metrics);
LABEL_18:
    uint64_t v43 = sub_100007578(&qword_100257000);
    memcpy(v35, v36, *(void *)(*(void *)(v43 - 8) + 64LL));
    goto LABEL_19;
  }

  uint64_t v62 = v36[1];
  uint64_t v63 = v35[1];
  void *v35 = *v36;
  v35[1] = v62;
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = v36[3];
  uint64_t v65 = v35[3];
  v35[2] = v36[2];
  v35[3] = v64;
  swift_bridgeObjectRelease(v65);
  v66((char *)v35 + *(int *)(v37 + 24), (char *)v36 + *(int *)(v37 + 24), v13);
LABEL_19:
  uint64_t v44 = a3[10];
  uint64_t v45 = (char *)a1 + v44;
  int v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for AccountInfo(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1LL, v47);
  int v51 = v49(v46, 1LL, v47);
  if (!v50)
  {
    if (!v51)
    {
      *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
      v66(&v45[*(int *)(v47 + 20)], &v46[*(int *)(v47 + 20)], v13);
      return a1;
    }

    sub_1000415CC((uint64_t)v45, type metadata accessor for AccountInfo);
    goto LABEL_24;
  }

  if (v51)
  {
LABEL_24:
    uint64_t v52 = sub_100007578(&qword_100251F50);
    memcpy(v45, v46, *(void *)(*(void *)(v52 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v45[*(int *)(v47 + 20)], &v46[*(int *)(v47 + 20)], v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveRecoveryKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CB330);
}

uint64_t sub_1000CB330(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F18);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100256CA0);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a3[8];
        }

        else
        {
          uint64_t v14 = sub_100007578(&qword_100257000);
          uint64_t v9 = *(void *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            uint64_t v10 = v14;
            uint64_t v11 = a3[9];
          }

          else
          {
            uint64_t v10 = sub_100007578(&qword_100251F50);
            uint64_t v9 = *(void *)(v10 - 8);
            uint64_t v11 = a3[10];
          }
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for RemoveRecoveryKeyRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CB458);
}

uint64_t sub_1000CB458(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F18);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v13 = sub_100007578(&qword_100256CA0);
        uint64_t v9 = *(void *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          uint64_t v10 = v13;
          uint64_t v11 = a4[8];
        }

        else
        {
          uint64_t v14 = sub_100007578(&qword_100257000);
          uint64_t v9 = *(void *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            uint64_t v10 = v14;
            uint64_t v11 = a4[9];
          }

          else
          {
            uint64_t v10 = sub_100007578(&qword_100251F50);
            uint64_t v9 = *(void *)(v10 - 8);
            uint64_t v11 = a4[10];
          }
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000CB570(uint64_t a1)
{
  v12[0] = &unk_1001E6000;
  v12[1] = &unk_1001E6000;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v12[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_100252F10, type metadata accessor for SignedPeerStableInfo);
    if (v5 <= 0x3F)
    {
      v12[3] = *(void *)(v4 - 8) + 64LL;
      sub_1000BCBD4(319LL, &qword_100252F18, type metadata accessor for SignedPeerDynamicInfo);
      if (v7 <= 0x3F)
      {
        v12[4] = *(void *)(v6 - 8) + 64LL;
        sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
        if (v9 <= 0x3F)
        {
          v12[5] = *(void *)(v8 - 8) + 64LL;
          sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
          if (v11 <= 0x3F)
          {
            v12[6] = *(void *)(v10 - 8) + 64LL;
            swift_initStructMetadata(a1, 256LL, 7LL, v12, a1 + 16);
          }
        }
      }
    }
  }

uint64_t *_s18TrustedPeersHelper13ResetResponseVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    unint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for Changes(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100007578((uint64_t *)&unk_100256C90);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v16 = v11[1];
      *uint64_t v10 = *v11;
      v10[1] = v16;
      uint64_t v17 = v11[2];
      uint64_t v18 = v11[3];
      v10[2] = v17;
      unint64_t v19 = v11[4];
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      sub_1000084E8(v18, v19);
      v10[3] = v18;
      v10[4] = v19;
      uint64_t v20 = v11[5];
      unint64_t v21 = v11[6];
      sub_1000084E8(v20, v21);
      v10[5] = v20;
      void v10[6] = v21;
      *((_BYTE *)v10 + 56) = *((_BYTE *)v11 + 56);
      v8((void *)((char *)v10 + *(int *)(v12 + 36)), (void *)((char *)v11 + *(int *)(v12 + 36)), v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t _s18TrustedPeersHelper13ResetResponseVwxx_0(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v8(a1, v4);
  int v5 = &a1[*(int *)(a2 + 20)];
  uint64_t v6 = type metadata accessor for Changes(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((void *)v5 + 1));
    swift_bridgeObjectRelease(*((void *)v5 + 2));
    sub_10000852C(*((void *)v5 + 3), *((void *)v5 + 4));
    sub_10000852C(*((void *)v5 + 5), *((void *)v5 + 6));
    return v8(&v5[*(int *)(v6 + 36)], v4);
  }

  return result;
}

char *_s18TrustedPeersHelper13ResetResponseVwcp_0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Changes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v14 = *((void *)v10 + 1);
    *(void *)uint64_t v9 = *(void *)v10;
    *((void *)v9 + 1) = v14;
    uint64_t v15 = *((void *)v10 + 2);
    uint64_t v16 = *((void *)v10 + 3);
    *((void *)v9 + 2) = v15;
    unint64_t v17 = *((void *)v10 + 4);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    sub_1000084E8(v16, v17);
    *((void *)v9 + 3) = v16;
    *((void *)v9 + 4) = v17;
    uint64_t v18 = *((void *)v10 + 5);
    unint64_t v19 = *((void *)v10 + 6);
    sub_1000084E8(v18, v19);
    *((void *)v9 + 5) = v18;
    *((void *)v9 + 6) = v19;
    v9[56] = v10[56];
    v7(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

char *_s18TrustedPeersHelper13ResetResponseVwtk_0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Changes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((void *)v9 + 2) = *((void *)v10 + 2);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    v9[56] = v10[56];
    v7(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveRecoveryKeyResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CBB1C);
}

uint64_t sub_1000CBB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD11C(a1, a2, a3, (uint64_t *)&unk_100256C90);
}

uint64_t storeEnumTagSinglePayload for RemoveRecoveryKeyResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CBB34);
}

uint64_t sub_1000CBB34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000CD1AC(a1, a2, a3, a4, (uint64_t *)&unk_100256C90);
}

uint64_t *initializeBufferWithCopyOfBuffer for PerformATOPRVActionsRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for Metrics(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100007578(&qword_100257000);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v16 = v11[1];
      *uint64_t v10 = *v11;
      v10[1] = v16;
      uint64_t v29 = v8;
      uint64_t v17 = v11[3];
      v10[2] = v11[2];
      v10[3] = v17;
      uint64_t v18 = *(int *)(v12 + 24);
      unint64_t v19 = (char *)v10 + v18;
      uint64_t v20 = (char *)v11 + v18;
      swift_bridgeObjectRetain(v16);
      uint64_t v21 = v17;
      uint64_t v8 = v29;
      swift_bridgeObjectRetain(v21);
      v29((uint64_t *)v19, (uint64_t *)v20, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v22 = *(int *)(a3 + 24);
    uint64_t v23 = (_DWORD *)((char *)a1 + v22);
    uint64_t v24 = (_DWORD *)((char *)a2 + v22);
    uint64_t v25 = type metadata accessor for AccountInfo(0LL);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
    {
      uint64_t v27 = sub_100007578(&qword_100251F50);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      *uint64_t v23 = *v24;
      v8((uint64_t *)((char *)v23 + *(int *)(v25 + 20)), (uint64_t *)((char *)v24 + *(int *)(v25 + 20)), v7);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
    }
  }

  return a1;
}

uint64_t destroy for PerformATOPRVActionsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6))
  {
    swift_bridgeObjectRelease(*(void *)(v5 + 8));
    swift_bridgeObjectRelease(*(void *)(v5 + 24));
    v10(v5 + *(int *)(v6 + 24), v4);
  }

  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7 + *(int *)(v8 + 20), v4);
  }
  return result;
}

uint64_t initializeWithCopy for PerformATOPRVActionsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Metrics(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578(&qword_100257000);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v14;
    uint64_t v27 = v7;
    uint64_t v15 = v10[3];
    v9[2] = v10[2];
    v9[3] = v15;
    uint64_t v16 = *(int *)(v11 + 24);
    uint64_t v17 = (char *)v9 + v16;
    uint64_t v18 = (char *)v10 + v16;
    swift_bridgeObjectRetain(v14);
    uint64_t v19 = v15;
    uint64_t v7 = v27;
    swift_bridgeObjectRetain(v19);
    v27((uint64_t)v17, (uint64_t)v18, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = (_DWORD *)(a1 + v20);
  uint64_t v22 = (_DWORD *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AccountInfo(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100007578(&qword_100251F50);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    _DWORD *v21 = *v22;
    v7((uint64_t)v21 + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v6);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  return a1;
}

uint64_t assignWithCopy for PerformATOPRVActionsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 24);
  v36(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      *uint64_t v8 = *v9;
      uint64_t v15 = v9[1];
      v8[1] = v15;
      v8[2] = v9[2];
      uint64_t v16 = v9[3];
      v8[3] = v16;
      uint64_t v17 = *(int *)(v10 + 24);
      uint64_t v18 = (char *)v8 + v17;
      uint64_t v19 = (char *)v9 + v17;
      int v35 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      v35(v18, v19, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_1000415CC((uint64_t)v8, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v20 = sub_100007578(&qword_100257000);
    memcpy(v8, v9, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  *uint64_t v8 = *v9;
  uint64_t v31 = v9[1];
  uint64_t v32 = v8[1];
  v8[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v8[2] = v9[2];
  uint64_t v33 = v9[3];
  uint64_t v34 = v8[3];
  v8[3] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v36((uint64_t)v8 + *(int *)(v10 + 24), (uint64_t)v9 + *(int *)(v10 + 24), v6);
LABEL_7:
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = (_DWORD *)(a1 + v21);
  uint64_t v23 = (_DWORD *)(a2 + v21);
  uint64_t v24 = type metadata accessor for AccountInfo(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  int v28 = v26(v23, 1LL, v24);
  if (!v27)
  {
    if (!v28)
    {
      _DWORD *v22 = *v23;
      v36((uint64_t)v22 + *(int *)(v24 + 20), (uint64_t)v23 + *(int *)(v24 + 20), v6);
      return a1;
    }

    sub_1000415CC((uint64_t)v22, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v28)
  {
LABEL_12:
    uint64_t v29 = sub_100007578(&qword_100251F50);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  _DWORD *v22 = *v23;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))( (char *)v22 + *(int *)(v24 + 20),  (char *)v23 + *(int *)(v24 + 20),  v6);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  return a1;
}

char *initializeWithTake for PerformATOPRVActionsRequest(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Metrics(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578(&qword_100257000);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    __int128 v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    v7(&v9[*(int *)(v11 + 24)], &v10[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for AccountInfo(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_100007578(&qword_100251F50);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v7(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  return a1;
}

uint64_t assignWithTake for PerformATOPRVActionsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 40);
  v31(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      __int128 v15 = *((_OWORD *)v9 + 1);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v15;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))( (char *)v8 + *(int *)(v10 + 24),  (char *)v9 + *(int *)(v10 + 24),  v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_1000415CC((uint64_t)v8, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v27 = v9[1];
  uint64_t v28 = v8[1];
  *uint64_t v8 = *v9;
  v8[1] = v27;
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = v9[3];
  uint64_t v30 = v8[3];
  v8[2] = v9[2];
  v8[3] = v29;
  swift_bridgeObjectRelease(v30);
  v31((uint64_t)v8 + *(int *)(v10 + 24), (uint64_t)v9 + *(int *)(v10 + 24), v6);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (_DWORD *)(a1 + v17);
  uint64_t v19 = (_DWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for AccountInfo(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1LL, v20);
  int v24 = v22(v19, 1LL, v20);
  if (!v23)
  {
    if (!v24)
    {
      *uint64_t v18 = *v19;
      v31((uint64_t)v18 + *(int *)(v20 + 20), (uint64_t)v19 + *(int *)(v20 + 20), v6);
      return a1;
    }

    sub_1000415CC((uint64_t)v18, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_100007578(&qword_100251F50);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    return a1;
  }

  *uint64_t v18 = *v19;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))( (char *)v18 + *(int *)(v20 + 20),  (char *)v19 + *(int *)(v20 + 20),  v6);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for PerformATOPRVActionsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC670);
}

uint64_t sub_1000CC670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA16C(a1, a2, a3, &qword_100257000, &qword_100251F50);
}

uint64_t storeEnumTagSinglePayload for PerformATOPRVActionsRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC690);
}

uint64_t sub_1000CC690(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000DA234(a1, a2, a3, a4, &qword_100257000, &qword_100251F50);
}

void sub_1000CC6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for PerformATOPRVActionsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC6EC);
}

uint64_t storeEnumTagSinglePayload for PerformATOPRVActionsResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC6FC);
}

uint64_t getEnumTagSinglePayload for AddCustodianRecoveryKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC710);
}

uint64_t storeEnumTagSinglePayload for AddCustodianRecoveryKeyRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC720);
}

uint64_t *_s18TrustedPeersHelper17EstablishResponseVwca_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Changes(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19((uint64_t)v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      uint64_t v29 = *((void *)v16 + 1);
      uint64_t v30 = *(void *)(v15 + 8);
      *(void *)(v15 + 8) = v29;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRelease(v30);
      uint64_t v31 = *((void *)v16 + 2);
      uint64_t v32 = *(void *)(v15 + 16);
      *(void *)(v15 + 16) = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = *((void *)v16 + 3);
      unint64_t v34 = *((void *)v16 + 4);
      sub_1000084E8(v33, v34);
      uint64_t v35 = *(void *)(v15 + 24);
      unint64_t v36 = *(void *)(v15 + 32);
      *(void *)(v15 + 24) = v33;
      *(void *)(v15 + 32) = v34;
      sub_10000852C(v35, v36);
      uint64_t v37 = *((void *)v16 + 5);
      unint64_t v38 = *((void *)v16 + 6);
      sub_1000084E8(v37, v38);
      uint64_t v39 = *(void *)(v15 + 40);
      unint64_t v40 = *(void *)(v15 + 48);
      *(void *)(v15 + 40) = v37;
      *(void *)(v15 + 48) = v38;
      sub_10000852C(v39, v40);
      *(_BYTE *)(v15 + 56) = v16[56];
      v13((char *)(v15 + *(int *)(v17 + 36)), &v16[*(int *)(v17 + 36)], v11);
      return a1;
    }

    sub_1000415CC(v15, type metadata accessor for Changes);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v27 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy((void *)v15, v16, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v15 = *(void *)v16;
  uint64_t v21 = *((void *)v16 + 1);
  *(void *)(v15 + 8) = v21;
  uint64_t v22 = *((void *)v16 + 2);
  *(void *)(v15 + 16) = v22;
  uint64_t v23 = *((void *)v16 + 3);
  unint64_t v24 = *((void *)v16 + 4);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  sub_1000084E8(v23, v24);
  *(void *)(v15 + 24) = v23;
  *(void *)(v15 + 32) = v24;
  uint64_t v25 = *((void *)v16 + 5);
  unint64_t v26 = *((void *)v16 + 6);
  sub_1000084E8(v25, v26);
  *(void *)(v15 + 40) = v25;
  *(void *)(v15 + 48) = v26;
  *(_BYTE *)(v15 + 56) = v16[56];
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v15 + *(int *)(v17 + 36), &v16[*(int *)(v17 + 36)], v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t *_s18TrustedPeersHelper17EstablishResponseVwta_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Changes(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1LL, v16);
  int v19 = v18((uint64_t)v15, 1LL, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      uint64_t v22 = *((void *)v15 + 1);
      uint64_t v23 = *(void *)(v14 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v22;
      swift_bridgeObjectRelease(v23);
      uint64_t v24 = *(void *)(v14 + 16);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      swift_bridgeObjectRelease(v24);
      uint64_t v25 = *(void *)(v14 + 24);
      unint64_t v26 = *(void *)(v14 + 32);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      sub_10000852C(v25, v26);
      uint64_t v27 = *(void *)(v14 + 40);
      unint64_t v28 = *(void *)(v14 + 48);
      *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
      sub_10000852C(v27, v28);
      *(_BYTE *)(v14 + 56) = v15[56];
      v12((char *)(v14 + *(int *)(v16 + 36)), &v15[*(int *)(v16 + 36)], v10);
      return a1;
    }

    sub_1000415CC(v14, type metadata accessor for Changes);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy((void *)v14, v15, *(void *)(*(void *)(v20 - 8) + 64LL));
    return a1;
  }

  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(void *)(v14 + 16) = *((void *)v15 + 2);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
  *(_BYTE *)(v14 + 56) = v15[56];
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14 + *(int *)(v16 + 36), &v15[*(int *)(v16 + 36)], v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AddCustodianRecoveryKeyResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CCB1C);
}

uint64_t sub_1000CCB20(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256C90);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t storeEnumTagSinglePayload for AddCustodianRecoveryKeyResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CCBD0);
}

char *sub_1000CCBD4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256C90);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1000CCC74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  v13[0] = a4;
  uint64_t v9 = type metadata accessor for UnknownStorage(319LL);
  if (v10 <= 0x3F)
  {
    v13[1] = *(void *)(v9 - 8) + 64LL;
    sub_1000BCBD4(319LL, a5, a6);
    if (v12 <= 0x3F)
    {
      v13[2] = *(void *)(v11 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v13, a1 + 16);
    }
  }

uint64_t getEnumTagSinglePayload for FetchChangesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CCD38);
}

uint64_t storeEnumTagSinglePayload for FetchChangesRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CCD48);
}

void sub_1000CCD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t _s18TrustedPeersHelper13ResetResponseVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Changes(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      *(void *)uint64_t v10 = *(void *)v11;
      uint64_t v25 = *(void *)(v11 + 8);
      uint64_t v26 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26);
      uint64_t v27 = *(void *)(v11 + 16);
      uint64_t v28 = *(void *)(v10 + 16);
      *(void *)(v10 + 16) = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28);
      uint64_t v29 = *(void *)(v11 + 24);
      unint64_t v30 = *(void *)(v11 + 32);
      sub_1000084E8(v29, v30);
      uint64_t v31 = *(void *)(v10 + 24);
      unint64_t v32 = *(void *)(v10 + 32);
      *(void *)(v10 + 24) = v29;
      *(void *)(v10 + 32) = v30;
      sub_10000852C(v31, v32);
      uint64_t v33 = *(void *)(v11 + 40);
      unint64_t v34 = *(void *)(v11 + 48);
      sub_1000084E8(v33, v34);
      uint64_t v35 = *(void *)(v10 + 40);
      unint64_t v36 = *(void *)(v10 + 48);
      *(void *)(v10 + 40) = v33;
      *(void *)(v10 + 48) = v34;
      sub_10000852C(v35, v36);
      *(_BYTE *)(v10 + 56) = *(_BYTE *)(v11 + 56);
      v8(v10 + *(int *)(v12 + 36), v11 + *(int *)(v12 + 36), v6);
      return a1;
    }

    sub_1000415CC(v10, type metadata accessor for Changes);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v23 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v23 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v10 = *(void *)v11;
  uint64_t v17 = *(void *)(v11 + 8);
  *(void *)(v10 + 8) = v17;
  uint64_t v18 = *(void *)(v11 + 16);
  *(void *)(v10 + 16) = v18;
  uint64_t v19 = *(void *)(v11 + 24);
  unint64_t v20 = *(void *)(v11 + 32);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  sub_1000084E8(v19, v20);
  *(void *)(v10 + 24) = v19;
  *(void *)(v10 + 32) = v20;
  uint64_t v21 = *(void *)(v11 + 40);
  unint64_t v22 = *(void *)(v11 + 48);
  sub_1000084E8(v21, v22);
  *(void *)(v10 + 40) = v21;
  *(void *)(v10 + 48) = v22;
  *(_BYTE *)(v10 + 56) = *(_BYTE *)(v11 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10 + *(int *)(v12 + 36), v11 + *(int *)(v12 + 36), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t _s18TrustedPeersHelper13ResetResponseVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Changes(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v19 = *(void *)(v11 + 8);
      uint64_t v20 = *(void *)(v10 + 8);
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v19;
      swift_bridgeObjectRelease(v20);
      uint64_t v21 = *(void *)(v10 + 16);
      *(void *)(v10 + 16) = *(void *)(v11 + 16);
      swift_bridgeObjectRelease(v21);
      uint64_t v22 = *(void *)(v10 + 24);
      unint64_t v23 = *(void *)(v10 + 32);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
      sub_10000852C(v22, v23);
      uint64_t v24 = *(void *)(v10 + 40);
      unint64_t v25 = *(void *)(v10 + 48);
      *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
      sub_10000852C(v24, v25);
      *(_BYTE *)(v10 + 56) = *(_BYTE *)(v11 + 56);
      v8(v10 + *(int *)(v12 + 36), v11 + *(int *)(v12 + 36), v6);
      return a1;
    }

    sub_1000415CC(v10, type metadata accessor for Changes);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100007578((uint64_t *)&unk_100256C90);
    memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
  *(_BYTE *)(v10 + 56) = *(_BYTE *)(v11 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10 + *(int *)(v12 + 36), v11 + *(int *)(v12 + 36), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchChangesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CD110);
}

uint64_t sub_1000CD110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD11C(a1, a2, a3, (uint64_t *)&unk_100256C90);
}

uint64_t sub_1000CD11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_100007578(a4);
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL);
  }

  return v11(v12, a2, v10);
}

uint64_t storeEnumTagSinglePayload for FetchChangesResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CD1A0);
}

uint64_t sub_1000CD1A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000CD1AC(a1, a2, a3, a4, (uint64_t *)&unk_100256C90);
}

uint64_t sub_1000CD1AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
  }

  else
  {
    uint64_t v12 = sub_100007578(a5);
    uint64_t v14 = a1 + *(int *)(a4 + 20);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  }

  return v13(v14, a2, a2, v12);
}

void sub_1000CD234(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, (unint64_t *)&unk_100253890, type metadata accessor for Changes);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v6, a1 + 16);
    }
  }

void *initializeBufferWithCopyOfBuffer for FetchViableBottlesRequest(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v11(v8, v9, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for Metrics(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100007578(&qword_100257000);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = v14[1];
      void *v13 = *v14;
      v13[1] = v19;
      unint64_t v32 = v11;
      uint64_t v20 = v14[3];
      v13[2] = v14[2];
      void v13[3] = v20;
      uint64_t v21 = *(int *)(v15 + 24);
      uint64_t v22 = (char *)v13 + v21;
      unint64_t v23 = (char *)v14 + v21;
      swift_bridgeObjectRetain(v19);
      uint64_t v24 = v20;
      uint64_t v11 = v32;
      swift_bridgeObjectRetain(v24);
      v32((uint64_t)v22, (uint64_t)v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v25 = a3[7];
    uint64_t v26 = (_DWORD *)((char *)v4 + v25);
    uint64_t v27 = (_DWORD *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for AccountInfo(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_100007578(&qword_100251F50);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      *uint64_t v26 = *v27;
      v11((uint64_t)v26 + *(int *)(v28 + 20), (uint64_t)v27 + *(int *)(v28 + 20), v10);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }
  }

  return v4;
}

uint64_t initializeWithCopy for FetchViableBottlesRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v30 = v10;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = *(int *)(v14 + 24);
    uint64_t v20 = (char *)v12 + v19;
    uint64_t v21 = (char *)v13 + v19;
    swift_bridgeObjectRetain(v17);
    uint64_t v22 = v18;
    uint64_t v10 = v30;
    swift_bridgeObjectRetain(v22);
    v30((uint64_t)v20, (uint64_t)v21, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v23 = a3[7];
  uint64_t v24 = (_DWORD *)(a1 + v23);
  uint64_t v25 = (_DWORD *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AccountInfo(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100007578(&qword_100251F50);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    *uint64_t v24 = *v25;
    v10((uint64_t)v24 + *(int *)(v26 + 20), (uint64_t)v25 + *(int *)(v26 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  return a1;
}

uint64_t assignWithCopy for FetchViableBottlesRequest(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v41 = *(void *)(v10 - 8);
  unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 24);
  v40(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      *uint64_t v12 = *v13;
      uint64_t v19 = v13[1];
      v12[1] = v19;
      v12[2] = v13[2];
      uint64_t v20 = v13[3];
      v12[3] = v20;
      uint64_t v21 = *(int *)(v14 + 24);
      uint64_t v22 = (char *)v12 + v21;
      uint64_t v23 = (char *)v13 + v21;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v39(v22, v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    sub_1000415CC((uint64_t)v12, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v24 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  *uint64_t v12 = *v13;
  uint64_t v35 = v13[1];
  uint64_t v36 = v12[1];
  v12[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v12[2] = v13[2];
  uint64_t v37 = v13[3];
  uint64_t v38 = v12[3];
  v12[3] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v40((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v10);
LABEL_7:
  uint64_t v25 = a3[7];
  uint64_t v26 = (_DWORD *)(a1 + v25);
  uint64_t v27 = (_DWORD *)((char *)a2 + v25);
  uint64_t v28 = type metadata accessor for AccountInfo(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (!v31)
  {
    if (!v32)
    {
      *uint64_t v26 = *v27;
      v40((uint64_t)v26 + *(int *)(v28 + 20), (uint64_t)v27 + *(int *)(v28 + 20), v10);
      return a1;
    }

    sub_1000415CC((uint64_t)v26, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v32)
  {
LABEL_12:
    uint64_t v33 = sub_100007578(&qword_100251F50);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64LL));
    return a1;
  }

  *uint64_t v26 = *v27;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))( (char *)v26 + *(int *)(v28 + 20),  (char *)v27 + *(int *)(v28 + 20),  v10);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
  return a1;
}

uint64_t initializeWithTake for FetchViableBottlesRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = a3[7];
  uint64_t v19 = (_DWORD *)(a1 + v18);
  uint64_t v20 = (_DWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AccountInfo(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100007578(&qword_100251F50);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    _DWORD *v19 = *v20;
    v10((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

uint64_t assignWithTake for FetchViableBottlesRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v35 = *(void *)(v9 - 8);
  unint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40);
  v34(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      __int128 v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))( (char *)v11 + *(int *)(v13 + 24),  (char *)v12 + *(int *)(v13 + 24),  v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    sub_1000415CC((uint64_t)v11, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v19 = sub_100007578(&qword_100257000);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v30 = v12[1];
  uint64_t v31 = v11[1];
  *uint64_t v11 = *v12;
  v11[1] = v30;
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = v12[3];
  uint64_t v33 = v11[3];
  v11[2] = v12[2];
  v11[3] = v32;
  swift_bridgeObjectRelease(v33);
  v34((uint64_t)v11 + *(int *)(v13 + 24), (uint64_t)v12 + *(int *)(v13 + 24), v9);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = (_DWORD *)(a1 + v20);
  uint64_t v22 = (_DWORD *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AccountInfo(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1LL, v23);
  int v27 = v25(v22, 1LL, v23);
  if (!v26)
  {
    if (!v27)
    {
      _DWORD *v21 = *v22;
      v34((uint64_t)v21 + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v9);
      return a1;
    }

    sub_1000415CC((uint64_t)v21, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v27)
  {
LABEL_12:
    uint64_t v28 = sub_100007578(&qword_100251F50);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  _DWORD *v21 = *v22;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))( (char *)v21 + *(int *)(v23 + 20),  (char *)v22 + *(int *)(v23 + 20),  v9);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchViableBottlesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CDD80);
}

uint64_t storeEnumTagSinglePayload for FetchViableBottlesRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CDD90);
}

void sub_1000CDD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for FetchViableBottlesResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    uint64_t v8 = *(int *)(a3 + 44);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
  }

  return v5;
}

uint64_t destroy for FetchViableBottlesResponse(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for FetchViableBottlesResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

uint64_t *assignWithCopy for FetchViableBottlesResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[2];
  uint64_t v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for FetchViableBottlesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for FetchViableBottlesResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchViableBottlesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CE138);
}

uint64_t sub_1000CE138(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 44)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for FetchViableBottlesResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CE1C0);
}

char *sub_1000CE1C0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 44)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000CE234(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[7] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *_s18TrustedPeersHelper19FetchChangesRequestVwCP_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Metrics(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100007578(&qword_100257000);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v33 = v12;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = *(int *)(v16 + 24);
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain(v20);
      uint64_t v25 = v21;
      uint64_t v12 = v33;
      swift_bridgeObjectRetain(v25);
      v33(v23, v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v26 = a3[7];
    int v27 = (_DWORD *)((char *)v4 + v26);
    uint64_t v28 = (_DWORD *)((char *)a2 + v26);
    uint64_t v29 = type metadata accessor for AccountInfo(0LL);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
    {
      uint64_t v31 = sub_100007578(&qword_100251F50);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      *int v27 = *v28;
      v12((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v11);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    }
  }

  return v4;
}

uint64_t _s18TrustedPeersHelper19FetchChangesRequestVwxx_0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
    v11(v6 + *(int *)(v7 + 24), v5);
  }

  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

void *_s18TrustedPeersHelper19FetchChangesRequestVwcp_0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Metrics(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578(&qword_100257000);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    uint64_t v31 = v11;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    void v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain(v18);
    uint64_t v23 = v19;
    uint64_t v11 = v31;
    swift_bridgeObjectRetain(v23);
    v31(v21, v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v24 = a3[7];
  uint64_t v25 = (_DWORD *)((char *)a1 + v24);
  uint64_t v26 = (_DWORD *)((char *)a2 + v24);
  uint64_t v27 = type metadata accessor for AccountInfo(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_100007578(&qword_100251F50);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    *uint64_t v25 = *v26;
    v11((char *)v25 + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v10);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  }

  return a1;
}

void *_s18TrustedPeersHelper19FetchChangesRequestVwca_0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v42 + 24);
  v41(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Metrics(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      void *v13 = *v14;
      uint64_t v20 = v14[1];
      v13[1] = v20;
      v13[2] = v14[2];
      uint64_t v21 = v14[3];
      void v13[3] = v21;
      uint64_t v22 = *(int *)(v15 + 24);
      uint64_t v23 = (char *)v13 + v22;
      uint64_t v24 = (char *)v14 + v22;
      unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v40(v23, v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_1000415CC((uint64_t)v13, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v25 = sub_100007578(&qword_100257000);
    memcpy(v13, v14, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  void *v13 = *v14;
  uint64_t v36 = v14[1];
  uint64_t v37 = v13[1];
  v13[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v13[2] = v14[2];
  uint64_t v38 = v14[3];
  uint64_t v39 = v13[3];
  void v13[3] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v41((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v11);
LABEL_7:
  uint64_t v26 = a3[7];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for AccountInfo(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1LL, v29);
  int v33 = v31(v28, 1LL, v29);
  if (!v32)
  {
    if (!v33)
    {
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v41(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v11);
      return a1;
    }

    sub_1000415CC((uint64_t)v27, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v33)
  {
LABEL_12:
    uint64_t v34 = sub_100007578(&qword_100251F50);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
  return a1;
}

_OWORD *_s18TrustedPeersHelper19FetchChangesRequestVwtk_0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = a3[7];
  int v19 = (_DWORD *)((char *)a1 + v18);
  uint64_t v20 = (_DWORD *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for AccountInfo(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100007578(&qword_100251F50);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    _DWORD *v19 = *v20;
    v10((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

void *_s18TrustedPeersHelper19FetchChangesRequestVwta_0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v37 + 40);
  v36(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Metrics(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __int128 v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      __int128 v20 = *((_OWORD *)v14 + 1);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v20;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))( (char *)v13 + *(int *)(v15 + 24),  (char *)v14 + *(int *)(v15 + 24),  v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_1000415CC((uint64_t)v13, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v21 = sub_100007578(&qword_100257000);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v32 = v14[1];
  uint64_t v33 = v13[1];
  void *v13 = *v14;
  v13[1] = v32;
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = v14[3];
  uint64_t v35 = v13[3];
  v13[2] = v14[2];
  void v13[3] = v34;
  swift_bridgeObjectRelease(v35);
  v36((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v11);
LABEL_7:
  uint64_t v22 = a3[7];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for AccountInfo(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1LL, v25);
  int v29 = v27(v24, 1LL, v25);
  if (!v28)
  {
    if (!v29)
    {
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v36(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
      return a1;
    }

    sub_1000415CC((uint64_t)v23, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v29)
  {
LABEL_12:
    uint64_t v30 = sub_100007578(&qword_100251F50);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchRecoverableTLKSharesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CEEA8);
}

uint64_t sub_1000CEEAC(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[5];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[6];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100251F50);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[7];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for FetchRecoverableTLKSharesRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CEF84);
}

uint64_t sub_1000CEF88(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[6];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100251F50);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[7];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for FetchRecoverableTLKSharesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CF074);
}

uint64_t storeEnumTagSinglePayload for FetchRecoverableTLKSharesResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CF084);
}

uint64_t sub_1000CF088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D57B0(a1, a2, a3, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t *initializeBufferWithCopyOfBuffer for FetchRecoverableTLKSharesResponse.View( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    __int128 v17 = (int *)type metadata accessor for ViewKeysRecords(0LL);
    uint64_t v18 = *((void *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100007578(&qword_100251648);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      v13(v15, v16, v12);
      uint64_t v21 = v17[5];
      uint64_t v22 = &v15[v21];
      uint64_t v23 = &v16[v21];
      uint64_t v24 = type metadata accessor for Ckcode_RecordTransport(0LL);
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      if (v26(v23, 1LL, v24))
      {
        uint64_t v27 = sub_100007578(&qword_1002517E0);
        memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
      }

      uint64_t v28 = v17[6];
      int v29 = &v15[v28];
      uint64_t v30 = &v16[v28];
      if (v26(&v16[v28], 1LL, v24))
      {
        uint64_t v31 = sub_100007578(&qword_1002517E0);
        memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v29, v30, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v29, 0LL, 1LL, v24);
      }

      uint64_t v32 = v17[7];
      uint64_t v33 = &v15[v32];
      uint64_t v34 = &v16[v32];
      if (v26(v34, 1LL, v24))
      {
        uint64_t v35 = sub_100007578(&qword_1002517E0);
        memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v33, v34, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v33, 0LL, 1LL, v24);
      }

      (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0LL, 1LL, v17);
    }
  }

  return v4;
}

uint64_t destroy for FetchRecoverableTLKSharesResponse.View(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v8 - 1) + 48LL))(v7, 1LL, v8);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    uint64_t v10 = v7 + v8[5];
    uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (!v13(v10, 1LL, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    uint64_t v14 = v7 + v8[6];
    if (!v13(v14, 1LL, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
    }
    uint64_t v15 = v7 + v8[7];
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v15, 1LL, v11);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
    }
  }

  return result;
}

void *initializeWithCopy for FetchRecoverableTLKSharesResponse.View(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578(&qword_100251648);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v12(v14, v15, v11);
    uint64_t v19 = v16[5];
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    uint64_t v22 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v24(v21, 1LL, v22))
    {
      uint64_t v25 = sub_100007578(&qword_1002517E0);
      memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
    }

    uint64_t v26 = v16[6];
    uint64_t v27 = &v14[v26];
    uint64_t v28 = &v15[v26];
    if (v24(&v15[v26], 1LL, v22))
    {
      uint64_t v29 = sub_100007578(&qword_1002517E0);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v28, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v27, 0LL, 1LL, v22);
    }

    uint64_t v30 = v16[7];
    uint64_t v31 = &v14[v30];
    uint64_t v32 = &v15[v30];
    if (v24(v32, 1LL, v22))
    {
      uint64_t v33 = sub_100007578(&qword_1002517E0);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v31, v32, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v31, 0LL, 1LL, v22);
    }

    (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

void *assignWithCopy for FetchRecoverableTLKSharesResponse.View(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v20 = *((void *)v19 - 1);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21((uint64_t)v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (v22)
    {
      sub_1000415CC(v17, type metadata accessor for ViewKeysRecords);
      goto LABEL_7;
    }

    v15((char *)v17, v18, v13);
    uint64_t v33 = v19[5];
    uint64_t v34 = (void *)(v17 + v33);
    uint64_t v35 = &v18[v33];
    uint64_t v36 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
    int v39 = v38(v34, 1LL, v36);
    int v40 = v38(v35, 1LL, v36);
    if (v39)
    {
      if (!v40)
      {
        (*(void (**)(void *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
        goto LABEL_24;
      }
    }

    else
    {
      if (!v40)
      {
        (*(void (**)(void *, char *, uint64_t))(v37 + 24))(v34, v35, v36);
LABEL_24:
        uint64_t v51 = v19[6];
        uint64_t v52 = (void *)(v17 + v51);
        uint64_t v53 = &v18[v51];
        int v54 = v38((void *)(v17 + v51), 1LL, v36);
        int v55 = v38(v53, 1LL, v36);
        if (v54)
        {
          if (!v55)
          {
            (*(void (**)(void *, char *, uint64_t))(v37 + 16))(v52, v53, v36);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v52, 0LL, 1LL, v36);
LABEL_30:
            uint64_t v57 = v19[7];
            uint64_t v58 = (void *)(v17 + v57);
            unint64_t v59 = &v18[v57];
            int v60 = v38(v58, 1LL, v36);
            int v61 = v38(v59, 1LL, v36);
            if (v60)
            {
              if (!v61)
              {
                (*(void (**)(void *, char *, uint64_t))(v37 + 16))(v58, v59, v36);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v58, 0LL, 1LL, v36);
                return a1;
              }
            }

            else
            {
              if (!v61)
              {
                (*(void (**)(void *, char *, uint64_t))(v37 + 24))(v58, v59, v36);
                return a1;
              }

              (*(void (**)(void *, uint64_t))(v37 + 8))(v58, v36);
            }

            size_t v30 = *(void *)(*(void *)(sub_100007578(&qword_1002517E0) - 8) + 64LL);
            uint64_t v31 = v58;
            uint64_t v32 = v59;
            goto LABEL_8;
          }
        }

        else
        {
          if (!v55)
          {
            (*(void (**)(void *, char *, uint64_t))(v37 + 24))(v52, v53, v36);
            goto LABEL_30;
          }

          (*(void (**)(void *, uint64_t))(v37 + 8))(v52, v36);
        }

        uint64_t v56 = sub_100007578(&qword_1002517E0);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
        goto LABEL_30;
      }

      (*(void (**)(void *, uint64_t))(v37 + 8))(v34, v36);
    }

    uint64_t v50 = sub_100007578(&qword_1002517E0);
    memcpy(v34, v35, *(void *)(*(void *)(v50 - 8) + 64LL));
    goto LABEL_24;
  }

  if (v22)
  {
LABEL_7:
    size_t v30 = *(void *)(*(void *)(sub_100007578(&qword_100251648) - 8) + 64LL);
    uint64_t v31 = (void *)v17;
    uint64_t v32 = v18;
LABEL_8:
    memcpy(v31, v32, v30);
    return a1;
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v17, v18, v13);
  uint64_t v23 = v19[5];
  uint64_t v24 = (void *)(v17 + v23);
  uint64_t v25 = &v18[v23];
  uint64_t v26 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v28(v25, 1LL, v26))
  {
    uint64_t v29 = sub_100007578(&qword_1002517E0);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  uint64_t v41 = v19[6];
  uint64_t v42 = (void *)(v17 + v41);
  uint64_t v43 = &v18[v41];
  if (v28(&v18[v41], 1LL, v26))
  {
    uint64_t v44 = sub_100007578(&qword_1002517E0);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v42, v43, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v42, 0LL, 1LL, v26);
  }

  uint64_t v45 = v19[7];
  int v46 = (void *)(v17 + v45);
  uint64_t v47 = &v18[v45];
  if (v28(v47, 1LL, v26))
  {
    uint64_t v48 = sub_100007578(&qword_1002517E0);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v46, v47, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v46, 0LL, 1LL, v26);
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

uint64_t initializeWithTake for FetchRecoverableTLKSharesResponse.View(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100251648);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    uint64_t v20 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    int v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    if (v22(v19, 1LL, v20))
    {
      uint64_t v23 = sub_100007578(&qword_1002517E0);
      memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
    }

    uint64_t v24 = v14[6];
    uint64_t v25 = &v12[v24];
    uint64_t v26 = &v13[v24];
    if (v22(&v13[v24], 1LL, v20))
    {
      uint64_t v27 = sub_100007578(&qword_1002517E0);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v26, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0LL, 1LL, v20);
    }

    uint64_t v28 = v14[7];
    uint64_t v29 = &v12[v28];
    size_t v30 = &v13[v28];
    if (v22(v30, 1LL, v20))
    {
      uint64_t v31 = sub_100007578(&qword_1002517E0);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v29, v30, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v29, 0LL, 1LL, v20);
    }

    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

void *assignWithTake for FetchRecoverableTLKSharesResponse.View(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v19 = *((void *)v18 - 1);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v19 + 48);
  LODWORD(v11) = v20(v16, 1LL, v18);
  int v21 = v20((uint64_t)v17, 1LL, v18);
  if (!(_DWORD)v11)
  {
    if (v21)
    {
      sub_1000415CC(v16, type metadata accessor for ViewKeysRecords);
      goto LABEL_7;
    }

    v14((char *)v16, v17, v12);
    uint64_t v32 = v18[5];
    uint64_t v33 = (void *)(v16 + v32);
    uint64_t v34 = &v17[v32];
    uint64_t v35 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
    int v38 = v37(v33, 1LL, v35);
    int v39 = v37(v34, 1LL, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(void *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
        goto LABEL_24;
      }
    }

    else
    {
      if (!v39)
      {
        (*(void (**)(void *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
LABEL_24:
        uint64_t v50 = v18[6];
        uint64_t v51 = (void *)(v16 + v50);
        uint64_t v52 = &v17[v50];
        int v53 = v37((void *)(v16 + v50), 1LL, v35);
        int v54 = v37(v52, 1LL, v35);
        if (v53)
        {
          if (!v54)
          {
            (*(void (**)(void *, char *, uint64_t))(v36 + 32))(v51, v52, v35);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v51, 0LL, 1LL, v35);
LABEL_30:
            uint64_t v56 = v18[7];
            uint64_t v57 = (void *)(v16 + v56);
            uint64_t v58 = &v17[v56];
            int v59 = v37(v57, 1LL, v35);
            int v60 = v37(v58, 1LL, v35);
            if (v59)
            {
              if (!v60)
              {
                (*(void (**)(void *, char *, uint64_t))(v36 + 32))(v57, v58, v35);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v57, 0LL, 1LL, v35);
                return a1;
              }
            }

            else
            {
              if (!v60)
              {
                (*(void (**)(void *, char *, uint64_t))(v36 + 40))(v57, v58, v35);
                return a1;
              }

              (*(void (**)(void *, uint64_t))(v36 + 8))(v57, v35);
            }

            size_t v29 = *(void *)(*(void *)(sub_100007578(&qword_1002517E0) - 8) + 64LL);
            size_t v30 = v57;
            uint64_t v31 = v58;
            goto LABEL_8;
          }
        }

        else
        {
          if (!v54)
          {
            (*(void (**)(void *, char *, uint64_t))(v36 + 40))(v51, v52, v35);
            goto LABEL_30;
          }

          (*(void (**)(void *, uint64_t))(v36 + 8))(v51, v35);
        }

        uint64_t v55 = sub_100007578(&qword_1002517E0);
        memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
        goto LABEL_30;
      }

      (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    }

    uint64_t v49 = sub_100007578(&qword_1002517E0);
    memcpy(v33, v34, *(void *)(*(void *)(v49 - 8) + 64LL));
    goto LABEL_24;
  }

  if (v21)
  {
LABEL_7:
    size_t v29 = *(void *)(*(void *)(sub_100007578(&qword_100251648) - 8) + 64LL);
    size_t v30 = (void *)v16;
    uint64_t v31 = v17;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v16, v17, v12);
  uint64_t v22 = v18[5];
  uint64_t v23 = (void *)(v16 + v22);
  uint64_t v24 = &v17[v22];
  uint64_t v25 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v27(v24, 1LL, v25))
  {
    uint64_t v28 = sub_100007578(&qword_1002517E0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
  }

  uint64_t v40 = v18[6];
  uint64_t v41 = (void *)(v16 + v40);
  uint64_t v42 = &v17[v40];
  if (v27(&v17[v40], 1LL, v25))
  {
    uint64_t v43 = sub_100007578(&qword_1002517E0);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v26 + 32))(v41, v42, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v41, 0LL, 1LL, v25);
  }

  uint64_t v44 = v18[7];
  uint64_t v45 = (void *)(v16 + v44);
  int v46 = &v17[v44];
  if (v27(v46, 1LL, v25))
  {
    uint64_t v47 = sub_100007578(&qword_1002517E0);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v26 + 32))(v45, v46, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v45, 0LL, 1LL, v25);
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v19 + 56))(v16, 0LL, 1LL, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchRecoverableTLKSharesResponse.View( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D0368);
}

uint64_t sub_1000D0368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D2754(a1, a2, a3, &qword_100251648);
}

uint64_t storeEnumTagSinglePayload for FetchRecoverableTLKSharesResponse.View( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D0380);
}

uint64_t sub_1000D0380(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000D2810(a1, a2, a3, a4, &qword_100251648);
}

void sub_1000D038C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for FetchPolicyDocumentsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D03D0);
}

uint64_t storeEnumTagSinglePayload for FetchPolicyDocumentsRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D03E0);
}

void sub_1000D03E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *_s18TrustedPeersHelper33FetchRecoverableTLKSharesResponseVwCP_0( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t _s18TrustedPeersHelper33FetchRecoverableTLKSharesResponseVwxx_0(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *_s18TrustedPeersHelper33FetchRecoverableTLKSharesResponseVwcp_0( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *_s18TrustedPeersHelper33FetchRecoverableTLKSharesResponseVwca_0( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

uint64_t *_s18TrustedPeersHelper33FetchRecoverableTLKSharesResponseVwta_0( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchPolicyDocumentsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D0630);
}

uint64_t sub_1000D0634(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for FetchPolicyDocumentsResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D06BC);
}

char *sub_1000D06C0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for GetRepairActionRequest(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    uint64_t v8 = a2[3];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a3[8];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = a3[9];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Metrics(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100007578(&qword_100257000);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[3];
      v15[2] = v16[2];
      v15[3] = v22;
      uint64_t v23 = *(int *)(v17 + 24);
      uint64_t v34 = v13;
      uint64_t v24 = (char *)v15 + v23;
      uint64_t v25 = (char *)v16 + v23;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      uint64_t v26 = v24;
      uint64_t v13 = v34;
      v34((uint64_t)v26, (uint64_t)v25, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }

    uint64_t v27 = a3[10];
    uint64_t v28 = (_DWORD *)((char *)v4 + v27);
    size_t v29 = (_DWORD *)((char *)a2 + v27);
    uint64_t v30 = type metadata accessor for AccountInfo(0LL);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
    {
      uint64_t v32 = sub_100007578(&qword_100251F50);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      *uint64_t v28 = *v29;
      v13((uint64_t)v28 + *(int *)(v30 + 20), (uint64_t)v29 + *(int *)(v30 + 20), v12);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
    }
  }

  return v4;
}

uint64_t destroy for GetRepairActionRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
    v11(v6 + *(int *)(v7 + 24), v5);
  }

  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

uint64_t initializeWithCopy for GetRepairActionRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Metrics(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578(&qword_100257000);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[3];
    v14[2] = v15[2];
    v14[3] = v20;
    uint64_t v21 = *(int *)(v16 + 24);
    uint64_t v32 = v12;
    uint64_t v22 = (char *)v14 + v21;
    uint64_t v23 = (char *)v15 + v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    uint64_t v24 = v22;
    uint64_t v12 = v32;
    v32((uint64_t)v24, (uint64_t)v23, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v25 = a3[10];
  uint64_t v26 = (_DWORD *)(a1 + v25);
  uint64_t v27 = (_DWORD *)(a2 + v25);
  uint64_t v28 = type metadata accessor for AccountInfo(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
  {
    uint64_t v30 = sub_100007578(&qword_100251F50);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    *uint64_t v26 = *v27;
    v12((uint64_t)v26 + *(int *)(v28 + 20), (uint64_t)v27 + *(int *)(v28 + 20), v11);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
  }

  return a1;
}

uint64_t assignWithCopy for GetRepairActionRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 24);
  v43(v11, v12, v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Metrics(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      *uint64_t v15 = *v16;
      uint64_t v22 = v16[1];
      v15[1] = v22;
      v15[2] = v16[2];
      uint64_t v23 = v16[3];
      v15[3] = v23;
      uint64_t v24 = *(int *)(v17 + 24);
      uint64_t v25 = (char *)v15 + v24;
      uint64_t v26 = (char *)v16 + v24;
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v42(v25, v26, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_1000415CC((uint64_t)v15, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v27 = sub_100007578(&qword_100257000);
    memcpy(v15, v16, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  *uint64_t v15 = *v16;
  uint64_t v38 = v16[1];
  uint64_t v39 = v15[1];
  v15[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v15[2] = v16[2];
  uint64_t v40 = v16[3];
  uint64_t v41 = v15[3];
  v15[3] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v43((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v13);
LABEL_7:
  uint64_t v28 = a3[10];
  uint64_t v29 = (_DWORD *)(a1 + v28);
  uint64_t v30 = (_DWORD *)(a2 + v28);
  uint64_t v31 = type metadata accessor for AccountInfo(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (!v34)
  {
    if (!v35)
    {
      *uint64_t v29 = *v30;
      v43((uint64_t)v29 + *(int *)(v31 + 20), (uint64_t)v30 + *(int *)(v31 + 20), v13);
      return a1;
    }

    sub_1000415CC((uint64_t)v29, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v35)
  {
LABEL_12:
    uint64_t v36 = sub_100007578(&qword_100251F50);
    memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64LL));
    return a1;
  }

  *uint64_t v29 = *v30;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))( (char *)v29 + *(int *)(v31 + 20),  (char *)v30 + *(int *)(v31 + 20),  v13);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  return a1;
}

uint64_t initializeWithTake for GetRepairActionRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[9];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = a3[10];
  uint64_t v19 = (_DWORD *)(a1 + v18);
  int v20 = (_DWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AccountInfo(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100007578(&qword_100251F50);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    _DWORD *v19 = *v20;
    v10((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

uint64_t assignWithTake for GetRepairActionRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v38 = *(void *)(v12 - 8);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 40);
  v37(v10, v11, v12);
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Metrics(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (v19)
  {
    if (!v20)
    {
      __int128 v21 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v21;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))( (char *)v14 + *(int *)(v16 + 24),  (char *)v15 + *(int *)(v16 + 24),  v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v20)
  {
    sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v22 = sub_100007578(&qword_100257000);
    memcpy(v14, v15, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v33 = v15[1];
  uint64_t v34 = v14[1];
  *uint64_t v14 = *v15;
  v14[1] = v33;
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = v15[3];
  uint64_t v36 = v14[3];
  v14[2] = v15[2];
  v14[3] = v35;
  swift_bridgeObjectRelease(v36);
  v37((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v12);
LABEL_7:
  uint64_t v23 = a3[10];
  uint64_t v24 = (_DWORD *)(a1 + v23);
  uint64_t v25 = (_DWORD *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AccountInfo(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28(v25, 1LL, v26);
  if (!v29)
  {
    if (!v30)
    {
      *uint64_t v24 = *v25;
      v37((uint64_t)v24 + *(int *)(v26 + 20), (uint64_t)v25 + *(int *)(v26 + 20), v12);
      return a1;
    }

    sub_1000415CC((uint64_t)v24, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v30)
  {
LABEL_12:
    uint64_t v31 = sub_100007578(&qword_100251F50);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  *uint64_t v24 = *v25;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))( (char *)v24 + *(int *)(v26 + 20),  (char *)v25 + *(int *)(v26 + 20),  v12);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetRepairActionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D13B0);
}

uint64_t sub_1000D13B0(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[8];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[9];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100251F50);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[10];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for GetRepairActionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D1488);
}

uint64_t sub_1000D1488(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[8];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[9];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100251F50);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[10];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D1550(uint64_t a1)
{
  v8[0] = &unk_1001E6000;
  v8[1] = &unk_1001E60A0;
  v8[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[3] = &unk_1001E60A0;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[4] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
    if (v5 <= 0x3F)
    {
      v8[5] = *(void *)(v4 - 8) + 64LL;
      sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
      if (v7 <= 0x3F)
      {
        v8[6] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 7LL, v8, a1 + 16);
      }
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for EscrowProxyFederationMoveRecordRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (uint64_t *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for Metrics(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_100007578(&qword_100257000);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      uint64_t v22 = v17[1];
      void *v16 = *v17;
      v16[1] = v22;
      uint64_t v23 = v17[3];
      v16[2] = v17[2];
      v16[3] = v23;
      uint64_t v24 = *(int *)(v18 + 24);
      uint64_t v25 = (char *)v16 + v24;
      uint64_t v26 = (char *)v17 + v24;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v14(v25, v26, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }
  }

  return v4;
}

uint64_t destroy for EscrowProxyFederationMoveRecordRequest(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((void *)v6 + 1));
    swift_bridgeObjectRelease(*((void *)v6 + 3));
    return ((uint64_t (*)(char *, uint64_t))v9)(&v6[*(int *)(v7 + 24)], v5);
  }

  return result;
}

void *initializeWithCopy for EscrowProxyFederationMoveRecordRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for Metrics(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100007578(&qword_100257000);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    uint64_t v20 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v20;
    uint64_t v21 = v16[3];
    v15[2] = v16[2];
    v15[3] = v21;
    uint64_t v22 = *(int *)(v17 + 24);
    uint64_t v23 = (char *)v15 + v22;
    uint64_t v24 = (char *)v16 + v22;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    v13(v23, v24, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  return a1;
}

void *assignWithCopy for EscrowProxyFederationMoveRecordRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Metrics(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v14) = v23(v19, 1LL, v21);
  int v24 = v23(v20, 1LL, v21);
  if (!(_DWORD)v14)
  {
    if (!v24)
    {
      *(void *)uint64_t v19 = *(void *)v20;
      uint64_t v33 = *((void *)v20 + 1);
      uint64_t v34 = *((void *)v19 + 1);
      *((void *)v19 + 1) = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease(v34);
      *((void *)v19 + 2) = *((void *)v20 + 2);
      uint64_t v35 = *((void *)v20 + 3);
      uint64_t v36 = *((void *)v19 + 3);
      *((void *)v19 + 3) = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRelease(v36);
      v17(&v19[*(int *)(v21 + 24)], &v20[*(int *)(v21 + 24)], v15);
      return a1;
    }

    sub_1000415CC((uint64_t)v19, type metadata accessor for Metrics);
    goto LABEL_6;
  }

  if (v24)
  {
LABEL_6:
    uint64_t v31 = sub_100007578(&qword_100257000);
    memcpy(v19, v20, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v25 = *((void *)v20 + 1);
  *((void *)v19 + 1) = v25;
  *((void *)v19 + 2) = *((void *)v20 + 2);
  uint64_t v26 = *((void *)v20 + 3);
  *((void *)v19 + 3) = v26;
  uint64_t v27 = *(int *)(v21 + 24);
  uint64_t v28 = &v19[v27];
  int v29 = &v20[v27];
  int v30 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  v30(v28, v29, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  return a1;
}

_OWORD *initializeWithTake for EscrowProxyFederationMoveRecordRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Metrics(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578(&qword_100257000);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    __int128 v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *assignWithTake for EscrowProxyFederationMoveRecordRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Metrics(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v14) = v23(v19, 1LL, v21);
  int v24 = v23(v20, 1LL, v21);
  if (!(_DWORD)v14)
  {
    if (!v24)
    {
      uint64_t v28 = *((void *)v20 + 1);
      uint64_t v29 = *((void *)v19 + 1);
      *(void *)uint64_t v19 = *(void *)v20;
      *((void *)v19 + 1) = v28;
      swift_bridgeObjectRelease(v29);
      uint64_t v30 = *((void *)v20 + 3);
      uint64_t v31 = *((void *)v19 + 3);
      *((void *)v19 + 2) = *((void *)v20 + 2);
      *((void *)v19 + 3) = v30;
      swift_bridgeObjectRelease(v31);
      v17(&v19[*(int *)(v21 + 24)], &v20[*(int *)(v21 + 24)], v15);
      return a1;
    }

    sub_1000415CC((uint64_t)v19, type metadata accessor for Metrics);
    goto LABEL_6;
  }

  if (v24)
  {
LABEL_6:
    uint64_t v26 = sub_100007578(&qword_100257000);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64LL));
    return a1;
  }

  __int128 v25 = *((_OWORD *)v20 + 1);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v25;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v19[*(int *)(v21 + 24)], &v20[*(int *)(v21 + 24)], v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for EscrowProxyFederationMoveRecordRequest( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D1EA4);
}

uint64_t sub_1000D1EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 28);
    }

    else
    {
      uint64_t v10 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for EscrowProxyFederationMoveRecordRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D1F54);
}

uint64_t sub_1000D1F54(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 28);
    }

    else
    {
      uint64_t v10 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D1FF4(uint64_t a1)
{
  v6[0] = &unk_1001E6000;
  v6[1] = &unk_1001E6000;
  void v6[2] = &unk_1001E6000;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[3] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
    if (v5 <= 0x3F)
    {
      v6[4] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, v6, a1 + 16);
    }
  }

uint64_t getEnumTagSinglePayload for GetRepairActionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D20A4);
}

uint64_t storeEnumTagSinglePayload for GetRepairActionResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D20B4);
}

void *initializeBufferWithCopyOfBuffer for SupportAppView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100007578((uint64_t *)&unk_100256D30);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v4;
}

uint64_t destroy for SupportAppView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for SupportAppView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

uint64_t assignWithCopy for SupportAppView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v10) = v17(v13, 1LL, v15);
  int v18 = v17(v14, 1LL, v15);
  if (!(_DWORD)v10)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

uint64_t initializeWithTake for SupportAppView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  return a1;
}

uint64_t assignWithTake for SupportAppView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v10) = v17(v13, 1LL, v15);
  int v18 = v17(v14, 1LL, v15);
  if (!(_DWORD)v10)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SupportAppView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D2748);
}

uint64_t sub_1000D2748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D2754(a1, a2, a3, (uint64_t *)&unk_100256D30);
}

uint64_t sub_1000D2754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v12 = sub_100007578(a4);
      uint64_t v11 = *(void *)(v12 - 8);
      uint64_t v13 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }

uint64_t storeEnumTagSinglePayload for SupportAppView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D2804);
}

uint64_t sub_1000D2804(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000D2810(a1, a2, a3, a4, (uint64_t *)&unk_100256D30);
}

uint64_t sub_1000D2810(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v12 = sub_100007578(a5);
      uint64_t v11 = *(void *)(v12 - 8);
      uint64_t v13 = *(int *)(a4 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6 + v13, a2, a2, v12);
  }

  return result;
}

void sub_1000D28BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D28D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  v13[0] = &unk_1001E6000;
  v13[1] = a4;
  uint64_t v9 = type metadata accessor for UnknownStorage(319LL);
  if (v10 <= 0x3F)
  {
    v13[2] = *(void *)(v9 - 8) + 64LL;
    sub_1000BCBD4(319LL, a5, a6);
    if (v12 <= 0x3F)
    {
      void v13[3] = *(void *)(v11 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v13, a1 + 16);
    }
  }

void *initializeBufferWithCopyOfBuffer for SupportAppDevice(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    uint64_t v9 = a2[3];
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    uint64_t v10 = a2[7];
    uint64_t v11 = *(int *)(a3 + 44);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15(v12, v13, v14);
    uint64_t v16 = *(int *)(a3 + 48);
    uint64_t v17 = (char *)v4 + v16;
    int v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
    {
      uint64_t v21 = sub_100007578((uint64_t *)&unk_100256D30);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }
  }

  return v4;
}

uint64_t destroy for SupportAppDevice(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 48);
  uint64_t v7 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for SupportAppDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 48);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  return a1;
}

uint64_t assignWithCopy for SupportAppDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24LL))(v14, v15, v16);
  uint64_t v17 = *(int *)(a3 + 48);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v15) = v22(v18, 1LL, v20);
  int v23 = v22(v19, 1LL, v20);
  if (!(_DWORD)v15)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v18, v19, v20);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }

  if (v23)
  {
LABEL_6:
    uint64_t v24 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  return a1;
}

uint64_t initializeWithTake for SupportAppDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 48);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t assignWithTake for SupportAppDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(int *)(a3 + 44);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(a3 + 48);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v13) = v20(v16, 1LL, v18);
  int v21 = v20(v17, 1LL, v18);
  if (!(_DWORD)v13)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for SupportAppDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D3148);
}

uint64_t sub_1000D3148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 44);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 48);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for SupportAppDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D31F8);
}

uint64_t sub_1000D31F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 44);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 48);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D3298(uint64_t a1)
{
  v6[0] = &unk_1001E60A0;
  v6[1] = &unk_1001E60A0;
  void v6[2] = &unk_1001E60A0;
  v6[3] = &unk_1001E6000;
  v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v6[5] = "\t";
  v6[6] = &unk_1001E6000;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[7] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4( 319LL,  (unint64_t *)&unk_100252E68,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp);
    if (v5 <= 0x3F)
    {
      v6[8] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 9LL, v6, a1 + 16);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for GetSupportAppInfoRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v11(v8, v9, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for Metrics(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100007578(&qword_100257000);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = v14[1];
      void *v13 = *v14;
      v13[1] = v19;
      uint64_t v32 = v11;
      uint64_t v20 = v14[3];
      v13[2] = v14[2];
      void v13[3] = v20;
      uint64_t v21 = *(int *)(v15 + 24);
      uint64_t v22 = (char *)v13 + v21;
      int v23 = (char *)v14 + v21;
      swift_bridgeObjectRetain(v19);
      uint64_t v24 = v20;
      uint64_t v11 = v32;
      swift_bridgeObjectRetain(v24);
      v32(v22, v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v25 = a3[7];
    uint64_t v26 = (_DWORD *)((char *)v4 + v25);
    uint64_t v27 = (_DWORD *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for AccountInfo(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_100007578(&qword_100251F50);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      *uint64_t v26 = *v27;
      v11((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v10);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }
  }

  return v4;
}

uint64_t _s18TrustedPeersHelper25FetchViableBottlesRequestVwxx_0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
    v11(v6 + *(int *)(v7 + 24), v5);
  }

  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

void *initializeWithCopy for GetSupportAppInfoRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v30 = v10;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = *(int *)(v14 + 24);
    uint64_t v20 = (char *)v12 + v19;
    uint64_t v21 = (char *)v13 + v19;
    swift_bridgeObjectRetain(v17);
    uint64_t v22 = v18;
    uint64_t v10 = v30;
    swift_bridgeObjectRetain(v22);
    v30(v20, v21, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v23 = a3[7];
  uint64_t v24 = (_DWORD *)((char *)a1 + v23);
  uint64_t v25 = (_DWORD *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for AccountInfo(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100007578(&qword_100251F50);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    *uint64_t v24 = *v25;
    v10((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  return a1;
}

void *assignWithCopy for GetSupportAppInfoRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v40 + 24);
  v39(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      *uint64_t v11 = *v12;
      uint64_t v18 = v12[1];
      v11[1] = v18;
      v11[2] = v12[2];
      uint64_t v19 = v12[3];
      v11[3] = v19;
      uint64_t v20 = *(int *)(v13 + 24);
      uint64_t v21 = (char *)v11 + v20;
      uint64_t v22 = (char *)v12 + v20;
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v38(v21, v22, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    sub_1000415CC((uint64_t)v11, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v23 = sub_100007578(&qword_100257000);
    memcpy(v11, v12, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_7;
  }

  *uint64_t v11 = *v12;
  uint64_t v34 = v12[1];
  uint64_t v35 = v11[1];
  v11[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v11[2] = v12[2];
  uint64_t v36 = v12[3];
  uint64_t v37 = v11[3];
  v11[3] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v39((char *)v11 + *(int *)(v13 + 24), (char *)v12 + *(int *)(v13 + 24), v9);
LABEL_7:
  uint64_t v24 = a3[7];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for AccountInfo(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1LL, v27);
  int v31 = v29(v26, 1LL, v27);
  if (!v30)
  {
    if (!v31)
    {
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v39(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v9);
      return a1;
    }

    sub_1000415CC((uint64_t)v25, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v31)
  {
LABEL_12:
    uint64_t v32 = sub_100007578(&qword_100251F50);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  return a1;
}

void *_s18TrustedPeersHelper27FetchPolicyDocumentsRequestVwtk_0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = a3[7];
  uint64_t v19 = (_DWORD *)((char *)a1 + v18);
  uint64_t v20 = (_DWORD *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for AccountInfo(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100007578(&qword_100251F50);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    _DWORD *v19 = *v20;
    v10((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

void *assignWithTake for GetSupportAppInfoRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v35 + 40);
  v34(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      __int128 v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))( (char *)v11 + *(int *)(v13 + 24),  (char *)v12 + *(int *)(v13 + 24),  v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    sub_1000415CC((uint64_t)v11, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v19 = sub_100007578(&qword_100257000);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v30 = v12[1];
  uint64_t v31 = v11[1];
  *uint64_t v11 = *v12;
  v11[1] = v30;
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = v12[3];
  uint64_t v33 = v11[3];
  v11[2] = v12[2];
  v11[3] = v32;
  swift_bridgeObjectRelease(v33);
  v34((char *)v11 + *(int *)(v13 + 24), (char *)v12 + *(int *)(v13 + 24), v9);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for AccountInfo(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1LL, v23);
  int v27 = v25(v22, 1LL, v23);
  if (!v26)
  {
    if (!v27)
    {
      *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
      v34(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v9);
      return a1;
    }

    sub_1000415CC((uint64_t)v21, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v27)
  {
LABEL_12:
    uint64_t v28 = sub_100007578(&qword_100251F50);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetSupportAppInfoRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D3EFC);
}

uint64_t sub_1000D3F00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
  }

  else
  {
    uint64_t v10 = sub_100007578(&qword_100257000);
    uint64_t v7 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v10;
      uint64_t v9 = a3[6];
    }

    else
    {
      uint64_t v8 = sub_100007578(&qword_100251F50);
      uint64_t v7 = *(void *)(v8 - 8);
      uint64_t v9 = a3[7];
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GetSupportAppInfoRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D3FA8);
}

uint64_t sub_1000D3FAC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[5];
  }

  else
  {
    uint64_t v12 = sub_100007578(&qword_100257000);
    uint64_t v9 = *(void *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v10 = sub_100007578(&qword_100251F50);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = a4[7];
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1000D4050(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for GetSupportAppInfoResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    uint64_t v7 = *(int *)(a3 + 36);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v5;
}

uint64_t destroy for GetSupportAppInfoResponse(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for GetSupportAppInfoResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  uint64_t v5 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = (uint64_t)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t *assignWithCopy for GetSupportAppInfoResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for GetSupportAppInfoResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for GetSupportAppInfoResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetSupportAppInfoResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D43C0);
}

uint64_t sub_1000D43C0(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 36)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for GetSupportAppInfoResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D4448);
}

char *sub_1000D4448(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 36)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000D44BC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[3] = &unk_1001E6000;
  v4[4] = &unk_1001E60A0;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *_s18TrustedPeersHelper12ResetRequestVwCP_0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    uint64_t v10 = a3[9];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = a3[10];
    int v16 = (_DWORD *)((char *)v4 + v15);
    int v17 = (_DWORD *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for AccountInfo(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_100007578(&qword_100251F50);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      _DWORD *v16 = *v17;
      v14((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v13);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    uint64_t v22 = a3[11];
    uint64_t v23 = (void *)((char *)v4 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = type metadata accessor for Metrics(0LL);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
    {
      uint64_t v27 = sub_100007578(&qword_100257000);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      uint64_t v28 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v28;
      uint64_t v29 = v24[3];
      v23[2] = v24[2];
      v23[3] = v29;
      uint64_t v30 = *(int *)(v25 + 24);
      uint64_t v31 = (char *)v23 + v30;
      uint64_t v32 = (char *)v24 + v30;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      v14((uint64_t)v31, (uint64_t)v32, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
    }
  }

  return v4;
}

uint64_t _s18TrustedPeersHelper12ResetRequestVwxx_0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[9];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = type metadata accessor for AccountInfo(0LL);
  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = type metadata accessor for Metrics(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v8 + 8));
    swift_bridgeObjectRelease(*(void *)(v8 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 24), v5);
  }

  return result;
}

uint64_t _s18TrustedPeersHelper12ResetRequestVwcp_0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = a3[10];
  uint64_t v15 = (_DWORD *)(a1 + v14);
  int v16 = (_DWORD *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AccountInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100007578(&qword_100251F50);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    *uint64_t v15 = *v16;
    v13((uint64_t)v15 + *(int *)(v17 + 20), (uint64_t)v16 + *(int *)(v17 + 20), v12);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Metrics(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100007578(&qword_100257000);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    uint64_t v26 = v22[1];
    void *v21 = *v22;
    v21[1] = v26;
    uint64_t v27 = v22[3];
    v21[2] = v22[2];
    v21[3] = v27;
    uint64_t v28 = *(int *)(v23 + 24);
    uint64_t v29 = (char *)v21 + v28;
    uint64_t v30 = (char *)v22 + v28;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    v13((uint64_t)v29, (uint64_t)v30, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  return a1;
}

uint64_t _s18TrustedPeersHelper12ResetRequestVwca_0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 32) = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  uint64_t v11 = a3[9];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 24);
  v44(v12, v13, v14);
  uint64_t v15 = a3[10];
  int v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for AccountInfo(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1LL, v18);
  int v22 = v20(v17, 1LL, v18);
  if (v21)
  {
    if (!v22)
    {
      *(_DWORD *)int v16 = *(_DWORD *)v17;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))( &v16[*(int *)(v18 + 20)],  &v17[*(int *)(v18 + 20)],  v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v22)
  {
    sub_1000415CC((uint64_t)v16, type metadata accessor for AccountInfo);
LABEL_6:
    uint64_t v23 = sub_100007578(&qword_100251F50);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_DWORD *)int v16 = *(_DWORD *)v17;
  v44((uint64_t)&v16[*(int *)(v18 + 20)], (uint64_t)&v17[*(int *)(v18 + 20)], v14);
LABEL_7:
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)((char *)a2 + v24);
  uint64_t v27 = type metadata accessor for Metrics(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1LL, v27);
  int v31 = v29(v26, 1LL, v27);
  if (!v30)
  {
    if (!v31)
    {
      *uint64_t v25 = *v26;
      uint64_t v40 = v26[1];
      uint64_t v41 = v25[1];
      v25[1] = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
      v25[2] = v26[2];
      uint64_t v42 = v26[3];
      uint64_t v43 = v25[3];
      v25[3] = v42;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease(v43);
      v44((uint64_t)v25 + *(int *)(v27 + 24), (uint64_t)v26 + *(int *)(v27 + 24), v14);
      return a1;
    }

    sub_1000415CC((uint64_t)v25, type metadata accessor for Metrics);
    goto LABEL_12;
  }

  if (v31)
  {
LABEL_12:
    uint64_t v38 = sub_100007578(&qword_100257000);
    memcpy(v25, v26, *(void *)(*(void *)(v38 - 8) + 64LL));
    return a1;
  }

  *uint64_t v25 = *v26;
  uint64_t v32 = v26[1];
  v25[1] = v32;
  v25[2] = v26[2];
  uint64_t v33 = v26[3];
  v25[3] = v33;
  uint64_t v34 = *(int *)(v27 + 24);
  uint64_t v35 = (char *)v25 + v34;
  uint64_t v36 = (char *)v26 + v34;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  v37(v35, v36, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  return a1;
}

uint64_t _s18TrustedPeersHelper12ResetRequestVwtk_0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[10];
  uint64_t v13 = (_DWORD *)(a1 + v12);
  uint64_t v14 = (_DWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AccountInfo(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578(&qword_100251F50);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    _DWORD *v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v18 = a3[11];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  uint64_t v20 = (_OWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Metrics(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100007578(&qword_100257000);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    __int128 v24 = v20[1];
    _OWORD *v19 = *v20;
    v19[1] = v24;
    v11((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

uint64_t _s18TrustedPeersHelper12ResetRequestVwta_0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v39 = *(void *)(v13 - 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v38(v11, v12, v13);
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AccountInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))( &v15[*(int *)(v17 + 20)],  &v16[*(int *)(v17 + 20)],  v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_1000415CC((uint64_t)v15, type metadata accessor for AccountInfo);
LABEL_6:
    uint64_t v22 = sub_100007578(&qword_100251F50);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v38((uint64_t)&v15[*(int *)(v17 + 20)], (uint64_t)&v16[*(int *)(v17 + 20)], v13);
LABEL_7:
  uint64_t v23 = a3[11];
  __int128 v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for Metrics(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28(v25, 1LL, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v34 = v25[1];
      uint64_t v35 = v24[1];
      *__int128 v24 = *v25;
      v24[1] = v34;
      swift_bridgeObjectRelease(v35);
      uint64_t v36 = v25[3];
      uint64_t v37 = v24[3];
      v24[2] = v25[2];
      v24[3] = v36;
      swift_bridgeObjectRelease(v37);
      v38((uint64_t)v24 + *(int *)(v26 + 24), (uint64_t)v25 + *(int *)(v26 + 24), v13);
      return a1;
    }

    sub_1000415CC((uint64_t)v24, type metadata accessor for Metrics);
    goto LABEL_12;
  }

  if (v30)
  {
LABEL_12:
    uint64_t v32 = sub_100007578(&qword_100257000);
    memcpy(v24, v25, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  __int128 v31 = *((_OWORD *)v25 + 1);
  *(_OWORD *)__int128 v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v31;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))( (char *)v24 + *(int *)(v26 + 24),  (char *)v25 + *(int *)(v26 + 24),  v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResetAccountCDPContentsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D51FC);
}

uint64_t sub_1000D5200(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[9];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F50);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[10];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100257000);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[11];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for ResetAccountCDPContentsRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D52D8);
}

uint64_t sub_1000D52DC(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[9];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100251F50);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[10];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100257000);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[11];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D53A8(uint64_t a1)
{
  v8[0] = "\t";
  v8[1] = &unk_1001E6000;
  v8[2] = &unk_1001E6000;
  v8[3] = &unk_1001E60A0;
  v8[4] = &unk_1001E60A0;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[5] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
    if (v5 <= 0x3F)
    {
      v8[6] = *(void *)(v4 - 8) + 64LL;
      sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
      if (v7 <= 0x3F)
      {
        void v8[7] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 8LL, v8, a1 + 16);
      }
    }
  }

uint64_t getEnumTagSinglePayload for ResetAccountCDPContentsResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D54B0);
}

uint64_t storeEnumTagSinglePayload for ResetAccountCDPContentsResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D54C0);
}

uint64_t *initializeBufferWithCopyOfBuffer for PasscodeGeneration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    unint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t _s18TrustedPeersHelper11AccountInfoVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

void *initializeWithCopy for PasscodeGeneration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for PasscodeGeneration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

void *_s18TrustedPeersHelper18PasscodeGenerationVwtk_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PasscodeGeneration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PasscodeGeneration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D5708);
}

uint64_t sub_1000D570C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PasscodeGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D5758);
}

uint64_t sub_1000D575C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1000D57A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D57B0(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t sub_1000D57B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a4;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v6 <= 0x3F)
  {
    v7[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v7, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for EscrowInformation(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    uint64_t v9 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = a2[11];
    uint64_t v11 = a3[11];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v10;
    uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15(v12, v13, v14);
    uint64_t v16 = a3[12];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
    {
      uint64_t v21 = sub_100007578((uint64_t *)&unk_100256D30);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }

    uint64_t v23 = a3[13];
    __int128 v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for EscrowInformation.Metadata(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
    {
      uint64_t v28 = sub_100007578(&qword_100252098);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      v15((uint64_t)v24, (uint64_t)v25, v14);
      uint64_t v29 = *(int *)(v26 + 20);
      uint64_t v30 = *(void *)&v25[v29];
      *(void *)&v24[v29] = v30;
      __int128 v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
      swift_retain(v30);
      v31(v24, 0LL, 1LL, v26);
    }
  }

  return v4;
}

uint64_t destroy for EscrowInformation(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[11];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  unint64_t v6 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  uint64_t v7 = (char *)a1 + a2[12];
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (char *)a1 + a2[13];
  uint64_t v11 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
  if (!(_DWORD)result)
  {
    v6(v10, v5);
    return swift_release(*(void *)&v10[*(int *)(v11 + 20)]);
  }

  return result;
}

uint64_t initializeWithCopy for EscrowInformation(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = a3[11];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  uint64_t v15 = a3[12];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  uint64_t v21 = a3[13];
  uint64_t v22 = (char *)(a1 + v21);
  uint64_t v23 = (char *)(a2 + v21);
  uint64_t v24 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24))
  {
    uint64_t v26 = sub_100007578(&qword_100252098);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    v14((uint64_t)v22, (uint64_t)v23, v13);
    uint64_t v27 = *(int *)(v24 + 20);
    uint64_t v28 = *(void *)&v23[v27];
    *(void *)&v22[v27] = v28;
    uint64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56);
    swift_retain(v28);
    v29(v22, 0LL, 1LL, v24);
  }

  return a1;
}

uint64_t assignWithCopy for EscrowInformation(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v44 = *(void *)(v17 - 8);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 24);
  v43(v15, v16, v17);
  uint64_t v18 = a3[12];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1LL, v21);
  int v25 = v23(v20, 1LL, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    uint64_t v26 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_7:
  uint64_t v27 = a3[13];
  uint64_t v28 = (char *)(a1 + v27);
  uint64_t v29 = (char *)(a2 + v27);
  uint64_t v30 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1LL, v30);
  int v34 = v32(v29, 1LL, v30);
  if (!v33)
  {
    if (!v34)
    {
      v43((uint64_t)v28, (uint64_t)v29, v17);
      uint64_t v40 = *(int *)(v30 + 20);
      uint64_t v41 = *(void *)&v29[v40];
      uint64_t v42 = *(void *)&v28[v40];
      *(void *)&v28[v40] = v41;
      swift_retain(v41);
      swift_release(v42);
      return a1;
    }

    sub_1000415CC((uint64_t)v28, type metadata accessor for EscrowInformation.Metadata);
    goto LABEL_12;
  }

  if (v34)
  {
LABEL_12:
    uint64_t v38 = sub_100007578(&qword_100252098);
    memcpy(v28, v29, *(void *)(*(void *)(v38 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v28, v29, v17);
  uint64_t v35 = *(int *)(v30 + 20);
  uint64_t v36 = *(void *)&v29[v35];
  *(void *)&v28[v35] = v36;
  uint64_t v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56);
  swift_retain(v36);
  v37(v28, 0LL, 1LL, v30);
  return a1;
}

uint64_t initializeWithTake for EscrowInformation(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  uint64_t v8 = a3[11];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL);
  v12(v9, v10, v11);
  uint64_t v13 = a3[12];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v19 = a3[13];
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100007578(&qword_100252098);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    v12((uint64_t)v20, (uint64_t)v21, v11);
    *(void *)&v20[*(int *)(v22 + 20)] = *(void *)&v21[*(int *)(v22 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  return a1;
}

uint64_t assignWithTake for EscrowInformation(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v38 = *(void *)(v15 - 8);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 40);
  v37(v13, v14, v15);
  uint64_t v16 = a3[12];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    uint64_t v24 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  uint64_t v25 = a3[13];
  uint64_t v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  uint64_t v28 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (!v31)
  {
    if (!v32)
    {
      v37((uint64_t)v26, (uint64_t)v27, v15);
      uint64_t v35 = *(int *)(v28 + 20);
      uint64_t v36 = *(void *)&v26[v35];
      *(void *)&v26[v35] = *(void *)&v27[v35];
      swift_release(v36);
      return a1;
    }

    sub_1000415CC((uint64_t)v26, type metadata accessor for EscrowInformation.Metadata);
    goto LABEL_12;
  }

  if (v32)
  {
LABEL_12:
    uint64_t v33 = sub_100007578(&qword_100252098);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v26, v27, v15);
  *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for EscrowInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D645C);
}

uint64_t sub_1000D645C(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[11];
    }

    else
    {
      uint64_t v12 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[12];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100252098);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[13];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for EscrowInformation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D6534);
}

uint64_t sub_1000D6534(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[11];
    }

    else
    {
      uint64_t v12 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[12];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100252098);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[13];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D65FC(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[1] = &unk_1001E6000;
  v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[3] = "\t";
  v8[4] = "\t";
  v8[5] = &unk_1001E6000;
  v8[6] = &unk_1001E6000;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v8[7] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4( 319LL,  (unint64_t *)&unk_100252E68,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp);
    if (v5 <= 0x3F)
    {
      void v8[8] = *(void *)(v4 - 8) + 64LL;
      sub_1000BCBD4(319LL, (unint64_t *)&unk_100254D10, type metadata accessor for EscrowInformation.Metadata);
      if (v7 <= 0x3F)
      {
        v8[9] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 10LL, v8, a1 + 16);
      }
    }
  }

uint64_t *_s18TrustedPeersHelper8ViewKeysVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }

  swift_retain(v9);
  return a1;
}

uint64_t _s18TrustedPeersHelper8ViewKeysVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t _s18TrustedPeersHelper8ViewKeysVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t _s18TrustedPeersHelper8ViewKeysVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t _s18TrustedPeersHelper8ViewKeysVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s18TrustedPeersHelper8ViewKeysVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EscrowInformation.Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D694C);
}

uint64_t sub_1000D6950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for EscrowInformation.Metadata( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D69D8);
}

uint64_t sub_1000D69DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000D6A54(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for EscrowInformation.Metadata.ClientMetadata( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v30 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v30);
  }

  else
  {
    __int128 v7 = *(_OWORD *)a2;
    __int128 v8 = *((_OWORD *)a2 + 1);
    uint64_t v9 = a2[5];
    uint64_t v33 = a2[4];
    *(void *)(a1 + 32) = v33;
    *(void *)(a1 + 40) = v9;
    uint64_t v11 = a2[6];
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v10;
    uint64_t v13 = a2[8];
    uint64_t v12 = a2[9];
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v12;
    uint64_t v15 = a2[10];
    uint64_t v14 = a2[11];
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v14;
    uint64_t v17 = a2[12];
    uint64_t v16 = a2[13];
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v16;
    uint64_t v19 = a2[14];
    uint64_t v18 = a2[15];
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v18;
    uint64_t v21 = a2[16];
    uint64_t v20 = a2[17];
    *(void *)(a1 + 128) = v21;
    *(void *)(a1 + 136) = v20;
    uint64_t v22 = *(int *)(a3 + 60);
    uint64_t v34 = (uint64_t)a2 + v22;
    uint64_t v35 = a1 + v22;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
    uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
    int v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    v32(v35, v34, v23);
    uint64_t v24 = *(int *)(a3 + 64);
    uint64_t v25 = (char *)v4 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
    {
      uint64_t v29 = sub_100007578((uint64_t *)&unk_100256D30);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
    }
  }

  return v4;
}

uint64_t destroy for EscrowInformation.Metadata.ClientMetadata(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 60);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 64);
  uint64_t v7 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for EscrowInformation.Metadata.ClientMetadata( uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5 = *a2;
  __int128 v6 = a2[1];
  uint64_t v8 = *((void *)a2 + 4);
  uint64_t v7 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  uint64_t v10 = *((void *)a2 + 6);
  uint64_t v9 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v9;
  uint64_t v12 = *((void *)a2 + 8);
  uint64_t v11 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v11;
  uint64_t v14 = *((void *)a2 + 10);
  uint64_t v13 = *((void *)a2 + 11);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v13;
  uint64_t v16 = *((void *)a2 + 12);
  uint64_t v15 = *((void *)a2 + 13);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v15;
  uint64_t v18 = *((void *)a2 + 14);
  uint64_t v17 = *((void *)a2 + 15);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v17;
  uint64_t v20 = *((void *)a2 + 16);
  uint64_t v19 = *((void *)a2 + 17);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v19;
  uint64_t v21 = *(int *)(a3 + 60);
  uint64_t v31 = (uint64_t)a2 + v21;
  uint64_t v32 = a1 + v21;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v22 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  v30(v32, v31, v22);
  uint64_t v23 = *(int *)(a3 + 64);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  return a1;
}

void *assignWithCopy for EscrowInformation.Metadata.ClientMetadata(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[9] = a2[9];
  uint64_t v12 = a2[10];
  uint64_t v13 = a1[10];
  a1[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[11] = a2[11];
  uint64_t v14 = a2[12];
  uint64_t v15 = a1[12];
  a1[12] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[13] = a2[13];
  uint64_t v16 = a2[14];
  uint64_t v17 = a1[14];
  a1[14] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[15] = a2[15];
  uint64_t v18 = a2[16];
  uint64_t v19 = a1[16];
  a1[16] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[17] = a2[17];
  uint64_t v20 = *(int *)(a3 + 60);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 24LL))(v21, v22, v23);
  uint64_t v24 = *(int *)(a3 + 64);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  LODWORD(v22) = v29(v25, 1LL, v27);
  int v30 = v29(v26, 1LL, v27);
  if (!(_DWORD)v22)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }

  if (v30)
  {
LABEL_6:
    uint64_t v31 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  return a1;
}

uint64_t initializeWithTake for EscrowInformation.Metadata.ClientMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  __int128 v6 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v7 = *(int *)(a3 + 60);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 120) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 64);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t assignWithTake for EscrowInformation.Metadata.ClientMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v19 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v18;
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v20 = *(int *)(a3 + 60);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40LL))(v21, v22, v23);
  uint64_t v24 = *(int *)(a3 + 64);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  LODWORD(v22) = v29(v25, 1LL, v27);
  int v30 = v29(v26, 1LL, v27);
  if (!(_DWORD)v22)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v25, v26, v27);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }

  if (v30)
  {
LABEL_6:
    uint64_t v31 = sub_100007578((uint64_t *)&unk_100256D30);
    memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for EscrowInformation.Metadata.ClientMetadata( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D7400);
}

uint64_t sub_1000D7400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 60);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 64);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for EscrowInformation.Metadata.ClientMetadata( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D74B0);
}

uint64_t sub_1000D74B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 60);
    }

    else
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100256D30);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 64);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D7550(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[3] = &unk_1001E6000;
  v6[4] = &unk_1001E6000;
  void v6[5] = &unk_1001E6000;
  v6[6] = &unk_1001E6000;
  v6[7] = &unk_1001E6000;
  v6[8] = &unk_1001E6000;
  void v6[9] = &unk_1001E6000;
  v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[11] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4( 319LL,  (unint64_t *)&unk_100252E68,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp);
    if (v5 <= 0x3F)
    {
      v6[12] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 13LL, v6, a1 + 16);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for PCSService(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_1000084E8(v7, v8);
    v4[1] = v7;
    void v4[2] = v8;
    uint64_t v9 = a2[4];
    void v4[3] = a2[3];
    v4[4] = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
  }

  return v4;
}

uint64_t destroy for PCSService(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for PCSService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_1000084E8(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  return a1;
}

uint64_t assignWithCopy for PCSService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_1000084E8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_10000852C(v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for PCSService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PCSService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000852C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for PCSService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D7960);
}

uint64_t sub_1000D7960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for PCSService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D79E8);
}

uint64_t sub_1000D79E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000D7A5C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[1] = &unk_1001E5FD8;
  void v4[2] = &unk_1001E6000;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *_s18TrustedPeersHelper27FetchPolicyDocumentsRequestVwCP_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Metrics(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100007578(&qword_100257000);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      uint64_t v32 = v12;
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      uint64_t v21 = *(int *)(v16 + 24);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain(v19);
      uint64_t v24 = v20;
      uint64_t v12 = v32;
      swift_bridgeObjectRetain(v24);
      v32(v22, v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v25 = a3[7];
    uint64_t v26 = (_DWORD *)((char *)v7 + v25);
    uint64_t v27 = (_DWORD *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for AccountInfo(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_100007578(&qword_100251F50);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      *uint64_t v26 = *v27;
      v12((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v11);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }
  }

  return v7;
}

uint64_t _s18TrustedPeersHelper27FetchPolicyDocumentsRequestVwxx_0(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (char *)a1 + a2[6];
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(*((void *)v6 + 1));
    swift_bridgeObjectRelease(*((void *)v6 + 3));
    v11(&v6[*(int *)(v7 + 24)], v5);
  }

  uint64_t v8 = (char *)a1 + a2[7];
  uint64_t v9 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v11)(&v8[*(int *)(v9 + 20)], v5);
  }
  return result;
}

uint64_t *_s18TrustedPeersHelper27FetchPolicyDocumentsRequestVwcp_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Metrics(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100007578(&qword_100257000);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    uint64_t v31 = v11;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    void v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain(v18);
    uint64_t v23 = v19;
    uint64_t v11 = v31;
    swift_bridgeObjectRetain(v23);
    v31(v21, v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v24 = a3[7];
  uint64_t v25 = (_DWORD *)((char *)a1 + v24);
  uint64_t v26 = (_DWORD *)((char *)a2 + v24);
  uint64_t v27 = type metadata accessor for AccountInfo(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_100007578(&qword_100251F50);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    *uint64_t v25 = *v26;
    v11((char *)v25 + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v10);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for DirectPCSIdentityFetchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D7FCC);
}

uint64_t storeEnumTagSinglePayload for DirectPCSIdentityFetchRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7FDC);
}

uint64_t *initializeBufferWithCopyOfBuffer for DirectPCSIdentity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100007578(&qword_1002517E0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for PCSService(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
    {
      uint64_t v21 = sub_100007578(&qword_1002517F8);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
      uint64_t v22 = v18[1];
      unint64_t v23 = v18[2];
      sub_1000084E8(v22, v23);
      v17[1] = v22;
      v17[2] = v23;
      uint64_t v24 = v18[4];
      v17[3] = v18[3];
      v17[4] = v24;
      uint64_t v25 = *(int *)(v19 + 28);
      uint64_t v26 = (char *)v17 + v25;
      uint64_t v27 = (char *)v18 + v25;
      swift_bridgeObjectRetain(v24);
      v8((uint64_t *)v26, (uint64_t *)v27, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }
  }

  return a1;
}

uint64_t destroy for DirectPCSIdentity(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v11(a1, v4);
  int v5 = &a1[*(int *)(a2 + 20)];
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = &a1[*(int *)(a2 + 24)];
  uint64_t v9 = type metadata accessor for PCSService(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    sub_10000852C(*((void *)v8 + 1), *((void *)v8 + 2));
    swift_bridgeObjectRelease(*((void *)v8 + 4));
    return v11(&v8[*(int *)(v9 + 28)], v4);
  }

  return result;
}

uint64_t initializeWithCopy for DirectPCSIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578(&qword_1002517E0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for PCSService(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100007578(&qword_1002517F8);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    uint64_t v20 = v16[1];
    unint64_t v21 = v16[2];
    sub_1000084E8(v20, v21);
    v15[1] = v20;
    v15[2] = v21;
    uint64_t v22 = v16[4];
    v15[3] = v16[3];
    v15[4] = v22;
    uint64_t v23 = *(int *)(v17 + 28);
    uint64_t v24 = (char *)v15 + v23;
    uint64_t v25 = (char *)v16 + v23;
    swift_bridgeObjectRetain(v22);
    v7((uint64_t)v24, (uint64_t)v25, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  return a1;
}

uint64_t assignWithCopy for DirectPCSIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 24);
  v39(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for PCSService(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
      uint64_t v33 = v18[1];
      unint64_t v34 = v18[2];
      sub_1000084E8(v33, v34);
      uint64_t v35 = v17[1];
      unint64_t v36 = v17[2];
      v17[1] = v33;
      v17[2] = v34;
      sub_10000852C(v35, v36);
      v17[3] = v18[3];
      uint64_t v37 = v18[4];
      uint64_t v38 = v17[4];
      v17[4] = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v38);
      v39((uint64_t)v17 + *(int *)(v19 + 28), (uint64_t)v18 + *(int *)(v19 + 28), v6);
      return a1;
    }

    sub_1000415CC((uint64_t)v17, type metadata accessor for PCSService);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v31 = sub_100007578(&qword_1002517F8);
    memcpy(v17, v18, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v24 = v18[1];
  unint64_t v25 = v18[2];
  sub_1000084E8(v24, v25);
  v17[1] = v24;
  v17[2] = v25;
  v17[3] = v18[3];
  uint64_t v26 = v18[4];
  v17[4] = v26;
  uint64_t v27 = *(int *)(v19 + 28);
  uint64_t v28 = (char *)v17 + v27;
  uint64_t v29 = (char *)v18 + v27;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  swift_bridgeObjectRetain(v26);
  v30(v28, v29, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

char *initializeWithTake for DirectPCSIdentity(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578(&qword_1002517E0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for PCSService(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100007578(&qword_1002517F8);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
    v7(&v15[*(int *)(v17 + 28)], &v16[*(int *)(v17 + 28)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  return a1;
}

uint64_t assignWithTake for DirectPCSIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 40);
  v30(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for PCSService(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
      uint64_t v26 = *(void *)(v17 + 8);
      unint64_t v27 = *(void *)(v17 + 16);
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
      sub_10000852C(v26, v27);
      uint64_t v28 = *(void *)(v18 + 32);
      uint64_t v29 = *(void *)(v17 + 32);
      *(void *)(v17 + 24) = *(void *)(v18 + 24);
      *(void *)(v17 + 32) = v28;
      swift_bridgeObjectRelease(v29);
      v30(v17 + *(int *)(v19 + 28), v18 + *(int *)(v19 + 28), v6);
      return a1;
    }

    sub_1000415CC(v17, type metadata accessor for PCSService);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100007578(&qword_1002517F8);
    memcpy((void *)v17, (const void *)v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v17 + *(int *)(v19 + 28), v18 + *(int *)(v19 + 28), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for DirectPCSIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D8ADC);
}

uint64_t sub_1000D8ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA16C(a1, a2, a3, &qword_1002517E0, &qword_1002517F8);
}

uint64_t storeEnumTagSinglePayload for DirectPCSIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D8AFC);
}

uint64_t sub_1000D8AFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000DA234(a1, a2, a3, a4, &qword_1002517E0, &qword_1002517F8);
}

void sub_1000D8B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for DirectPCSIdentityFetchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D8B58);
}

uint64_t storeEnumTagSinglePayload for DirectPCSIdentityFetchResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D8B68);
}

uint64_t sub_1000D8B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA7CC( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.BridgeObject + 64,  (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t *_s18TrustedPeersHelper7MetricsVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    int v3 = (uint64_t *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v12);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v3;
}

uint64_t _s18TrustedPeersHelper7MetricsVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *_s18TrustedPeersHelper7MetricsVwcp_0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

void *_s18TrustedPeersHelper7MetricsVwca_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *_s18TrustedPeersHelper23SignedPeerPermanentInfoVwtk_0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

void *_s18TrustedPeersHelper7MetricsVwta_0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentCKKSItemSpecifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D8EA0);
}

uint64_t sub_1000D8EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for CurrentCKKSItemSpecifier( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D8F2C);
}

uint64_t sub_1000D8F30(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t *_s18TrustedPeersHelper27FetchPolicyDocumentsRequestVwca_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v42 + 24);
  v41(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  int v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Metrics(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      void *v13 = *v14;
      uint64_t v20 = v14[1];
      v13[1] = v20;
      v13[2] = v14[2];
      uint64_t v21 = v14[3];
      void v13[3] = v21;
      uint64_t v22 = *(int *)(v15 + 24);
      int v23 = (char *)v13 + v22;
      uint64_t v24 = (char *)v14 + v22;
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v40(v23, v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_1000415CC((uint64_t)v13, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v25 = sub_100007578(&qword_100257000);
    memcpy(v13, v14, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  void *v13 = *v14;
  uint64_t v36 = v14[1];
  uint64_t v37 = v13[1];
  v13[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v13[2] = v14[2];
  uint64_t v38 = v14[3];
  uint64_t v39 = v13[3];
  void v13[3] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v41((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v11);
LABEL_7:
  uint64_t v26 = a3[7];
  unint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for AccountInfo(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1LL, v29);
  int v33 = v31(v28, 1LL, v29);
  if (!v32)
  {
    if (!v33)
    {
      *(_DWORD *)unint64_t v27 = *(_DWORD *)v28;
      v41(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v11);
      return a1;
    }

    sub_1000415CC((uint64_t)v27, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v33)
  {
LABEL_12:
    uint64_t v34 = sub_100007578(&qword_100251F50);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)unint64_t v27 = *(_DWORD *)v28;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
  return a1;
}

uint64_t *_s18TrustedPeersHelper27FetchPolicyDocumentsRequestVwta_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v36 = *(void *)(v10 - 8);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v36 + 40);
  v35(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)((char *)a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      __int128 v19 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v19;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))( (char *)v12 + *(int *)(v14 + 24),  (char *)v13 + *(int *)(v14 + 24),  v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    sub_1000415CC((uint64_t)v12, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v20 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v31 = v13[1];
  uint64_t v32 = v12[1];
  *uint64_t v12 = *v13;
  v12[1] = v31;
  swift_bridgeObjectRelease(v32);
  uint64_t v33 = v13[3];
  uint64_t v34 = v12[3];
  v12[2] = v13[2];
  v12[3] = v33;
  swift_bridgeObjectRelease(v34);
  v35((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v10);
LABEL_7:
  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  int v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for AccountInfo(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  int v28 = v26(v23, 1LL, v24);
  if (!v27)
  {
    if (!v28)
    {
      *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
      v35(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v10);
      return a1;
    }

    sub_1000415CC((uint64_t)v22, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v28)
  {
LABEL_12:
    uint64_t v29 = sub_100007578(&qword_100251F50);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentItemFetchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D94FC);
}

uint64_t sub_1000D9500(char *a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[5];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[6];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100251F50);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[7];
      }
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t storeEnumTagSinglePayload for CurrentItemFetchRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D95D8);
}

char *sub_1000D95DC(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[6];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100251F50);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[7];
      }
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CurrentCKKSItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100007578(&qword_1002517E0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v16 = *(int *)(a3 + 24);
    int v17 = (uint64_t *)((char *)a1 + v16);
    int v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
    {
      uint64_t v21 = sub_100007578((uint64_t *)&unk_100256F50);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      uint64_t v22 = v18[1];
      *int v17 = *v18;
      v17[1] = v22;
      uint64_t v23 = v18[3];
      v17[2] = v18[2];
      v17[3] = v23;
      uint64_t v24 = *(int *)(v19 + 24);
      uint64_t v25 = (char *)v17 + v24;
      uint64_t v26 = (char *)v18 + v24;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v8((uint64_t *)v25, (uint64_t *)v26, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }
  }

  return a1;
}

uint64_t destroy for CurrentCKKSItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v11(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v8 + 8));
    swift_bridgeObjectRelease(*(void *)(v8 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 24), v4);
  }

  return result;
}

uint64_t initializeWithCopy for CurrentCKKSItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578(&qword_1002517E0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100007578((uint64_t *)&unk_100256F50);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    uint64_t v20 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v20;
    uint64_t v21 = v16[3];
    v15[2] = v16[2];
    v15[3] = v21;
    uint64_t v22 = *(int *)(v17 + 24);
    uint64_t v23 = (char *)v15 + v22;
    uint64_t v24 = (char *)v16 + v22;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    v7((uint64_t)v23, (uint64_t)v24, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  return a1;
}

uint64_t assignWithCopy for CurrentCKKSItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 24);
  v36(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      *uint64_t v17 = *v18;
      uint64_t v32 = v18[1];
      uint64_t v33 = v17[1];
      v17[1] = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      v17[2] = v18[2];
      uint64_t v34 = v18[3];
      uint64_t v35 = v17[3];
      v17[3] = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
      v36((uint64_t)v17 + *(int *)(v19 + 24), (uint64_t)v18 + *(int *)(v19 + 24), v6);
      return a1;
    }

    sub_1000415CC((uint64_t)v17, type metadata accessor for CurrentCKKSItemSpecifier);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v30 = sub_100007578((uint64_t *)&unk_100256F50);
    memcpy(v17, v18, *(void *)(*(void *)(v30 - 8) + 64LL));
    return a1;
  }

  *uint64_t v17 = *v18;
  uint64_t v24 = v18[1];
  v17[1] = v24;
  v17[2] = v18[2];
  uint64_t v25 = v18[3];
  v17[3] = v25;
  uint64_t v26 = *(int *)(v19 + 24);
  int v27 = (char *)v17 + v26;
  int v28 = (char *)v18 + v26;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  v29(v27, v28, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

char *initializeWithTake for CurrentCKKSItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100007578(&qword_1002517E0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100007578((uint64_t *)&unk_100256F50);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    __int128 v20 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v20;
    v7(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  return a1;
}

uint64_t assignWithTake for CurrentCKKSItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 40);
  v31(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100007578(&qword_1002517E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      uint64_t v27 = v18[1];
      uint64_t v28 = v17[1];
      *uint64_t v17 = *v18;
      v17[1] = v27;
      swift_bridgeObjectRelease(v28);
      uint64_t v29 = v18[3];
      uint64_t v30 = v17[3];
      v17[2] = v18[2];
      v17[3] = v29;
      swift_bridgeObjectRelease(v30);
      v31((uint64_t)v17 + *(int *)(v19 + 24), (uint64_t)v18 + *(int *)(v19 + 24), v6);
      return a1;
    }

    sub_1000415CC((uint64_t)v17, type metadata accessor for CurrentCKKSItemSpecifier);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_100007578((uint64_t *)&unk_100256F50);
    memcpy(v17, v18, *(void *)(*(void *)(v25 - 8) + 64LL));
    return a1;
  }

  __int128 v24 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v24;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))( (char *)v17 + *(int *)(v19 + 24),  (char *)v18 + *(int *)(v19 + 24),  v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentCKKSItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DA158);
}

uint64_t sub_1000DA158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA16C(a1, a2, a3, &qword_1002517E0, (uint64_t *)&unk_100256F50);
}

uint64_t sub_1000DA16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
  {
    uint64_t v12 = v10;
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    uint64_t v14 = a1;
  }

  else
  {
    uint64_t v15 = sub_100007578(a4);
    uint64_t v16 = *(void *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == (_DWORD)a2)
    {
      uint64_t v12 = v15;
      uint64_t v17 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v12 = sub_100007578(a5);
      uint64_t v16 = *(void *)(v12 - 8);
      uint64_t v17 = *(int *)(a3 + 24);
    }

    uint64_t v14 = a1 + v17;
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  }

  return v13(v14, a2, v12);
}

uint64_t storeEnumTagSinglePayload for CurrentCKKSItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DA220);
}

uint64_t sub_1000DA220(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000DA234(a1, a2, a3, a4, &qword_1002517E0, (uint64_t *)&unk_100256F50);
}

uint64_t sub_1000DA234(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) == a3)
  {
    uint64_t v14 = v12;
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t v16 = a1;
  }

  else
  {
    uint64_t v17 = sub_100007578(a5);
    uint64_t v18 = *(void *)(v17 - 8);
    if (*(_DWORD *)(v18 + 84) == a3)
    {
      uint64_t v14 = v17;
      uint64_t v19 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v14 = sub_100007578(a6);
      uint64_t v18 = *(void *)(v14 - 8);
      uint64_t v19 = *(int *)(a4 + 24);
    }

    uint64_t v16 = a1 + v19;
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  }

  return v15(v16, a2, a2, v14);
}

void sub_1000DA2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000DA308( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t (*a7)(uint64_t))
{
  uint64_t v12 = type metadata accessor for UnknownStorage(319LL);
  if (v13 <= 0x3F)
  {
    v18[0] = *(void *)(v12 - 8) + 64LL;
    sub_1000BCBD4(319LL, a4, a5);
    if (v15 <= 0x3F)
    {
      v18[1] = *(void *)(v14 - 8) + 64LL;
      sub_1000BCBD4(319LL, a6, a7);
      if (v17 <= 0x3F)
      {
        v18[2] = *(void *)(v16 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 3LL, v18, a1 + 16);
      }
    }
  }

uint64_t *_s18TrustedPeersHelper30DirectPCSIdentityFetchResponseVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v5;
}

uint64_t _s18TrustedPeersHelper30DirectPCSIdentityFetchResponseVwxx_0(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *_s18TrustedPeersHelper30DirectPCSIdentityFetchResponseVwcp_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t *_s18TrustedPeersHelper30DirectPCSIdentityFetchResponseVwca_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *_s18TrustedPeersHelper30DirectPCSIdentityFetchResponseVwtk_0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *_s18TrustedPeersHelper30DirectPCSIdentityFetchResponseVwta_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentItemFetchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DA6C8);
}

uint64_t sub_1000DA6CC(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for CurrentItemFetchResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DA754);
}

char *sub_1000DA758(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000DA7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a4;
  v8[1] = a5;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v7 <= 0x3F)
  {
    v8[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoveUnreadableCKServerDataRequest( uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v11(v8, v9, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for Metrics(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100007578(&qword_100257000);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = v14[1];
      void *v13 = *v14;
      v13[1] = v19;
      uint64_t v32 = v11;
      uint64_t v20 = v14[3];
      v13[2] = v14[2];
      void v13[3] = v20;
      uint64_t v21 = *(int *)(v15 + 24);
      int v22 = (char *)v13 + v21;
      int v23 = (char *)v14 + v21;
      swift_bridgeObjectRetain(v19);
      uint64_t v24 = v20;
      uint64_t v11 = v32;
      swift_bridgeObjectRetain(v24);
      v32(v22, v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v25 = a3[7];
    uint64_t v26 = (_DWORD *)((char *)v4 + v25);
    uint64_t v27 = (_DWORD *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for AccountInfo(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_100007578(&qword_100251F50);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      *uint64_t v26 = *v27;
      v11((_BYTE *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v10);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }
  }

  return v4;
}

_BYTE *initializeWithCopy for RemoveUnreadableCKServerDataRequest(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v30 = v10;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = *(int *)(v14 + 24);
    uint64_t v20 = (char *)v12 + v19;
    uint64_t v21 = (char *)v13 + v19;
    swift_bridgeObjectRetain(v17);
    uint64_t v22 = v18;
    uint64_t v10 = v30;
    swift_bridgeObjectRetain(v22);
    v30(v20, v21, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v23 = a3[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for AccountInfo(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100007578(&qword_100251F50);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    *uint64_t v24 = *v25;
    v10((_BYTE *)v24 + *(int *)(v26 + 20), (_BYTE *)v25 + *(int *)(v26 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  return a1;
}

_BYTE *assignWithCopy for RemoveUnreadableCKServerDataRequest(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v40 + 24);
  v39(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      *uint64_t v11 = *v12;
      uint64_t v18 = v12[1];
      v11[1] = v18;
      v11[2] = v12[2];
      uint64_t v19 = v12[3];
      v11[3] = v19;
      uint64_t v20 = *(int *)(v13 + 24);
      uint64_t v21 = (char *)v11 + v20;
      uint64_t v22 = (char *)v12 + v20;
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v38(v21, v22, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    sub_1000415CC((uint64_t)v11, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v23 = sub_100007578(&qword_100257000);
    memcpy(v11, v12, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_7;
  }

  *uint64_t v11 = *v12;
  uint64_t v34 = v12[1];
  uint64_t v35 = v11[1];
  v11[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v11[2] = v12[2];
  uint64_t v36 = v12[3];
  uint64_t v37 = v11[3];
  v11[3] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v39((_BYTE *)v11 + *(int *)(v13 + 24), (_BYTE *)v12 + *(int *)(v13 + 24), v9);
LABEL_7:
  uint64_t v24 = a3[7];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for AccountInfo(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1LL, v27);
  int v31 = v29(v26, 1LL, v27);
  if (!v30)
  {
    if (!v31)
    {
      *uint64_t v25 = *v26;
      v39((_BYTE *)v25 + *(int *)(v27 + 20), (_BYTE *)v26 + *(int *)(v27 + 20), v9);
      return a1;
    }

    sub_1000415CC((uint64_t)v25, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v31)
  {
LABEL_12:
    uint64_t v32 = sub_100007578(&qword_100251F50);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  *uint64_t v25 = *v26;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))( (char *)v25 + *(int *)(v27 + 20),  (char *)v26 + *(int *)(v27 + 20),  v9);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  return a1;
}

_BYTE *initializeWithTake for RemoveUnreadableCKServerDataRequest(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100007578(&qword_100257000);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((_BYTE *)v12 + *(int *)(v14 + 24), (_BYTE *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for AccountInfo(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100007578(&qword_100251F50);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    _DWORD *v19 = *v20;
    v10((_BYTE *)v19 + *(int *)(v21 + 20), (_BYTE *)v20 + *(int *)(v21 + 20), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

_BYTE *assignWithTake for RemoveUnreadableCKServerDataRequest(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v34 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 40);
  v34(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      __int128 v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))( (char *)v11 + *(int *)(v13 + 24),  (char *)v12 + *(int *)(v13 + 24),  v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    sub_1000415CC((uint64_t)v11, type metadata accessor for Metrics);
LABEL_6:
    uint64_t v19 = sub_100007578(&qword_100257000);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v30 = v12[1];
  uint64_t v31 = v11[1];
  *uint64_t v11 = *v12;
  v11[1] = v30;
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = v12[3];
  uint64_t v33 = v11[3];
  v11[2] = v12[2];
  v11[3] = v32;
  swift_bridgeObjectRelease(v33);
  v34((_BYTE *)v11 + *(int *)(v13 + 24), (_BYTE *)v12 + *(int *)(v13 + 24), v9);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for AccountInfo(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1LL, v23);
  int v27 = v25(v22, 1LL, v23);
  if (!v26)
  {
    if (!v27)
    {
      _DWORD *v21 = *v22;
      v34((_BYTE *)v21 + *(int *)(v23 + 20), (_BYTE *)v22 + *(int *)(v23 + 20), v9);
      return a1;
    }

    sub_1000415CC((uint64_t)v21, type metadata accessor for AccountInfo);
    goto LABEL_12;
  }

  if (v27)
  {
LABEL_12:
    uint64_t v28 = sub_100007578(&qword_100251F50);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  _DWORD *v21 = *v22;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))( (char *)v21 + *(int *)(v23 + 20),  (char *)v22 + *(int *)(v23 + 20),  v9);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveUnreadableCKServerDataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DB2C4);
}

uint64_t sub_1000DB2C4(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a3[5];
    }

    else
    {
      uint64_t v14 = sub_100007578(&qword_100257000);
      uint64_t v11 = *(void *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        uint64_t v12 = v14;
        uint64_t v13 = a3[6];
      }

      else
      {
        uint64_t v12 = sub_100007578(&qword_100251F50);
        uint64_t v11 = *(void *)(v12 - 8);
        uint64_t v13 = a3[7];
      }
    }

    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(&a1[v13], a2, v12);
  }

uint64_t storeEnumTagSinglePayload for RemoveUnreadableCKServerDataRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DB39C);
}

_BYTE *sub_1000DB39C(_BYTE *result, uint64_t a2, int a3, int *a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }

    else
    {
      uint64_t v12 = sub_100007578(&qword_100257000);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[6];
      }

      else
      {
        uint64_t v10 = sub_100007578(&qword_100251F50);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[7];
      }
    }

    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1000DB460(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000DB46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v5 = type metadata accessor for UnknownStorage(319LL);
  if (v6 <= 0x3F)
  {
    v11[1] = *(void *)(v5 - 8) + 64LL;
    sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
    if (v8 <= 0x3F)
    {
      v11[2] = *(void *)(v7 - 8) + 64LL;
      sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
      if (v10 <= 0x3F)
      {
        v11[3] = *(void *)(v9 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 4LL, v11, a1 + 16);
      }
    }
  }

uint64_t _s18TrustedPeersHelper28PerformATOPRVActionsResponseVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s18TrustedPeersHelper28PerformATOPRVActionsResponseVwxx_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t _s18TrustedPeersHelper28PerformATOPRVActionsResponseVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t _s18TrustedPeersHelper28PerformATOPRVActionsResponseVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t _s18TrustedPeersHelper28PerformATOPRVActionsResponseVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t _s18TrustedPeersHelper28PerformATOPRVActionsResponseVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveUnreadableCKServerDataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DB6BC);
}

uint64_t sub_1000DB6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RemoveUnreadableCKServerDataResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DB708);
}

uint64_t sub_1000DB70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1000DB74C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000DB7B4()
{
  return type metadata accessor for ViewKeys._StorageClass(0LL);
}

void sub_1000DB7BC(uint64_t a1)
{
  uint64_t v4 = &unk_1001E6000;
  sub_1000BCBD4(319LL, (unint64_t *)&unk_1002554E0, type metadata accessor for ViewKey);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = v5;
    swift_updateClassMetadata2(a1, 256LL, 5LL, &v4, a1 + 80);
  }

uint64_t sub_1000DB848()
{
  return type metadata accessor for EscrowPair._StorageClass(0LL);
}

void sub_1000DB850(uint64_t a1)
{
  v6[0] = &unk_1001E6000;
  sub_1000BCBD4(319LL, &qword_100255638, type metadata accessor for Bottle);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, (unint64_t *)&unk_100255640, type metadata accessor for EscrowInformation);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 3LL, v6, a1 + 80);
    }
  }

uint64_t sub_1000DB904()
{
  return type metadata accessor for EstablishRequest._StorageClass(0LL);
}

void sub_1000DB90C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_100255638, type metadata accessor for Bottle);
    if (v5 <= 0x3F)
    {
      v10[1] = *(void *)(v4 - 8) + 64LL;
      v10[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v10[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
      if (v7 <= 0x3F)
      {
        v10[4] = *(void *)(v6 - 8) + 64LL;
        sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
        if (v9 <= 0x3F)
        {
          v10[5] = *(void *)(v8 - 8) + 64LL;
          swift_updateClassMetadata2(a1, 256LL, 6LL, v10, a1 + 80);
        }
      }
    }
  }

uint64_t sub_1000DBA18()
{
  return type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
}

void sub_1000DBA20(uint64_t a1)
{
  v12[0] = &unk_1001E6000;
  sub_1000BCBD4(319LL, (unint64_t *)&unk_100255758, type metadata accessor for Peer);
  if (v3 <= 0x3F)
  {
    v12[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_100255638, type metadata accessor for Bottle);
    if (v5 <= 0x3F)
    {
      v12[2] = *(void *)(v4 - 8) + 64LL;
      v12[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v12[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_1000BCBD4(319LL, (unint64_t *)&unk_100253B78, type metadata accessor for IdmsTrustedDevicesVersion);
      if (v7 <= 0x3F)
      {
        v12[5] = *(void *)(v6 - 8) + 64LL;
        sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
        if (v9 <= 0x3F)
        {
          v12[6] = *(void *)(v8 - 8) + 64LL;
          sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
          if (v11 <= 0x3F)
          {
            void v12[7] = *(void *)(v10 - 8) + 64LL;
            swift_updateClassMetadata2(a1, 256LL, 8LL, v12, a1 + 80);
          }
        }
      }
    }
  }

uint64_t sub_1000DBB64()
{
  return type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
}

void sub_1000DBB6C(uint64_t a1)
{
  v12[0] = &unk_1001E6000;
  v12[1] = &unk_1001E6000;
  sub_1000BCBD4(319LL, (unint64_t *)&unk_100255758, type metadata accessor for Peer);
  if (v3 <= 0x3F)
  {
    v12[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000BCBD4(319LL, &qword_100252F10, type metadata accessor for SignedPeerStableInfo);
    if (v5 <= 0x3F)
    {
      v12[3] = *(void *)(v4 - 8) + 64LL;
      v12[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_1000BCBD4(319LL, &qword_100252F18, type metadata accessor for SignedPeerDynamicInfo);
      if (v7 <= 0x3F)
      {
        v12[5] = *(void *)(v6 - 8) + 64LL;
        sub_1000BCBD4(319LL, (unint64_t *)&unk_1002537E0, type metadata accessor for Metrics);
        if (v9 <= 0x3F)
        {
          v12[6] = *(void *)(v8 - 8) + 64LL;
          sub_1000BCBD4(319LL, &qword_1002537D8, type metadata accessor for AccountInfo);
          if (v11 <= 0x3F)
          {
            void v12[7] = *(void *)(v10 - 8) + 64LL;
            void v12[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
            swift_updateClassMetadata2(a1, 256LL, 9LL, v12, a1 + 80);
          }
        }
      }
    }
  }

uint64_t sub_1000DBCB0()
{
  return type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
}

void sub_1000DBCB8(uint64_t a1)
{
  v4[0] = "\t";
  sub_1000BCBD4( 319LL,  (unint64_t *)&unk_100255C50,  type metadata accessor for EscrowProxyFederationMoveRecordRequest);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_1001E60A0;
    void v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = &unk_1001E60A0;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[13] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[14] = &unk_1001E60A0;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[16] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[17] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[18] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[21] = &unk_1001E60A0;
    v4[22] = &unk_1001E60A0;
    swift_updateClassMetadata2(a1, 256LL, 23LL, v4, a1 + 80);
  }

uint64_t sub_1000DBD78()
{
  return type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
}

void sub_1000DBD80(uint64_t a1)
{
  v8[0] = &unk_1001E5FD8;
  sub_1000BCBD4(319LL, &qword_100255FE8, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
    void v8[3] = &unk_1001E6000;
    sub_1000BCBD4( 319LL,  (unint64_t *)&unk_100252E68,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp);
    if (v5 <= 0x3F)
    {
      v8[4] = *(void *)(v4 - 8) + 64LL;
      v8[5] = &unk_1001E5FD8;
      v8[6] = &unk_1001E5FD8;
      void v8[7] = &unk_1001E6000;
      void v8[8] = &unk_1001E6000;
      sub_1000BCBD4(319LL, (unint64_t *)&unk_100255FF0, type metadata accessor for PasscodeGeneration);
      if (v7 <= 0x3F)
      {
        v8[9] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 10LL, v8, a1 + 80);
      }
    }
  }

unint64_t sub_1000DBE84()
{
  unint64_t result = qword_1002563D0;
  if (!qword_1002563D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RepairAction, &type metadata for RepairAction);
    atomic_store(result, (unint64_t *)&qword_1002563D0);
  }

  return result;
}

unint64_t sub_1000DBEC8()
{
  unint64_t result = qword_1002563D8;
  if (!qword_1002563D8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AccountFlags, &type metadata for AccountFlags);
    atomic_store(result, (unint64_t *)&qword_1002563D8);
  }

  return result;
}

BOOL static StreamingEncoderError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void StreamingEncoderError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int StreamingEncoderError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000DC0B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000DC0D0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000DC114()
{
}

Swift::Int sub_1000DC13C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_1000DC180()
{
  unint64_t result = qword_1002564A0;
  if (!qword_1002564A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StreamingEncoderError,  &type metadata for StreamingEncoderError);
    atomic_store(result, (unint64_t *)&qword_1002564A0);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for StreamingEncoderError(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for StreamingEncoderError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_6;
  }

  uint64_t v15 = *(id *)(a5 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  int v16 = a1;
  int v17 = String._bridgeToObjectiveC()();
  __int128 v18 = *(void *)(*(void *)(a10 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_peerKeys)
                  + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey);
  uint64_t v85 = 0LL;
  uint64_t v19 =  [v15 createVoucherForCandidate:a6 stableInfo:a7 withSponsorID:v17 reason:1 signingKeyPair:v18 error:&v85];

  uint64_t v20 = v85;
  if (v19)
  {
    uint64_t v21 = v16;
    uint64_t v22 = v20;
    uint64_t v23 = (uint64_t)[a6 epoch];
    if ((v23 & 0x8000000000000000LL) == 0)
    {
      uint64_t v67 = (_TtC18TrustedPeersHelper6Client *)sub_1000DFDA0(a11, (uint64_t)v21, (uint64_t)v21, v23);

      unint64_t v68 = [v19 data];
      uint64_t v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v68);
      uint64_t v71 = v70;

      unint64_t v72 = [v19 sig];
      uint64_t v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v72);
      uint64_t v75 = v74;

      a3(v69, v71, v73, v75, v67, a12, 0LL);
      swift_bridgeObjectRelease(v67, v76, v77, v78, v79, v80, v81, v82);
      sub_10000852C(v73, v75);
      sub_10000852C(v69, v71);

      return;
    }

    __break(1u);
    goto LABEL_17;
  }

  uint64_t v44 = v85;
  uint64_t v45 = _convertNSErrorToError(_:)(v20);

  swift_willThrow(v46);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v47 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v47, (uint64_t)qword_1002567D0);
  swift_errorRetain(v45);
  uint64_t v48 = swift_errorRetain(v45);
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  int v53 = static os_log_type_t.error.getter(v49, v50, v51, v52);
  if (os_log_type_enabled(v49, v53))
  {
    int v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v55 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v84 = v45;
    uint64_t v85 = v55;
    *(_DWORD *)int v54 = 136446210;
    swift_errorRetain(v45);
    uint64_t v56 = sub_100007578(&qword_100251D70);
    uint64_t v57 = String.init<A>(describing:)(&v84, v56);
    int v59 = (_TtC18TrustedPeersHelper6Client *)v58;
    uint64_t v84 = sub_10017C4C4(v57, v58, (uint64_t *)&v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v53, "Error creating voucher with bottle: %{public}s", v54, 0xCu);
    swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain(v45);
  a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, (id)v45);
  swift_errorRelease();
  swift_errorRelease();
}

    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_6;
  }

  int v17 = (uint64_t)a9;
  __int128 v18 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v19 = *(id *)(a8 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  uint64_t v20 = a1;
  uint64_t v21 = (_TtC18TrustedPeersHelper6Client *)sub_1000E0A5C(a5, v20, a6, a7, (uint64_t)v19);
  uint64_t v104 = v22;

  uint64_t v23 = *(id *)(a8 + v18);
  uint64_t v24 = String._bridgeToObjectiveC()();
  uint64_t v25 = *(void *)&v20->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey];
  uint64_t v107 = 0LL;
  int v26 =  [v23 createVoucherForCandidate:a9 stableInfo:a10 withSponsorID:v24 reason:2 signingKeyPair:v25 error:&v107];

  int v27 = v107;
  if (v26)
  {
    uint64_t v28 = v107;
    uint64_t v29 = (uint64_t)[a9 epoch];
    if ((v29 & 0x8000000000000000LL) == 0)
    {
      unint64_t v80 = (_TtC18TrustedPeersHelper6Client *)sub_1000DFDA0(v21, a11, a11, v29);
      swift_bridgeObjectRelease(v21, v81, v82, v83, v84, v85, v86, v87);
      uint64_t v88 = [v26 data];
      int v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v88);
      uint64_t v91 = v90;

      uint64_t v92 = [v26 sig];
      uint64_t v93 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v92);
      uint64_t v95 = v94;

      uint64_t v96 = v104;
      a3(v89, v91, v93, v95, v80, v104, 0LL);
      swift_bridgeObjectRelease(v80, v97, v98, v99, v100, v101, v102, v103);

      sub_10000852C(v93, v95);
      sub_10000852C(v89, v91);

      return;
    }

    __break(1u);
    goto LABEL_17;
  }

  uint64_t v50 = v107;
  swift_bridgeObjectRelease(v21, v51, v52, v53, v54, v55, v56, v57);
  uint64_t v58 = _convertNSErrorToError(_:)(v27);

  swift_willThrow(v59);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  int v60 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v60, (uint64_t)qword_1002567D0);
  swift_errorRetain(v58);
  int v61 = swift_errorRetain(v58);
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  unint64_t v66 = static os_log_type_t.error.getter(v62, v63, v64, v65);
  if (os_log_type_enabled(v62, v66))
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v68 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v106 = v58;
    uint64_t v107 = v68;
    *(_DWORD *)uint64_t v67 = 136446210;
    swift_errorRetain(v58);
    uint64_t v69 = sub_100007578(&qword_100251D70);
    unint64_t v70 = String.init<A>(describing:)(&v106, v69);
    unint64_t v72 = (_TtC18TrustedPeersHelper6Client *)v71;
    uint64_t v106 = sub_10017C4C4(v70, v71, (uint64_t *)&v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v67 + 4, v67 + 12);
    swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v62, v66, "Error creating voucher using reroll: %{public}s", v67, 0xCu);
    swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    swift_slowDealloc(v67, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain(v58);
  a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v58);
  swift_errorRelease();
  swift_errorRelease();
}

    unint64_t v11 = (v16 - 1) & v16;
  }

  objc_autoreleasePoolPop(v4);
  __break(1u);
}

    uint64_t v12 = (v17 - 1) & v17;
  }

  objc_autoreleasePoolPop(v5);
  __break(1u);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamingEncoderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000DC2B4 + 4 * byte_1001E61B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DC2E8 + 4 * byte_1001E61B0[v4]))();
}

uint64_t sub_1000DC2E8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC2F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DC2F8LL);
  }
  return result;
}

uint64_t sub_1000DC304(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DC30CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000DC310(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC318(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC324(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000DC32C(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StreamingEncoderError()
{
  return &type metadata for StreamingEncoderError;
}

uint64_t sub_1000DC348()
{
  if (*(void *)(v0 + 32))
  {
    sub_1000DC40C();
    uint64_t v1 = *(void *)(v0 + 32);
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRelease(v1);
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for StreamingEncoderBase()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper20StreamingEncoderBase);
}

uint64_t sub_1000DC40C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned int *)(v0 + 16);
    v15[0] = *(void *)(v0 + 24);
    v15[1] = v1;
    unint64_t v3 = sub_1000DC59C();
    swift_bridgeObjectRetain(v1);
    int v4 = FileDescriptor._writeAll<A>(_:)(v15, v2, &type metadata for String.UTF8View, v3);
    if ((v5 & 1) != 0)
    {
      int v11 = v4;
      int v14 = v4;
      unint64_t v12 = sub_1000DC5E0();
      swift_willThrowTypedImpl(&v14, &type metadata for Errno, v12);
      swift_allocError(&type metadata for Errno, v12, 0LL, 0LL);
      _DWORD *v13 = v11;
      uint64_t v6 = v1;
    }

    else
    {
      swift_bridgeObjectRelease(v1);
      uint64_t v6 = *(void *)(v0 + 32);
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
    }

    return swift_bridgeObjectRelease(v6);
  }

  else
  {
    unint64_t v7 = sub_1000DC558();
    uint64_t v8 = swift_allocError(&type metadata for StreamingEncoderError, v7, 0LL, 0LL);
    *unint64_t v9 = 1;
    return swift_willThrow(v8);
  }

uint64_t type metadata accessor for StreamingEncoderArray()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper21StreamingEncoderArray);
}

uint64_t type metadata accessor for StreamingEncoderDict()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper20StreamingEncoderDict);
}

unint64_t sub_1000DC558()
{
  unint64_t result = qword_1002567B8;
  if (!qword_1002567B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StreamingEncoderError,  &type metadata for StreamingEncoderError);
    atomic_store(result, (unint64_t *)&qword_1002567B8);
  }

  return result;
}

unint64_t sub_1000DC59C()
{
  unint64_t result = qword_1002567C0;
  if (!qword_1002567C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for String.UTF8View,  &type metadata for String.UTF8View);
    atomic_store(result, (unint64_t *)&qword_1002567C0);
  }

  return result;
}

unint64_t sub_1000DC5E0()
{
  unint64_t result = qword_1002567C8;
  if (!qword_1002567C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Errno, &type metadata for Errno);
    atomic_store(result, (unint64_t *)&qword_1002567C8);
  }

  return result;
}

uint64_t sub_1000DC624(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((_DWORD)a2)
  {
    id v4 = [a1 modelID];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v6 = v5;

    v7._countAndFlagsBits = 0x5654656C707041LL;
    v7._object = (void *)0xE700000000000000LL;
    LOBYTE(v4) = String.hasPrefix(_:)(v7);
    swift_bridgeObjectRelease(v6);
    id v8 = [a1 modelID];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v10 = v9;

    v11._countAndFlagsBits = 0x6363416F69647541LL;
    v11._object = (void *)0xEE0079726F737365LL;
    LOBYTE(v8) = String.hasPrefix(_:)(v11);
    swift_bridgeObjectRelease(v10);
  }

  return v2;
}

uint64_t sub_1000DC71C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100008570((_OWORD *)a1, v8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v7 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_10014C8F4(v8, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v5 = *v2;
    *uint64_t v2 = v7;
    swift_bridgeObjectRelease(v5);
    return sub_10000DEAC(a2);
  }

  else
  {
    sub_100041590(a1, &qword_100251EA0);
    sub_10000CFCC(a2, v8);
    sub_10000DEAC(a2);
    return sub_100041590((uint64_t)v8, &qword_100251EA0);
  }

void *sub_1000DC7D8(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v8 = sub_10000D27C((uint64_t)a1);
      if ((v9 & 1) != 0)
      {
        uint64_t v7 = *(void **)(*(void *)(a2 + 56) + 8 * v8);
        id v10 = v7;
        return v7;
      }
    }

    return 0LL;
  }

  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0LL;
  }
  uint64_t v12 = v4;
  uint64_t v5 = sub_100007620(0LL, &qword_100256DB8, &OBJC_CLASS___TPPolicyDocument_ptr);
  swift_unknownObjectRetain(v4, v6);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v5, 7LL);
  uint64_t v7 = v13;
  swift_unknownObjectRelease(v4);
  return v7;
}

uint64_t sub_1000DC8AC(uint64_t a1)
{
  return sub_1000DC8C0(a1, sub_1001AC2BC, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001AC4D0);
}

uint64_t sub_1000DC8C0( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v5 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v7 = __CocoaSet.startIndex.getter(v6);
    uint64_t v9 = v8;
    uint64_t v10 = __CocoaSet.endIndex.getter(v6);
    char v12 = static __CocoaSet.Index.== infix(_:_:)(v7, v9, v10, v11);
    swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }

  uint64_t result = a2(a1);
  if ((v16 & 1) == 0)
  {
    uint64_t v9 = v15;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v15)
    {
      uint64_t v7 = result;
      if (result == 1LL << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_100171978(v7, v9, v5 != 0);
        return 0LL;
      }

LABEL_10:
      uint64_t v13 = a3(v7, v9, v5 != 0, a1);
      sub_100171978(v7, v9, v5 != 0);
      return v13;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

      __int128 v18 = v7;
      a3();

LABEL_13:
      uint64_t v11 = v18;
      goto LABEL_14;
    }

    int v17 = sub_100043F74();
    uint64_t v15 = swift_allocError(&type metadata for ContainerError, v17, 0LL, 0LL);
    char v16 = xmmword_1001E67E0;
  }

  *(_OWORD *)int v14 = v16;
  *(_BYTE *)(v14 + 16) = 13;
  ((void (*)(void, uint64_t))a3)(0LL, v15);

  swift_errorRelease();
}

  if (v5 < 0)
  {
LABEL_24:
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_25;
  }

  char v16 = *(void *)(type metadata accessor for TLKShare(0LL) - 8);
  int v17 = (char *)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  __int128 v18 = *(void *)(v16 + 72);
  uint64_t v19 = a2 + v18 * a3;
  uint64_t v20 = v18 * v5;
  uint64_t v21 = &v17[v20];
  uint64_t v22 = v19 + v20;
  if (v19 >= (unint64_t)v21 || (unint64_t)v17 >= v22)
  {
    swift_arrayInitWithCopy(v17);
    return v13;
  }

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_25:
  __break(1u);
  return result;
}

  return v4;
}

uint64_t sub_1000DC9D8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000DC9F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000DCA18(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = type metadata accessor for MachineMO();
    uint64_t v5 = sub_1000077B8( &qword_100256B78,  (uint64_t (*)(uint64_t))type metadata accessor for MachineMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v37, v3, v4, v5);
    uint64_t v1 = v37[0];
    uint64_t v35 = v37[1];
    uint64_t v7 = v37[2];
    uint64_t v8 = v37[3];
    unint64_t v9 = v37[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v35 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(a1);
    uint64_t v8 = 0LL;
  }

  uint64_t v32 = v7;
  int64_t v34 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v33 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v13 = v8;
    if ((v1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v16 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v16) {
      goto LABEL_41;
    }
    uint64_t v17 = v16;
    uint64_t v36 = v16;
    uint64_t v18 = type metadata accessor for MachineMO();
    swift_unknownObjectRetain(v17, v19);
    swift_dynamicCast(&v38, &v36, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
    id v20 = v38;
    swift_unknownObjectRelease(v17);
    if (!v20) {
      goto LABEL_41;
    }
LABEL_34:
    id v24 = objc_msgSend(v20, "machineID", v32);
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v28 = v27;

      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001498EC(0LL, v33[2] + 1LL, 1, v33);
        uint64_t v33 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v30 = v33[2];
      unint64_t v29 = v33[3];
      if (v30 >= v29 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001498EC((void *)(v29 > 1), v30 + 1, 1, v33);
        uint64_t v33 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v33[2] = v30 + 1;
      uint64_t v31 = &v33[2 * v30];
      v31[4] = v26;
      v31[5] = v28;
    }

    else
    {
    }
  }

  if (v9)
  {
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v15 = v14 | (v8 << 6);
LABEL_33:
    id v20 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v20) {
      goto LABEL_41;
    }
    goto LABEL_34;
  }

  int64_t v21 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v21 >= v34) {
      goto LABEL_41;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v21);
    ++v8;
    if (!v22)
    {
      uint64_t v8 = v13 + 2;
      if (v13 + 2 >= v34) {
        goto LABEL_41;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v8);
      if (!v22)
      {
        uint64_t v8 = v13 + 3;
        if (v13 + 3 >= v34) {
          goto LABEL_41;
        }
        unint64_t v22 = *(void *)(v35 + 8 * v8);
        if (!v22)
        {
          uint64_t v8 = v13 + 4;
          if (v13 + 4 >= v34) {
            goto LABEL_41;
          }
          unint64_t v22 = *(void *)(v35 + 8 * v8);
          if (!v22)
          {
            uint64_t v8 = v13 + 5;
            if (v13 + 5 >= v34) {
              goto LABEL_41;
            }
            unint64_t v22 = *(void *)(v35 + 8 * v8);
            if (!v22)
            {
              uint64_t v23 = v13 + 6;
              while (v34 != v23)
              {
                unint64_t v22 = *(void *)(v35 + 8 * v23++);
                if (v22)
                {
                  uint64_t v8 = v23 - 1;
                  goto LABEL_32;
                }
              }

LABEL_41:
              sub_100172694(v1);
              return;
            }
          }
        }
      }
    }

      uint64_t v8 = v11;
      uint64_t v99 = (v52 - 1) & v52;
      uint64_t v100 = v53;
      uint64_t v50 = __clz(__rbit64(v52)) + (v53 << 6);
    }

    uint64_t v55 = v43;
    uint64_t v56 = *((void *)v43 + 6) + 16 * v50;
    uint64_t v11 = *(void **)v56;
    uint64_t v57 = *(void *)(v56 + 8);
    swift_bridgeObjectRetain(v57);
    uint64_t v58 = objc_autoreleasePoolPush();
    int v59 = v44;
    int v60 = *(id *)((char *)v44 + v98);
    int v61 = String._bridgeToObjectiveC()();
    uint64_t v101 = 0LL;
    uint64_t v62 = v10;
    uint64_t v10 = (SEL *)objc_msgSend(v60, v10[69], v61, &v101);

    if (v101)
    {
      uint64_t v12 = v101;

      swift_willThrow(v89);
      objc_autoreleasePoolPop(v58);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v57);

      swift_release(v55);
      a2 = v92;
      goto LABEL_4;
    }

    if (v10)
    {
      uint64_t v63 = -[SEL stableInfo](v10, "stableInfo");
      if (v63)
      {
        uint64_t v64 = v63;
        uint64_t v65 = [v63 deviceName];

        if (v65) {
          break;
        }
      }
    }

    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v8);
    uint64_t v77 = (uint64_t)v11;
    uint64_t v11 = v8;
    unint64_t v78 = sub_10000D1E8(v77, v57);
    unint64_t v80 = v79;
    swift_bridgeObjectRelease(v8);
    if ((v80 & 1) != 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      uint64_t v101 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10014D7F4();
        uint64_t v11 = v101;
      }

      swift_bridgeObjectRelease(*(void *)(v11[6] + 16 * v78 + 8));
      unint64_t v82 = *(void *)(v11[7] + 16 * v78 + 8);
      sub_10000D6F4(v78, (uint64_t)v11);

      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v57);
      uint64_t v49 = 0x8000000000000000LL;
    }

    else
    {

      uint64_t v49 = v57;
    }

    swift_bridgeObjectRelease(v49);
    uint64_t v44 = v59;
LABEL_25:
    uint64_t v43 = v55;
    uint64_t v45 = v100;
    objc_autoreleasePoolPop(v58);
    swift_bridgeObjectRelease(v57);
    uint64_t v10 = v62;
    uint64_t v48 = v99;
  }

  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
  uint64_t v95 = v66;

  swift_bridgeObjectRetain(v57);
  uint64_t v67 = v8;
  unint64_t v68 = swift_isUniquelyReferenced_nonNull_native(v8);
  uint64_t v101 = v8;
  unint64_t v70 = sub_10000D1E8((uint64_t)v11, v57);
  uint64_t v71 = v8[2];
  unint64_t v72 = (v69 & 1) == 0;
  uint64_t v73 = v71 + v72;
  if (__OFADD__(v71, v72)) {
    goto LABEL_65;
  }
  uint64_t v8 = v69;
  if (v67[3] >= v73)
  {
    if ((v68 & 1) != 0)
    {
      unint64_t v76 = v101;
    }

    else
    {
      sub_10014D7F4();
      unint64_t v76 = v101;
    }

    goto LABEL_42;
  }

  uint64_t v33 = v323;
  int64_t v34 = _convertNSErrorToError(_:)(v28);

  swift_willThrow(v35);
  uint64_t v36 = (void (*)(id, void, uint64_t))v316;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v37 = type metadata accessor for Logger(0LL);
  uint64_t v38 = sub_100006BAC(v37, (uint64_t)qword_1002567D0);
  swift_errorRetain(v34);
  uint64_t v39 = swift_errorRetain(v34);
  v310 = (uint64_t *)v38;
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  uint64_t v41 = static os_log_type_t.info.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = (void *)swift_slowAlloc(32LL, -1LL);
    v323 = v43;
    *(_DWORD *)uint64_t v42 = 136446210;
    v320 = v34;
    swift_errorRetain(v34);
    uint64_t v44 = sub_100007578(&qword_100251D70);
    uint64_t v45 = String.init<A>(describing:)(&v320, v44);
    uint64_t v47 = v46;
    v320 = sub_10017C4C4(v45, v46, (uint64_t *)&v323);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321, v42 + 4, v42 + 12);
    uint64_t v27 = v314;
    swift_bridgeObjectRelease(v47);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "updateTrustIfNeeded: couldn't calculate dynamic info: %{public}s",  v42,  0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v48 = v43;
    uint64_t v36 = (void (*)(id, void, uint64_t))v316;
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v49 = *(id *)((char *)v313 + (void)v315);
  uint64_t v50 = String._bridgeToObjectiveC()();
  v323 = 0LL;
  uint64_t v51 = (uint64_t)[v49 statusOfPeerWithID:v50 error:&v323];

  if (v323)
  {
    uint64_t v52 = v323;
    swift_willThrow(v52);
    int v53 = v52;
    int v54 = (os_log_s *)Logger.logObject.getter(v53);
    uint64_t v58 = static os_log_type_t.error.getter(v54, v55, v56, v57);
    if (os_log_type_enabled(v54, v58))
    {
      int v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int v60 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)int v59 = 138543362;
      int v53 = v53;
      int v61 = (void *)_swift_stdlib_bridgeErrorToNSError(v53);
      v323 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, v324, v59 + 4, v59 + 12);
      *int v60 = v61;
      uint64_t v27 = v314;

      _os_log_impl( (void *)&_mh_execute_header,  v54,  v58,  "updateTrustIfNeeded: ignoring additional error calling statusOfPeer: %{public}@",  v59,  0xCu);
      uint64_t v62 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v60, 1LL, v62);
      uint64_t v63 = v60;
      uint64_t v36 = (void (*)(id, void, uint64_t))v316;
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    else
    {

      int v54 = (os_log_s *)v53;
    }

    uint64_t v51 = 32LL;
  }

  uint64_t v64 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperPeerState);
  swift_bridgeObjectRetain(v27);
  uint64_t v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  unint64_t v66 = [v64 initWithPeerID:v65 isPreapproved:0 status:v51 memberChanges:v312 & 1 unknownMachineIDs:0 osVersion:0 walrus:0 webAccess:0];

  swift_errorRetain(v34);
  v36(v66, 0LL, v34);
  swift_errorRelease();
  swift_errorRelease();

  uint64_t v67 = (char *)v311;
  if (v311) {
    goto LABEL_76;
  }
}

  int v59 = v57;
  v60.super.isa = 0LL;
LABEL_42:
  v241 = 0LL;
  uint64_t v63 = [v59 bestRecoveryKeyForStableInfo:v58 vouchers:v60.super.isa error:&v241];

  if (!v241)
  {
    uint64_t v65 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_testDontSetAccountSetting;
    unint64_t v66 = v27[OBJC_IVAR____TtC18TrustedPeersHelper9Container_testDontSetAccountSetting];
    if (v66 == 2)
    {
      unint64_t v238 = 0LL;
      uint64_t v239 = 0LL;
      uint64_t v67 = v234;
    }

    else
    {
      if ((v66 & 1) != 0)
      {
        uint64_t v239 = 0LL;
        uint64_t v67 = v234;
      }

      else
      {
        uint64_t v69 = *(void **)&v231[(void)v27];
        uint64_t v67 = v234;
        sub_1000B669C((uint64_t)v234, (uint64_t)v263, &qword_100256E00);
        if (v263[1] == 1LL) {
          unint64_t v70 = 0LL;
        }
        else {
          unint64_t v70 = v263[11];
        }
        v241 = 0LL;
        uint64_t v71 = [v69 bestWalrusForStableInfo:v58 walrusStableChanges:v70 error:&v241];
        unint64_t v72 = v71;
        if (v241)
        {
          (id)v241;

          swift_willThrow(v73);
          goto LABEL_99;
        }

        uint64_t v239 = (uint64_t *)v71;
        unint64_t v66 = v27[v65];
      }

      unint64_t v238 = 0LL;
      if (v66 != 2 && (v66 & 1) == 0)
      {
        uint64_t v110 = *(void **)&v231[(void)v27];
        sub_1000B669C((uint64_t)v67, (uint64_t)v262, &qword_100256E00);
        if (v262[1] == 1LL) {
          unint64_t v111 = 0LL;
        }
        else {
          unint64_t v111 = v262[12];
        }
        v241 = 0LL;
        int v112 = (char *) [v110 bestWebAccessForStableInfo:v58 webAccessStableChanges:v111 error:&v241];
        int v113 = v112;
        if (v241)
        {
          (id)v241;

          swift_willThrow(v114);
          id v24 = v239;
          goto LABEL_99;
        }

        unint64_t v238 = (uint64_t *)v112;
      }
    }

    sub_1000B669C((uint64_t)v67, (uint64_t)v259, &qword_100256E00);
    uint64_t v27 = v227;
    if (v259[1] == 1LL)
    {
      unint64_t v226 = 0LL;
      unint64_t v68 = 1;
    }

    else
    {
      unint64_t v74 = v260;
      unint64_t v68 = v261 & 1;
      if (!v68) {
        unint64_t v74 = sub_1000DC624(v230, v260);
      }
      uint64_t v75 = v226;
      unint64_t v226 = (id)v74;
      if (v75)
      {
        unint64_t v236 = (uint64_t)[v75 secureElementIdentity];
        goto LABEL_62;
      }
    }

    unint64_t v236 = (uint64_t)[v58 secureElementIdentity];
    sub_1000B669C((uint64_t)v67, (uint64_t)&v257, &qword_100256E00);
    uint64_t v27 = v258;
    if (v258 == (char *)1)
    {
      unint64_t v228 = 0LL;
      uint64_t v27 = 0LL;
      LODWORD(v232) = v68;
      if (!v58) {
        goto LABEL_66;
      }
      goto LABEL_63;
    }

    unint64_t v228 = v257;
LABEL_62:
    swift_bridgeObjectRetain(v27);
    LODWORD(v232) = v68;
    if (!v58) {
      goto LABEL_66;
    }
LABEL_63:
    unint64_t v76 = [v58 deviceName];
    if (v76)
    {
      uint64_t v77 = v76;
      unint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
      unint64_t v80 = v79;

      uint64_t v237 = v63;
      if (!v27) {
        goto LABEL_70;
      }
LABEL_67:
      if (!v80)
      {
        uint64_t v88 = v27;
LABEL_95:
        swift_bridgeObjectRelease(v88);
        uint64_t v92 = 0LL;
LABEL_96:
        swift_bridgeObjectRelease(v92);
        goto LABEL_97;
      }

      if (v228 != (Class)v78 || v27 != v80)
      {
        uint64_t v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v228, v27, v78, v80, 0LL);
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v80);
        if ((v108 & 1) == 0) {
          goto LABEL_97;
        }
LABEL_71:
        sub_1000B669C((uint64_t)v234, (uint64_t)v255, &qword_100256E00);
        if (v255[1] == 1LL)
        {
          uint64_t v81 = 0LL;
          unint64_t v82 = 0LL;
          if (!v58) {
            goto LABEL_79;
          }
        }

        else
        {
          uint64_t v81 = v255[2];
          unint64_t v82 = v256;
          swift_bridgeObjectRetain(v256);
          if (!v58) {
            goto LABEL_79;
          }
        }

        uint64_t v83 = (char *)[v58 serialNumber];
        if (v83)
        {
          uint64_t v27 = v83;
          uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
          uint64_t v86 = v85;

          if (!v82) {
            goto LABEL_83;
          }
LABEL_80:
          if (!v86)
          {
LABEL_94:
            uint64_t v88 = v82;
            goto LABEL_95;
          }

          if (v81 != v84 || v82 != v86)
          {
            uint64_t v109 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, v84, v86, 0LL);
            swift_bridgeObjectRelease(v82);
            swift_bridgeObjectRelease(v86);
            if ((v109 & 1) == 0) {
              goto LABEL_97;
            }
            goto LABEL_84;
          }

        sub_10000852C(v184, v169);
        return;
      }

      swift_bridgeObjectRelease(v11, v48, v49, v50, v51, v52, v53, v54);
      unint64_t v169 = v23;
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v176 = type metadata accessor for Logger(0LL);
      uint64_t v177 = sub_100006BAC(v176, (uint64_t)qword_1002567D0);
      uint64_t v178 = (os_log_s *)Logger.logObject.getter(v177);
      unint64_t v179 = static os_log_type_t.info.getter(v178);
      if (os_log_type_enabled(v178, v179))
      {
        uint64_t v180 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v180 = 0;
        _os_log_impl((void *)&_mh_execute_header, v178, v179, "permanentInfo does not exist", v180, 2u);
        swift_slowDealloc(v180, -1LL, -1LL);
      }

      unint64_t v181 = sub_100043F74();
      uint64_t v182 = swift_allocError(&type metadata for ContainerError, v181, 0LL, 0LL);
      *(_OWORD *)uint64_t v183 = xmmword_1001E6820;
      *(_BYTE *)(v183 + 16) = 13;
      v303(0LL, v182);
      swift_errorRelease();

      uint64_t v174 = v301;
      uint64_t v175 = v35;
    }

    else
    {
      swift_bridgeObjectRelease(v11, v40, v41, v42, v43, v44, v45, v46);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v165 = type metadata accessor for Logger(0LL);
      uint64_t v166 = sub_100006BAC(v165, (uint64_t)qword_1002567D0);
      uint64_t v167 = (os_log_s *)Logger.logObject.getter(v166);
      uint64_t v168 = static os_log_type_t.info.getter(v167);
      unint64_t v169 = v23;
      if (os_log_type_enabled(v167, v168))
      {
        uint64_t v170 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v170 = 0;
        _os_log_impl((void *)&_mh_execute_header, v167, v168, "cannot create TPPeerStableInfo", v170, 2u);
        swift_slowDealloc(v170, -1LL, -1LL);
      }

      unint64_t v171 = sub_100043F74();
      uint64_t v172 = swift_allocError(&type metadata for ContainerError, v171, 0LL, 0LL);
      *(_OWORD *)uint64_t v173 = xmmword_1001DEA00;
      *(_BYTE *)(v173 + 16) = 13;
      v303(0LL, v172);
      swift_errorRelease();
      uint64_t v174 = v301;
      uint64_t v175 = v35;
    }

    sub_10000852C(v174, v175);
    uint64_t v184 = v21;
    goto LABEL_41;
  }

  swift_bridgeObjectRelease(v11, v25, v26, v27, v28, v29, v30, v31);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v157 = type metadata accessor for Logger(0LL);
  uint64_t v158 = sub_100006BAC(v157, (uint64_t)qword_1002567D0);
  unint64_t v159 = (os_log_s *)Logger.logObject.getter(v158);
  uint64_t v160 = static os_log_type_t.info.getter(v159);
  if (os_log_type_enabled(v159, v160))
  {
    unint64_t v161 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v161 = 0;
    _os_log_impl((void *)&_mh_execute_header, v159, v160, "stableInfoSig does not exist", v161, 2u);
    swift_slowDealloc(v161, -1LL, -1LL);
  }

  uint64_t v162 = sub_100043F74();
  uint64_t v163 = swift_allocError(&type metadata for ContainerError, v162, 0LL, 0LL);
  *(_OWORD *)uint64_t v164 = xmmword_1001E6820;
  *(_BYTE *)(v164 + 16) = 13;
  a2(0LL, v163);
  swift_errorRelease();
  sub_10000852C(v21, v23);
}

      swift_bridgeObjectRelease(v16);
      return 0LL;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  return v12;
}

void sub_1000DCD7C(uint64_t a1, void *a2)
{
  uint64_t v29 = swift_allocObject(&unk_100237A88, 24LL, 7LL);
  *(void *)(v29 + 16) = a2;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v5 = a2;
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = __CocoaSet.makeIterator()(v4);
    uint64_t v7 = type metadata accessor for PolicyMO();
    uint64_t v8 = sub_1000077B8( &qword_100256BE0,  (uint64_t (*)(uint64_t))type metadata accessor for PolicyMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    unint64_t v9 = Set.Iterator.init(_cocoa:)(v33, v6, v7, v8);
    a1 = v33[0];
    uint64_t v31 = v33[1];
    uint64_t v10 = v33[2];
    uint64_t v11 = v33[3];
    unint64_t v12 = v33[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    id v16 = a2;
    unint64_t v9 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v11 = 0LL;
  }

  uint64_t v28 = v10;
  int64_t v30 = (unint64_t)(v10 + 64) >> 6;
  if (a1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v12)
    {
      uint64_t v17 = (v12 - 1) & v12;
      unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
      uint64_t v19 = v11;
      goto LABEL_32;
    }

    int64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v25 >= v30) {
      goto LABEL_35;
    }
    unint64_t v26 = *(void *)(v31 + 8 * v25);
    uint64_t v19 = v11 + 1;
    if (!v26)
    {
      uint64_t v19 = v11 + 2;
      if (v11 + 2 >= v30) {
        goto LABEL_35;
      }
      unint64_t v26 = *(void *)(v31 + 8 * v19);
      if (!v26)
      {
        uint64_t v19 = v11 + 3;
        if (v11 + 3 >= v30) {
          goto LABEL_35;
        }
        unint64_t v26 = *(void *)(v31 + 8 * v19);
        if (!v26)
        {
          uint64_t v19 = v11 + 4;
          if (v11 + 4 >= v30) {
            goto LABEL_35;
          }
          unint64_t v26 = *(void *)(v31 + 8 * v19);
          if (!v26)
          {
            uint64_t v19 = v11 + 5;
            if (v11 + 5 >= v30) {
              goto LABEL_35;
            }
            unint64_t v26 = *(void *)(v31 + 8 * v19);
            if (!v26)
            {
              uint64_t v27 = v11 + 6;
              while (v30 != v27)
              {
                unint64_t v26 = *(void *)(v31 + 8 * v27++);
                if (v26)
                {
                  uint64_t v19 = v27 - 1;
                  goto LABEL_31;
                }
              }

uint64_t sub_1000DD078()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v0, qword_1002567D0);
  sub_100006BAC(v0, (uint64_t)qword_1002567D0);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x80000001001E7520LL,  0x656E6961746E6F63LL,  0xE900000000000072LL);
}

uint64_t sub_1000DD0F0(uint64_t a1)
{
  unint64_t v2 = sub_100176604();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000DD118(uint64_t a1)
{
  unint64_t v2 = sub_100176604();
  return Error<>._code.getter(a1, v2);
}

void ContainerError.errorDescription.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_1000DD198()
{
  v3._countAndFlagsBits = v0;
  v3._object = v1;
  String.append(_:)(v3);
  return v2;
}

uint64_t sub_1000DD4D8()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)&loc_1000DD4F4 + *((int *)qword_1000DD840 + v0)))( v1 + 1,  0x80000001001F90D0LL);
}

void sub_1000DD504()
{
}

void sub_1000DD514()
{
}

void sub_1000DD524()
{
}

void sub_1000DD534()
{
}

void sub_1000DD544()
{
}

void sub_1000DD554()
{
}

void sub_1000DD570()
{
}

void sub_1000DD580()
{
}

void sub_1000DD590()
{
}

void sub_1000DD5A0()
{
}

void sub_1000DD5B0()
{
}

void sub_1000DD5C0()
{
}

void sub_1000DD5D0()
{
}

void sub_1000DD5E0()
{
}

void sub_1000DD5EC()
{
}

void sub_1000DD5FC()
{
}

void sub_1000DD60C()
{
}

void sub_1000DD61C()
{
}

void sub_1000DD62C()
{
}

void sub_1000DD63C()
{
}

void sub_1000DD64C()
{
}

void sub_1000DD65C()
{
}

void sub_1000DD66C()
{
}

void sub_1000DD67C()
{
}

void sub_1000DD68C()
{
}

void sub_1000DD69C()
{
}

void sub_1000DD6AC()
{
}

void sub_1000DD6BC()
{
}

void sub_1000DD6CC()
{
}

void sub_1000DD6DC()
{
}

void sub_1000DD6EC()
{
}

void sub_1000DD6FC()
{
}

void sub_1000DD70C()
{
}

void sub_1000DD71C()
{
}

void sub_1000DD72C()
{
}

void sub_1000DD73C()
{
}

void sub_1000DD74C()
{
}

void sub_1000DD75C()
{
}

void sub_1000DD76C()
{
}

void sub_1000DD77C()
{
}

void sub_1000DD78C()
{
}

void sub_1000DD79C()
{
}

void sub_1000DD7AC()
{
}

void sub_1000DD7BC()
{
}

void sub_1000DD7CC()
{
}

void sub_1000DD7DC()
{
}

void sub_1000DD7E8()
{
}

void sub_1000DD7F8()
{
}

void sub_1000DD904(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 2:
    case 8:
      swift_bridgeObjectRelease(a2);
      break;
    case 3:
    case 6:
    case 10:
    case 11:
      swift_errorRelease(a1);
      break;
    case 9:

      break;
    default:
      return;
  }

void sub_1000DD940()
{
}

unint64_t static ContainerError.errorDomain.getter()
{
  return 0xD000000000000029LL;
}

uint64_t ContainerError.errorCode.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000DD998 + 4 * byte_1001E630C[a3]))(11LL);
}

uint64_t sub_1000DD998()
{
  return 12LL;
}

uint64_t sub_1000DD9A0()
{
  return 13LL;
}

uint64_t sub_1000DD9A8()
{
  return 31LL;
}

uint64_t sub_1000DD9B0()
{
  return 38LL;
}

uint64_t sub_1000DD9B8()
{
  return 40LL;
}

uint64_t sub_1000DD9C0()
{
  return 44LL;
}

uint64_t sub_1000DD9C8()
{
  return 46LL;
}

uint64_t sub_1000DD9D0()
{
  return 48LL;
}

uint64_t sub_1000DD9D8()
{
  return 49LL;
}

uint64_t sub_1000DD9E0()
{
  return 53LL;
}

uint64_t sub_1000DD9E8()
{
  return 54LL;
}

uint64_t sub_1000DD9F0()
{
  return 59LL;
}

uint64_t sub_1000DD9F8@<X0>(uint64_t a1@<X8>)
{
  return qword_1001E65B8[a1];
}

id ContainerError.underlyingError.getter(void *a1, void *a2, char a3)
{
  id v3 = 0LL;
  switch(a3)
  {
    case 3:
      swift_errorRetain(a1);
      id v3 = (id)_convertErrorToNSError(_:)(a1);
      uint64_t v8 = a1;
      unint64_t v9 = a2;
      char v10 = 3;
      goto LABEL_7;
    case 4:
    case 5:
    case 12:
      id v6 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v7 = String._bridgeToObjectiveC()();
      id v3 = [v6 initWithDomain:v7 code:a1 userInfo:0];

      return v3;
    case 6:
      swift_errorRetain(a1);
      id v3 = (id)_convertErrorToNSError(_:)(a1);
      uint64_t v8 = a1;
      unint64_t v9 = a2;
      char v10 = 6;
      goto LABEL_7;
    case 10:
      swift_errorRetain(a1);
      id v3 = (id)_convertErrorToNSError(_:)(a1);
      uint64_t v8 = a1;
      unint64_t v9 = a2;
      char v10 = 10;
      goto LABEL_7;
    case 11:
      swift_errorRetain(a1);
      id v3 = (id)_convertErrorToNSError(_:)(a1);
      uint64_t v8 = a1;
      unint64_t v9 = a2;
      char v10 = 11;
LABEL_7:
      sub_1000DD904(v8, v9, v10);
      break;
    default:
      return v3;
  }

  return v3;
}

void *ContainerError.errorUserInfo.getter(void *a1, void *a2, unsigned __int8 a3)
{
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    uint64_t v12 = v11;
    int64_t v25 = &type metadata for String;
    *(void *)&__int128 v24 = v8;
    *((void *)&v24 + 1) = v9;
    sub_100008570(&v24, v23);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10014BF08(v23, v10, v12, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if (a3 <= 0xCu)
  {
    if (((1 << a3) & 0xC48) != 0)
    {
      swift_errorRetain(a1);
      id v14 = (id)_convertErrorToNSError(_:)(a1);
      sub_1000DD904(a1, a2, a3);
LABEL_8:
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      uint64_t v19 = v18;
      int64_t v25 = (void *)sub_100007620(0LL, (unint64_t *)&qword_100251528, &OBJC_CLASS___NSError_ptr);
      *(void *)&__int128 v24 = v14;
      sub_100008570(&v24, v23);
      id v20 = v14;
      char v21 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      sub_10014BF08(v23, v17, v19, v21);

      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      return &_swiftEmptyDictionarySingleton;
    }

    if (((1 << a3) & 0x1030) != 0)
    {
      id v15 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v16 = String._bridgeToObjectiveC()();
      id v14 = [v15 initWithDomain:v16 code:a1 userInfo:0];

      if (v14) {
        goto LABEL_8;
      }
    }
  }

  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_1000DDD48()
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000DDD68 + 4 * byte_1001E6324[*(unsigned __int8 *)(v0 + 16)]))(11LL);
}

uint64_t sub_1000DDD68()
{
  return 12LL;
}

uint64_t sub_1000DDD70()
{
  return 13LL;
}

uint64_t sub_1000DDD78()
{
  return 31LL;
}

uint64_t sub_1000DDD80()
{
  return 38LL;
}

uint64_t sub_1000DDD88()
{
  return 40LL;
}

uint64_t sub_1000DDD90()
{
  return 44LL;
}

uint64_t sub_1000DDD98()
{
  return 46LL;
}

uint64_t sub_1000DDDA0()
{
  return 48LL;
}

uint64_t sub_1000DDDA8()
{
  return 49LL;
}

uint64_t sub_1000DDDB0()
{
  return 53LL;
}

uint64_t sub_1000DDDB8()
{
  return 54LL;
}

uint64_t sub_1000DDDC0()
{
  return 59LL;
}

uint64_t sub_1000DDDC8()
{
  return qword_1001E65B8[*v0];
}

void *sub_1000DDDDC()
{
  return ContainerError.errorUserInfo.getter(*(void **)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

BOOL sub_1000DDDE8()
{
  uint64_t v1 = v0;
  id v2 = [v0 userInfo];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16) || (unint64_t v7 = sub_10000D1E8(v4, v5), (v8 & 1) == 0))
  {
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }

  sub_100061664(*(void *)(v3 + 56) + 32 * v7, (uint64_t)&v37);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v38 + 1))
  {
LABEL_10:
    sub_100041590((uint64_t)&v37, &qword_100251EA0);
    goto LABEL_11;
  }

  uint64_t v9 = sub_100007578(&qword_100251D70);
  if ((swift_dynamicCast(&v36, &v37, (char *)&type metadata for Any + 8, v9, 6LL) & 1) != 0)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v36);
    if ([v1 code] == (id)134110)
    {
      id v11 = [v1 domain];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
      uint64_t v17 = v15;
      if (v12 == v16 && v14 == v15)
      {
        swift_bridgeObjectRelease_n(v14, 2LL);
      }

      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v15, 0LL);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v17);
        if ((v27 & 1) == 0) {
          goto LABEL_22;
        }
      }

      if ([v10 code] == (id)11)
      {
        id v28 = [v10 domain];
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        uint64_t v31 = v30;

        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSSQLiteErrorDomain);
        uint64_t v34 = v32;
        if (v29 == v33 && v31 == v32)
        {
          swift_errorRelease();
          swift_bridgeObjectRelease_n(v31, 2LL);

          return 1LL;
        }

        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v32, 0LL);
        swift_errorRelease();
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v34);

        return (v35 & 1) != 0;
      }
    }

LABEL_22:
    swift_errorRelease();
    return 0LL;
  }

    uint64_t v6 = (v21 - 1) & v21;
    uint64_t v9 = __clz(__rbit64(v21)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    id v11 = *v10;
    uint64_t v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_1001516D4(v23, v11, v12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v23[1], v13, v14, v15, v16, v17, v18, v19);
  }

  uint64_t v22 = v20 + 4;
  if (v22 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v21 = *(void *)(v3 + 8 * v22);
  if (v21)
  {
    id v2 = v22;
    goto LABEL_22;
  }

  while (1)
  {
    id v2 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)(v3 + 8 * v2);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }

  __break(1u);
LABEL_23:
  uint64_t v32 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v32,  1092LL,  0);
  __break(1u);
  return result;
}

    unint64_t v140 = v60;
    uint64_t v95 = v77;
    swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v96 = v95;
    uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
    uint64_t v98 = static os_log_type_t.info.getter(v97);
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v99 = swift_slowAlloc(22LL, -1LL);
      uint64_t v134 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
      unint64_t v138 = swift_slowAlloc(32LL, -1LL);
      *(void *)&unint64_t v145 = v138;
      *(_DWORD *)uint64_t v99 = 136446466;
      uint64_t v139 = a1;
      swift_bridgeObjectRetain(a3);
      uint64_t v143 = sub_10017C4C4((uint64_t)a2, a3, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v99 + 4, v99 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v99 + 12) = 2114;
      __int128 v133 = v97;
      uint64_t v143 = (uint64_t)v96;
      uint64_t v100 = v96;
      a1 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v99 + 14, v99 + 22);
      uint64_t v101 = v134;
      *(void *)uint64_t v134 = v137;

      uint64_t v102 = v133;
      _os_log_impl( (void *)&_mh_execute_header,  v133,  v98,  "setPreapprovedKeys: attempting updateTrust for %{public}s with: %{public}@",  (uint8_t *)v99,  0x16u);
      uint64_t v103 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v101, 1LL, v103);
      swift_slowDealloc(v101, -1LL, -1LL);
      uint64_t v104 = v138;
      swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1LL, -1LL);
      swift_slowDealloc(v99, -1LL, -1LL);
    }

    else
    {

      uint64_t v105 = swift_bridgeObjectRelease_n(a3, 2LL);
    }

    __chkstk_darwin(v105, v106);
    *(&v133 - 4) = a1;
    *(&v133 - 3) = a2;
    uint64_t v131 = a3;
    uint64_t v132 = v96;
    uint64_t v107 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
    uint64_t v108 = (uint64_t)v136;
    static Message.with(_:)(sub_100171AE4, &v133 - 6, v135, v107);

    unint64_t v145 = xmmword_1001E6930;
    uint64_t v146 = 0u;
    unint64_t v147 = 0u;
    uint64_t v148 = 0u;
    unint64_t v149 = 0u;
    uint64_t v150 = 0u;
    unint64_t v151 = 0LL;
    uint64_t v109 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002385C8, 32LL, 7LL);
    uint64_t v110 = v142;
    *(void *)v109->endpoint = v141;
    *(void *)v109->containerMap = v110;
    unint64_t v111 = *(void *)((char *)a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24);
    int v112 = *(void *)((char *)a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32);
    sub_1000084C4((os_log_s *)((char *)a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish), v111);
    int v113 = swift_allocObject(&unk_1002385F0, 145LL, 7LL);
    *(void *)(v113 + 16) = a1;
    *(void *)(v113 + 24) = sub_100171B00;
    *(void *)(v113 + 32) = v109;
    sub_1000B669C((uint64_t)&v145, v113 + 40, &qword_100256E00);
    *(_BYTE *)(v113 + 144) = 0;
    uint64_t v114 = *(void *)(v112 + 16);
    uint64_t v115 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v114 + 32);
    swift_retain(v110);
    uint64_t v116 = a1;
    swift_retain(v109);
    v115(v108, sub_100171B0C, v113, v111, v114);
    swift_release(v109, v117, v118, v119, v120, v121, v122, v123);

    swift_release((_TtC18TrustedPeersHelper6Client *)v113, v124, v125, v126, v127, v128, v129, v130);
    sub_1000415CC(v108, type metadata accessor for UpdateTrustRequest);

    return;
  }

  char v35 = (id)v145;
  uint64_t v36 = _convertNSErrorToError(_:)(v21);

  swift_willThrow(v37);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  __int128 v38 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v38, (uint64_t)qword_1002567D0);
  swift_errorRetain(v36);
  uint64_t v39 = swift_errorRetain(v36);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  uint64_t v44 = static os_log_type_t.error.getter(v40, v41, v42, v43);
  if (os_log_type_enabled(v40, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int v46 = swift_slowAlloc(32LL, -1LL);
    *(void *)&unint64_t v145 = v46;
    *(_DWORD *)uint64_t v45 = 136446210;
    uint64_t v143 = v36;
    swift_errorRetain(v36);
    uint64_t v47 = sub_100007578(&qword_100251D70);
    uint64_t v48 = String.init<A>(describing:)(&v143, v47);
    uint64_t v50 = (_TtC18TrustedPeersHelper6Client *)v49;
    uint64_t v143 = sub_10017C4C4(v48, v49, (uint64_t *)&v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v44,  "setPreapprovedKeys: couldn't calculate dynamic info: %{public}s",  v45,  0xCu);
    swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain(v36);
  v141(0LL, v36);
  swift_errorRelease();
  swift_errorRelease();
}

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  char v25 = *(void *)(v23 + 16);
  unint64_t v26 = __OFADD__(v25, 1LL);
  char v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    uint64_t v6 = (v21 - 1) & v21;
    uint64_t v9 = __clz(__rbit64(v21)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    id v11 = *v10;
    uint64_t v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_1001516D4(v23, v11, v12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v23[1], v13, v14, v15, v16, v17, v18, v19);
  }

  uint64_t v22 = v20 + 4;
  if (v22 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v21 = *(void *)(v3 + 8 * v22);
  if (v21)
  {
    id v2 = v22;
    goto LABEL_22;
  }

  while (1)
  {
    id v2 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)(v3 + 8 * v2);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_5:
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 16 * v15 + 8);
    uint64_t v17 = type metadata accessor for MachineMO();
    id v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v17));
    swift_bridgeObjectRetain(v16);
    uint64_t v19 = [v18 initWithContext:v28];
    uint64_t v20 = String._bridgeToObjectiveC()();
    [v19 setMachineID:v20];

    [v19 setSeenOnFullList:1];
    Date.init()([v19 setStatus:1]);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    [v19 setModified:isa];

    [v29 addMachinesObject:v19];
    swift_bridgeObjectRelease(v16);
  }

  uint64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    uint64_t v13 = v24;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_23;
    }
    uint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }

    id v11 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(void *)(a4 + 16)) {
      goto LABEL_23;
    }
LABEL_38:
    *(unint64_t *)((char *)v33 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    if (__OFADD__(v34++, 1LL))
    {
      __break(1u);
LABEL_41:
      swift_retain(a3);
      return sub_1001511DC(v33, a2, v34, a3);
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v36) {
    goto LABEL_41;
  }
  uint64_t v15 = *(void *)(v35 + 8 * v16);
  if (v15)
  {
    uint64_t v5 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v5 >= v36) {
      goto LABEL_41;
    }
    uint64_t v15 = *(void *)(v35 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    unint64_t v7 = (v18 - 1) & v18;
    uint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    a2(v14, v15, v16);
    swift_bridgeObjectRelease(v16);
    uint64_t result = swift_bridgeObjectRelease(v15);
  }

  uint64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release(a1);
  }
  id v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release(a1);
    }
    id v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

LABEL_11:
  if ([v1 code] == (id)11)
  {
    id v18 = [v1 domain];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSSQLiteErrorDomain);
    uint64_t v24 = v22;
    if (v19 == v23 && v21 == v22)
    {
      swift_bridgeObjectRelease_n(v21, 2LL);
    }

    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0LL);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v24);
      if ((v25 & 1) == 0) {
        return 0LL;
      }
    }

    return 1LL;
  }

  return 0LL;
}

    v22[(v16 >> 6) + 8] |= 1LL << v16;
    unint64_t v26 = (uint64_t *)(v22[6] + 32 * v16);
    *unint64_t v26 = a2;
    v26[1] = a3;
    v26[2] = a4;
    v26[3] = a5;
    *(void *)(v22[7] + 8 * v16) = a1;
    char v27 = v22[2];
    id v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRetain(a5);
      return;
    }

    goto LABEL_14;
  }

  sub_10014A51C(v19, a6 & 1);
  uint64_t v24 = sub_10000D0B4(a2, a3, a4, a5);
  if ((v20 & 1) == (v25 & 1))
  {
    uint64_t v16 = v24;
    uint64_t v22 = (void *)*v7;
    if ((v20 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    char v25 = (uint64_t *)(v20[6] + 16 * v14);
    *char v25 = a3;
    v25[1] = a4;
    unint64_t v26 = (void *)(v20[7] + 16 * v14);
    *unint64_t v26 = a1;
    v26[1] = a2;
    char v27 = v20[2];
    id v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }

    goto LABEL_14;
  }

  sub_10014ABF4(v17, a5 & 1);
  uint64_t v23 = sub_10000D1E8(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v15[(v9 >> 6) + 8] |= 1LL << v9;
    uint64_t v19 = 8 * v9;
    *(void *)(v15[6] + v19) = a2;
    *(void *)(v15[7] + v19) = a1;
    uint64_t v20 = v15[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      void v15[2] = v22;
      uint64_t v23 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_10014B500(v12, a3 & 1);
  uint64_t v17 = sub_10000D27C((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    uint64_t v9 = v17;
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a2;
    v24[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    char v25 = v20[2];
    unint64_t v26 = __OFADD__(v25, 1LL);
    char v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10014B7D0(v17, a4 & 1, a5);
  uint64_t v22 = sub_10000D1E8(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    char v25 = (uint64_t *)(v20[6] + 16 * v14);
    *char v25 = a2;
    v25[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    unint64_t v26 = v20[2];
    char v27 = __OFADD__(v26, 1LL);
    id v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_10014BAD8(v17, a4 & 1, a5);
  uint64_t v23 = sub_10000D1E8(a2, a3);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      uint64_t v13 = 0;
      goto LABEL_12;
    }

  v5[4] = self->_secureBackupUsesComplexPassphrase;
  *((_BYTE *)v5 + 104) |= 8u;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_5:
    v5[5] = self->_secureBackupUsesNumericPassphrase;
    *((_BYTE *)v5 + 104) |= 0x10u;
  }

id sub_1000DE140()
{
  id result = [v0 hasChanges];
  if ((_DWORD)result)
  {
    id v20 = 0LL;
    unsigned int v2 = [v0 save:&v20];
    id v3 = v20;
    if (v2)
    {
      id v4 = v20;
      return [v0 refreshAllObjects];
    }

    else
    {
      id v5 = v20;
      uint64_t v6 = _convertNSErrorToError(_:)(v3);

      swift_willThrow(v7);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v8, (uint64_t)qword_1002567D0);
      swift_errorRetain(v6);
      uint64_t v9 = swift_errorRetain(v6);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v13 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v19 = v6;
        id v20 = v13;
        *(_DWORD *)uint64_t v12 = 136446210;
        swift_errorRetain(v6);
        uint64_t v14 = sub_100007578(&qword_100251D70);
        uint64_t v15 = String.init<A>(describing:)(&v19, v14);
        unint64_t v17 = v16;
        uint64_t v19 = sub_10017C4C4(v15, v16, (uint64_t *)&v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease(v17);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to save moc: %{public}s", v12, 0xCu);
        swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      return (id)swift_willThrow(v18);
    }
  }

  return result;
}

void sub_1000DE3A8( void *a1, void (*a2)(void *, _BYTE *), uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
}

void sub_1000DE3C4( void *a1, void (*a2)(void *, _BYTE *), uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v14 = a6(0LL);
  uint64_t v15 = NSManagedObjectContext.count<A>(for:)(a1, v14);
  if (v7)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_1002567D0);
    swift_errorRetain(v7);
    uint64_t v17 = swift_errorRetain(v7);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v20 = 138543362;
      swift_errorRetain(v7);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v7);
      uint64_t v38 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v20 + 4, v20 + 12);
      uint64_t *v21 = v22;
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Failed to fetch count for chunkwise enumeration: %{public}@",  v20,  0xCu);
      uint64_t v23 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v21, 1LL, v23);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v7);
      swift_errorRelease(v7);
    }

    swift_willThrow(v32);
  }

  else
  {
    uint64_t v24 = v15;
    uint64_t v36 = a2;
    id v25 = [a1 fetchBatchSize];
    if (v25)
    {
      uint64_t v26 = (uint64_t)v25;
      BOOL v27 = v24 >= 0;
      if (!v27)
      {
        uint64_t v33 = a3;
        uint64_t v34 = a4;
        uint64_t v35 = a5;
        uint64_t v28 = 0LL;
        do
        {
          if (__OFADD__(v28, v26)) {
            int64_t v29 = ((v28 + v26) >> 63) ^ 0x8000000000000000LL;
          }
          else {
            int64_t v29 = v28 + v26;
          }
          char v37 = 0;
          uint64_t v30 = objc_autoreleasePoolPush();
          sub_1000DE6A0(a1, v28, v24, v6, v36, v33, &v37, v34, v35, a6);
          objc_autoreleasePoolPop(v30);
          if ((v37 & 1) != 0) {
            break;
          }
          BOOL v31 = v24 >= v29;
          if (v26 > 0) {
            BOOL v31 = v29 >= v24;
          }
          uint64_t v28 = v29;
        }

        while (!v31);
      }
    }

    else
    {
      __break(1u);
    }
  }

void sub_1000DE684( void *a1, void (*a2)(void *, _BYTE *), uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
}

void sub_1000DE6A0( void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(void *, _BYTE *), uint64_t a6, _BYTE *a7, void (*a8)(uint64_t), uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v11 = v10;
  id v18 = [a1 copy];
  _bridgeAnyObjectToAny(_:)(&v49, v18);
  swift_unknownObjectRelease(v18);
  uint64_t v19 = sub_100007578(&qword_100256BE8);
  swift_dynamicCast(&v51, &v49, (char *)&type metadata for Any + 8, v19, 7LL);
  id v20 = v51;
  [v51 setFetchBatchSize:0];
  [v20 setFetchOffset:a2];
  BOOL v21 = __OFSUB__(a3, a2);
  uint64_t v22 = a3 - a2;
  if (v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  id v23 = [a1 fetchBatchSize];
  else {
    id v24 = v23;
  }
  [v20 setFetchLimit:v24];
  uint64_t v25 = a10(0LL);
  uint64_t v26 = NSManagedObjectContext.fetch<A>(_:)(v20, v25);
  if (!v10)
  {
    uint64_t v35 = v26;
    uint64_t v45 = a8;
    int v46 = v20;
    id v44 = a4;
    if ((unint64_t)v26 >> 62)
    {
      if (v26 < 0) {
        uint64_t v43 = v26;
      }
      else {
        uint64_t v43 = v26 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v26);
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter(v43);
      if (v47)
      {
LABEL_11:
        id v20 = (id)(v35 & 0xC000000000000001LL);
        uint64_t v37 = 4LL;
        while (1)
        {
          id v38 = v20
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37 - 4, v35)
              : *(id *)(v35 + 8 * v37);
          uint64_t v39 = v38;
          uint64_t v40 = v37 - 3;
          if (__OFADD__(v37 - 4, 1LL)) {
            break;
          }
          uint64_t v41 = objc_autoreleasePoolPush();
          a5(v39, a7);
          objc_autoreleasePoolPop(v41);

          if ((*a7 & 1) == 0)
          {
            ++v37;
            if (v40 != v47) {
              continue;
            }
          }

          goto LABEL_18;
        }

        __break(1u);
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v36 = *(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v26);
      uint64_t v47 = v36;
      if (v36) {
        goto LABEL_11;
      }
    }

LABEL_18:
    swift_bridgeObjectRelease(v35);
    v45(v35);
    swift_bridgeObjectRelease(v35);
    [v44 refreshAllObjects];

    return;
  }

  if (qword_100250EB8 != -1) {
LABEL_23:
  }
    swift_once(&qword_100250EB8, sub_1000DD078);
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v27, (uint64_t)qword_1002567D0);
  swift_errorRetain(v11);
  uint64_t v28 = swift_errorRetain(v11);
  int64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    BOOL v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)BOOL v31 = 138543362;
    swift_errorRetain(v11);
    uint64_t v33 = _swift_stdlib_bridgeErrorToNSError(v11);
    uint64_t v49 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v31 + 4, v31 + 12);
    uint64_t *v32 = v33;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Failed to fetch for chunkwise enumeration: %{public}@",  v31,  0xCu);
    uint64_t v34 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v32, 1LL, v34);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  swift_willThrow(v42);
}

    uint64_t v124 = sub_100043F74();
    uint64_t v125 = swift_allocError(&type metadata for ContainerError, v124, 0LL, 0LL);
    *(_OWORD *)uint64_t v126 = xmmword_1001E6820;
    *(_BYTE *)(v126 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v125);
    swift_errorRelease();
    return;
  }

  BOOL v21 = v20;
  uint64_t v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  id v23 = v22;

  id v24 = [*(id *)&a1[v19] egoPeerPermanentInfo];
  if (!v24)
  {
    swift_bridgeObjectRelease(v23, v25, v26, v27, v28, v29, v30, v31);
    uint64_t v119 = (os_log_s *)Logger.logObject.getter(v123);
    unint64_t v120 = static os_log_type_t.info.getter(v119);
    if (os_log_type_enabled(v119, v120))
    {
      uint64_t v121 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v121 = 0;
      uint64_t v122 = "permanentInfo does not exist";
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  uint64_t v32 = v24;
  uint64_t v175 = a6;
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v177 = v34;

  uint64_t v35 = [*(id *)&a1[v19] egoPeerPermanentInfoSig];
  if (v35)
  {
    uint64_t v43 = v35;
    uint64_t v172 = a5;
    uint64_t v173 = a7;
    id v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
    int v46 = v45;

    uint64_t v47 = [*(id *)&a1[v19] egoPeerStableInfo];
    if (v47)
    {
      uint64_t v55 = v47;
      uint64_t v164 = a8;
      uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v174 = v57;

      uint64_t v58 = [*(id *)&a1[v19] egoPeerStableInfoSig];
      if (v58)
      {
        unint64_t v66 = v58;
        unint64_t v171 = v56;
        uint64_t v167 = a3;
        unint64_t v169 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
        uint64_t v170 = v67;

        unint64_t v68 = [objc_allocWithZone(TPECPublicKeyFactory) init];
        swift_bridgeObjectRetain(v23);
        sub_1000084E8(v33, v177);
        sub_1000084E8(v44, v46);
        uint64_t v69 = String._bridgeToObjectiveC()();
        unint64_t v70 = v23;
        uint64_t v71 = v69;
        uint64_t v168 = v70;
        swift_bridgeObjectRelease(v70, v72, v73, v74, v75, v76, v77, v78);
        isa = Data._bridgeToObjectiveC()().super.isa;
        unint64_t v80 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v165 = v68;
        uint64_t v81 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v71 data:isa sig:v80 keyFactory:v68];
        uint64_t v166 = v44;
        sub_10000852C(v44, v46);
        sub_10000852C(v33, v177);

        if (v81)
        {
          uint64_t v163 = v81;
          int v89 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
          sub_1000084E8(v56, v174);
          sub_1000084E8(v169, v170);
          uint64_t v90 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v91 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v92 = [v89 initWithData:v90 sig:v91];
          sub_10000852C(v169, v170);
          sub_10000852C(v56, v174);

          if (v92)
          {
            uint64_t v100 = (void *)swift_allocObject(&unk_100238A78, 96LL, 7LL);
            v100[2] = a2;
            v100[3] = v167;
            v100[4] = a4;
            v100[5] = v172;
            v100[6] = v175;
            v100[7] = v173;
            v100[8] = a1;
            v100[9] = v163;
            v100[10] = v92;
            v100[11] = v164;
            strcpy((char *)v180, "signing-key ");
            BYTE5(v180[1]) = 0;
            HIWORD(v180[1]) = -5120;
            v101._countAndFlagsBits = v176;
            v101._object = v168;
            String.append(_:)(v101);
            swift_bridgeObjectRetain_n(v168, 2LL);
            swift_retain(v100);
            swift_retain(v167);
            swift_bridgeObjectRetain(v172);
            swift_bridgeObjectRetain(v173);
            uint64_t v102 = a1;
            uint64_t v103 = v163;
            uint64_t v104 = v92;
            swift_bridgeObjectRetain(v164);
            sub_10015FAA0( v180[0],  v180[1],  (void (*)(char *, uint64_t))sub_100172764,  (uint64_t)v100,  v176,  v168);

            swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v180[1],  v105,  v106,  v107,  v108,  v109,  v110,  v111);
            swift_release_n(v100, 2LL);
            swift_bridgeObjectRelease_n(v168, 2LL);
            sub_10000852C(v169, v170);
            sub_10000852C(v171, v174);
            sub_10000852C(v166, v46);
            sub_10000852C(v33, v177);
            swift_bridgeObjectRelease(v168, v112, v113, v114, v115, v116, v117, v118);
            return;
          }

          swift_bridgeObjectRelease(v168, v93, v94, v95, v96, v97, v98, v99);
          uint64_t v157 = (os_log_s *)Logger.logObject.getter(v156);
          uint64_t v158 = static os_log_type_t.info.getter(v157);
          if (os_log_type_enabled(v157, v158))
          {
            unint64_t v159 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)unint64_t v159 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v157,  v158,  "Invalid stableinfo or signature; van't vouch for them",
              v159,
              2u);
            swift_slowDealloc(v159, -1LL, -1LL);
          }

          uint64_t v160 = sub_100043F74();
          unint64_t v161 = swift_allocError(&type metadata for ContainerError, v160, 0LL, 0LL);
          *(_OWORD *)uint64_t v162 = xmmword_1001DEA00;
          *(_BYTE *)(v162 + 16) = 13;
          a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v161);
          swift_errorRelease();

          sub_10000852C(v169, v170);
          sub_10000852C(v56, v174);
          sub_10000852C(v166, v46);
          uint64_t v148 = v33;
        }

        else
        {
          swift_bridgeObjectRelease(v168, v82, v83, v84, v85, v86, v87, v88);
          uint64_t v150 = (os_log_s *)Logger.logObject.getter(v149);
          unint64_t v151 = static os_log_type_t.info.getter(v150);
          if (os_log_type_enabled(v150, v151))
          {
            uint64_t v152 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v152 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v150,  v151,  "Invalid permenent info or signature; can't vouch for them",
              v152,
              2u);
            swift_slowDealloc(v152, -1LL, -1LL);
          }

          uint64_t v153 = sub_100043F74();
          __int128 v154 = swift_allocError(&type metadata for ContainerError, v153, 0LL, 0LL);
          *(_OWORD *)uint64_t v155 = xmmword_1001DE880;
          *(_BYTE *)(v155 + 16) = 13;
          a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v154);
          swift_errorRelease();

          sub_10000852C(v169, v170);
          sub_10000852C(v56, v174);
          sub_10000852C(v44, v46);
          uint64_t v148 = v33;
        }

        goto LABEL_30;
      }

      swift_bridgeObjectRelease(v23, v59, v60, v61, v62, v63, v64, v65);
      uint64_t v142 = (os_log_s *)Logger.logObject.getter(v141);
      uint64_t v143 = static os_log_type_t.info.getter(v142);
      if (os_log_type_enabled(v142, v143))
      {
        uint64_t v144 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v144 = 0;
        _os_log_impl((void *)&_mh_execute_header, v142, v143, "stableInfoSig does not exist", v144, 2u);
        swift_slowDealloc(v144, -1LL, -1LL);
      }

      unint64_t v145 = sub_100043F74();
      uint64_t v146 = swift_allocError(&type metadata for ContainerError, v145, 0LL, 0LL);
      *(_OWORD *)unint64_t v147 = xmmword_1001E6820;
      *(_BYTE *)(v147 + 16) = 13;
      a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v146);
      swift_errorRelease();
      sub_10000852C(v56, v174);
    }

    else
    {
      swift_bridgeObjectRelease(v23, v48, v49, v50, v51, v52, v53, v54);
      uint64_t v135 = (os_log_s *)Logger.logObject.getter(v134);
      uint64_t v136 = static os_log_type_t.info.getter(v135);
      if (os_log_type_enabled(v135, v136))
      {
        uint64_t v137 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v137 = 0;
        _os_log_impl((void *)&_mh_execute_header, v135, v136, "stableInfo does not exist", v137, 2u);
        swift_slowDealloc(v137, -1LL, -1LL);
      }

      unint64_t v138 = sub_100043F74();
      uint64_t v139 = swift_allocError(&type metadata for ContainerError, v138, 0LL, 0LL);
      *(_OWORD *)unint64_t v140 = xmmword_1001E6820;
      *(_BYTE *)(v140 + 16) = 13;
      a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v139);
      swift_errorRelease();
    }

    sub_10000852C(v44, v46);
  }

  else
  {
    swift_bridgeObjectRelease(v23, v36, v37, v38, v39, v40, v41, v42);
    unint64_t v128 = (os_log_s *)Logger.logObject.getter(v127);
    uint64_t v129 = static os_log_type_t.info.getter(v128);
    if (os_log_type_enabled(v128, v129))
    {
      unint64_t v130 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v130 = 0;
      _os_log_impl((void *)&_mh_execute_header, v128, v129, "permanentInfoSig does not exist", v130, 2u);
      swift_slowDealloc(v130, -1LL, -1LL);
    }

    uint64_t v131 = sub_100043F74();
    uint64_t v132 = swift_allocError(&type metadata for ContainerError, v131, 0LL, 0LL);
    *(_OWORD *)__int128 v133 = xmmword_1001E6820;
    *(_BYTE *)(v133 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v132);
    swift_errorRelease();
  }

  uint64_t v148 = v33;
LABEL_30:
  sub_10000852C(v148, v177);
}

    uint64_t v122 = sub_100043F74();
    uint64_t v123 = swift_allocError(&type metadata for ContainerError, v122, 0LL, 0LL);
    *(_OWORD *)uint64_t v124 = xmmword_1001E6820;
    *(_BYTE *)(v124 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v123);
    swift_errorRelease();
    return;
  }

  int64_t v29 = v21;
  uint64_t v173 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  BOOL v31 = v30;

  uint64_t v32 = [*(id *)&a1[v15] egoPeerPermanentInfoSig];
  if (!v32)
  {
    swift_bridgeObjectRelease(v20, v33, v34, v35, v36, v37, v38, v39);
    uint64_t v126 = (os_log_s *)Logger.logObject.getter(v125);
    uint64_t v127 = static os_log_type_t.info.getter(v126);
    if (os_log_type_enabled(v126, v127))
    {
      unint64_t v128 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v128 = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "permanentInfoSig does not exist", v128, 2u);
      swift_slowDealloc(v128, -1LL, -1LL);
    }

    uint64_t v129 = sub_100043F74();
    unint64_t v130 = swift_allocError(&type metadata for ContainerError, v129, 0LL, 0LL);
    *(_OWORD *)uint64_t v131 = xmmword_1001E6820;
    *(_BYTE *)(v131 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v130);
    swift_errorRelease();
    goto LABEL_29;
  }

  uint64_t v40 = v32;
  uint64_t v172 = v18;
  unint64_t v169 = a4;
  uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v43 = v42;

  id v44 = [*(id *)&a1[v15] egoPeerStableInfo];
  if (!v44)
  {
    swift_bridgeObjectRelease(v20, v45, v46, v47, v48, v49, v50, v51);
    __int128 v133 = (os_log_s *)Logger.logObject.getter(v132);
    uint64_t v134 = static os_log_type_t.info.getter(v133);
    if (os_log_type_enabled(v133, v134))
    {
      uint64_t v135 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v135 = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "stableInfo does not exist", v135, 2u);
      swift_slowDealloc(v135, -1LL, -1LL);
    }

    uint64_t v136 = sub_100043F74();
    uint64_t v137 = swift_allocError(&type metadata for ContainerError, v136, 0LL, 0LL);
    *(_OWORD *)unint64_t v138 = xmmword_1001E6820;
    *(_BYTE *)(v138 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v137);
    swift_errorRelease();
    goto LABEL_28;
  }

  uint64_t v52 = v44;
  uint64_t v163 = a5;
  unint64_t v171 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
  int v54 = v53;

  uint64_t v55 = [*(id *)&a1[v15] egoPeerStableInfoSig];
  if (!v55)
  {
    swift_bridgeObjectRelease(v20, v56, v57, v58, v59, v60, v61, v62);
    unint64_t v140 = (os_log_s *)Logger.logObject.getter(v139);
    uint64_t v141 = static os_log_type_t.info.getter(v140);
    if (os_log_type_enabled(v140, v141))
    {
      uint64_t v142 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v142 = 0;
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "stableInfoSig does not exist", v142, 2u);
      swift_slowDealloc(v142, -1LL, -1LL);
    }

    uint64_t v143 = sub_100043F74();
    uint64_t v144 = swift_allocError(&type metadata for ContainerError, v143, 0LL, 0LL);
    *(_OWORD *)unint64_t v145 = xmmword_1001E6820;
    *(_BYTE *)(v145 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v144);
    swift_errorRelease();
    sub_10000852C(v171, v54);
LABEL_28:
    sub_10000852C(v41, v43);
LABEL_29:
    sub_10000852C(v173, v31);
    return;
  }

  uint64_t v63 = v55;
  uint64_t v166 = a2;
  uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v167 = v65;
  uint64_t v168 = v64;

  uint64_t v170 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  swift_bridgeObjectRetain(v20);
  sub_1000084E8(v173, v31);
  sub_1000084E8(v41, v43);
  unint64_t v66 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20, v67, v68, v69, v70, v71, v72, v73);
  isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v75 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v165 = v20;
  unint64_t v76 = v66;
  uint64_t v77 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v66 data:isa sig:v75 keyFactory:v170];
  sub_10000852C(v41, v43);
  uint64_t v164 = v31;
  sub_10000852C(v173, v31);

  if (v77)
  {
    uint64_t v162 = v77;
    uint64_t v85 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    sub_1000084E8(v171, v54);
    sub_1000084E8(v168, v167);
    uint64_t v86 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v87 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v88 = [v85 initWithData:v86 sig:v87];
    sub_10000852C(v168, v167);
    sub_10000852C(v171, v54);

    if (v88)
    {
      uint64_t v96 = (void *)swift_allocObject(&unk_100238A28, 72LL, 7LL);
      v96[2] = v166;
      v96[3] = v174;
      v96[4] = v169;
      v96[5] = a1;
      v96[6] = v162;
      v96[7] = v88;
      v96[8] = v163;
      strcpy((char *)v175, "signing-key ");
      BYTE5(v175[1]) = 0;
      HIWORD(v175[1]) = -5120;
      v97._countAndFlagsBits = v172;
      v97._object = v165;
      String.append(_:)(v97);
      swift_bridgeObjectRetain_n(v165, 2LL);
      swift_retain(v96);
      swift_retain(v174);
      uint64_t v98 = v169;
      uint64_t v99 = a1;
      uint64_t v100 = v162;
      uint64_t v101 = v88;
      swift_bridgeObjectRetain(v163);
      sub_10015FAA0(v175[0], v175[1], (void (*)(char *, uint64_t))sub_1001726E8, (uint64_t)v96, v172, v165);

      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v175[1], v102, v103, v104, v105, v106, v107, v108);
      swift_release_n(v96, 2LL);
      swift_bridgeObjectRelease_n(v165, 2LL);
      sub_10000852C(v168, v167);
      sub_10000852C(v171, v54);
      sub_10000852C(v41, v43);
      sub_10000852C(v173, v164);
      swift_bridgeObjectRelease(v165, v109, v110, v111, v112, v113, v114, v115);
      return;
    }

    swift_bridgeObjectRelease(v165, v89, v90, v91, v92, v93, v94, v95);
    uint64_t v156 = (os_log_s *)Logger.logObject.getter(v155);
    uint64_t v157 = static os_log_type_t.info.getter(v156);
    if (os_log_type_enabled(v156, v157))
    {
      uint64_t v158 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v158 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v156,  v157,  "Invalid stableinfo or signature; van't vouch for them",
        v158,
        2u);
      swift_slowDealloc(v158, -1LL, -1LL);
    }

    unint64_t v159 = sub_100043F74();
    uint64_t v160 = swift_allocError(&type metadata for ContainerError, v159, 0LL, 0LL);
    *(_OWORD *)unint64_t v161 = xmmword_1001DEA00;
    *(_BYTE *)(v161 + 16) = 13;
    v166(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v160);
    swift_errorRelease();

    sub_10000852C(v168, v167);
    sub_10000852C(v171, v54);
    uint64_t v153 = v41;
    __int128 v154 = v43;
  }

  else
  {
    swift_bridgeObjectRelease(v165, v78, v79, v80, v81, v82, v83, v84);
    unint64_t v147 = (os_log_s *)Logger.logObject.getter(v146);
    uint64_t v148 = static os_log_type_t.info.getter(v147);
    if (os_log_type_enabled(v147, (os_log_type_t)v148))
    {
      unint64_t v149 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v149 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v147,  (os_log_type_t)v148,  "Invalid permenent info or signature; can't vouch for them",
        v149,
        2u);
      swift_slowDealloc(v149, -1LL, -1LL);
    }

    uint64_t v150 = sub_100043F74();
    unint64_t v151 = swift_allocError(&type metadata for ContainerError, v150, 0LL, 0LL);
    *(_OWORD *)uint64_t v152 = xmmword_1001DE880;
    *(_BYTE *)(v152 + 16) = 13;
    v166(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v151);
    swift_errorRelease();

    sub_10000852C(v168, v167);
    sub_10000852C(v171, v54);
    uint64_t v153 = v41;
    __int128 v154 = v43;
  }

  sub_10000852C(v153, v154);
  sub_10000852C(v173, v164);
}

    unint64_t v120 = sub_100043F74();
    uint64_t v121 = swift_allocError(&type metadata for ContainerError, v120, 0LL, 0LL);
    *(_OWORD *)uint64_t v122 = xmmword_1001E6820;
    *(_BYTE *)(v122 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v121);
    swift_errorRelease();
    return;
  }

  id v18 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  BOOL v21 = v20;

  uint64_t v22 = [*(id *)&a1[v16] egoPeerPermanentInfo];
  if (!v22)
  {
    swift_bridgeObjectRelease(v21, v23, v24, v25, v26, v27, v28, v29);
    uint64_t v115 = (os_log_s *)Logger.logObject.getter(v119);
    uint64_t v116 = static os_log_type_t.info.getter(v115);
    if (os_log_type_enabled(v115, v116))
    {
      uint64_t v117 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v117 = 0;
      uint64_t v118 = "permanentInfo does not exist";
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  os_log_type_t v30 = v22;
  uint64_t v174 = v19;
  BOOL v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v175 = v32;

  uint64_t v33 = [*(id *)&a1[v16] egoPeerPermanentInfoSig];
  if (v33)
  {
    uint64_t v41 = v33;
    uint64_t v170 = a4;
    unint64_t v171 = a5;
    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
    id v44 = v43;

    uint64_t v45 = [*(id *)&a1[v16] egoPeerStableInfo];
    if (v45)
    {
      int v53 = v45;
      uint64_t v163 = a6;
      uint64_t v173 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t v55 = v54;

      uint64_t v56 = [*(id *)&a1[v16] egoPeerStableInfoSig];
      if (v56)
      {
        uint64_t v64 = v56;
        unint64_t v169 = v55;
        uint64_t v165 = a3;
        uint64_t v167 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
        uint64_t v168 = v65;

        uint64_t v172 = [objc_allocWithZone(TPECPublicKeyFactory) init];
        swift_bridgeObjectRetain(v21);
        sub_1000084E8(v31, v175);
        sub_1000084E8(v42, v44);
        unint64_t v66 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v21, v67, v68, v69, v70, v71, v72, v73);
        isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v75 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v166 = v21;
        unint64_t v76 = v66;
        uint64_t v77 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v66 data:isa sig:v75 keyFactory:v172];
        sub_10000852C(v42, v44);
        uint64_t v164 = v31;
        sub_10000852C(v31, v175);

        if (v77)
        {
          uint64_t v162 = v77;
          uint64_t v85 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
          sub_1000084E8(v173, v169);
          sub_1000084E8(v167, v168);
          uint64_t v86 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v87 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v88 = [v85 initWithData:v86 sig:v87];
          sub_10000852C(v167, v168);
          sub_10000852C(v173, v169);

          if (v88)
          {
            uint64_t v96 = (void *)swift_allocObject(&unk_1002389D8, 80LL, 7LL);
            v96[2] = a2;
            v96[3] = v165;
            v96[4] = v170;
            v96[5] = v171;
            v96[6] = v163;
            v96[7] = a1;
            v96[8] = v162;
            v96[9] = v88;
            strcpy((char *)v177, "signing-key ");
            BYTE5(v177[1]) = 0;
            HIWORD(v177[1]) = -5120;
            v97._countAndFlagsBits = v174;
            v97._object = v166;
            String.append(_:)(v97);
            swift_bridgeObjectRetain_n(v166, 2LL);
            swift_retain(v96);
            swift_retain(v165);
            swift_bridgeObjectRetain(v171);
            swift_bridgeObjectRetain(v163);
            uint64_t v98 = a1;
            uint64_t v99 = v162;
            uint64_t v100 = v88;
            sub_10015FAA0( v177[0],  v177[1],  (void (*)(char *, uint64_t))sub_100172628,  (uint64_t)v96,  v174,  v166);

            swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v177[1],  v101,  v102,  v103,  v104,  v105,  v106,  v107);
            swift_release_n(v96, 2LL);
            swift_bridgeObjectRelease_n(v166, 2LL);
            sub_10000852C(v167, v168);
            sub_10000852C(v173, v169);
            sub_10000852C(v42, v44);
            sub_10000852C(v31, v175);
            swift_bridgeObjectRelease(v166, v108, v109, v110, v111, v112, v113, v114);
            return;
          }

          swift_bridgeObjectRelease(v166, v89, v90, v91, v92, v93, v94, v95);
          uint64_t v156 = (os_log_s *)Logger.logObject.getter(v155);
          uint64_t v157 = static os_log_type_t.info.getter(v156);
          if (os_log_type_enabled(v156, v157))
          {
            uint64_t v158 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v158 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v156,  v157,  "Invalid stableinfo or signature; van't vouch for them",
              v158,
              2u);
            swift_slowDealloc(v158, -1LL, -1LL);
          }

          unint64_t v159 = sub_100043F74();
          uint64_t v160 = swift_allocError(&type metadata for ContainerError, v159, 0LL, 0LL);
          *(_OWORD *)unint64_t v161 = xmmword_1001DEA00;
          *(_BYTE *)(v161 + 16) = 13;
          a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v160);
          swift_errorRelease();

          sub_10000852C(v167, v168);
          sub_10000852C(v173, v169);
          uint64_t v153 = v42;
          __int128 v154 = v44;
        }

        else
        {
          swift_bridgeObjectRelease(v166, v78, v79, v80, v81, v82, v83, v84);
          unint64_t v147 = (os_log_s *)Logger.logObject.getter(v146);
          uint64_t v148 = static os_log_type_t.info.getter(v147);
          if (os_log_type_enabled(v147, v148))
          {
            unint64_t v149 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)unint64_t v149 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v147,  v148,  "Invalid permenent info or signature; can't vouch for them",
              v149,
              2u);
            swift_slowDealloc(v149, -1LL, -1LL);
          }

          uint64_t v150 = sub_100043F74();
          unint64_t v151 = swift_allocError(&type metadata for ContainerError, v150, 0LL, 0LL);
          *(_OWORD *)uint64_t v152 = xmmword_1001DE880;
          *(_BYTE *)(v152 + 16) = 13;
          a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v151);
          swift_errorRelease();

          sub_10000852C(v167, v168);
          sub_10000852C(v173, v55);
          uint64_t v153 = v42;
          __int128 v154 = v44;
        }

        sub_10000852C(v153, v154);
        unint64_t v145 = v164;
        goto LABEL_30;
      }

      uint64_t v123 = v31;
      swift_bridgeObjectRelease(v21, v57, v58, v59, v60, v61, v62, v63);
      uint64_t v139 = (os_log_s *)Logger.logObject.getter(v138);
      unint64_t v140 = static os_log_type_t.info.getter(v139);
      if (os_log_type_enabled(v139, v140))
      {
        uint64_t v141 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v141 = 0;
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "stableInfoSig does not exist", v141, 2u);
        swift_slowDealloc(v141, -1LL, -1LL);
      }

      uint64_t v142 = sub_100043F74();
      uint64_t v143 = swift_allocError(&type metadata for ContainerError, v142, 0LL, 0LL);
      *(_OWORD *)uint64_t v144 = xmmword_1001E6820;
      *(_BYTE *)(v144 + 16) = 13;
      a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v143);
      swift_errorRelease();
      sub_10000852C(v173, v55);
    }

    else
    {
      uint64_t v123 = v31;
      swift_bridgeObjectRelease(v21, v46, v47, v48, v49, v50, v51, v52);
      uint64_t v132 = (os_log_s *)Logger.logObject.getter(v131);
      __int128 v133 = static os_log_type_t.info.getter(v132);
      if (os_log_type_enabled(v132, v133))
      {
        uint64_t v134 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v134 = 0;
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "stableInfo does not exist", v134, 2u);
        swift_slowDealloc(v134, -1LL, -1LL);
      }

      uint64_t v135 = sub_100043F74();
      uint64_t v136 = swift_allocError(&type metadata for ContainerError, v135, 0LL, 0LL);
      *(_OWORD *)uint64_t v137 = xmmword_1001E6820;
      *(_BYTE *)(v137 + 16) = 13;
      a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v136);
      swift_errorRelease();
    }

    sub_10000852C(v42, v44);
  }

  else
  {
    uint64_t v123 = v31;
    swift_bridgeObjectRelease(v21, v34, v35, v36, v37, v38, v39, v40);
    uint64_t v125 = (os_log_s *)Logger.logObject.getter(v124);
    uint64_t v126 = static os_log_type_t.info.getter(v125);
    if (os_log_type_enabled(v125, v126))
    {
      uint64_t v127 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "permanentInfoSig does not exist", v127, 2u);
      swift_slowDealloc(v127, -1LL, -1LL);
    }

    unint64_t v128 = sub_100043F74();
    uint64_t v129 = swift_allocError(&type metadata for ContainerError, v128, 0LL, 0LL);
    *(_OWORD *)unint64_t v130 = xmmword_1001E6820;
    *(_BYTE *)(v130 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v129);
    swift_errorRelease();
  }

  unint64_t v145 = v123;
LABEL_30:
  sub_10000852C(v145, v175);
}

    uint64_t v10 = (v14 - 1) & v14;
  }

  uint64_t v15 = v13 + 3;
  if (v15 >= v29) {
    return v3;
  }
  uint64_t v14 = *(void *)(v28 + 8 * v15);
  if (v14)
  {
    id v4 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    id v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v29) {
      return v3;
    }
    uint64_t v14 = *(void *)(v28 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

    uint64_t v9 = (v14 - 1) & v14;
    uint64_t v11 = v15;
  }

  uint64_t v16 = v3 + 4;
  if (v3 + 4 >= v29) {
    return result;
  }
  uint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    uint64_t v15 = v3 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v15 >= v29) {
      return result;
    }
    uint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_18;
    }
  }

  swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, (BOOL)a7, (BOOL)a8);
  return v11;
}

  swift_bridgeObjectRelease(v63, v71, v72, v73, v74, v75, v76, v77);

  swift_bridgeObjectRelease(a13, v207, v208, v209, v210, v211, v212, v213);
  swift_bridgeObjectRelease(v47, v214, v215, v216, v217, v218, v219, v220);

  swift_bridgeObjectRelease(v39, v221, v222, v223, v224, v225, v226, v227);
  sub_10000852C(v37, a17);
  sub_10000852C(v38, a19);
  sub_10000852C(a20, a21);
  sub_10000852C(a22, a23);
  swift_bridgeObjectRelease(v63, v228, v229, v230, v231, v232, v233, v234);

  swift_bridgeObjectRelease(a13, v235, v236, v237, v238, v239, v240, v241);
  swift_bridgeObjectRelease(v47, v242, v243, v244, v245, v246, v247, v248);

  swift_bridgeObjectRelease(v39, v249, v250, v251, v252, v253, v254, v255);
  swift_release(a7);
  sub_10000852C(v37, a17);
  sub_10000852C(v38, a19);
  sub_10000852C(a20, a21);
  sub_10000852C(a22, a23);
  swift_bridgeObjectRelease(a15, v256, v257, v258, v259, v260, v261, v262);

  swift_bridgeObjectRelease(a13, v263, v264, v265, v266, v267, v268, v269);
  swift_bridgeObjectRelease(a11, v270, v271, v272, v273, v274, v275, v276);

  swift_bridgeObjectRelease(v39, v277, v278, v279, v280, v281, v282, v283);
  swift_release(a7);
  sub_10000852C(a16, a17);
  sub_10000852C(v38, a19);
  sub_10000852C(a20, a21);
  sub_10000852C(a22, a23);
  swift_bridgeObjectRelease(a15, v284, v285, v286, v287, v288, v289, v290);

  swift_bridgeObjectRelease(a13, v291, v292, v293, v294, v295, v296, v297);
  swift_bridgeObjectRelease(a11, v298, v299, v300, v301, v302, v303, v304);

  swift_bridgeObjectRelease(a9, v305, v306, v307, v308, v309, v310, v311);
  swift_release(a7);
  sub_10000852C(a16, a17);
  sub_10000852C(a18, a19);
  sub_10000852C(a20, a21);
  sub_10000852C(a22, a23);
  swift_bridgeObjectRelease(a15, v312, v313, v314, v315, v316, v317, v318);

  swift_bridgeObjectRelease(a13, v319, v320, v321, v322, v323, v324, v325);
  swift_bridgeObjectRelease(a11, v326, v327, v328, v329, v330, v331, v332);

  swift_bridgeObjectRelease(a9, v333, v334, v335, v336, v337, v338, v339);
  swift_release(a7);
  sub_10000852C(a16, a17);
  sub_10000852C(a18, a19);
  sub_10000852C(a20, a21);
  return sub_10000852C(a22, a23);
}

  swift_bridgeObjectRelease(v60, v68, v69, v70, v71, v72, v73, v74);

  swift_bridgeObjectRelease(a12, v200, v201, v202, v203, v204, v205, v206);
  swift_bridgeObjectRelease(a10, v207, v208, v209, v210, v211, v212, v213);

  swift_bridgeObjectRelease(v36, v214, v215, v216, v217, v218, v219, v220);
  sub_10000852C(a15, v38);
  sub_10000852C(v37, a18);
  sub_10000852C(a19, a20);
  sub_10000852C(a21, a22);
  swift_bridgeObjectRelease(v60, v221, v222, v223, v224, v225, v226, v227);

  swift_bridgeObjectRelease(a12, v228, v229, v230, v231, v232, v233, v234);
  swift_bridgeObjectRelease(a10, v235, v236, v237, v238, v239, v240, v241);

  swift_bridgeObjectRelease(v36, v242, v243, v244, v245, v246, v247, v248);
  swift_release(a6);
  sub_10000852C(a15, v38);
  sub_10000852C(a17, a18);
  sub_10000852C(a19, a20);
  sub_10000852C(a21, a22);
  swift_bridgeObjectRelease(a14, v249, v250, v251, v252, v253, v254, v255);

  swift_bridgeObjectRelease(a12, v256, v257, v258, v259, v260, v261, v262);
  swift_bridgeObjectRelease(a10, v263, v264, v265, v266, v267, v268, v269);

  swift_bridgeObjectRelease(v36, v270, v271, v272, v273, v274, v275, v276);
  swift_release(a6);
  sub_10000852C(a15, v38);
  sub_10000852C(a17, a18);
  sub_10000852C(a19, a20);
  sub_10000852C(a21, a22);
  swift_bridgeObjectRelease(a14, v277, v278, v279, v280, v281, v282, v283);

  swift_bridgeObjectRelease(a12, v284, v285, v286, v287, v288, v289, v290);
  swift_bridgeObjectRelease(a10, v291, v292, v293, v294, v295, v296, v297);

  swift_bridgeObjectRelease(a8, v298, v299, v300, v301, v302, v303, v304);
  swift_release(a6);
  sub_10000852C(a15, a16);
  sub_10000852C(a17, a18);
  sub_10000852C(a19, a20);
  sub_10000852C(a21, a22);
  swift_bridgeObjectRelease(a14, v305, v306, v307, v308, v309, v310, v311);

  swift_bridgeObjectRelease(a12, v312, v313, v314, v315, v316, v317, v318);
  swift_bridgeObjectRelease(a10, v319, v320, v321, v322, v323, v324, v325);

  swift_bridgeObjectRelease(a8, v326, v327, v328, v329, v330, v331, v332);
  swift_release(a6);
  sub_10000852C(a15, a16);
  sub_10000852C(a17, a18);
  sub_10000852C(a19, a20);
  return sub_10000852C(a21, a22);
}

  uint64_t v32 = 0LL;
  uint64_t v34 = 0LL;
  if (!v26) {
    goto LABEL_19;
  }
LABEL_14:
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(a14);
  uint64_t v37 = v36;

  if (!v27) {
    goto LABEL_20;
  }
LABEL_15:
  id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(a15);
  uint64_t v40 = v39;

LABEL_21:
  _Block_copy(v112);
  sub_100180A84( v115,  v120,  (uint64_t)v123,  (uint64_t)v119,  (uint64_t)v118,  v121,  v116,  (uint64_t)v117,  v113,  (uint64_t)v29,  v111,  (uint64_t)v31,  v32,  (uint64_t)v34,  v35,  (uint64_t)v37,  v38,  (uint64_t)v40,  (uint64_t)self,  (void (**)(const void *, void, void *))v112);
  _Block_release(v112);
  _Block_release(v112);

  swift_release(self);
  swift_bridgeObjectRelease(v120, v41, v42, v43, v44, v45, v46, v47);
  swift_bridgeObjectRelease(v40, v48, v49, v50, v51, v52, v53, v54);
  swift_bridgeObjectRelease(v37, v55, v56, v57, v58, v59, v60, v61);
  swift_bridgeObjectRelease(v34, v62, v63, v64, v65, v66, v67, v68);
  swift_bridgeObjectRelease(v31, v69, v70, v71, v72, v73, v74, v75);
  swift_bridgeObjectRelease(v29, v76, v77, v78, v79, v80, v81, v82);
  swift_bridgeObjectRelease(v117, v83, v84, v85, v86, v87, v88, v89);
  swift_bridgeObjectRelease(v118, v90, v91, v92, v93, v94, v95, v96);
  swift_bridgeObjectRelease(v119, v97, v98, v99, v100, v101, v102, v103);
  swift_bridgeObjectRelease(v123, v104, v105, v106, v107, v108, v109, v110);
}

uint64_t sub_1000DEAA8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100007578((uint64_t *)&unk_100256EE0);
  uint64_t v8 = swift_allocObject(v7, 352LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1001DE700;
  *(void *)(v8 + 32) = kSecClass;
  type metadata accessor for CFString(0LL);
  *(void *)(v8 + 40) = kSecClassInternetPassword;
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 72) = kSecAttrAccessible;
  *(void *)(v8 + 80) = kSecAttrAccessibleWhenUnlocked;
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 112) = kSecUseDataProtectionKeychain;
  *(_BYTE *)(v8 + 120) = 1;
  *(void *)(v8 + 144) = &type metadata for Bool;
  *(void *)(v8 + 152) = kSecAttrAccessGroup;
  *(void *)(v8 + 160) = 0xD00000000000001ALL;
  *(void *)(v8 + 168) = 0x80000001001E79C0LL;
  *(void *)(v8 + 184) = &type metadata for String;
  *(void *)(v8 + 192) = kSecAttrSynchronizable;
  *(_BYTE *)(v8 + 200) = 0;
  *(void *)(v8 + 224) = &type metadata for Bool;
  *(void *)(v8 + 232) = kSecAttrDescription;
  *(void *)(v8 + 240) = a3;
  *(void *)(v8 + 248) = a4;
  *(void *)(v8 + 264) = &type metadata for String;
  *(void *)(v8 + 272) = kSecAttrPath;
  *(void *)(v8 + 280) = a3;
  *(void *)(v8 + 288) = a4;
  *(void *)(v8 + 304) = &type metadata for String;
  *(void *)(v8 + 312) = kSecValueData;
  *(void *)(v8 + 344) = &type metadata for Data;
  *(void *)(v8 + 320) = a1;
  *(void *)(v8 + 328) = a2;
  swift_bridgeObjectRetain_n(a4, 2LL);
  unint64_t v70 = (id)kSecClass;
  uint64_t v10 = (id)kSecClassInternetPassword;
  uint64_t v11 = (id)kSecAttrAccessible;
  uint64_t v12 = (id)kSecAttrAccessibleWhenUnlocked;
  unint64_t v72 = (id)kSecUseDataProtectionKeychain;
  uint64_t v13 = (id)kSecAttrAccessGroup;
  uint64_t v14 = (id)kSecAttrSynchronizable;
  uint64_t v15 = (id)kSecAttrDescription;
  uint64_t v16 = (id)kSecAttrPath;
  uint64_t v17 = (id)kSecValueData;
  sub_1000084E8(a1, a2);
  unint64_t v18 = sub_10000BAC0(v8);
  CFTypeRef result = 0LL;
  sub_1000077B8( (unint64_t *)&qword_1002510E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE394);
  isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  OSStatus v20 = SecItemAdd(isa, &result);

  if (v20 == -25299)
  {
    uint64_t v22 = (__CFString *)v13;
    unint64_t v23 = sub_10000BAC0((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v74 = v23;
    uint64_t v24 = *(void *)(v18 + 16);
    uint64_t v25 = v70;
    uint64_t v26 = v25;
    if (v24 && (unint64_t v27 = sub_10000D160((uint64_t)v25), (v28 & 1) != 0))
    {
      sub_100061664(*(void *)(v18 + 56) + 32 * v27, (uint64_t)&v76);
      sub_100008570(&v76, v75);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      sub_10014BDE8(v75, v26, isUniquelyReferenced_nonNull_native);
      unint64_t v74 = v23;
      os_log_type_t v30 = v26;

      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      sub_10000CD14((uint64_t)v26, &v76);
      os_log_type_t v30 = v26;

      sub_100041590((uint64_t)&v76, &qword_100251EA0);
    }

    uint64_t v32 = *(void *)(v18 + 16);
    uint64_t v33 = v14;
    uint64_t v34 = v33;
    if (v32 && (unint64_t v35 = sub_10000D160((uint64_t)v33), (v36 & 1) != 0))
    {
      sub_100061664(*(void *)(v18 + 56) + 32 * v35, (uint64_t)&v76);
      sub_100008570(&v76, v75);
      char v37 = swift_isUniquelyReferenced_nonNull_native(v74);
      sub_10014BDE8(v75, v34, v37);

      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      sub_10000CD14((uint64_t)v34, &v76);

      sub_100041590((uint64_t)&v76, &qword_100251EA0);
    }

    uint64_t v38 = *(void *)(v18 + 16);
    uint64_t v39 = v22;
    uint64_t v40 = v39;
    if (v38 && (unint64_t v41 = sub_10000D160((uint64_t)v39), (v42 & 1) != 0))
    {
      sub_100061664(*(void *)(v18 + 56) + 32 * v41, (uint64_t)&v76);
      sub_100008570(&v76, v75);
      char v43 = swift_isUniquelyReferenced_nonNull_native(v74);
      sub_10014BDE8(v75, v40, v43);

      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      sub_10000CD14((uint64_t)v40, &v76);

      sub_100041590((uint64_t)&v76, &qword_100251EA0);
    }

    if (*(void *)(v18 + 16))
    {
      id v44 = (id)kSecAttrServer;
      uint64_t v45 = v15;
      unint64_t v46 = sub_10000D160((uint64_t)v45);
      if ((v47 & 1) != 0)
      {
        sub_100061664(*(void *)(v18 + 56) + 32 * v46, (uint64_t)&v76);
      }

      else
      {
        __int128 v76 = 0u;
        __int128 v77 = 0u;
      }

      if (*((void *)&v77 + 1)) {
        goto LABEL_24;
      }
    }

    else
    {
      __int128 v76 = 0u;
      __int128 v77 = 0u;
      uint64_t v48 = (id)kSecAttrServer;
      if (*((void *)&v77 + 1))
      {
LABEL_24:
        sub_100008570(&v76, v75);
        char v49 = swift_isUniquelyReferenced_nonNull_native(v74);
        sub_10014BDE8(v75, (void *)kSecAttrServer, v49);

        swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_25:
        uint64_t v50 = *(void *)(v18 + 16);
        id v51 = v16;
        uint64_t v52 = v51;
        if (v50 && (unint64_t v53 = sub_10000D160((uint64_t)v51), (v54 & 1) != 0))
        {
          sub_100061664(*(void *)(v18 + 56) + 32 * v53, (uint64_t)&v76);
          sub_100008570(&v76, v75);
          char v55 = swift_isUniquelyReferenced_nonNull_native(v74);
          sub_10014BDE8(v75, v52, v55);

          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        else
        {
          sub_10000CD14((uint64_t)v52, &v76);

          sub_100041590((uint64_t)&v76, &qword_100251EA0);
        }

        uint64_t v56 = *(void *)(v18 + 16);
        uint64_t v57 = v72;
        uint64_t v58 = v57;
        if (v56 && (unint64_t v59 = sub_10000D160((uint64_t)v57), (v60 & 1) != 0))
        {
          sub_100061664(*(void *)(v18 + 56) + 32 * v59, (uint64_t)&v76);
          sub_100008570(&v76, v75);
          char v61 = swift_isUniquelyReferenced_nonNull_native(v74);
          sub_10014BDE8(v75, v58, v61);
          unint64_t v62 = v74;

          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        else
        {
          sub_10000CD14((uint64_t)v58, &v76);

          sub_100041590((uint64_t)&v76, &qword_100251EA0);
          unint64_t v62 = v74;
        }

        *(void *)&v75[0] = v18;
        uint64_t v31 = v30;
        sub_10000CD14(v31, &v76);

        sub_100041590((uint64_t)&v76, &qword_100251EA0);
        uint64_t v63 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v62);
        uint64_t v64 = *(void *)&v75[0];
        uint64_t v65 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v64);
        LODWORD(v31) = SecItemUpdate(v63, v65);

        if (!(_DWORD)v31)
        {
          CFTypeRef v21 = result;
          return swift_unknownObjectRelease(v21);
        }

        uint64_t v31 = (int)v31;
LABEL_35:
        unint64_t v66 = sub_100043F74();
        uint64_t v67 = swift_allocError(&type metadata for ContainerError, v66, 0LL, 0LL);
        *(void *)uint64_t v68 = v31;
        *(void *)(v68 + 8) = 0LL;
        *(_BYTE *)(v68 + 16) = 5;
        swift_willThrow(v67);
        return swift_unknownObjectRelease(result);
      }
    }

    sub_100041590((uint64_t)&v76, &qword_100251EA0);
    sub_10000CD14((uint64_t)kSecAttrServer, v75);

    sub_100041590((uint64_t)v75, &qword_100251EA0);
    goto LABEL_25;
  }

  if (v20)
  {
    swift_bridgeObjectRelease(v18);
    uint64_t v31 = v20;
    goto LABEL_35;
  }

  CFTypeRef v21 = result;
  swift_bridgeObjectRelease(v18);
  return swift_unknownObjectRelease(v21);
}

uint64_t sub_1000DF270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256EE0);
  uint64_t inited = swift_initStackObject(v4, v37);
  *(_OWORD *)(inited + 16) = xmmword_1001DE700;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0LL);
  *(void *)(inited + 40) = kSecClassInternetPassword;
  *(void *)(inited + 64) = v6;
  *(void *)(inited + 72) = kSecAttrAccessGroup;
  *(void *)(inited + 80) = 0xD00000000000001ALL;
  *(void *)(inited + 88) = 0x80000001001E79C0LL;
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 112) = kSecAttrDescription;
  *(void *)(inited + 120) = a1;
  *(void *)(inited + 128) = a2;
  *(void *)(inited + 144) = &type metadata for String;
  *(void *)(inited + 152) = kSecReturnAttributes;
  *(_BYTE *)(inited + 160) = 1;
  *(void *)(inited + 184) = &type metadata for Bool;
  *(void *)(inited + 192) = kSecReturnData;
  *(_BYTE *)(inited + 200) = 1;
  *(void *)(inited + 224) = &type metadata for Bool;
  *(void *)(inited + 232) = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 240) = 0;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(void *)(inited + 272) = kSecUseDataProtectionKeychain;
  *(_BYTE *)(inited + 280) = 1;
  *(void *)(inited + 304) = &type metadata for Bool;
  *(void *)(inited + 312) = kSecMatchLimit;
  *(void *)(inited + 344) = v6;
  *(void *)(inited + 320) = kSecMatchLimitOne;
  uint64_t v7 = (id)kSecClass;
  uint64_t v8 = (id)kSecClassInternetPassword;
  uint64_t v9 = (id)kSecAttrAccessGroup;
  uint64_t v10 = (id)kSecAttrDescription;
  swift_bridgeObjectRetain(a2);
  uint64_t v11 = (id)kSecReturnAttributes;
  uint64_t v12 = (id)kSecReturnData;
  uint64_t v13 = (id)kSecAttrSynchronizable;
  uint64_t v14 = (id)kSecUseDataProtectionKeychain;
  uint64_t v15 = (id)kSecMatchLimit;
  uint64_t v16 = (id)kSecMatchLimitOne;
  unint64_t v17 = sub_10000BAC0(inited);
  CFTypeRef result = 0LL;
  sub_1000077B8( (unint64_t *)&qword_1002510E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE394);
  isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = SecItemCopyMatching(isa, &result);

  if ((_DWORD)v19 || !result)
  {
    unint64_t v26 = sub_100043F74();
    uint64_t v27 = swift_allocError(&type metadata for ContainerError, v26, 0LL, 0LL);
    *(void *)uint64_t v28 = (int)v19;
    *(void *)(v28 + 8) = 0LL;
    char v29 = 4;
LABEL_9:
    *(_BYTE *)(v28 + 16) = v29;
    swift_willThrow(v27);
    swift_unknownObjectRelease(result);
    return v19;
  }

  *(void *)&__int128 v34 = result;
  swift_unknownObjectRetain(result, v20);
  uint64_t v21 = sub_100007578((uint64_t *)&unk_100256F10);
  if ((swift_dynamicCast(&v33, &v34, (char *)&type metadata for Swift.AnyObject + 8, v21, 6LL) & 1) == 0)
  {
    unint64_t v30 = sub_100043F74();
    uint64_t v27 = swift_allocError(&type metadata for ContainerError, v30, 0LL, 0LL);
    *(_OWORD *)uint64_t v28 = xmmword_1001E67C0;
    char v29 = 13;
    goto LABEL_9;
  }

  uint64_t v22 = v33;
  if (*(void *)(v33 + 16))
  {
    unint64_t v23 = (id)kSecValueData;
    unint64_t v24 = sub_10000D160((uint64_t)v23);
    if ((v25 & 1) != 0)
    {
      sub_100061664(*(void *)(v22 + 56) + 32 * v24, (uint64_t)&v34);
    }

    else
    {
      __int128 v34 = 0u;
      __int128 v35 = 0u;
    }
  }

  else
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
  }

  swift_bridgeObjectRelease(v22);
  if (*((void *)&v35 + 1))
  {
    else {
      uint64_t v19 = 0LL;
    }
  }

  else
  {
    sub_100041590((uint64_t)&v34, &qword_100251EA0);
    uint64_t v19 = 0LL;
  }

  swift_unknownObjectRelease(result);
  return v19;
}

void sub_1000DF630(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v19 = [(id)objc_opt_self(_SFKeychainManager) defaultManager];
  NSString v4 = String._bridgeToObjectiveC()();
  id v18 = [v19 identityForIdentifier:v4];

  if (!v18)
  {
    ((void (*)(void, void))a3)(0LL, 0LL);
    uint64_t v11 = v19;
LABEL_14:

    return;
  }

  id v5 = [v18 resultType];
  if (v5 == (id)2)
  {
    id v12 = [v18 error];
    ((void (*)(void, id))a3)(0LL, v12);

    goto LABEL_13;
  }

  if (v5 == (id)1)
  {
    unint64_t v13 = sub_100043F74();
    uint64_t v15 = swift_allocError(&type metadata for ContainerError, v13, 0LL, 0LL);
    __int128 v16 = xmmword_1001E67D0;
  }

  else
  {
    if (!v5)
    {
      id v6 = v18;
      id v7 = [v6 value];
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = [v7 keyPair];

        if (!v9)
        {
LABEL_9:
          id v7 = 0LL;
          goto LABEL_10;
        }

        uint64_t v10 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
        id v7 = (id)swift_dynamicCastObjCClass(v9, v10);
        if (!v7)
        {

          goto LABEL_9;
        }
      }

uint64_t sub_1000DF85C( void *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, Swift::String a5)
{
  if (a1)
  {
    object = a5._object;
    uint64_t countAndFlagsBits = a5._countAndFlagsBits;
    String.append(_:)(a5);
    swift_retain(a4);
    swift_bridgeObjectRetain(object);
    id v10 = a1;
    sub_10015D9FC(0x6974707972636E65LL, 0xEF2079656B2D6E6FLL, a3, a4, countAndFlagsBits, (uint64_t)object, v10);

    swift_bridgeObjectRelease(0xEF2079656B2D6E6FLL);
    swift_release(a4);
    return swift_bridgeObjectRelease(object);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v13, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v14 = swift_errorRetain(a2);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v19 = static os_log_type_t.error.getter(v15, v16, v17, v18);
    if (os_log_type_enabled(v15, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      uint64_t v27 = a2;
      swift_errorRetain(a2);
      uint64_t v22 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v23 = String.init<A>(describing:)(&v27, v22);
      unint64_t v25 = v24;
      uint64_t v27 = sub_10017C4C4(v23, v24, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v19, "Unable to load signing key: %{public}s", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return ((uint64_t (*)(void, uint64_t))a3)(0LL, a2);
  }

void sub_1000DFAF4( void *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1)
  {
    objc_allocWithZone((Class)type metadata accessor for OctagonSelfPeerKeys());
    id v12 = a1;
    swift_bridgeObjectRetain(a6);
    uint64_t v27 = sub_100044CDC(a5, a6, a7, v12);
    a3(v27, 0LL);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v14, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v15 = swift_errorRetain(a2);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v20 = static os_log_type_t.error.getter(v16, v17, v18, v19);
    if (os_log_type_enabled(v16, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = a2;
      uint64_t v29 = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      swift_errorRetain(a2);
      uint64_t v23 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v24 = String.init<A>(describing:)(&v28, v23);
      unint64_t v26 = v25;
      uint64_t v28 = sub_10017C4C4(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v20, "Unable to load encryption key: %{public}s", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a3(0LL, a2);
  }

void *sub_1000DFDA0(_TtC18TrustedPeersHelper6Client *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    id v9 = a1;
  }
  else {
    id v9 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }
  swift_unknownObjectRetain(a3, a2);
  swift_unknownObjectRetain(a2, v10);
  swift_bridgeObjectRetain(a1);
  uint64_t v11 = (_TtC18TrustedPeersHelper6Client *)sub_100159170((uint64_t)v9, a3, a2, a4);
  swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a2);
  if (!v4)
  {
    uint64_t v26 = *(void *)v11->endpoint;
    if (v26)
    {
      swift_bridgeObjectRetain(v11);
      for (uint64_t i = 0LL; i != v26; ++i)
      {
        char v36 = *(void **)&v11[1]._TtCs12_SwiftObject_opaque[8 * i];
        if (v36)
        {
          id v37 = v36;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
          unint64_t v39 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v38 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v39 >= v38 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1LL);
          }
          uint64_t v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v37);
          specialized Array._endMutation()(v35);
        }
      }

      swift_bridgeObjectRelease(v11, v27, v28, v29, v30, v31, v32, v33);
    }

    swift_bridgeObjectRelease(v11, v19, v20, v21, v22, v23, v24, v25);
  }

  return _swiftEmptyArrayStorage;
}

void sub_1000DFEE8( void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v10 = *a1;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v11, (uint64_t)qword_1002567D0);
  swift_unknownObjectRetain_n(a2, 2LL);
  id v12 = v10;
  id v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v91 = a4;
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v90 = (void *)swift_slowAlloc(64LL, -1LL);
    uint64_t v97 = a2;
    id v98 = v90;
    *(_DWORD *)uint64_t v15 = 136446466;
    swift_unknownObjectRetain(a2, v16);
    uint64_t v17 = sub_100007578((uint64_t *)&unk_100256D70);
    uint64_t v18 = String.init<A>(describing:)(&v97, v17);
    uint64_t v92 = a3;
    os_log_type_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v97 = sub_10017C4C4(v18, v19, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v15 + 4, v15 + 12);
    swift_unknownObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    *(_WORD *)(v15 + 12) = 2082;
    id v28 = v12;
    id v29 = [v28 description];
    os_log_type_t type = v14;
    id v30 = v12;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    BOOL v33 = v32;

    uint64_t v34 = v31;
    id v12 = v30;
    uint64_t v97 = sub_10017C4C4(v34, (unint64_t)v33, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v15 + 14, v15 + 22);

    a3 = v92;
    swift_bridgeObjectRelease(v33, v35, v36, v37, v38, v39, v40, v41);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  type,  "Making TLKShare for %{public}s for key %{public}s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1LL, -1LL);
    uint64_t v42 = v15;
    a4 = v91;
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease_n(a2, 2LL);
  }

  char v43 = (void *)objc_opt_self(&OBJC_CLASS___CKKSTLKShare);
  id v98 = 0LL;
  swift_unknownObjectRetain(a2, v44);
  id v45 = v12;
  swift_unknownObjectRetain(a3, v46);
  id v47 = [v43 share:v45 as:a3 to:a2 epoch:a4 poisoned:0 error:&v98];
  id v48 = v98;
  if (v47)
  {

    swift_unknownObjectRelease(a3);
    swift_unknownObjectRelease(a2);
    *a6 = v47;
    return;
  }

  char v49 = v48;
  uint64_t v96 = a6;
  uint64_t v50 = _convertNSErrorToError(_:)(v48);

  swift_willThrow(v51);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a2);
  uint64_t v52 = (void *)_convertErrorToNSError(_:)(v50);
  id v53 = [v52 domain];
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  uint64_t v56 = v55;

  if (v54 == 0x7974697275636573LL && v56 == (_TtC18TrustedPeersHelper6Client *)0xE900000000000064LL)
  {
    swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0xE900000000000064LL,  v57,  v58,  v59,  v60,  v61,  v62,  v63);
  }

  else
  {
    char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, 0x7974697275636573LL, 0xE900000000000064LL, 0LL);
    swift_bridgeObjectRelease(v56, v65, v66, v67, v68, v69, v70, v71);
    if ((v64 & 1) == 0)
    {
LABEL_15:
      swift_willThrow(v72);

      *a5 = v50;
      return;
    }
  }

  id v72 = [v52 code];
  if (v72 != (id)-25300LL) {
    goto LABEL_15;
  }
  id v73 = v45;
  unint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
  os_log_type_t v75 = static os_log_type_t.info.getter(v74);
  if (os_log_type_enabled(v74, v75))
  {
    log = v74;
    __int128 v76 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v95 = (void *)swift_slowAlloc(32LL, -1LL);
    id v98 = v95;
    *(_DWORD *)__int128 v76 = 136446210;
    id v77 = v73;
    id v78 = [v77 description];
    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
    uint64_t v81 = v80;

    uint64_t v97 = sub_10017C4C4(v79, (unint64_t)v81, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v76 + 4, v76 + 12);

    swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v75,  "No TLK contents for %{public}s, no TLK share possible",  v76,  0xCu);
    swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1LL, -1LL);
    swift_slowDealloc(v76, -1LL, -1LL);

    swift_errorRelease();
  }

  else
  {

    swift_errorRelease();
  }

  void *v96 = 0LL;
}

uint64_t sub_1000E04C0( _TtC18TrustedPeersHelper6Client *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t a4)
{
  uint64_t v8 = sub_100007578(&qword_100256D58);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TLKShare(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v18);
  os_log_type_t v20 = (char *)&v36 - v19;
  uint64_t v21 = v42;
  uint64_t v22 = (uint64_t)sub_1000DFDA0(a1, a2, (uint64_t)a3, a4);
  if (v21) {
    return (uint64_t)a3;
  }
  uint64_t v23 = v22;
  uint64_t v42 = 0LL;
  int64_t v37 = v20;
  if (!((unint64_t)v22 >> 62))
  {
    uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(v22);
    if (v24) {
      goto LABEL_4;
    }
LABEL_21:
    a3 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
LABEL_22:
    swift_bridgeObjectRelease_n(v23, 2LL);
    return (uint64_t)a3;
  }

  if (v22 < 0) {
    uint64_t v35 = v22;
  }
  else {
    uint64_t v35 = v22 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v22);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v35);
  uint64_t v24 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_4:
  if (v24 >= 1)
  {
    uint64_t v26 = 0LL;
    unint64_t v40 = v23 & 0xC000000000000001LL;
    BOOL v41 = v17;
    a3 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    uint64_t v38 = v23;
    uint64_t v39 = v24;
    do
    {
      if (v40) {
        id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v23);
      }
      else {
        id v27 = *(id *)(v23 + 8 * v26 + 32);
      }
      id v29 = v27;
      *(&v36 - 2) = __chkstk_darwin(v27, v28);
      uint64_t v30 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
      uint64_t v31 = v42;
      static Message.with(_:)(sub_10017176C, &v36 - 4, v12, v30);
      uint64_t v42 = v31;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
      {
        sub_100041590((uint64_t)v11, &qword_100256D58);
        uint64_t v23 = v38;
      }

      else
      {
        uint64_t v32 = (uint64_t)v37;
        sub_100041608((uint64_t)v11, (uint64_t)v37, type metadata accessor for TLKShare);
        sub_100041608(v32, (uint64_t)v41, type metadata accessor for TLKShare);
        if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0) {
          a3 = (_TtC18TrustedPeersHelper6Client *)sub_1001494B8(0, *(void *)a3->endpoint + 1LL, 1, a3);
        }
        uint64_t v23 = v38;
        unint64_t v34 = *(void *)a3->endpoint;
        unint64_t v33 = *(void *)a3->containerMap;
        if (v34 >= v33 >> 1) {
          a3 = (_TtC18TrustedPeersHelper6Client *)sub_1001494B8(v33 > 1, v34 + 1, 1, a3);
        }
        *(void *)a3->endpoint = v34 + 1;
        sub_100041608( (uint64_t)v41,  (uint64_t)&a3->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
                                                 + *(void *)(v13 + 72) * v34],
          type metadata accessor for TLKShare);
      }

      ++v26;
    }

    while (v39 != v26);
    goto LABEL_22;
  }

  __break(1u);
  return result;
}

void *sub_1000E07FC(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v6, (uint64_t)qword_1002567D0);
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v7 = a2;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v18;
    *(_DWORD *)uint64_t v10 = 134218242;
    uint64_t v45 = a3;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0) {
        uint64_t v37 = a1;
      }
      else {
        uint64_t v37 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v37);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v38, v39, v40, v41, v42, v43, v44);
    }

    else
    {
      uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v11, v12, v13, v14, v15, v16, v17);
    uint64_t v46 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v20, v21, v22, v23, v24, v25, v26);
    *(_WORD *)(v10 + 12) = 2082;
    uint64_t v28 = *(void *)&v7->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID];
    id v27 = *(_TtC18TrustedPeersHelper6Client **)&v7->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID
                                                                             + 8];
    swift_bridgeObjectRetain(v27);
    uint64_t v46 = sub_10017C4C4(v28, (unint64_t)v27, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v10 + 14, v10 + 22);

    swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Attempting to recover %ld shares for peer %{public}s",  (uint8_t *)v10,  0x16u);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    a3 = v45;
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  return sub_1000E0A5C((_TtC18TrustedPeersHelper6Client *)a1, v7, 0LL, 0LL, a3);
}

void *sub_1000E0A5C( _TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v437 = (_TtC18TrustedPeersHelper6Client *)sub_10000C0A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = sub_100007578(&qword_100256E38);
  uint64_t inited = swift_initStackObject(v8, v442);
  *(_OWORD *)(inited + 16) = xmmword_1001DE710;
  v440 = a2;
  uint64_t v10 = type metadata accessor for OctagonSelfPeerKeys();
  uint64_t v11 = sub_1000077B8( &qword_100256E40,  (uint64_t (*)(uint64_t))type metadata accessor for OctagonSelfPeerKeys,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v12 = a2;
  AnyHashable.init<A>(_:)(&v440, v10, v11);
  v436 = (_TtC18TrustedPeersHelper6Client *)inited;
  v433 = (_TtC18TrustedPeersHelper6Client *)sub_10000C0B4( (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage,  v13,  v14,  v15,  v16,  v17,  v18,  v19);
  if (a4)
  {
    uint64_t v20 = a4;
  }

  else
  {
    uint64_t v20 = *(void *)&v12->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID
                                                    + 8];
    swift_bridgeObjectRetain(v20);
  }

  id v21 = (char *)v12;
  swift_bridgeObjectRetain(a4);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v20, v23, v24, v25, v26, v27, v28, v29);
  v440 = 0LL;
  id v30 = [(id)a5 peerWithID:v22 error:&v440];

  uint64_t v31 = (uint64_t)a1;
  v432 = v12;
  if (v440)
  {
    id v32 = v440;

    swift_willThrow(v33);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v34, (uint64_t)qword_1002567D0);
    a5 = v32;
    BOOL v35 = (os_log_s *)Logger.logObject.getter(a5);
    os_log_type_t v39 = static os_log_type_t.error.getter(v35, v36, v37, v38);
    uint64_t v20 = v39;
    if (os_log_type_enabled(v35, v39))
    {
      int64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v41 = (_TtC18TrustedPeersHelper6Client **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)int64_t v40 = 138543362;
      a5 = (uint64_t)(id)a5;
      id v42 = (_TtC18TrustedPeersHelper6Client *)_swift_stdlib_bridgeErrorToNSError(a5);
      v440 = v42;
      id v21 = (char *)v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v40 + 4, v40 + 12);
      *id v41 = v42;

      _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v20,  "Error getting ego peer from model: %{public}@",  v40,  0xCu);
      uint64_t v43 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v41, 1LL, v43);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      BOOL v35 = (os_log_s *)a5;
    }

    goto LABEL_18;
  }

  if (!v30)
  {
LABEL_18:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v66 = type metadata accessor for Logger(0LL);
    uint64_t v67 = sub_100006BAC(v66, (uint64_t)qword_1002567D0);
    id v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.info.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v20 = swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "No ego peer in model; no trusted peers", (uint8_t *)v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    id v422 = 0LL;
    goto LABEL_23;
  }

  id v422 = v30;
  NSString v44 = [v422 peerID];
  if (!v44)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v46 = v45;
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
  }

  uint64_t v54 = *(void *)&v12->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey];
  v440 = 0LL;
  uint64_t v20 = (uint64_t) [(id)a5 calculateDynamicInfoForPeerWithID:v44 addingPeerIDs:0 removingPeerIDs:0 preapprovedKeys:0 signingKeyPair:v54 curr entMachineIDs:0 error:&v440];

  char v55 = v440;
  if (v20)
  {
    uint64_t v56 = qword_100250EB8;
    uint64_t v57 = v440;
    if (v56 != -1) {
      goto LABEL_98;
    }
    goto LABEL_14;
  }

  v312 = v440;
  uint64_t v313 = _convertNSErrorToError(_:)(v55);

  a5 = v313;
  swift_willThrow(v314);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v315 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v315, (uint64_t)qword_1002567D0);
  swift_errorRetain(v313);
  uint64_t v316 = swift_errorRetain(v313);
  v317 = (os_log_s *)Logger.logObject.getter(v316);
  os_log_type_t v321 = static os_log_type_t.error.getter(v317, v318, v319, v320);
  uint64_t v20 = v321;
  if (os_log_type_enabled(v317, v321))
  {
    a5 = swift_slowAlloc(12LL, -1LL);
    v322 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v440 = v322;
    *(_DWORD *)a5 = 136446210;
    uint64_t v438 = v313;
    swift_errorRetain(v313);
    uint64_t v323 = sub_100007578(&qword_100251D70);
    uint64_t v324 = String.init<A>(describing:)(&v438, v323);
    v326 = (_TtC18TrustedPeersHelper6Client *)v325;
    uint64_t v438 = sub_10017C4C4(v324, v325, (uint64_t *)&v440);
    uint64_t v31 = (uint64_t)a1;
    id v21 = (char *)v432;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v438, v439, a5 + 4, a5 + 12);
    swift_bridgeObjectRelease(v326, v327, v328, v329, v330, v331, v332, v333);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v317,  (os_log_type_t)v20,  "Unable to create dynamic info for share recovery: %{public}s",  (uint8_t *)a5,  0xCu);
    swift_arrayDestroy(v322, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v322, -1LL, -1LL);
    swift_slowDealloc(a5, -1LL, -1LL);

    swift_errorRelease();
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }

LABEL_23:
  while (2)
  {
    uint64_t v70 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v31);
    if (v70)
    {
LABEL_25:
      if (v70 < 1)
      {
        __break(1u);
LABEL_98:
        swift_once(&qword_100250EB8, sub_1000DD078);
LABEL_14:
        uint64_t v58 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v58, (uint64_t)qword_1002567D0);
        int64_t v59 = (_TtC18TrustedPeersHelper6Client *)(id)v20;
        char v60 = (os_log_s *)Logger.logObject.getter(v59);
        os_log_type_t v61 = static os_log_type_t.info.getter(v60);
        if (os_log_type_enabled(v60, v61))
        {
          BOOL v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          BOOL v63 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)BOOL v62 = 138543362;
          v440 = v59;
          char v64 = v59;
          uint64_t v31 = (uint64_t)a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v62 + 4, v62 + 12);
          *BOOL v63 = v20;

          uint64_t v20 = (uint64_t)v62;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Using computed dynamic info for share recovery: %{public}@",  v62,  0xCu);
          uint64_t v65 = sub_100007578(&qword_100250F90);
          swift_arrayDestroy(v63, 1LL, v65);
          swift_slowDealloc(v63, -1LL, -1LL);
          swift_slowDealloc(v62, -1LL, -1LL);
        }

        else
        {

          char v60 = (os_log_s *)v59;
        }

        id v334 = -[Client includedPeerIDs](v59, "includedPeerIDs");
        v335 = (_TtC18TrustedPeersHelper6Client *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v334,  &type metadata for String,  &protocol witness table for String);

        id v336 = (id)a5;
        a5 = 0LL;
        sub_10015B294((uint64_t)v335, v336, &v436);
        swift_bridgeObjectRelease(v335, v337, v338, v339, v340, v341, v342, v343);

        id v21 = (char *)v432;
        continue;
      }

      uint64_t v424 = 0LL;
      id v78 = 0LL;
      v431 = &v21[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID];
      unint64_t v430 = v31 & 0xC000000000000001LL;
      uint64_t v423 = v31 + 32;
      uint64_t v31 = 40LL;
      uint64_t v426 = v70;
      while (1)
      {
        buf = v78;
        if (v430) {
          id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, a1);
        }
        else {
          id v101 = *(id *)(v423 + 8LL * (void)v78);
        }
        uint64_t v102 = v101;
        id v103 = [v101 receiverPeerID];
        uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
        uint64_t v106 = v105;

        int v112 = *(void **)v431;
        int64_t v113 = *((void *)v431 + 1);
        if (v104 == *(void *)v431 && v106 == (_TtC18TrustedPeersHelper6Client *)v113)
        {
          swift_bridgeObjectRelease(v106, v107, v112, v113, v108, v109, v110, v111);
        }

        else
        {
          char v115 = _stringCompareWithSmolCheck(_:_:expecting:)(v104, v106, v112, v113, 0LL);
          swift_bridgeObjectRelease(v106, v116, v117, v118, v119, v120, v121, v122);
          if ((v115 & 1) == 0)
          {
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v123 = type metadata accessor for Logger(0LL);
            sub_100006BAC(v123, (uint64_t)qword_1002567D0);
            id v124 = v102;
            uint64_t v125 = (os_log_s *)Logger.logObject.getter(v124);
            os_log_type_t v126 = static os_log_type_t.info.getter(v125);
            if (os_log_type_enabled(v125, v126))
            {
              uint64_t v127 = swift_slowAlloc(12LL, -1LL);
              unint64_t v128 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
              v440 = v128;
              *(_DWORD *)uint64_t v127 = 136446210;
              id v129 = v124;
              id v130 = [v129 description];
              a5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
              unint64_t v132 = v131;

              uint64_t v70 = v426;
              *(void *)(v127 + 4) = sub_10017C4C4(a5, v132, (uint64_t *)&v440);

              __int128 v133 = (_TtC18TrustedPeersHelper6Client *)v132;
              id v21 = (char *)v432;
              swift_bridgeObjectRelease(v133, v134, v135, v136, v137, v138, v139, v140);
              _os_log_impl( (void *)&_mh_execute_header,  v125,  v126,  "Skipping %{public}s (wrong peerID)",  (uint8_t *)v127,  0xCu);
              swift_arrayDestroy(v128, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v128, -1LL, -1LL);
              swift_slowDealloc(v127, -1LL, -1LL);
            }

            else
            {
            }

            goto LABEL_30;
          }
        }

        uint64_t v141 = v436;
        uint64_t v142 = *(void *)v436->endpoint;
        swift_bridgeObjectRetain(v436);
        uint64_t v150 = Set.init(minimumCapacity:)(v142, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
        uint64_t v151 = *(void *)v141->endpoint;
        if (v151)
        {
          v427 = v102;
          a5 = 0LL;
          do
          {
            sub_10000DE70((uint64_t)&v141[1] + 40 * a5, (uint64_t)&v440);
            Swift::Int v168 = *(void *)(v150 + 40);
            swift_bridgeObjectRetain(v150);
            Swift::Int v169 = AnyHashable._rawHashValue(seed:)(v168);
            uint64_t v170 = -1LL << *(_BYTE *)(v150 + 32);
            unint64_t v171 = v169 & ~v170;
            if (((*(void *)(v150 + 56 + ((v171 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v171) & 1) != 0)
            {
              uint64_t v172 = ~v170;
              while (1)
              {
                sub_10000DE70(*(void *)(v150 + 48) + 40 * v171, (uint64_t)&v438);
                char v173 = static AnyHashable.== infix(_:_:)(&v438, &v440);
                sub_10000DEAC((uint64_t)&v438);
                if ((v173 & 1) != 0) {
                  break;
                }
                unint64_t v171 = (v171 + 1) & v172;
                if (((*(void *)(v150 + 56 + ((v171 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v171) & 1) == 0) {
                  goto LABEL_46;
                }
              }

              uint64_t v160 = (_TtC18TrustedPeersHelper6Client *)v150;
            }

            else
            {
LABEL_46:
              swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v150,  v153,  v154,  v155,  v156,  v157,  v158,  v159);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v150);
              sub_10000DE70((uint64_t)&v440, (uint64_t)&v438);
              uint64_t v435 = v150;
              sub_1001524A8((uint64_t)&v438, v171, isUniquelyReferenced_nonNull_native);
              uint64_t v160 = (_TtC18TrustedPeersHelper6Client *)0x8000000000000000LL;
            }

            swift_bridgeObjectRelease(v160, v153, v154, v155, v156, v157, v158, v159);
            sub_10000DEAC((uint64_t)&v440);
            ++a5;
          }

          while (a5 != v151);
          swift_bridgeObjectRelease(v141, v161, v162, v163, v164, v165, v166, v167);
          id v21 = (char *)v432;
          uint64_t v102 = v427;
        }

        else
        {
          swift_bridgeObjectRelease(v141, v143, v144, v145, v146, v147, v148, v149);
        }

        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v150, v175, v176, v177, v178, v179, v180, v181);
        v440 = 0LL;
        id v182 = [v102 recoverTLK:v21 trustedPeers:isa ckrecord:0 error:&v440];

        uint64_t v183 = v440;
        if (v182)
        {
          v440 = 0LL;
          uint64_t v184 = v183;
          unsigned __int8 v185 = [v182 saveKeyMaterialToKeychain:&v440];
          uint64_t v186 = v440;
          if ((v185 & 1) != 0)
          {
            uint64_t v187 = v440;
            id v188 = [v182 uuid];
            uint64_t v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
            unint64_t v191 = v190;

            uint64_t v20 = (uint64_t)v182;
            uint64_t v192 = v437;
            char v193 = swift_isUniquelyReferenced_nonNull_native(v437);
            v440 = v192;
            v437 = (_TtC18TrustedPeersHelper6Client *)0x8000000000000000LL;
            sub_10014CB8C(v20, v189, (uint64_t)v191, v193, (uint64_t *)&unk_100256E70);
            uint64_t v194 = v437;
            v437 = v440;
            swift_bridgeObjectRelease(v191, v195, v196, v197, v198, v199, v200, v201);
            swift_bridgeObjectRelease(v194, v202, v203, v204, v205, v206, v207, v208);
            if (__OFADD__(v424, 1LL))
            {
              __break(1u);
LABEL_87:
              if (v31 < 0) {
                uint64_t v344 = v31;
              }
              else {
                uint64_t v344 = v31 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain(v31);
              uint64_t v70 = _CocoaArrayWrapper.endIndex.getter(v344);
              if (!v70) {
                goto LABEL_91;
              }
              goto LABEL_25;
            }

            ++v424;
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v209 = type metadata accessor for Logger(0LL);
            sub_100006BAC(v209, (uint64_t)qword_1002567D0);
            id v210 = (id)v20;
            id v211 = v102;
            id v212 = v210;
            id v213 = v211;
            uint64_t v214 = (os_log_s *)Logger.logObject.getter(v213);
            os_log_type_t v215 = static os_log_type_t.info.getter(v214);
            if (os_log_type_enabled(v214, v215))
            {
              uint64_t v216 = swift_slowAlloc(22LL, -1LL);
              v428 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(64LL, -1LL);
              v440 = v428;
              *(_DWORD *)uint64_t v216 = 136446466;
              id v217 = v212;
              id v218 = [v217 description];
              uint64_t v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
              uint64_t v221 = v220;

              uint64_t v438 = sub_10017C4C4(v219, (unint64_t)v221, (uint64_t *)&v440);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v438, v439, v216 + 4, v216 + 12);

              swift_bridgeObjectRelease(v221, v222, v223, v224, v225, v226, v227, v228);
              *(_WORD *)(v216 + 12) = 2082;
              id v229 = v213;
              a5 = (uint64_t)[v229 description];
              uint64_t v230 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5);
              uint64_t v232 = v231;

              uint64_t v233 = v230;
              id v21 = (char *)v432;
              uint64_t v438 = sub_10017C4C4(v233, (unint64_t)v232, (uint64_t *)&v440);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v438, v439, v216 + 14, v216 + 22);

              swift_bridgeObjectRelease(v232, v234, v235, v236, v237, v238, v239, v240);
              _os_log_impl( (void *)&_mh_execute_header,  v214,  v215,  "Recovered %{public}s (from %{public}s",  (uint8_t *)v216,  0x16u);
              swift_arrayDestroy(v428, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v428, -1LL, -1LL);
              swift_slowDealloc(v216, -1LL, -1LL);
            }

            else
            {
            }

            goto LABEL_29;
          }

          uint64_t v244 = v440;
          uint64_t v242 = _convertNSErrorToError(_:)(v186);

          swift_willThrow(v245);
        }

        else
        {
          v241 = v440;
          uint64_t v242 = _convertNSErrorToError(_:)(v183);

          swift_willThrow(v243);
        }

        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v246 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v246, (uint64_t)qword_1002567D0);
        id v247 = v102;
        swift_errorRetain(v242);
        id v248 = v247;
        uint64_t v249 = swift_errorRetain(v242);
        v250 = (os_log_s *)Logger.logObject.getter(v249);
        os_log_type_t v254 = static os_log_type_t.error.getter(v250, v251, v252, v253);
        if (os_log_type_enabled(v250, v254))
        {
          uint64_t v255 = swift_slowAlloc(22LL, -1LL);
          v429 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(64LL, -1LL);
          v440 = v429;
          *(_DWORD *)uint64_t v255 = 136446466;
          id v256 = v248;
          id v257 = [v256 description];
          uint64_t v258 = static String._unconditionallyBridgeFromObjectiveC(_:)(v257);
          id v259 = v248;
          unint64_t v261 = v260;

          id v21 = (char *)v432;
          uint64_t v438 = sub_10017C4C4(v258, v261, (uint64_t *)&v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v438, v439, v255 + 4, v255 + 12);

          uint64_t v262 = (_TtC18TrustedPeersHelper6Client *)v261;
          id v248 = v259;
          swift_bridgeObjectRelease(v262, v263, v264, v265, v266, v267, v268, v269);
          *(_WORD *)(v255 + 12) = 2082;
          uint64_t v438 = v242;
          swift_errorRetain(v242);
          uint64_t v270 = sub_100007578(&qword_100251D70);
          uint64_t v271 = String.init<A>(describing:)(&v438, v270);
          uint64_t v273 = (_TtC18TrustedPeersHelper6Client *)v272;
          uint64_t v438 = sub_10017C4C4(v271, v272, (uint64_t *)&v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v438, v439, v255 + 14, v255 + 22);
          swift_bridgeObjectRelease(v273, v274, v275, v276, v277, v278, v279, v280);
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v250,  v254,  "Failed to recover share %{public}s: %{public}s",  (uint8_t *)v255,  0x16u);
          swift_arrayDestroy(v429, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v429, -1LL, -1LL);
          swift_slowDealloc(v255, -1LL, -1LL);
        }

        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }

        id v281 = [v248 tlkUUID];
        uint64_t v282 = static String._unconditionallyBridgeFromObjectiveC(_:)(v281);
        v284 = v283;

        if (*(void *)v433->endpoint && (unint64_t v292 = sub_10000D1E8(v282, (uint64_t)v284), (v285 & 1) != 0))
        {
          uint64_t v293 = *(_TtC18TrustedPeersHelper6Client **)(*(void *)v433[1].containerMap + 8 * v292);
          swift_bridgeObjectRetain(v293);
          swift_bridgeObjectRelease(v284, v294, v295, v296, v297, v298, v299, v300);
          id v301 = [v248 tlkUUID];
          uint64_t v302 = static String._unconditionallyBridgeFromObjectiveC(_:)(v301);
          uint64_t v304 = v303;

          swift_errorRetain(v242);
          if ((swift_isUniquelyReferenced_nonNull_native(v293) & 1) == 0) {
            uint64_t v293 = sub_1001496C0(0LL, *(void *)v293->endpoint + 1LL, 1, v293, v305, v306, v307, v308);
          }
          unint64_t v310 = *(void *)v293->endpoint;
          unint64_t v309 = *(void *)v293->containerMap;
          a5 = v310 + 1;
          if (v310 >= v309 >> 1) {
            uint64_t v293 = sub_1001496C0( (_TtC18TrustedPeersHelper6Client *)(v309 > 1),  v310 + 1,  1,  v293,  v305,  v306,  v307,  v308);
          }
          *(void *)v293->endpoint = a5;
          *(void *)&v293[1]._TtCs12_SwiftObject_opaque[8 * v310] = v242;
          char v311 = swift_isUniquelyReferenced_nonNull_native(v433);
          v440 = v433;
          sub_10014CD0C((uint64_t)v293, v302, v304, v311, &qword_1002515B0);
          v433 = v440;

          uint64_t v93 = (_TtC18TrustedPeersHelper6Client *)v304;
        }

        else
        {
          swift_bridgeObjectRelease(v284, v285, v286, v287, v288, v289, v290, v291);
          id v79 = [v248 tlkUUID];
          a5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
          unint64_t v80 = v248;
          uint64_t v82 = v81;

          uint64_t v83 = sub_100007578(&qword_100256E58);
          uint64_t v84 = swift_allocObject(v83, 40LL, 7LL);
          *(_OWORD *)(v84 + 16) = xmmword_1001DE710;
          *(void *)(v84 + 32) = v242;
          swift_errorRetain(v242);
          char v85 = swift_isUniquelyReferenced_nonNull_native(v433);
          v440 = v433;
          sub_10014CD0C(v84, a5, v82, v85, &qword_1002515B0);
          v433 = v440;

          uint64_t v93 = (_TtC18TrustedPeersHelper6Client *)v82;
        }

        swift_bridgeObjectRelease(v93, v86, v87, v88, v89, v90, v91, v92);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0x8000000000000000LL,  v94,  v95,  v96,  v97,  v98,  v99,  v100);
        swift_errorRelease();
LABEL_29:
        uint64_t v70 = v426;
LABEL_30:
        id v78 = buf + 1;
      }
    }

    break;
  }

  __break(1u);
LABEL_24:
  BOOL v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v31 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v31,  1092LL,  0);
  __break(1u);
}

    BOOL v17 = (v26 - 1) & v26;
    SEL v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    BOOL v28 = *(void *)(v7 + 72);
    BOOL v29 = *(void *)(v11 + 48) + v28 * v23;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v29, v6);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v29, v6);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }

    uint64_t v31 = *(void *)(v13 + 40);
    id v32 = sub_1000077B8( (unint64_t *)&unk_100256C50,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32);
    uint64_t v33 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v34 = result & ~v33;
    BOOL v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      id v21 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v38 = v35 == v37;
        if (v35 == v37) {
          BOOL v35 = 0LL;
        }
        v36 |= v38;
        os_log_type_t v39 = *(void *)(v18 + 8 * v35);
      }

      while (v39 == -1);
      id v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v13 + 48) + v28 * v21,  v10,  v6);
    *(void *)(*(void *)(v13 + 56) + 8 * v21) = v30;
    ++*(void *)(v13 + 16);
  }

  swift_release(v11);
  id v3 = v42;
  int64_t v25 = v44;
  if ((v46 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v40 = 1LL << *(_BYTE *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v40;
  }
  *(void *)(v11 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v11);
  uint64_t *v3 = v13;
  return result;
}

    os_log_type_t v9 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    BOOL v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    BOOL v18 = *v17;
    BOOL v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1LL << v8[32];
    id v21 = result & ~v20;
    NSString v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      SEL v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v24 = 0;
      int64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v26 = v22 == v25;
        if (v22 == v25) {
          NSString v22 = 0LL;
        }
        v24 |= v26;
        id v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      SEL v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    BOOL v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *BOOL v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  BOOL v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  int64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    int64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    uint64_t v11 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    BOOL v19 = v10[5];
    uint64_t v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    id v21 = -1LL << *((_BYTE *)v10 + 32);
    NSString v22 = result & ~v21;
    SEL v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      id v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v25 = 0;
      id v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v27 = v23 == v26;
        if (v23 == v26) {
          SEL v23 = 0LL;
        }
        v25 |= v27;
        BOOL v28 = *(void *)(v13 + 8 * v23);
      }

      while (v28 == -1);
      id v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v6) {
      goto LABEL_36;
    }
  }

  BOOL v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  BOOL v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    BOOL v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  os_log_type_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    uint64_t v6 = (v17 - 1) & v17;
    uint64_t v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    int64_t v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1001558A0(v12, v13);
    int64_t v15 = v14;
    swift_bridgeObjectRelease(v13);
    uint64_t result = swift_bridgeObjectRelease(v15);
  }

  BOOL v18 = v16 + 4;
  if (v18 >= v7) {
    return swift_release(v2);
  }
  BOOL v17 = *(void *)(v3 + 8 * v18);
  if (v17)
  {
    uint64_t v8 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release(v2);
    }
    BOOL v17 = *(void *)(v3 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v11 = __CocoaSet.element(at:)(a1, a2, v10);
  int64_t v25 = v11;
  uint64_t v12 = a5(0LL);
  swift_unknownObjectRetain(v11, v13);
  swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
  swift_unknownObjectRelease(v11);
}

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  os_log_type_t v9 = __CocoaSet.element(at:)(a1, a2, v8);
  SEL v23 = v9;
  uint64_t v10 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
  swift_unknownObjectRetain(v9, v11);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

  swift_bridgeObjectRelease_n(v33, 2LL);
  uint64_t v67 = 0LL;
  id v41 = [a3 save:&v67];
  uint64_t v43 = v67;
  if ((v41 & 1) == 0)
  {
    SEL v47 = v67;
    id v48 = _convertNSErrorToError(_:)(v43);

    swift_willThrow(v49);
    swift_errorRetain(v48);
    id v50 = swift_errorRetain(v48);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v50);
    uint64_t v54 = static os_log_type_t.error.getter(v31, v51, v52, v53);
    if (os_log_type_enabled(v31, v54))
    {
      char v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v56 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)char v55 = 138543362;
      swift_errorRetain(v48);
      uint64_t v57 = (void *)_swift_stdlib_bridgeErrorToNSError(v48);
      uint64_t v67 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v55 + 4, v55 + 12);
      _TtC18TrustedPeersHelper6Client *v56 = v57;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v54, "voucher cleanup unable to save %{public}@", v55, 0xCu);
      uint64_t v58 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v56, 1LL, v58);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow(v59);
    goto LABEL_29;
  }

  NSString v44 = v68;
  __chkstk_darwin(v41, v42);
  BOOL v62 = (void **)a3;
  BOOL v63 = v66;
  uint64_t v45 = v43;
  uint64_t v46 = swift_bridgeObjectRetain(v44);
  sub_1001BD7E8(v46, sub_1001BE120);
  swift_bridgeObjectRelease(v44);

  uint64_t v31 = (os_log_s *)v68[2];
  swift_bridgeObjectRelease(v68);
  LOBYTE(v31) = v31 != 0LL;
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v70);
  return v31 & 1;
}

LABEL_91:
  uint64_t v424 = 0LL;
LABEL_92:
  swift_bridgeObjectRelease(a1, v71, v72, v73, v74, v75, v76, v77);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v345 = type metadata accessor for Logger(0LL);
  uint64_t v346 = sub_100006BAC(v345, (uint64_t)qword_1002567D0);
  v347 = (os_log_s *)Logger.logObject.getter(v346);
  os_log_type_t v348 = static os_log_type_t.info.getter(v347);
  if (os_log_type_enabled(v347, v348))
  {
    v349 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v350 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v440 = v350;
    *(_DWORD *)v349 = 136446210;
    swift_beginAccess(&v437, &v438, 0LL, 0LL);
    v351 = v437;
    uint64_t v352 = sub_100007620(0LL, &qword_100256E50, off_10022CE90);
    uint64_t v353 = swift_bridgeObjectRetain(v351);
    uint64_t v354 = Dictionary.description.getter(v353, &type metadata for String, v352, &protocol witness table for String);
    v356 = (_TtC18TrustedPeersHelper6Client *)v355;
    swift_bridgeObjectRelease(v351, v355, v357, v358, v359, v360, v361, v362);
    uint64_t v435 = sub_10017C4C4(v354, (unint64_t)v356, (uint64_t *)&v440);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v435, &v436, v349 + 4, v349 + 12);
    swift_bridgeObjectRelease(v356, v363, v364, v365, v366, v367, v368, v369);
    _os_log_impl((void *)&_mh_execute_header, v347, v348, "Recovered TLKs: %{public}s", v349, 0xCu);
    swift_arrayDestroy(v350, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v350, -1LL, -1LL);
    swift_slowDealloc(v349, -1LL, -1LL);
  }

  swift_beginAccess(&v437, &v440, 0LL, 0LL);
  v370 = v437;
  uint64_t v371 = swift_bridgeObjectRetain(v437);
  v372 = sub_10014E190(v371);
  swift_bridgeObjectRelease(v370, v373, v374, v375, v376, v377, v378, v379);
  uint64_t v380 = swift_bridgeObjectRetain(v370);
  sub_1000E273C(v380);
  v382 = v381;
  id v383 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperTLKRecoveryResult);
  swift_bridgeObjectRetain(v433);
  Class v384 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v382, v385, v386, v387, v388, v389, v390, v391);
  sub_100007578(&qword_100256E48);
  Class v392 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v433, v393, v394, v395, v396, v397, v398, v399);
  [v383 initWithSuccessfulKeyUUIDs:v384 totalTLKSharesRecovered:v424 tlkRecoveryErrors:v392];
  swift_bridgeObjectRelease(v433, v400, v401, v402, v403, v404, v405, v406);

  swift_bridgeObjectRelease(v436, v407, v408, v409, v410, v411, v412, v413);
  swift_bridgeObjectRelease(v437, v414, v415, v416, v417, v418, v419, v420);
  return v372;
}

void sub_1000E20E4( void *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, _TtC18TrustedPeersHelper6Client **a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  *(void *)&v77[0] = 0LL;
  id v9 = [a1 peerWithID:v8 error:v77];

  p_vtable = &OBJC_CLASS___VoucherMO.vtable;
  if (*(void *)&v77[0])
  {
    id v11 = *(id *)&v77[0];

    swift_willThrow(v12);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v13, (uint64_t)qword_1002567D0);
    swift_bridgeObjectRetain_n(a3, 2LL);
    id v14 = v11;
    int64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v19 = static os_log_type_t.error.getter(v15, v16, v17, v18);
    if (os_log_type_enabled(v15, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v21 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v77[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain(a3);
      uint64_t v76 = sub_10017C4C4(a2, (unint64_t)a3, (uint64_t *)v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v20 + 12) = 2082;
      uint64_t v76 = (uint64_t)v14;
      id v22 = v14;
      uint64_t v23 = sub_100007578(&qword_100251D70);
      uint64_t v24 = String.init<A>(describing:)(&v76, v23);
      id v26 = (_TtC18TrustedPeersHelper6Client *)v25;
      uint64_t v76 = sub_10017C4C4(v24, v25, (uint64_t *)v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v20 + 14, v20 + 22);

      swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v19,  "Error getting included peer (%s) from model: %{public}s",  (uint8_t *)v20,  0x16u);
      swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v34 = v21;
      p_vtable = (void **)(&OBJC_CLASS___VoucherMO + 24);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    goto LABEL_13;
  }

  if (!v9)
  {
LABEL_13:
    uint64_t v68 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v68, (uint64_t)qword_1002567D0);
    uint64_t v69 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = static os_log_type_t.info.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      id v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v77[0] = v73;
      *(_DWORD *)id v72 = 136446210;
      swift_bridgeObjectRetain(a3);
      uint64_t v76 = sub_10017C4C4(a2, (unint64_t)a3, (uint64_t *)v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "No peer for trusted ID %{public}s", v72, 0xCu);
      swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    return;
  }

  swift_bridgeObjectRetain(a3);
  id v35 = v9;
  id v36 = [v35 permanentInfo];
  id v37 = [v36 encryptionPubKey];

  uint64_t v38 = objc_opt_self(&OBJC_CLASS____SFECPublicKey);
  uint64_t v74 = swift_dynamicCastObjCClassUnconditional(v37, v38, 0LL, 0LL, 0LL);
  os_log_type_t v75 = v35;
  id v39 = [v35 permanentInfo];
  id v40 = [v39 signingPubKey];

  uint64_t v41 = objc_opt_self(&OBJC_CLASS____SFECPublicKey);
  uint64_t v42 = swift_dynamicCastObjCClassUnconditional(v40, v41, 0LL, 0LL, 0LL);
  id v43 = objc_allocWithZone((Class)&OBJC_CLASS___CKKSActualPeer);
  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3, v45, v46, v47, v48, v49, v50, v51);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  id v53 = [v43 initWithPeerID:v44 encryptionPublicKey:v74 signingPublicKey:v42 viewList:isa];

  swift_unknownObjectRelease(v37);
  swift_unknownObjectRelease(v40);
  uint64_t v76 = (uint64_t)v53;
  uint64_t v54 = sub_100007620(0LL, &qword_100256E60, off_10022CE88);
  uint64_t v55 = sub_100171984(&qword_100256E68, &qword_100256E60, off_10022CE88);
  id v56 = v53;
  AnyHashable.init<A>(_:)(&v76, v54, v55);
  uint64_t v57 = *a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  *a4 = v57;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v57 = sub_1001497CC(0LL, *(void *)v57->endpoint + 1LL, 1, v57, v59, v60, v61, v62);
    *a4 = v57;
  }

  unint64_t v64 = *(void *)v57->endpoint;
  unint64_t v63 = *(void *)v57->containerMap;
  if (v64 >= v63 >> 1)
  {
    uint64_t v57 = sub_1001497CC((_TtC18TrustedPeersHelper6Client *)(v63 > 1), v64 + 1, 1, v57, v59, v60, v61, v62);
    *a4 = v57;
  }

  *(void *)v57->endpoint = v64 + 1;
  uint64_t v65 = (char *)v57 + 40 * v64;
  __int128 v66 = v77[0];
  __int128 v67 = v77[1];
  *((void *)v65 + 8) = v78;
  *((_OWORD *)v65 + 2) = v66;
  *((_OWORD *)v65 + 3) = v67;
}

void sub_1000E273C(uint64_t a1)
{
  int64_t v2 = 0LL;
  _OWORD v23[2] = Set.init(minimumCapacity:)( *(void *)(a1 + 16),  &type metadata for String,  &protocol witness table for String);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v20 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v20 >= v7) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v3 + 8 * v20);
    ++v2;
    if (!v21)
    {
      int64_t v2 = v20 + 1;
      if (v20 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v3 + 8 * v2);
      if (!v21)
      {
        int64_t v2 = v20 + 2;
        if (v20 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v21 = *(void *)(v3 + 8 * v2);
        if (!v21)
        {
          int64_t v2 = v20 + 3;
          if (v20 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v21 = *(void *)(v3 + 8 * v2);
          if (!v21) {
            break;
          }
        }
      }
    }

void *sub_1000E28D0()
{
  uint64_t result = (void *)sub_10000C1CC((uint64_t)_swiftEmptyArrayStorage);
  off_1002567E8 = result;
  return result;
}

uint64_t sub_1000E28F4()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5, v6);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007620(0LL, &qword_100250FF8, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v13);
  BOOL v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_1000077B8( &qword_100251000,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v15 = sub_100007578(&qword_100251008);
  uint64_t v16 = sub_1001738E0( (unint64_t *)&qword_100251010,  &qword_100251008,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v5, v14);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000034LL,  0x80000001001F94B0LL,  v12,  v8,  v4,  0LL);
  qword_1002567F0 = result;
  return result;
}

void sub_1000E2AC8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (qword_100250EC0 != -1) {
    swift_once(&qword_100250EC0, sub_1000E28D0);
  }
  swift_beginAccess(&off_1002567E8, v23, 32LL, 0LL);
  uint64_t v9 = off_1002567E8;
  if (*((void *)off_1002567E8 + 2) && (unint64_t v10 = sub_10000D2AC(a1), (v11 & 1) != 0))
  {
    uint64_t v12 = *(void **)(v9[7] + 8 * v10);
    swift_endAccess(v23);
    *a2 = v12;
    id v13 = v12;
  }

  else
  {
    int64_t v22 = a2;
    swift_endAccess(v23);
    id v14 = objc_allocWithZone(&OBJC_CLASS___NSManagedObjectModel);
    URL._bridgeToObjectiveC()(v15);
    id v17 = v16;
    id v18 = [v14 initWithContentsOfURL:v16];

    if (v18)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
      swift_beginAccess(&off_1002567E8, v23, 33LL, 0LL);
      id v19 = v18;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_1002567E8);
      uint64_t v24 = off_1002567E8;
      off_1002567E8 = (_UNKNOWN *)0x8000000000000000LL;
      sub_10014C624((uint64_t)v19, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
      unint64_t v21 = off_1002567E8;
      off_1002567E8 = v24;
      swift_bridgeObjectRelease(v21);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
      swift_endAccess(v23);
      void *v22 = v19;
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_1000E2CA0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v8._uint64_t countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(a2);
  v9._uint64_t countAndFlagsBits = 44LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  swift_bridgeObjectRetain(a4);
  v10._uint64_t countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(a4);
  v11._uint64_t countAndFlagsBits = 41LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return 0x656E6961746E6F43LL;
}

Swift::Int sub_1000E2D7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)(v6);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E2E00(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000E2E70()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)(v6);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E2EF0()
{
  return sub_1000E2CA0(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000E2EFC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  BOOL v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0LL), uint64_t result = 0LL, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0LL);
    }
  }

  return result;
}

id sub_1000E2F8C()
{
  uint64_t v1 = v0;
  id v2 = [v0 egoPeerStableInfo];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v6 = v5;

  id v7 = [v1 egoPeerStableInfoSig];
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
    unint64_t v11 = v10;

    id v12 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v14 = Data._bridgeToObjectiveC()().super.isa;
    id v8 = [v12 initWithData:isa sig:v14];
    sub_10000852C(v9, v11);
    sub_10000852C(v4, v6);
  }

  else
  {
    sub_10000852C(v4, v6);
  }

  return v8;
}

uint64_t sub_1000E30AC()
{
  uint64_t v1 = v0;
  if (*(_BYTE *)(v0 + 40) != 1)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v3, (uint64_t)qword_1002567D0);
    uint64_t v4 = swift_retain(v0);
    unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v18 = v8;
      *(_DWORD *)id v7 = 136446210;
      uint64_t v9 = *(void *)(v1 + 24);
      unint64_t v10 = *(void *)(v1 + 32);
      swift_bridgeObjectRetain(v10);
      uint64_t v17 = sub_10017C4C4(v9, v10, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v7 + 4, v7 + 12);
      swift_release(v1);
      swift_bridgeObjectRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Semaphore was not signaled by %{public}s", v7, 0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {

      swift_release(v1);
    }

    unint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___SecABC);
    NSString v12 = String._bridgeToObjectiveC()();
    NSString v13 = String._bridgeToObjectiveC()();
    uint64_t v14 = *(void *)(v1 + 32);
    swift_bridgeObjectRetain(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    NSString v16 = String._bridgeToObjectiveC()();
    [v11 triggerAutoBugCaptureWithType:v12 subType:v13 subtypeContext:v15 domain:v16 events:0 payload:0 detectedProcess:0];

    _exit(1);
  }

  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return v0;
}

uint64_t sub_1000E3348()
{
  return swift_deallocClassInstance(v0, 41LL, 7LL);
}

void sub_1000E3368(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v5, (uint64_t)qword_1002567D0);
    uint64_t v6 = swift_bridgeObjectRetain_n(a2, 2LL);
    id v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v10;
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain(a2);
      uint64_t v19 = sub_10017C4C4(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Semaphore double signaled by %{public}s", v9, 0xCu);
      swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    unint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___SecABC);
    NSString v12 = String._bridgeToObjectiveC()();
    NSString v13 = String._bridgeToObjectiveC()();
    NSString v14 = String._bridgeToObjectiveC()();
    NSString v15 = String._bridgeToObjectiveC()();
    [v11 triggerAutoBugCaptureWithType:v12 subType:v13 subtypeContext:v14 domain:v15 events:0 payload:0 detectedProcess:0];

    _exit(1);
  }

  *(_BYTE *)(v2 + 40) = 1;
  uint64_t v3 = (void *)(*(void *)(v2 + 16) + OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore);
  uint64_t v4 = v3[1];
  void *v3 = 0LL;
  v3[1] = 0LL;
  swift_bridgeObjectRelease(v4);
  id v17 = *(id *)(*(void *)(v2 + 16) + OBJC_IVAR____TtC18TrustedPeersHelper9Container_semaphore);
  OS_dispatch_semaphore.signal()();
}

uint64_t sub_1000E3618()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = v3;
  if (v2 >> 60 == 15)
  {
    uint64_t v5 = sub_1000DF270(0x79654B43414D48LL, 0xE700000000000000LL);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)(v1 + 32);
      unint64_t v8 = *(void *)(v1 + 40);
      *(void *)(v1 + 32) = v5;
      *(void *)(v1 + 40) = v6;
      uint64_t v9 = v7;
      unint64_t v10 = v8;
LABEL_11:
      sub_10003C1D0(v9, v10);
      uint64_t v4 = *(void *)(v1 + 32);
      sub_10004C798(v4, *(void *)(v1 + 40));
      goto LABEL_12;
    }

    uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(32LL, &type metadata for UInt8);
    *(void *)(v11 + 16) = 32LL;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    int v12 = SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, (void *)(v11 + 32));
    if (!v12)
    {
      uint64_t v19 = sub_10000FCD8(v11);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease(v11);
      sub_1000DEAA8(v19, v21, 0x79654B43414D48LL, 0xE700000000000000LL);
      uint64_t v9 = *(void *)(v1 + 32);
      unint64_t v10 = *(void *)(v1 + 40);
      *(void *)(v1 + 32) = v19;
      *(void *)(v1 + 40) = v21;
      goto LABEL_11;
    }

    int v13 = v12;
    swift_bridgeObjectRelease(v11);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_100006BAC(v14, (uint64_t)qword_1002567D0);
    NSString v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v18 = 67109120;
      v23[0] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, &v23[1], v18 + 4, v18 + 8);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "failed generating random bytes: %d", v18, 8u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v4 = 0LL;
  }

void sub_1000E3DB0()
{
  uint64_t v2 = v0;
  id v3 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100007578(&qword_100251578);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  __int128 v28 = xmmword_1001DE710;
  *(_OWORD *)(v7 + 16) = xmmword_1001DE710;
  unint64_t v8 = *(void **)(v2 + 24);
  *(void *)(v7 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v7 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v7 + 32) = v8;
  id v9 = v8;
  unint64_t v10 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v7);
  [v5 setPredicate:v10];

  uint64_t v11 = sub_100007578(&qword_100256C28);
  uint64_t v12 = swift_allocObject(v11, 64LL, 7LL);
  *(_OWORD *)(v12 + 16) = v28;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 32) = 0x444972656570LL;
  *(void *)(v12 + 40) = 0xE600000000000000LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  [v5 setPropertiesToFetch:isa];

  uint64_t v14 = type metadata accessor for PeerMO();
  uint64_t v15 = NSManagedObjectContext.count<A>(for:)(v5, v14);
  if (v1)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_1002567D0);
    swift_errorRetain(v1);
    uint64_t v17 = swift_errorRetain(v1);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v20 = 138543362;
      swift_errorRetain(v1);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v1);
      uint64_t v29 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v20 + 4, v20 + 12);
      uint64_t *v21 = v22;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to fetch peers: %{public}@", v20, 0xCu);
      uint64_t v23 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v21, 1LL, v23);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    swift_willThrow(v26);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }

  else
  {
    id v31 = sub_1001498EC(0LL, v15 & ~(v15 >> 63), 0, _swiftEmptyArrayStorage);
    id v24 = [v5 setFetchBatchSize:25];
    __chkstk_darwin(v24, v25);
    v27[2] = &v31;
    v27[3] = v2;
    sub_1000DE3C4( v5,  (void (*)(void *, _BYTE *))ResetReason.rawValue.getter,  0LL,  (void (*)(uint64_t))sub_1001732A4,  (uint64_t)v27,  (uint64_t (*)(void))type metadata accessor for PeerMO);
  }

uint64_t sub_1000E4330(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (v7)
  {
    while (v7 >= 1)
    {
      uint64_t v30 = v4;
      unint64_t v31 = a3;
      uint64_t v9 = 0LL;
      a3 = v6 & 0xC000000000000001LL;
      unint64_t v10 = _swiftEmptyArrayStorage;
      do
      {
        if (a3) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
        }
        else {
          id v11 = *(id *)(v6 + 8 * v9 + 32);
        }
        uint64_t v12 = v11;
        id v13 = objc_msgSend(v11, "peerID", v30);
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = v6;
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          uint64_t v18 = v17;

          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
            unint64_t v10 = sub_1001498EC(0LL, v10[2] + 1LL, 1, v10);
          }
          unint64_t v20 = v10[2];
          unint64_t v19 = v10[3];
          if (v20 >= v19 >> 1) {
            unint64_t v10 = sub_1001498EC((void *)(v19 > 1), v20 + 1, 1, v10);
          }
          v10[2] = v20 + 1;
          unint64_t v21 = &v10[2 * v20];
          v21[4] = v16;
          v21[5] = v18;
          uint64_t v6 = v15;
        }

        else
        {
        }

        ++v9;
      }

      while (v7 != v9);
      swift_bridgeObjectRelease(v6);
      sub_1000E4734((uint64_t)v10);
      uint64_t v22 = *(void **)(v31 + 16);
      swift_bridgeObjectRetain_n(v6, 2LL);
      id v23 = v22;
      uint64_t v24 = 4LL;
      uint64_t v25 = 0LL;
      if (a3)
      {
LABEL_17:
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v6);
        goto LABEL_19;
      }

      while (1)
      {
        id v26 = *(id *)(v6 + 8 * v24);
LABEL_19:
        SEL v27 = v26;
        BOOL v28 = __OFADD__(v25, 1LL);
        uint64_t v4 = v25 + 1;
        if (v28) {
          break;
        }

        if (v4 == v7)
        {

          return swift_bridgeObjectRelease_n(v6, 2LL);
        }

        uint64_t v25 = ++v24 - 4;
        if (a3) {
          goto LABEL_17;
        }
      }

      __break(1u);
LABEL_27:
      if (v6 < 0) {
        uint64_t v29 = v6;
      }
      else {
        uint64_t v29 = v6 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v6);
      uint64_t result = _CocoaArrayWrapper.endIndex.getter(v29);
      uint64_t v7 = result;
      if (!result) {
        goto LABEL_31;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_31:
    swift_bridgeObjectRelease(v6);
    return sub_1000E4734((uint64_t)_swiftEmptyArrayStorage);
  }

  return result;
}

uint64_t sub_1000E459C(_TtC18TrustedPeersHelper6Client *a1)
{
  unint64_t v2 = *(void *)a1->endpoint;
  uint64_t v3 = (uint64_t)*v1;
  uint64_t v4 = *(void *)(*v1)->endpoint;
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = (_TtC18TrustedPeersHelper6Client *)v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    uint64_t v15 = *(void *)(v3 + 24) >> 1;
    if (v15 >= v5)
    {
      unint64_t v16 = *(void *)a1->endpoint;
      if (v16) {
        goto LABEL_5;
      }
LABEL_17:
      if (!v2) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }

  if (v4 <= v5) {
    v4 += v2;
  }
  swift_bridgeObjectRetain(v3);
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v4,  1LL,  v3);
  swift_bridgeObjectRelease(*v1, v23, v24, v25, v26, v27, v28, v29);
  *uint64_t v1 = (_TtC18TrustedPeersHelper6Client *)v3;
  uint64_t v15 = *(void *)(v3 + 24) >> 1;
  unint64_t v16 = *(void *)a1->endpoint;
  if (!v16) {
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v17 = *(void *)(v3 + 16);
  if (v15 - v17 < (uint64_t)v16)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v18 = v3 + 8 * v17 + 32;
  if ((unint64_t)a1[1]._TtCs12_SwiftObject_opaque < v18 + 8 * v16
    && v18 < (unint64_t)&a1[1]._TtCs12_SwiftObject_opaque[8 * v16])
  {
    goto LABEL_23;
  }

  sub_100007578(&qword_100256D90);
  swift_arrayInitWithCopy(v18);
  if (v16 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v20 = *(void *)(*v1)->endpoint;
  BOOL v21 = __OFADD__(v20, v16);
  uint64_t v22 = v20 + v16;
  if (!v21)
  {
    *(void *)(*v1)->endpoint = v22;
LABEL_18:
    swift_bridgeObjectRelease(a1, v7, v8, v9, v10, v11, v12, v13);
    return specialized Array._endMutation()(v30);
  }

uint64_t sub_1000E4734(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1001498EC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_1000E4884(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_100153B04(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

void sub_1000E4A3C(_TtC18TrustedPeersHelper6Client *a1)
{
  uint64_t v2 = *(void *)a1->endpoint;
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1)->endpoint;
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)v3->containerMap >> 1)
  {
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v30 = v4 + v2;
  }
  else {
    int64_t v30 = v4;
  }
  uint64_t v3 = (_TtC18TrustedPeersHelper6Client *)sub_1001494B8(isUniquelyReferenced_nonNull_native, v30, 1, v3);
  if (!*(void *)a1->endpoint)
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_1000E4C50(void *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithEntityName:v5];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v7 = sub_100007578(&qword_100251578);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1001DE710;
  uint64_t v9 = *(void **)(v2 + 24);
  *(void *)(v8 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v8 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v8 + 32) = v9;
  id v10 = v9;
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v8);
  [v6 setPredicate:v11];

  uint64_t v12 = type metadata accessor for PeerMO();
  uint64_t v14 = NSManagedObjectContext.count<A>(for:)(v6, v12);

  if (v14 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);

    if (a1)
    {
      id v13 = 0LL;
      *a1 = 0LL;
    }

    else
    {
    }

    swift_errorRelease();
    return 0LL;
  }

  return v14;
}

void *sub_1000E5024(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)sub_1001616C8(*(void *)(v2 + 16), *(void **)(v2 + 24), a1, a2);
  id v4 = sub_1000E59B4(v3);

  sub_1000DE140();
  return v4;
}

void sub_1000E5380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithEntityName:v7];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v9 = sub_100007578(&qword_100251578);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001DE710;
  uint64_t v11 = *(void **)(v3 + 24);
  *(void *)(v10 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v10 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v10 + 32) = v11;
  id v12 = v11;
  id v13 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v10);
  [v8 setPredicate:v13];

  [v8 setFetchBatchSize:25];
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  sub_1000DE3C4( v8,  sub_100173270,  (uint64_t)v14,  (void (*)(uint64_t))sub_10017328C,  v3,  (uint64_t (*)(void))type metadata accessor for PeerMO);
}

void sub_1000E5520(void *a1, _BYTE *a2, uint64_t a3, void (*a4)(void *, char *))
{
  id v6 = sub_1000E59B4(a1);
  if (v6)
  {
    NSString v7 = v6;
    char v8 = 0;
    a4(v6, &v8);

    *a2 = v8;
  }

uint64_t sub_1000E55BC(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a2 + 16);
  sub_1000DE140();
  if (v2) {
    swift_errorRelease();
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain_n(a1, 2LL);
  for (i = v4; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v7 = 4LL;
    uint64_t v8 = 0LL;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
LABEL_6:
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      goto LABEL_8;
    }

    while (1)
    {
      id v9 = *(id *)(a1 + 8 * v7);
LABEL_8:
      uint64_t v10 = v9;
      BOOL v11 = __OFADD__(v8, 1LL);
      uint64_t v12 = v8 + 1;
      if (v11) {
        break;
      }

      if (v12 == v5) {
        goto LABEL_14;
      }
      uint64_t v8 = ++v7 - 4;
      if ((a1 & 0xC000000000000001LL) != 0) {
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_16:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(a1, 2LL);
    id v15 = v4;
  }

id sub_1000E5720(uint64_t a1, uint64_t a2, void *a3)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    id result = (id)_CocoaArrayWrapper.endIndex.getter(v19);
    uint64_t v5 = (uint64_t)result;
    int64_t v30 = a3;
    if (result) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v8 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }

  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  id result = (id)swift_bridgeObjectRetain(a1);
  int64_t v30 = a3;
  if (!v5) {
    goto LABEL_20;
  }
LABEL_3:
  if (v5 < 1)
  {
LABEL_37:
    __break(1u);
    return result;
  }

  uint64_t v7 = 0LL;
  unint64_t v32 = a1 & 0xC000000000000001LL;
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    if (v32) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
    }
    else {
      id v9 = *(id *)(a1 + 8 * v7 + 32);
    }
    uint64_t v10 = v9;
    id v11 = objc_msgSend(v9, "machineID", v30);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v15 = v14;

      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
        uint64_t v8 = sub_1001498EC(0LL, v8[2] + 1LL, 1, v8);
      }
      unint64_t v17 = v8[2];
      unint64_t v16 = v8[3];
      if (v17 >= v16 >> 1) {
        uint64_t v8 = sub_1001498EC((void *)(v16 > 1), v17 + 1, 1, v8);
      }
      _OWORD v8[2] = v17 + 1;
      uint64_t v18 = &v8[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
    }

    else
    {
    }

    ++v7;
  }

  while (v5 != v7);
LABEL_21:
  swift_bridgeObjectRelease(a1);
  uint64_t v20 = v8[2];
  if (v20)
  {
    BOOL v21 = v8 + 5;
    do
    {
      uint64_t v23 = *(v21 - 1);
      uint64_t v22 = *v21;
      swift_bridgeObjectRetain(*v21);
      sub_1001516D4(v31, v23, v22);
      swift_bridgeObjectRelease(v31[1]);
      v21 += 2;
      --v20;
    }

    while (v20);
  }

  id result = (id)swift_bridgeObjectRelease(v8);
  if (v5)
  {
    swift_bridgeObjectRetain_n(a1, 2LL);
    id v24 = v30;
    uint64_t v25 = 4LL;
    uint64_t v26 = 0LL;
    if ((a1 & 0xC000000000000001LL) == 0) {
      goto LABEL_27;
    }
LABEL_26:
    for (id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, a1);
          ;
          id result = *(id *)(a1 + 8 * v25))
    {
      uint64_t v27 = result;
      BOOL v28 = __OFADD__(v26, 1LL);
      uint64_t v29 = v26 + 1;
      if (v28) {
        break;
      }

      if (v29 == v5)
      {

        return (id)swift_bridgeObjectRelease_n(a1, 2LL);
      }

      uint64_t v26 = ++v25 - 4;
      if ((a1 & 0xC000000000000001LL) != 0) {
        goto LABEL_26;
      }
LABEL_27:
      ;
    }

    __break(1u);
    goto LABEL_37;
  }

  return result;
}

void *sub_1000E59B4(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = a1;
  id v2 = [v1 peerID];
  if (!v2)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_100006BAC(v23, (uint64_t)qword_1002567D0);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "DBAdapter PeerMO has no ID?", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    goto LABEL_17;
  }

  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v6 = v5;

  id v117 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  id v7 = [v1 permanentInfo];
  if (!v7)
  {
LABEL_13:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v28, (uint64_t)qword_1002567D0);
    uint64_t v29 = swift_bridgeObjectRetain(v6);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v25, v30)) {
      goto LABEL_49;
    }
    char v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v32 = (void *)swift_slowAlloc(32LL, -1LL);
    id v119 = v32;
    *(_DWORD *)char v31 = 136446210;
    swift_bridgeObjectRetain(v6);
    uint64_t v118 = sub_10017C4C4(v4, v6, (uint64_t *)&v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v30,  "DBAdapter peer %{public}s has no/incomplete permanent info/sig",  v31,  0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);

LABEL_17:
    return 0LL;
  }

  uint64_t v8 = v7;
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v11 = v10;

  id v12 = [v1 permanentInfoSig];
  if (!v12)
  {
    sub_10000852C(v9, v11);
    goto LABEL_13;
  }

  uint64_t v13 = v12;
  uint64_t v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v15 = v14;

  uint64_t v114 = sub_1000E3618();
  unint64_t v17 = v16;
  id v18 = [v1 hmacSig];
  unint64_t v112 = v17;
  unint64_t v113 = v15;
  unint64_t v111 = v11;
  uint64_t v115 = v4;
  uint64_t v108 = v1;
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
    unint64_t v109 = v21;

    if (v17 >> 60 == 15)
    {
      sub_10000852C(v20, v109);
      uint64_t v22 = 1LL;
    }

    else
    {
      sub_1000084E8(v114, v17);
      v105.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      v103.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v33 = [v1 stableInfo];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
        unint64_t v37 = v36;

        os_log_t log = (os_log_t)Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v35, v37);
      }

      else
      {
        os_log_t log = 0LL;
      }

      id v38 = [v1 stableInfoSig];
      if (v38)
      {
        id v39 = v38;
        uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
        unint64_t v42 = v41;

        v100.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v40, v42);
      }

      else
      {
        v100.super.Class isa = 0LL;
      }

      id v43 = [v1 dynamicInfo];
      if (v43)
      {
        NSString v44 = v43;
        uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
        unint64_t v47 = v46;

        v99.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v45, v47);
      }

      else
      {
        v99.super.Class isa = 0LL;
      }

      id v48 = [v1 dynamicInfoSig];
      if (v48)
      {
        id v49 = v48;
        uint64_t v50 = v20;
        uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
        unint64_t v53 = v52;

        v107.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v51, v53);
      }

      else
      {
        uint64_t v50 = v20;
        v107.super.Class isa = 0LL;
      }

      uint64_t v54 = (void *)objc_opt_self(&OBJC_CLASS___TPPeer);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v98 = Data._bridgeToObjectiveC()().super.isa;
      unsigned int v96 = [v54 verifyHMACWithPermanentInfoData:v105.super.isa permanentInfoSig:v103.super.isa stableInfoData:log stableInfoSig:v100.super.isa dynamicInfoDat a:v99.super.isa dynamicInfoSig:v107.super.isa hmacKey:isa hmacSig:v98];
      sub_10000852C(v50, v109);
      sub_10003C1D0(v114, v112);

      uint64_t v22 = v96 ^ 1;
      unint64_t v15 = v113;
      unint64_t v11 = v111;
    }
  }

  else
  {
    uint64_t v22 = 1LL;
  }

  swift_bridgeObjectRetain(v6);
  unint64_t v55 = v6;
  id v56 = v117;
  sub_1000084E8(v9, v11);
  sub_1000084E8(v116, v15);
  NSString v57 = String._bridgeToObjectiveC()();
  unint64_t v110 = v55;
  swift_bridgeObjectRelease(v55);
  Class v58 = Data._bridgeToObjectiveC()().super.isa;
  Class v59 = Data._bridgeToObjectiveC()().super.isa;
  id v60 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v57 data:v58 sig:v59 keyFactory:v56 checkSig:v22];
  id v117 = v56;

  sub_10000852C(v116, v15);
  sub_10000852C(v9, v11);

  if (!v60)
  {
    id v1 = v108;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v70, (uint64_t)qword_1002567D0);
    unint64_t v6 = v110;
    uint64_t v71 = swift_bridgeObjectRetain(v110);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v74 = (void *)swift_slowAlloc(32LL, -1LL);
      id v119 = v74;
      *(_DWORD *)uint64_t v73 = 136446210;
      swift_bridgeObjectRetain(v110);
      uint64_t v118 = sub_10017C4C4(v115, v110, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease_n(v110, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v72,  "DBAdapter unable to construct permanent info for peerID %{public}s",  v73,  0xCu);
      swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);

      sub_10003C1D0(v114, v112);
      os_log_type_t v75 = v117;
LABEL_45:

      sub_10000852C(v116, v113);
      sub_10000852C(v9, v111);
      return 0LL;
    }

    sub_10000852C(v9, v11);
    sub_10003C1D0(v114, v112);
    sub_10000852C(v116, v113);
LABEL_49:

    swift_bridgeObjectRelease_n(v6, 2LL);
    return 0LL;
  }

  id v61 = sub_1001618F4(v108);
  id v62 = sub_100161E0C(v108);
  id v63 = objc_allocWithZone(&OBJC_CLASS___TPPeer);
  id v119 = 0LL;
  id v64 = v60;
  id v65 = v61;
  id v66 = [v63 initWithPermanentInfo:v64 stableInfo:v65 dynamicInfo:v62 checkSig:v22 error:&v119];
  id v67 = v119;
  if (!v66)
  {
    id v106 = v62;
    id v76 = v119;
    uint64_t v77 = _convertNSErrorToError(_:)(v67);

    swift_willThrow(v78);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v79 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v79, (uint64_t)qword_1002567D0);
    swift_errorRetain(v77);
    swift_bridgeObjectRetain(v110);
    uint64_t v80 = swift_errorRetain(v77);
    uint64_t v81 = (void *)Logger.logObject.getter(v80);
    os_log_type_t v82 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v81, v82))
    {
      sub_10000852C(v9, v111);
      sub_10003C1D0(v114, v112);
      sub_10000852C(v116, v113);

      swift_errorRelease();
      swift_bridgeObjectRelease_n(v110, 2LL);
      swift_errorRelease();
      swift_errorRelease();

      return 0LL;
    }

    loga = (os_log_s *)v81;
    uint64_t v83 = swift_slowAlloc(22LL, -1LL);
    uint64_t v84 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v104 = (void *)swift_slowAlloc(32LL, -1LL);
    id v119 = v104;
    *(_DWORD *)uint64_t v83 = 136446466;
    swift_bridgeObjectRetain(v110);
    uint64_t v118 = sub_10017C4C4(v115, v110, (uint64_t *)&v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v83 + 4, v83 + 12);
    swift_bridgeObjectRelease_n(v110, 3LL);
    *(_WORD *)(v83 + 12) = 2114;
    swift_errorRetain(v77);
    uint64_t v85 = _swift_stdlib_bridgeErrorToNSError(v77);
    uint64_t v118 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v83 + 14, v83 + 22);
    *uint64_t v84 = v85;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  loga,  v82,  "DBAdapter unable to init for peerID %{public}s): %{public}@",  (uint8_t *)v83,  0x16u);
    uint64_t v86 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v84, 1LL, v86);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1LL, -1LL);
    swift_slowDealloc(v83, -1LL, -1LL);

    sub_10003C1D0(v114, v112);
    swift_errorRelease();

    os_log_type_t v75 = v106;
    goto LABEL_45;
  }

  uint64_t v68 = v66;
  id v69 = v119;
  swift_bridgeObjectRelease(v110);

  if ((v22 & 1) != 0)
  {
    if (v112 >> 60 != 15)
    {
      sub_10004C798(v114, v112);
      id v89 = v68;
      Class v90 = Data._bridgeToObjectiveC()().super.isa;
      id v91 = [v89 calculateHmacWithHmacKey:v90];

      uint64_t v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
      unint64_t v94 = v93;

      Class v95 = Data._bridgeToObjectiveC()().super.isa;
      [v108 setHmacSig:v95];
      sub_10000852C(v9, v111);
      sub_10003C1D0(v114, v112);
      sub_10000852C(v116, v113);

      sub_10000852C(v92, v94);
      sub_10003C1D0(v114, v112);
      return v68;
    }

    [v108 setHmacSig:0];
    sub_10000852C(v9, v111);
    sub_10000852C(v116, v113);
  }

  else
  {
    id v87 = v68;
    sub_10000852C(v9, v111);
    sub_10003C1D0(v114, v112);
    sub_10000852C(v116, v113);
  }

  return v68;
}

uint64_t sub_1000E6738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithEntityName:v7];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v9 = sub_100007578(&qword_100251578);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001DE710;
  unint64_t v11 = *(void **)(v3 + 24);
  *(void *)(v10 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v10 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v10 + 32) = v11;
  id v12 = v11;
  uint64_t v13 = (void *)NSPredicate.init(format:_:)(0xD00000000000001BLL, 0x80000001001F9E90LL, v10);
  [v8 setPredicate:v13];

  [v8 setFetchBatchSize:50];
  unint64_t v14 = *(void **)(v3 + 16);
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v15 = swift_allocObject(&unk_100239540, 24LL, 7LL);
  *(void *)(v15 + 16) = v14;
  v18[2] = sub_100173230;
  void v18[3] = v15;
  id v16 = v14;
  sub_1000DE3C4( v8,  sub_100173218,  (uint64_t)v19,  (void (*)(uint64_t))sub_100173238,  (uint64_t)v18,  (uint64_t (*)(void))type metadata accessor for VoucherMO);

  return swift_release(v15);
}

void sub_1000E690C(void *a1, _BYTE *a2, void (*a3)(id, char *))
{
  char v21 = 0;
  id v5 = a1;
  id v6 = [v5 voucherInfo];
  if (!v6) {
    goto LABEL_6;
  }
  NSString v7 = v6;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v10 = v9;

  id v11 = [v5 voucherInfoSig];
  if (!v11)
  {
    sub_10000852C(v8, v10);
LABEL_6:

    return;
  }

  id v12 = v11;
  uint64_t v19 = a3;
  uint64_t v20 = a2;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v15 = v14;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v17 = Data._bridgeToObjectiveC()().super.isa;
  id v18 = [(id)objc_opt_self(TPVoucher) voucherInfoWithData:isa sig:v17];
  sub_10000852C(v13, v15);
  sub_10000852C(v8, v10);

  if (v18)
  {
    v19(v18, &v21);

    *uint64_t v20 = v21;
  }

uint64_t sub_1000E6AA4(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_1000084C4(a1, v3);
  uint64_t v5 = swift_allocObject(&unk_100239568, 24LL, 7LL);
  *(void *)(v5 + 16) = a2;
  _OWORD v8[2] = sub_100173250;
  void v8[3] = v5;
  id v6 = a2;
  Sequence.forEach(_:)(sub_100173258, v8, v3, v4);
  return swift_release(v5);
}

uint64_t sub_1000E6B3C(uint64_t a1, void (*a2)(void *))
{
  v5[3] = sub_100007578(&qword_100256F00);
  v5[4] = sub_1001738E0(&qword_100256F08, &qword_100256F00, (uint64_t)&protocol conformance descriptor for [A]);
  v5[0] = a1;
  swift_bridgeObjectRetain(a1);
  a2(v5);
  return sub_100007600(v5);
}

uint64_t sub_1000E6BE8( uint64_t a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  id v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v12 + 16) = v11;
  swift_retain(a1);
  a7(a6, v12);
  swift_release(v12);
  swift_release(a1);
  return 1LL;
}

uint64_t sub_1000E6CBC(void *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithEntityName:v5];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v7 = sub_100007578(&qword_100251578);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1001DE710;
  unint64_t v9 = *(void **)(v2 + 24);
  *(void *)(v8 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v8 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v8 + 32) = v9;
  id v10 = v9;
  id v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001BLL, 0x80000001001F9E90LL, v8);
  [v6 setPredicate:v11];

  uint64_t v12 = type metadata accessor for VoucherMO();
  uint64_t v14 = NSManagedObjectContext.count<A>(for:)(v6, v12);

  if (v14 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);

    if (a1)
    {
      id v13 = 0LL;
      *a1 = 0LL;
    }

    else
    {
    }

    swift_errorRelease();
    return 0LL;
  }

  return v14;
}

uint64_t sub_1000E7094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = a4(a3);
  swift_release(a1);
  return v7;
}

uint64_t sub_1000E70E0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithEntityName:v7];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v9 = sub_100007578(&qword_100251578);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001DE420;
  id v11 = *(void **)(v3 + 24);
  *(void *)(v10 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v10 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 96) = &type metadata for Int64;
  *(void *)(v10 + 104) = &protocol witness table for Int64;
  if (a1 < 0)
  {
    __break(1u);
    swift_once(&qword_100250EB8, sub_1000DD078);
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v19, (uint64_t)qword_1002567D0);
    id v20 = v11;
    char v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      id v46 = v8;
      uint64_t v47 = a1;
      uint64_t v48 = v45;
      *(_DWORD *)uint64_t v23 = 134349314;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2082;
      id v24 = v20;
      uint64_t v25 = a2;
      id v26 = [v24 description];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      unint64_t v29 = v28;

      a2 = v25;
      uint64_t v47 = sub_10017C4C4(v27, v29, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 14, v23 + 22);

      swift_bridgeObjectRelease(v29);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Failed to fetch policy for version %{public}llu: %{public}s",  (uint8_t *)v23,  0x16u);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      id v8 = v46;
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      if (a2)
      {
LABEL_5:
        id v30 = v20;
        *a2 = v20;
LABEL_16:

        swift_errorRelease();
        return 0LL;
      }
    }

    else
    {

      if (a2) {
        goto LABEL_5;
      }
    }

    goto LABEL_16;
  }

  *(void *)(v10 + 72) = a1;
  id v12 = v11;
  id v13 = (void *)NSPredicate.init(format:_:)(0xD000000000000021LL, 0x80000001001F9E60LL, v10);
  [v8 setPredicate:v13];

  uint64_t v14 = sub_100007578(&qword_100256C28);
  uint64_t v15 = swift_allocObject(v14, 96LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1001DE420;
  *(void *)(v15 + 32) = 0x61447963696C6F70LL;
  *(void *)(v15 + 40) = 0xEA00000000006174LL;
  *(void *)(v15 + 88) = &type metadata for String;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = 0x61487963696C6F70LL;
  *(void *)(v15 + 72) = 0xEA00000000006873LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  [v8 setPropertiesToFetch:isa];

  [v8 setFetchLimit:1];
  uint64_t v17 = type metadata accessor for PolicyMO();
  uint64_t result = NSManagedObjectContext.fetch<A>(_:)(v8, v17);
  uint64_t v31 = result;
  if (!((unint64_t)result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_8;
    }
LABEL_26:

    swift_bridgeObjectRelease(v31);
    return 0LL;
  }

  if (result < 0) {
    uint64_t v43 = result;
  }
  else {
    uint64_t v43 = result & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(result);
  uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(v43);
  uint64_t result = swift_bridgeObjectRelease(v31);
  if (!v44) {
    goto LABEL_26;
  }
LABEL_8:
  if ((v31 & 0xC000000000000001LL) != 0)
  {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v31);
    goto LABEL_11;
  }

  if (*(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v32 = *(id *)(v31 + 32);
LABEL_11:
    id v33 = v32;
    swift_bridgeObjectRelease(v31);
    id v34 = [v33 policyHash];
    if (v34)
    {
      uint64_t v35 = v34;
      id v36 = [v33 policyData];
      id v37 = v36;
      if (v36)
      {
        uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
        unint64_t v40 = v39;

        unint64_t v41 = (void *)objc_opt_self(&OBJC_CLASS___TPPolicyDocument);
        Class v42 = Data._bridgeToObjectiveC()().super.isa;
        id v37 = [v41 policyDocWithHash:v35 data:v42];

        sub_10000852C(v38, v40);
      }

      else
      {
      }

      return (uint64_t)v37;
    }

    return 0LL;
  }

  __break(1u);
  return result;
}

void sub_1000E76F8()
{
  uint64_t v2 = v0;
  id v3 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v6 = sub_100007578(&qword_100251578);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE710;
  id v8 = *(void **)(v2 + 24);
  *(void *)(v7 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v7 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v7 + 32) = v8;
  id v9 = v8;
  uint64_t v10 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v7);
  [v5 setPredicate:v10];

  uint64_t v11 = sub_100007578(&qword_100256C28);
  uint64_t v12 = swift_allocObject(v11, 96LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1001DE420;
  *(void *)(v12 + 32) = 0x6E6F6973726576LL;
  *(void *)(v12 + 40) = 0xE700000000000000LL;
  *(void *)(v12 + 88) = &type metadata for String;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = 0x61487963696C6F70LL;
  *(void *)(v12 + 72) = 0xEA00000000006873LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  [v5 setPropertiesToFetch:isa];

  uint64_t v14 = type metadata accessor for PolicyMO();
  uint64_t v15 = NSManagedObjectContext.fetch<A>(_:)(v5, v14);
  uint64_t v16 = v1;
  if (!v1)
  {
    uint64_t v27 = v15;
    uint64_t v50 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0) {
        uint64_t v48 = v15;
      }
      else {
        uint64_t v48 = v15 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v15);
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v48);
      if (v28) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v28 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v15);
      if (v28)
      {
LABEL_7:
        id v49 = v5;
        uint64_t v29 = 4LL;
        while (1)
        {
          id v5 = (id)(v29 - 4);
          if ((v27 & 0xC000000000000001LL) != 0) {
            id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, v27);
          }
          else {
            id v30 = *(id *)(v27 + 8 * v29);
          }
          uint64_t v31 = v30;
          uint64_t v32 = v29 - 3;
          if (__OFADD__(v5, 1LL))
          {
            __break(1u);
            goto LABEL_24;
          }

          id v33 = [v30 policyHash];
          if (v33)
          {
            id v34 = v33;
            uint64_t v16 = v28;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
            uint64_t v36 = v35;

            unint64_t v37 = (unint64_t)[v31 version];
            if ((v37 & 0x8000000000000000LL) != 0)
            {
              _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
              __break(1u);
              return;
            }

            unint64_t v38 = v37;
            id v39 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
            NSString v40 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v36);
            id v41 = [v39 initWithVersion:v38 hash:v40];

            uint64_t v28 = v16;
            if (v41)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
              unint64_t v44 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v43 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v44 >= v43 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1LL);
              }
              uint64_t v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
              specialized Array._endMutation()(v45);
            }
          }

          else
          {
          }

          ++v29;
          if (v32 == v28)
          {
            swift_bridgeObjectRelease(v27);
            uint64_t v47 = (void *)v50;
            id v5 = v49;
            goto LABEL_30;
          }
        }
      }
    }

    swift_bridgeObjectRelease(v27);
    uint64_t v47 = _swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRelease(v27);
    sub_100161474((uint64_t)v47);

    swift_bridgeObjectRelease(v47);
    return;
  }

  if (qword_100250EB8 != -1) {
LABEL_24:
  }
    swift_once(&qword_100250EB8, sub_1000DD078);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v17, (uint64_t)qword_1002567D0);
  swift_errorRetain(v16);
  uint64_t v18 = swift_errorRetain(v16);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    char v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v22 = v5;
    uint64_t v23 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v21 = 138543362;
    swift_errorRetain(v16);
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(v16);
    uint64_t v50 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v21 + 4, v21 + 12);
    *uint64_t v23 = v24;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch policies: %{public}@", v21, 0xCu);
    uint64_t v25 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v23, 1LL, v25);
    id v26 = v23;
    id v5 = v22;
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow(v46);
}

uint64_t sub_1000E7DA8()
{
  sub_10003C1D0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

void *sub_1000E7DDC(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v120 = a5;
  BOOL v121 = a8;
  uint64_t v115 = a4;
  NSData v105 = a3;
  uint64_t v114 = a2;
  uint64_t v104 = a1;
  uint64_t v11 = sub_100007578(&qword_100251D58);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (void *)type metadata accessor for URL(0LL);
  id v16 = (id)*(v15 - 1);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  os_log_type_t v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  BOOL v122 = (char *)&v100 - v22;
  uint64_t v23 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_semaphore;
  uint64_t v24 = v8;
  dispatch_semaphore_t v25 = dispatch_semaphore_create(1LL);
  unint64_t v110 = v8;
  uint64_t v109 = v23;
  *(void *)&v8[v23] = v25;
  id v26 = &v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore];
  *(void *)id v26 = 0LL;
  *((void *)v26 + 1) = 0LL;
  uint64_t v108 = v26;
  uint64_t v27 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride;
  *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride] = 0LL;
  v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_testIgnoreCustodianUpdates] = 0;
  v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_testDontSetAccountSetting] = 0;
  *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_tlkSharesBatch] = 1000LL;
  v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_egoMachineIDVanished] = 0;
  v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_midVanishedFromTDL] = 0;
  v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_testHashMismatchDetected] = 0;
  uint64_t v28 = swift_allocObject(&unk_100237998, 24LL, 7LL);
  uint64_t v123 = v28;
  *(void *)(v28 + 16) = 0LL;
  uint64_t v118 = (void *)(v28 + 16);
  id v134 = 0LL;
  id v135 = 0LL;
  uint64_t v133 = 0LL;
  *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_darwinNotifier] = a6;
  uint64_t v107 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_managedConfigurationAdapter;
  *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_managedConfigurationAdapter] = a7;
  id v119 = v24;
  uint64_t ObjectType = swift_getObjectType(v24);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
  uint64_t v31 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v113 = a7;
  swift_unknownObjectRetain(a7, v32);
  id v33 = [v31 bundleForClass:ObjCClassFromMetadata];
  uint64_t v116 = (uint64_t (*)())&unk_1001E6400;
  NSString v34 = String._bridgeToObjectiveC()();
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v33 URLForResource:v34 withExtension:v35];

  if (!v36) {
    goto LABEL_24;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v36);

  unint64_t v37 = (void (*)(char *, char *, void *))*((void *)v16 + 4);
  v37(v14, v20, v15);
  (*((void (**)(char *, void, uint64_t, void *))v16 + 7))(v14, 0LL, 1LL, v15);
  uint64_t result = (void *)(*((uint64_t (**)(char *, uint64_t, void *))v16 + 6))(v14, 1LL, v15);
  if ((_DWORD)result == 1)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v106 = v27;
  unint64_t v111 = (void (**)(char *, void *))v16;
  id v39 = v122;
  unint64_t v112 = v15;
  uint64_t v40 = ((uint64_t (*)(char *, char *, void *))v37)(v122, v14, v15);
  if (qword_100250EC8 != -1) {
    uint64_t v40 = swift_once(&qword_100250EC8, sub_1000E28F4);
  }
  __chkstk_darwin(v40, v41);
  *(&v100 - 2) = v39;
  uint64_t v42 = sub_100007620(0LL, (unint64_t *)&unk_100256B50, &OBJC_CLASS___NSManagedObjectModel_ptr);
  uint64_t v43 = v117;
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_10014E0AC, &v100 - 4, v42);
  uint64_t v117 = v43;
  unint64_t v44 = aBlock;
  id v45 = objc_allocWithZone(&OBJC_CLASS___NSPersistentContainer);
  uint64_t v46 = v44;
  NSString v47 = String._bridgeToObjectiveC()();
  id v48 = [v45 initWithName:v47 managedObjectModel:v46];

  uint64_t v14 = (char *)OBJC_IVAR____TtC18TrustedPeersHelper9Container_persistentContainer;
  id v16 = v119;
  *(void *)&v119[OBJC_IVAR____TtC18TrustedPeersHelper9Container_persistentContainer] = v48;
  uint64_t v49 = sub_100007578(&qword_1002515D8);
  uint64_t v50 = swift_allocObject(v49, 40LL, 7LL);
  *(_OWORD *)(v50 + 16) = xmmword_1001E67F0;
  id v51 = v120;
  *(void *)(v50 + 32) = v120;
  aBlock = (void **)v50;
  specialized Array._endMutation()(v50);
  unint64_t v52 = aBlock;
  sub_100007620(0LL, (unint64_t *)&unk_100256B60, &OBJC_CLASS___NSPersistentStoreDescription_ptr);
  id v53 = v48;
  id v120 = v51;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v52);
  [v53 setPersistentStoreDescriptions:isa];

  unint64_t v55 = *(void **)&v14[(void)v16];
  uint64_t v15 = [v55 newBackgroundContext];
  uint64_t v56 = v123;
  unint64_t v131 = sub_10014E0C4;
  uint64_t v132 = v123;
  aBlock = _NSConcreteStackBlock;
  uint64_t v128 = 1107296256LL;
  id v129 = sub_1000E8AE0;
  id v130 = &unk_1002379B0;
  NSString v57 = _Block_copy(&aBlock);
  uint64_t v58 = v132;
  id v59 = v55;
  swift_retain(v56);
  swift_release(v58);
  [v59 loadPersistentStoresWithCompletionHandler:v57];
  _Block_release(v57);

  uint64_t v60 = (uint64_t)v118;
  swift_beginAccess(v118, v126, 0LL, 0LL);
  uint64_t v61 = *(void *)(v56 + 16);
  if (!v61)
  {
    NSData v103 = v14;
    uint64_t v116 = 0LL;
    uint64_t v118 = 0LL;
    goto LABEL_11;
  }

  swift_errorRetain(*(void *)(v56 + 16));
  id v62 = (void *)_convertErrorToNSError(_:)(v61);
  if (!sub_1000DDDE8())
  {
    swift_bridgeObjectRelease(v115);
    uint64_t v81 = swift_bridgeObjectRelease(v114);
    swift_willThrow(v81);

    swift_unknownObjectRelease(v113);
    sub_100007600(v121);
    v111[1](v122, v112);
    swift_release(v133);

    uint64_t v71 = 0LL;
    uint64_t v72 = 0LL;
    goto LABEL_14;
  }

  uint64_t v116 = (uint64_t (*)())v62;
  uint64_t v124 = 0LL;
  id v63 = (void *)swift_allocObject(&unk_1002379E8, 48LL, 7LL);
  id v64 = v120;
  v63[2] = v120;
  v63[3] = v15;
  v63[4] = v60;
  v63[5] = &v124;
  uint64_t v65 = swift_allocObject(&unk_100237A10, 32LL, 7LL);
  *(void *)(v65 + 16) = sub_10014E154;
  *(void *)(v65 + 24) = v63;
  uint64_t v118 = v63;
  unint64_t v131 = sub_10014E170;
  uint64_t v132 = v65;
  aBlock = _NSConcreteStackBlock;
  uint64_t v128 = 1107296256LL;
  id v129 = sub_1000DC9F8;
  id v130 = &unk_100237A28;
  id v66 = _Block_copy(&aBlock);
  uint64_t v67 = v132;
  id v68 = v64;
  id v69 = v15;
  swift_retain(v65);
  swift_release(v67);
  [v69 performBlockAndWait:v66];
  _Block_release(v66);
  LOBYTE(v66) = swift_isEscapingClosureAtFileLocation(v65, "", 108LL, 1460LL, 36LL, 1LL);
  swift_release(v65);
  if ((v66 & 1) != 0)
  {
    __break(1u);
LABEL_24:
    uint64_t result = (void *)(*((uint64_t (**)(char *, uint64_t, uint64_t, void *))v16 + 7))(v14, 1LL, 1LL, v15);
    goto LABEL_25;
  }

  if (v124)
  {
    swift_errorRetain(v124);
    swift_bridgeObjectRelease(v115);
    uint64_t v70 = swift_bridgeObjectRelease(v114);
    swift_willThrow(v70);
    swift_errorRelease();

    swift_unknownObjectRelease(v113);
    sub_100007600(v121);
    v111[1](v122, v112);
    swift_errorRelease();
    swift_release(v133);

    uint64_t v71 = sub_10014E154;
    uint64_t v72 = (uint64_t)v118;
LABEL_14:
    os_log_type_t v82 = v135;
    swift_release(v123);

    swift_bridgeObjectRelease(*((void *)v108 + 1));
    uint64_t v83 = *(void *)((char *)v16 + v107);

    swift_unknownObjectRelease(v83);
    uint64_t v84 = type metadata accessor for Container();
    swift_deallocPartialClassInstance(v16, v84, 195LL, 7LL);
    sub_10014E118((uint64_t)v71, v72);
    return v16;
  }

  id v100 = v68;
  id v101 = v69;
  uint64_t v94 = swift_allocObject(&unk_100237998, 24LL, 7LL);
  *(void *)(v94 + 16) = 0LL;
  NSData v103 = v14;
  Class v95 = *(void **)&v14[(void)v16];
  unint64_t v131 = sub_10014E0C4;
  uint64_t v132 = v94;
  aBlock = _NSConcreteStackBlock;
  uint64_t v128 = 1107296256LL;
  id v129 = sub_1000E8AE0;
  id v130 = &unk_100237A50;
  unsigned int v96 = _Block_copy(&aBlock);
  uint64_t v97 = v132;
  id v98 = v95;
  uint64_t v102 = v94;
  swift_retain(v94);
  swift_release(v97);
  [v98 loadPersistentStoresWithCompletionHandler:v96];
  _Block_release(v96);

  swift_beginAccess(v94 + 16, &aBlock, 0LL, 0LL);
  if (*(void *)(v94 + 16))
  {
    swift_errorRetain(*(void *)(v94 + 16));
    swift_bridgeObjectRelease(v115);
    uint64_t v99 = swift_bridgeObjectRelease(v114);
    swift_willThrow(v99);
    swift_errorRelease();

    swift_unknownObjectRelease(v113);
    sub_100007600(v121);
    v111[1](v122, v112);
    swift_release(v102);
    swift_errorRelease();
    swift_release(v133);

    uint64_t v71 = sub_10014E154;
    uint64_t v14 = v103;
    uint64_t v72 = (uint64_t)v118;
    goto LABEL_14;
  }

  swift_errorRelease();
  swift_release(v102);

  swift_errorRelease();
  uint64_t v116 = sub_10014E154;
LABEL_11:
  uint64_t v73 = v114;
  id v74 = [(id)objc_opt_self(NSMergePolicy) mergeByPropertyStoreTrumpMergePolicy];
  [v15 setMergePolicy:v74];

  __chkstk_darwin(v75, v76);
  uint64_t v77 = v104;
  *(&v100 - 8) = v104;
  *(&v100 - 7) = v73;
  uint64_t v78 = v105;
  uint64_t v79 = v115;
  *(&v100 - 6) = v105;
  *(&v100 - 5) = v79;
  *(&v100 - 4) = v15;
  *(&v100 - 3) = &v135;
  *(&v100 - 2) = &v134;
  *(&v100 - 1) = &v133;
  uint64_t v80 = v117;
  uint64_t result = NSManagedObjectContext.performAndWait<A>(_:)(&v136, sub_10014E0F4, &v100 - 10, &type metadata for () + 1);
  if (v80)
  {

    swift_unknownObjectRelease(v113);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v73);
    sub_100007600(v121);
    v111[1](v122, v112);
    swift_release(v133);

    uint64_t v14 = v103;
    uint64_t v72 = (uint64_t)v118;
    uint64_t v71 = v116;
    goto LABEL_14;
  }

  uint64_t v85 = (char *)v16 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name;
  *uint64_t v85 = v77;
  v85[1] = v73;
  v85[2] = v78;
  v85[3] = v79;
  *(void *)((char *)v16 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc) = v15;
  uint64_t v86 = v135;
  if (!v135) {
    goto LABEL_26;
  }
  *(void *)((char *)v16 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO) = v135;
  uint64_t result = (void *)sub_1000610A0( (uint64_t)v121,  (uint64_t)v16 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish);
  id v87 = v134;
  if (!v134)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  *(void *)((char *)v16 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model) = v134;
  uint64_t v88 = v133;
  if (v133)
  {
    *(void *)((char *)v16 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter) = v133;
    *(void *)((char *)v16 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_escrowCacheTimeout) = 0x408C200000000000LL;
    id v89 = v15;
    id v90 = v86;
    id v91 = v87;
    swift_retain(v88);

    uint64_t v92 = (objc_class *)type metadata accessor for Container();
    v125.receiver = v16;
    v125.super_class = v92;
    id v16 = objc_msgSendSuper2(&v125, "init");

    swift_unknownObjectRelease(v113);
    sub_100007600(v121);
    v111[1](v122, v112);
    swift_release(v133);

    unint64_t v93 = v135;
    swift_release(v123);

    sub_10014E118((uint64_t)v116, (uint64_t)v118);
    return v16;
  }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

void sub_1000E8AE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(id, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(v8, a3);
  swift_release(v5);
}

uint64_t sub_1000E8B54(void *a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = sub_100007578(&qword_100251D58);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = &v41[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = &v41[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v15, v18);
  os_log_type_t v20 = &v41[-v19];
  id v21 = [a1 URL];
  if (!v21)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
    return sub_100041590((uint64_t)v11, &qword_100251D58);
  }

  uint64_t v22 = v21;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

  uint64_t v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32);
  v23(v11, v17, v12);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
  v23(v20, v11, v12);
  id v24 = [a2 persistentStoreCoordinator];
  if (v24)
  {
    id v26 = v24;
    URL._bridgeToObjectiveC()(v25);
    uint64_t v28 = v27;
    NSString v29 = [a1 type];
    if (!v29)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v31 = v30;
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v31);
    }

    unint64_t v32 = sub_10000BE44((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v32);
    v42[0] = 0LL;
    LODWORD(v32) = [v26 destroyPersistentStoreAtURL:v28 withType:v29 options:isa error:v42];

    id v34 = v42[0];
    if (!(_DWORD)v32)
    {
      id v38 = v42[0];
      uint64_t v39 = _convertNSErrorToError(_:)(v34);

      swift_willThrow(v40);
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v20, v12);
      *a4 = v39;
      return swift_errorRelease();
    }

    NSString v35 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    id v36 = v42[0];
  }

  else
  {
    NSString v35 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  }

  v35(v20, v12);
  swift_beginAccess(a3, v42, 1LL, 0LL);
  *a3 = 0LL;
  return swift_errorRelease();
}

uint64_t sub_1000E8E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = a2;
  swift_errorRetain(a2);
  return swift_errorRelease(v5);
}

void sub_1000E8EBC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, id *a6, void **a7, uint64_t *a8)
{
  id v14 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v15 = String._bridgeToObjectiveC()();
  id v86 = [v14 initWithEntityName:v15];

  uint64_t v16 = sub_100007578(&qword_100251578);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1001DE710;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(OTDefaultContext);
  BOOL v20 = v19 == a3 && v18 == a4;
  uint64_t v84 = a3;
  if (v20)
  {
    uint64_t v22 = a6;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    id v21 = v18;
    uint64_t v22 = a6;
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, v19, v18, 0LL);
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) == 0)
    {
      id v87 = a1;
      uint64_t v88 = a2;
      swift_bridgeObjectRetain(a2);
      v24._uint64_t countAndFlagsBits = 45LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      swift_bridgeObjectRetain(a2);
      v25._uint64_t countAndFlagsBits = v84;
      v25._object = a4;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(a2);
      uint64_t v27 = a1;
      uint64_t v26 = a2;
      goto LABEL_9;
    }
  }

  swift_bridgeObjectRetain(a2);
  uint64_t v27 = a1;
  uint64_t v26 = a2;
LABEL_9:
  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000FC24();
  *(void *)(v17 + 32) = v27;
  *(void *)(v17 + 40) = v26;
  uint64_t v28 = (void *)NSPredicate.init(format:_:)(0x203D3D20656D616ELL, 0xEA00000000004025LL, v17);
  [v86 setPredicate:v28];

  [v86 setFetchLimit:1];
  uint64_t v29 = type metadata accessor for ContainerMO();
  uint64_t v30 = NSManagedObjectContext.fetch<A>(_:)(v86, v29);
  if (v8)
  {

    return;
  }

  uint64_t v31 = v30;
  if ((unint64_t)v30 >> 62)
  {
    if (v30 < 0) {
      uint64_t v79 = v30;
    }
    else {
      uint64_t v79 = v30 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v30);
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v31);
  }

  else
  {
    uint64_t v32 = *(void *)((v30 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  id v33 = v22;
  id v34 = a5;
  if (!v32)
  {
    swift_bridgeObjectRelease(v31);
    id v41 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v29)) initWithContext:a5];
    id v42 = *v33;
    *id v33 = v41;

    id v43 = *v33;
    if (!*v33)
    {
      __break(1u);
      goto LABEL_64;
    }

    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(OTDefaultContext);
    uint64_t v46 = v44;
    if (v45 == v84 && v44 == a4)
    {
      id v47 = v43;
      swift_bridgeObjectRelease(a4);
    }

    else
    {
      char v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, a4, v45, v44, 0LL);
      id v48 = v43;
      swift_bridgeObjectRelease(v46);
      if ((v81 & 1) == 0)
      {
        id v87 = a1;
        uint64_t v88 = a2;
        swift_bridgeObjectRetain(a2);
        v51._uint64_t countAndFlagsBits = 45LL;
        v51._object = (void *)0xE100000000000000LL;
        String.append(_:)(v51);
        swift_bridgeObjectRetain(a2);
        v52._uint64_t countAndFlagsBits = v84;
        v52._object = a4;
        String.append(_:)(v52);
        swift_bridgeObjectRelease(a2);
        goto LABEL_29;
      }
    }

    swift_bridgeObjectRetain(a2);
LABEL_29:
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    [v43 setName:v53];

    id v87 = 0LL;
    unsigned int v54 = [a5 save:&v87];
    uint64_t v31 = (uint64_t)v87;
    if (!v54)
    {
LABEL_32:
      id v56 = (id)v31;
      _convertNSErrorToError(_:)(v31);

      swift_willThrow(v57);
LABEL_33:

      return;
    }

    id v55 = v87;
    id v38 = *v33;
    if (*v33) {
      goto LABEL_18;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if ((v31 & 0xC000000000000001LL) != 0)
  {
    id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v31);
  }

  else
  {
    if (!*(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
LABEL_55:
      if (v31 < 0) {
        uint64_t v80 = v31;
      }
      else {
        uint64_t v80 = v31 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v31);
      uint64_t v68 = _CocoaArrayWrapper.endIndex.getter(v80);
      swift_bridgeObjectRelease(v31);
      if (!v68) {
        goto LABEL_44;
      }
      goto LABEL_40;
    }

    id v35 = *(id *)(v31 + 32);
  }

  id v36 = v35;
  swift_bridgeObjectRelease(v31);
  id v37 = *v33;
  *id v33 = v36;

  id v38 = *v33;
  if (!*v33) {
    goto LABEL_31;
  }
LABEL_18:
  id v39 = v38;
  sub_1001ADF98(v39, a5);

  if (!*v33)
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  id v40 = *v33;
  sub_1001AE1D8(v40, a5);

  id v49 = *v33;
  if (!*v33) {
    goto LABEL_65;
  }
  type metadata accessor for Container();
  id v50 = v49;
  sub_1001BB428(v50, a5);

  if (!*v33) {
    goto LABEL_66;
  }
  id v58 = *v33;
  sub_100162BE4(v58, (uint64_t)a5);

  if (!*v33)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

  id v59 = *v33;
  uint64_t v60 = sub_100163650(a5, v59, 0LL, 0xF000000000000000LL);
  uint64_t v62 = v61;

  id v63 = *a7;
  *a7 = v60;

  uint64_t v64 = *a8;
  *a8 = v62;
  swift_release(v64);
  if (!*v33)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }

  uint64_t v65 = *a7;
  if (!*a7)
  {
LABEL_69:
    __break(1u);
    return;
  }

  id v66 = *v33;
  id v67 = v65;
  sub_100165834(v66, v67);

  sub_1000DE140();
  [a5 reset];
  id v34 = v86;
  uint64_t v31 = NSManagedObjectContext.fetch<A>(_:)(v86, v29);
  uint64_t v68 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v68) {
    goto LABEL_44;
  }
LABEL_40:
  if ((v31 & 0xC000000000000001LL) != 0)
  {
    id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v31);
  }

  else
  {
    if (!*(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_62;
    }

    id v69 = *(id *)(v31 + 32);
  }

  uint64_t v68 = (uint64_t)v69;
LABEL_44:
  swift_bridgeObjectRelease(v31);
  id v70 = *v33;
  *id v33 = (id)v68;

  if (*v33) {
    goto LABEL_33;
  }
  id v34 = v86;
  if (qword_100250EB8 != -1) {
LABEL_62:
  }
    swift_once(&qword_100250EB8, sub_1000DD078);
  uint64_t v71 = type metadata accessor for Logger(0LL);
  uint64_t v72 = sub_100006BAC(v71, (uint64_t)qword_1002567D0);
  uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
  os_log_type_t v77 = static os_log_type_t.error.getter(v73, v74, v75, v76);
  if (os_log_type_enabled(v73, v77))
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v78 = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, v77, "containerMO could not be fetched again?", v78, 2u);
    swift_slowDealloc(v78, -1LL, -1LL);
  }
}

void sub_1000E964C(void *a1, uint64_t a2)
{
  uint64_t v75 = &_swiftEmptySetSingleton;
  uint64_t v74 = (uint64_t)&_swiftEmptySetSingleton;
  id v5 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithEntityName:v6];

  [v7 setFetchBatchSize:5];
  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v8 = sub_100007578(&qword_100251578);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001DE710;
  *(void *)(v9 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v9 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v9 + 32) = a1;
  id v10 = a1;
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v9);
  [v7 setPredicate:v11];

  uint64_t v12 = type metadata accessor for PolicyMO();
  uint64_t v13 = NSManagedObjectContext.count<A>(for:)(v7, v12);
  if (v2)
  {

    return;
  }

  Swift::Int v14 = v13;
  sub_100007578(&qword_100256BB0);
  Set.reserveCapacity(_:)(v14);
  __chkstk_darwin(v15, v16);
  v66[2] = a2;
  v66[3] = &v75;
  v66[4] = &v74;
  sub_1000DE3C4( v7,  (void (*)(void *, _BYTE *))sub_100165FD4,  (uint64_t)v66,  (void (*)(uint64_t))ResetReason.rawValue.getter,  0LL,  (uint64_t (*)(void))type metadata accessor for PolicyMO);
  uint64_t v17 = (void *)v74;
  if ((v74 & 0xC000000000000001LL) != 0)
  {
    if (v74 < 0) {
      uint64_t v18 = v74;
    }
    else {
      uint64_t v18 = v74 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v74);
    uint64_t v19 = __CocoaSet.count.getter(v18);
    swift_bridgeObjectRelease(v17);
    id v69 = v10;
    uint64_t v70 = a2;
    if (v19) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v72 = 0LL;
    goto LABEL_15;
  }

  uint64_t v35 = *(void *)(v74 + 16);
  id v69 = v10;
  uint64_t v70 = a2;
  if (!v35) {
    goto LABEL_14;
  }
LABEL_10:
  id v20 = v10;
  uint64_t v21 = swift_bridgeObjectRetain(v17);
  sub_1000DCD7C(v21, v20);
  swift_bridgeObjectRelease_n(v17, 2LL);
  uint64_t v74 = (uint64_t)&_swiftEmptySetSingleton;
  sub_1000DE140();
  uint64_t v72 = 0LL;
  uint64_t v17 = &_swiftEmptySetSingleton;
LABEL_15:
  id v36 = sub_10003BA80((uint64_t *)&v75);
  uint64_t v37 = v36[2];
  if (!v37)
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v36);

    goto LABEL_4;
  }

  id v67 = v7;
  uint64_t v68 = v17;
  id v33 = 0LL;
  uint64_t v38 = 0LL;
  do
  {
    uint64_t v39 = (uint64_t)(v33 + 1);
    if (__OFADD__(v33, 1LL))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }

    BOOL v40 = __OFADD__(v38, 5LL);
    v38 += 5LL;
    if (v40) {
      uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
    }
    ++v33;
  }

  while (v38 < v37);
  uint64_t v73 = _swiftEmptyArrayStorage;
  sub_10014E654(0, v39 & ~(v39 >> 63), 0);
  if (v39 < 0)
  {
    __break(1u);
    return;
  }

  id v41 = v73;
  if (!v39)
  {
LABEL_40:
    uint64_t v71 = v36 + 4;
    uint64_t v48 = v39;
    while (1)
    {
      id v33 = (char *)(v48 + 5);
      if (__OFADD__(v48, 5LL)) {
        goto LABEL_65;
      }
      else {
        uint64_t v49 = v37;
      }
      if (v49 < v48) {
        goto LABEL_66;
      }
      if (v39 < 0) {
        goto LABEL_67;
      }
      unint64_t v50 = v36[2];
      uint64_t v73 = v41;
      unint64_t v53 = v41[2];
      unint64_t v52 = v41[3];
      swift_bridgeObjectRetain(v36);
      if (v53 >= v52 >> 1)
      {
        sub_10014E654(v52 > 1, v53 + 1, 1);
        id v41 = v73;
      }

      v41[2] = v53 + 1;
      unsigned int v54 = &v41[4 * v53];
      id v55 = v71;
      v54[4] = v36;
      v54[5] = v55;
      v54[6] = v48;
      v54[7] = (2 * v49) | 1;
      v48 += 5LL;
    }
  }

  uint64_t v39 = 0LL;
  while (v39 < (unint64_t)v37)
  {
    if (v39 == 0x7FFFFFFFFFFFFFFDLL) {
      goto LABEL_70;
    }
    if (v37 >= v39 + 5) {
      uint64_t v42 = v39 + 5;
    }
    else {
      uint64_t v42 = v37;
    }
    if (v42 < v39) {
      goto LABEL_71;
    }
    unint64_t v43 = v36[2];
    uint64_t v73 = v41;
    unint64_t v46 = v41[2];
    unint64_t v45 = v41[3];
    swift_bridgeObjectRetain(v36);
    if (v46 >= v45 >> 1)
    {
      sub_10014E654(v45 > 1, v46 + 1, 1);
      id v41 = v73;
    }

    v41[2] = v46 + 1;
    id v47 = &v41[4 * v46];
    v47[4] = v36;
    v47[5] = v36 + 4;
    v47[6] = v39;
    v47[7] = (2 * v42) | 1;
    v39 += 5LL;
    if (!--v33)
    {
      if (v39 < v37) {
        goto LABEL_40;
      }
LABEL_54:
      swift_bridgeObjectRelease(v36);
      uint64_t v56 = v41[2];
      if (v56)
      {
        swift_retain(v41);
        id v58 = v41 + 7;
        while (1)
        {
          uint64_t v59 = *(v58 - 1);
          unint64_t v60 = *v58;
          uint64_t v62 = *(v58 - 3);
          uint64_t v61 = *(v58 - 2);
          swift_unknownObjectRetain(v62, v57);
          id v63 = objc_autoreleasePoolPush();
          uint64_t v64 = v72;
          sub_1000EA170(v62, v61, v59, v60, v70, v69);
          uint64_t v72 = v64;
          if (v64) {
            break;
          }
          objc_autoreleasePoolPop(v63);
          swift_unknownObjectRelease(v62);
          v58 += 4;
          if (!--v56)
          {

            swift_release_n(v41, 2LL);
            goto LABEL_62;
          }
        }

        objc_autoreleasePoolPop(v63);
        swift_bridgeObjectRelease(v68);

        swift_release_n(v41, 2LL);
        swift_unknownObjectRelease(v62);
        swift_bridgeObjectRelease(v75);
        return;
      }

      swift_release(v41);

LABEL_62:
      swift_bridgeObjectRelease(v68);
      goto LABEL_4;
    }
  }

LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  swift_once(&qword_100250EB8, sub_1000DD078);
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v22, (uint64_t)qword_1002567D0);
  swift_errorRetain(v36);
  uint64_t v23 = swift_errorRetain(v36);
  Swift::String v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v28 = static os_log_type_t.error.getter(v24, v25, v26, v27);
  if (os_log_type_enabled(v24, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v29 = 138543362;
    swift_errorRetain(v36);
    uint64_t v31 = v33;
    uint64_t v32 = _swift_stdlib_bridgeErrorToNSError(v36);
    uint64_t v73 = (void *)v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v29 + 4, v29 + 12);
    *uint64_t v30 = v32;
    id v33 = v31;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v28, "Unable to save built-in policies to DB: %{public}@", v29, 0xCu);
    uint64_t v34 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v30, 1LL, v34);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow(v65);
  swift_bridgeObjectRelease(v74);
LABEL_4:
  swift_bridgeObjectRelease(v75);
}

id sub_1000E9D94(void *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  void (*v22)(id *__return_ptr, uint64_t);
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  id v35;
  id result;
  char v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  void *v49;
  id v50;
  id v7 = [a1 policyHash];
  if (!v7)
  {
LABEL_17:
    uint64_t result = objc_msgSend(a1, "hasChanges", v44);
    return [a3 refreshObject:a1 mergeChanges:0];
  }

  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v11 = v10;
  id v12 = [a1 policyData];
  if (!v12)
  {
    swift_bridgeObjectRelease(v11);

    goto LABEL_17;
  }

  uint64_t v13 = v12;
  uint64_t v49 = a3;
  uint64_t v48 = a4;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v16 = v15;

  uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___TPPolicyDocument);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v19 = [v17 policyDocWithHash:v8 data:isa];

  if (!v19)
  {
    sub_10000852C(v14, v16);
    swift_bridgeObjectRelease(v11);
    a3 = v49;
    goto LABEL_17;
  }

  unint64_t v46 = v14;
  id v47 = v16;
  id v20 = a1;
  uint64_t v21 = (void *)sub_10003C1E4(v20);

  if (v21[2])
  {
    unint64_t v45 = v19;
    uint64_t v22 = (void (*)(id *__return_ptr, uint64_t))v21[4];
    uint64_t v23 = v21[5];
    swift_retain(v23);
    Swift::String v24 = swift_bridgeObjectRelease(v21);
    v22(&v50, v24);
    swift_release(v23);
    uint64_t v25 = v50;
    uint64_t v26 = [v50 version];

    uint64_t v27 = [v26 policyHash];
    os_log_type_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    unint64_t v44 = v20;
    if (v28 == v9 && v30 == v11)
    {
      swift_bridgeObjectRelease_n(v11, 2LL);
      uint64_t v31 = v46;
      uint64_t v32 = v47;
      id v33 = v45;
    }

    else
    {
      uint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v9, v11, 0LL);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v11);
      uint64_t v31 = v46;
      uint64_t v32 = v47;
      id v33 = v45;
      if ((v37 & 1) == 0) {
        goto LABEL_14;
      }
    }

    uint64_t v38 = *v48;
    swift_bridgeObjectRetain(*v48);
    uint64_t v39 = objc_msgSend(v33, "version", v20);
    BOOL v40 = [v39 versionNumber];

    LOBYTE(v39) = sub_10003B728((uint64_t)v40, v38);
    swift_bridgeObjectRelease(v38);
    if ((v39 & 1) == 0)
    {
      id v41 = [v33 version];
      uint64_t v42 = v33;
      unint64_t v43 = [v41 versionNumber];

      sub_100151B2C((uint64_t *)&v50, (uint64_t)v43);
      sub_10000852C(v31, v32);

      goto LABEL_16;
    }

objc_class *sub_1000EA170(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  void (*v19)(void **__return_ptr);
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  unint64_t v25;
  id v26;
  id v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_s *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  objc_class *v49;
  void *context;
  void *v52;
  uint64_t v53;
  unint64_t v7 = v6;
  int64_t v9 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    uint64_t v13 = type metadata accessor for PolicyMO();
    uint64_t result = (objc_class *)swift_getObjCClassFromMetadata(v13);
    uint64_t v49 = result;
    uint64_t v16 = v9 - a3;
    if (v9 <= a3)
    {
      __break(1u);
      return result;
    }

    id v47 = a1;
    swift_unknownObjectRetain(a1, v15);
    uint64_t v17 = (void *)(a2 + 16 * a3 + 8);
    uint64_t v18 = &selRef_aessivkey;
    uint64_t v48 = a5;
    while (1)
    {
      id v19 = (void (*)(void **__return_ptr))*(v17 - 1);
      id v20 = *v17;
      swift_retain_n(*v17, 2LL);
      uint64_t v21 = objc_autoreleasePoolPush();
      v19(&v52);
      uint64_t v22 = v52;
      uint64_t v23 = [objc_allocWithZone(v49) initWithContext:a5];
      Swift::String v24 = [v22 v18[299]];
      uint64_t v25 = (unint64_t)[v24 versionNumber];

      if ((v25 & 0x8000000000000000LL) != 0) {
        break;
      }
      [v23 setVersion:v25];
      uint64_t v26 = [v22 v18[299]];
      uint64_t v27 = [v26 policyHash];

      static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      context = v21;
      os_log_type_t v28 = v18;
      uint64_t v30 = v29;

      uint64_t v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      [v23 setPolicyHash:v31];

      uint64_t v32 = [v22 protobuf];
      id v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v35 = v34;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v37 = v33;
      uint64_t v18 = v28;
      sub_10000852C(v37, v35);
      [v23 setPolicyData:isa];

      [a6 addPoliciesObject:v23];
      objc_autoreleasePoolPop(context);
      swift_release_n(v20, 2LL);
      v17 += 2;
      --v16;
      a5 = v48;
      if (!v16)
      {
        swift_unknownObjectRelease(v47);
        unint64_t v7 = v6;
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_15:
    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_9;
  }

uint64_t sub_1000EA54C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  uint64_t v3 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  [v2 deleteObject:*(void *)(v0 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO)];
  uint64_t v4 = type metadata accessor for ContainerMO();
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)) initWithContext:v2];
  unint64_t v6 = *(void **)(v0 + v3);
  *(void *)(v0 + v3) = v5;

  unint64_t v7 = *(void **)(v0 + v3);
  uint64_t v8 = v0 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name;
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v10 = *(void **)(v8 + 24);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(OTDefaultContext);
  if (v11 == v12 && v10 == v13)
  {
    id v20 = v7;
    swift_bridgeObjectRelease(v10);
    goto LABEL_8;
  }

  uint64_t v15 = v13;
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, v12, v13, 0LL);
  id v17 = v7;
  swift_bridgeObjectRelease(v15);
  if ((v16 & 1) != 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v9);
    goto LABEL_9;
  }

  swift_bridgeObjectRetain(v9);
  v18._uint64_t countAndFlagsBits = 45LL;
  v18._object = (void *)0xE100000000000000LL;
  String.append(_:)(v18);
  swift_bridgeObjectRetain(v9);
  v19._uint64_t countAndFlagsBits = v11;
  v19._object = v10;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v9);
LABEL_9:
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  [v7 setName:v21];

  uint64_t v22 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter;
  uint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter);
  id v24 = *(id *)(v1 + v3);
  swift_retain(v23);
  uint64_t v25 = sub_1000E3618();
  unint64_t v27 = v26;
  swift_release(v23);
  os_log_type_t v28 = sub_100163650(v2, v24, v25, v27);
  uint64_t v30 = v29;
  sub_10003C1D0(v25, v27);

  uint64_t v31 = *(void **)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  *(void *)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model) = v28;

  uint64_t v32 = *(void *)(v1 + v22);
  *(void *)(v1 + v22) = v30;
  return swift_release(v32);
}

id sub_1000EA758@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_100007578((uint64_t *)&unk_1002570C0);
  uint64_t inited = swift_initStackObject(v3, v31);
  *(_OWORD *)(inited + 16) = xmmword_1001DE420;
  strcpy((char *)(inited + 32), "permanentInfo");
  *(_WORD *)(inited + 46) = -4864;
  id v5 = [a1 permanentInfo];
  id v6 = [v5 dictionaryRepresentation];

  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v8 = sub_100007578(&qword_1002570A8);
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 80) = 0x444972656570LL;
  *(void *)(inited + 88) = 0xE600000000000000LL;
  id v9 = [a1 peerID];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v10;
  *(void *)(inited + 104) = v12;
  unint64_t v13 = sub_10000BBEC(inited);
  unint64_t v32 = v13;
  id v14 = [a1 stableInfo];
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = [v14 dictionaryRepresentation];
    uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v16,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    uint64_t v30 = v8;
    *(void *)&__int128 v29 = v17;
    sub_100008570(&v29, v28);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    sub_10014BF08(v28, 0x6E49656C62617473LL, 0xEA00000000006F66LL, isUniquelyReferenced_nonNull_native);
    unint64_t v32 = v13;
    uint64_t v19 = swift_bridgeObjectRelease(0x8000000000000000LL);
    if ((SecIsInternalRelease(v19) & 1) == 0)
    {
      sub_10000CDF8(0x6E5F6C6169726573LL, 0xED00007265626D75LL, &v29);
      sub_100041590((uint64_t)&v29, &qword_100251EA0);
      sub_10000CDF8(0x6E5F656369766564LL, 0xEB00000000656D61LL, &v29);
      sub_100041590((uint64_t)&v29, &qword_100251EA0);
    }
  }

  id result = objc_msgSend(a1, "dynamicInfo", a2);
  if (result)
  {
    NSString v21 = result;
    id v22 = [result dictionaryRepresentation];
    uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v22,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    uint64_t v30 = v8;
    *(void *)&__int128 v29 = v23;
    sub_100008570(&v29, v28);
    unint64_t v24 = v32;
    char v25 = swift_isUniquelyReferenced_nonNull_native(v32);
    sub_10014BF08(v28, 0x4963696D616E7964LL, 0xEB000000006F666ELL, v25);

    id result = (id)swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    unint64_t v24 = v32;
  }

  *unint64_t v27 = v24;
  return result;
}

void sub_1000EAAB8(void (*a1)(id, uint64_t), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  v144[0] = 0LL;
  id v8 = [v7 viablePeerCountsByModelIDWithError:v144];
  id v9 = v144[0];
  if (!v8)
  {
    id v39 = v144[0];
    uint64_t v40 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v41);
    unint64_t v42 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
    sub_1000EB914(v40, 0xD000000000000019LL, 0x80000001001FA640LL, v42, a1);
    unint64_t v43 = v42;
LABEL_11:
    swift_bridgeObjectRelease(v43);
    swift_errorRelease();
    return;
  }

  uint64_t v10 = v8;
  uint64_t v11 = sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for String,  v11,  &protocol witness table for String);
  id v13 = v9;

  id v14 = *(void **)(v3 + v6);
  v144[0] = 0LL;
  id v15 = [v14 peerCountsByMachineIDWithError:v144];
  id v16 = v144[0];
  if (!v15)
  {
    id v44 = v144[0];
    uint64_t v45 = _convertNSErrorToError(_:)(v16);

    swift_willThrow(v46);
    sub_1000EB914(v45, 0xD000000000000015LL, 0x80000001001FA660LL, v12, a1);
    unint64_t v43 = v12;
    goto LABEL_11;
  }

  uint64_t v17 = v15;
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v15,  &type metadata for String,  v11,  &protocol witness table for String);
  id v19 = v16;

  id v20 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (v20)
  {
    NSString v21 = v20;
    uint64_t v140 = a2;
    v138._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v138._object = v22;
    uint64_t v23 = *(void **)(v3 + v6);
    v144[0] = 0LL;
    id v24 = [v23 peerWithID:v21 error:v144];
    char v25 = v24;
    uint64_t v142 = a1;
    uint64_t v135 = v12;
    uint64_t v139 = v18;
    if (v144[0])
    {
      id v26 = v144[0];

      swift_willThrow(v27);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v28 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v28, (uint64_t)qword_1002567D0);
      id v29 = v26;
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v34 = static os_log_type_t.error.getter(v30, v31, v32, v33);
      if (os_log_type_enabled(v30, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v136 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v35 = 138543362;
        id v36 = v29;
        uint64_t v37 = (void *)_swift_stdlib_bridgeErrorToNSError(v36);
        v144[0] = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v144, &v144[1], v35 + 4, v35 + 12);
        *uint64_t v136 = v37;
        a1 = v142;

        _os_log_impl((void *)&_mh_execute_header, v30, v34, "Error getting ego peer from model: %{public}@", v35, 0xCu);
        uint64_t v38 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v136, 1LL, v38);
        swift_slowDealloc(v136, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
      }

      id v137 = 0LL;
      char v25 = 0LL;
      uint64_t v12 = v135;
    }

    else if (v24)
    {
      id v137 = [v24 permanentInfo];
    }

    else
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v115 = type metadata accessor for Logger(0LL);
      uint64_t v116 = sub_100006BAC(v115, (uint64_t)qword_1002567D0);
      uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
      os_log_type_t v121 = static os_log_type_t.error.getter(v117, v118, v119, v120);
      if (os_log_type_enabled(v117, v121))
      {
        BOOL v122 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)BOOL v122 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v121, "Couldn't find ego peer in model", v122, 2u);
        swift_slowDealloc(v122, -1LL, -1LL);
      }

      id v137 = 0LL;
      char v25 = 0LL;
    }

    uint64_t v65 = swift_allocObject(&unk_10023AFD0, 24LL, 7LL);
    id v66 = *(void **)(v3 + v6);
    v144[0] = 0LL;
    id v67 = v66;
    id v68 = [v67 statusOfPeerWithID:v21 error:v144];

    id v69 = v144[0];
    if (v144[0])
    {
      uint64_t v133 = v25;
      id v70 = v144[0];
      uint64_t v132 = (uint64_t)v69;
      swift_willThrow(v70);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v71 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v71, (uint64_t)qword_1002567D0);
      id v134 = v70;
      uint64_t v72 = (os_log_s *)Logger.logObject.getter(v134);
      os_log_type_t v76 = static os_log_type_t.error.getter(v72, v73, v74, v75);
      if (os_log_type_enabled(v72, v76))
      {
        os_log_type_t v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v78 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)os_log_type_t v77 = 138543362;
        id v79 = v134;
        uint64_t v80 = (void *)_swift_stdlib_bridgeErrorToNSError(v79);
        v144[0] = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v144, &v144[1], v77 + 4, v77 + 12);
        *uint64_t v78 = v80;

        uint64_t v12 = v135;
        _os_log_impl((void *)&_mh_execute_header, v72, v76, "error calling statusOfPeer: %{public}@", v77, 0xCu);
        uint64_t v81 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v78, 1LL, v81);
        swift_slowDealloc(v78, -1LL, -1LL);
        swift_slowDealloc(v77, -1LL, -1LL);
      }

      else
      {

        uint64_t v72 = (os_log_s *)v134;
      }

      if (v137)
      {
        id v88 = [v137 machineID];
        static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        uint64_t v90 = v89;
      }

      else
      {
        uint64_t v90 = 0LL;
      }

      NSString v91 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v138._object);
      if (v90)
      {
        NSString v92 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v90);
      }

      else
      {
        NSString v92 = 0LL;
      }

      id v93 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v12);
      Class v95 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v139);
      LOBYTE(v131) = 0;
      id v96 = [v93 initWithEgoPeerID:v91 egoPeerMachineID:v92 status:32 viablePeerCountsByModelID:isa peerCountsByMachineID:v95 isExcluded:0 isLocked:v131];

      id v97 = v134;
      v142(v96, v132);

      swift_release(v65);
    }

    else
    {
      *(void *)(v65 + 16) = v68;
      uint64_t v82 = swift_allocObject(&unk_10023AFF8, 17LL, 7LL);
      *(_BYTE *)(v82 + 16) = v68 == (id)4;
      uint64_t v83 = swift_allocObject(&unk_10023B020, 88LL, 7LL);
      *(void *)(v83 + 16) = v82;
      *(void *)(v83 + 24) = v65;
      *(Swift::String *)(v83 + 32) = v138;
      *(void *)(v83 + 48) = v137;
      *(void *)(v83 + 56) = v12;
      *(void *)(v83 + 64) = v139;
      *(void *)(v83 + 72) = a1;
      *(void *)(v83 + 80) = v140;
      strcpy((char *)v144, "signing-key ");
      BYTE5(v144[1]) = 0;
      HIWORD(v144[1]) = -5120;
      String.append(_:)(v138);
      uint64_t v84 = v25;
      id v85 = v144[0];
      id v86 = v144[1];
      id v87 = v137;
      swift_retain(v140);
      swift_bridgeObjectRetain_n(v138._object, 3LL);
      swift_retain(v83);
      sub_10015FAA0( (uint64_t)v85,  (uint64_t)v86,  (void (*)(char *, uint64_t))sub_1001765BC,  v83,  v138._countAndFlagsBits,  v138._object);
      swift_retain(v82);

      swift_release(v82);
      swift_release_n(v83, 2LL);
      swift_bridgeObjectRelease(v86);
      swift_bridgeObjectRelease_n(v138._object, 3LL);
    }
  }

  else
  {
    id v47 = *(void **)(v3 + v6);
    v144[0] = 0LL;
    unsigned int v48 = [v47 hasAnyPeersWithError:v144];
    id v49 = v144[0];
    if (v144[0])
    {
      id v50 = v144[0];
      swift_bridgeObjectRelease(v12);
      uint64_t v51 = swift_bridgeObjectRelease(v18);
      swift_willThrow(v51);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v143 = a1;
      uint64_t v52 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v52, (uint64_t)qword_1002567D0);
      id v53 = v50;
      unsigned int v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v58 = static os_log_type_t.error.getter(v54, v55, v56, v57);
      if (os_log_type_enabled(v54, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v60 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v59 = 138543362;
        id v141 = v49;
        id v61 = v53;
        id v62 = v53;
        id v63 = (void *)_swift_stdlib_bridgeErrorToNSError(v62);
        v144[0] = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v144, &v144[1], v59 + 4, v59 + 12);
        *unint64_t v60 = v63;

        id v53 = v61;
        id v49 = v141;
        _os_log_impl((void *)&_mh_execute_header, v54, v58, "error calling hasAnyPeers: %{public}@", v59, 0xCu);
        uint64_t v64 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v60, 1LL, v64);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v59, -1LL, -1LL);
      }

      else
      {

        unsigned int v54 = (os_log_s *)v53;
      }

      unint64_t v108 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v109 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
      id v110 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
      Class v111 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v108);
      Class v112 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v109);
      LOBYTE(v131) = 0;
      id v113 = [v110 initWithEgoPeerID:0 egoPeerMachineID:0 status:32 viablePeerCountsByModelID:v111 peerCountsByMachineID:v112 isExcluded:0 isLocked:v131];

      id v114 = v53;
      v143(v113, (uint64_t)v49);
    }

    else
    {
      if (v48)
      {
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v98 = v18;
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_100006BAC(v99, (uint64_t)qword_1002567D0);
        id v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.info.getter(v101);
        if (os_log_type_enabled(v101, v102))
        {
          NSData v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)NSData v103 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v101,  v102,  "Existing peers in account, but we don't have a peer ID. We are excluded.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        id v104 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
        v105.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v12);
        v106.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v98);
        LOBYTE(v131) = 0;
        id v107 = [v104 initWithEgoPeerID:0 egoPeerMachineID:0 status:4 viablePeerCountsByModelID:v105.super.isa peerCountsByMachineID:v106.super.isa isExcluded:1 isLocked:v131];
      }

      else
      {
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v123 = v18;
        uint64_t v124 = type metadata accessor for Logger(0LL);
        uint64_t v125 = sub_100006BAC(v124, (uint64_t)qword_1002567D0);
        os_log_type_t v126 = (os_log_s *)Logger.logObject.getter(v125);
        os_log_type_t v127 = static os_log_type_t.info.getter(v126);
        if (os_log_type_enabled(v126, v127))
        {
          uint64_t v128 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v128 = 0;
          _os_log_impl((void *)&_mh_execute_header, v126, v127, "No existing peers in account", v128, 2u);
          swift_slowDealloc(v128, -1LL, -1LL);
        }

        id v129 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
        v105.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v12);
        v106.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v123);
        LOBYTE(v131) = 0;
        id v107 = [v129 initWithEgoPeerID:0 egoPeerMachineID:0 status:32 viablePeerCountsByModelID:v105.super.isa peerCountsByMachineID:v106.super.isa isExcluded:0 isLocked:v131];
      }

      id v130 = v107;

      a1(v130, 0LL);
    }
  }

void sub_1000EB914( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a3);
  uint64_t v10 = swift_errorRetain(a1);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v15 = static os_log_type_t.error.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v11, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v18;
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v28 = sub_10017C4C4(a2, a3, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v16 + 12) = 2114;
    swift_errorRetain(a1);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v28 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 14, v16 + 22);
    *uint64_t v17 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v15, "error calling %s: %{public}@", (uint8_t *)v16, 0x16u);
    uint64_t v20 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v17, 1LL, v20);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_bridgeObjectRetain(a4);
  unint64_t v21 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
  id v22 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
  sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  Class v24 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  LOBYTE(v26) = 0;
  id v25 = [v22 initWithEgoPeerID:0 egoPeerMachineID:0 status:32 viablePeerCountsByModelID:isa peerCountsByMachineID:v24 isExcluded:0 isLocked:v26];

  a5(v25, a1);
}

void sub_1000EBC48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, id a7, uint64_t a8, uint64_t a9, void (*a10)(id, uint64_t), uint64_t a11)
{
  uint64_t v11 = a8;
  id v12 = a7;
  uint64_t v14 = a9;
  os_log_type_t v15 = (unsigned __int8 *)(a3 + 16);
  id v93 = (uint64_t *)(a4 + 16);
  if (a2)
  {
    uint64_t v90 = (unsigned __int8 *)(a3 + 16);
    uint64_t v95 = a2;
    uint64_t v16 = (void *)_convertErrorToNSError(_:)(a2);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v17, (uint64_t)qword_1002567D0);
    id v18 = v16;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v23 = static os_log_type_t.error.getter(v19, v20, v21, v22);
    uint64_t v92 = a6;
    if (os_log_type_enabled(v19, v23))
    {
      Class v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      v103[0] = v25;
      *(_DWORD *)Class v24 = 136446210;
      id v26 = v18;
      id v27 = [v26 description];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v30 = v29;

      uint64_t v11 = a8;
      uint64_t v101 = sub_10017C4C4(v28, v30, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v24 + 4, v24 + 12);

      swift_bridgeObjectRelease(v30);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v23,  "trust status: Unable to load ego keys: %{public}s",  v24,  0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v31 = v25;
      uint64_t v14 = a9;
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
    }

    if ([v18 code] == (id)-25300)
    {
      id v34 = [v18 domain];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      uint64_t v40 = v38;
      if (v35 == v39 && v37 == v38)
      {
        uint64_t v41 = swift_bridgeObjectRelease_n(v37, 2LL);
        goto LABEL_15;
      }

      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v39, v38, 0LL);
      swift_bridgeObjectRelease(v37);
      uint64_t v41 = swift_bridgeObjectRelease(v40);
      if ((v42 & 1) != 0)
      {
LABEL_15:
        unint64_t v43 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v44 = static os_log_type_t.info.getter(v43);
        id v46 = a7;
        uint64_t v45 = v92;
        if (os_log_type_enabled(v43, v44))
        {
          id v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v47 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "trust status: Lost the ego key pair, returning 'excluded' in hopes of fixing up the identity",  v47,  2u);
          swift_slowDealloc(v47, -1LL, -1LL);
          unsigned int v48 = (os_log_s *)v18;
        }

        else
        {
          unsigned int v48 = v43;
          unint64_t v43 = (os_log_s *)v18;
        }

        uint64_t v64 = v90;
        swift_beginAccess(v90, v100, 1LL, 0LL);
        *uint64_t v90 = 1;
        swift_beginAccess(v93, v99, 1LL, 0LL);
        uint64_t *v93 = 4LL;
        swift_errorRetain(v95);
        char v89 = 0;
        if (!a7) {
          goto LABEL_36;
        }
LABEL_35:
        id v66 = [v46 machineID];
        static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        id v46 = v67;

LABEL_36:
        swift_beginAccess(v93, v103, 0LL, 0LL);
        uint64_t v68 = *v93;
        swift_beginAccess(v64, &v101, 0LL, 0LL);
        uint64_t v69 = *v64;
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v11);
        NSString v70 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v45);
        if (v46)
        {
          NSString v71 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v46);
        }

        else
        {
          NSString v71 = 0LL;
        }

        id v72 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
        sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(a8);
        Class v74 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(a9);
        LOBYTE(v88) = v89;
        id v75 = [v72 initWithEgoPeerID:v70 egoPeerMachineID:v71 status:v68 viablePeerCountsByModelID:isa peerCountsByMachineID:v74 isExcluded:v69 isLocked:v88];

        a10(v75, v95);
        swift_errorRelease();
LABEL_44:

        return;
      }
    }

    id v46 = a7;
    if ([v18 code] == (id)-25308)
    {
      id v49 = [v18 domain];
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      uint64_t v52 = v51;

      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      uint64_t v55 = v53;
      uint64_t v45 = v92;
      if (v50 == v54 && v52 == v53)
      {
        swift_bridgeObjectRelease_n(v52, 2LL);

LABEL_32:
        uint64_t v95 = 0LL;
        char v89 = 1;
        goto LABEL_34;
      }

      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, v54, v53, 0LL);
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(v55);

      if ((v65 & 1) != 0) {
        goto LABEL_32;
      }
    }

    else
    {

      uint64_t v45 = v92;
    }

    swift_errorRetain(v95);
    char v89 = 0;
LABEL_34:
    uint64_t v64 = v90;
    if (!a7) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

  if (a1)
  {
    if (a7)
    {
      id v32 = [a7 machineID];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      id v12 = v33;
    }

    swift_beginAccess(v93, v103, 0LL, 0LL);
    uint64_t v96 = *v93;
    swift_beginAccess(v15, &v101, 0LL, 0LL);
    unsigned int v94 = *v15;
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(v11);
    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    if (v12)
    {
      NSString v77 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      NSString v77 = 0LL;
    }

    id v78 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
    sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
    Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a8);
    Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a9);
    LOBYTE(v88) = 0;
    id v75 = [v78 initWithEgoPeerID:v76 egoPeerMachineID:v77 status:v96 viablePeerCountsByModelID:v79 peerCountsByMachineID:v80 isExcluded:v94 isLocked:v88];

    a10(v75, 0LL);
    goto LABEL_44;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v56 = type metadata accessor for Logger(0LL);
  uint64_t v57 = sub_100006BAC(v56, (uint64_t)qword_1002567D0);
  os_log_type_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.info.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    unint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "trust status: No error but Ego Peer Keys are nil", v60, 2u);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  if (v12)
  {
    id v61 = [v12 machineID];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    uint64_t v63 = v62;
  }

  else
  {
    uint64_t v63 = 0LL;
  }

  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(v11);
  NSString v81 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  if (v63)
  {
    NSString v82 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v63);
  }

  else
  {
    NSString v82 = 0LL;
  }

  id v83 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
  sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
  v84.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v85 = v11;
  Class v86 = v84.super.isa;
  swift_bridgeObjectRelease(v85);
  Class v87 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a9);
  LOBYTE(v88) = 0;
  id v98 = [v83 initWithEgoPeerID:v81 egoPeerMachineID:v82 status:4 viablePeerCountsByModelID:v86 peerCountsByMachineID:v87 isExcluded:1 isLocked:v88];

  a10(v98, 0LL);
}

uint64_t sub_1000EC658(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v4 = a4;
  if (a2) {
    os_log_type_t v7 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v7 = static os_log_type_t.debug.getter();
  }
  os_log_type_t v8 = v7;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  id v10 = a1;
  swift_errorRetain(a2);
  id v11 = v10;
  uint64_t v12 = swift_errorRetain(a2);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v8))
  {
    id v26 = v4;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    uint64_t v30 = v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    id v16 = (id)TPPeerStatusToString([v11 egoStatus]);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;

    uint64_t v28 = sub_10017C4C4(v17, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v14 + 12) = 2082;
    unint64_t v20 = 0xE700000000000000LL;
    if (a2)
    {
      uint64_t v28 = 0x203A726F727265LL;
      unint64_t v29 = 0xE700000000000000LL;
      uint64_t v27 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v21 = sub_100007578(&qword_100251D70);
      v22._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v27, v21);
      object = v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(object);
      swift_errorRelease();
      uint64_t v24 = v28;
      unint64_t v20 = v29;
    }

    else
    {
      uint64_t v24 = 0x73736563637573LL;
    }

    uint64_t v4 = v26;
    uint64_t v28 = sub_10017C4C4(v24, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v8,  "trustStatus complete: %{public}s %{public}s",  (uint8_t *)v14,  0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD000000000000013LL, 0x80000001001F9DF0LL);
  return v4(v11, a2);
}

void sub_1000EC95C(char *a1, void (*a2)(id, uint64_t), uint64_t a3)
{
  id v6 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] changeToken];
  if (v6)
  {

    sub_1000EAAB8(a2, a3);
  }

  else
  {
    os_log_type_t v7 = (void *)swift_allocObject(&unk_1002394A0, 40LL, 7LL);
    void v7[2] = a2;
    v7[3] = a3;
    v7[4] = a1;
    swift_retain(a3);
    os_log_type_t v8 = a1;
    sub_100138594(0, (uint64_t)sub_1001731D0, (uint64_t)v7);
    swift_release(v7);
  }

void sub_1000ECA14(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (!a1)
  {
    id v6 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v9 = (void *)swift_allocObject(&unk_1002394C8, 40LL, 7LL);
    v9[2] = a4;
    v9[3] = a2;
    v9[4] = a3;
    a2 = swift_allocObject(&unk_1002394F0, 32LL, 7LL);
    *(void *)(a2 + 16) = sub_1001731E0;
    *(void *)(a2 + 24) = v9;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v34 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100239508;
    uint64_t v21 = _Block_copy(aBlock);
    uint64_t v22 = v34;
    os_log_type_t v23 = a4;
    swift_retain(a3);
    swift_retain(a2);
    swift_release(v22);
    [v6 performBlockAndWait:v21];
    _Block_release(v21);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a2, "", 108LL, 2024LL, 45LL, 1LL);
    swift_release(v9);
    swift_release(a2);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_8;
  }

  id v6 = a1;
  swift_errorRetain(a1);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v7, (uint64_t)qword_1002567D0);
  swift_errorRetain(v6);
  uint64_t v8 = swift_errorRetain(v6);
  uint64_t v9 = (void *)Logger.logObject.getter(v8);
  os_log_type_t v13 = static os_log_type_t.error.getter(v9, v10, v11, v12);
  if (!os_log_type_enabled((os_log_t)v9, v13))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    goto LABEL_9;
  }

  uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v15 = swift_slowAlloc(32LL, -1LL);
  uint64_t v32 = (uint64_t)v6;
  aBlock[0] = v15;
  *(_DWORD *)uint64_t v14 = 136446210;
  swift_errorRetain(v6);
  uint64_t v16 = sub_100007578(&qword_100251D70);
  uint64_t v17 = String.init<A>(describing:)(&v32, v16);
  unint64_t v19 = v18;
  uint64_t v32 = sub_10017C4C4(v17, v18, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, aBlock, v14 + 4, v14 + 12);
  swift_bridgeObjectRelease(v19);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  v13,  "Unable to fetch changes, trust status is unknown: %{public}s",  v14,  0xCu);
  swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v15, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);

  swift_errorRelease();
LABEL_9:
  unint64_t v25 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v26 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
  id v27 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
  sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  LOBYTE(v31) = 0;
  id v30 = [v27 initWithEgoPeerID:0 egoPeerMachineID:0 status:32 viablePeerCountsByModelID:isa peerCountsByMachineID:v29 isExcluded:0 isLocked:v31];

  ((void (*)(id, void *))a2)(v30, v6);
}

uint64_t sub_1000ECDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(&unk_10023AF30, 32LL, 7LL);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = *(void **)&v2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v7 = (void *)swift_allocObject(&unk_10023AF58, 40LL, 7LL);
  void v7[2] = v2;
  v7[3] = sub_1001764F4;
  v7[4] = v5;
  uint64_t v8 = swift_allocObject(&unk_10023AF80, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_10017652C;
  *(void *)(v8 + 24) = v7;
  v14[4] = sub_100176BD4;
  uint64_t v15 = v8;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_1000DC9F8;
  v14[3] = &unk_10023AF98;
  uint64_t v9 = _Block_copy(v14);
  uint64_t v10 = v15;
  swift_retain(a2);
  uint64_t v11 = v2;
  swift_retain(v5);
  swift_retain(v8);
  swift_release(v10);
  [v6 performBlockAndWait:v9];
  swift_release(v5);
  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 108LL, 2041LL, 33LL, 1LL);
  swift_release(v7);
  uint64_t result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000ECF74(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void))
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  if (a3) {
    os_log_type_t v8 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v8 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v9 = v8;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v10, (uint64_t)qword_1002567D0);
  id v11 = a1;
  swift_errorRetain(a3);
  id v12 = v11;
  uint64_t v13 = swift_errorRetain(a3);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  if (os_log_type_enabled(v14, v9))
  {
    uint64_t v29 = v6;
    uint64_t v28 = v4;
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(64LL, -1LL);
    uint64_t v33 = v16;
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v31 = (uint64_t)a1;
    id v17 = v12;
    uint64_t v18 = sub_100007578(&qword_100257108);
    uint64_t v19 = String.init<A>(reflecting:)(&v31, v18);
    unint64_t v21 = v20;
    uint64_t v31 = sub_10017C4C4(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v15 + 12) = 2082;
    unint64_t v22 = 0xE700000000000000LL;
    if (a3)
    {
      uint64_t v31 = 0x203A726F727265LL;
      unint64_t v32 = 0xE700000000000000LL;
      uint64_t v30 = a3;
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      uint64_t v23 = sub_100007578(&qword_100251D70);
      v24._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v30, v23);
      object = v24._object;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(object);
      swift_errorRelease();
      uint64_t v26 = v31;
      unint64_t v22 = v32;
    }

    else
    {
      uint64_t v26 = 0x73736563637573LL;
    }

    uint64_t v4 = v28;
    uint64_t v31 = sub_10017C4C4(v26, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v9,  "fetch trust state complete: %{public}s %{public}s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    uint64_t v6 = v29;
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  return v4(a1, v6, a3);
}

void sub_1000ED24C(char *a1, void (*a2)(id, void *, void))
{
  uint64_t v4 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v5 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  unint64_t v9 = v8;
  id v10 = [*(id *)&a1[v4] egoPeerPermanentInfo];
  if (!v10)
  {
    swift_bridgeObjectRelease(v9);

LABEL_12:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v56 = type metadata accessor for Logger(0LL);
    uint64_t v57 = sub_100006BAC(v56, (uint64_t)qword_1002567D0);
    os_log_type_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.info.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      unint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "No peer ID => no trusted peers", v60, 2u);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    id v199 = [objc_allocWithZone((Class)TrustedPeersHelperPeerState) initWithPeerID:0 isPreapproved:0 status:32 memberChanges:0 unknownMachineIDs:0 osVersion:0 walrus:0 webAccess:0];
    a2(v199, _swiftEmptyArrayStorage, 0LL);

    return;
  }

  id v11 = v10;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  unint64_t v14 = v13;

  id v15 = [*(id *)&a1[v4] egoPeerPermanentInfoSig];
  if (!v15)
  {

    sub_10000852C(v12, v14);
    swift_bridgeObjectRelease(v9);
    goto LABEL_12;
  }

  uint64_t v16 = v15;
  id v198 = a2;
  uint64_t v189 = a1;
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v19 = v18;

  id v20 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  swift_bridgeObjectRetain(v9);
  sub_1000084E8(v12, v14);
  sub_1000084E8(v17, v19);
  uint64_t v183 = v7;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  unint64_t v22 = v14;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v24 = v9;
  Class v25 = Data._bridgeToObjectiveC()().super.isa;
  SEL v195 = v20;
  id v26 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v21 data:isa sig:v25 keyFactory:v20];
  uint64_t v193 = v17;
  unint64_t v194 = v19;
  sub_10000852C(v17, v19);
  uint64_t v196 = v12;
  unint64_t v197 = v22;
  sub_10000852C(v12, v22);

  if (v26)
  {
    unint64_t v185 = v24;
    uint64_t v27 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
    id v28 = *(id *)&v189[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    id v29 = [v26 signingPubKey];
    id v30 = [v29 spki];
    swift_unknownObjectRelease(v29);
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
    unint64_t v33 = v32;

    Class v34 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v31, v33);
    id v204 = 0LL;
    unsigned int v35 = [v28 hasPotentiallyTrustedPeerPreapprovingKey:v34 error:&v204];

    id v36 = v204;
    id v188 = v26;
    if (v204)
    {
      id v37 = v204;
      swift_bridgeObjectRelease(v185);

      swift_willThrow(v38);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v39, (uint64_t)qword_1002567D0);
      id v40 = v37;
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v45 = static os_log_type_t.error.getter(v41, v42, v43, v44);
      if (os_log_type_enabled(v41, v45))
      {
        id v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v47 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v46 = 138543362;
        id v48 = v40;
        id v49 = (void *)_swift_stdlib_bridgeErrorToNSError(v48);
        id v204 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v46 + 4, v46 + 12);
        void *v47 = v49;

        os_log_type_t v50 = v45;
        uint64_t v51 = (void (*)(void, void, id))v198;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  v50,  "fetchTrustState: error calling hasPotentiallyTrustedPeerPreapprovingKey %{public}@",  v46,  0xCu);
        uint64_t v52 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v47, 1LL, v52);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v46, -1LL, -1LL);
        uint64_t v54 = v196;
        unint64_t v53 = v197;
        unint64_t v55 = v194;
      }

      else
      {

        uint64_t v41 = (os_log_s *)v40;
        uint64_t v54 = v196;
        unint64_t v53 = v197;
        unint64_t v55 = v19;
        uint64_t v51 = (void (*)(void, void, id))v198;
      }

      id v98 = v40;
      v51(0LL, 0LL, v36);

      sub_10000852C(v193, v55);
      sub_10000852C(v54, v53);
      return;
    }

    unsigned int v182 = v35;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v72 = type metadata accessor for Logger(0LL);
    uint64_t v73 = sub_100006BAC(v72, (uint64_t)qword_1002567D0);
    Class v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.info.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v180 = v27;
      NSString v76 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      NSString v77 = (void *)swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)NSString v76 = 136446210;
      id v204 = v77;
      if (v182) {
        uint64_t v78 = 0x6F72707061657270LL;
      }
      else {
        uint64_t v78 = 0xD000000000000013LL;
      }
      if (v182) {
        unint64_t v79 = 0xEB00000000646576LL;
      }
      else {
        unint64_t v79 = 0x80000001001F9F40LL;
      }
      uint64_t v202 = sub_10017C4C4(v78, v79, (uint64_t *)&v204);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v76 + 4, v76 + 12);
      swift_bridgeObjectRelease(v79);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "fetchTrustState: ego peer is %{public}s", v76, 0xCu);
      swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1LL, -1LL);
      Class v80 = v76;
      uint64_t v27 = v180;
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    NSString v81 = *(void **)&v189[v27];
    id v204 = 0LL;
    id v82 = [v81 getStableInfoForPeerWithID:v6 error:&v204];
    id v83 = v204;
    if (v204)
    {
      id v84 = v204;

      swift_willThrow(v85);
      id v86 = v84;
      swift_bridgeObjectRetain(v185);
      id v87 = v86;
      uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
      os_log_type_t v92 = static os_log_type_t.error.getter(v88, v89, v90, v91);
      if (os_log_type_enabled(v88, v92))
      {
        uint64_t v93 = swift_slowAlloc(22LL, -1LL);
        uint64_t v190 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        unsigned int v94 = (void *)swift_slowAlloc(32LL, -1LL);
        id v204 = v94;
        *(_DWORD *)uint64_t v93 = 136315394;
        swift_bridgeObjectRetain(v185);
        uint64_t v202 = sub_10017C4C4(v183, v185, (uint64_t *)&v204);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v93 + 4, v93 + 12);
        swift_bridgeObjectRelease_n(v185, 3LL);
        *(_WORD *)(v93 + 12) = 2114;
        id v95 = v87;
        uint64_t v96 = _swift_stdlib_bridgeErrorToNSError(v95);
        uint64_t v202 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v93 + 14, v93 + 22);
        *uint64_t v190 = v96;

        _os_log_impl( (void *)&_mh_execute_header,  v88,  v92,  "fetchTrustState: error calling getStableInfoForPeer %s: %{public}@",  (uint8_t *)v93,  0x16u);
        uint64_t v97 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v190, 1LL, v97);
        swift_slowDealloc(v190, -1LL, -1LL);
        swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1LL, -1LL);
        swift_slowDealloc(v93, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v185, 2LL);
      }

      id v116 = v87;
      ((void (*)(void, void, id))v198)(0LL, 0LL, v83);
      sub_10000852C(v196, v197);
      sub_10000852C(v193, v194);

      return;
    }

    uint64_t v99 = *(void **)&v189[v27];
    id v204 = 0LL;
    id v100 = [v99 statusOfPeerWithID:v6 error:&v204];
    id v101 = v204;
    if (v204)
    {
      id v102 = v204;
      swift_bridgeObjectRelease(v185);

      swift_willThrow(v103);
      id v104 = v102;
      NSDictionary v105 = (os_log_s *)Logger.logObject.getter(v104);
      os_log_type_t v109 = static os_log_type_t.error.getter(v105, v106, v107, v108);
      if (os_log_type_enabled(v105, v109))
      {
        id v110 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v191 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v110 = 138543362;
        id v111 = v104;
        id v112 = v104;
        id v113 = v82;
        id v114 = (void *)_swift_stdlib_bridgeErrorToNSError(v111);
        id v204 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v110 + 4, v110 + 12);
        void *v191 = v114;
        id v82 = v113;
        id v104 = v112;

        _os_log_impl( (void *)&_mh_execute_header,  v105,  v109,  "fetchTrustState error calling statusOfPeer: %{public}@",  v110,  0xCu);
        uint64_t v115 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v191, 1LL, v115);
        swift_slowDealloc(v191, -1LL, -1LL);
        swift_slowDealloc(v110, -1LL, -1LL);
      }

      else
      {

        NSDictionary v105 = (os_log_s *)v104;
      }

      id v123 = v104;
      ((void (*)(void, void, id))v198)(0LL, 0LL, v101);
      sub_10000852C(v196, v197);
      sub_10000852C(v193, v194);

      return;
    }

    id v117 = v100;
    char v181 = sub_1001A2BAC();
    if (v82)
    {
      id v118 = v117;
      uint64_t v119 = v27;
      id v120 = [v82 osVersion];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
      uint64_t v122 = v121;

      uint64_t v27 = v119;
      id v117 = v118;
    }

    else
    {
      uint64_t v122 = 0LL;
    }

    id v124 = [v82 walrusSetting];
    id v125 = [v82 webAccess];
    NSString v126 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v185);
    if (v122)
    {
      NSString v127 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v122);
    }

    else
    {
      NSString v127 = 0LL;
    }

    id v128 = [objc_allocWithZone((Class)TrustedPeersHelperPeerState) initWithPeerID:v126 isPreapproved:v182 status:v117 memberChanges:0 unknownMachineIDs:v181 & 1 osVersion:v127 walrus:v124 webAccess:v125];

    BOOL v201 = _swiftEmptyArrayStorage;
    id v129 = *(void **)&v189[v27];
    id v204 = 0LL;
    id v130 = v129;
    id v131 = [v130 peerWithID:v6 error:&v204];

    if (v204)
    {
      id v133 = v204;

      swift_willThrow(v134);
      id v135 = v133;
      uint64_t v136 = (os_log_s *)Logger.logObject.getter(v135);
      os_log_type_t v140 = static os_log_type_t.error.getter(v136, v137, v138, v139);
      if (os_log_type_enabled(v136, v140))
      {
        id v141 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v142 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v141 = 138543362;
        id v135 = v135;
        uint64_t v143 = (void *)_swift_stdlib_bridgeErrorToNSError(v135);
        id v204 = v143;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v141 + 4, v141 + 12);
        *uint64_t v142 = v143;

        _os_log_impl( (void *)&_mh_execute_header,  v136,  v140,  "Error getting ego peer from model: %{public}@",  v141,  0xCu);
        uint64_t v144 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v142, 1LL, v144);
        swift_slowDealloc(v142, -1LL, -1LL);
        swift_slowDealloc(v141, -1LL, -1LL);
      }

      else
      {

        uint64_t v136 = (os_log_s *)v135;
      }
    }

    else if (v131)
    {
      id v184 = v128;
      id v145 = v131;
      id v146 = [v145 trustedPeerIDs];
      uint64_t v147 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v146,  &type metadata for String,  &protocol witness table for String);

      id v148 = v145;
      BOOL v149 = v189;
      sub_10015B480(v147, (uint64_t)v149, &v201, v148);
      swift_bridgeObjectRelease(v147);

      id v150 = [v148 stableInfo];
      if (v150)
      {
        uint64_t v151 = v150;
        id v152 = [v150 recoveryEncryptionPublicKey];
        id v128 = v184;
        if (v152)
        {
          uint64_t v153 = v152;
          id v186 = v82;
          uint64_t v154 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v152);
          unint64_t v156 = v155;

          id v157 = [v151 recoverySigningPublicKey];
          if (v157)
          {
            BOOL v158 = v157;
            static Data._unconditionallyBridgeFromObjectiveC(_:)(v157);

            __asm { BR              X10 }
          }

          sub_10000852C(v154, v156);
          id v82 = v186;
        }

        else
        {
        }
      }

      else
      {

        id v128 = v184;
      }

      goto LABEL_66;
    }

    BOOL v159 = (os_log_s *)Logger.logObject.getter(v132);
    os_log_type_t v160 = static os_log_type_t.info.getter(v159);
    if (os_log_type_enabled(v159, v160))
    {
      unint64_t v161 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v161 = 0;
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "No ego peer in model; no trusted peers", v161, 2u);
      swift_slowDealloc(v161, -1LL, -1LL);
    }

    id v148 = 0LL;
LABEL_66:
    uint64_t v192 = v148;
    id v162 = v128;
    int64_t v163 = (os_log_s *)Logger.logObject.getter(v162);
    os_log_type_t v164 = static os_log_type_t.info.getter(v163);
    if (os_log_type_enabled(v163, v164))
    {
      uint64_t v165 = swift_slowAlloc(22LL, -1LL);
      id v187 = v82;
      BOOL v166 = (void *)swift_slowAlloc(8LL, -1LL);
      BOOL v167 = (void *)swift_slowAlloc(32LL, -1LL);
      id v204 = v167;
      *(_DWORD *)uint64_t v165 = 138543618;
      uint64_t v202 = (uint64_t)v162;
      id v168 = v162;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v165 + 4, v165 + 12);
      *BOOL v166 = v162;

      *(_WORD *)(v165 + 12) = 2082;
      swift_beginAccess(&v201, &v202, 0LL, 0LL);
      Swift::Int v169 = v201;
      uint64_t v170 = sub_100007620(0LL, &qword_100257100, &off_10022D0E8);
      uint64_t v171 = swift_bridgeObjectRetain(v169);
      uint64_t v172 = Array.description.getter(v171, v170);
      unint64_t v174 = v173;
      swift_bridgeObjectRelease(v169);
      uint64_t v200 = sub_10017C4C4(v172, v174, (uint64_t *)&v204);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201, v165 + 14, v165 + 22);
      swift_bridgeObjectRelease(v174);
      _os_log_impl( (void *)&_mh_execute_header,  v163,  v164,  "Returning trust state: %{public}@ %{public}s",  (uint8_t *)v165,  0x16u);
      uint64_t v175 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v166, 1LL, v175);
      id v176 = v166;
      id v82 = v187;
      swift_slowDealloc(v176, -1LL, -1LL);
      swift_arrayDestroy(v167, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v167, -1LL, -1LL);
      swift_slowDealloc(v165, -1LL, -1LL);
    }

    else
    {
    }

    swift_beginAccess(&v201, &v204, 0LL, 0LL);
    int64_t v177 = v201;
    id v178 = v162;
    swift_bridgeObjectRetain(v177);
    ((void (*)(id, void *, void))v198)(v162, v177, 0LL);

    sub_10000852C(v196, v197);
    sub_10000852C(v193, v194);

    swift_bridgeObjectRelease(v177);
    id v179 = v201;

    swift_bridgeObjectRelease(v179);
    return;
  }

  swift_bridgeObjectRelease(v24);

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v61 = type metadata accessor for Logger(0LL);
  uint64_t v62 = sub_100006BAC(v61, (uint64_t)qword_1002567D0);
  uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v67 = static os_log_type_t.error.getter(v63, v64, v65, v66);
  if (os_log_type_enabled(v63, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v67, "fetchTrustState failed to create TPPeerPermanentInfo", v68, 2u);
    swift_slowDealloc(v68, -1LL, -1LL);
  }

  unint64_t v69 = sub_100043F74();
  uint64_t v70 = swift_allocError(&type metadata for ContainerError, v69, 0LL, 0LL);
  *(_OWORD *)uint64_t v71 = xmmword_1001DE880;
  *(_BYTE *)(v71 + 16) = 13;
  ((void (*)(void, void, uint64_t))v198)(0LL, 0LL, v70);
  swift_errorRelease();

  sub_10000852C(v17, v19);
  sub_10000852C(v12, v197);
}

void sub_1000EEA18(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v10 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  NSString v11 = String._bridgeToObjectiveC()();
  id v117 = 0LL;
  id v12 = [v10 peerWithID:v11 error:&v117];

  if (v117)
  {
    id v13 = v117;

    swift_willThrow(v14);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    id v114 = a5;
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v15, (uint64_t)qword_1002567D0);
    swift_bridgeObjectRetain_n(a3, 2LL);
    id v16 = v13;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v21 = static os_log_type_t.error.getter(v17, v18, v19, v20);
    if (os_log_type_enabled(v17, v21))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v109 = (void *)swift_slowAlloc(64LL, -1LL);
      id v117 = v109;
      *(_DWORD *)uint64_t v22 = 136315394;
      swift_bridgeObjectRetain(a3);
      uint64_t v116 = sub_10017C4C4(a2, a3, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v22 + 12) = 2082;
      uint64_t v116 = (uint64_t)v16;
      id v23 = v16;
      uint64_t v24 = sub_100007578(&qword_100251D70);
      uint64_t v25 = String.init<A>(describing:)(&v116, v24);
      unint64_t v26 = a3;
      unint64_t v28 = v27;
      uint64_t v116 = sub_10017C4C4(v25, v27, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v22 + 14, v22 + 22);

      unint64_t v29 = v28;
      a3 = v26;
      swift_bridgeObjectRelease(v29);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v21,  "Error getting trusted peer %s from model: %{public}s",  (uint8_t *)v22,  0x16u);
      swift_arrayDestroy(v109, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    goto LABEL_11;
  }

  if (!v12)
  {
    id v114 = a5;
LABEL_11:
    id v38 = *(id *)(a1 + v9);
    NSString v39 = String._bridgeToObjectiveC()();
    uint64_t v40 = a1;
    id v41 = [v38 custodianPeerWithID:v39];

    if (v41)
    {
      id v42 = *(id *)(v40 + v9);
      id v43 = [v114 permanentInfo];
      id v44 = [v114 stableInfo];
      id v117 = 0LL;
      id v45 = [v42 getViewsForCRK:v41 donorPermanentInfo:v43 donorStableInfo:v44 error:&v117];

      id v46 = v117;
      if (v45)
      {
        id v47 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v45,  &type metadata for String,  &protocol witness table for String);
        id v48 = v46;
      }

      else
      {
        id v55 = v117;
        _convertNSErrorToError(_:)(v46);

        swift_willThrow(v56);
        swift_errorRelease();
        id v47 = &_swiftEmptySetSingleton;
      }

      id v57 = [v41 peerID];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      uint64_t v59 = v58;

      id v60 = [v41 signingPublicKey];
      id v61 = [v60 spki];
      swift_unknownObjectRelease(v60);
      uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
      unint64_t v110 = v63;

      id v64 = [v41 encryptionPublicKey];
      id v65 = [v64 spki];
      swift_unknownObjectRelease(v64);
      uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
      id v112 = v41;
      unint64_t v68 = v67;

      id v69 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperPeer);
      swift_bridgeObjectRetain(v47);
      NSString v70 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v59);
      uint64_t v71 = v62;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v73 = Data._bridgeToObjectiveC()().super.isa;
      Class v74 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v47);
      id v75 = [v69 initWithPeerID:v70 signingSPKI:isa encryptionSPKI:v73 secureElementIdentity:0 viewList:v74];
      sub_10000852C(v66, v68);
      sub_10000852C(v71, v110);
      swift_bridgeObjectRelease(v47);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v76);
      unint64_t v78 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v77 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v78 >= v77 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1LL);
      }
      uint64_t v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v78, v75);
      specialized Array._endMutation()(v79);
    }

    else
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v49 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v49, (uint64_t)qword_1002567D0);
      uint64_t v50 = swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.info.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        unint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v54 = (void *)swift_slowAlloc(32LL, -1LL);
        id v117 = v54;
        *(_DWORD *)unint64_t v53 = 136446210;
        swift_bridgeObjectRetain(a3);
        uint64_t v116 = sub_10017C4C4(a2, a3, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease_n(a3, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "No peer for trusted ID %{public}s", v53, 0xCu);
        swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a3, 2LL);
      }
    }

    return;
  }

  unint64_t v111 = a3;
  id v30 = *(id *)(a1 + v9);
  id v31 = v12;
  id v32 = [v31 permanentInfo];
  id v33 = [v31 stableInfo];
  id v117 = 0LL;
  id v34 = [v30 getViewsForPeer:v32 stableInfo:v33 error:&v117];

  id v35 = v117;
  if (v34)
  {
    uint64_t v36 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v34,  &type metadata for String,  &protocol witness table for String);
    id v37 = v35;
  }

  else
  {
    id v80 = v117;
    _convertNSErrorToError(_:)(v35);

    swift_willThrow(v81);
    swift_errorRelease();
    uint64_t v36 = 0LL;
  }

  id v82 = [v31 permanentInfo];
  id v83 = [v82 signingPubKey];

  id v84 = v31;
  id v85 = [v83 spki];
  swift_unknownObjectRelease(v83);
  uint64_t v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
  unint64_t v88 = v87;

  id v89 = [v31 permanentInfo];
  id v90 = [v89 encryptionPubKey];

  id v91 = [v90 spki];
  swift_unknownObjectRelease(v90);
  uint64_t v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
  unint64_t v107 = v93;

  uint64_t v108 = v84;
  id v94 = [v84 stableInfo];
  id v106 = [v94 secureElementIdentity];

  if (v36) {
    id v95 = (void *)v36;
  }
  else {
    id v95 = &_swiftEmptySetSingleton;
  }
  id v105 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperPeer);
  swift_bridgeObjectRetain(v111);
  NSString v96 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v111);
  Class v97 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v98 = v92;
  Class v99 = Data._bridgeToObjectiveC()().super.isa;
  Class v100 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v95);
  id v113 = [v105 initWithPeerID:v96 signingSPKI:v97 encryptionSPKI:v99 secureElementIdentity:v106 viewList:v100];

  sub_10000852C(v98, v107);
  sub_10000852C(v86, v88);

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v101);
  unint64_t v103 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v102 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v103 >= v102 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1LL);
  }
  uint64_t v104 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v103, v113);
  specialized Array._endMutation()(v104);
}

uint64_t sub_1000EF4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(&unk_10023ADF0, 32LL, 7LL);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v7 = (void *)swift_allocObject(&unk_10023AE18, 40LL, 7LL);
  void v7[2] = v2;
  v7[3] = sub_100176418;
  v7[4] = v5;
  uint64_t v8 = swift_allocObject(&unk_10023AE40, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_10017643C;
  *(void *)(v8 + 24) = v7;
  v14[4] = sub_100176BD4;
  uint64_t v15 = v8;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_1000DC9F8;
  v14[3] = &unk_10023AE58;
  uint64_t v9 = _Block_copy(v14);
  uint64_t v10 = v15;
  swift_retain(a2);
  NSString v11 = v2;
  swift_retain(v5);
  swift_retain(v8);
  swift_release(v10);
  [v6 performBlockAndWait:v9];
  swift_release(v5);
  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 108LL, 2171LL, 33LL, 1LL);
  swift_release(v7);
  uint64_t result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EF660(char *a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v200 = a3;
  uint64_t v5 = 0LL;
  uint64_t v6 = sub_100007578(&qword_100256D28);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  id v198 = (char *)&v192 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  id v199 = (char *)&v192 - v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  id v16 = (char *)&v192 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v192 - v18;
  unint64_t v20 = sub_10000BE44((uint64_t)_swiftEmptyArrayStorage);
  BOOL v207 = (void *)v20;
  uint64_t v203 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v21 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  id v204 = a1;
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;
    uint64_t v25 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    id v211 = 0LL;
    id v26 = v25;
    id v27 = [v26 peerWithID:v22 error:&v211];

    if (v211)
    {
      id v28 = v211;

      swift_willThrow(v29);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v30 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v30, (uint64_t)qword_1002567D0);
      id v31 = v28;
      id v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v36 = static os_log_type_t.error.getter(v32, v33, v34, v35);
      if (os_log_type_enabled(v32, v36))
      {
        BOOL v201 = v16;
        id v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v38 = (void *)swift_slowAlloc(8LL, -1LL);
        unint64_t v197 = v19;
        *(_DWORD *)id v37 = 138543362;
        id v31 = v31;
        NSString v39 = (void *)_swift_stdlib_bridgeErrorToNSError(v31);
        id v211 = v39;
        a1 = v204;
        uint64_t v19 = v197;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v37 + 4, v37 + 12);
        *id v38 = v39;
        id v16 = v201;

        _os_log_impl((void *)&_mh_execute_header, v32, v36, "Error getting ego peer from model: %{public}@", v37, 0xCu);
        uint64_t v40 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v38, 1LL, v40);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {

        id v32 = (os_log_s *)v31;
      }

      uint64_t v5 = 0LL;
    }

    else if (v27)
    {
      id v41 = v27;
      swift_bridgeObjectRelease(v24);
      *(void *)&__int128 v209 = 1718379891LL;
      *((void *)&v209 + 1) = 0xE400000000000000LL;
      AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
      id v42 = objc_autoreleasePoolPush();
      sub_1000EA758(v41, (uint64_t)&v209);
      objc_autoreleasePoolPop(v42);
      uint64_t v43 = v209;
      id v210 = (void *)sub_100007578(&qword_1002570A8);
      *(void *)&__int128 v209 = v43;
      sub_100008570(&v209, v208);
      id v44 = v207;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v207);
      id v206 = v44;
      sub_10014C8F4(v208, (uint64_t)&v211, isUniquelyReferenced_nonNull_native);
      BOOL v207 = v206;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_10000DEAC((uint64_t)&v211);

      goto LABEL_14;
    }

    *(void *)&__int128 v209 = 1718379891LL;
    *((void *)&v209 + 1) = 0xE400000000000000LL;
    AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
    uint64_t v46 = sub_100007578(&qword_1002570B0);
    uint64_t v47 = swift_allocObject(v46, 64LL, 7LL);
    *(_OWORD *)(v47 + 16) = xmmword_1001DE710;
    *(void *)(v47 + 32) = 0x444972656570LL;
    *(void *)(v47 + 40) = 0xE600000000000000LL;
    *(void *)(v47 + 48) = v202;
    *(void *)(v47 + 56) = v24;
    unint64_t v48 = sub_10000C360(v47);
    id v210 = (void *)sub_100007578(&qword_1002570B8);
    *(void *)&__int128 v209 = v48;
    sub_100008570(&v209, v208);
    unint64_t v20 = (unint64_t)v207;
  }

  else
  {
    *(void *)&__int128 v209 = 1718379891LL;
    *((void *)&v209 + 1) = 0xE400000000000000LL;
    AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
    id v210 = (void *)sub_100007578(&qword_100257098);
    *(void *)&__int128 v209 = &_swiftEmptyDictionarySingleton;
    sub_100008570(&v209, v208);
  }

  char v49 = swift_isUniquelyReferenced_nonNull_native(v20);
  id v206 = (void *)v20;
  sub_10014C8F4(v208, (uint64_t)&v211, v49);
  BOOL v207 = v206;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_10000DEAC((uint64_t)&v211);
LABEL_14:
  uint64_t v50 = objc_autoreleasePoolPush();
  sub_1000F0E48(a1);
  objc_autoreleasePoolPop(v50);
  uint64_t v202 = sub_1001A3414();
  *(void *)&__int128 v209 = 0xD000000000000019LL;
  *((void *)&v209 + 1) = 0x80000001001FA320LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v51 = [*(id *)&a1[v203] idmsTrustedDevicesVersion];
  if (v51)
  {
    os_log_type_t v52 = v51;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v55 = v54;

    id v210 = &type metadata for String;
    *(void *)&__int128 v209 = v53;
    *((void *)&v209 + 1) = v55;
    sub_100008570(&v209, v208);
    uint64_t v56 = v207;
    char v57 = swift_isUniquelyReferenced_nonNull_native(v207);
    id v206 = v56;
    sub_10014C8F4(v208, (uint64_t)&v211, v57);
    BOOL v207 = v206;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10000DEAC((uint64_t)&v211);
  }

  else
  {
    sub_10000CFCC((uint64_t)&v211, &v209);
    sub_10000DEAC((uint64_t)&v211);
    sub_100041590((uint64_t)&v209, &qword_100251EA0);
  }

  *(void *)&__int128 v209 = 0xD00000000000001ELL;
  *((void *)&v209 + 1) = 0x80000001001FA340LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v58 = [*(id *)&a1[v203] idmsTrustedDeviceListFetchDate];
  if (v58)
  {
    uint64_t v59 = v58;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v60 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL))(v16, 0LL, 1LL, v60);
  }

  else
  {
    uint64_t v60 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL))(v16, 1LL, 1LL, v60);
  }

  id v61 = (void *)v202;
  sub_1000B669C((uint64_t)v16, (uint64_t)v19, &qword_100256D28);
  type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v60 - 8);
  unint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  int v64 = v63(v19, 1LL, v60);
  unint64_t v197 = (char *)v60;
  uint64_t v196 = v62;
  SEL v195 = (uint64_t (*)(uint64_t, uint64_t, char *))v63;
  if (v64 == 1)
  {
    sub_100041590((uint64_t)v19, &qword_100256D28);
    sub_10000CFCC((uint64_t)&v211, &v209);
    sub_10000DEAC((uint64_t)&v211);
    sub_100041590((uint64_t)&v209, &qword_100251EA0);
  }

  else
  {
    id v210 = (void *)v60;
    id v65 = sub_100176458(&v209);
    (*(void (**)(void *, char *, uint64_t))(v62 + 32))(v65, v19, v60);
    sub_100008570(&v209, v208);
    uint64_t v66 = v207;
    char v67 = swift_isUniquelyReferenced_nonNull_native(v207);
    id v206 = v66;
    sub_10014C8F4(v208, (uint64_t)&v211, v67);
    BOOL v207 = v206;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10000DEAC((uint64_t)&v211);
  }

  *(void *)&__int128 v209 = 0xD000000000000011LL;
  *((void *)&v209 + 1) = 0x80000001001FA360LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v68 = [v61 machineIDsInStatus:1];
  uint64_t v69 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v68,  &type metadata for String,  &protocol witness table for String);

  uint64_t v70 = swift_bridgeObjectRetain(v69);
  uint64_t v71 = sub_10014E370(v70);
  swift_bridgeObjectRelease(v69);
  *(void *)&__int128 v209 = v71;
  sub_1001AB5AC((uint64_t *)&v209);
  swift_bridgeObjectRelease(v69);
  uint64_t v72 = v209;
  uint64_t v73 = sub_100007578(&qword_1002570A0);
  id v210 = (void *)v73;
  *(void *)&__int128 v209 = v72;
  sub_100008570(&v209, v208);
  Class v74 = v207;
  char v75 = swift_isUniquelyReferenced_nonNull_native(v207);
  id v206 = v74;
  sub_10014C8F4(v208, (uint64_t)&v211, v75);
  uint64_t v76 = v206;
  BOOL v207 = v206;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_10000DEAC((uint64_t)&v211);
  *(void *)&__int128 v209 = 0xD000000000000014LL;
  *((void *)&v209 + 1) = 0x80000001001FA380LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v77 = [v61 machineIDsInStatus:2];
  uint64_t v78 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v77,  &type metadata for String,  &protocol witness table for String);

  uint64_t v79 = swift_bridgeObjectRetain(v78);
  id v80 = sub_10014E370(v79);
  swift_bridgeObjectRelease(v78);
  *(void *)&__int128 v209 = v80;
  sub_1001AB5AC((uint64_t *)&v209);
  swift_bridgeObjectRelease(v78);
  id v210 = (void *)v73;
  sub_100008570(&v209, v208);
  char v81 = swift_isUniquelyReferenced_nonNull_native(v76);
  id v206 = v76;
  sub_10014C8F4(v208, (uint64_t)&v211, v81);
  id v82 = v206;
  BOOL v207 = v206;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_10000DEAC((uint64_t)&v211);
  *(void *)&__int128 v209 = 0xD000000000000011LL;
  *((void *)&v209 + 1) = 0x80000001001FA3A0LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v83 = [v61 machineIDsInStatus:3];
  uint64_t v84 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v83,  &type metadata for String,  &protocol witness table for String);

  uint64_t v85 = swift_bridgeObjectRetain(v84);
  uint64_t v86 = sub_10014E370(v85);
  swift_bridgeObjectRelease(v84);
  *(void *)&__int128 v209 = v86;
  sub_1001AB5AC((uint64_t *)&v209);
  swift_bridgeObjectRelease(v84);
  id v210 = (void *)v73;
  sub_100008570(&v209, v208);
  char v87 = swift_isUniquelyReferenced_nonNull_native(v82);
  id v206 = v82;
  sub_10014C8F4(v208, (uint64_t)&v211, v87);
  unint64_t v88 = v206;
  BOOL v207 = v206;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_10000DEAC((uint64_t)&v211);
  *(void *)&__int128 v209 = 0xD000000000000017LL;
  *((void *)&v209 + 1) = 0x80000001001FA3C0LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v89 = [v61 machineIDsInStatus:4];
  uint64_t v90 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v89,  &type metadata for String,  &protocol witness table for String);

  uint64_t v91 = swift_bridgeObjectRetain(v90);
  uint64_t v92 = sub_10014E370(v91);
  swift_bridgeObjectRelease(v90);
  *(void *)&__int128 v209 = v92;
  sub_1001AB5AC((uint64_t *)&v209);
  swift_bridgeObjectRelease(v90);
  id v210 = (void *)v73;
  sub_100008570(&v209, v208);
  char v93 = swift_isUniquelyReferenced_nonNull_native(v88);
  id v206 = v88;
  sub_10014C8F4(v208, (uint64_t)&v211, v93);
  id v94 = v206;
  BOOL v207 = v206;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_10000DEAC((uint64_t)&v211);
  *(void *)&__int128 v209 = 0xD000000000000018LL;
  *((void *)&v209 + 1) = 0x80000001001FA3E0LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v95 = [v61 machineIDsInStatus:5];
  uint64_t v96 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v95,  &type metadata for String,  &protocol witness table for String);

  uint64_t v97 = swift_bridgeObjectRetain(v96);
  uint64_t v98 = sub_10014E370(v97);
  swift_bridgeObjectRelease(v96);
  *(void *)&__int128 v209 = v98;
  sub_1001AB5AC((uint64_t *)&v209);
  swift_bridgeObjectRelease(v96);
  BOOL v201 = (char *)v73;
  id v210 = (void *)v73;
  sub_100008570(&v209, v208);
  char v99 = swift_isUniquelyReferenced_nonNull_native(v94);
  id v206 = v94;
  sub_10014C8F4(v208, (uint64_t)&v211, v99);
  Class v100 = v206;
  BOOL v207 = v206;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_10000DEAC((uint64_t)&v211);
  *(void *)&__int128 v209 = 0xD000000000000014LL;
  *((void *)&v209 + 1) = 0x80000001001FA400LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v101 = [*(id *)&v204[v203] honorIDMSListChanges];
  if (v101)
  {
    unint64_t v102 = v101;
    uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
    uint64_t v105 = v104;

    id v210 = &type metadata for String;
    *(void *)&__int128 v209 = v103;
    *((void *)&v209 + 1) = v105;
    sub_100008570(&v209, v208);
    char v106 = swift_isUniquelyReferenced_nonNull_native(v100);
    id v206 = v100;
    sub_10014C8F4(v208, (uint64_t)&v211, v106);
    BOOL v207 = v206;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10000DEAC((uint64_t)&v211);
  }

  else
  {
    sub_10000CFCC((uint64_t)&v211, &v209);
    sub_10000DEAC((uint64_t)&v211);
    sub_100041590((uint64_t)&v209, &qword_100251EA0);
  }

  *(void *)&__int128 v209 = 0xD00000000000001DLL;
  *((void *)&v209 + 1) = 0x80000001001FA420LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  uint64_t v107 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v108 = [*(id *)&v204[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model] recoverySigningPublicKey];
  if (v108)
  {
    os_log_type_t v109 = v108;
    uint64_t v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v108);
    uint64_t v112 = v111;

    id v210 = &type metadata for Data;
    *(void *)&__int128 v209 = v110;
    *((void *)&v209 + 1) = v112;
    sub_100008570(&v209, v208);
    id v113 = v207;
    char v114 = swift_isUniquelyReferenced_nonNull_native(v207);
    id v206 = v113;
    sub_10014C8F4(v208, (uint64_t)&v211, v114);
    BOOL v207 = v206;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10000DEAC((uint64_t)&v211);
  }

  else
  {
    sub_10000CFCC((uint64_t)&v211, &v209);
    sub_10000DEAC((uint64_t)&v211);
    sub_100041590((uint64_t)&v209, &qword_100251EA0);
  }

  *(void *)&__int128 v209 = 0xD000000000000020LL;
  *((void *)&v209 + 1) = 0x80000001001FA440LL;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v115 = [*(id *)&v204[v107] recoveryEncryptionPublicKey];
  if (v115)
  {
    uint64_t v116 = v115;
    uint64_t v117 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v115);
    uint64_t v119 = v118;

    id v210 = &type metadata for Data;
    *(void *)&__int128 v209 = v117;
    *((void *)&v209 + 1) = v119;
    sub_100008570(&v209, v208);
    id v120 = v207;
    char v121 = swift_isUniquelyReferenced_nonNull_native(v207);
    id v206 = v120;
    sub_10014C8F4(v208, (uint64_t)&v211, v121);
    BOOL v207 = v206;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10000DEAC((uint64_t)&v211);
  }

  else
  {
    sub_10000CFCC((uint64_t)&v211, &v209);
    sub_10000DEAC((uint64_t)&v211);
    sub_100041590((uint64_t)&v209, &qword_100251EA0);
  }

  *(void *)&__int128 v209 = 0xD000000000000018LL;
  *((void *)&v209 + 1) = 0x80000001001FA470LL;
  unint64_t v122 = (unint64_t)&type metadata for String;
  AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
  id v123 = *(void **)&v204[v107];
  *(void *)&v208[0] = 0LL;
  id v124 = [v123 allRegisteredPolicyVersionsWithError:v208];
  id v125 = *(void **)&v208[0];
  if (v124)
  {
    NSString v126 = v124;
    uint64_t v127 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v128 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v129 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v126, v127, v128);
    id v130 = v125;

    uint64_t v131 = swift_bridgeObjectRetain(v129);
    uint64_t v132 = sub_10014E278(v131);
    swift_bridgeObjectRelease(v129);
    *(void *)&v208[0] = v132;
    sub_100154534((uint64_t *)v208);
    swift_bridgeObjectRelease(v129);
    unint64_t v122 = *(void *)&v208[0];
    id v133 = v201;
    if ((*(void *)&v208[0] & 0x8000000000000000LL) != 0 || (*(void *)&v208[0] & 0x4000000000000000LL) != 0)
    {
      uint64_t v167 = swift_bridgeObjectRetain(*(void *)&v208[0]);
      uint64_t v134 = _CocoaArrayWrapper.endIndex.getter(v167);
      swift_release(v122);
      if (v134) {
        goto LABEL_36;
      }
    }

    else
    {
      uint64_t v134 = *(void *)(*(void *)&v208[0] + 16LL);
      if (v134)
      {
LABEL_36:
        id v206 = _swiftEmptyArrayStorage;
        sub_10014E670(0, v134 & ~(v134 >> 63), 0);
        if ((v134 & 0x8000000000000000LL) == 0)
        {
          uint64_t v193 = 0LL;
          unint64_t v194 = a2;
          uint64_t v135 = 0LL;
          uint64_t v136 = v206;
          do
          {
            if ((v122 & 0xC000000000000001LL) != 0) {
              id v137 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v135, v122);
            }
            else {
              id v137 = *(id *)(v122 + 8 * v135 + 32);
            }
            uint64_t v138 = v137;
            id v205 = [v137 versionNumber];
            *(void *)&v208[0] = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
            *((void *)&v208[0] + 1) = v139;
            v140._uint64_t countAndFlagsBits = 8236LL;
            v140._object = (void *)0xE200000000000000LL;
            String.append(_:)(v140);
            id v141 = [v138 policyHash];
            uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
            uint64_t v144 = v143;

            v145._uint64_t countAndFlagsBits = v142;
            v145._object = v144;
            String.append(_:)(v145);

            swift_bridgeObjectRelease(v144);
            __int128 v146 = v208[0];
            id v206 = v136;
            unint64_t v148 = v136[2];
            unint64_t v147 = v136[3];
            if (v148 >= v147 >> 1)
            {
              sub_10014E670(v147 > 1, v148 + 1, 1);
              uint64_t v136 = v206;
            }

            ++v135;
            v136[2] = v148 + 1;
            *(_OWORD *)&v136[2 * v148 + 4] = v146;
          }

          while (v134 != v135);
          swift_release(v122);
          a2 = v194;
          id v133 = v201;
          uint64_t v5 = v193;
          goto LABEL_52;
        }

        __break(1u);
        goto LABEL_66;
      }
    }

    swift_release(v122);
    uint64_t v136 = _swiftEmptyArrayStorage;
LABEL_52:
    id v210 = v133;
    *(void *)&__int128 v209 = v136;
    sub_100008570(&v209, v208);
    id v168 = v207;
    char v169 = swift_isUniquelyReferenced_nonNull_native(v207);
    id v206 = v168;
    sub_10014C8F4(v208, (uint64_t)&v211, v169);
    BOOL v166 = v206;
    BOOL v207 = v206;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10000DEAC((uint64_t)&v211);
    id v162 = (void *)v202;
    goto LABEL_53;
  }

  id v149 = *(id *)&v208[0];
  sub_10000DEAC((uint64_t)&v211);
  uint64_t v73 = _convertNSErrorToError(_:)(v125);

  swift_willThrow(v150);
  if (qword_100250EB8 != -1) {
LABEL_66:
  }
    swift_once(&qword_100250EB8, sub_1000DD078);
  uint64_t v151 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v151, (uint64_t)qword_1002567D0);
  swift_errorRetain(v73);
  uint64_t v152 = swift_errorRetain(v73);
  uint64_t v153 = (os_log_s *)Logger.logObject.getter(v152);
  os_log_type_t v157 = static os_log_type_t.error.getter(v153, v154, v155, v156);
  if (os_log_type_enabled(v153, v157))
  {
    BOOL v158 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v159 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)BOOL v158 = 138543362;
    swift_errorRetain(v73);
    os_log_type_t v160 = (void *)_swift_stdlib_bridgeErrorToNSError(v73);
    id v211 = v160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v158 + 4, v158 + 12);
    void *v159 = v160;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v153,  v157,  "Error getting registered policy versions: %{public}@",  v158,  0xCu);
    uint64_t v161 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v159, 1LL, v161);
    swift_slowDealloc(v159, -1LL, -1LL);
    swift_slowDealloc(v158, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  id v162 = (void *)v202;

  *(void *)&__int128 v209 = 0xD00000000000001DLL;
  *((void *)&v209 + 1) = 0x80000001001FA490LL;
  AnyHashable.init<A>(_:)(&v209, v122, &protocol witness table for String);
  *(void *)&__int128 v209 = 0LL;
  *((void *)&v209 + 1) = 0xE000000000000000LL;
  *(void *)&v208[0] = v73;
  uint64_t v163 = sub_100007578(&qword_100251D70);
  _print_unlocked<A, B>(_:_:)( v208,  &v209,  v163,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  id v210 = (void *)v122;
  sub_100008570(&v209, v208);
  os_log_type_t v164 = v207;
  char v165 = swift_isUniquelyReferenced_nonNull_native(v207);
  id v206 = v164;
  sub_10014C8F4(v208, (uint64_t)&v211, v165);
  BOOL v166 = v206;
  BOOL v207 = v206;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_10000DEAC((uint64_t)&v211);
  swift_errorRelease();
  uint64_t v5 = 0LL;
LABEL_53:
  id v170 = [*(id *)&v204[v203] accountSettings];
  if (v170)
  {
    uint64_t v171 = v170;
    uint64_t v172 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v170);
    unint64_t v174 = v173;

    uint64_t v175 = sub_100166400(v172, v174);
    if (!v5)
    {
      uint64_t v176 = v175;
      if (v175)
      {
        *(void *)&__int128 v209 = 0x53746E756F636361LL;
        *((void *)&v209 + 1) = 0xEF73676E69747465LL;
        AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
        int64_t v177 = sub_100154098(v176);
        swift_bridgeObjectRelease(v176);
        id v210 = (void *)sub_100007578(&qword_1002570A8);
        *(void *)&__int128 v209 = v177;
        sub_100008570(&v209, v208);
        char v178 = swift_isUniquelyReferenced_nonNull_native(v166);
        id v206 = v166;
        sub_10014C8F4(v208, (uint64_t)&v211, v178);
        BOOL v207 = v206;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_10000DEAC((uint64_t)&v211);
        *(void *)&__int128 v209 = 0xD000000000000013LL;
        *((void *)&v209 + 1) = 0x80000001001FA4B0LL;
        AnyHashable.init<A>(_:)(&v209, &type metadata for String, &protocol witness table for String);
        id v179 = [*(id *)&v204[v203] accountSettingsDate];
        if (v179)
        {
          uint64_t v180 = v179;
          uint64_t v181 = (uint64_t)v198;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v182 = 0LL;
          uint64_t v183 = (uint64_t)v199;
        }

        else
        {
          uint64_t v182 = 1LL;
          uint64_t v183 = (uint64_t)v199;
          uint64_t v181 = (uint64_t)v198;
        }

        id v184 = v197;
        uint64_t v185 = v196;
        (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v196 + 56))(v181, v182, 1LL, v197);
        sub_1000B669C(v181, v183, &qword_100256D28);
        int v186 = v195(v183, 1LL, v184);
        id v162 = (void *)v202;
        if (v186 == 1)
        {
          sub_100041590(v183, &qword_100256D28);
          sub_10000CFCC((uint64_t)&v211, &v209);
          sub_10000DEAC((uint64_t)&v211);
          sub_100041590((uint64_t)&v209, &qword_100251EA0);
          sub_10000852C(v172, v174);
          BOOL v166 = v207;
          goto LABEL_64;
        }

        id v210 = v184;
        id v187 = sub_100176458(&v209);
        (*(void (**)(void *, uint64_t, char *))(v185 + 32))(v187, v183, v184);
        sub_100008570(&v209, v208);
        id v188 = v207;
        char v189 = swift_isUniquelyReferenced_nonNull_native(v207);
        id v206 = v188;
        sub_10014C8F4(v208, (uint64_t)&v211, v189);
        BOOL v166 = v206;
        BOOL v207 = v206;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_10000DEAC((uint64_t)&v211);
      }

      sub_10000852C(v172, v174);
      goto LABEL_64;
    }

    sub_10000852C(v172, v174);
    swift_errorRelease();
  }

LABEL_64:
  uint64_t v190 = swift_bridgeObjectRetain(v166);
  a2(v190, 0LL);

  return swift_bridgeObjectRelease_n(v166, 2LL);
}

  __break(1u);
}

uint64_t sub_1000F0E48(char *a1)
{
  uint64_t v2 = swift_allocObject(&unk_10023AE90, 24LL, 7LL);
  uint64_t v3 = _swiftEmptyArrayStorage;
  *(void *)(v2 + 16) = _swiftEmptyArrayStorage;
  uint64_t v4 = v2 + 16;
  uint64_t v98 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v5 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  uint64_t v6 = swift_allocObject(&unk_10023AEB8, 32LL, 7LL);
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v2;
  char v114 = sub_1001764E4;
  uint64_t v115 = v6;
  aBlock = _NSConcreteStackBlock;
  uint64_t v111 = 1107296256LL;
  uint64_t v112 = sub_1000F1CC8;
  id v113 = &unk_10023AED0;
  uint64_t v7 = _Block_copy(&aBlock);
  uint64_t v8 = v115;
  id v9 = v5;
  uint64_t v96 = a1;
  uint64_t v94 = v2;
  swift_retain(v2);
  swift_release(v8);
  aBlock = 0LL;
  LODWORD(v8) = [v9 enumeratePeersUsingBlock:v7 error:&aBlock];
  _Block_release(v7);

  uint64_t v10 = aBlock;
  if ((_DWORD)v8) {
    goto LABEL_7;
  }
  uint64_t v11 = v10;
  uint64_t v12 = _convertNSErrorToError(_:)(v10);

  swift_willThrow(v13);
  if (qword_100250EB8 != -1) {
    goto LABEL_65;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v14, (uint64_t)qword_1002567D0);
    swift_errorRetain(v12);
    uint64_t v15 = swift_errorRetain(v12);
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v20 = static os_log_type_t.error.getter(v16, v17, v18, v19);
    if (os_log_type_enabled(v16, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v21 = 138543362;
      swift_errorRetain(v12);
      uint64_t v23 = (void **)_swift_stdlib_bridgeErrorToNSError(v12);
      aBlock = v23;
      uint64_t v3 = _swiftEmptyArrayStorage;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v111, v21 + 4, v21 + 12);
      void *v22 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v20, "Error enumerating peers: %{public}@", v21, 0xCu);
      uint64_t v24 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v22, 1LL, v24);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v107 = 0xD000000000000015LL;
    unint64_t v108 = 0x80000001001FA580LL;
    AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
    unint64_t v107 = 0LL;
    unint64_t v108 = 0xE000000000000000LL;
    v106[0] = v12;
    uint64_t v25 = sub_100007578(&qword_100251D70);
    _print_unlocked<A, B>(_:_:)( v106,  &v107,  v25,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    os_log_type_t v109 = &type metadata for String;
    sub_1000DC71C((uint64_t)&v107, (uint64_t)&aBlock);
    swift_errorRelease();
LABEL_7:
    unint64_t v107 = 0x7372656570LL;
    unint64_t v108 = 0xE500000000000000LL;
    AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
    swift_beginAccess(v4, v106, 0LL, 0LL);
    unint64_t v26 = *(void *)v4;
    uint64_t v95 = sub_100007578(&qword_1002570E0);
    os_log_type_t v109 = (void *)v95;
    unint64_t v107 = v26;
    swift_bridgeObjectRetain(v26);
    sub_1000DC71C((uint64_t)&v107, (uint64_t)&aBlock);
    uint64_t v12 = swift_allocObject(&unk_10023AE90, 24LL, 7LL);
    *(void *)(v12 + 16) = v3;
    id v27 = (unint64_t *)(v12 + 16);
    id v28 = *(void **)&a1[v98];
    char v114 = sub_1001764EC;
    uint64_t v115 = v12;
    aBlock = _NSConcreteStackBlock;
    uint64_t v111 = 1107296256LL;
    uint64_t v112 = sub_1000F1CC8;
    id v113 = &unk_10023AEF8;
    uint64_t v29 = _Block_copy(&aBlock);
    uint64_t v30 = v115;
    id v31 = v28;
    uint64_t v93 = v12;
    swift_retain(v12);
    swift_release(v30);
    aBlock = 0LL;
    LODWORD(v30) = [v31 enumerateVouchersUsingBlock:v29 error:&aBlock];
    _Block_release(v29);

    id v32 = aBlock;
    if (!(_DWORD)v30)
    {
      uint64_t v33 = v32;
      uint64_t v34 = _convertNSErrorToError(_:)(v32);

      swift_willThrow(v35);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v36 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v36, (uint64_t)qword_1002567D0);
      swift_errorRetain(v34);
      uint64_t v37 = swift_errorRetain(v34);
      id v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v42 = static os_log_type_t.error.getter(v38, v39, v40, v41);
      if (os_log_type_enabled(v38, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v92 = (void ***)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v43 = 138543362;
        swift_errorRetain(v34);
        uint64_t v12 = (uint64_t)v3;
        id v44 = (void **)_swift_stdlib_bridgeErrorToNSError(v34);
        aBlock = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v111, v43 + 4, v43 + 12);
        *uint64_t v92 = v44;
        uint64_t v3 = (void *)v12;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v42, "Error enumerating vouchers: %{public}@", v43, 0xCu);
        uint64_t v45 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v92, 1LL, v45);
        swift_slowDealloc(v92, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      unint64_t v107 = 0xD000000000000018LL;
      unint64_t v108 = 0x80000001001FA5C0LL;
      AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
      unint64_t v107 = 0LL;
      unint64_t v108 = 0xE000000000000000LL;
      v105[0] = v34;
      uint64_t v46 = sub_100007578(&qword_100251D70);
      _print_unlocked<A, B>(_:_:)( v105,  &v107,  v46,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      os_log_type_t v109 = &type metadata for String;
      sub_1000DC71C((uint64_t)&v107, (uint64_t)&aBlock);
      swift_errorRelease();
    }

    unint64_t v107 = 0x7372656863756F76LL;
    unint64_t v108 = 0xE800000000000000LL;
    AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
    swift_beginAccess(v27, v105, 0LL, 0LL);
    unint64_t v47 = *v27;
    os_log_type_t v109 = (void *)v95;
    unint64_t v107 = v47;
    swift_bridgeObjectRetain(v47);
    sub_1000DC71C((uint64_t)&v107, (uint64_t)&aBlock);
    unint64_t v107 = 0xD000000000000017LL;
    unint64_t v108 = 0x80000001001FA5E0LL;
    AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
    id v48 = [*(id *)&a1[v98] allCustodianRecoveryKeys];
    uint64_t v49 = sub_100007620(0LL, &qword_100256B80, &OBJC_CLASS___TPCustodianRecoveryKey_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0) {
        uint64_t v60 = v4;
      }
      else {
        uint64_t v60 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v4);
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter(v60);
      swift_bridgeObjectRelease(v4);
      if (!v50)
      {
LABEL_29:
        swift_bridgeObjectRelease(v4);
        os_log_type_t v52 = _swiftEmptyArrayStorage;
        goto LABEL_30;
      }
    }

    else
    {
      uint64_t v50 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (!v50) {
        goto LABEL_29;
      }
    }

    unint64_t v107 = (unint64_t)v3;
    sub_10014E68C(0, v50 & ~(v50 >> 63), 0);
    if ((v50 & 0x8000000000000000LL) == 0) {
      break;
    }
    __break(1u);
LABEL_65:
    swift_once(&qword_100250EB8, sub_1000DD078);
  }

  uint64_t v51 = 0LL;
  os_log_type_t v52 = (void *)v107;
  unint64_t v99 = v4 & 0xC000000000000001LL;
  uint64_t v53 = v4;
  do
  {
    if (v99) {
      id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v4);
    }
    else {
      id v54 = *(id *)(v4 + 8 * v51 + 32);
    }
    uint64_t v55 = v54;
    id v56 = objc_msgSend(v54, "dictionaryRepresentation", v92, v93, v94);
    uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v56,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    unint64_t v107 = (unint64_t)v52;
    unint64_t v59 = v52[2];
    unint64_t v58 = v52[3];
    if (v59 >= v58 >> 1)
    {
      sub_10014E68C(v58 > 1, v59 + 1, 1);
      os_log_type_t v52 = (void *)v107;
    }

    ++v51;
    v52[2] = v59 + 1;
    v52[v59 + 4] = v57;
    uint64_t v4 = v53;
  }

  while (v50 != v51);
  swift_bridgeObjectRelease(v53);
  uint64_t v3 = _swiftEmptyArrayStorage;
LABEL_30:
  os_log_type_t v109 = (void *)v95;
  unint64_t v107 = (unint64_t)v52;
  sub_1000DC71C((uint64_t)&v107, (uint64_t)&aBlock);
  id v61 = [*(id *)&v96[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] bottles];
  if (v61)
  {
    uint64_t v62 = v61;
    aBlock = 0LL;
    uint64_t v63 = type metadata accessor for BottleMO();
    uint64_t v64 = sub_1000077B8( &qword_100251690,  (uint64_t (*)(uint64_t))type metadata accessor for BottleMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    static Set._conditionallyBridgeFromObjectiveC(_:result:)(v62, &aBlock, v63, v64);

    uint64_t v65 = (uint64_t)aBlock;
    if (aBlock)
    {
      unint64_t v107 = 0x73656C74746F62LL;
      unint64_t v108 = 0xE700000000000000LL;
      AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
      unint64_t v100 = v65 & 0xC000000000000001LL;
      if ((v65 & 0xC000000000000001LL) != 0)
      {
        if (v65 >= 0) {
          uint64_t v66 = v65 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v66 = v65;
        }
        uint64_t v67 = __CocoaSet.count.getter(v66);
        if (v67)
        {
LABEL_37:
          id v101 = v3;
          sub_10014E68C(0, v67 & ~(v67 >> 63), 0);
          if (v100)
          {
            if (v65 >= 0) {
              uint64_t v68 = v65 & 0xFFFFFFFFFFFFFF8LL;
            }
            else {
              uint64_t v68 = v65;
            }
            uint64_t v69 = __CocoaSet.startIndex.getter(v68);
            char v71 = 1;
          }

          else
          {
            uint64_t v69 = sub_1001AC2BC(v65);
            char v71 = v73 & 1;
          }

          uint64_t v102 = v69;
          uint64_t v103 = v70;
          unsigned __int8 v104 = v71;
          if (v67 < 0)
          {
            __break(1u);
LABEL_67:
            __break(1u);
          }

          uint64_t v74 = v65 & 0xFFFFFFFFFFFFFF8LL;
          if (v65 < 0) {
            uint64_t v74 = v65;
          }
          uint64_t v97 = v74;
          do
          {
            while (1)
            {
              sub_1001AC4D0(v102, v103, v104, v65);
              char v81 = v80;
              unint64_t v82 = sub_100166008(v80);

              id v83 = v101;
              if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
              {
                sub_10014E68C(0, v101[2] + 1LL, 1);
                id v83 = v101;
              }

              unint64_t v85 = v83[2];
              unint64_t v84 = v83[3];
              if (v85 >= v84 >> 1)
              {
                sub_10014E68C(v84 > 1, v85 + 1, 1);
                id v83 = v101;
              }

              v83[2] = v85 + 1;
              v83[v85 + 4] = v82;
              if (v100) {
                break;
              }
              uint64_t v75 = sub_1001AC3E8(v102, v103, v104, v65);
              uint64_t v77 = v76;
              char v79 = v78;
              sub_100171978(v102, v103, v104);
              uint64_t v102 = v75;
              uint64_t v103 = v77;
              unsigned __int8 v104 = v79 & 1;
              if (!--v67) {
                goto LABEL_61;
              }
            }

            if ((v104 & 1) == 0) {
              goto LABEL_67;
            }
            uint64_t v86 = __CocoaSet.Index.handleBitPattern.getter(v102, v103);
            if (v86) {
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
            }
            else {
              uint64_t isUniquelyReferenced_nonNull_native = 1LL;
            }
            uint64_t v88 = sub_100007578(&qword_1002570F0);
            id v89 = (void (*)(unint64_t *, void))Set.Index._asCocoa.modify(&v107, v88);
            __CocoaSet.formIndex(after:isUnique:)(v90, isUniquelyReferenced_nonNull_native, v97);
            v89(&v107, 0LL);
            --v67;
          }

          while (v67);
LABEL_61:
          sub_100171978(v102, v103, v104);
          swift_bridgeObjectRelease(v65);
          uint64_t v72 = v101;
          goto LABEL_62;
        }
      }

      else
      {
        uint64_t v67 = *(void *)(v65 + 16);
        if (v67) {
          goto LABEL_37;
        }
      }

      swift_bridgeObjectRelease(v65);
      uint64_t v72 = _swiftEmptyArrayStorage;
LABEL_62:
      os_log_type_t v109 = (void *)v95;
      unint64_t v107 = (unint64_t)v72;
      goto LABEL_63;
    }
  }

  unint64_t v107 = 0x73656C74746F62LL;
  unint64_t v108 = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
  os_log_type_t v109 = (void *)sub_100007578(&qword_1002570E8);
  unint64_t v107 = (unint64_t)v3;
LABEL_63:
  sub_1000DC71C((uint64_t)&v107, (uint64_t)&aBlock);
  swift_release(v94);
  return swift_release(v93);
}

uint64_t sub_1000F1B10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [a1 peerID];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  id v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (!v11)
  {
    swift_bridgeObjectRelease(v10);
LABEL_9:
    uint64_t v19 = (void *)(a4 + 16);
    os_log_type_t v20 = objc_autoreleasePoolPush();
    sub_1000EA758(a1, (uint64_t)v26);
    objc_autoreleasePoolPop(v20);
    uint64_t v21 = v26[0];
    swift_beginAccess(v19, v26, 33LL, 0LL);
    uint64_t v22 = (void *)*v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    void *v19 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v22 = sub_1001499F8(0LL, v22[2] + 1LL, 1, v22);
      void *v19 = v22;
    }

    unint64_t v25 = v22[2];
    unint64_t v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      uint64_t v22 = sub_1001499F8((void *)(v24 > 1), v25 + 1, 1, v22);
      void *v19 = v22;
    }

    v22[2] = v25 + 1;
    v22[v25 + 4] = v21;
    return swift_endAccess(v26);
  }

  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v15 = v14;

  if (v8 == v13 && v10 == v15) {
    return swift_bridgeObjectRelease_n(v10, 2LL);
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v13, v15, 0LL);
  swift_bridgeObjectRelease(v10);
  uint64_t result = swift_bridgeObjectRelease(v15);
  if ((v17 & 1) == 0) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1000F1CCC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a3 + 16);
  id v5 = [a1 dictionaryRepresentation];
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  swift_beginAccess(v4, v12, 33LL, 0LL);
  id v7 = *(void **)(a3 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  *(void *)(a3 + 16) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v7 = sub_1001499F8(0LL, v7[2] + 1LL, 1, v7);
    *uint64_t v4 = v7;
  }

  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    id v7 = sub_1001499F8((void *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v4 = v7;
  }

  void v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  return swift_endAccess(v12);
}

void sub_1000F1DD8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_1000F1E34(uint64_t a1, uint64_t a2)
{
  id v5 = *(void **)&v2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v6 = (void *)swift_allocObject(&unk_10023AD78, 40LL, 7LL);
  void v6[2] = a1;
  void v6[3] = a2;
  v6[4] = v2;
  uint64_t v7 = swift_allocObject(&unk_10023ADA0, 32LL, 7LL);
  *(void *)(v7 + 16) = sub_1001763FC;
  *(void *)(v7 + 24) = v6;
  void v13[4] = sub_100176BD4;
  uint64_t v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  v13[2] = sub_1000DC9F8;
  void v13[3] = &unk_10023ADB8;
  uint64_t v8 = _Block_copy(v13);
  uint64_t v9 = v14;
  swift_retain(a2);
  unint64_t v10 = v2;
  swift_retain(v7);
  swift_release(v9);
  [v5 performBlockAndWait:v8];
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 108LL, 2256LL, 33LL, 1LL);
  swift_release(v6);
  uint64_t result = swift_release(v7);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F1F80(void (*a1)(uint64_t, uint64_t, void), uint64_t a2, uint64_t a3)
{
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "honorIDMSListChanges"));
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  a1(v6, v8, 0LL);
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1000F2008(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(&unk_10023ACD8, 32LL, 7LL);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v7 = (void *)swift_allocObject(&unk_10023AD00, 40LL, 7LL);
  void v7[2] = v2;
  v7[3] = sub_10017638C;
  v7[4] = v5;
  uint64_t v8 = swift_allocObject(&unk_10023AD28, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_1001763B0;
  *(void *)(v8 + 24) = v7;
  v14[4] = sub_100176BD4;
  uint64_t v15 = v8;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_1000DC9F8;
  v14[3] = &unk_10023AD40;
  uint64_t v9 = _Block_copy(v14);
  uint64_t v10 = v15;
  swift_retain(a2);
  id v11 = v2;
  swift_retain(v5);
  swift_retain(v8);
  swift_release(v10);
  [v6 performBlockAndWait:v9];
  swift_release(v5);
  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 108LL, 2267LL, 33LL, 1LL);
  swift_release(v7);
  uint64_t result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F2188( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, char *a5)
{
  if (a2) {
    os_log_type_t v9 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v9 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v10 = v9;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v11, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v12 = swift_errorRetain(a2);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v10))
  {
    format = a5;
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    unint64_t v16 = 0xE700000000000000LL;
    if (a2)
    {
      uint64_t v24 = 0x203A726F727265LL;
      unint64_t v25 = 0xE700000000000000LL;
      uint64_t v23 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v17 = sub_100007578(&qword_100251D70);
      v18._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v23, v17);
      object = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      swift_errorRelease();
      uint64_t v20 = v24;
      unint64_t v16 = v25;
    }

    else
    {
      uint64_t v20 = 0x73736563637573LL;
    }

    uint64_t v24 = sub_10017C4C4(v20, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v10, format, v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return a3(a1, a2);
}

void sub_1000F23C8(void *a1, void (*a2)(void, uint64_t))
{
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (!v4)
  {
    unint64_t v14 = sub_100043F74();
    uint64_t v15 = swift_allocError(&type metadata for ContainerError, v14, 0LL, 0LL);
    *(_OWORD *)uint64_t v16 = xmmword_1001DE890;
    *(_BYTE *)(v16 + 16) = 13;
    a2(0LL, v15);
    swift_errorRelease();
    return;
  }

  uint64_t v5 = v4;
  uint64_t v6 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v7 = *(void **)((char *)a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v101 = 0LL;
  uint64_t v8 = a1;
  id v9 = v7;
  os_log_type_t v10 = (SEL *)&selRef_setAllSelves_;
  uint64_t v11 = [v9 peerWithID:v5 error:&v101];

  if (v101)
  {
    id v12 = v101;

    swift_willThrow(v13);
LABEL_4:
    swift_errorRetain(v12);
    a2(0LL, (uint64_t)v12);
    swift_errorRelease();
    goto LABEL_5;
  }

  if (!v11)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_100006BAC(v27, (uint64_t)qword_1002567D0);
    uint64_t v32 = static os_log_type_t.error.getter(v28, v29, v30, v31);
    os_log_type_t v33 = v32;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v35 = v33;
    if (os_log_type_enabled(v34, v33))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "self peerID present but egoPeer not found", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    unint64_t v37 = sub_100043F74();
    uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
    *(_OWORD *)uint64_t v39 = xmmword_1001DE890;
    *(_BYTE *)(v39 + 16) = 13;
    a2(0LL, v38);
LABEL_5:
    swift_errorRelease();
    return;
  }

  uint64_t v98 = v6;
  uint64_t v92 = a2;
  unint64_t v100 = sub_10000C360((uint64_t)_swiftEmptyArrayStorage);
  if (qword_100250EB8 != -1) {
LABEL_68:
  }
    swift_once(&qword_100250EB8, sub_1000DD078);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_100006BAC(v17, (uint64_t)qword_1002567D0);
  os_log_type_t v19 = static os_log_type_t.info.getter(v18);
  uint64_t v20 = v11;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = v19;
  uint64_t v93 = v8;
  if (os_log_type_enabled(v21, v19))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v23 = 138412290;
    id v101 = v20;
    unint64_t v25 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v23 + 4, v23 + 12);
    *uint64_t v24 = v11;

    os_log_type_t v10 = (SEL *)&selRef_setAllSelves_;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "egoPeer: %@", v23, 0xCu);
    uint64_t v26 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v24, 1LL, v26);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    uint64_t v21 = (os_log_s *)v20;
  }

  uint64_t v11 = (void *)v100;

  uint64_t v91 = v20;
  id v40 = [v20 dynamicInfo];
  if (v40)
  {
    uint64_t v41 = v40;
    id v42 = [v40 includedPeerIDs];

    uint64_t v43 = (_BYTE *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v42,  &type metadata for String,  &protocol witness table for String);
  }

  else
  {
    uint64_t v43 = &_swiftEmptySetSingleton;
  }

  id v44 = v8;
  unint64_t v45 = 0LL;
  uint64_t v96 = v43 + 56;
  uint64_t v46 = 1LL << v43[32];
  uint64_t v47 = -1LL;
  if (v46 < 64) {
    uint64_t v47 = ~(-1LL << v46);
  }
  unint64_t v48 = v47 & *((void *)v43 + 7);
  int64_t v97 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      uint64_t v8 = v11;
      uint64_t v99 = (v48 - 1) & v48;
      unint64_t v100 = v45;
      unint64_t v50 = __clz(__rbit64(v48)) | (v45 << 6);
    }

    else
    {
      int64_t v51 = v45 + 1;
      if (__OFADD__(v45, 1LL))
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }

      if (v51 >= v97) {
        goto LABEL_63;
      }
      unint64_t v52 = *(void *)&v96[8 * v51];
      int64_t v53 = v45 + 1;
      if (!v52)
      {
        int64_t v53 = v45 + 2;
        unint64_t v52 = *(void *)&v96[8 * v53];
        if (!v52)
        {
          int64_t v53 = v45 + 3;
          unint64_t v52 = *(void *)&v96[8 * v53];
          if (!v52)
          {
            unint64_t v54 = v45 + 4;
            if ((uint64_t)(v45 + 4) >= v97)
            {
LABEL_63:
              swift_release(v43);
              uint64_t v90 = swift_bridgeObjectRetain(v11);
              v92(v90, 0LL);
              swift_bridgeObjectRelease_n(v11, 2LL);

              return;
            }

            unint64_t v52 = *(void *)&v96[8 * v54];
            if (!v52)
            {
              while (1)
              {
                int64_t v53 = v54 + 1;
                if (__OFADD__(v54, 1LL)) {
                  goto LABEL_67;
                }
                if (v53 >= v97) {
                  goto LABEL_63;
                }
                unint64_t v52 = *(void *)&v96[8 * v53];
                ++v54;
                if (v52) {
                  goto LABEL_41;
                }
              }
            }

            int64_t v53 = v45 + 4;
          }
        }
      }

LABEL_59:
    v76[(v70 >> 6) + 8] |= 1LL << v70;
    unint64_t v84 = (void *)(v76[6] + 16 * v70);
    *unint64_t v84 = v11;
    v84[1] = v57;
    unint64_t v85 = (uint64_t *)(v76[7] + 16 * v70);
    *unint64_t v85 = v94;
    v85[1] = v95;
    uint64_t v86 = v76[2];
    BOOL v87 = __OFADD__(v86, 1LL);
    uint64_t v88 = v86 + 1;
    if (v87) {
      goto LABEL_66;
    }
    uint64_t v11 = v76;
    v76[2] = v88;
    swift_bridgeObjectRetain(v57);
    goto LABEL_61;
  }

  sub_10014ABF4(v73, v68);
  unint64_t v74 = sub_10000D1E8((uint64_t)v11, v57);
  if ((v8 & 1) == (v75 & 1))
  {
    unint64_t v70 = v74;
    uint64_t v76 = v101;
LABEL_57:
    id v83 = (uint64_t *)(v76[7] + 16 * v70);
    swift_bridgeObjectRelease(v83[1]);
    *id v83 = v94;
    v83[1] = v95;
    uint64_t v11 = v76;
LABEL_61:

    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    id v44 = v93;
    goto LABEL_25;
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

            swift_release(a1);
            swift_bridgeObjectRelease(v25, v58, v59, v60, v61, v62, v63, v64);
LABEL_61:
            id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCEventNameDuplicateMachineID);
            uint64_t v67 = v66;
            uint64_t v68 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
            objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
            swift_bridgeObjectRetain(a8);
            uint64_t v69 = v68;
            swift_bridgeObjectRetain(a10);
            swift_bridgeObjectRetain(a6);
            unint64_t v70 = sub_10005F250(0LL, a9, a10, a5, a6, a7, a8, v65, v67, a11 & 1, 1, v69);
            uint64_t v71 = (void *)objc_opt_self(&OBJC_CLASS___SecurityAnalyticsReporterRTC);
            BOOL v72 = sub_100043F74();
            uint64_t v73 = swift_allocError(&type metadata for ContainerError, v72, 0LL, 0LL);
            *(_OWORD *)unint64_t v74 = xmmword_1001E6D50;
            *(_BYTE *)(v74 + 16) = 13;
            char v75 = (void *)_convertErrorToNSError(_:)(v73);
            swift_errorRelease();
            [v71 sendMetricWithEvent:v70 success:0 error:v75];

            return;
          }
        }
      }
    }

        return 0LL;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_57;
    }
  }

uint64_t sub_1000F2CE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v16, 41LL, 7LL);
  uint64_t v17 = v12;
  uint64_t v18 = sub_100159634(v17, 0xD000000000000082LL, 0x80000001001FA240LL);

  os_log_type_t v19 = (void *)swift_allocObject(&unk_10023AB98, 40LL, 7LL);
  v19[2] = v18;
  v19[3] = a11;
  v19[4] = a12;
  int v36 = 0;
  if (a10 == 1)
  {
    if ((a7 & 1) != 0)
    {
      if ((a8 & 1) != 0) {
        int v20 = 11;
      }
      else {
        int v20 = 9;
      }
      if ((a9 & 1) == 0) {
        goto LABEL_24;
      }
    }

    else
    {
      if ((a8 & 1) != 0) {
        int v20 = 10;
      }
      else {
        int v20 = 8;
      }
      if ((a9 & 1) == 0) {
        goto LABEL_24;
      }
    }
  }

  else
  {
    if (a10 != 2) {
      goto LABEL_26;
    }
    if ((a7 & 1) != 0)
    {
      if ((a8 & 1) != 0) {
        int v20 = 19;
      }
      else {
        int v20 = 17;
      }
      if ((a9 & 1) == 0)
      {
LABEL_24:
        int v21 = 0;
        goto LABEL_25;
      }
    }

    else
    {
      if ((a8 & 1) != 0) {
        int v20 = 18;
      }
      else {
        int v20 = 16;
      }
      if ((a9 & 1) == 0) {
        goto LABEL_24;
      }
    }
  }

  int v21 = 4;
LABEL_25:
  int v36 = v20 | v21;
LABEL_26:
  os_log_type_t v22 = *(void **)&v17[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v23 = swift_allocObject(&unk_10023ABC0, 104LL, 7LL);
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  *(void *)(v23 + 32) = a3;
  *(void *)(v23 + 40) = a4;
  *(void *)(v23 + 48) = a5;
  *(_BYTE *)(v23 + 56) = a6 & 1;
  *(void *)(v23 + 64) = &v36;
  *(_BYTE *)(v23 + 72) = a9 & 1;
  *(void *)(v23 + 80) = v17;
  *(void *)(v23 + 88) = sub_1001760F8;
  *(void *)(v23 + 96) = v19;
  uint64_t v24 = swift_allocObject(&unk_10023ABE8, 32LL, 7LL);
  *(void *)(v24 + 16) = sub_100176178;
  *(void *)(v24 + 24) = v23;
  aBlock[4] = sub_100176BD4;
  uint64_t v35 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_10023AC00;
  unint64_t v25 = _Block_copy(aBlock);
  uint64_t v26 = v35;
  swift_bridgeObjectRetain(a5);
  swift_retain(v19);
  swift_retain(v24);
  uint64_t v27 = v17;
  swift_retain(v18);
  swift_retain(a12);
  swift_bridgeObjectRetain(a3);
  swift_release(v26);
  [v22 performBlockAndWait:v25];
  swift_release(v19);
  swift_release(v18);
  _Block_release(v25);
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v24, "", 108LL, 2353LL, 33LL, 1LL);
  swift_release(v23);
  uint64_t result = swift_release(v24);
  if ((v26 & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F2FB4( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, int a8, char *a9, uint64_t a10, uint64_t a11)
{
  int v34 = a8;
  uint64_t v35 = a10;
  uint64_t v36 = a11;
  uint64_t v18 = type metadata accessor for ResetRequest(0LL);
  __chkstk_darwin(v18, v19);
  int v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v38 = sub_10015BAA0(a1);
  char v39 = v22 & 1;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  char v44 = a6;
  uint64_t v45 = a7;
  char v46 = v34;
  uint64_t v23 = sub_1000077B8( (unint64_t *)&unk_100257080,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
  static Message.with(_:)(sub_1001761CC, v37, v18, v23);
  uint64_t v24 = *(void *)&a9[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
  uint64_t v25 = *(void *)&a9[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
  sub_1000084C4(&a9[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v24);
  uint64_t v26 = (void *)swift_allocObject(&unk_10023AC38, 40LL, 7LL);
  uint64_t v27 = v35;
  uint64_t v28 = v36;
  v26[2] = a9;
  v26[3] = v27;
  void v26[4] = v28;
  uint64_t v29 = *(void *)(v25 + 16);
  uint64_t v30 = *(void (**)(char *, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v29 + 8);
  uint64_t v31 = a9;
  swift_retain(v28);
  v30(v21, sub_100176210, v26, v24, v29);
  swift_release(v26);
  return sub_1000415CC((uint64_t)v21, type metadata accessor for ResetRequest);
}

uint64_t sub_1000F3148( uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, int a8, uint64_t a9, unsigned __int8 a10)
{
  int v34 = a8;
  int v35 = a10;
  uint64_t v30 = a9;
  uint64_t v17 = type metadata accessor for AccountInfo(0LL);
  uint64_t v31 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3 & 1;
  if (!a5) {
    a4 = 0LL;
  }
  unint64_t v21 = 0xE000000000000000LL;
  if (a5) {
    unint64_t v22 = a5;
  }
  else {
    unint64_t v22 = 0xE000000000000000LL;
  }
  uint64_t v23 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease(v23);
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = v22;
  if (a7) {
    uint64_t v24 = a6;
  }
  else {
    uint64_t v24 = 0LL;
  }
  if (a7) {
    unint64_t v21 = a7;
  }
  uint64_t v25 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRelease(v25);
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v21;
  *(_BYTE *)(a1 + 48) = v34;
  uint64_t v33 = v30;
  uint64_t v26 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  static Message.with(_:)(sub_10017637C, v32, v17, v26);
  uint64_t v27 = a1 + *(int *)(type metadata accessor for ResetRequest(0LL) + 40);
  sub_100041590(v27, &qword_100251F50);
  sub_100041608((uint64_t)v20, v27, type metadata accessor for AccountInfo);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v27, 0LL, 1LL, v17);
  *(_BYTE *)(a1 + 49) = v35;
  return result;
}

uint64_t sub_1000F32FC(uint64_t a1, char *a2, uint64_t isEscapingClosureAtFileLocation, uint64_t a4)
{
  uint64_t v45 = a4;
  uint64_t v7 = type metadata accessor for ResetResponse(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  id v12 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (os_log_s *)((char *)&aBlock[-1] - v14);
  uint64_t v16 = sub_100007578(&qword_100251E88);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&aBlock[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v19, &qword_100251E88);
  if (swift_getEnumCaseMultiPayload(v19, v16) != 1)
  {
    sub_100041608((uint64_t)v19, (uint64_t)v15, type metadata accessor for ResetResponse);
    uint64_t v33 = a2;
    int v34 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    sub_10004164C((uint64_t)v15, (uint64_t)v12, type metadata accessor for ResetResponse);
    uint64_t v35 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v36 = (v35 + 24) & ~v35;
    unint64_t v37 = (v9 + v36 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v38 = swift_allocObject(&unk_10023AC60, v37 + 16, v35 | 7);
    *(void *)(v38 + 16) = a2;
    sub_100041608((uint64_t)v12, v38 + v36, type metadata accessor for ResetResponse);
    char v39 = (uint64_t *)(v38 + v37);
    uint64_t v20 = v45;
    *char v39 = isEscapingClosureAtFileLocation;
    v39[1] = v20;
    uint64_t v40 = swift_allocObject(&unk_10023AC88, 32LL, 7LL);
    *(void *)(v40 + 16) = sub_100176324;
    *(void *)(v40 + 24) = v38;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v47 = v40;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023ACA0;
    uint64_t v41 = _Block_copy(aBlock);
    uint64_t v42 = v47;
    id v43 = v33;
    swift_retain(v20);
    swift_retain(v40);
    swift_release(v42);
    [v34 performBlockAndWait:v41];
    _Block_release(v41);
    sub_1000415CC((uint64_t)v15, type metadata accessor for ResetResponse);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v40, "", 108LL, 2369LL, 45LL, 1LL);
    swift_release(v38);
    uint64_t result = swift_release(v40);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v20 = *v19;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v21, (uint64_t)qword_1002567D0);
  swift_errorRetain(v20);
  uint64_t v22 = swift_errorRetain(v20);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v26 = static os_log_type_t.error.getter(v15, v23, v24, v25);
  if (!os_log_type_enabled(v15, v26))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v28 = swift_slowAlloc(32LL, -1LL);
  aBlock[0] = v28;
  *(_DWORD *)uint64_t v27 = 136446210;
  uint64_t v48 = v20;
  swift_errorRetain(v20);
  uint64_t v29 = sub_100007578(&qword_100251D70);
  uint64_t v30 = String.init<A>(describing:)(&v48, v29);
  unint64_t v32 = v31;
  uint64_t v48 = sub_10017C4C4(v30, v31, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v27 + 4, v27 + 12);
  swift_bridgeObjectRelease(v32);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v15, v26, "reset failed: %{public}s", v27, 0xCu);
  swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v28, -1LL, -1LL);
  swift_slowDealloc(v27, -1LL, -1LL);
LABEL_9:

  swift_errorRetain(v20);
  ((void (*)(uint64_t))isEscapingClosureAtFileLocation)(v20);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_1000F3720(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000EA54C();
  [(id)swift_getObjCClassFromMetadata(*(void *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_darwinNotifier)) post:OTCliqueChanged];
  uint64_t v15 = type metadata accessor for ResetResponse(0LL);
  sub_10000FC68(a2 + *(int *)(v15 + 20), (uint64_t)v9, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    *(void *)uint64_t v14 = 0LL;
    *((void *)v14 + 1) = 0xE000000000000000LL;
    *((void *)v14 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v14 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v14 + 40) = xmmword_1001DE6F0;
    v14[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v9, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Changes);
  }

  sub_10013D540((uint64_t)v14, 0);
  sub_1000415CC((uint64_t)v14, type metadata accessor for Changes);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_100006BAC(v16, (uint64_t)qword_1002567D0);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "reset succeded", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  return a3(0LL);
}

uint64_t sub_1000F3B2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_100146B88( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "performCkserverUnreadableRemoval complete %{public}s",  0xD000000000000055LL,  0x80000001001F9D90LL);
}

uint64_t sub_1000F3B58(char a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v23[16] = a1;
  v23[17] = a2;
  v23[18] = a3;
  uint64_t v16 = sub_1000077B8( &qword_100252A48,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
  static Message.with(_:)(sub_1001731A4, v23, v12, v16);
  uint64_t v17 = *(void *)(a4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24);
  uint64_t v18 = *(void *)(a4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32);
  sub_1000084C4((void *)(a4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish), v17);
  uint64_t v19 = swift_allocObject(&unk_100239478, 32LL, 7LL);
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  uint64_t v20 = *(void *)(v18 + 16);
  uint64_t v21 = *(void (**)(_BYTE *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v20 + 144);
  swift_retain(a6);
  v21(v15, sub_1001731C4, v19, v17, v20);
  swift_release(v19);
  return sub_1000415CC((uint64_t)v15, type metadata accessor for RemoveUnreadableCKServerDataRequest);
}

uint64_t sub_1000F3CB0(_BYTE *a1, char a2, char a3, char a4)
{
  uint64_t v8 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AccountInfo(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (int *)((char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *a1 = a2;
  if ((a3 & 1) != 0)
  {
    if ((a4 & 1) != 0) {
      int v17 = 19;
    }
    else {
      int v17 = 17;
    }
    if ((a2 & 1) != 0)
    {
LABEL_6:
      int v18 = 4;
      goto LABEL_12;
    }
  }

  else
  {
    if ((a4 & 1) != 0) {
      int v17 = 18;
    }
    else {
      int v17 = 16;
    }
    if ((a2 & 1) != 0) {
      goto LABEL_6;
    }
  }

  int v18 = 0;
LABEL_12:
  uint64_t v19 = (uint64_t)&a1[*(int *)(type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL) + 28)];
  sub_10000FC68(v19, (uint64_t)v11, &qword_100251F50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    int *v16 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v11, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v11, (uint64_t)v16, type metadata accessor for AccountInfo);
  }

  int *v16 = v17 | v18;
  sub_100041590(v19, &qword_100251F50);
  sub_100041608((uint64_t)v16, v19, type metadata accessor for AccountInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v19, 0LL, 1LL, v12);
}

uint64_t sub_1000F3E68(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100251D60);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v36[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v7, (uint64_t *)&unk_100251D60);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    uint64_t v8 = *v7;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v9, (uint64_t)qword_1002567D0);
    swift_errorRetain(v8);
    uint64_t v10 = swift_errorRetain(v8);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v15 = static os_log_type_t.error.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v11, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v8;
      v36[0] = v17;
      *(_DWORD *)uint64_t v16 = 136446210;
      swift_errorRetain(v8);
      uint64_t v18 = sub_100007578(&qword_100251D70);
      uint64_t v19 = String.init<A>(describing:)(&v35, v18);
      uint64_t v21 = (_TtC18TrustedPeersHelper6Client *)v20;
      uint64_t v35 = sub_10017C4C4(v19, v20, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28, v35, SBYTE1(v35), v36[0], (id)v36[1]);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v15,  "performCkserverUnreadableRemoval failed: %{public}s",  v16,  0xCu);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v8);
    a2(v8);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_100006BAC(v29, (uint64_t)qword_1002567D0);
    unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "performCkserverUnreadableRemoval success", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    a2(0LL);
    return sub_100041590((uint64_t)v7, (uint64_t *)&unk_100251D60);
  }

uint64_t sub_1000F418C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_100146B88( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "localReset complete %{public}s",  0xD000000000000012LL,  0x80000001001F9D70LL);
}

uint64_t sub_1000F41B8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  id v12 = 0LL;
  unsigned int v5 = [v4 save:&v12];
  id v6 = v12;
  if (v5)
  {
    id v7 = v12;
    return a2(0LL);
  }

  else
  {
    id v9 = v12;
    uint64_t v10 = _convertNSErrorToError(_:)(v6);

    swift_willThrow(v11);
    swift_errorRetain(v10);
    a2(v10);
    swift_errorRelease();
    return swift_errorRelease();
  }

uint64_t sub_1000F42A4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a12) {
    os_log_type_t v20 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v20 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v21 = v20;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v22, (uint64_t)qword_1002567D0);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a12);
  swift_bridgeObjectRetain(a2);
  uint64_t v23 = swift_errorRetain(a12);
  int64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  if (os_log_type_enabled(v24, v21))
  {
    uint64_t v58 = a5;
    uint64_t v59 = a6;
    uint64_t v60 = a7;
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    uint64_t v26 = swift_slowAlloc(64LL, -1LL);
    unint64_t v65 = a2;
    v66[0] = v26;
    *(_DWORD *)uint64_t v25 = 136446466;
    uint64_t v64 = a1;
    swift_bridgeObjectRetain(a2);
    uint64_t v27 = sub_100007578((uint64_t *)&unk_100256C60);
    uint64_t v28 = String.init<A>(describing:)(&v64, v27);
    uint64_t v30 = (_TtC18TrustedPeersHelper6Client *)v29;
    uint64_t v64 = sub_10017C4C4(v28, v29, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
    *(_WORD *)(v25 + 12) = 2082;
    uint64_t v38 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a12)
    {
      uint64_t v64 = 0x203A726F727265LL;
      unint64_t v65 = 0xE700000000000000LL;
      uint64_t v63 = a12;
      swift_errorRetain(a12);
      swift_errorRetain(a12);
      uint64_t v39 = sub_100007578(&qword_100251D70);
      v40._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v63, v39);
      object = (_TtC18TrustedPeersHelper6Client *)v40._object;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(object, v42, v43, v44, v45, v46, v47, v48);
      swift_errorRelease();
      uint64_t v49 = v64;
      uint64_t v38 = (_TtC18TrustedPeersHelper6Client *)v65;
    }

    else
    {
      uint64_t v49 = 0x73736563637573LL;
    }

    uint64_t v64 = sub_10017C4C4(v49, (unint64_t)v38, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease(v38, v50, v51, v52, v53, v54, v55, v56);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v21,  "prepare complete peerID: %{public}s %{public}s",  (uint8_t *)v25,  0x16u);
    swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);

    a7 = v60;
    a5 = v58;
    a6 = v59;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD0000000000000F2LL, 0x80000001001F9C70LL);
  return a14(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1000F4604( void *a1, uint64_t a2, void (*a3)(void, void, void, void, void, void, void, void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, char *a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  uint64_t v22 = a3;
  if (!a1 || a2)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v24, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v25 = swift_errorRetain(a2);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.info.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v68 = v22;
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v29;
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v73 = a2;
      swift_errorRetain(a2);
      uint64_t v30 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v31 = String.init<A>(describing:)(&v73, v30);
      int64_t v33 = (_TtC18TrustedPeersHelper6Client *)v32;
      uint64_t v73 = sub_10017C4C4(v31, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v28 + 4, v28 + 12);
      id v34 = v33;
      uint64_t v22 = v68;
      swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to fetch policy: %{public}s", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);

      if (a5)
      {
LABEL_7:
        uint64_t v42 = a5;
LABEL_10:
        swift_errorRetain(a5);
        v22( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  v42);
        return swift_errorRelease();
      }
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (a5) {
        goto LABEL_7;
      }
    }

    unint64_t v43 = sub_100043F74();
    uint64_t v42 = swift_allocError(&type metadata for ContainerError, v43, 0LL, 0LL);
    *(_OWORD *)uint64_t v44 = xmmword_1001E6800;
    *(_BYTE *)(v44 + 16) = 13;
    goto LABEL_10;
  }

  id v49 = a1;
  id v50 = v49;
  if (a6)
  {
    id v51 = [v49 version];
    int64_t v52 = *(void **)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride];
    *(void *)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride] = v51;
  }

  id v67 = *(id *)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v53 = swift_allocObject(&unk_100239400, 152LL, 7LL);
  id v54 = v50;
  uint64_t v66 = v50;
  uint64_t v55 = v53;
  *(_DWORD *)(v53 + 16) = a8;
  *(void *)(v53 + 24) = a9;
  *(void *)(v53 + 32) = v54;
  *(void *)(v53 + 40) = a10;
  *(void *)(v53 + 48) = a11;
  *(void *)(v53 + 56) = a12;
  *(void *)(v53 + 64) = a13;
  *(void *)(v53 + 72) = a14;
  *(void *)(v53 + 80) = a15;
  *(void *)(v53 + 88) = a16;
  *(void *)(v53 + 96) = a17;
  *(void *)(v53 + 104) = a18;
  *(void *)(v53 + 112) = a19;
  *(void *)(v53 + 120) = a7;
  *(void *)(v53 + 128) = a20;
  *(void *)(v53 + 136) = a3;
  *(void *)(v53 + 144) = a4;
  uint64_t v56 = a4;
  uint64_t v57 = swift_allocObject(&unk_100239428, 32LL, 7LL);
  *(void *)(v57 + 16) = sub_1001730B8;
  *(void *)(v57 + 24) = v55;
  aBlock[4] = (uint64_t)sub_100176BD4;
  uint64_t v72 = v57;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000DC9F8;
  aBlock[3] = (uint64_t)&unk_100239440;
  uint64_t v58 = _Block_copy(aBlock);
  uint64_t v70 = v72;
  swift_bridgeObjectRetain(a16);
  swift_bridgeObjectRetain(a18);
  uint64_t v59 = a7;
  swift_retain(v56);
  id v60 = a20;
  id v61 = a19;
  id v62 = a9;
  swift_retain(v57);
  id v63 = v66;
  id v64 = a10;
  swift_bridgeObjectRetain(a11);
  id v65 = a12;
  swift_bridgeObjectRetain(a14);
  swift_release(v70);
  [v67 performBlockAndWait:v58];

  _Block_release(v58);
  LOBYTE(v63) = swift_isEscapingClosureAtFileLocation(v57, "", 108LL, 2681LL, 45LL, 1LL);
  swift_release(v55);
  uint64_t result = swift_release(v57);
  return result;
}

uint64_t sub_1000F4AA4( uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, id, uint64_t))
{
  unsigned int v127 = sub_1000DC624(a2, a1);
  id v18 = [a3 version];
  id v19 = [v18 versionNumber];

  if (qword_100250BB0 != -1) {
    swift_once(&qword_100250BB0, sub_10000FFE0);
  }
  id v20 = [(id)qword_100258268 versionNumber];
  if (a4)
  {
    id v21 = a4;
    id v22 = [v21 walrus];
    if (v22)
    {
      uint64_t v23 = v22;
      id v24 = [objc_allocWithZone(TPPBPeerStableInfoSetting) init];
      if (v24)
      {
        uint64_t v25 = v24;
        id v26 = v24;
        objc_msgSend(v26, "setValue:", objc_msgSend(v23, "enabled"));
      }

      else
      {
        uint64_t v25 = 0LL;
      }
    }

    else
    {
      uint64_t v25 = 0LL;
    }

    id v28 = [v21 webAccess];
    if (v28)
    {
      uint64_t v29 = v28;
      id v30 = [objc_allocWithZone(TPPBPeerStableInfoSetting) init];
      if (v30)
      {
        os_log_type_t v27 = v30;
        id v31 = v30;
        objc_msgSend(v31, "setValue:", objc_msgSend(v29, "enabled"));
      }

      else
      {
        os_log_type_t v27 = 0LL;
      }
    }

    else
    {
      os_log_type_t v27 = 0LL;
      uint64_t v29 = v21;
    }
  }

  else
  {
    os_log_type_t v27 = 0LL;
    uint64_t v25 = 0LL;
  }

  if (v19 >= v20)
  {
    id v136 = (id)qword_100258268;
    id v138 = [a3 version];
  }

  else
  {
    id v136 = [a3 version];
    id v138 = 0LL;
  }

  id v32 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a12);
  id v33 = a13;
  swift_bridgeObjectRetain(a5);
  id v123 = a6;
  id v34 = v25;
  id v35 = v27;
  uint64_t v36 = swift_bridgeObjectRetain(a8);
  id v37 = sub_10016AD4C( 1LL,  (uint64_t)v136,  (uint64_t)v138,  a5,  v127,  (uint64_t)a6,  (uint64_t)v25,  (uint64_t)v27,  a7,  v36,  a9,  a10,  a11,  a12,  (uint64_t)v33,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0);

  id v137 = v34;
  unint64_t v122 = v35;

  uint64_t v38 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v39 = *(id *)(a14 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  NSString v40 = [a2 peerID];
  if (!v40)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v42 = v41;
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
  }

  [v39 setEgoPeerID:v40];

  id v43 = *(id *)(a14 + v38);
  id v44 = [a2 data];
  uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
  unint64_t v47 = v46;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v45, v47);
  [v43 setEgoPeerPermanentInfo:isa];

  id v49 = *(id *)(a14 + v38);
  id v50 = [a2 sig];
  uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
  unint64_t v53 = v52;

  Class v54 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v51, v53);
  [v49 setEgoPeerPermanentInfoSig:v54];

  id v55 = *(id *)(a14 + v38);
  id v56 = [v37 data];
  uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
  unint64_t v59 = v58;

  Class v60 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v57, v59);
  [v55 setEgoPeerStableInfo:v60];

  id v61 = *(id *)(a14 + v38);
  id v62 = [v37 sig];
  uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v62);
  unint64_t v65 = v64;

  Class v66 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v63, v65);
  [v61 setEgoPeerStableInfoSig:v66];

  uint64_t v67 = type metadata accessor for BottleMO();
  uint64_t v139 = *(void **)(a14 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  uint64_t v68 = v37;
  id v69 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v67)) initWithContext:v139];
  uint64_t v71 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_peerID + 8);
  swift_bridgeObjectRetain(v71);
  NSString v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v71);
  [v69 setPeerID:v72];

  uint64_t v73 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_bottleID + 8);
  swift_bridgeObjectRetain(v73);
  NSString v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v73);
  [v69 setBottleID:v74];

  uint64_t v75 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_escrowSigningSPKI);
  unint64_t v76 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_escrowSigningSPKI + 8);
  sub_1000084E8( *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_escrowSigningSPKI),  *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_escrowSigningSPKI + 8));
  Class v77 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v75, v76);
  [v69 setEscrowedSigningSPKI:v77];

  uint64_t v78 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingEscrowKey);
  unint64_t v79 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingEscrowKey + 8);
  sub_1000084E8( *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingEscrowKey),  *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingEscrowKey + 8));
  Class v80 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v78, v79);
  [v69 setSignatureUsingEscrowKey:v80];

  uint64_t v81 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingPeerKey);
  unint64_t v82 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingPeerKey + 8);
  sub_1000084E8( *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingPeerKey),  *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_signatureUsingPeerKey + 8));
  Class v83 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v81, v82);
  [v69 setSignatureUsingPeerKey:v83];

  uint64_t v84 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_contents);
  unint64_t v85 = *(void *)(a15 + OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_contents + 8);
  sub_1000084E8(v84, v85);
  Class v86 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v84, v85);
  [v69 setContents:v86];

  [*(id *)(a14 + v38) addBottlesObject:v69];
  id v87 = [a2 modelID];
  LODWORD(v86) = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
  uint64_t v89 = v88;

  id v90 = sub_10011F6F8((int)v86, v89, v68);
  swift_bridgeObjectRelease(v89);
  id v143 = 0LL;
  unsigned int v91 = [v139 save:&v143];
  id v92 = v143;
  if (v91)
  {
    id v93 = v143;
    id v94 = [a2 peerID];
    uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    uint64_t v140 = v95;

    id v96 = [a2 data];
    uint64_t v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
    unint64_t v131 = v98;

    id v99 = [a2 sig];
    uint64_t v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v99);
    unint64_t v128 = v100;

    id v101 = [v68 data];
    uint64_t v126 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v101);
    unint64_t v103 = v102;

    id v104 = [v68 sig];
    uint64_t v105 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v104);
    unint64_t v107 = v106;

    id v124 = v90;
    a16(v133, v140, v97, v131, v135, v128, v126, v103, v105, v107, v90, 0LL);

    sub_10000852C(v105, v107);
    sub_10000852C(v126, v103);
    sub_10000852C(v135, v128);
    sub_10000852C(v97, v131);

    return swift_bridgeObjectRelease(v140);
  }

  else
  {
    id v109 = v143;
    uint64_t v110 = _convertNSErrorToError(_:)(v92);

    swift_willThrow(v111);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v112 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v112, (uint64_t)qword_1002567D0);
    swift_errorRetain(v110);
    uint64_t v113 = swift_errorRetain(v110);
    char v114 = (os_log_s *)Logger.logObject.getter(v113);
    os_log_type_t v115 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v114, v115))
    {
      uint64_t v116 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v117 = (void *)swift_slowAlloc(32LL, -1LL);
      id v143 = v117;
      *(_DWORD *)uint64_t v116 = 136446210;
      uint64_t v141 = v110;
      swift_errorRetain(v110);
      uint64_t v118 = sub_100007578(&qword_100251D70);
      uint64_t v119 = String.init<A>(describing:)(&v141, v118);
      unint64_t v121 = v120;
      uint64_t v141 = sub_10017C4C4(v119, v120, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v116 + 4, v116 + 12);
      swift_bridgeObjectRelease(v121);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "Unable to save identity: %{public}s", v116, 0xCu);
      swift_arrayDestroy(v117, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1LL, -1LL);
      swift_slowDealloc(v116, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v110);
    a16( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  v110);
    swift_errorRelease();
    return swift_errorRelease();
  }

uint64_t sub_1000F56FC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a15) {
    os_log_type_t v23 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v23 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v24 = v23;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v25, (uint64_t)qword_1002567D0);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a15);
  swift_bridgeObjectRetain(a2);
  uint64_t v26 = swift_errorRetain(a15);
  os_log_type_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  if (os_log_type_enabled(v27, v24))
  {
    uint64_t v61 = a5;
    uint64_t v62 = a6;
    uint64_t v63 = a7;
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    unint64_t v68 = a2;
    v69[0] = v29;
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v67 = a1;
    swift_bridgeObjectRetain(a2);
    uint64_t v30 = sub_100007578((uint64_t *)&unk_100256C60);
    uint64_t v31 = String.init<A>(describing:)(&v67, v30);
    id v33 = (_TtC18TrustedPeersHelper6Client *)v32;
    uint64_t v67 = sub_10017C4C4(v31, v32, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v41 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a15)
    {
      uint64_t v67 = 0x203A726F727265LL;
      unint64_t v68 = 0xE700000000000000LL;
      uint64_t v66 = a15;
      swift_errorRetain(a15);
      swift_errorRetain(a15);
      uint64_t v42 = sub_100007578(&qword_100251D70);
      v43._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v66, v42);
      object = (_TtC18TrustedPeersHelper6Client *)v43._object;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(object, v45, v46, v47, v48, v49, v50, v51);
      swift_errorRelease();
      uint64_t v52 = v67;
      uint64_t v41 = (_TtC18TrustedPeersHelper6Client *)v68;
    }

    else
    {
      uint64_t v52 = 0x73736563637573LL;
    }

    uint64_t v67 = sub_10017C4C4(v52, (unint64_t)v41, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v41, v53, v54, v55, v56, v57, v58, v59);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v24,  "prepareInheritancePeer complete peerID: %{public}s %{public}s",  (uint8_t *)v28,  0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);

    a7 = v63;
    a5 = v61;
    a6 = v62;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD0000000000000FDLL, 0x80000001001F9B70LL);
  return a17(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_1000F5A8C( uint64_t a1, void (*a2)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t), uint64_t a3, void *a4, _TtC18TrustedPeersHelper6Client *a5, void *a6, _TtC18TrustedPeersHelper6Client *a7, _TtC18TrustedPeersHelper6Client *a8, void *a9, void *a10, int a11, _TtC18TrustedPeersHelper6Client *a12, void *a13, uint64_t a14, _TtC18TrustedPeersHelper6Client *a15, uint64_t a16, _TtC18TrustedPeersHelper6Client *a17, uint64_t a18, _TtC18TrustedPeersHelper6Client *a19)
{
  BOOL v406 = a7;
  SEL v407 = a8;
  BOOL v405 = a6;
  id v408 = a4;
  os_log_type_t v23 = (_TtC18TrustedPeersHelper6Client *)type metadata accessor for Date(0LL);
  os_log_type_t v24 = *(void (***)(id, _TtC18TrustedPeersHelper6Client *))v23[-1].containerMap;
  __chkstk_darwin(v23, v25);
  os_log_type_t v27 = (_TtC18TrustedPeersHelper6Client *)((char *)&v376 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v28 = sub_100007578(&qword_100251818);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (char *)&v376 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v34);
  int64_t v36 = (char *)&v376 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v409 = a3;
  if (a1)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v37, (uint64_t)qword_1002567D0);
    swift_errorRetain(a1);
    uint64_t v38 = swift_errorRetain(a1);
    BOOL v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v43 = static os_log_type_t.error.getter(v39, v40, v41, v42);
    if (os_log_type_enabled(v39, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v410 = v45;
      *(_DWORD *)id v44 = 136446210;
      uint64_t v412 = a1;
      swift_errorRetain(a1);
      uint64_t v46 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v47 = String.init<A>(describing:)(&v412, v46);
      id v49 = (_TtC18TrustedPeersHelper6Client *)v48;
      uint64_t v412 = sub_10017C4C4(v47, v48, (uint64_t *)&v410);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v43,  "prepareInheritancePeer unable to fetch changes: %{public}s",  v44,  0xCu);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return ((uint64_t (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))a2)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  a1);
  }

  BOOL v399 = v23;
  SEL v400 = v27;
  BOOL v398 = v24;
  BOOL v58 = v407;
  id v57 = v408;
  id v401 = a5;
  int64_t v402 = v36;
  id v403 = a2;
  id v59 = [v408 uuid];
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
  uint64_t v404 = v32;
  uint64_t v62 = v61;

  UUID.init(uuidString:)(v60, v62);
  uint64_t v63 = v404;
  swift_bridgeObjectRelease(v62, v64, v65, v66, v67, v68, v69, v70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v63) == 1)
  {
    sub_100041590((uint64_t)v31, &qword_100251818);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v71 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v71, (uint64_t)qword_1002567D0);
    id v72 = v57;
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.info.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v410 = v76;
      *(_DWORD *)uint64_t v75 = 136446210;
      id v77 = [v72 uuid];
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      Class v80 = v79;

      uint64_t v412 = sub_10017C4C4(v78, (unint64_t)v80, (uint64_t *)&v410);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v75 + 4, v75 + 12);

      swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Unable to parse uuid: %{public}s", v75, 0xCu);
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v113 = v403;
    unint64_t v114 = sub_100043F74();
    uint64_t v115 = swift_allocError(&type metadata for ContainerError, v114, 0LL, 0LL);
    *(_OWORD *)uint64_t v116 = xmmword_1001DE9E0;
    *(_BYTE *)(v116 + 16) = 13;
    v113( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v115);
    return swift_errorRelease();
  }

  uint64_t v397 = v33;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v402, v31, v63);
  uint64_t v89 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v90 = v401;
  id v91 = *(id *)&v401->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v93 = [v91 findCustodianRecoveryKeyWithUUID:isa];

  if (!v93)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v117 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v117, (uint64_t)qword_1002567D0);
    id v118 = v57;
    uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
    os_log_type_t v120 = static os_log_type_t.info.getter(v119);
    BOOL v121 = os_log_type_enabled(v119, v120);
    uint64_t v112 = v404;
    if (v121)
    {
      unint64_t v122 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v123 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v410 = v123;
      *(_DWORD *)unint64_t v122 = 136446210;
      id v124 = [v118 uuid];
      uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
      unsigned int v127 = v126;

      uint64_t v412 = sub_10017C4C4(v125, (unint64_t)v127, (uint64_t *)&v410);
      uint64_t v112 = v404;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v122 + 4, v122 + 12);

      swift_bridgeObjectRelease(v127, v128, v129, v130, v131, v132, v133, v134);
      _os_log_impl( (void *)&_mh_execute_header,  v119,  v120,  "Unable to find custodian recovery key %{public}s on model",  v122,  0xCu);
      swift_arrayDestroy(v123, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v123, -1LL, -1LL);
      swift_slowDealloc(v122, -1LL, -1LL);
    }

    else
    {
    }

    os_log_type_t v157 = v403;
    unint64_t v158 = sub_100043F74();
    uint64_t v159 = swift_allocError(&type metadata for ContainerError, v158, 0LL, 0LL);
    *(_OWORD *)uint64_t v160 = xmmword_1001DE9E0;
    *(_BYTE *)(v160 + 16) = 13;
    v157( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v159);
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v397 + 8))(v402, v112);
  }

  id v94 = *(void **)&v90->_TtCs12_SwiftObject_opaque[v89];
  *(void *)&__int128 v410 = 0LL;
  unsigned int v95 = [v94 isCustodianRecoveryKeyTrusted:v93 error:&v410];
  uint64_t v96 = v410;
  if ((void)v410)
  {
    id v97 = (id)v410;
    swift_willThrow(v97);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v98 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v98, (uint64_t)qword_1002567D0);
    id v99 = v97;
    unint64_t v100 = (os_log_s *)Logger.logObject.getter(v99);
    os_log_type_t v104 = static os_log_type_t.error.getter(v100, v101, v102, v103);
    if (os_log_type_enabled(v100, v104))
    {
      uint64_t v105 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v106 = swift_slowAlloc(8LL, -1LL);
      id v408 = v93;
      unint64_t v107 = (void *)v106;
      *(_DWORD *)uint64_t v105 = 138543362;
      id v108 = v99;
      uint64_t v109 = _swift_stdlib_bridgeErrorToNSError(v108);
      *(void *)&__int128 v410 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v410, (char *)&v410 + 8, v105 + 4, v105 + 12);
      *unint64_t v107 = v109;

      _os_log_impl( (void *)&_mh_execute_header,  v100,  v104,  "Error determining whether Custodian Recovery Key is trusted: %{public}@",  v105,  0xCu);
      uint64_t v110 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v107, 1LL, v110);
      uint64_t v111 = v107;
      id v93 = v408;
      uint64_t v112 = v404;
      swift_slowDealloc(v111, -1LL, -1LL);
      swift_slowDealloc(v105, -1LL, -1LL);
    }

    else
    {

      unint64_t v100 = (os_log_s *)v99;
      uint64_t v112 = v404;
    }

    id v156 = v99;
    v403( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v96);

    return (*(uint64_t (**)(char *, uint64_t))(v397 + 8))(v402, v112);
  }

  if (!v95)
  {
    uint64_t v161 = v403;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v162 = type metadata accessor for Logger(0LL);
    uint64_t v163 = sub_100006BAC(v162, (uint64_t)qword_1002567D0);
    os_log_type_t v164 = (os_log_s *)Logger.logObject.getter(v163);
    os_log_type_t v165 = static os_log_type_t.info.getter(v164);
    BOOL v166 = os_log_type_enabled(v164, v165);
    uint64_t v112 = v404;
    if (v166)
    {
      uint64_t v167 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v167 = 0;
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "Custodian Recovery Key is not trusted", v167, 2u);
      swift_slowDealloc(v167, -1LL, -1LL);
    }

    unint64_t v168 = sub_100043F74();
    uint64_t v169 = swift_allocError(&type metadata for ContainerError, v168, 0LL, 0LL);
    *(_OWORD *)uint64_t v170 = xmmword_1001DE9F0;
    *(_BYTE *)(v170 + 16) = 13;
    v161( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v169);
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v397 + 8))(v402, v112);
  }

  id v135 = [v57 recoveryString];
  id v136 = v403;
  if (v135)
  {
    id v137 = v135;
    uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
    uint64_t v140 = v139;

    id v141 = [v57 salt];
    if (v141)
    {
      id v149 = v141;
      uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
      uint64_t v152 = v151;

      uint64_t v153 = type metadata accessor for CustodianRecoveryKey();
      swift_allocObject(v153, 32LL, 7LL);
      id v154 = v93;
      uint64_t v155 = (void *)sub_100008A9C(v154, v138, (unint64_t)v140, v150, v152);
      uint64_t v179 = v155[2];
      uint64_t v180 = *(void **)(v179 + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey);
      id v408 = v155;
      uint64_t v181 = *(void **)(v179 + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey);
      uint64_t v182 = qword_100250EB8;
      id v183 = v180;
      id v184 = v181;
      int64_t v395 = (_TtC18TrustedPeersHelper6Client *)v183;
      uint64_t v185 = (_TtC18TrustedPeersHelper6Client *)v184;
      int v186 = v408;
      id v394 = v185;
      swift_retain(v408);
      if (v182 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      id v396 = a9;
      uint64_t v187 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v187, (uint64_t)qword_1002567D0);
      uint64_t v188 = swift_retain_n(v186, 2LL);
      char v189 = (void *)Logger.logObject.getter(v188);
      os_log_type_t v190 = static os_log_type_t.info.getter(v189);
      int v191 = v190;
      if (os_log_type_enabled((os_log_t)v189, v190))
      {
        *(void *)&__int128 v392 = v189;
        LODWORD(v393) = v191;
        uint64_t v192 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v391 = (id)swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v410 = v391;
        *(_DWORD *)uint64_t v192 = 136446210;
        BOOL v390 = (_TtC18TrustedPeersHelper6Client *)(v192 + 12);
        id v389 = v192 + 4;
        id v193 =  [*(id *)(v186[2] + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey) publicKey];
        id v194 = [v193 keyData];

        uint64_t v195 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v194);
        unint64_t v197 = v196;

        Swift::String v198 = Data.base64EncodedString(options:)(0LL);
        uint64_t v199 = v195;
        int v186 = v408;
        sub_10000852C(v199, v197);
        uint64_t v412 = sub_10017C4C4(v198._countAndFlagsBits, (unint64_t)v198._object, (uint64_t *)&v410);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v389, v390);
        swift_release_n(v186, 2LL);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v198._object,  v200,  v201,  v202,  v203,  v204,  v205,  v206);
        BOOL v207 = (void *)v392;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v392,  (os_log_type_t)v393,  "prepareInheritancePeer signingPubKey: %{public}s",  v192,  0xCu);
        id v208 = v391;
        swift_arrayDestroy(v391, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v208, -1LL, -1LL);
        swift_slowDealloc(v192, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v186, 2LL);
      }

      uint64_t v209 = swift_retain_n(v186, 2LL);
      id v210 = (os_log_s *)Logger.logObject.getter(v209);
      os_log_type_t v211 = static os_log_type_t.info.getter(v210);
      int v212 = v211;
      if (os_log_type_enabled(v210, v211))
      {
        uint64_t v213 = swift_slowAlloc(12LL, -1LL);
        LODWORD(v392) = v212;
        uint64_t v214 = (uint8_t *)v213;
        id v393 = (id)swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v410 = v393;
        *(_DWORD *)uint64_t v214 = 136446210;
        id v391 = v214 + 12;
        BOOL v390 = (_TtC18TrustedPeersHelper6Client *)(v214 + 4);
        os_log_type_t v215 = v186;
        id v216 =  [*(id *)(v186[2] + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey) publicKey];
        id v217 = [v216 keyData];

        uint64_t v218 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v217);
        unint64_t v220 = v219;

        Swift::String v221 = Data.base64EncodedString(options:)(0LL);
        sub_10000852C(v218, v220);
        uint64_t v412 = sub_10017C4C4(v221._countAndFlagsBits, (unint64_t)v221._object, (uint64_t *)&v410);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v390, v391);
        swift_release_n(v215, 2LL);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v221._object,  v222,  v223,  v224,  v225,  v226,  v227,  v228);
        _os_log_impl( (void *)&_mh_execute_header,  v210,  (os_log_type_t)v392,  "prepareInheritancePeer encryptionPubKey: %{public}s",  v214,  0xCu);
        id v229 = v393;
        swift_arrayDestroy(v393, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v229, -1LL, -1LL);
        swift_slowDealloc(v214, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v186, 2LL);
      }

      uint64_t v230 = v409;
      v231 = v400;
      sub_100007620(0LL, &qword_100256EC8, &OBJC_CLASS___TPPeerPermanentInfo_ptr);
      uint64_t v232 = v395;
      SEL v400 = v394;
      swift_bridgeObjectRetain(v406);
      uint64_t v233 = swift_bridgeObjectRetain(v396);
      uint64_t v234 = Date.init()(v233);
      double v235 = Date.timeIntervalSince1970.getter(v234);
      v398[1](v231, v399);
      double v236 = v235 * 1000.0;
      if ((~COERCE__INT64(v235 * 1000.0) & 0x7FF0000000000000LL) != 0)
      {
        if (v236 > -1.0)
        {
          uint64_t v237 = (uint64_t)v58;
          id v238 = v400;
          if (v236 < 1.84467441e19)
          {
            id v239 = sub_100166CB4( (uint64_t)v405,  (uint64_t)v406,  v237,  (uint64_t)v396,  1LL,  (uint64_t)v232,  (uint64_t)v400,  (unint64_t)v236,  1LL);
            id v393 = v154;
            uint64_t v385 = a18;
            uint64_t v386 = a16;
            BOOL v406 = a15;
            uint64_t v387 = a14;
            BOOL v405 = a13;
            int v388 = a11;

            id v396 = v239;
            id v240 = [v396 peerID];
            v241 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v240);
            uint64_t v242 = v232;
            uint64_t v244 = v243;

            strcpy((char *)&v410, "signing-key ");
            BYTE13(v410) = 0;
            HIWORD(v410) = -5120;
            id v383 = v241;
            v245._uint64_t countAndFlagsBits = (uint64_t)v241;
            int64_t v395 = v244;
            v245._object = v244;
            String.append(_:)(v245);
            uint64_t v246 = *((void *)&v410 + 1);
            id v247 = (void *)objc_opt_self(&OBJC_CLASS____SFKeychainManager);
            BOOL v399 = a17;
            swift_bridgeObjectRetain(a17);
            SEL v407 = a19;
            swift_bridgeObjectRetain(a19);
            id v248 = v242;
            swift_retain(v230);
            id v389 = a10;
            BOOL v398 = a10;
            id v394 = v401;
            id v401 = a12;
            swift_bridgeObjectRetain(a12);
            uint64_t v249 = v405;
            swift_bridgeObjectRetain(v406);
            *(void *)&__int128 v382 = v247;
            id v250 = [v247 defaultManager];
            id v251 = [objc_allocWithZone(_SFIdentity) initWithKeyPair:v248];
            SFAccessibilityMakeWithMode(&v410, 1LL);
            __int128 v392 = v410;
            uint64_t v252 = v411;
            id v253 = objc_allocWithZone(&OBJC_CLASS____SFAccessPolicy);
            __int128 v410 = v392;
            uint64_t v411 = v252;
            id v254 = [v253 initWithAccessibility:&v410 sharingPolicy:0];
            NSString v255 = String._bridgeToObjectiveC()();
            [v254 setAccessGroup:v255];

            *(void *)&__int128 v392 = v246;
            NSString v256 = String._bridgeToObjectiveC()();
            *(void *)&__int128 v410 = 0LL;
            id v257 = v250;
            id v384 = v251;
            LOBYTE(v255) = [v250 setIdentity:v251 forIdentifier:v256 accessPolicy:v254 error:&v410];

            uint64_t v258 = (void *)v410;
            id v391 = v249;
            BOOL v390 = v248;
            if ((v255 & 1) != 0)
            {
              id v379 = v257;
              *(void *)&__int128 v410 = 0x6974707972636E65LL;
              *((void *)&v410 + 1) = 0xEF2079656B2D6E6FLL;
              v259._uint64_t countAndFlagsBits = (uint64_t)v383;
              v259._object = v395;
              String.append(_:)(v259);
              uint64_t v260 = *((void *)&v410 + 1);
              uint64_t v380 = v248;
              swift_retain(v408);
              id v383 = v396;
              uint64_t v261 = v409;
              swift_retain(v409);
              id v377 = v398;
              v381 = v394;
              swift_bridgeObjectRetain(v401);
              id v378 = v249;
              swift_bridgeObjectRetain(v406);
              swift_bridgeObjectRetain(v399);
              swift_bridgeObjectRetain(v407);
              id v262 = v258;
              id v263 = [(id)v382 defaultManager];
              id v264 = objc_allocWithZone(&OBJC_CLASS____SFIdentity);
              id v265 = [v264 initWithKeyPair:v400];
              SFAccessibilityMakeWithMode(&v410, 1LL);
              __int128 v382 = v410;
              uint64_t v266 = v411;
              id v267 = objc_allocWithZone(&OBJC_CLASS____SFAccessPolicy);
              __int128 v410 = v382;
              uint64_t v411 = v266;
              id v268 = [v267 initWithAccessibility:&v410 sharingPolicy:0];
              NSString v269 = String._bridgeToObjectiveC()();
              [v268 setAccessGroup:v269];

              *(void *)&__int128 v382 = v260;
              NSString v270 = String._bridgeToObjectiveC()();
              *(void *)&__int128 v410 = 0LL;
              LODWORD(v260) = [v263 setIdentity:v265 forIdentifier:v270 accessPolicy:v268 error:&v410];

              uint64_t v271 = v410;
              unint64_t v272 = v254;
              if ((_DWORD)v260)
              {
                id v273 = (id)v410;
                id v274 = v408;
                id v275 = v406;
                int64_t v276 = v401;
                sub_1000F7EE8( 1,  0LL,  v403,  v261,  v389,  v381,  v388,  v383,  (uint64_t)v401,  v405,  v387,  (uint64_t)v406,  v386,  (uint64_t)v399,  v385,  (uint64_t)v407,  v380,  (uint64_t)v408);

                swift_release(v261);
              }

              else
              {
                id v291 = (id)v410;
                uint64_t v292 = _convertNSErrorToError(_:)(v271);

                swift_willThrow(v293);
                swift_errorRetain(v292);
                id v294 = v408;
                id v275 = v406;
                id v295 = v401;
                sub_1000F7EE8( 0,  v292,  v403,  v261,  v389,  v381,  v388,  v383,  (uint64_t)v401,  v405,  v387,  (uint64_t)v406,  v386,  (uint64_t)v399,  v385,  (uint64_t)v407,  v380,  (uint64_t)v408);

                swift_errorRelease();
                int64_t v276 = v295;
                swift_errorRelease();

                swift_release(v261);
                id v274 = v294;
              }

              v285 = v400;

              swift_release(v261);
              swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v382,  v296,  v297,  v298,  v299,  v300,  v301,  v302);
              swift_release(v274);

              swift_bridgeObjectRelease(v407, v303, v304, v305, v306, v307, v308, v309);
              BOOL v280 = v399;
              swift_bridgeObjectRelease(v399, v310, v311, v312, v313, v314, v315, v316);
              swift_bridgeObjectRelease(v275, v317, v318, v319, v320, v321, v322, v323);

              swift_bridgeObjectRelease(v276, v324, v325, v326, v327, v328, v329, v330);
              uint64_t v289 = v404;
              BOOL v290 = v396;
              uint64_t v286 = v395;
              uint64_t v288 = v394;
            }

            else
            {
              id v277 = (id)v410;
              uint64_t v278 = _convertNSErrorToError(_:)(v258);

              swift_willThrow(v279);
              swift_errorRetain(v278);
              id v274 = v408;
              int64_t v375 = v248;
              BOOL v280 = v399;
              id v281 = v406;
              id v374 = v405;
              id v282 = v396;
              BOOL v405 = v254;
              uint64_t v283 = v394;
              uint64_t v284 = v409;
              v285 = v400;
              v414._uint64_t countAndFlagsBits = (uint64_t)v383;
              uint64_t v286 = v395;
              v414._object = v395;
              sub_1000F78B8( 0,  v278,  v403,  v409,  (uint64_t)v400,  v414,  v389,  v394,  v388,  v396,  v401,  v374,  v387,  v406,  v386,  v399,  v385,  v407,  v375,  (uint64_t)v408);

              swift_errorRelease();
              id v275 = v281;
              swift_errorRelease();

              uint64_t v287 = v284;
              uint64_t v288 = v283;
              swift_release(v287);
              uint64_t v289 = v404;
              BOOL v290 = v282;
              int64_t v276 = v401;
            }

            swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v392, v331, v332, v333, v334, v335, v336, v337);
            swift_release_n(v274, 2LL);
            id v338 = v390;

            swift_bridgeObjectRelease(v407, v339, v340, v341, v342, v343, v344, v345);
            swift_bridgeObjectRelease(v280, v346, v347, v348, v349, v350, v351, v352);
            swift_bridgeObjectRelease(v275, v353, v354, v355, v356, v357, v358, v359);

            swift_bridgeObjectRelease(v276, v360, v361, v362, v363, v364, v365, v366);
            swift_bridgeObjectRelease(v286, v367, v368, v369, v370, v371, v372, v373);
            return (*(uint64_t (**)(char *, uint64_t))(v397 + 8))(v402, v289);
          }

LABEL_65:
          __break(1u);
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      goto LABEL_65;
    }

    swift_bridgeObjectRelease(v140, v142, v143, v144, v145, v146, v147, v148);
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v171 = type metadata accessor for Logger(0LL);
  uint64_t v172 = sub_100006BAC(v171, (uint64_t)qword_1002567D0);
  unint64_t v173 = (os_log_s *)Logger.logObject.getter(v172);
  os_log_type_t v174 = static os_log_type_t.info.getter(v173);
  if (os_log_type_enabled(v173, v174))
  {
    uint64_t v175 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v175 = 0;
    _os_log_impl((void *)&_mh_execute_header, v173, v174, "Bad format CRK: recovery string or salt not set", v175, 2u);
    swift_slowDealloc(v175, -1LL, -1LL);
  }

  unint64_t v176 = sub_100043F74();
  uint64_t v177 = swift_allocError(&type metadata for ContainerError, v176, 0LL, 0LL);
  *(_OWORD *)uint64_t v178 = xmmword_1001DEA10;
  *(_BYTE *)(v178 + 16) = 13;
  v136( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v177);
  swift_errorRelease();

  return (*(uint64_t (**)(char *, uint64_t))(v397 + 8))(v402, v404);
}

void sub_1000F78B8( char a1, uint64_t a2, void (*a3)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t), uint64_t a4, uint64_t a5, Swift::String a6, void *a7, void *a8, int a9, void *a10, _TtC18TrustedPeersHelper6Client *a11, void *a12, uint64_t a13, _TtC18TrustedPeersHelper6Client *a14, uint64_t a15, _TtC18TrustedPeersHelper6Client *a16, uint64_t a17, _TtC18TrustedPeersHelper6Client *a18, void *a19, uint64_t a20)
{
  id v20 = a3;
  if ((a1 & 1) != 0)
  {
    *(void *)&__int128 v114 = 0x6974707972636E65LL;
    *((void *)&v114 + 1) = 0xEF2079656B2D6E6FLL;
    String.append(_:)(a6);
    id v22 = (void *)objc_opt_self(&OBJC_CLASS____SFKeychainManager);
    swift_bridgeObjectRetain(a16);
    swift_bridgeObjectRetain(a18);
    swift_retain(a20);
    id v110 = a19;
    uint64_t v23 = a4;
    id v24 = a10;
    swift_retain(v23);
    id v109 = a7;
    id v25 = a8;
    swift_bridgeObjectRetain(a11);
    id v26 = a12;
    swift_bridgeObjectRetain(a14);
    id v27 = [v22 defaultManager];
    id v28 = [objc_allocWithZone(_SFIdentity) initWithKeyPair:a5];
    SFAccessibilityMakeWithMode(&v114, 1LL);
    __int128 v107 = v114;
    uint64_t v29 = v115;
    id v30 = objc_allocWithZone(&OBJC_CLASS____SFAccessPolicy);
    __int128 v114 = v107;
    uint64_t v115 = v29;
    id v31 = [v30 initWithAccessibility:&v114 sharingPolicy:0];
    NSString v32 = String._bridgeToObjectiveC()();
    [v31 setAccessGroup:v32];

    NSString v33 = String._bridgeToObjectiveC()();
    *(void *)&__int128 v114 = 0LL;
    LODWORD(v32) = [v27 setIdentity:v28 forIdentifier:v33 accessPolicy:v31 error:&v114];

    uint64_t v34 = v114;
    if ((_DWORD)v32)
    {
      id v35 = (id)v114;
      int64_t v36 = a11;
      uint64_t v38 = a18;
      uint64_t v37 = a16;
      sub_1000F7EE8( 1,  0LL,  a3,  v23,  a7,  v25,  a9,  v24,  (uint64_t)a11,  a12,  a13,  (uint64_t)a14,  a15,  (uint64_t)a16,  a17,  (uint64_t)a18,  v110,  a20);

      swift_release(v23);
    }

    else
    {
      id v68 = (id)v114;
      id v108 = v26;
      BOOL v69 = v25;
      BOOL v70 = v24;
      uint64_t v71 = v23;
      uint64_t v72 = _convertNSErrorToError(_:)(v34);

      swift_willThrow(v73);
      swift_errorRetain(v72);
      int64_t v36 = a11;
      uint64_t v38 = a18;
      uint64_t v37 = a16;
      sub_1000F7EE8( 0,  v72,  a3,  v71,  a7,  v69,  a9,  v70,  (uint64_t)a11,  a12,  a13,  (uint64_t)a14,  a15,  (uint64_t)a16,  a17,  (uint64_t)a18,  v110,  a20);

      swift_errorRelease();
      swift_errorRelease();

      uint64_t v74 = v71;
      id v24 = v70;
      id v25 = v69;
      id v26 = v108;
      swift_release(v74);
    }

    swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0xEF2079656B2D6E6FLL,  v39,  v40,  v41,  v42,  v43,  v44,  v45);
    swift_release(a20);

    swift_bridgeObjectRelease(v38, v75, v76, v77, v78, v79, v80, v81);
    swift_bridgeObjectRelease(v37, v82, v83, v84, v85, v86, v87, v88);
    swift_bridgeObjectRelease(a14, v89, v90, v91, v92, v93, v94, v95);

    swift_bridgeObjectRelease(v36, v96, v97, v98, v99, v100, v101, v102);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v47, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v48 = swift_errorRetain(a2);
    id v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v53 = static os_log_type_t.error.getter(v49, v50, v51, v52);
    if (os_log_type_enabled(v49, v53))
    {
      id v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v112 = v20;
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v114 = v55;
      *(_DWORD *)id v54 = 136446210;
      uint64_t v116 = a2;
      swift_errorRetain(a2);
      uint64_t v56 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v57 = String.init<A>(describing:)(&v116, v56);
      id v59 = (_TtC18TrustedPeersHelper6Client *)v58;
      uint64_t v116 = sub_10017C4C4(v57, v58, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v53, "Unable to save signing key: %{public}s", v54, 0xCu);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v67 = v55;
      id v20 = v112;
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v103 = a2;
    if (!a2)
    {
      unint64_t v104 = sub_100043F74();
      uint64_t v103 = swift_allocError(&type metadata for ContainerError, v104, 0LL, 0LL);
      *(_OWORD *)uint64_t v105 = xmmword_1001E6810;
      *(_BYTE *)(v105 + 16) = 13;
    }

    swift_errorRetain(a2);
    v20( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v103);
    swift_errorRelease();
  }

void sub_1000F7EE8( char a1, uint64_t a2, void (*a3)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t), uint64_t a4, void *a5, void *a6, int a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if ((a1 & 1) != 0)
  {
    if (a5)
    {
      id v74 = a5;
    }

    else
    {
      if (qword_100250BA8 != -1) {
        swift_once(&qword_100250BA8, sub_10000FFC0);
      }
      id v74 = (id)qword_100258260;
    }

    uint64_t v48 = swift_allocObject(&unk_100239040, 152LL, 7LL);
    *(void *)(v48 + 16) = a3;
    *(void *)(v48 + 24) = a4;
    *(void *)(v48 + 32) = a2;
    *(void *)(v48 + 40) = a5;
    *(void *)(v48 + 48) = a6;
    *(_DWORD *)(v48 + 56) = a7;
    *(void *)(v48 + 64) = a8;
    *(void *)(v48 + 72) = a9;
    *(void *)(v48 + 80) = a10;
    *(void *)(v48 + 88) = a11;
    *(void *)(v48 + 96) = a12;
    *(void *)(v48 + 104) = a13;
    *(void *)(v48 + 112) = a14;
    *(void *)(v48 + 120) = a15;
    *(void *)(v48 + 128) = a16;
    *(void *)(v48 + 136) = a17;
    *(void *)(v48 + 144) = a18;
    uint64_t v49 = sub_100007578(&qword_1002515D8);
    uint64_t inited = swift_initStackObject(v49, v76);
    *(_OWORD *)(inited + 16) = xmmword_1001E67F0;
    *(void *)(inited + 32) = v74;
    v78[0] = inited;
    specialized Array._endMutation()(inited);
    uint64_t v51 = (_TtC18TrustedPeersHelper6Client *)v78[0];
    id v52 = a5;
    swift_retain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a16);
    swift_retain(a18);
    id v53 = a17;
    id v54 = a8;
    id v55 = v74;
    uint64_t v56 = a6;
    swift_bridgeObjectRetain(a9);
    id v57 = a10;
    swift_bridgeObjectRetain(a12);
    unint64_t v58 = (_TtC18TrustedPeersHelper6Client *)sub_100161474((uint64_t)v51);
    swift_bridgeObjectRelease(v51, v59, v60, v61, v62, v63, v64, v65);
    id v66 = v55;
    swift_retain(v48);
    sub_10016A974((uint64_t)v58, v56, (void (*)(void))sub_100172D0C, v48, v66);
    swift_bridgeObjectRelease(v58, v67, v68, v69, v70, v71, v72, v73);
    swift_release_n(v48, 2LL);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v25, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v26 = swift_errorRetain(a2);
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v31 = static os_log_type_t.error.getter(v27, v28, v29, v30);
    if (os_log_type_enabled(v27, v31))
    {
      NSString v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      uint64_t v77 = a2;
      v78[0] = v33;
      *(_DWORD *)NSString v32 = 136446210;
      swift_errorRetain(a2);
      uint64_t v34 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v35 = String.init<A>(describing:)(&v77, v34);
      uint64_t v37 = (_TtC18TrustedPeersHelper6Client *)v36;
      uint64_t v77 = sub_10017C4C4(v35, v36, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v31, "Unable to save encryption key: %{public}s", v32, 0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v45 = a2;
    if (!a2)
    {
      unint64_t v46 = sub_100043F74();
      uint64_t v45 = swift_allocError(&type metadata for ContainerError, v46, 0LL, 0LL);
      *(_OWORD *)uint64_t v47 = xmmword_1001E6810;
      *(_BYTE *)(v47 + 16) = 13;
    }

    swift_errorRetain(a2);
    a3( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v45);
    swift_errorRelease();
  }

uint64_t sub_1000F8344( void *a1, uint64_t a2, void (*a3)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, char *a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  id v21 = a3;
  if (!a1 || a2)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v23, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v24 = swift_errorRetain(a2);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.info.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      BOOL v65 = v21;
      id v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v28;
      *(_DWORD *)id v27 = 136446210;
      uint64_t v70 = a2;
      swift_errorRetain(a2);
      uint64_t v29 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v30 = String.init<A>(describing:)(&v70, v29);
      NSString v32 = (_TtC18TrustedPeersHelper6Client *)v31;
      uint64_t v70 = sub_10017C4C4(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v27 + 4, v27 + 12);
      uint64_t v33 = v32;
      id v21 = v65;
      swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to fetch policy: %{public}s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      if (a5)
      {
LABEL_7:
        uint64_t v41 = a5;
LABEL_10:
        swift_errorRetain(a5);
        v21( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v41);
        return swift_errorRelease();
      }
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (a5) {
        goto LABEL_7;
      }
    }

    unint64_t v42 = sub_100043F74();
    uint64_t v41 = swift_allocError(&type metadata for ContainerError, v42, 0LL, 0LL);
    *(_OWORD *)uint64_t v43 = xmmword_1001E6800;
    *(_BYTE *)(v43 + 16) = 13;
    goto LABEL_10;
  }

  id v48 = a1;
  id v49 = v48;
  if (a6)
  {
    id v50 = [v48 version];
    uint64_t v51 = *(void **)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride];
    *(void *)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride] = v50;
  }

  id v64 = *(id *)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v52 = swift_allocObject(&unk_100239130, 144LL, 7LL);
  id v53 = v49;
  id v63 = v49;
  uint64_t v54 = v52;
  *(_DWORD *)(v52 + 16) = a8;
  *(void *)(v52 + 24) = a9;
  *(void *)(v52 + 32) = v53;
  *(void *)(v52 + 40) = a10;
  *(void *)(v52 + 48) = a11;
  *(void *)(v52 + 56) = a12;
  *(void *)(v52 + 64) = a13;
  *(void *)(v52 + 72) = a14;
  *(void *)(v52 + 80) = a15;
  *(void *)(v52 + 88) = a16;
  *(void *)(v52 + 96) = a17;
  *(void *)(v52 + 104) = a18;
  *(void *)(v52 + 112) = a7;
  *(void *)(v52 + 120) = a3;
  *(void *)(v52 + 128) = a4;
  *(void *)(v52 + 136) = a19;
  uint64_t v55 = a4;
  uint64_t v56 = swift_allocObject(&unk_100239158, 32LL, 7LL);
  *(void *)(v56 + 16) = sub_100172DF8;
  *(void *)(v56 + 24) = v54;
  aBlock[4] = (uint64_t)sub_100176BD4;
  uint64_t v69 = v56;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000DC9F8;
  aBlock[3] = (uint64_t)&unk_100239170;
  id v57 = _Block_copy(aBlock);
  uint64_t v67 = v69;
  swift_bridgeObjectRetain(a15);
  swift_bridgeObjectRetain(a17);
  unint64_t v58 = a7;
  swift_retain(v55);
  swift_retain(a19);
  id v59 = a18;
  id v60 = a9;
  swift_retain(v56);
  id v61 = v63;
  swift_bridgeObjectRetain(a10);
  id v62 = a11;
  swift_bridgeObjectRetain(a13);
  swift_release(v67);
  [v64 performBlockAndWait:v57];

  _Block_release(v57);
  LOBYTE(v61) = swift_isEscapingClosureAtFileLocation(v56, "", 108LL, 2870LL, 49LL, 1LL);
  swift_release(v54);
  uint64_t result = swift_release(v56);
  return result;
}

void sub_1000F87E0( uint64_t a1, void *a2, void *a3, unint64_t a4, void *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void (*a14)(char *, uint64_t (*)(uint64_t a1), void *, uint64_t, uint64_t), uint64_t a15, uint64_t a16)
{
  uint64_t v258 = a8;
  unint64_t v259 = a7;
  uint64_t v260 = a6;
  unint64_t v261 = a4;
  id v262 = a5;
  RecoverableTLKSharesuint64_t Request = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  __chkstk_darwin(RecoverableTLKSharesRequest, v19);
  id v253 = (char *)&v248 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v254 = a2;
  LODWORD(v257) = sub_1000DC624(a2, a1);
  id v21 = [a3 version];
  id v22 = [v21 versionNumber];

  if (qword_100250BB0 != -1) {
    swift_once(&qword_100250BB0, sub_10000FFE0);
  }
  uint64_t v23 = (void *)qword_100258268;
  if (v22 >= [(id)qword_100258268 versionNumber])
  {
    id v24 = v23;
    id v25 = [a3 version];
  }

  else
  {
    id v24 = [a3 version];
    id v25 = 0LL;
  }

  NSString v255 = a14;
  uint64_t v256 = a15;
  id v26 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a11);
  id v27 = a12;
  uint64_t v28 = v261;
  swift_bridgeObjectRetain(v261);
  uint64_t v29 = (uint64_t)v262;
  id v30 = v262;
  uint64_t v31 = swift_bridgeObjectRetain(v259);
  id v262 = sub_10016AD4C( 1LL,  (uint64_t)v24,  (uint64_t)v25,  v28,  v257,  v29,  0LL,  0LL,  v260,  v31,  v258,  a9,  a10,  a11,  (uint64_t)v27,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  1);

  uint64_t v32 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v33 = *(id *)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  id v34 = v254;
  NSString v35 = [v254 peerID];
  if (!v35)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    id v37 = v36;
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
  }

  [v33 setEgoPeerID:v35];

  id v45 = *(id *)(a13 + v32);
  id v46 = [v34 data];
  uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
  unint64_t v49 = v48;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v47, v49);
  [v45 setEgoPeerPermanentInfo:isa];

  id v51 = *(id *)(a13 + v32);
  id v52 = [v34 sig];
  uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);
  unint64_t v55 = v54;

  Class v56 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v53, v55);
  [v51 setEgoPeerPermanentInfoSig:v56];

  id v57 = *(id *)(a13 + v32);
  id v58 = v262;
  id v59 = [v262 data];
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
  unint64_t v62 = v61;

  Class v63 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v60, v62);
  [v57 setEgoPeerStableInfo:v63];

  id v64 = *(id *)(a13 + v32);
  id v65 = [v58 sig];
  uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
  unint64_t v68 = v67;

  Class v69 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v66, v68);
  [v64 setEgoPeerStableInfoSig:v69];

  uint64_t v70 = *(void **)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  id v265 = 0LL;
  unsigned int v71 = [v70 save:&v265];
  id v72 = v265;
  if (v71)
  {
    BOOL v73 = *(void **)(a13 + v32);
    id v74 = v265;
    id v75 = [v73 egoPeerID];
    if (v75)
    {
      id v76 = v75;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
      id v78 = v77;

      id v79 = [*(id *)(a13 + v32) egoPeerPermanentInfo];
      if (v79)
      {
        BOOL v87 = v79;
        uint64_t v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
        id v90 = v89;

        id v91 = [*(id *)(a13 + v32) egoPeerPermanentInfoSig];
        if (v91)
        {
          id v99 = v91;
          uint64_t v260 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
          unint64_t v261 = v100;

          id v101 = [*(id *)(a13 + v32) egoPeerStableInfo];
          if (v101)
          {
            id v109 = v101;
            uint64_t v258 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v101);
            unint64_t v259 = v110;

            id v111 = [*(id *)(a13 + v32) egoPeerStableInfoSig];
            if (v111)
            {
              uint64_t v119 = v111;
              uint64_t v250 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v111);
              unint64_t v251 = v120;
              id v254 = v90;

              id v121 = [objc_allocWithZone(TPECPublicKeyFactory) init];
              sub_1000084E8(v88, (unint64_t)v90);
              uint64_t v122 = v260;
              uint64_t v257 = v88;
              unint64_t v123 = v261;
              sub_1000084E8(v260, v261);
              NSString v124 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v78, v125, v126, v127, v128, v129, v130, v131);
              Class v132 = Data._bridgeToObjectiveC()().super.isa;
              Class v133 = Data._bridgeToObjectiveC()().super.isa;
              id v134 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v124 data:v132 sig:v133 keyFactory:v121];
              id v249 = v121;

              uint64_t v135 = v122;
              unint64_t v136 = v123;
              uint64_t v137 = v257;
              unint64_t v138 = (unint64_t)v254;
              sub_10000852C(v135, v136);
              sub_10000852C(v137, v138);

              if (v134)
              {
                id v248 = v134;
                id v139 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
                uint64_t v141 = v258;
                unint64_t v140 = v259;
                sub_1000084E8(v258, v259);
                uint64_t v142 = v250;
                unint64_t v143 = v251;
                sub_1000084E8(v250, v251);
                Class v144 = Data._bridgeToObjectiveC()().super.isa;
                Class v145 = Data._bridgeToObjectiveC()().super.isa;
                id v146 = [v139 initWithData:v144 sig:v145];
                sub_10000852C(v142, v143);
                sub_10000852C(v141, v140);

                if (v146)
                {
                  BOOL v147 = v146;
                  id v148 = v248;
                  id v149 = [v248 modelID];
                  int v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
                  uint64_t v152 = v151;

                  id v231 = sub_10011F6F8(v150, v152, v147);
                  swift_bridgeObjectRelease(v152, v232, v233, v234, v235, v236, v237, v238);
                  uint64_t v239 = sub_1000077B8( &qword_100252830,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
                  static Message.with(_:)(sub_100172E50, a16, RecoverableTLKSharesRequest, v239);
                  uint64_t v240 = *(void *)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32);
                  RecoverableTLKSharesuint64_t Request = *(void *)(a13
                                                          + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish
                                                          + 24);
                  sub_1000084C4( (void *)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish),  RecoverableTLKSharesRequest);
                  v241 = (void *)swift_allocObject(&unk_1002391A8, 64LL, 7LL);
                  v241[2] = v255;
                  uint64_t v242 = v256;
                  v241[3] = v256;
                  v241[4] = v148;
                  v241[5] = v147;
                  v241[6] = v231;
                  v241[7] = a16;
                  uint64_t v243 = *(void *)(v240 + 16);
                  NSString v255 = *(void (**)(char *, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v243 + 72);
                  swift_retain(v242);
                  id v244 = v148;
                  id v245 = v147;
                  id v246 = v231;
                  swift_retain(a16);
                  uint64_t v247 = (uint64_t)v253;
                  v255(v253, sub_100172EC4, v241, RecoverableTLKSharesRequest, v243);

                  swift_release(v241);
                  sub_10000852C(v250, v251);
                  sub_10000852C(v258, v259);

                  sub_10000852C(v260, v261);
                  sub_10000852C(v257, (unint64_t)v254);
                  sub_1000415CC(v247, type metadata accessor for FetchRecoverableTLKSharesRequest);
                  return;
                }

                id v219 = v248;
                if (qword_100250EB8 != -1) {
                  swift_once(&qword_100250EB8, sub_1000DD078);
                }
                uint64_t v220 = type metadata accessor for Logger(0LL);
                uint64_t v221 = sub_100006BAC(v220, (uint64_t)qword_1002567D0);
                SEL v222 = (os_log_s *)Logger.logObject.getter(v221);
                os_log_type_t v223 = static os_log_type_t.info.getter(v222);
                BOOL v224 = os_log_type_enabled(v222, v223);
                unint64_t v138 = (unint64_t)v254;
                uint64_t v137 = v257;
                id v225 = v249;
                uint64_t v226 = v260;
                if (v224)
                {
                  BOOL v227 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                  *(_WORD *)BOOL v227 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v222, v223, "Invalid stableinfo or signature", v227, 2u);
                  swift_slowDealloc(v227, -1LL, -1LL);
                }

                unint64_t v228 = sub_100043F74();
                uint64_t v229 = swift_allocError(&type metadata for ContainerError, v228, 0LL, 0LL);
                *(_OWORD *)uint64_t v230 = xmmword_1001DEA00;
                *(_BYTE *)(v230 + 16) = 13;
                ((void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))v255)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v229);
                swift_errorRelease();

                sub_10000852C(v142, v251);
                sub_10000852C(v258, v259);
                uint64_t v218 = v226;
              }

              else
              {
                unint64_t v215 = sub_100043F74();
                uint64_t v216 = swift_allocError(&type metadata for ContainerError, v215, 0LL, 0LL);
                *(_OWORD *)uint64_t v217 = xmmword_1001DE880;
                *(_BYTE *)(v217 + 16) = 13;
                ((void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))v255)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v216);
                swift_errorRelease();

                sub_10000852C(v250, v251);
                sub_10000852C(v258, v259);
                uint64_t v218 = v260;
              }

              sub_10000852C(v218, v261);
              uint64_t v213 = v137;
              unint64_t v214 = v138;
              goto LABEL_47;
            }

            swift_bridgeObjectRelease(v78, v112, v113, v114, v115, v116, v117, v118);
            uint64_t v200 = v260;
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v205 = type metadata accessor for Logger(0LL);
            uint64_t v206 = sub_100006BAC(v205, (uint64_t)qword_1002567D0);
            BOOL v207 = (os_log_s *)Logger.logObject.getter(v206);
            os_log_type_t v208 = static os_log_type_t.info.getter(v207);
            if (os_log_type_enabled(v207, v208))
            {
              uint64_t v209 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v209 = 0;
              _os_log_impl((void *)&_mh_execute_header, v207, v208, "stableInfoSig does not exist", v209, 2u);
              swift_slowDealloc(v209, -1LL, -1LL);
            }

            unint64_t v210 = sub_100043F74();
            uint64_t v211 = swift_allocError(&type metadata for ContainerError, v210, 0LL, 0LL);
            *(_OWORD *)uint64_t v212 = xmmword_1001E6820;
            *(_BYTE *)(v212 + 16) = 13;
            ((void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))v255)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v211);
            swift_errorRelease();
            sub_10000852C(v258, v259);
          }

          else
          {
            swift_bridgeObjectRelease(v78, v102, v103, v104, v105, v106, v107, v108);
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v195 = type metadata accessor for Logger(0LL);
            uint64_t v196 = sub_100006BAC(v195, (uint64_t)qword_1002567D0);
            unint64_t v197 = (os_log_s *)Logger.logObject.getter(v196);
            os_log_type_t v198 = static os_log_type_t.info.getter(v197);
            BOOL v199 = os_log_type_enabled(v197, v198);
            uint64_t v200 = v260;
            if (v199)
            {
              id v201 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)id v201 = 0;
              _os_log_impl((void *)&_mh_execute_header, v197, v198, "stableInfo does not exist", v201, 2u);
              swift_slowDealloc(v201, -1LL, -1LL);
            }

            unint64_t v202 = sub_100043F74();
            uint64_t v203 = swift_allocError(&type metadata for ContainerError, v202, 0LL, 0LL);
            *(_OWORD *)uint64_t v204 = xmmword_1001E6820;
            *(_BYTE *)(v204 + 16) = 13;
            ((void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))v255)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v203);
            swift_errorRelease();
          }

          sub_10000852C(v200, v261);
        }

        else
        {
          swift_bridgeObjectRelease(v78, v92, v93, v94, v95, v96, v97, v98);
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v187 = type metadata accessor for Logger(0LL);
          uint64_t v188 = sub_100006BAC(v187, (uint64_t)qword_1002567D0);
          char v189 = (os_log_s *)Logger.logObject.getter(v188);
          os_log_type_t v190 = static os_log_type_t.info.getter(v189);
          if (os_log_type_enabled(v189, v190))
          {
            int v191 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)int v191 = 0;
            _os_log_impl((void *)&_mh_execute_header, v189, v190, "permanentInfoSig does not exist", v191, 2u);
            swift_slowDealloc(v191, -1LL, -1LL);
          }

          unint64_t v192 = sub_100043F74();
          uint64_t v193 = swift_allocError(&type metadata for ContainerError, v192, 0LL, 0LL);
          *(_OWORD *)uint64_t v194 = xmmword_1001E6820;
          *(_BYTE *)(v194 + 16) = 13;
          ((void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))v255)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v193);
          swift_errorRelease();
        }

        uint64_t v213 = v88;
        unint64_t v214 = (unint64_t)v90;
LABEL_47:
        sub_10000852C(v213, v214);

        return;
      }

      swift_bridgeObjectRelease(v78, v80, v81, v82, v83, v84, v85, v86);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v181 = type metadata accessor for Logger(0LL);
      uint64_t v182 = sub_100006BAC(v181, (uint64_t)qword_1002567D0);
      id v183 = (os_log_s *)Logger.logObject.getter(v182);
      os_log_type_t v184 = static os_log_type_t.info.getter(v183);
      if (os_log_type_enabled(v183, v184))
      {
        uint64_t v185 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v185 = 0;
        _os_log_impl((void *)&_mh_execute_header, v183, v184, "permanentInfo does not exist", v185, 2u);
        swift_slowDealloc(v185, -1LL, -1LL);
      }

      unint64_t v186 = sub_100043F74();
      uint64_t v178 = swift_allocError(&type metadata for ContainerError, v186, 0LL, 0LL);
      __int128 v180 = xmmword_1001E6820;
    }

    else
    {
      unint64_t v177 = sub_100043F74();
      uint64_t v178 = swift_allocError(&type metadata for ContainerError, v177, 0LL, 0LL);
      __int128 v180 = xmmword_1001DE890;
    }

    *(_OWORD *)uint64_t v179 = v180;
    *(_BYTE *)(v179 + 16) = 13;
    ((void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))v255)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v178);
    swift_errorRelease();

    return;
  }

  id v153 = v265;
  uint64_t v154 = _convertNSErrorToError(_:)(v72);

  swift_willThrow(v155);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v156 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v156, (uint64_t)qword_1002567D0);
  swift_errorRetain(v154);
  uint64_t v157 = swift_errorRetain(v154);
  unint64_t v158 = (os_log_s *)Logger.logObject.getter(v157);
  os_log_type_t v162 = static os_log_type_t.error.getter(v158, v159, v160, v161);
  if (os_log_type_enabled(v158, v162))
  {
    uint64_t v163 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v164 = (void *)swift_slowAlloc(32LL, -1LL);
    id v265 = v164;
    *(_DWORD *)uint64_t v163 = 136446210;
    uint64_t v263 = v154;
    swift_errorRetain(v154);
    uint64_t v165 = sub_100007578(&qword_100251D70);
    uint64_t v166 = String.init<A>(describing:)(&v263, v165);
    unint64_t v168 = (_TtC18TrustedPeersHelper6Client *)v167;
    uint64_t v263 = sub_10017C4C4(v166, v167, (uint64_t *)&v265);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v163 + 4, v163 + 12);
    swift_bridgeObjectRelease(v168, v169, v170, v171, v172, v173, v174, v175);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v158, v162, "Unable to save inheritance identity: %{public}s", v163, 0xCu);
    swift_arrayDestroy(v164, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v164, -1LL, -1LL);
    swift_slowDealloc(v163, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  unint64_t v176 = (void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))v255;
  swift_errorRetain(v154);
  v176( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v154);
  swift_errorRelease();
  swift_errorRelease();
}

uint64_t sub_1000F9C44(uint64_t *a1, uint64_t a2)
{
  id v3 = [*(id *)(a2 + 24) peerID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  uint64_t result = swift_bridgeObjectRelease(a1[1]);
  *a1 = v4;
  a1[1] = v6;
  return result;
}

uint64_t sub_1000F9CB0(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v160 = a7;
  uint64_t v163 = a3;
  uint64_t RecoverableTLKShares = type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
  uint64_t v162 = *(void *)(RecoverableTLKShares - 8);
  __chkstk_darwin(RecoverableTLKShares, v13);
  os_log_type_t v15 = (char *)&v150 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecoverableTLKSharesResponse = type metadata accessor for FetchRecoverableTLKSharesResponse(0LL);
  uint64_t v18 = __chkstk_darwin(RecoverableTLKSharesResponse, v17);
  uint64_t v161 = (_TtC18TrustedPeersHelper6Client *)((char *)&v150 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v18, v20);
  id v22 = (_TtC18TrustedPeersHelper6Client **)((char *)&v150 - v21);
  uint64_t v23 = sub_100007578(&qword_100251DC8);
  __chkstk_darwin(v23, v24);
  id v26 = (uint64_t *)((char *)&v150 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v26, &qword_100251DC8);
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    uint64_t v27 = *v26;
    if (qword_100250EB8 == -1)
    {
LABEL_3:
      uint64_t v28 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v28, (uint64_t)qword_1002567D0);
      swift_errorRetain(v27);
      uint64_t v29 = swift_errorRetain(v27);
      id v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v34 = static os_log_type_t.error.getter(v30, v31, v32, v33);
      if (os_log_type_enabled(v30, v34))
      {
        NSString v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        int64_t v36 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
        uint64_t v164 = v27;
        uint64_t v165 = v36;
        *(_DWORD *)NSString v35 = 136446210;
        swift_errorRetain(v27);
        uint64_t v37 = sub_100007578(&qword_100251D70);
        uint64_t v38 = String.init<A>(describing:)(&v164, v37);
        int64_t v40 = (_TtC18TrustedPeersHelper6Client *)v39;
        uint64_t v164 = sub_10017C4C4(v38, v39, (uint64_t *)&v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v35 + 4, v35 + 12);
        swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v34, "fetchRecoverableTlkshares failed: %{public}s", v35, 0xCu);
        swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain(v27);
      ((void (*)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))a2)( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v27);
      swift_errorRelease();
      return swift_errorRelease();
    }

LABEL_33:
    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_3;
  }

  uint64_t v157 = a6;
  unint64_t v158 = (void (*)(uint64_t, _TtC18TrustedPeersHelper6Client *, uint64_t, unint64_t, void *, void *, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, void))a2;
  sub_100041608((uint64_t)v26, (uint64_t)v22, type metadata accessor for FetchRecoverableTLKSharesResponse);
  uint64_t v159 = v22;
  unint64_t v55 = *v22;
  int64_t v56 = *(void *)(*v22)->endpoint;
  id v57 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  if (v56)
  {
    uint64_t v155 = a4;
    uint64_t v156 = a5;
    uint64_t v165 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v55);
    sub_10014E6A8(0, v56, 0);
    uint64_t v58 = (uint64_t)&v55->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v162 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80)];
    uint64_t v59 = *(void *)(v162 + 72);
    id v57 = v165;
    do
    {
      sub_10004164C(v58, (uint64_t)v15, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      uint64_t v60 = *(void *)(*((void *)v15 + 2) + 16LL);
      sub_1000415CC((uint64_t)v15, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
      {
        sub_10014E6A8(0, *(void *)v57->endpoint + 1LL, 1);
        id v57 = v165;
      }

      unint64_t v69 = *(void *)v57->endpoint;
      unint64_t v68 = *(void *)v57->containerMap;
      if (v69 >= v68 >> 1)
      {
        sub_10014E6A8(v68 > 1, v69 + 1, 1);
        id v57 = v165;
      }

      *(void *)v57->endpoint = v69 + 1;
      *(void *)&v57[1]._TtCs12_SwiftObject_opaque[8 * v69] = v60;
      v58 += v59;
      --v56;
    }

    while (v56);
    swift_bridgeObjectRelease(v55, v61, v62, v63, v64, v65, v66, v67);
    a4 = v155;
    a5 = v156;
  }

  uint64_t v70 = *(void *)v57->endpoint;
  uint64_t v27 = (uint64_t)v161;
  a2 = 0LL;
  if (v70)
  {
    unsigned int v71 = v57 + 1;
    id v72 = v159;
    while (1)
    {
      uint64_t v73 = *(void *)v71->_TtCs12_SwiftObject_opaque;
      unsigned int v71 = (_TtC18TrustedPeersHelper6Client *)((char *)v71 + 8);
      BOOL v74 = __OFADD__(a2, v73);
      a2 = (void *)((char *)a2 + v73);
      if (v74) {
        break;
      }
      if (!--v70) {
        goto LABEL_21;
      }
    }

    __break(1u);
    goto LABEL_33;
  }

  id v72 = v159;
LABEL_21:
  swift_bridgeObjectRelease(v57, v48, v49, v50, v51, v52, v53, v54);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v76 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v76, (uint64_t)qword_1002567D0);
  uint64_t v77 = sub_10004164C((uint64_t)v72, v27, type metadata accessor for FetchRecoverableTLKSharesResponse);
  id v78 = (os_log_s *)Logger.logObject.getter(v77);
  os_log_type_t v79 = static os_log_type_t.info.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v80 = 134218240;
    uint64_t v81 = v27;
    int64_t v82 = *(_TtC18TrustedPeersHelper6Client **)(*(void *)v27 + 16LL);
    sub_1000415CC(v81, type metadata accessor for FetchRecoverableTLKSharesResponse);
    uint64_t v165 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v80 + 4, v80 + 12);
    *(_WORD *)(v80 + 12) = 2048;
    uint64_t v165 = (_TtC18TrustedPeersHelper6Client *)a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v80 + 14, v80 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v78,  v79,  "fetchRecoverableTlkshares succeeded: found %ld views and %ld total TLKShares",  (uint8_t *)v80,  0x16u);
    swift_slowDealloc(v80, -1LL, -1LL);
  }

  else
  {
    sub_1000415CC(v27, type metadata accessor for FetchRecoverableTLKSharesResponse);
  }

  id v83 = *v72;
  uint64_t v165 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v84 = *(void *)v83->endpoint;
  if (v84)
  {
    uint64_t v85 = (uint64_t)&v83->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v162 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80)];
    uint64_t v86 = *(void *)(v162 + 72);
    swift_bridgeObjectRetain(v83);
    do
    {
      sub_10004164C(v85, (uint64_t)v15, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      BOOL v87 = sub_100045CD8();
      sub_1000415CC((uint64_t)v15, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      sub_1000E4884((uint64_t)v87);
      v85 += v86;
      --v84;
    }

    while (v84);
    swift_bridgeObjectRelease(v83, v88, v89, v90, v91, v92, v93, v94);
    BOOL v95 = v165;
  }

  else
  {
    BOOL v95 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  id v96 = [a4 peerID];
  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  uint64_t v161 = v98;
  uint64_t v162 = v97;

  id v99 = [a4 data];
  uint64_t v100 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v99);
  unint64_t v102 = v101;

  id v103 = [a4 sig];
  uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v103);
  uint64_t v155 = v105;
  uint64_t v156 = (void *)v104;

  id v106 = [a5 data];
  uint64_t v107 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v106);
  unint64_t v153 = v108;
  uint64_t v154 = v107;

  id v109 = [a5 sig];
  uint64_t v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v109);
  uint64_t v151 = v110;
  unint64_t v152 = v111;
  unint64_t v112 = v111;

  id v113 = [*(id *)(v160 + 24) peerID];
  uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
  uint64_t v116 = v115;

  uint64_t v149 = v114;
  unint64_t v148 = v112;
  uint64_t v147 = v110;
  BOOL v117 = v161;
  uint64_t v118 = v100;
  uint64_t v119 = v100;
  unint64_t v120 = v102;
  unint64_t v121 = v102;
  unint64_t v123 = (unint64_t)v155;
  uint64_t v122 = (uint64_t)v156;
  unint64_t v125 = v153;
  uint64_t v124 = v154;
  v158(v162, v161, v119, v121, v156, v155, v154, v153, v147, v148, v157, v149, v116, v95, 0LL);
  swift_bridgeObjectRelease(v116, v126, v127, v128, v129, v130, v131, v132);
  swift_bridgeObjectRelease(v95, v133, v134, v135, v136, v137, v138, v139);
  sub_10000852C(v151, v152);
  sub_10000852C(v124, v125);
  sub_10000852C(v122, v123);
  sub_10000852C(v118, v120);
  swift_bridgeObjectRelease(v117, v140, v141, v142, v143, v144, v145, v146);
  return sub_1000415CC((uint64_t)v159, type metadata accessor for FetchRecoverableTLKSharesResponse);
}

        uint64_t v11 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }

      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 32 * v21);
      uint64_t v31 = *v29;
      id v30 = v29[1];
      uint64_t v33 = v29[2];
      uint64_t v32 = v29[3];
      os_log_type_t v34 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v29[1]);
        swift_bridgeObjectRetain(v32);
        NSString v35 = v34;
      }

      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain(v30);
      String.hash(into:)(v42, v31, v30);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRetain(v32);
      String.hash(into:)(v42, v33, v32);
      swift_bridgeObjectRelease(v32);
      uint64_t result = Hasher._finalize()();
      os_log_type_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        id v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      uint64_t v19 = (void *)(*(void *)(v8 + 48) + 32 * v18);
      uint64_t *v19 = v31;
      v19[1] = v30;
      v19[2] = v33;
      v19[3] = v32;
      *(void *)(*(void *)(v8 + 56) + 8 * v18) = v34;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    NSString v35 = *v33;
    os_log_type_t v34 = v33[1];
    int64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    os_log_type_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    *uint64_t v20 = v35;
    v20[1] = v34;
    uint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    _TtC18TrustedPeersHelper6Client *v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v40;
  uint64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

        uint64_t v19 = (v38 - 1) & v38;
        int64_t v36 = __clz(__rbit64(v38)) + (v29 << 6);
      }

      id v44 = *(void **)(*(void *)(v5 + 48) + 8 * v36);
      unint64_t v48 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v36);
      if ((a2 & 1) == 0)
      {
        id v45 = v44;
        sub_1000084E8(v48, *((unint64_t *)&v48 + 1));
      }

      id v30 = NSObject._rawHashValue(seed:)(*(void *)(v15 + 40));
      uint64_t v31 = -1LL << *(_BYTE *)(v15 + 32);
      uint64_t v32 = v30 & ~v31;
      uint64_t v33 = v32 >> 6;
      if (((-1LL << v32) & ~*(void *)(v21 + 8 * (v32 >> 6))) != 0)
      {
        os_log_type_t v34 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v21 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v40 = 0;
        SEL v41 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          id v42 = v33 == v41;
          if (v33 == v41) {
            uint64_t v33 = 0LL;
          }
          v40 |= v42;
          int64_t v43 = *(void *)(v21 + 8 * v33);
        }

        while (v43 == -1);
        os_log_type_t v34 = __clz(__rbit64(~v43)) + (v33 << 6);
      }

      *(void *)(v21 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
      *(void *)(*(void *)(v15 + 48) + 8 * v34) = v44;
      *(_OWORD *)(*(void *)(v15 + 56) + 16 * v34) = v48;
      ++*(void *)(v15 + 16);
    }
  }

  swift_release((_TtC18TrustedPeersHelper6Client *)v5, v8, v9, v10, v11, v12, v13, v14);
LABEL_43:
  void *v3 = v15;
}

    uint64_t v11 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      os_log_type_t v34 = v32;
      NSString v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    id v12 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    os_log_type_t v34 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      NSString v35 = v34;
    }

    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *uint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v37;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    id v12 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    os_log_type_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }

    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *uint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v24 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  NSString v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    id v9 = (v22 - 1) & v22;
    os_log_type_t v15 = __clz(__rbit64(v22)) + (v8 << 6);
    goto LABEL_34;
  }

  __break(1u);
}

  swift_bridgeObjectRelease(a5);

  id v78 = 0LL;
  unint64_t v48 = [a1 save:&v78];
  unint64_t v49 = v78;
  if ((v48 & 1) == 0)
  {
    id v57 = v78;
    uint64_t v11 = _convertNSErrorToError(_:)(v49);

    swift_willThrow(v58);
    if (qword_100250EF0 != -1) {
      swift_once(&qword_100250EF0, sub_1001BB540);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v59, (uint64_t)qword_100257DA0);
    swift_errorRetain(v11);
    uint64_t v60 = swift_errorRetain(v11);
    unint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    id v65 = static os_log_type_t.error.getter(v61, v62, v63, v64);
    if (os_log_type_enabled(v61, v65))
    {
      BOOL v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v76 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)BOOL v66 = 138543362;
      swift_errorRetain(v11);
      BOOL v67 = (void *)_swift_stdlib_bridgeErrorToNSError(v11);
      id v78 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v66 + 4, v66 + 12);
      *uint64_t v76 = v67;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v65, "voucher cleanup unable to save %{public}@", v66, 0xCu);
      unint64_t v68 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v76, 1LL, v68);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow(v69);
    uint64_t v8 = v75;
    goto LABEL_3;
  }

  if (v26)
  {
    uint64_t v25 = a5 & 0xC000000000000001LL;
    swift_bridgeObjectRetain_n(a5, 2LL);
    int64_t v50 = v49;
    id v7 = a1;
    id v51 = 4LL;
    id v52 = 0LL;
    if ((a5 & 0xC000000000000001LL) == 0) {
      goto LABEL_37;
    }
LABEL_36:
    for (k = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, a5); ; k = *(id *)(a5 + 8 * v51))
    {
      BOOL v54 = k;
      unint64_t v55 = __OFADD__(v52, 1LL);
      int64_t v56 = v52 + 1;
      if (v55) {
        break;
      }

      if (v56 == v26)
      {

        swift_bridgeObjectRelease_n(a5, 2LL);
        goto LABEL_52;
      }

      id v52 = ++v51 - 4;
      if (v25) {
        goto LABEL_36;
      }
LABEL_37:
      ;
    }

    __break(1u);
    goto LABEL_56;
  }

  uint64_t v70 = v78;
LABEL_52:
}

            goto LABEL_34;
          }
        }

        id v22 = (void *)v45;
        if (v45) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }

uint64_t sub_1000FA4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(&unk_10023AAF8, 32LL, 7LL);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  id v7 = (void *)swift_allocObject(&unk_10023AB20, 40LL, 7LL);
  void v7[2] = v2;
  v7[3] = sub_1001760A0;
  v7[4] = v5;
  uint64_t v8 = swift_allocObject(&unk_10023AB48, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_1001760AC;
  *(void *)(v8 + 24) = v7;
  v14[4] = sub_100176BD4;
  uint64_t v15 = v8;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_1000DC9F8;
  v14[3] = &unk_10023AB60;
  id v9 = _Block_copy(v14);
  uint64_t v10 = v15;
  swift_retain(a2);
  uint64_t v11 = v2;
  swift_retain(v5);
  swift_retain(v8);
  swift_release(v10);
  [v6 performBlockAndWait:v9];
  swift_release(v5);
  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 108LL, 2983LL, 33LL, 1LL);
  swift_release(v7);
  uint64_t result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FA634(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  uint64_t v4 = a3;
  if (a2) {
    os_log_type_t v7 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v7 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v8 = v7;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v10 = swift_errorRetain(a2);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  if (os_log_type_enabled(v11, v8))
  {
    os_log_type_t v34 = v4;
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v13;
    *(_DWORD *)uint64_t v12 = 134218242;
    uint64_t v36 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v14 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a2)
    {
      uint64_t v36 = 0x203A726F727265LL;
      unint64_t v37 = 0xE700000000000000LL;
      uint64_t v35 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v15 = sub_100007578(&qword_100251D70);
      v16._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v35, v15);
      object = (_TtC18TrustedPeersHelper6Client *)v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(object, v18, v19, v20, v21, v22, v23, v24);
      swift_errorRelease();
      uint64_t v25 = v36;
      uint64_t v14 = (_TtC18TrustedPeersHelper6Client *)v37;
    }

    else
    {
      uint64_t v25 = 0x73736563637573LL;
    }

    uint64_t v36 = sub_10017C4C4(v25, (unint64_t)v14, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v14, v26, v27, v28, v29, v30, v31, v32);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v8, "getEgoEpoch complete: %llu %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    uint64_t v4 = v34;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return v4(a1, a2);
}

void sub_1000FA8A0(uint64_t a1, void (*a2)(void, void))
{
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
    id v35 = 0LL;
    id v7 = v6;
    id v8 = [v7 peerWithID:v5 error:&v35];

    id v9 = v35;
    if (v35)
    {
      id v10 = v35;

      swift_willThrow(v11);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v12, (uint64_t)qword_1002567D0);
      id v13 = v10;
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v18 = static os_log_type_t.error.getter(v14, v15, v16, v17);
      if (os_log_type_enabled(v14, v18))
      {
        id v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_type_t v34 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v19 = 138543362;
        id v20 = v13;
        id v21 = a2;
        id v22 = (void *)_swift_stdlib_bridgeErrorToNSError(v20);
        id v35 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v19 + 4, v19 + 12);
        void *v34 = v22;
        a2 = v21;

        _os_log_impl((void *)&_mh_execute_header, v14, v18, "Error getting ego peer from model: %{public}@", v19, 0xCu);
        uint64_t v23 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v34, 1LL, v23);
        swift_slowDealloc(v34, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {

        uint64_t v14 = (os_log_s *)v13;
      }

      id v30 = v13;
      a2(0LL, v9);
    }

    else if (v8)
    {
      id v27 = v8;
      id v28 = [v27 permanentInfo];
      id v29 = [v28 epoch];

      a2(v29, 0LL);
    }

    else
    {
      unint64_t v31 = sub_100043F74();
      uint64_t v32 = swift_allocError(&type metadata for ContainerError, v31, 0LL, 0LL);
      *(_OWORD *)uint64_t v33 = xmmword_1001DE890;
      *(_BYTE *)(v33 + 16) = 13;
      a2(0LL, v32);
      swift_errorRelease();
    }
  }

  else
  {
    unint64_t v24 = sub_100043F74();
    uint64_t v25 = swift_allocError(&type metadata for ContainerError, v24, 0LL, 0LL);
    *(_OWORD *)uint64_t v26 = xmmword_1001DE890;
    *(_BYTE *)(v26 + 16) = 13;
    a2(0LL, v25);
    swift_errorRelease();
  }

uint64_t sub_1000FAC4C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, void, void, void, void))
{
  uint64_t v10 = a3;
  if (a5) {
    os_log_type_t v13 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v13 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v14 = v13;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v15, (uint64_t)qword_1002567D0);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a5);
  swift_bridgeObjectRetain(a2);
  uint64_t v16 = swift_errorRetain(a5);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v14))
  {
    uint64_t v51 = v10;
    id v52 = a7;
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    unint64_t v55 = a2;
    uint64_t v56 = v19;
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v54 = a1;
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = sub_100007578((uint64_t *)&unk_100256C60);
    uint64_t v21 = String.init<A>(describing:)(&v54, v20);
    uint64_t v23 = (_TtC18TrustedPeersHelper6Client *)v22;
    uint64_t v54 = sub_10017C4C4(v21, v22, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
    *(_WORD *)(v18 + 12) = 2082;
    unint64_t v31 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a5)
    {
      uint64_t v54 = 0x203A726F727265LL;
      unint64_t v55 = 0xE700000000000000LL;
      uint64_t v53 = a5;
      swift_errorRetain(a5);
      swift_errorRetain(a5);
      uint64_t v32 = sub_100007578(&qword_100251D70);
      v33._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v53, v32);
      object = (_TtC18TrustedPeersHelper6Client *)v33._object;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(object, v35, v36, v37, v38, v39, v40, v41);
      swift_errorRelease();
      uint64_t v42 = v54;
      unint64_t v31 = (_TtC18TrustedPeersHelper6Client *)v55;
    }

    else
    {
      uint64_t v42 = 0x73736563637573LL;
    }

    uint64_t v54 = sub_10017C4C4(v42, (unint64_t)v31, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v31, v43, v44, v45, v46, v47, v48, v49);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v14,  "establish complete peer: %{public}s %{public}s",  (uint8_t *)v18,  0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    a7 = v52;
    uint64_t v10 = v51;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD000000000000034LL, 0x80000001001F9B00LL);
  return a7(a1, a2, v10, a4, a5);
}

uint64_t sub_1000FAF60( char *a1, _TtC18TrustedPeersHelper6Client *a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t a4, void (*a5)(void, void, void *, void, uint64_t), uint64_t a6)
{
  return swift_release(a6);
}

uint64_t sub_1000FAFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = *(void **)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v10 = (void *)swift_allocObject(&unk_10023A940, 56LL, 7LL);
  v10[2] = v4;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a1;
  void v10[6] = a2;
  uint64_t v11 = swift_allocObject(&unk_10023A968, 32LL, 7LL);
  *(void *)(v11 + 16) = sub_100175E80;
  *(void *)(v11 + 24) = v10;
  v17[4] = sub_100176BD4;
  uint64_t v18 = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  v17[2] = sub_1000DC9F8;
  v17[3] = &unk_10023A980;
  uint64_t v12 = _Block_copy(v17);
  uint64_t v13 = v18;
  os_log_type_t v14 = v4;
  swift_retain(a4);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_retain(v11);
  swift_release(v13);
  [v9 performBlockAndWait:v12];
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 108LL, 3035LL, 33LL, 1LL);
  swift_release(v10);
  uint64_t result = swift_release(v11);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FB138(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_10023A9B8, 56LL, 7LL);
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a1;
  v10[5] = a4;
  void v10[6] = a5;
  swift_retain(a3);
  id v11 = a1;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  sub_100138594(0, (uint64_t)sub_100175ED8, (uint64_t)v10);
  return swift_release(v10);
}

uint64_t sub_1000FB3CC(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  if (!a1)
  {
    id v8 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    id v11 = (os_log_s *)swift_allocObject(&unk_10023A9E0, 56LL, 7LL);
    *((void *)v11 + 2) = a4;
    *((void *)v11 + 3) = a2;
    *((void *)v11 + 4) = a3;
    *((void *)v11 + 5) = a5;
    *((void *)v11 + 6) = a6;
    a2 = swift_allocObject(&unk_10023AA08, 32LL, 7LL);
    *(void *)(a2 + 16) = sub_100175F3C;
    *(void *)(a2 + 24) = v11;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v39 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023AA20;
    uint64_t v32 = _Block_copy(aBlock);
    uint64_t v33 = v39;
    os_log_type_t v34 = a4;
    swift_retain(a3);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_retain(a2);
    swift_release(v33);
    [v8 performBlockAndWait:v32];
    _Block_release(v32);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a2, "", 108LL, 3050LL, 41LL, 1LL);
    swift_release(v11);
    uint64_t result = swift_release(a2);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }

  id v8 = a1;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  swift_errorRetain(v8);
  uint64_t v10 = swift_errorRetain(v8);
  id v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v15 = static os_log_type_t.error.getter(v11, v12, v13, v14);
  if (!os_log_type_enabled(v11, v15))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v17 = swift_slowAlloc(32LL, -1LL);
  uint64_t v37 = (uint64_t)v8;
  aBlock[0] = v17;
  *(_DWORD *)uint64_t v16 = 136446210;
  swift_errorRetain(v8);
  uint64_t v18 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v19 = String.init<A>(describing:)(&v37, v18);
  uint64_t v21 = (_TtC18TrustedPeersHelper6Client *)v20;
  uint64_t v37 = sub_10017C4C4(v19, v20, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock, v16 + 4, v16 + 12);
  swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  v11,  v15,  "fetchAfterEstablish failed to fetch changes: %{public}s",  v16,  0xCu);
  swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v17, -1LL, -1LL);
  swift_slowDealloc(v16, -1LL, -1LL);
LABEL_9:

  return ((uint64_t (*)(void, void, void *, void, void *))a2)( 0LL,  0LL,  _swiftEmptyArrayStorage,  0LL,  v8);
}

uint64_t sub_1000FB6E8( char *a1, void (*a2)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, id, uint64_t), uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, _TtC18TrustedPeersHelper6Client *a5)
{
  uint64_t v10 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v11 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v11) {
    goto LABEL_15;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  os_log_type_t v15 = v14;
  id v16 = [*(id *)&a1[v10] egoPeerPermanentInfo];
  if (!v16)
  {
    swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);

    goto LABEL_15;
  }

  int64_t v24 = v16;
  uint64_t v154 = a5;
  uint64_t v156 = v13;
  uint64_t v25 = a3;
  id v26 = a2;
  uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  unint64_t v29 = v28;

  id v30 = [*(id *)&a1[v10] egoPeerPermanentInfoSig];
  if (!v30)
  {

    uint64_t v61 = v27;
    unint64_t v62 = v29;
LABEL_14:
    sub_10000852C(v61, v62);
    swift_bridgeObjectRelease(v15, v63, v64, v65, v66, v67, v68, v69);
    a2 = v26;
    goto LABEL_15;
  }

  unint64_t v31 = v30;
  uint64_t v157 = v27;
  unint64_t v158 = v29;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
  unint64_t v34 = v33;

  id v35 = [*(id *)&a1[v10] egoPeerStableInfo];
  if (!v35)
  {

    sub_10000852C(v32, v34);
    uint64_t v61 = v157;
    unint64_t v62 = v158;
    goto LABEL_14;
  }

  id v36 = v35;
  uint64_t v151 = v15;
  unint64_t v152 = v34;
  uint64_t v153 = v32;
  uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
  unint64_t v39 = v38;

  id v40 = [*(id *)&a1[v10] egoPeerStableInfoSig];
  a2 = v26;
  if (v40)
  {
    BOOL v41 = v40;
    uint64_t v149 = v37;
    unint64_t v150 = v39;
    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    unint64_t v44 = v43;

    int64_t v45 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    id v160 = 0LL;
    id v46 = v45;
    unsigned int v47 = [v46 hasPeerWithID:v12 error:&v160];

    uint64_t v48 = (uint64_t)v160;
    uint64_t v148 = v42;
    if (v160)
    {
      id v49 = v160;
      swift_willThrow(v49);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v50 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v50, (uint64_t)qword_1002567D0);
      id v51 = v49;
      swift_bridgeObjectRetain(v151);
      id v52 = v51;
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.info.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc(22LL, -1LL);
        id v144 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v155 = (void *)swift_slowAlloc(32LL, -1LL);
        id v160 = v155;
        *(_DWORD *)uint64_t v55 = 136446466;
        swift_bridgeObjectRetain(v151);
        uint64_t v159 = sub_10017C4C4(v156, (unint64_t)v151, (uint64_t *)&v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v55 + 4, v55 + 12);
        swift_bridgeObjectRelease_n(v151, 3LL);
        *(_WORD *)(v55 + 12) = 2114;
        id v146 = v52;
        id v56 = v52;
        uint64_t v57 = _swift_stdlib_bridgeErrorToNSError(v56);
        uint64_t v159 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v55 + 14, v55 + 22);
        *id v144 = v57;

        _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "fetchAfterEstablish: error finding peer %{public}s in model: %{public}@",  (uint8_t *)v55,  0x16u);
        uint64_t v58 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v144, 1LL, v58);
        swift_slowDealloc(v144, -1LL, -1LL);
        swift_arrayDestroy(v155, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v155, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);

        id v52 = v146;
      }

      else
      {

        swift_bridgeObjectRelease_n(v151, 2LL);
      }

      uint64_t v60 = v157;
      unint64_t v59 = v158;
      id v117 = v52;
      a2(0LL, 0LL, (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage, 0LL, v48);

      sub_10000852C(v42, v44);
      uint64_t v118 = v149;
      unint64_t v119 = v150;
    }

    else
    {
      if (v47)
      {
        id v147 = [objc_allocWithZone(TPECPublicKeyFactory) init];
        swift_bridgeObjectRetain(v151);
        sub_1000084E8(v157, v158);
        sub_1000084E8(v153, v152);
        NSString v145 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v151, v86, v87, v88, v89, v90, v91, v92);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v93 = Data._bridgeToObjectiveC()().super.isa;
        id v94 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v145 data:isa sig:v93 keyFactory:v147];
        sub_10000852C(v153, v152);
        sub_10000852C(v157, v158);

        if (v94)
        {
          id v102 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
          sub_1000084E8(v149, v150);
          sub_1000084E8(v148, v44);
          Class v103 = Data._bridgeToObjectiveC()().super.isa;
          Class v104 = Data._bridgeToObjectiveC()().super.isa;
          id v105 = [v102 initWithData:v103 sig:v104];
          sub_10000852C(v148, v44);
          sub_10000852C(v149, v150);

          if (!v105)
          {
            swift_bridgeObjectRelease(v151, v106, v107, v108, v109, v110, v111, v112);
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v135 = type metadata accessor for Logger(0LL);
            uint64_t v136 = sub_100006BAC(v135, (uint64_t)qword_1002567D0);
            id v137 = (os_log_s *)Logger.logObject.getter(v136);
            os_log_type_t v138 = static os_log_type_t.info.getter(v137);
            if (os_log_type_enabled(v137, v138))
            {
              BOOL v139 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)BOOL v139 = 0;
              _os_log_impl((void *)&_mh_execute_header, v137, v138, "cannot create TPPeerStableInfo", v139, 2u);
              swift_slowDealloc(v139, -1LL, -1LL);
            }

            unint64_t v140 = sub_100043F74();
            uint64_t v141 = swift_allocError(&type metadata for ContainerError, v140, 0LL, 0LL);
            *(_OWORD *)uint64_t v142 = xmmword_1001DEA00;
            *(_BYTE *)(v142 + 16) = 13;
            a2(0LL, 0LL, (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage, 0LL, v141);
            swift_errorRelease();

            sub_10000852C(v148, v44);
            sub_10000852C(v149, v150);
            sub_10000852C(v153, v152);
            uint64_t v130 = v157;
            unint64_t v131 = v158;
            return sub_10000852C(v130, v131);
          }

          swift_bridgeObjectRetain(v151);
          swift_retain(v25);
          id v113 = a1;
          id v114 = v94;
          id v115 = v105;
          sub_10016BE98(a4, v154, v113, a2, v25, v113, v114, v115, v156, (uint64_t)v151);

          swift_release(v25);
          swift_bridgeObjectRelease_n(v151, 2LL);
          sub_10000852C(v148, v44);
          uint64_t v116 = v149;
        }

        else
        {
          swift_bridgeObjectRelease(v151, v95, v96, v97, v98, v99, v100, v101);
          unint64_t v132 = sub_100043F74();
          uint64_t v133 = swift_allocError(&type metadata for ContainerError, v132, 0LL, 0LL);
          *(_OWORD *)uint64_t v134 = xmmword_1001DE880;
          *(_BYTE *)(v134 + 16) = 13;
          a2(0LL, 0LL, (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage, 0LL, v133);
          swift_errorRelease();

          sub_10000852C(v148, v44);
          uint64_t v116 = v149;
        }

        sub_10000852C(v116, v150);
        sub_10000852C(v153, v152);
        uint64_t v130 = v157;
        unint64_t v131 = v158;
        return sub_10000852C(v130, v131);
      }

      uint64_t v120 = v37;
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v121 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v121, (uint64_t)qword_1002567D0);
      uint64_t v122 = swift_bridgeObjectRetain(v151);
      unint64_t v123 = (os_log_s *)Logger.logObject.getter(v122);
      os_log_type_t v124 = static os_log_type_t.info.getter(v123);
      if (os_log_type_enabled(v123, v124))
      {
        unint64_t v125 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        SEL v126 = (void *)swift_slowAlloc(32LL, -1LL);
        id v160 = v126;
        *(_DWORD *)unint64_t v125 = 136446210;
        swift_bridgeObjectRetain(v151);
        uint64_t v159 = sub_10017C4C4(v156, (unint64_t)v151, (uint64_t *)&v160);
        uint64_t v120 = v149;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v125 + 4, v125 + 12);
        swift_bridgeObjectRelease_n(v151, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v123,  v124,  "fetchAfterEstablish: did not find peer %{public}s in model",  v125,  0xCu);
        swift_arrayDestroy(v126, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v126, -1LL, -1LL);
        swift_slowDealloc(v125, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v151, 2LL);
      }

      uint64_t v60 = v157;
      unint64_t v59 = v158;
      unint64_t v127 = sub_100043F74();
      uint64_t v128 = swift_allocError(&type metadata for ContainerError, v127, 0LL, 0LL);
      *(_OWORD *)uint64_t v129 = xmmword_1001E6830;
      *(_BYTE *)(v129 + 16) = 13;
      a2(0LL, 0LL, (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage, 0LL, v128);
      swift_errorRelease();
      sub_10000852C(v148, v44);
      uint64_t v118 = v120;
      unint64_t v119 = v150;
    }

    sub_10000852C(v118, v119);
    sub_10000852C(v153, v152);
    uint64_t v130 = v60;
    unint64_t v131 = v59;
    return sub_10000852C(v130, v131);
  }

  sub_10000852C(v37, v39);
  sub_10000852C(v153, v152);
  sub_10000852C(v157, v158);
  swift_bridgeObjectRelease(v151, v79, v80, v81, v82, v83, v84, v85);
LABEL_15:
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v70 = type metadata accessor for Logger(0LL);
  uint64_t v71 = sub_100006BAC(v70, (uint64_t)qword_1002567D0);
  id v72 = (os_log_s *)Logger.logObject.getter(v71);
  os_log_type_t v73 = static os_log_type_t.info.getter(v72);
  if (os_log_type_enabled(v72, v73))
  {
    BOOL v74 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "fetchAfterEstablish: failed to fetch egoPeerID", v74, 2u);
    swift_slowDealloc(v74, -1LL, -1LL);
  }

  unint64_t v75 = sub_100043F74();
  uint64_t v76 = swift_allocError(&type metadata for ContainerError, v75, 0LL, 0LL);
  *(_OWORD *)uint64_t v77 = xmmword_1001DE890;
  *(_BYTE *)(v77 + 16) = 13;
  a2(0LL, 0LL, (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage, 0LL, v76);
  return swift_errorRelease();
}

void sub_1000FC2FC( _TtC18TrustedPeersHelper6Client *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, id, uint64_t), int a4, int a5, id a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v11, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v12 = swift_errorRetain(a2);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v17 = static os_log_type_t.error.getter(v13, v14, v15, v16);
    if (os_log_type_enabled(v13, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v60 = a2;
      v61[0] = v19;
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_errorRetain(a2);
      uint64_t v20 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v21 = String.init<A>(describing:)(&v60, v20);
      BOOL v23 = (_TtC18TrustedPeersHelper6Client *)v22;
      uint64_t v60 = sub_10017C4C4(v21, v22, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v17,  "fetchAfterEstablish failed to update TLKs: %{public}s",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a3(0LL, 0LL, (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage, 0LL, a2);
  }

  else
  {
    id v34 = [a6 modelID];
    int v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v37 = v36;

    id v38 = sub_10011F6F8(v35, v37, a7);
    swift_bridgeObjectRelease(v37, v39, v40, v41, v42, v43, v44, v45);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    uint64_t v47 = sub_100006BAC(v46, (uint64_t)qword_1002567D0);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.info.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "fetchAfterEstablish succeeded", v50, 2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    if (a1) {
      id v51 = a1;
    }
    else {
      id v51 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(a1);
    id v59 = v38;
    a3(a8, a9, v51, v38, 0LL);
    swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  }

void sub_1000FC834( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, void *, void, uint64_t), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v13 = [*(id *)&v5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v13) {
    goto LABEL_14;
  }
  uint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  os_log_type_t v17 = v16;

  id v18 = [*(id *)&v6[v12] egoPeerPermanentInfo];
  if (!v18)
  {
LABEL_13:
    swift_bridgeObjectRelease(v17, v19, v20, v21, v22, v23, v24, v25);
LABEL_14:
    unint64_t v109 = sub_100043F74();
    uint64_t v110 = swift_allocError(&type metadata for ContainerError, v109, 0LL, 0LL);
    *(_OWORD *)uint64_t v111 = xmmword_1001DE890;
    *(_BYTE *)(v111 + 16) = 13;
    a4(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v110);
    swift_errorRelease();
    return;
  }

  int64_t v26 = v18;
  uint64_t v164 = a3;
  uint64_t v165 = v15;
  uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  unint64_t v29 = v28;

  id v30 = [*(id *)&v6[v12] egoPeerPermanentInfoSig];
  if (!v30)
  {
LABEL_12:
    sub_10000852C(v27, v29);
    goto LABEL_13;
  }

  unint64_t v31 = v30;
  uint64_t v162 = a1;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
  unint64_t v166 = v33;

  id v34 = [*(id *)&v6[v12] egoPeerStableInfo];
  if (!v34)
  {
LABEL_11:
    sub_10000852C(v32, v166);
    goto LABEL_12;
  }

  int v35 = v34;
  uint64_t v155 = a2;
  uint64_t v163 = a4;
  uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
  unint64_t v38 = v37;

  id v39 = [*(id *)&v6[v12] egoPeerStableInfoSig];
  if (!v39)
  {
    sub_10000852C(v36, v38);
    a4 = v163;
    goto LABEL_11;
  }

  id v40 = v39;
  unint64_t v159 = v38;
  uint64_t v160 = v36;
  uint64_t v161 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
  unint64_t v158 = v41;

  id v42 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  swift_bridgeObjectRetain(v17);
  sub_1000084E8(v27, v29);
  sub_1000084E8(v32, v166);
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17, v44, v45, v46, v47, v48, v49, v50);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v52 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v156 = v42;
  id v53 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v43 data:isa sig:v52 keyFactory:v42];
  sub_10000852C(v32, v166);
  unint64_t v157 = v29;
  sub_10000852C(v27, v29);

  id v154 = v53;
  if (v53)
  {
    id v61 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    sub_1000084E8(v160, v159);
    sub_1000084E8(v161, v158);
    Class v62 = Data._bridgeToObjectiveC()().super.isa;
    Class v63 = Data._bridgeToObjectiveC()().super.isa;
    id v64 = [v61 initWithData:v62 sig:v63];
    sub_10000852C(v161, v158);
    sub_10000852C(v160, v159);

    if (v64)
    {
      uint64_t v153 = v64;
      id v72 = [v53 machineID];
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      unint64_t v75 = v74;

      LOBYTE(v72) = sub_1001A372C(v73, (unint64_t)v75);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      if ((v72 & 1) != 0)
      {
        id v90 = (void *)swift_allocObject(&unk_10023A918, 160LL, 7LL);
        v90[2] = v163;
        v90[3] = a5;
        v90[4] = v6;
        v90[5] = v162;
        v90[6] = v53;
        v90[7] = v155;
        v90[8] = v165;
        v91._uint64_t countAndFlagsBits = v165;
        v90[9] = v17;
        v90[10] = v153;
        v90[11] = v164;
        v90[12] = v27;
        v90[13] = v157;
        v90[14] = v32;
        v90[15] = v166;
        v90[16] = v160;
        v90[17] = v159;
        v90[18] = v161;
        v90[19] = v158;
        strcpy((char *)v167, "signing-key ");
        BYTE5(v167[1]) = 0;
        HIWORD(v167[1]) = -5120;
        v91._object = v17;
        String.append(_:)(v91);
        swift_bridgeObjectRetain_n(v17, 3LL);
        sub_1000084E8(v27, v157);
        sub_1000084E8(v32, v166);
        sub_1000084E8(v160, v159);
        sub_1000084E8(v161, v158);
        swift_bridgeObjectRetain(v164);
        swift_retain(v90);
        swift_retain(a5);
        BOOL v92 = v6;
        swift_bridgeObjectRetain(v162);
        id v93 = v53;
        swift_bridgeObjectRetain(v155);
        id v94 = v153;
        sub_10015FAA0(v167[0], v167[1], (void (*)(char *, uint64_t))sub_100175E1C, (uint64_t)v90, v165, v17);

        swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v167[1], v95, v96, v97, v98, v99, v100, v101);
        swift_release_n(v90, 2LL);
        swift_bridgeObjectRelease_n(v17, 2LL);
        sub_10000852C(v161, v158);
        sub_10000852C(v160, v159);
        sub_10000852C(v32, v166);
        sub_10000852C(v27, v157);
        swift_bridgeObjectRelease(v17, v102, v103, v104, v105, v106, v107, v108);
      }

      else
      {
        swift_bridgeObjectRelease(v17, v83, v84, v85, v86, v87, v88, v89);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v123 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v123, (uint64_t)qword_1002567D0);
        id v124 = v53;
        unint64_t v125 = (os_log_s *)Logger.logObject.getter(v124);
        os_log_type_t v126 = static os_log_type_t.info.getter(v125);
        unint64_t v127 = &selRef_setAllSelves_;
        if (os_log_type_enabled(v125, v126))
        {
          uint64_t v128 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v129 = swift_slowAlloc(32LL, -1LL);
          v167[0] = v129;
          *(_DWORD *)uint64_t v128 = 136446210;
          id v130 = [v124 machineID];
          uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
          uint64_t v133 = v132;

          unint64_t v127 = &selRef_setAllSelves_;
          uint64_t v168 = sub_10017C4C4(v131, (unint64_t)v133, v167);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v128 + 4, v128 + 12);

          swift_bridgeObjectRelease(v133, v134, v135, v136, v137, v138, v139, v140);
          _os_log_impl( (void *)&_mh_execute_header,  v125,  v126,  "establish: self machineID %{public}s not on list",  v128,  0xCu);
          swift_arrayDestroy(v129, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v129, -1LL, -1LL);
          swift_slowDealloc(v128, -1LL, -1LL);
        }

        else
        {
        }

        id v141 = objc_allocWithZone(&OBJC_CLASS___SecTapToRadar);
        NSString v142 = String._bridgeToObjectiveC()();
        NSString v143 = String._bridgeToObjectiveC()();
        NSString v144 = String._bridgeToObjectiveC()();
        id v145 = [v141 initTapToRadar:v142 description:v143 radar:v144];

        [v145 trigger];
        id v146 = [v124 v127[155]];
        uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
        uint64_t v149 = v148;

        unint64_t v150 = sub_100043F74();
        uint64_t v151 = swift_allocError(&type metadata for ContainerError, v150, 0LL, 0LL);
        *(void *)uint64_t v152 = v147;
        *(void *)(v152 + 8) = v149;
        *(_BYTE *)(v152 + 16) = 2;
        v163(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v151);
        swift_errorRelease();

        sub_10000852C(v161, v158);
        sub_10000852C(v160, v159);
        sub_10000852C(v32, v166);
        sub_10000852C(v27, v157);
      }
    }

    else
    {
      swift_bridgeObjectRelease(v17, v65, v66, v67, v68, v69, v70, v71);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v115 = type metadata accessor for Logger(0LL);
      uint64_t v116 = sub_100006BAC(v115, (uint64_t)qword_1002567D0);
      id v117 = (os_log_s *)Logger.logObject.getter(v116);
      os_log_type_t v118 = static os_log_type_t.info.getter(v117);
      if (os_log_type_enabled(v117, v118))
      {
        unint64_t v119 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v119 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "cannot create TPPeerStableInfo", v119, 2u);
        swift_slowDealloc(v119, -1LL, -1LL);
      }

      unint64_t v120 = sub_100043F74();
      uint64_t v121 = swift_allocError(&type metadata for ContainerError, v120, 0LL, 0LL);
      *(_OWORD *)uint64_t v122 = xmmword_1001DEA00;
      *(_BYTE *)(v122 + 16) = 13;
      v163(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v121);
      swift_errorRelease();

      sub_10000852C(v161, v158);
      sub_10000852C(v160, v159);
      sub_10000852C(v32, v166);
      sub_10000852C(v27, v157);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v17, v54, v55, v56, v57, v58, v59, v60);
    unint64_t v112 = sub_100043F74();
    uint64_t v113 = swift_allocError(&type metadata for ContainerError, v112, 0LL, 0LL);
    *(_OWORD *)uint64_t v114 = xmmword_1001DE880;
    *(_BYTE *)(v114 + 16) = 13;
    v163(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v113);
    swift_errorRelease();

    sub_10000852C(v161, v158);
    sub_10000852C(v160, v159);
    sub_10000852C(v32, v166);
    sub_10000852C(v27, v29);
  }

uint64_t sub_1000FD308( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t v20 = a3;
  if (a1)
  {
    id v57 = *(id *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    int64_t v26 = (void *)swift_allocObject(&unk_100238FC8, 168LL, 7LL);
    v26[2] = a6;
    v26[3] = a1;
    void v26[4] = a7;
    v26[5] = a8;
    v26[6] = a3;
    v26[7] = a4;
    v26[8] = a5;
    v26[9] = a9;
    v26[10] = a10;
    v26[11] = a11;
    v26[12] = a12;
    v26[13] = a13;
    v26[14] = a14;
    v26[15] = a15;
    v26[16] = a16;
    v26[17] = a17;
    v26[18] = a18;
    v26[19] = a19;
    v26[20] = a20;
    uint64_t v20 = swift_allocObject(&unk_100238FF0, 32LL, 7LL);
    *(void *)(v20 + 16) = sub_100172A64;
    *(void *)(v20 + 24) = v26;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v60 = v20;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100239008;
    uint64_t v27 = _Block_copy(aBlock);
    uint64_t v28 = v60;
    swift_bridgeObjectRetain(a12);
    id v29 = a1;
    swift_bridgeObjectRetain(a6);
    id v30 = a7;
    swift_bridgeObjectRetain(a8);
    swift_retain(a4);
    unint64_t v31 = a5;
    swift_bridgeObjectRetain(a10);
    id v32 = a11;
    sub_1000084E8(a13, a14);
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    swift_retain(v20);
    swift_release(v28);
    [v57 performBlockAndWait:v27];

    _Block_release(v27);
    LOBYTE(v27) = swift_isEscapingClosureAtFileLocation(v20, "", 108LL, 3142LL, 37LL, 1LL);
    swift_release(v26);
    uint64_t result = swift_release(v20);
    __break(1u);
  }

  uint64_t v34 = a2;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v35, (uint64_t)qword_1002567D0);
  swift_errorRetain(v34);
  uint64_t v36 = swift_errorRetain(v34);
  unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v41 = static os_log_type_t.error.getter(v37, v38, v39, v40);
  if (os_log_type_enabled(v37, v41))
  {
    id v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v43;
    *(_DWORD *)id v42 = 136446210;
    uint64_t v61 = v34;
    swift_errorRetain(v34);
    uint64_t v44 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v45 = String.init<A>(describing:)(&v61, v44);
    id v47 = (_TtC18TrustedPeersHelper6Client *)v46;
    uint64_t v61 = sub_10017C4C4(v45, v46, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v41,  "Don't have my own peer keys; can't establish: %{public}s",
      v42,
      0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return ((uint64_t (*)(void, void, void *, void, uint64_t))v20)( 0LL,  0LL,  _swiftEmptyArrayStorage,  0LL,  v34);
}

uint64_t sub_1000FD72C( uint64_t a1, _TtC18TrustedPeersHelper6Client *a2, void *a3, uint64_t a4, void (*a5)(void, void, void *, void, uint64_t), uint64_t a6, char *a7, uint64_t a8, _TtC18TrustedPeersHelper6Client *a9, void *a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, _TtC18TrustedPeersHelper6Client *a17, uint64_t a18, unint64_t a19)
{
  v469 = a7;
  uint64_t v470 = a8;
  v473 = (void (*)(void, void, void *, void, uint64_t))a5;
  v475 = a2;
  uint64_t v453 = type metadata accessor for EstablishRequest(0LL);
  __chkstk_darwin(v453, v23);
  v454 = (char *)&v449 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100007578(&qword_100256CA0);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  v456 = (char *)&v449 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v452 = (uint64_t)&v449 - v30;
  uint64_t v459 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v455 = *(void *)(v459 - 8);
  uint64_t v32 = __chkstk_darwin(v459, v31);
  v451 = (_OWORD *)((char *)&v449 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v32, v34);
  v450 = (_OWORD *)((char *)&v449 - v35);
  uint64_t v457 = type metadata accessor for Bottle(0LL);
  uint64_t v37 = __chkstk_darwin(v457, v36);
  uint64_t v461 = (uint64_t)&v449 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37, v39);
  uint64_t v462 = (uint64_t)&v449 - v40;
  uint64_t v41 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v41, v42);
  uint64_t v465 = (uint64_t)&v449 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v464 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v463 = *(void *)(v464 - 8);
  __chkstk_darwin(v464, v44);
  unint64_t v466 = (unint64_t)&v449 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v46 = (_TtC18TrustedPeersHelper6Client *)type metadata accessor for TLKShare(0LL);
  v480 = *(_TtC18TrustedPeersHelper6Client **)v46[-1].containerMap;
  v481 = v46;
  uint64_t v48 = __chkstk_darwin(v46, v47);
  int64_t v50 = (char *)&v449 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v48, v51);
  uint64_t v477 = (uint64_t)&v449 - v52;
  uint64_t v467 = type metadata accessor for Peer(0LL);
  uint64_t v54 = __chkstk_darwin(v467, v53);
  uint64_t v460 = (uint64_t)&v449 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = __chkstk_darwin(v54, v56);
  uint64_t v458 = (uint64_t)&v449 - v58;
  uint64_t v60 = __chkstk_darwin(v57, v59);
  uint64_t v468 = (uint64_t)&v449 - v61;
  __chkstk_darwin(v60, v62);
  uint64_t v471 = (uint64_t)&v449 - v63;
  uint64_t v64 = type metadata accessor for ViewKeys(0LL);
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v67 = __chkstk_darwin(v64, v66);
  BOOL v69 = (char *)&v449 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v67, v70);
  id v72 = (char *)&v449 - v71;
  if ((unint64_t)a1 >> 62)
  {
    uint64_t v428 = a6;
    v429 = a3;
    if (a1 < 0) {
      uint64_t v430 = a1;
    }
    else {
      uint64_t v430 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v431 = v430;
    a3 = v429;
    a6 = v428;
    uint64_t v73 = _CocoaArrayWrapper.endIndex.getter(v431);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v432, v433, v434, v435, v436, v437, v438);
  }

  else
  {
    uint64_t v73 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v483 = a1;
  v476 = v50;
  uint64_t v474 = a6;
  v472 = a3;
  v478 = (_TtC18TrustedPeersHelper6Client *)a4;
  if (v73)
  {
    v487 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    sub_10014E70C(0, v73 & ~(v73 >> 63), 0);
    v482 = (void *)v73;
    if (v73 < 0)
    {
LABEL_117:
      __break(1u);
      swift_once(&qword_100250EB8, sub_1000DD078);
      uint64_t v103 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v103, (uint64_t)qword_1002567D0);
      swift_errorRetain(v73);
      uint64_t v104 = swift_errorRetain(v73);
      id v105 = (os_log_s *)Logger.logObject.getter(v104);
      os_log_type_t v109 = static os_log_type_t.error.getter(v105, v106, v107, v108);
      if (os_log_type_enabled(v105, v109))
      {
        uint64_t v110 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v111 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
        v487 = v111;
        *(_DWORD *)uint64_t v110 = 136446210;
        uint64_t v485 = v73;
        swift_errorRetain(v73);
        uint64_t v112 = sub_100007578(&qword_100251D70);
        uint64_t v113 = String.init<A>(describing:)(&v485, v112);
        uint64_t v115 = (_TtC18TrustedPeersHelper6Client *)v114;
        uint64_t v485 = sub_10017C4C4(v113, v114, (uint64_t *)&v487);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v110 + 4, v110 + 12);
        swift_bridgeObjectRelease(v115, v116, v117, v118, v119, v120, v121, v122);
        swift_errorRelease();
        swift_errorRelease();
        uint64_t v123 = "Unable to make TLKShares for self: %{public}s";
LABEL_53:
        _os_log_impl((void *)&_mh_execute_header, v105, v109, v123, v110, 0xCu);
        swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v111, -1LL, -1LL);
        swift_slowDealloc(v110, -1LL, -1LL);
LABEL_55:

        swift_errorRetain(v73);
        v473(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v73);
        swift_errorRelease();
        return swift_errorRelease();
      }

LABEL_54:
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_55;
    }

    v484 = (_TtC18TrustedPeersHelper6Client *)(a1 & 0xC000000000000001LL);
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      BOOL v74 = 0LL;
      uint64_t v73 = 0LL;
      do
      {
        uint64_t v75 = specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v483);
        v447 = (_TtC18TrustedPeersHelper6Client *)__chkstk_darwin(v75, v76);
        uint64_t v77 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
        static Message.with(_:)(sub_100172A80, &v449 - 4, v64, v77);
        swift_unknownObjectRelease(v75);
        int64_t v78 = v487;
        if ((swift_isUniquelyReferenced_nonNull_native(v487) & 1) == 0)
        {
          sub_10014E70C(0, *(void *)v78->endpoint + 1LL, 1);
          int64_t v78 = v487;
        }

        unint64_t v80 = *(void *)v78->endpoint;
        unint64_t v79 = *(void *)v78->containerMap;
        if (v80 >= v79 >> 1)
        {
          sub_10014E70C(v79 > 1, v80 + 1, 1);
          int64_t v78 = v487;
        }

        BOOL v74 = (void *)((char *)v74 + 1);
        *(void *)v78->endpoint = v80 + 1;
        sub_100041608( (uint64_t)v72,  (uint64_t)&v78->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))
                                                  + *(void *)(v65 + 72) * v80],
          type metadata accessor for ViewKeys);
      }

      while (v482 != v74);
    }

    else
    {
      id v83 = (_TtC18TrustedPeersHelper6Client *)(a1 + 32);
      BOOL v84 = (_TtC18TrustedPeersHelper6Client *)sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
      v479 = v84;
      uint64_t v73 = 0LL;
      SEL v86 = v482;
      do
      {
        __chkstk_darwin(v84, v85);
        v447 = v87;
        BOOL v88 = v87;
        static Message.with(_:)(sub_100176B68, &v449 - 4, v64, v479);

        int64_t v78 = v487;
        if ((swift_isUniquelyReferenced_nonNull_native(v487) & 1) == 0)
        {
          sub_10014E70C(0, *(void *)v78->endpoint + 1LL, 1);
          int64_t v78 = v487;
        }

        unint64_t v90 = *(void *)v78->endpoint;
        unint64_t v89 = *(void *)v78->containerMap;
        if (v90 >= v89 >> 1)
        {
          sub_10014E70C(v89 > 1, v90 + 1, 1);
          int64_t v78 = v487;
        }

        *(void *)v78->endpoint = v90 + 1;
        BOOL v84 = (_TtC18TrustedPeersHelper6Client *)sub_100041608( (uint64_t)v69,  (uint64_t)&v78->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v65 + 80)
                                                                                             + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))
                                                                                           + *(void *)(v65 + 72) * v90],
                                                   type metadata accessor for ViewKeys);
        id v83 = (_TtC18TrustedPeersHelper6Client *)((char *)v83 + 8);
        SEL v86 = (void *)((char *)v86 - 1);
      }

      while (v86);
    }

    Swift::String v91 = v78;
    v487 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    BOOL v92 = v482;
    specialized ContiguousArray.reserveCapacity(_:)(v482);
    id v93 = 0LL;
    a3 = v472;
    uint64_t v94 = v483;
    do
    {
      if (v484) {
        id v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v93, v94);
      }
      else {
        id v95 = *(id *)(v94 + 8LL * (void)v93 + 32);
      }
      id v96 = v95;
      id v93 = (void *)((char *)v93 + 1);
      id v97 = [v95 tlk];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v98);
      uint64_t v99 = *(void *)v487->endpoint;
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v99);
      uint64_t v100 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v99, v97);
      specialized ContiguousArray._endMutation()(v100);
    }

    while (v92 != v93);
    BOOL v82 = v487;
    a4 = (uint64_t)v478;
    BOOL v81 = v91;
  }

  else
  {
    BOOL v81 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    BOOL v82 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  uint64_t v101 = (uint64_t)[a3 epoch];
  SEL v102 = v475;
  if (v101 < 0)
  {
    __break(1u);
    goto LABEL_117;
  }

  id v124 = (void *)sub_1000E04C0(v82, (uint64_t)v475, v475, v101);
  swift_bridgeObjectRelease(v82, v125, v126, v127, v128, v129, v130, v131);
  v484 = v81;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0) {
      uint64_t v439 = a4;
    }
    else {
      uint64_t v439 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a4);
    uint64_t v132 = _CocoaArrayWrapper.endIndex.getter(v439);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a4, v440, v441, v442, v443, v444, v445, v446);
  }

  else
  {
    uint64_t v132 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v132)
  {
    id v137 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    goto LABEL_50;
  }

  v487 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  sub_10014E6E0(0, v132 & ~(v132 >> 63), 0);
  if (v132 < 0)
  {
    __break(1u);
    swift_once(&qword_100250EB8, sub_1000DD078);
    uint64_t v150 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v150, (uint64_t)qword_1002567D0);
    swift_errorRetain(0LL);
    uint64_t v151 = swift_errorRetain(0LL);
    id v105 = (os_log_s *)Logger.logObject.getter(v151);
    os_log_type_t v109 = static os_log_type_t.error.getter(v105, v152, v153, v154);
    if (os_log_type_enabled(v105, v109))
    {
      uint64_t v110 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v111 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
      v487 = v111;
      *(_DWORD *)uint64_t v110 = 136446210;
      uint64_t v485 = 0LL;
      swift_errorRetain(0LL);
      uint64_t v155 = sub_100007578(&qword_100251D70);
      uint64_t v156 = String.init<A>(describing:)(&v485, v155);
      unint64_t v158 = (_TtC18TrustedPeersHelper6Client *)v157;
      uint64_t v485 = sub_10017C4C4(v156, v157, (uint64_t *)&v487);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v110 + 4, v110 + 12);
      swift_bridgeObjectRelease(v158, v159, v160, v161, v162, v163, v164, v165);
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v123 = "Unable to create peer for joining: %{public}s";
      goto LABEL_53;
    }

    goto LABEL_54;
  }

  v482 = v124;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    for (uint64_t i = 0LL; i != v132; ++i)
    {
      uint64_t v134 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v478);
      v447 = (_TtC18TrustedPeersHelper6Client *)__chkstk_darwin(v134, v135);
      uint64_t v136 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
      static Message.with(_:)(sub_100176B54, &v449 - 4, v481, v136);
      swift_unknownObjectRelease(v134);
      id v137 = v487;
      if ((swift_isUniquelyReferenced_nonNull_native(v487) & 1) == 0)
      {
        sub_10014E6E0(0, *(void *)v137->endpoint + 1LL, 1);
        id v137 = v487;
      }

      unint64_t v139 = *(void *)v137->endpoint;
      unint64_t v138 = *(void *)v137->containerMap;
      if (v139 >= v138 >> 1)
      {
        sub_10014E6E0(v138 > 1, v139 + 1, 1);
        id v137 = v487;
      }

      *(void *)v137->endpoint = v139 + 1;
      sub_100041608( v477,  (uint64_t)&v137->_TtCs12_SwiftObject_opaque[((v480[2].endpoint[0] + 32LL) & ~(unint64_t)v480[2].endpoint[0])
                                                 + *(void *)&v480[2]._TtCs12_SwiftObject_opaque[8] * v139],
        type metadata accessor for TLKShare);
    }
  }

  else
  {
    BOOL v140 = (_TtC18TrustedPeersHelper6Client *)(a4 + 32);
    uint64_t v141 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
    uint64_t v143 = v141;
    do
    {
      __chkstk_darwin(v141, v142);
      v447 = v144;
      id v145 = v144;
      static Message.with(_:)(sub_100176B54, &v449 - 4, v481, v143);

      id v137 = v487;
      if ((swift_isUniquelyReferenced_nonNull_native(v487) & 1) == 0)
      {
        sub_10014E6E0(0, *(void *)v137->endpoint + 1LL, 1);
        id v137 = v487;
      }

      unint64_t v147 = *(void *)v137->endpoint;
      unint64_t v146 = *(void *)v137->containerMap;
      if (v147 >= v146 >> 1)
      {
        sub_10014E6E0(v146 > 1, v147 + 1, 1);
        id v137 = v487;
      }

      *(void *)v137->endpoint = v147 + 1;
      uint64_t v141 = sub_100041608( (uint64_t)v476,  (uint64_t)&v137->_TtCs12_SwiftObject_opaque[((v480[2].endpoint[0] + 32LL) & ~(unint64_t)v480[2].endpoint[0])
                                                        + *(void *)&v480[2]._TtCs12_SwiftObject_opaque[8] * v147],
               type metadata accessor for TLKShare);
      BOOL v140 = (_TtC18TrustedPeersHelper6Client *)((char *)v140 + 8);
      --v132;
    }

    while (v132);
  }

  a3 = v472;
  SEL v102 = v475;
  id v124 = v482;
LABEL_50:
  v487 = (_TtC18TrustedPeersHelper6Client *)v124;
  sub_1000E4A3C(v137);
  uint64_t v148 = v487;
  v448 = v102;
  uint64_t v149 = v468;
  id v167 = sub_100123BD4( v468,  v470,  (uint64_t)a9,  (uint64_t *)a3,  a10,  0LL,  0LL,  a11,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v448);
  v481 = v148;
  sub_100041608(v149, v471, type metadata accessor for Peer);
  uint64_t v168 = qword_100250EB8;
  id v169 = v167;
  if (v168 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v170 = type metadata accessor for Logger(0LL);
  uint64_t v171 = sub_100006BAC(v170, (uint64_t)qword_1002567D0);
  id v172 = (_TtC18TrustedPeersHelper6Client *)v169;
  v482 = (void *)v171;
  id v173 = (os_log_s *)Logger.logObject.getter(v172);
  os_log_type_t v174 = static os_log_type_t.info.getter(v173);
  BOOL v175 = os_log_type_enabled(v173, v174);
  v480 = a9;
  if (v175)
  {
    unint64_t v176 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v177 = (_TtC18TrustedPeersHelper6Client **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v176 = 138543362;
    v487 = v172;
    uint64_t v178 = v172;
    uint64_t v179 = v172;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v487, v488, v176 + 4, v176 + 12);
    *unint64_t v177 = v178;

    id v172 = v178;
    _os_log_impl((void *)&_mh_execute_header, v173, v174, "dynamic info: %{public}@", v176, 0xCu);
    uint64_t v180 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v177, 1LL, v180);
    swift_slowDealloc(v177, -1LL, -1LL);
    swift_slowDealloc(v176, -1LL, -1LL);
  }

  else
  {

    id v173 = (os_log_s *)v172;
  }

  uint64_t v181 = v466;
  uint64_t v182 = v465;

  sub_10000FC68(v471 + *(int *)(v467 + 32), v182, &qword_100251F18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v463 + 48))(v182, 1LL, v464) == 1)
  {
    *(_OWORD *)uint64_t v181 = xmmword_1001DE6F0;
    *(_OWORD *)(v181 + 16) = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v182, &qword_100251F18);
  }

  else
  {
    sub_100041608(v182, v181, type metadata accessor for SignedPeerStableInfo);
  }

  uint64_t v183 = *(void *)v181;
  unint64_t v184 = *(void *)(v181 + 8);
  uint64_t v185 = *(void *)(v181 + 16);
  unint64_t v186 = *(void *)(v181 + 24);
  id v187 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  sub_1000084E8(v183, v184);
  sub_1000084E8(v185, v186);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v189 = Data._bridgeToObjectiveC()().super.isa;
  os_log_type_t v190 = (char *)[v187 initWithData:isa sig:v189];
  sub_10000852C(v185, v186);
  sub_10000852C(v183, v184);

  sub_1000415CC(v181, type metadata accessor for SignedPeerStableInfo);
  if (!v190)
  {
    swift_bridgeObjectRelease(v481, v191, v192, v193, v194, v195, v196, v197);
    swift_bridgeObjectRelease(v484, v201, v202, v203, v204, v205, v206, v207);
    uint64_t v209 = (os_log_s *)Logger.logObject.getter(v208);
    os_log_type_t v210 = static os_log_type_t.info.getter(v209);
    if (os_log_type_enabled(v209, v210))
    {
      uint64_t v211 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v211 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v209,  v210,  "Unable to create new peer stable info for joining",  v211,  2u);
      swift_slowDealloc(v211, -1LL, -1LL);
    }

    unint64_t v212 = sub_100043F74();
    uint64_t v213 = swift_allocError(&type metadata for ContainerError, v212, 0LL, 0LL);
    *(_OWORD *)uint64_t v214 = xmmword_1001DEA00;
    *(_BYTE *)(v214 + 16) = 13;
    v473(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v213);

    swift_errorRelease();
    return sub_1000415CC(v471, type metadata accessor for Peer);
  }

  uint64_t v198 = v461;
  uint64_t v199 = v470;
  uint64_t v200 = v480;
  sub_100142BBC(v470, v480, v461);
  v476 = v190;
  uint64_t v465 = a14;
  sub_100041608(v198, v462, type metadata accessor for Bottle);
  uint64_t v215 = swift_bridgeObjectRetain_n(v200, 2LL);
  uint64_t v216 = (os_log_s *)Logger.logObject.getter(v215);
  os_log_type_t v217 = static os_log_type_t.info.getter(v216);
  BOOL v218 = os_log_type_enabled(v216, v217);
  v479 = v172;
  uint64_t v477 = 0LL;
  unint64_t v466 = a15;
  if (v218)
  {
    id v219 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v220 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v487 = v220;
    *(_DWORD *)id v219 = 136446210;
    swift_bridgeObjectRetain(v480);
    uint64_t v485 = sub_10017C4C4(v199, (unint64_t)v480, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v219 + 4, v219 + 12);
    swift_bridgeObjectRelease_n(v480, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v216, v217, "Beginning establish for peer %{public}s", v219, 0xCu);
    swift_arrayDestroy(v220, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v220, -1LL, -1LL);
    swift_slowDealloc(v219, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v200, 2LL);
  }

  sub_1000084E8(a12, a13);
  uint64_t v221 = sub_1000084E8(a12, a13);
  SEL v222 = (os_log_s *)Logger.logObject.getter(v221);
  os_log_type_t v223 = static os_log_type_t.info.getter(v222);
  BOOL v224 = os_log_type_enabled(v222, v223);
  v475 = a17;
  uint64_t v468 = a16;
  if (v224)
  {
    id v225 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v226 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v487 = v226;
    *(_DWORD *)id v225 = 136446210;
    Swift::String v227 = Data.base64EncodedString(options:)(0LL);
    uint64_t v485 = sub_10017C4C4(v227._countAndFlagsBits, (unint64_t)v227._object, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v225 + 4, v225 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v227._object, v228, v229, v230, v231, v232, v233, v234);
    sub_10000852C(a12, a13);
    sub_10000852C(a12, a13);
    _os_log_impl((void *)&_mh_execute_header, v222, v223, "Establish permanentInfo: %{public}s", v225, 0xCu);
    swift_arrayDestroy(v226, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v226, -1LL, -1LL);
    swift_slowDealloc(v225, -1LL, -1LL);
  }

  else
  {
    sub_10000852C(a12, a13);
    sub_10000852C(a12, a13);
  }

  unint64_t v235 = v466;
  uint64_t v236 = v465;
  uint64_t v238 = a18;
  unint64_t v237 = a19;
  sub_1000084E8(v465, v466);
  uint64_t v239 = sub_1000084E8(v236, v235);
  uint64_t v240 = (os_log_s *)Logger.logObject.getter(v239);
  os_log_type_t v241 = static os_log_type_t.info.getter(v240);
  if (os_log_type_enabled(v240, v241))
  {
    uint64_t v242 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v243 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v487 = v243;
    uint64_t v465 = a18;
    *(_DWORD *)uint64_t v242 = 136446210;
    Swift::String v244 = Data.base64EncodedString(options:)(0LL);
    uint64_t v485 = sub_10017C4C4(v244._countAndFlagsBits, (unint64_t)v244._object, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v242 + 4, v242 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v244._object, v245, v246, v247, v248, v249, v250, v251);
    sub_10000852C(v236, v235);
    uint64_t v238 = v465;
    sub_10000852C(v236, v235);
    _os_log_impl((void *)&_mh_execute_header, v240, v241, "Establish permanentInfoSig: %{public}s", v242, 0xCu);
    swift_arrayDestroy(v243, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v243, -1LL, -1LL);
    swift_slowDealloc(v242, -1LL, -1LL);
  }

  else
  {
    sub_10000852C(v236, v235);
    sub_10000852C(v236, v235);
  }

  uint64_t v252 = v475;
  uint64_t v253 = v468;
  sub_1000084E8(v468, (unint64_t)v475);
  uint64_t v254 = sub_1000084E8(v253, (unint64_t)v252);
  NSString v255 = (os_log_s *)Logger.logObject.getter(v254);
  os_log_type_t v256 = static os_log_type_t.info.getter(v255);
  if (os_log_type_enabled(v255, v256))
  {
    uint64_t v257 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v258 = (void *)swift_slowAlloc(32LL, -1LL);
    unint64_t v466 = a19;
    unint64_t v259 = v258;
    v487 = (_TtC18TrustedPeersHelper6Client *)v258;
    *(_DWORD *)uint64_t v257 = 136446210;
    Swift::String v260 = Data.base64EncodedString(options:)(0LL);
    uint64_t v485 = sub_10017C4C4(v260._countAndFlagsBits, (unint64_t)v260._object, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v257 + 4, v257 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v260._object, v261, v262, v263, v264, v265, v266, v267);
    sub_10000852C(v253, (unint64_t)v252);
    sub_10000852C(v253, (unint64_t)v252);
    _os_log_impl((void *)&_mh_execute_header, v255, v256, "Establish stableInfo: %{public}s", v257, 0xCu);
    swift_arrayDestroy(v259, 1LL, (char *)&type metadata for Any + 8);
    id v268 = v259;
    unint64_t v237 = v466;
    swift_slowDealloc(v268, -1LL, -1LL);
    swift_slowDealloc(v257, -1LL, -1LL);
  }

  else
  {
    sub_10000852C(v253, (unint64_t)v252);
    sub_10000852C(v253, (unint64_t)v252);
  }

  sub_1000084E8(v238, v237);
  uint64_t v269 = sub_1000084E8(v238, v237);
  NSString v270 = (os_log_s *)Logger.logObject.getter(v269);
  os_log_type_t v271 = static os_log_type_t.info.getter(v270);
  if (os_log_type_enabled(v270, v271))
  {
    unint64_t v272 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v273 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v487 = v273;
    *(_DWORD *)unint64_t v272 = 136446210;
    Swift::String v274 = Data.base64EncodedString(options:)(0LL);
    uint64_t v485 = sub_10017C4C4(v274._countAndFlagsBits, (unint64_t)v274._object, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v272 + 4, v272 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v274._object, v275, v276, v277, v278, v279, v280, v281);
    sub_10000852C(v238, v237);
    sub_10000852C(v238, v237);
    _os_log_impl((void *)&_mh_execute_header, v270, v271, "Establish stableInfoSig: %{public}s", v272, 0xCu);
    swift_arrayDestroy(v273, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v273, -1LL, -1LL);
    swift_slowDealloc(v272, -1LL, -1LL);
  }

  else
  {
    sub_10000852C(v238, v237);
    sub_10000852C(v238, v237);
  }

  uint64_t v282 = (uint64_t)v456;
  uint64_t v283 = v459;
  uint64_t v284 = v460;
  v285 = v481;
  uint64_t v286 = v458;
  uint64_t v287 = sub_10004164C(v471, v458, type metadata accessor for Peer);
  uint64_t v288 = (os_log_s *)Logger.logObject.getter(v287);
  os_log_type_t v289 = static os_log_type_t.info.getter(v288);
  if (os_log_type_enabled(v288, v289))
  {
    BOOL v290 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v291 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v487 = v291;
    *(_DWORD *)BOOL v290 = 136446210;
    uint64_t v292 = v452;
    sub_10000FC68(v286 + *(int *)(v467 + 36), v452, &qword_100256CA0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v455 + 48))(v292, 1LL, v283) == 1)
    {
      uint64_t v293 = v450;
      _OWORD *v450 = xmmword_1001DE6F0;
      v293[1] = xmmword_1001DE6F0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      sub_100041590(v292, &qword_100256CA0);
    }

    else
    {
      uint64_t v293 = v450;
      sub_100041608(v292, (uint64_t)v450, type metadata accessor for SignedPeerDynamicInfo);
    }

    uint64_t v294 = *(void *)v293;
    unint64_t v295 = *((void *)v293 + 1);
    sub_1000084E8(*(void *)v293, v295);
    sub_1000415CC((uint64_t)v293, type metadata accessor for SignedPeerDynamicInfo);
    Swift::String v296 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v294, v295);
    uint64_t v485 = sub_10017C4C4(v296._countAndFlagsBits, (unint64_t)v296._object, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v290 + 4, v290 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v296._object, v297, v298, v299, v300, v301, v302, v303);
    sub_1000415CC(v458, type metadata accessor for Peer);
    _os_log_impl((void *)&_mh_execute_header, v288, v289, "Establish dynamicInfo: %{public}s", v290, 0xCu);
    swift_arrayDestroy(v291, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v291, -1LL, -1LL);
    swift_slowDealloc(v290, -1LL, -1LL);

    uint64_t v283 = v459;
    uint64_t v284 = v460;
    v285 = v481;
  }

  else
  {
    sub_1000415CC(v286, type metadata accessor for Peer);
  }

  uint64_t v304 = sub_10004164C(v471, v284, type metadata accessor for Peer);
  int64_t v305 = (os_log_s *)Logger.logObject.getter(v304);
  os_log_type_t v306 = static os_log_type_t.info.getter(v305);
  if (os_log_type_enabled(v305, v306))
  {
    id v307 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v308 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v487 = v308;
    *(_DWORD *)id v307 = 136446210;
    sub_10000FC68(v284 + *(int *)(v467 + 36), v282, &qword_100256CA0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v455 + 48))(v282, 1LL, v283) == 1)
    {
      BOOL v309 = v451;
      _OWORD *v451 = xmmword_1001DE6F0;
      v309[1] = xmmword_1001DE6F0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      uint64_t v310 = v282;
      id v311 = v309;
      sub_100041590(v310, &qword_100256CA0);
    }

    else
    {
      uint64_t v312 = v282;
      id v311 = v451;
      sub_100041608(v312, (uint64_t)v451, type metadata accessor for SignedPeerDynamicInfo);
    }

    uint64_t v313 = *((void *)v311 + 2);
    unint64_t v314 = *((void *)v311 + 3);
    sub_1000084E8(v313, v314);
    sub_1000415CC((uint64_t)v311, type metadata accessor for SignedPeerDynamicInfo);
    Swift::String v315 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v313, v314);
    uint64_t v485 = sub_10017C4C4(v315._countAndFlagsBits, (unint64_t)v315._object, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v307 + 4, v307 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v315._object, v316, v317, v318, v319, v320, v321, v322);
    sub_1000415CC(v460, type metadata accessor for Peer);
    _os_log_impl((void *)&_mh_execute_header, v305, v306, "Establish dynamicInfoSig: %{public}s", v307, 0xCu);
    swift_arrayDestroy(v308, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v308, -1LL, -1LL);
    swift_slowDealloc(v307, -1LL, -1LL);

    v285 = v481;
  }

  else
  {
    sub_1000415CC(v284, type metadata accessor for Peer);
  }

  BOOL v323 = v484;
  swift_bridgeObjectRetain(v484);
  uint64_t v324 = swift_bridgeObjectRetain(v285);
  id v325 = (os_log_s *)Logger.logObject.getter(v324);
  os_log_type_t v326 = static os_log_type_t.info.getter(v325);
  if (os_log_type_enabled(v325, v326))
  {
    uint64_t v327 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v327 = 134218240;
    v487 = *(_TtC18TrustedPeersHelper6Client **)v323->endpoint;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v487, v488, v327 + 4, v327 + 12);
    swift_bridgeObjectRelease(v323, v328, v329, v330, v331, v332, v333, v334);
    *(_WORD *)(v327 + 12) = 2048;
    v487 = *(_TtC18TrustedPeersHelper6Client **)v285->endpoint;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v487, v488, v327 + 14, v327 + 22);
    swift_bridgeObjectRelease(v285, v335, v336, v337, v338, v339, v340, v341);
    _os_log_impl( (void *)&_mh_execute_header,  v325,  v326,  "Establish introducing %ld key sets, %ld tlk shares",  (uint8_t *)v327,  0x16u);
    swift_slowDealloc(v327, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(v285, v342, v343, v344, v345, v346, v347, v348);
    swift_bridgeObjectRelease(v323, v349, v350, v351, v352, v353, v354, v355);
  }

  uint64_t v356 = v457;
  uint64_t v357 = sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
  uint64_t v358 = v477;
  uint64_t v359 = Message.serializedData(partial:)(0LL, v356, v357);
  if (!v358)
  {
    uint64_t v361 = v359;
    unint64_t v362 = v360;
    Swift::String v363 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v361, v362);
    uint64_t v364 = swift_bridgeObjectRetain(v363._object);
    BOOL v365 = (os_log_s *)Logger.logObject.getter(v364);
    os_log_type_t v366 = static os_log_type_t.info.getter(v365);
    if (os_log_type_enabled(v365, v366))
    {
      SEL v367 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v368 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
      v487 = v368;
      *(_DWORD *)SEL v367 = 136446210;
      swift_bridgeObjectRetain(v363._object);
      uint64_t v485 = sub_10017C4C4(v363._countAndFlagsBits, (unint64_t)v363._object, (uint64_t *)&v487);
      v285 = v481;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v367 + 4, v367 + 12);
      swift_bridgeObjectRelease_n(v363._object, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v365, v366, "Establish bottle: %{public}s", v367, 0xCu);
      swift_arrayDestroy(v368, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v368, -1LL, -1LL);
      swift_slowDealloc(v367, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v363._object, 2LL);
    }

    uint64_t v369 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
    uint64_t v420 = Message.serializedData(partial:)(0LL, v467, v369);
    unint64_t v422 = v421;
    Swift::String v423 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v420, v422);
    uint64_t v424 = swift_bridgeObjectRetain(v423._object);
    id v371 = (void *)Logger.logObject.getter(v424);
    os_log_type_t v425 = static os_log_type_t.info.getter(v371);
    if (!os_log_type_enabled((os_log_t)v371, v425))
    {

      uint64_t v390 = swift_bridgeObjectRelease_n(v423._object, 2LL);
      goto LABEL_107;
    }

    uint64_t v426 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v427 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
    v487 = v427;
    *(_DWORD *)uint64_t v426 = 136446210;
    swift_bridgeObjectRetain(v423._object);
    uint64_t v485 = sub_10017C4C4(v423._countAndFlagsBits, (unint64_t)v423._object, (uint64_t *)&v487);
    v285 = v481;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v426 + 4, v426 + 12);
    swift_bridgeObjectRelease_n(v423._object, 3LL);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v371, v425, "Establish peer: %{public}s", v426, 0xCu);
    swift_arrayDestroy(v427, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v427, -1LL, -1LL);
    swift_slowDealloc(v426, -1LL, -1LL);
    goto LABEL_106;
  }

  swift_errorRetain(v358);
  uint64_t v370 = swift_errorRetain(v358);
  id v371 = (void *)Logger.logObject.getter(v370);
  os_log_type_t v375 = static os_log_type_t.error.getter(v371, v372, v373, v374);
  if (!os_log_type_enabled((os_log_t)v371, v375))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
LABEL_106:

    goto LABEL_107;
  }

  uint64_t v376 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  id v377 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
  v487 = v377;
  *(_DWORD *)uint64_t v376 = 136446210;
  uint64_t v485 = v358;
  swift_errorRetain(v358);
  uint64_t v378 = sub_100007578(&qword_100251D70);
  uint64_t v379 = String.init<A>(describing:)(&v485, v378);
  v381 = (_TtC18TrustedPeersHelper6Client *)v380;
  uint64_t v485 = sub_10017C4C4(v379, v380, (uint64_t *)&v487);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v485, v486, v376 + 4, v376 + 12);
  __int128 v382 = v381;
  v285 = v481;
  swift_bridgeObjectRelease(v382, v383, v384, v385, v386, v387, v388, v389);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v371,  v375,  "Establish unable to encode bottle/peer: %{public}s",  v376,  0xCu);
  swift_arrayDestroy(v377, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v377, -1LL, -1LL);
  swift_slowDealloc(v376, -1LL, -1LL);

  uint64_t v390 = swift_errorRelease();
LABEL_107:
  uint64_t v392 = (uint64_t)v454;
  id v393 = v469;
  uint64_t v394 = v453;
  int64_t v395 = v476;
  __chkstk_darwin(v390, v391);
  uint64_t v396 = v462;
  *(&v449 - 4) = v471;
  *(&v449 - 3) = v396;
  uint64_t v397 = v484;
  v447 = v484;
  v448 = v285;
  uint64_t v398 = sub_1000077B8( &qword_1002526A8,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
  static Message.with(_:)(sub_100172A98, &v449 - 6, v394, v398);
  swift_bridgeObjectRelease(v285, v399, v400, v401, v402, v403, v404, v405);
  uint64_t v407 = *(void *)&v393[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
  uint64_t v406 = *(void *)&v393[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
  v482 = sub_1000084C4(&v393[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v407);
  id v408 = v393;
  uint64_t v409 = (void *)swift_allocObject(&unk_100238F78, 96LL, 7LL);
  v409[2] = v397;
  v409[3] = v408;
  uint64_t v411 = v472;
  __int128 v410 = (void (*)(void, void, void, void, void))v473;
  v409[4] = v472;
  v409[5] = v395;
  uint64_t v412 = v474;
  v409[6] = v410;
  v409[7] = v412;
  uint64_t v413 = v480;
  v409[8] = v470;
  v409[9] = v413;
  uint64_t v414 = v483;
  id v415 = v478;
  v409[10] = v483;
  v409[11] = v415;
  uint64_t v416 = *(void *)(v406 + 16);
  v484 = *(_TtC18TrustedPeersHelper6Client **)(v416 + 16);
  swift_bridgeObjectRetain(v414);
  swift_bridgeObjectRetain(v415);
  swift_bridgeObjectRetain(v413);
  id v417 = v408;
  id v418 = v411;
  id v419 = v395;
  swift_retain(v412);
  ((void (*)(uint64_t, uint64_t (*)(unsigned int (*)(uint64_t, uint64_t, uint64_t)), void *, uint64_t, uint64_t))v484)( v392,  sub_100172B10,  v409,  v407,  v416);

  swift_release(v409);
  sub_1000415CC(v392, type metadata accessor for EstablishRequest);
  sub_1000415CC(v462, type metadata accessor for Bottle);
  return sub_1000415CC(v471, type metadata accessor for Peer);
}

void sub_1000FFB4C( uint64_t a1, uint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, _TtC18TrustedPeersHelper6Client *a5)
{
  uint64_t v10 = type metadata accessor for Bottle(0LL);
  __chkstk_darwin(v10, v11);
  id v13 = &v48[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v14, v15);
  os_log_type_t v17 = &v48[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10004164C(a2, (uint64_t)v17, v18);
  swift_bridgeObjectRetain(a5);
  EstablishRequest.peer.setter((uint64_t)v17);
  sub_10004164C(a3, (uint64_t)v13, type metadata accessor for Bottle);
  EstablishRequest.bottle.setter((uint64_t)v13);
  uint64_t v19 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  swift_bridgeObjectRetain(a4);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v19)) & 1) == 0)
  {
    uint64_t v20 = *(void *)(a1 + v19);
    uint64_t v21 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v22 = swift_retain(v20);
    uint64_t v23 = sub_1000870D0(v22);
    uint64_t v24 = *(void *)(a1 + v19);
    *(void *)(a1 + v19) = v23;
    swift_release(v24);
  }

  uint64_t v25 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v19)
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess(v25, v49, 1LL, 0LL);
  uint64_t v26 = *v25;
  *uint64_t v25 = a4;
  swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v19)) & 1) == 0)
  {
    uint64_t v34 = *(void *)(a1 + v19);
    uint64_t v35 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    uint64_t v36 = swift_retain(v34);
    uint64_t v37 = sub_1000870D0(v36);
    uint64_t v38 = *(void *)(a1 + v19);
    *(void *)(a1 + v19) = v37;
    swift_release(v38);
  }

  uint64_t v39 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v19)
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess(v39, v48, 1LL, 0LL);
  uint64_t v40 = *v39;
  *uint64_t v39 = a5;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
}

uint64_t sub_1000FFD5C( unsigned int (*a1)(uint64_t, uint64_t, uint64_t), _TtC18TrustedPeersHelper6Client *a2, uint8_t *a3, void *a4, void *a5, void (*a6)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, void *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v206 = a8;
  id v219 = a6;
  uint64_t v220 = a7;
  id v215 = a4;
  id v216 = a5;
  os_log_type_t v217 = a3;
  BOOL v224 = a1;
  uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v228 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  Swift::String v227 = (char *)&v203 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v16);
  id v18 = (char *)&v203 - v17;
  uint64_t v211 = type metadata accessor for JSONEncodingOptions(0LL);
  uint64_t v210 = *(void *)(v211 - 8);
  __chkstk_darwin(v211, v19);
  uint64_t v214 = (char *)&v203 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v207 = (uint64_t)&v203 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v209 = (uint64_t)&v203 - v27;
  __chkstk_darwin(v26, v28);
  uint64_t v225 = (uint64_t)&v203 - v29;
  uint64_t v30 = type metadata accessor for Changes(0LL);
  uint64_t v213 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30, v31);
  id v205 = (uint8_t **)((char *)&v203 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = __chkstk_darwin(v32, v34);
  uint64_t v208 = (uint8_t **)((char *)&v203 - v36);
  __chkstk_darwin(v35, v37);
  uint64_t v39 = (char *)&v203 - v38;
  uint64_t v212 = type metadata accessor for EstablishResponse(0LL);
  __chkstk_darwin(v212, v40);
  id v42 = (_TtC18TrustedPeersHelper6Client **)((char *)&v203 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v222 = sub_100007578((uint64_t *)&unk_100256EB0);
  __chkstk_darwin(v222, v43);
  os_log_type_t v223 = (uint64_t *)((char *)&v203 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v45 = type metadata accessor for Logger(0LL);
  uint64_t v46 = sub_100006BAC(v45, (uint64_t)qword_1002567D0);
  uint64_t v47 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.info.getter(v48);
  BOOL v50 = os_log_type_enabled(v48, v49);
  uint64_t v226 = v42;
  uint64_t v221 = v46;
  uint64_t v218 = v30;
  if (v50)
  {
    id v204 = v39;
    uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    v230[0] = v52;
    *(_DWORD *)uint64_t v51 = 136446210;
    int64_t v203 = v51 + 4;
    uint64_t v53 = type metadata accessor for ViewKeys(0LL);
    uint64_t v54 = swift_bridgeObjectRetain(a2);
    uint64_t v55 = Array.description.getter(v54, v53);
    unint64_t v57 = (unint64_t)v56;
    swift_bridgeObjectRelease(a2, v56, v58, v59, v60, v61, v62, v63);
    uint64_t v229 = sub_10017C4C4(v55, v57, v230);
    uint64_t v64 = v226;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v203, v51 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    uint64_t v65 = (_TtC18TrustedPeersHelper6Client *)v57;
    uint64_t v39 = v204;
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Establish: viewKeys: %{public}s", v51, 0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    uint64_t v73 = v51;
    uint64_t v30 = v218;
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  else
  {
    uint64_t v64 = v42;

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  BOOL v74 = v223;
  sub_10000FC68((uint64_t)v224, (uint64_t)v223, (uint64_t *)&unk_100256EB0);
  if (swift_getEnumCaseMultiPayload(v74, v222) != 1)
  {
    sub_100041608((uint64_t)v74, (uint64_t)v64, type metadata accessor for EstablishResponse);
    os_log_type_t v223 = (uint64_t *)((char *)v64 + *(int *)(v212 + 24));
    uint64_t v82 = v225;
    sub_10000FC68((uint64_t)v223, v225, (uint64_t *)&unk_100256C90);
    BOOL v224 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48);
    if (v224(v82, 1LL, v30) == 1)
    {
      *(void *)uint64_t v39 = 0LL;
      *((void *)v39 + 1) = 0xE000000000000000LL;
      *((void *)v39 + 2) = _swiftEmptyArrayStorage;
      *(_OWORD *)(v39 + 24) = xmmword_1001DE6F0;
      *(_OWORD *)(v39 + 40) = xmmword_1001DE6F0;
      v39[56] = 0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      uint64_t v83 = sub_100041590(v225, (uint64_t *)&unk_100256C90);
    }

    else
    {
      uint64_t v83 = sub_100041608(v225, (uint64_t)v39, type metadata accessor for Changes);
    }

    uint64_t v103 = v214;
    JSONEncodingOptions.init()(v83);
    uint64_t v104 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
    uint64_t v105 = (uint64_t)v39;
    uint64_t v106 = 0LL;
    uint64_t v107 = Message.jsonString(options:)(v103, v30, v104);
    unint64_t v109 = v108;
    (*(void (**)(char *, uint64_t))(v210 + 8))(v103, v211);
    sub_1000415CC(v105, type metadata accessor for Changes);
    uint64_t v110 = swift_bridgeObjectRetain(v109);
    uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
    os_log_type_t v112 = static os_log_type_t.info.getter(v111);
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v225 = swift_slowAlloc(32LL, -1LL);
      v230[0] = v225;
      *(_DWORD *)uint64_t v113 = 136446210;
      swift_bridgeObjectRetain(v109);
      uint64_t v229 = sub_10017C4C4(v107, v109, v230);
      uint64_t v64 = v226;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v113 + 4, v113 + 12);
      swift_bridgeObjectRelease_n(v109, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Establish returned changes: %{public}s", v113, 0xCu);
      uint64_t v114 = v225;
      swift_arrayDestroy(v225, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1LL, -1LL);
      swift_slowDealloc(v113, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v109, 2LL);
    }

    SEL v116 = *v64;
    v230[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v117 = *(void *)v116->endpoint;
    if (v117)
    {
      uint64_t v225 = 0LL;
      sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
      int64_t v118 = &v116->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v228 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80)];
      uint64_t v119 = *(void *)(v228 + 72);
      id v120 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v228 + 16);
      uint64_t v222 = (uint64_t)v116;
      swift_bridgeObjectRetain(v116);
      do
      {
        v120(v18, v118, v12);
        id v129 = v227;
        v120(v227, (unsigned __int8 *)v18, v12);
        uint64_t v130 = CKRecord.init(_:)(v129);
        uint64_t v131 = (*(uint64_t (**)(char *, uint64_t))(v228 + 8))(v18, v12);
        if (v130)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v131);
          unint64_t v133 = *(void *)((v230[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v132 = *(void *)((v230[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v133 >= v132 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1LL);
          }
          uint64_t v121 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v133, v130);
          specialized Array._endMutation()(v121);
        }

        v118 += v119;
        --v117;
      }

      while (v117);
      uint64_t v134 = (_TtC18TrustedPeersHelper6Client *)v230[0];
      uint64_t v106 = v225;
      uint64_t v64 = v226;
      SEL v116 = (_TtC18TrustedPeersHelper6Client *)v222;
    }

    else
    {
      swift_bridgeObjectRetain(v116);
      uint64_t v134 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease(v116, v122, v123, v124, v125, v126, v127, v128);
    id v135 = [v215 modelID];
    int v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
    unint64_t v138 = v137;

    unint64_t v139 = v217;
    id v140 = sub_10011F6F8(v136, v138, v216);
    if (v106)
    {
      swift_bridgeObjectRelease(v138, v141, v142, v143, v144, v145, v146, v147);
      swift_errorRetain(v106);
      uint64_t v154 = swift_errorRetain(v106);
      uint64_t v155 = (os_log_s *)Logger.logObject.getter(v154);
      os_log_type_t v159 = static os_log_type_t.error.getter(v155, v156, v157, v158);
      if (os_log_type_enabled(v155, v159))
      {
        id v160 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v161 = swift_slowAlloc(32LL, -1LL);
        uint64_t v229 = v106;
        v230[0] = v161;
        *(_DWORD *)id v160 = 136446210;
        swift_errorRetain(v106);
        uint64_t v162 = sub_100007578(&qword_100251D70);
        uint64_t v163 = String.init<A>(describing:)(&v229, v162);
        BOOL v165 = (_TtC18TrustedPeersHelper6Client *)v164;
        uint64_t v229 = sub_10017C4C4(v163, v164, v230);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v160 + 4, v160 + 12);
        swift_bridgeObjectRelease(v165, v166, v167, v168, v169, v170, v171, v172);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v155, v159, "establish handling failed: %{public}s", v160, 0xCu);
        swift_arrayDestroy(v161, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v173 = v161;
        uint64_t v64 = v226;
        swift_slowDealloc(v173, -1LL, -1LL);
        swift_slowDealloc(v160, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain(v106);
      v219(0LL, 0LL, v134, 0LL, v106);
      swift_bridgeObjectRelease(v134, v174, v175, v176, v177, v178, v179, v180);
      swift_errorRelease();
      swift_errorRelease();
    }

    else
    {
      uint64_t v148 = v140;
      swift_bridgeObjectRelease(v138, v141, v142, v143, v144, v145, v146, v147);
      uint64_t v149 = v209;
      sub_10000FC68((uint64_t)v223, v209, (uint64_t *)&unk_100256C90);
      if (v224(v149, 1LL, v218) == 1)
      {
        uint64_t v150 = v208;
        *uint64_t v208 = 0LL;
        v150[1] = 0xE000000000000000LL;
        v150[2] = _swiftEmptyArrayStorage;
        *(_OWORD *)(v150 + 3) = xmmword_1001DE6F0;
        *(_OWORD *)(v150 + 5) = xmmword_1001DE6F0;
        *((_BYTE *)v150 + 56) = 0;
        uint64_t v151 = (uint8_t *)v150;
        _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
        uint64_t v152 = sub_100041590(v149, (uint64_t *)&unk_100256C90);
      }

      else
      {
        uint64_t v151 = (uint8_t *)v208;
        uint64_t v152 = sub_100041608(v149, (uint64_t)v208, type metadata accessor for Changes);
      }

      __chkstk_darwin(v152, v153);
      *(&v203 - 4) = v151;
      *(&v203 - 3) = v139;
      *((_BYTE *)&v203 - 16) = 0;
      NSManagedObjectContext.performAndWait<A>(_:)( &type metadata for (),  sub_100176F50,  &v203 - 6,  &type metadata for () + 1);
      sub_1000415CC((uint64_t)v151, type metadata accessor for Changes);
      uint64_t v182 = v207;
      sub_10000FC68((uint64_t)v223, v207, (uint64_t *)&unk_100256C90);
      if (v224(v182, 1LL, v218) == 1)
      {
        uint64_t v183 = v205;
        *id v205 = 0LL;
        v183[1] = 0xE000000000000000LL;
        v183[2] = _swiftEmptyArrayStorage;
        *(_OWORD *)(v183 + 3) = xmmword_1001DE6F0;
        *(_OWORD *)(v183 + 5) = xmmword_1001DE6F0;
        *((_BYTE *)v183 + 56) = 0;
        _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
        sub_100041590(v182, (uint64_t *)&unk_100256C90);
      }

      else
      {
        uint64_t v183 = v205;
        sub_100041608(v182, (uint64_t)v205, type metadata accessor for Changes);
      }

      char v184 = *((_BYTE *)v183 + 56);
      uint64_t v185 = sub_1000415CC((uint64_t)v183, type metadata accessor for Changes);
      unint64_t v186 = (os_log_s *)Logger.logObject.getter(v185);
      os_log_type_t v187 = static os_log_type_t.info.getter(v186);
      BOOL v188 = os_log_type_enabled(v186, v187);
      if ((v184 & 1) != 0)
      {
        if (v188)
        {
          Class v189 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)Class v189 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v186,  v187,  "establish succeeded, but more changes need fetching...",  v189,  2u);
          swift_slowDealloc(v189, -1LL, -1LL);
        }

        os_log_type_t v190 = (void *)swift_allocObject(&unk_100238FA0, 64LL, 7LL);
        uint64_t v191 = v220;
        v190[2] = v219;
        v190[3] = v191;
        uint64_t v192 = v206;
        v190[4] = v134;
        v190[5] = v192;
        v190[6] = a9;
        v190[7] = v148;
        id v193 = v148;
        swift_retain(v191);
        swift_bridgeObjectRetain(a9);
        sub_100137F18(0, (uint64_t)sub_100172B88, (uint64_t)v190);

        swift_release(v190);
        uint64_t v181 = (uint64_t)v226;
        return sub_1000415CC(v181, type metadata accessor for EstablishResponse);
      }

      if (v188)
      {
        uint64_t v194 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v194 = 0;
        _os_log_impl((void *)&_mh_execute_header, v186, v187, "establish succeeded", v194, 2u);
        swift_slowDealloc(v194, -1LL, -1LL);
      }

      id v195 = v148;
      v219(v206, a9, v134, v148, 0LL);
      swift_bridgeObjectRelease(v134, v196, v197, v198, v199, v200, v201, v202);

      uint64_t v64 = v226;
    }

    uint64_t v181 = (uint64_t)v64;
    return sub_1000415CC(v181, type metadata accessor for EstablishResponse);
  }

  uint64_t v75 = *v74;
  swift_errorRetain(*v74);
  swift_errorRetain(v75);
  swift_errorRetain(v75);
  uint64_t v76 = (void *)_convertErrorToNSError(_:)(v75);
  unsigned int v77 = [v76 isCuttlefishError:1001];

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v78 = swift_errorRelease();
  if (v77)
  {
    unint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    os_log_type_t v80 = static os_log_type_t.info.getter(v79);
    if (os_log_type_enabled(v79, v80))
    {
      BOOL v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "establish returned failed, trying fetch", v81, 2u);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    sub_1000FAFC8(a10, a11, (uint64_t)v219, v220);
  }

  else
  {
    swift_errorRetain(v75);
    uint64_t v84 = swift_errorRetain(v75);
    uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
    os_log_type_t v89 = static os_log_type_t.error.getter(v85, v86, v87, v88);
    if (os_log_type_enabled(v85, v89))
    {
      unint64_t v90 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v91 = swift_slowAlloc(32LL, -1LL);
      uint64_t v229 = v75;
      v230[0] = v91;
      *(_DWORD *)unint64_t v90 = 136446210;
      swift_errorRetain(v75);
      uint64_t v92 = sub_100007578(&qword_100251D70);
      uint64_t v93 = String.init<A>(describing:)(&v229, v92);
      id v95 = (_TtC18TrustedPeersHelper6Client *)v94;
      uint64_t v229 = sub_10017C4C4(v93, v94, v230);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v90 + 4, v90 + 12);
      swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v85, v89, "establish failed: %{public}s", v90, 0xCu);
      swift_arrayDestroy(v91, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1LL, -1LL);
      swift_slowDealloc(v90, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v75);
    v219(0LL, 0LL, (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage, 0LL, v75);
    swift_errorRelease();
  }

  return swift_errorRelease();
}

uint64_t sub_100100D94( uint64_t a1, uint64_t (*a2)(void, void, void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v10, (uint64_t)qword_1002567D0);
    swift_errorRetain(a1);
    uint64_t v11 = swift_errorRetain(a1);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      id v42 = a2;
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = a1;
      uint64_t v44 = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_errorRetain(a1);
      uint64_t v16 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v17 = String.init<A>(describing:)(&v43, v16);
      uint64_t v19 = (_TtC18TrustedPeersHelper6Client *)v18;
      uint64_t v43 = sub_10017C4C4(v17, v18, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v14 + 4, v14 + 12);
      uint64_t v20 = v19;
      a2 = v42;
      swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "fetch-after-establish failed: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v36 = 0LL;
    uint64_t v37 = 0LL;
    uint64_t v38 = a4;
    uint64_t v39 = 0LL;
    uint64_t v40 = a1;
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_100006BAC(v31, (uint64_t)qword_1002567D0);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.info.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "fetch-after-establish succeeded", v35, 2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    uint64_t v36 = a5;
    uint64_t v37 = a6;
    uint64_t v38 = a4;
    uint64_t v39 = a7;
    uint64_t v40 = 0LL;
  }

  return a2(v36, v37, v38, v39, v40);
}

uint64_t sub_100101054( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  return sub_100135B78( a1,  a2,  a3,  a4,  a5,  "setRecoveryKey complete: %{public}s",  0xD000000000000030LL,  0x80000001001F9710LL);
}

void sub_100101078( uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    a2(0LL, a1);
  }

  else
  {
    uint64_t v16 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v17 = swift_allocObject(&unk_100238140, 80LL, 7LL);
    *(void *)(v17 + 16) = a4;
    *(void *)(v17 + 24) = a2;
    *(void *)(v17 + 32) = a3;
    *(void *)(v17 + 40) = a5;
    *(void *)(v17 + 48) = a6;
    *(void *)(v17 + 56) = a7;
    *(void *)(v17 + 64) = a8;
    *(void *)(v17 + 72) = a9;
    unint64_t v18 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238168, 32LL, 7LL);
    *(void *)v18->endpoint = sub_100171480;
    *(void *)v18->containerMap = v17;
    v43[4] = sub_100176BD4;
    uint64_t v44 = v18;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 1107296256LL;
    v43[2] = sub_1000DC9F8;
    v43[3] = &unk_100238180;
    uint64_t v19 = _Block_copy(v43);
    uint64_t v20 = v44;
    SEL v21 = a4;
    swift_retain(a3);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a9);
    swift_retain(v18);
    swift_release(v20, v22, v23, v24, v25, v26, v27, v28);
    [v16 performBlockAndWait:v19];
    _Block_release(v19);
    LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v18, "", 108LL, 3289LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v17, v29, v30, v31, v32, v33, v34, v35);
    swift_release(v18, v36, v37, v38, v39, v40, v41, v42);
  }

void sub_10010121C( char *a1, void (*a2)(void, uint64_t), _TtC18TrustedPeersHelper6Client *a3, uint64_t a4, unint64_t a5, uint64_t a6, _TtC18TrustedPeersHelper6Client *a7, _TtC18TrustedPeersHelper6Client *a8)
{
  uint64_t v16 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v17 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v17)
  {
    unint64_t v18 = v17;
    uint64_t v309 = v16;
    id v311 = a2;
    uint64_t v19 = a1;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    SEL v22 = v21;

    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a7);
    id v31 = (char *)sub_1000097E0(a4, a5, a6, a7);
    BOOL v308 = v22;
    uint64_t v306 = v20;
    int64_t v305 = a8;
    id v307 = a3;
    id v32 = v19;
    id v33 = *(void **)&v19[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    id v314 = v31;
    uint64_t v34 = OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys;
    id v35 = *(_TtC18TrustedPeersHelper6Client **)(*(void *)&v31[OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys]
                                              + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID
                                              + 8);
    id v36 = v33;
    swift_bridgeObjectRetain(v35);
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35, v38, v39, v40, v41, v42, v43, v44);
    v315[0] = 0LL;
    unsigned __int8 v45 = [v36 anyTrustedPeerDistrustsOtherPeer:v37 error:v315];

    if (v315[0])
    {
      id v53 = (id)v315[0];
      swift_bridgeObjectRelease(v308, v54, v55, v56, v57, v58, v59, v60);
      swift_willThrow(v61);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v62 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v62, (uint64_t)qword_1002567D0);
      swift_errorRetain(v53);
      uint64_t v63 = swift_errorRetain(v53);
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v68 = static os_log_type_t.error.getter(v64, v65, v66, v67);
      if (os_log_type_enabled(v64, v68))
      {
        id v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v70 = swift_slowAlloc(32LL, -1LL);
        v315[0] = v70;
        *(_DWORD *)id v69 = 136446210;
        uint64_t v312 = (uint64_t)v53;
        swift_errorRetain(v53);
        uint64_t v71 = sub_100007578(&qword_100251D70);
        uint64_t v72 = String.init<A>(describing:)(&v312, v71);
        BOOL v74 = (_TtC18TrustedPeersHelper6Client *)v73;
        uint64_t v312 = sub_10017C4C4(v72, v73, v315);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &v313, v69 + 4, v69 + 12);
        swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, v68, "failed to create recovery keys: %{public}s", v69, 0xCu);
        swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1LL, -1LL);
        swift_slowDealloc(v69, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      unint64_t v82 = sub_100043F74();
      uint64_t v83 = swift_allocError(&type metadata for ContainerError, v82, 0LL, 0LL);
      *(void *)uint64_t v84 = v53;
      *(void *)(v84 + 8) = 0LL;
      *(_BYTE *)(v84 + 16) = 3;
      swift_errorRetain(v53);
      v311(0LL, v83);
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_15;
    }

    if ((v45 & 1) != 0)
    {
      swift_bridgeObjectRelease(v308, v46, v47, v48, v49, v50, v51, v52);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v85 = type metadata accessor for Logger(0LL);
      uint64_t v86 = sub_100006BAC(v85, (uint64_t)qword_1002567D0);
      uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
      os_log_type_t v91 = static os_log_type_t.error.getter(v87, v88, v89, v90);
      if (os_log_type_enabled(v87, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v91, "Recovery key is distrusted!", v92, 2u);
        swift_slowDealloc(v92, -1LL, -1LL);
      }

      unint64_t v93 = sub_100043F74();
      uint64_t v94 = swift_allocError(&type metadata for ContainerError, v93, 0LL, 0LL);
      *(_OWORD *)uint64_t v95 = xmmword_1001DE9F0;
      *(_BYTE *)(v95 + 16) = 13;
      v311(0LL, v94);
      swift_errorRelease();
      goto LABEL_15;
    }

    id v96 =  [*(id *)(*(void *)&v31[v34] + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingVerificationKey) keyData];
    uint64_t v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
    unint64_t v99 = v98;

    id v100 =  [*(id *)(*(void *)&v31[v34] + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionVerificationKey) keyData];
    uint64_t v303 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v100);
    unint64_t v304 = v101;

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v102 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v102, (uint64_t)qword_1002567D0);
    sub_1000084E8(v97, v99);
    uint64_t v103 = sub_1000084E8(v97, v99);
    uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
    os_log_type_t v105 = static os_log_type_t.info.getter(v104);
    uint64_t v301 = v97;
    unint64_t v302 = v99;
    if (os_log_type_enabled(v104, v105))
    {
      unint64_t v106 = v99;
      uint64_t v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v108 = swift_slowAlloc(32LL, -1LL);
      v315[0] = v108;
      *(_DWORD *)uint64_t v107 = 136446210;
      Swift::String v109 = Data.base64EncodedString(options:)(0LL);
      uint64_t v312 = sub_10017C4C4(v109._countAndFlagsBits, (unint64_t)v109._object, v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &v313, v107 + 4, v107 + 12);
      swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v109._object,  v110,  v111,  v112,  v113,  v114,  v115,  v116);
      sub_10000852C(v97, v106);
      sub_10000852C(v97, v106);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "setRecoveryKey signingPubKey: %{public}s", v107, 0xCu);
      swift_arrayDestroy(v108, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      swift_slowDealloc(v107, -1LL, -1LL);
    }

    else
    {
      sub_10000852C(v97, v99);
      sub_10000852C(v97, v99);
    }

    unint64_t v117 = v304;
    sub_1000084E8(v303, v304);
    uint64_t v118 = sub_1000084E8(v303, v304);
    uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
    os_log_type_t v120 = static os_log_type_t.info.getter(v119);
    if (os_log_type_enabled(v119, v120))
    {
      uint64_t v121 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v122 = swift_slowAlloc(32LL, -1LL);
      v315[0] = v122;
      *(_DWORD *)uint64_t v121 = 136446210;
      Swift::String v123 = Data.base64EncodedString(options:)(0LL);
      uint64_t v312 = sub_10017C4C4(v123._countAndFlagsBits, (unint64_t)v123._object, v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &v313, v121 + 4, v121 + 12);
      swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v123._object,  v124,  v125,  v126,  v127,  v128,  v129,  v130);
      sub_10000852C(v303, v304);
      sub_10000852C(v303, v304);
      _os_log_impl((void *)&_mh_execute_header, v119, v120, "setRecoveryKey encryptionPubKey: %{public}s", v121, 0xCu);
      swift_arrayDestroy(v122, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v131 = v122;
      unint64_t v117 = v304;
      swift_slowDealloc(v131, -1LL, -1LL);
      swift_slowDealloc(v121, -1LL, -1LL);
    }

    else
    {
      sub_10000852C(v303, v304);
      sub_10000852C(v303, v304);
    }

    unint64_t v132 = v302;
    uint64_t v133 = v309;
    id v134 = [*(id *)&v19[v309] egoPeerStableInfo];
    if (!v134)
    {
      swift_bridgeObjectRelease(v308, v135, v136, v137, v138, v139, v140, v141);
      id v248 = (os_log_s *)Logger.logObject.getter(v247);
      os_log_type_t v249 = static os_log_type_t.info.getter(v248);
      if (os_log_type_enabled(v248, v249))
      {
        BOOL v250 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)BOOL v250 = 0;
        _os_log_impl((void *)&_mh_execute_header, v248, v249, "stableInfo does not exist", v250, 2u);
        swift_slowDealloc(v250, -1LL, -1LL);
      }

      unint64_t v251 = sub_100043F74();
      uint64_t v252 = swift_allocError(&type metadata for ContainerError, v251, 0LL, 0LL);
      *(_OWORD *)uint64_t v253 = xmmword_1001E6820;
      *(_BYTE *)(v253 + 16) = 13;
      v311(0LL, v252);
      swift_errorRelease();
      sub_10000852C(v303, v117);
      uint64_t v246 = v301;
      goto LABEL_40;
    }

    uint64_t v142 = v134;
    uint64_t v143 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v134);
    unint64_t v310 = v144;

    id v145 = [*(id *)&v19[v133] egoPeerStableInfoSig];
    if (v145)
    {
      uint64_t v153 = v145;
      uint64_t v154 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v145);
      unint64_t v156 = v155;

      id v157 = [*(id *)&v32[v133] egoPeerPermanentInfo];
      if (v157)
      {
        BOOL v165 = v157;
        uint64_t v299 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v157);
        unint64_t v167 = v166;

        id v168 = [*(id *)&v32[v133] egoPeerPermanentInfoSig];
        if (v168)
        {
          int64_t v176 = v168;
          uint64_t v297 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v168);
          unint64_t v298 = v177;

          id v178 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
          sub_1000084E8(v143, v310);
          sub_1000084E8(v154, v156);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          Class v180 = Data._bridgeToObjectiveC()().super.isa;
          id v181 = [v178 initWithData:isa sig:v180];
          sub_10000852C(v154, v156);
          sub_10000852C(v143, v310);

          if (v181)
          {
            unint64_t v295 = v181;
            id v189 = [objc_allocWithZone(TPECPublicKeyFactory) init];
            swift_bridgeObjectRetain(v308);
            sub_1000084E8(v299, v167);
            sub_1000084E8(v297, v298);
            NSString v190 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v308, v191, v192, v193, v194, v195, v196, v197);
            Class v198 = Data._bridgeToObjectiveC()().super.isa;
            Class v199 = Data._bridgeToObjectiveC()().super.isa;
            uint64_t v294 = v189;
            id v200 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v190 data:v198 sig:v199 keyFactory:v189];
            sub_10000852C(v297, v298);
            sub_10000852C(v299, v167);

            if (v200)
            {
              strcpy((char *)v315, "signing-key ");
              BYTE5(v315[1]) = 0;
              HIWORD(v315[1]) = -5120;
              v208._uint64_t countAndFlagsBits = v306;
              v208._object = v308;
              String.append(_:)(v208);
              uint64_t v293 = v315[0];
              id v300 = (_TtC18TrustedPeersHelper6Client *)v315[1];
              sub_1000084E8(v301, v302);
              sub_1000084E8(v303, v304);
              swift_bridgeObjectRetain(v308);
              swift_retain(v307);
              uint64_t v209 = v32;
              swift_bridgeObjectRetain(v305);
              id v210 = v200;
              id v296 = v295;
              unint64_t v132 = v302;
              sub_10015FD20( v293,  (uint64_t)v300,  v311,  (uint64_t)v307,  v209,  (uint64_t)v305,  (uint64_t)&v314,  v210,  v296,  v301,  v302,  v303,  v304,  v306,  (uint64_t)v308);
              swift_bridgeObjectRelease(v308, v211, v212, v213, v214, v215, v216, v217);
              sub_10000852C(v303, v304);
              sub_10000852C(v301, v302);

              swift_bridgeObjectRelease(v300, v218, v219, v220, v221, v222, v223, v224);
              swift_bridgeObjectRelease(v308, v225, v226, v227, v228, v229, v230, v231);
              swift_release(v307, v232, v233, v234, v235, v236, v237, v238);

              swift_bridgeObjectRelease(v305, v239, v240, v241, v242, v243, v244, v245);
              sub_10000852C(v297, v298);
              sub_10000852C(v299, v167);
              sub_10000852C(v154, v156);
              sub_10000852C(v143, v310);
              sub_10000852C(v303, v304);
              uint64_t v246 = v301;
LABEL_40:
              unint64_t v254 = v132;
LABEL_53:
              sub_10000852C(v246, v254);
LABEL_15:

              return;
            }

            swift_bridgeObjectRelease(v308, v201, v202, v203, v204, v205, v206, v207);
            uint64_t v287 = (os_log_s *)Logger.logObject.getter(v286);
            uint64_t v288 = static os_log_type_t.info.getter(v287);
            unint64_t v117 = v304;
            if (os_log_type_enabled(v287, (os_log_type_t)v288))
            {
              os_log_type_t v289 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)os_log_type_t v289 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v287,  (os_log_type_t)v288,  "cannot create TPPeerPermanentInfo",  v289,  2u);
              swift_slowDealloc(v289, -1LL, -1LL);
            }

            unint64_t v290 = sub_100043F74();
            uint64_t v291 = swift_allocError(&type metadata for ContainerError, v290, 0LL, 0LL);
            *(_OWORD *)uint64_t v292 = xmmword_1001DEA00;
            *(_BYTE *)(v292 + 16) = 13;
            v311(0LL, v291);
            swift_errorRelease();

            sub_10000852C(v297, v298);
            uint64_t v284 = v299;
            unint64_t v285 = v167;
          }

          else
          {
            swift_bridgeObjectRelease(v308, v182, v183, v184, v185, v186, v187, v188);
            id v278 = (os_log_s *)Logger.logObject.getter(v277);
            os_log_type_t v279 = static os_log_type_t.info.getter(v278);
            if (os_log_type_enabled(v278, v279))
            {
              BOOL v280 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)BOOL v280 = 0;
              _os_log_impl((void *)&_mh_execute_header, v278, v279, "cannot create TPPeerStableInfo", v280, 2u);
              swift_slowDealloc(v280, -1LL, -1LL);
            }

            unint64_t v281 = sub_100043F74();
            uint64_t v282 = swift_allocError(&type metadata for ContainerError, v281, 0LL, 0LL);
            *(_OWORD *)uint64_t v283 = xmmword_1001DEA00;
            *(_BYTE *)(v283 + 16) = 13;
            v311(0LL, v282);
            swift_errorRelease();
            sub_10000852C(v297, v298);
            uint64_t v284 = v299;
            unint64_t v285 = v167;
          }

          sub_10000852C(v284, v285);
          sub_10000852C(v154, v156);
          uint64_t v276 = v143;
LABEL_52:
          sub_10000852C(v276, v310);
          sub_10000852C(v303, v117);
          uint64_t v246 = v301;
          unint64_t v254 = v302;
          goto LABEL_53;
        }

        swift_bridgeObjectRelease(v308, v169, v170, v171, v172, v173, v174, v175);
        NSString v270 = (os_log_s *)Logger.logObject.getter(v269);
        os_log_type_t v271 = static os_log_type_t.info.getter(v270);
        if (os_log_type_enabled(v270, v271))
        {
          unint64_t v272 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v272 = 0;
          _os_log_impl((void *)&_mh_execute_header, v270, v271, "permInfoSig does not exist", v272, 2u);
          swift_slowDealloc(v272, -1LL, -1LL);
        }

        unint64_t v273 = sub_100043F74();
        uint64_t v274 = swift_allocError(&type metadata for ContainerError, v273, 0LL, 0LL);
        *(_OWORD *)uint64_t v275 = xmmword_1001E6820;
        *(_BYTE *)(v275 + 16) = 13;
        v311(0LL, v274);
        swift_errorRelease();
        sub_10000852C(v299, v167);
      }

      else
      {
        swift_bridgeObjectRelease(v308, v158, v159, v160, v161, v162, v163, v164);
        int64_t v263 = (os_log_s *)Logger.logObject.getter(v262);
        os_log_type_t v264 = static os_log_type_t.info.getter(v263);
        if (os_log_type_enabled(v263, v264))
        {
          id v265 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v265 = 0;
          _os_log_impl((void *)&_mh_execute_header, v263, v264, "permanentInfo does not exist", v265, 2u);
          swift_slowDealloc(v265, -1LL, -1LL);
        }

        unint64_t v266 = sub_100043F74();
        uint64_t v267 = swift_allocError(&type metadata for ContainerError, v266, 0LL, 0LL);
        *(_OWORD *)uint64_t v268 = xmmword_1001E6820;
        *(_BYTE *)(v268 + 16) = 13;
        v311(0LL, v267);
        swift_errorRelease();
      }

      sub_10000852C(v154, v156);
    }

    else
    {
      swift_bridgeObjectRelease(v308, v146, v147, v148, v149, v150, v151, v152);
      os_log_type_t v256 = (os_log_s *)Logger.logObject.getter(v255);
      os_log_type_t v257 = static os_log_type_t.info.getter(v256);
      if (os_log_type_enabled(v256, v257))
      {
        uint64_t v258 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v258 = 0;
        _os_log_impl((void *)&_mh_execute_header, v256, v257, "stableInfoSig does not exist", v258, 2u);
        swift_slowDealloc(v258, -1LL, -1LL);
      }

      unint64_t v259 = sub_100043F74();
      uint64_t v260 = swift_allocError(&type metadata for ContainerError, v259, 0LL, 0LL);
      *(_OWORD *)uint64_t v261 = xmmword_1001E6820;
      *(_BYTE *)(v261 + 16) = 13;
      v311(0LL, v260);
      swift_errorRelease();
    }

    uint64_t v276 = v143;
    goto LABEL_52;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_100006BAC(v23, (uint64_t)qword_1002567D0);
  id v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "no prepared identity, cannot set recovery key", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  unint64_t v28 = sub_100043F74();
  uint64_t v29 = swift_allocError(&type metadata for ContainerError, v28, 0LL, 0LL);
  *(_OWORD *)uint64_t v30 = xmmword_1001DE890;
  *(_BYTE *)(v30 + 16) = 13;
  a2(0LL, v29);
  swift_errorRelease();
}

void sub_10010248C( void *a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4, char *a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a1)
  {
    id v73 = *(id *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v19 = swift_allocObject(&unk_1002381B8, 128LL, 7LL);
    *(void *)(v19 + 16) = a6;
    *(void *)(v19 + 24) = a7;
    *(void *)(v19 + 32) = a8;
    *(void *)(v19 + 40) = a9;
    uint64_t v20 = a5;
    *(void *)(v19 + 48) = a5;
    *(void *)(v19 + 56) = a1;
    *(void *)(v19 + 64) = a10;
    *(void *)(v19 + 72) = a11;
    *(void *)(v19 + 80) = a12;
    *(void *)(v19 + 88) = a13;
    *(void *)(v19 + 96) = a14;
    *(void *)(v19 + 104) = a15;
    *(void *)(v19 + 112) = a3;
    *(void *)(v19 + 120) = a4;
    SEL v21 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002381E0, 32LL, 7LL);
    *(void *)v21->endpoint = sub_100171500;
    *(void *)v21->containerMap = v19;
    aBlock[4] = (uint64_t)sub_100176BD4;
    int64_t v77 = v21;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_1002381F8;
    SEL v22 = _Block_copy(aBlock);
    uint64_t v23 = v77;
    id v24 = a1;
    swift_bridgeObjectRetain(a6);
    id v25 = a8;
    id v26 = a9;
    id v27 = v20;
    sub_1000084E8(a10, a11);
    sub_1000084E8(a12, a13);
    swift_bridgeObjectRetain(a15);
    swift_retain(a4);
    swift_retain(v21);
    swift_release(v23, v28, v29, v30, v31, v32, v33, v34);
    [v73 performBlockAndWait:v22];

    _Block_release(v22);
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v21, "", 108LL, 3354LL, 45LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v19, v35, v36, v37, v38, v39, v40, v41);
    swift_release(v21, v42, v43, v44, v45, v46, v47, v48);
    __break(1u);
  }

  uint64_t v49 = a2;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v50 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v50, (uint64_t)qword_1002567D0);
  swift_errorRetain(v49);
  uint64_t v51 = swift_errorRetain(v49);
  BOOL v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v56 = static os_log_type_t.error.getter(v52, v53, v54, v55);
  if (os_log_type_enabled(v52, v56))
  {
    id v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v58;
    *(_DWORD *)id v57 = 136446210;
    uint64_t v78 = v49;
    swift_errorRetain(v49);
    uint64_t v59 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v60 = String.init<A>(describing:)(&v78, v59);
    uint64_t v62 = (_TtC18TrustedPeersHelper6Client *)v61;
    uint64_t v78 = sub_10017C4C4(v60, v61, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v57 + 4, v57 + 12);
    swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v52, v56, "handle: no signing key pair: %{public}s", v57, 0xCu);
    swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a3(0LL, v49);
}

uint64_t sub_100102828( uint64_t a1, void *a2, _TtC18TrustedPeersHelper6Client *a3, void *a4, char *a5, void *a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, void *a11, void *a12, void (*a13)(void, _TtC18TrustedPeersHelper6Client *), void *a14)
{
  id v161 = a6;
  id v165 = a4;
  uint64_t v158 = type metadata accessor for SetRecoveryKeyRequest(0LL);
  __chkstk_darwin(v158, v21);
  int64_t v160 = (char *)&v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v157 = type metadata accessor for SignedPeerStableInfo(0LL);
  __chkstk_darwin(v157, v23);
  os_log_type_t v159 = (uint64_t *)((char *)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v122 = a1;
    }
    else {
      uint64_t v122 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v122);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v123, v124, v125, v126, v127, v128, v129);
  }

  else
  {
    uint64_t v25 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  id v26 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v162 = a8;
  if (v25)
  {
    v166[0] = _swiftEmptyArrayStorage;
    id v27 = (_TtC18TrustedPeersHelper6Client *)v166;
    specialized ContiguousArray.reserveCapacity(_:)(v25);
    if (v25 < 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    BOOL v163 = a3;
    unint64_t v164 = a7;
    uint64_t v28 = 0LL;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, a1);
      }
      else {
        id v29 = *(id *)(a1 + 8 * v28 + 32);
      }
      id v30 = v29;
      ++v28;
      id v31 = [v29 tlk];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
      uint64_t v33 = *(void *)(v166[0] + 16LL);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
      uint64_t v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
      specialized ContiguousArray._endMutation()(v34);
    }

    while (v25 != v28);
    id v26 = (_TtC18TrustedPeersHelper6Client *)v166[0];
    a3 = v163;
    a7 = v164;
  }

  swift_beginAccess(a2, v166, 0LL, 0LL);
  id v27 = (_TtC18TrustedPeersHelper6Client *)objc_retain(*(id *)(*a2
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys));
  uint64_t v35 = (uint64_t)-[Client epoch](a3, "epoch");
  id v14 = v165;
  if (v35 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }

  a2 = a14;
  a3 = 0LL;
  uint64_t v25 = sub_1000E04C0(v26, (uint64_t)v27, v27, v35);
  swift_bridgeObjectRelease(v26, v36, v37, v38, v39, v40, v41, v42);

  id v43 = [v14 bestPolicyVersion];
  id v27 = (_TtC18TrustedPeersHelper6Client *)sub_1001411C0((uint64_t)[v43 versionNumber]);
  id v44 = [v14 clock];
  if (v44 != (id)-1LL)
  {
    BOOL v147 = a13;
    uint64_t v151 = (uint64_t)v44 + 1;
    id v156 = v43;
    if (qword_100250BB0 == -1) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }

void sub_100103048( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v55 = a8;
  uint64_t v57 = a9;
  uint64_t v58 = a10;
  uint64_t v56 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v17 = *(void *)(v56 - 8);
  __chkstk_darwin(v56, v18);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 24);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  uint64_t v29 = *(void *)(a1 + 32);
  unint64_t v30 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  sub_1000084E8(a4, a5);
  sub_10000852C(v29, v30);
  uint64_t v31 = *(void *)(a1 + 48);
  unint64_t v32 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = a6;
  *(void *)(a1 + 56) = a7;
  sub_1000084E8(a6, a7);
  sub_10000852C(v31, v32);
  sub_10004164C(v55, (uint64_t)v20, type metadata accessor for SignedPeerStableInfo);
  uint64_t v33 = a1 + *(int *)(type metadata accessor for SetRecoveryKeyRequest(0LL) + 44);
  sub_100041590(v33, &qword_100251F18);
  sub_100041608((uint64_t)v20, v33, type metadata accessor for SignedPeerStableInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v33, 0LL, 1LL, v56);
  uint64_t v34 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 64);
  uint64_t v35 = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v34, v36, v37, v38, v39, v40, v41, v42);
  *(void *)(a1 + 64) = v35;
  id v43 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v58
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
  if (v43)
  {
    id v51 = v43;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unint64_t v54 = v53;
  }

  else
  {
    uint64_t v52 = 0LL;
    unint64_t v54 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 8), v44, v45, v46, v47, v48, v49, v50);
  *(void *)a1 = v52;
  *(void *)(a1 + 8) = v54;
}

void sub_10010321C(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v76 = a3;
  uint64_t v77 = a5;
  uint64_t v8 = type metadata accessor for SetRecoveryKeyResponse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  os_log_type_t v13 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (os_log_s *)((char *)&v75 - v15);
  uint64_t v17 = sub_100007578(&qword_100251E48);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (uint64_t *)((char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v20, &qword_100251E48);
  if (swift_getEnumCaseMultiPayload(v20, v17) != 1)
  {
    sub_100041608((uint64_t)v20, (uint64_t)v16, type metadata accessor for SetRecoveryKeyResponse);
    id v40 = a2;
    id v75 = *(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    sub_10004164C((uint64_t)v16, (uint64_t)v13, type metadata accessor for SetRecoveryKeyResponse);
    uint64_t v41 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v42 = (v41 + 32) & ~v41;
    unint64_t v43 = (v10 + v42 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    id v44 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238258, v43 + 16, v41 | 7);
    id v45 = v76;
    *(void *)v44->endpoint = a2;
    *(void *)v44->containerMap = v45;
    sub_100041608( (uint64_t)v13,  (uint64_t)&v44->_TtCs12_SwiftObject_opaque[v42],  type metadata accessor for SetRecoveryKeyResponse);
    int64_t v46 = &v44->_TtCs12_SwiftObject_opaque[v43];
    uint64_t v47 = v77;
    *(void *)int64_t v46 = a4;
    *((void *)v46 + 1) = v47;
    id v48 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238280, 32LL, 7LL);
    *(void *)v48->endpoint = sub_1001716EC;
    *(void *)v48->containerMap = v44;
    aBlock[4] = (uint64_t)sub_100176BD4;
    BOOL v79 = v48;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100238298;
    BOOL v49 = _Block_copy(aBlock);
    BOOL v50 = v79;
    id v51 = v40;
    id v52 = v45;
    swift_retain(v47);
    swift_retain(v48);
    swift_release(v50, v53, v54, v55, v56, v57, v58, v59);
    [v75 performBlockAndWait:v49];
    _Block_release(v49);
    sub_1000415CC((uint64_t)v16, type metadata accessor for SetRecoveryKeyResponse);
    LOBYTE(v42) = swift_isEscapingClosureAtFileLocation(v48, "", 108LL, 3393LL, 61LL, 1LL);
    swift_release(v44, v60, v61, v62, v63, v64, v65, v66);
    swift_release(v48, v67, v68, v69, v70, v71, v72, v73);
    if ((v42 & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_8;
  }

  id v76 = (void *)a4;
  a4 = *v20;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v21, (uint64_t)qword_1002567D0);
  swift_errorRetain(a4);
  uint64_t v22 = swift_errorRetain(a4);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v26 = static os_log_type_t.error.getter(v16, v23, v24, v25);
  if (!os_log_type_enabled(v16, v26))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  BOOL v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v28 = swift_slowAlloc(32LL, -1LL);
  aBlock[0] = v28;
  *(_DWORD *)BOOL v27 = 136446210;
  uint64_t v80 = a4;
  swift_errorRetain(a4);
  uint64_t v29 = sub_100007578(&qword_100251D70);
  uint64_t v30 = String.init<A>(describing:)(&v80, v29);
  unint64_t v32 = (_TtC18TrustedPeersHelper6Client *)v31;
  uint64_t v80 = sub_10017C4C4(v30, v31, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v27 + 4, v27 + 12);
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v16, v26, "setRecoveryKey failed: %{public}s", v27, 0xCu);
  swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v28, -1LL, -1LL);
  swift_slowDealloc(v27, -1LL, -1LL);
LABEL_9:

  BOOL v74 = (void (*)(void, uint64_t))v76;
  swift_errorRetain(a4);
  v74(0LL, a4);
  swift_errorRelease();
  swift_errorRelease();
}

void sub_100103664( uint64_t a1, void *a2, _TtC18TrustedPeersHelper6Client **a3, void (*a4)(_TtC18TrustedPeersHelper6Client *, void), uint64_t a5)
{
  uint64_t v76 = a5;
  uint64_t v77 = a4;
  id v75 = a3;
  id v72 = a2;
  uint64_t v7 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v79 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  BOOL v78 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v11);
  os_log_type_t v13 = (char *)&v71 - v12;
  uint64_t v14 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Changes(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v73 = v18;
  uint64_t v74 = v19;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v24 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  id v25 = [a2 data];
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
  unint64_t v28 = v27;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v26, v28);
  [v24 setEgoPeerStableInfo:isa];

  id v30 = *(id *)(a1 + v23);
  id v31 = [v72 sig];
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
  unint64_t v34 = v33;

  Class v35 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v36 = v32;
  id v37 = v75;
  sub_10000852C(v36, v34);
  [v30 setEgoPeerStableInfoSig:v35];

  uint64_t v38 = v73;
  uint64_t v39 = type metadata accessor for SetRecoveryKeyResponse(0LL);
  sub_10000FC68((uint64_t)v37 + *(int *)(v39 + 24), (uint64_t)v17, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v17, 1LL, v38) == 1)
  {
    *(void *)uint64_t v22 = 0LL;
    *((void *)v22 + 1) = 0xE000000000000000LL;
    *((void *)v22 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v22 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v22 + 40) = xmmword_1001DE6F0;
    v22[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v17, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v17, (uint64_t)v22, type metadata accessor for Changes);
  }

  sub_10013D540((uint64_t)v22, 0);
  sub_1000415CC((uint64_t)v22, type metadata accessor for Changes);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v40 = type metadata accessor for Logger(0LL);
  uint64_t v41 = sub_100006BAC(v40, (uint64_t)qword_1002567D0);
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.info.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    id v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "setRecoveryKey succeeded", v44, 2u);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  id v45 = *v37;
  uint64_t v80 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v46 = *(void *)v45->endpoint;
  if (v46)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v47 = &v45->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v79 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)];
    uint64_t v48 = *(void *)(v79 + 72);
    BOOL v49 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v79 + 16);
    id v75 = (_TtC18TrustedPeersHelper6Client **)v45;
    swift_bridgeObjectRetain(v45);
    do
    {
      v49(v13, v47, v7);
      id v58 = v78;
      v49(v78, (unsigned __int8 *)v13, v7);
      uint64_t v59 = CKRecord.init(_:)(v58);
      uint64_t v60 = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v13, v7);
      if (v59)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
        unint64_t v62 = *(void *)(((unint64_t)v80 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v61 = *(void *)(((unint64_t)v80 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v62 >= v61 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1LL);
        }
        uint64_t v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
        specialized Array._endMutation()(v50);
      }

      v47 += v48;
      --v46;
    }

    while (v46);
    id v63 = v80;
    id v45 = (_TtC18TrustedPeersHelper6Client *)v75;
  }

  else
  {
    swift_bridgeObjectRetain(v45);
    id v63 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v45, v51, v52, v53, v54, v55, v56, v57);
  v77(v63, 0LL);
  swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
}

void sub_100103CCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  int v88 = a7;
  uint64_t v91 = a4;
  uint64_t v92 = a5;
  uint64_t v86 = a1;
  uint64_t v87 = a3;
  uint64_t v90 = a2;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  uint64_t v16 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v17, 41LL, 7LL);
  uint64_t v18 = v9;
  uint64_t v19 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v18, 0xD000000000000046LL, 0x80000001001FA1F0LL);

  uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A738, 40LL, 7LL);
  *(void *)v20->endpoint = v19;
  *(void *)v20->containerMap = a8;
  uint64_t v85 = v20;
  *(void *)v20[1]._TtCs12_SwiftObject_opaque = a9;
  uint64_t v21 = qword_100250EB8;
  uint64_t v89 = v19;
  swift_retain(v19);
  swift_retain(a9);
  if (v21 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100006BAC(v22, (uint64_t)qword_1002567D0);
  id v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.info.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "beginning a createCustodianRecoveryKey", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  id v84 = *(id *)&v18[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a6,  v12);
  uint64_t v27 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v28 = (v27 + 24) & ~v27;
  unint64_t v29 = (v14 + v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v82 = v12;
  id v83 = v18;
  unint64_t v32 = (v31 + 19) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v32 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v34 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A760, v33 + 8, v27 | 7);
  *(void *)v34->endpoint = v18;
  (*(void (**)(unsigned __int8 *, char *, uint64_t))(v13 + 32))( &v34->_TtCs12_SwiftObject_opaque[v28],  v16,  v82);
  Class v35 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v34->_TtCs12_SwiftObject_opaque[v29];
  uint64_t v36 = v85;
  _TtC18TrustedPeersHelper6Client *v35 = sub_100175468;
  v35[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
  id v37 = &v34->_TtCs12_SwiftObject_opaque[v30];
  uint64_t v39 = v90;
  uint64_t v38 = v91;
  *(void *)id v37 = v86;
  *((void *)v37 + 1) = v39;
  uint64_t v40 = &v34->_TtCs12_SwiftObject_opaque[v31];
  *(void *)uint64_t v40 = v87;
  *((void *)v40 + 1) = v38;
  *(_DWORD *)&v34->_TtCs12_SwiftObject_opaque[v32] = v88;
  uint64_t v41 = v92;
  *(void *)&v34->_TtCs12_SwiftObject_opaque[v33] = v92;
  uint64_t v42 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A788, 32LL, 7LL);
  *(void *)v42->endpoint = sub_10017558C;
  *(void *)v42->containerMap = v34;
  aBlock[4] = sub_100176BD4;
  uint64_t v94 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_10023A7A0;
  os_log_type_t v43 = _Block_copy(aBlock);
  id v44 = v94;
  id v45 = v83;
  swift_retain(v36);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v41);
  swift_retain(v42);
  swift_release(v44, v46, v47, v48, v49, v50, v51, v52);
  [v84 performBlockAndWait:v43];
  swift_release(v36, v53, v54, v55, v56, v57, v58, v59);
  swift_release(v89, v60, v61, v62, v63, v64, v65, v66);
  _Block_release(v43);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation(v42, "", 108LL, 3439LL, 33LL, 1LL);
  swift_release(v34, v67, v68, v69, v70, v71, v72, v73);
  swift_release(v42, v74, v75, v76, v77, v78, v79, v80);
  if ((v41 & 1) != 0) {
    __break(1u);
  }
}

void sub_100104060( char *a1, unint64_t a2, void (*a3)(void, void, uint64_t), uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, _TtC18TrustedPeersHelper6Client *a8, int a9, uint64_t a10)
{
  uint64_t v404 = a5;
  BOOL v405 = a8;
  unint64_t v402 = a6;
  uint64_t v403 = a7;
  uint64_t v409 = a3;
  uint64_t v410 = a4;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v407 = *(void *)(v12 - 8);
  uint64_t v408 = v12;
  uint64_t v13 = *(void *)(v407 + 64);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v384 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (char *)&v384 - v19;
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v384 - v22;
  id v24 = *(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  unint64_t v406 = a2;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v26 = [v24 findCustodianRecoveryKeyWithUUID:isa];

  if (v26)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v27, (uint64_t)qword_1002567D0);
    uint64_t v28 = v407;
    uint64_t v29 = v408;
    uint64_t v30 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v407 + 16))(v16, v406, v408);
    unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v35 = static os_log_type_t.error.getter(v31, v32, v33, v34);
    if (os_log_type_enabled(v31, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      v411[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v38 = sub_1000077B8( (unint64_t *)&unk_100256D00,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v29, v38);
      uint64_t v41 = (_TtC18TrustedPeersHelper6Client *)v40;
      uint64_t v412 = sub_10017C4C4(v39, v40, v411);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v29);
      _os_log_impl((void *)&_mh_execute_header, v31, v35, "CRK UUID %s already exists", v36, 0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v29);
    }

    unint64_t v58 = sub_100043F74();
    uint64_t v59 = swift_allocError(&type metadata for ContainerError, v58, 0LL, 0LL);
    *(_OWORD *)uint64_t v60 = xmmword_1001E6840;
    *(_BYTE *)(v60 + 16) = 13;
    v409(0LL, 0LL, v59);
    goto LABEL_10;
  }

  uint64_t v398 = v13;
  SEL v399 = v20;
  int v401 = a9;
  id v49 = v405;
  uint64_t v400 = a10;
  uint64_t v50 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v51 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v51)
  {
    id v52 = v51;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    id v55 = v54;

    id v56 = *(void (**)(char *, unint64_t, uint64_t))(v407 + 16);
    v56(v23, v406, v408);
    unint64_t v57 = v402;
    swift_bridgeObjectRetain(v402);
    swift_bridgeObjectRetain(v49);
    id v69 = (_TtC18TrustedPeersHelper6Client *)sub_100009F08((uint64_t)v23, v404, v57, v403, v49, v401);
    uint64_t v393 = v53;
    uint64_t v70 = qword_100250EB8;
    swift_retain(v69);
    if (v70 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v71 = type metadata accessor for Logger(0LL);
    uint64_t v72 = sub_100006BAC(v71, (uint64_t)qword_1002567D0);
    uint64_t v73 = swift_retain_n(v69, 2LL);
    unint64_t v397 = v72;
    SEL v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.info.getter(v74);
    int v76 = v75;
    BOOL v77 = os_log_type_enabled(v74, v75);
    int64_t v395 = a1;
    uint64_t v396 = v55;
    uint64_t v394 = v69;
    if (v77)
    {
      id v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v79 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v392) = v76;
      os_log_t v391 = v74;
      *(_DWORD *)id v78 = 136446210;
      v411[0] = v79;
      uint64_t v80 = v79;
      id v81 = [*(id *)v69->containerMap signingPublicKey];
      id v82 = [v81 spki];
      swift_unknownObjectRelease(v81);
      uint64_t v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v82);
      unint64_t v85 = v84;

      Swift::String v86 = Data.base64EncodedString(options:)(0LL);
      sub_10000852C(v83, v85);
      id v69 = v394;
      uint64_t v412 = sub_10017C4C4(v86._countAndFlagsBits, (unint64_t)v86._object, v411);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v78 + 4, v78 + 12);
      swift_release_n(v69, 2LL);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v86._object, v87, v88, v89, v90, v91, v92, v93);
      os_log_t v94 = v391;
      _os_log_impl( (void *)&_mh_execute_header,  v391,  (os_log_type_t)v392,  "createCustodianRecoveryKey signingPubKey: %{public}s",  v78,  0xCu);
      swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v78, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v69, 2LL);
    }

    uint64_t v95 = swift_retain_n(v69, 2LL);
    uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
    os_log_type_t v97 = static os_log_type_t.info.getter(v96);
    int v98 = v97;
    if (os_log_type_enabled(v96, v97))
    {
      LODWORD(v391) = v98;
      SEL v99 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v100 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)SEL v99 = 136446210;
      v411[0] = v100;
      unint64_t v392 = (unint64_t)v56;
      uint64_t v101 = v100;
      id v102 = [*(id *)v69->containerMap encryptionPublicKey];
      id v103 = [v102 spki];
      swift_unknownObjectRelease(v102);
      uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v103);
      unint64_t v106 = v105;

      Swift::String v107 = Data.base64EncodedString(options:)(0LL);
      sub_10000852C(v104, v106);
      id v69 = v394;
      uint64_t v412 = sub_10017C4C4(v107._countAndFlagsBits, (unint64_t)v107._object, v411);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v412, &v413, v99 + 4, v99 + 12);
      swift_release_n(v69, 2LL);
      swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v107._object,  v108,  v109,  v110,  v111,  v112,  v113,  v114);
      _os_log_impl( (void *)&_mh_execute_header,  v96,  (os_log_type_t)v391,  "createCustodianRecoveryKey encryptionPubKey: %{public}s",  v99,  0xCu);
      swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v115 = v101;
      id v56 = (void (*)(char *, unint64_t, uint64_t))v392;
      swift_slowDealloc(v115, -1LL, -1LL);
      swift_slowDealloc(v99, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v69, 2LL);
    }

    id v116 = v395;
    id v117 = v396;
    id v118 = [*(id *)&v395[v50] egoPeerPermanentInfo];
    if (!v118)
    {
      swift_release(v69, v119, v120, v121, v122, v123, v124, v125);
      swift_bridgeObjectRelease(v117, v248, v249, v250, v251, v252, v253, v254);
      os_log_type_t v256 = (os_log_s *)Logger.logObject.getter(v255);
      os_log_type_t v257 = static os_log_type_t.info.getter(v256);
      if (os_log_type_enabled(v256, v257))
      {
        uint64_t v258 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v258 = 0;
        _os_log_impl((void *)&_mh_execute_header, v256, v257, "permanentInfo does not exist", v258, 2u);
        swift_slowDealloc(v258, -1LL, -1LL);
      }

      unint64_t v259 = sub_100043F74();
      uint64_t v260 = swift_allocError(&type metadata for ContainerError, v259, 0LL, 0LL);
      *(_OWORD *)uint64_t v261 = xmmword_1001E6820;
      *(_BYTE *)(v261 + 16) = 13;
      v409(0LL, 0LL, v260);
      swift_release(v69, v262, v263, v264, v265, v266, v267, v268);
      goto LABEL_10;
    }

    id v126 = v118;
    id v127 = (os_log_s *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v118);
    unint64_t v129 = v128;

    id v130 = [*(id *)&v116[v50] egoPeerPermanentInfoSig];
    if (!v130)
    {
      swift_release(v69, v131, v132, v133, v134, v135, v136, v137);
      swift_bridgeObjectRelease(v396, v269, v270, v271, v272, v273, v274, v275);
      uint64_t v277 = (os_log_s *)Logger.logObject.getter(v276);
      os_log_type_t v278 = static os_log_type_t.info.getter(v277);
      if (os_log_type_enabled(v277, v278))
      {
        os_log_type_t v279 = v127;
        BOOL v280 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)BOOL v280 = 0;
        _os_log_impl((void *)&_mh_execute_header, v277, v278, "permInfoSig does not exist", v280, 2u);
        unint64_t v281 = v280;
        id v127 = v279;
        swift_slowDealloc(v281, -1LL, -1LL);
      }

      unint64_t v282 = sub_100043F74();
      uint64_t v283 = swift_allocError(&type metadata for ContainerError, v282, 0LL, 0LL);
      *(_OWORD *)uint64_t v284 = xmmword_1001E6820;
      *(_BYTE *)(v284 + 16) = 13;
      v409(0LL, 0LL, v283);
      swift_release(v69, v285, v286, v287, v288, v289, v290, v291);
      sub_10000852C((uint64_t)v127, v129);
      goto LABEL_10;
    }

    char v138 = v130;
    uint64_t v386 = v50;
    unint64_t v392 = (unint64_t)v56;
    uint64_t v139 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v130);
    unint64_t v141 = v140;

    id v142 = [objc_allocWithZone(TPECPublicKeyFactory) init];
    uint64_t v143 = v396;
    swift_bridgeObjectRetain(v396);
    sub_1000084E8((uint64_t)v127, v129);
    sub_1000084E8(v139, v141);
    NSString v144 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v143, v145, v146, v147, v148, v149, v150, v151);
    Class v152 = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v153 = v129;
    Class v154 = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v155 = (void *)objc_opt_self(&OBJC_CLASS___TPPeerPermanentInfo);
    id v389 = v142;
    id v156 = [v155 permanentInfoWithPeerID:v144 data:v152 sig:v154 keyFactory:v142];
    uint64_t v387 = v139;
    unint64_t v388 = v141;
    id v157 = v156;
    sub_10000852C(v139, v141);
    os_log_t v391 = v127;
    unint64_t v390 = v153;
    sub_10000852C((uint64_t)v127, v153);

    id v385 = v157;
    if (v157)
    {
      id v165 = v395;
      uint64_t v166 = v386;
      id v167 = [*(id *)&v395[v386] egoPeerStableInfo];
      if (v167)
      {
        BOOL v175 = v167;
        uint64_t v176 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v167);
        unint64_t v178 = v177;

        id v179 = [*(id *)&v165[v166] egoPeerStableInfoSig];
        os_log_t v187 = v391;
        if (v179)
        {
          BOOL v188 = v179;
          id v189 = (void (*)(void, void, uint64_t))static Data._unconditionallyBridgeFromObjectiveC(_:)(v179);
          unint64_t v191 = v190;

          id v192 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
          sub_1000084E8(v176, v178);
          sub_1000084E8((uint64_t)v189, v191);
          Class v193 = Data._bridgeToObjectiveC()().super.isa;
          Class v194 = Data._bridgeToObjectiveC()().super.isa;
          id v195 = [v192 initWithData:v193 sig:v194];
          sub_10000852C((uint64_t)v189, v191);
          sub_10000852C(v176, v178);

          if (v195)
          {
            strcpy((char *)v411, "signing-key ");
            BYTE5(v411[1]) = 0;
            HIWORD(v411[1]) = -5120;
            uint64_t v203 = v393;
            v204._uint64_t countAndFlagsBits = v393;
            v204._object = v396;
            String.append(_:)(v204);
            uint64_t v386 = v411[0];
            id v384 = (_TtC18TrustedPeersHelper6Client *)v411[1];
            ((void (*)(char *, unint64_t, uint64_t))v392)(v399, v406, v408);
            unint64_t v406 = v191;
            uint64_t v205 = v407;
            uint64_t v206 = *(unsigned __int8 *)(v407 + 80);
            unint64_t v397 = v178;
            uint64_t v207 = (v206 + 88) & ~v206;
            unint64_t v208 = (v398 + v207 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v209 = (v208 + 23) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v392 = (v209 + 19) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v210 = swift_allocObject(&unk_10023A7D8, v392 | 4, v206 | 7);
            SEL v211 = v409;
            uint64_t v409 = v189;
            uint64_t v212 = v410;
            *(void *)(v210 + 16) = v211;
            *(void *)(v210 + 24) = v212;
            uint64_t v398 = v176;
            int64_t v213 = v394;
            id v214 = v395;
            *(void *)(v210 + 32) = v395;
            *(void *)(v210 + 40) = v213;
            id v215 = v385;
            *(void *)(v210 + 48) = v385;
            *(void *)(v210 + 56) = v195;
            BOOL v216 = v399;
            *(void *)(v210 + 64) = v400;
            *(void *)(v210 + 72) = v203;
            *(void *)(v210 + 80) = v396;
            (*(void (**)(uint64_t, char *, uint64_t))(v205 + 32))(v210 + v207, v216, v408);
            BOOL v217 = (void *)(v210 + v208);
            SEL v218 = v405;
            unint64_t v219 = v402;
            void *v217 = v404;
            v217[1] = v219;
            int64_t v220 = (void *)(v210 + v209);
            *int64_t v220 = v403;
            v220[1] = v218;
            *(_DWORD *)(v210 + v392) = v401;
            swift_bridgeObjectRetain(v219);
            swift_bridgeObjectRetain(v218);
            swift_retain(v212);
            id v221 = v214;
            id v222 = v215;
            BOOL v223 = v195;
            id v224 = v222;
            id v225 = v223;
            swift_bridgeObjectRetain(v400);
            id v226 = v384;
            sub_1000DF630(v386, (uint64_t)v384, (void (*)(void))sub_100175710);
            swift_release(v394, v227, v228, v229, v230, v231, v232, v233);
            sub_10000852C((uint64_t)v391, v390);
            sub_10000852C(v387, v388);

            sub_10000852C(v398, v397);
            sub_10000852C((uint64_t)v409, v406);
            swift_bridgeObjectRelease(v226, v234, v235, v236, v237, v238, v239, v240);
            swift_release((_TtC18TrustedPeersHelper6Client *)v210, v241, v242, v243, v244, v245, v246, v247);

            return;
          }

          unint64_t v360 = v394;
          swift_release(v394, v196, v197, v198, v199, v200, v201, v202);
          swift_bridgeObjectRelease(v396, v361, v362, v363, v364, v365, v366, v367);
          uint64_t v369 = (os_log_s *)Logger.logObject.getter(v368);
          os_log_type_t v370 = static os_log_type_t.info.getter(v369);
          if (os_log_type_enabled(v369, v370))
          {
            id v371 = v189;
            uint64_t v372 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v372 = 0;
            _os_log_impl((void *)&_mh_execute_header, v369, v370, "cannot create TPPeerStableInfo", v372, 2u);
            uint64_t v373 = v372;
            id v189 = v371;
            swift_slowDealloc(v373, -1LL, -1LL);
          }

          unint64_t v374 = sub_100043F74();
          uint64_t v375 = swift_allocError(&type metadata for ContainerError, v374, 0LL, 0LL);
          *(_OWORD *)uint64_t v376 = xmmword_1001DEA00;
          *(_BYTE *)(v376 + 16) = 13;
          v409(0LL, 0LL, v375);
          swift_release(v360, v377, v378, v379, v380, v381, v382, v383);
          sub_10000852C((uint64_t)v391, v390);
          sub_10000852C(v387, v388);

          sub_10000852C(v176, v178);
          uint64_t v358 = (uint64_t)v189;
          unint64_t v359 = v191;
        }

        else
        {
          swift_release(v69, v180, v181, v182, v183, v184, v185, v186);
          swift_bridgeObjectRelease(v396, v337, v338, v339, v340, v341, v342, v343);
          id v345 = (os_log_s *)Logger.logObject.getter(v344);
          os_log_type_t v346 = static os_log_type_t.info.getter(v345);
          if (os_log_type_enabled(v345, v346))
          {
            BOOL v347 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)BOOL v347 = 0;
            _os_log_impl((void *)&_mh_execute_header, v345, v346, "stableInfoSig does not exist", v347, 2u);
            os_log_t v187 = v391;
            swift_slowDealloc(v347, -1LL, -1LL);
          }

          unint64_t v348 = sub_100043F74();
          uint64_t v349 = swift_allocError(&type metadata for ContainerError, v348, 0LL, 0LL);
          *(_OWORD *)uint64_t v350 = xmmword_1001DEA00;
          *(_BYTE *)(v350 + 16) = 13;
          v409(0LL, 0LL, v349);
          swift_release(v69, v351, v352, v353, v354, v355, v356, v357);
          sub_10000852C((uint64_t)v187, v390);
          sub_10000852C(v387, v388);

          uint64_t v358 = v176;
          unint64_t v359 = v178;
        }

        sub_10000852C(v358, v359);
        id v336 = &v414;
LABEL_51:

LABEL_10:
        swift_errorRelease();
        return;
      }

      swift_release(v69, v168, v169, v170, v171, v172, v173, v174);
      swift_bridgeObjectRelease(v396, v313, v314, v315, v316, v317, v318, v319);
      BOOL v321 = (os_log_s *)Logger.logObject.getter(v320);
      os_log_type_t v322 = static os_log_type_t.info.getter(v321);
      BOOL v323 = os_log_type_enabled(v321, v322);
      unint64_t v324 = v390;
      if (v323)
      {
        id v325 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v325 = 0;
        _os_log_impl((void *)&_mh_execute_header, v321, v322, "stableInfo does not exist", v325, 2u);
        swift_slowDealloc(v325, -1LL, -1LL);
      }

      unint64_t v326 = sub_100043F74();
      uint64_t v327 = swift_allocError(&type metadata for ContainerError, v326, 0LL, 0LL);
      *(_OWORD *)uint64_t v328 = xmmword_1001DEA00;
      *(_BYTE *)(v328 + 16) = 13;
      v409(0LL, 0LL, v327);
      swift_release(v69, v329, v330, v331, v332, v333, v334, v335);
      sub_10000852C((uint64_t)v391, v324);
      sub_10000852C(v387, v388);
    }

    else
    {
      swift_release(v69, v158, v159, v160, v161, v162, v163, v164);
      swift_bridgeObjectRelease(v143, v292, v293, v294, v295, v296, v297, v298);
      id v300 = (os_log_s *)Logger.logObject.getter(v299);
      os_log_type_t v301 = static os_log_type_t.info.getter(v300);
      if (os_log_type_enabled(v300, v301))
      {
        unint64_t v302 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v302 = 0;
        _os_log_impl((void *)&_mh_execute_header, v300, v301, "cannot create TPPeerPermanentInfo", v302, 2u);
        swift_slowDealloc(v302, -1LL, -1LL);
      }

      unint64_t v303 = sub_100043F74();
      uint64_t v304 = swift_allocError(&type metadata for ContainerError, v303, 0LL, 0LL);
      *(_OWORD *)uint64_t v305 = xmmword_1001DE880;
      *(_BYTE *)(v305 + 16) = 13;
      v409(0LL, 0LL, v304);
      swift_release(v69, v306, v307, v308, v309, v310, v311, v312);
      sub_10000852C((uint64_t)v391, v390);
      sub_10000852C(v387, v388);
    }

    id v336 = &v415;
    goto LABEL_51;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v61 = type metadata accessor for Logger(0LL);
  uint64_t v62 = sub_100006BAC(v61, (uint64_t)qword_1002567D0);
  id v63 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v64 = static os_log_type_t.info.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    id v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v65 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "no prepared identity, cannot create custodian recovery key",  v65,  2u);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  unint64_t v66 = sub_100043F74();
  uint64_t v67 = swift_allocError(&type metadata for ContainerError, v66, 0LL, 0LL);
  *(_OWORD *)uint64_t v68 = xmmword_1001DE890;
  *(_BYTE *)(v68 + 16) = 13;
  v409(0LL, 0LL, v67);
  swift_errorRelease();
}

void sub_100105530( void *a1, unint64_t a2, void (*a3)(void, void, unint64_t), uint64_t a4, char *a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  id v102 = a7;
  unint64_t v105 = a3;
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  __chkstk_darwin(v23, v26);
  uint64_t v27 = (char *)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    int v98 = a17;
    uint64_t v96 = a15;
    uint64_t v97 = a16;
    uint64_t v94 = a13;
    uint64_t v95 = a14;
    BOOL v93 = a1;
    uint64_t v104 = a11;
    uint64_t v106 = a4;
    uint64_t v92 = a10;
    uint64_t v103 = a9;
    uint64_t v28 = a5;
    uint64_t v29 = *(void **)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    id v99 = a5;
    id v101 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))( (char *)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a12,  v23);
    uint64_t v30 = *(unsigned __int8 *)(v24 + 80);
    uint64_t v31 = (v30 + 96) & ~v30;
    unint64_t v32 = (v25 + v31 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v100 = a6;
    a2 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v91 = (a2 + 19) & 0xFFFFFFFFFFFFFFF8LL;
    a4 = swift_allocObject(&unk_10023A800, v91 | 4, v30 | 7);
    *(void *)(a4 + 16) = v28;
    *(void *)(a4 + 24) = a6;
    uint64_t v34 = v102;
    uint64_t v33 = v103;
    *(void *)(a4 + 32) = v102;
    *(void *)(a4 + 40) = a8;
    uint64_t v35 = v92;
    *(void *)(a4 + 48) = v33;
    *(void *)(a4 + 56) = v35;
    uint64_t v36 = v93;
    *(void *)(a4 + 64) = v104;
    *(void *)(a4 + 72) = v36;
    uint64_t v37 = v106;
    *(void *)(a4 + 80) = v105;
    *(void *)(a4 + 88) = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a4 + v31, v27, v23);
    uint64_t v38 = (void *)(a4 + v32);
    uint64_t v39 = v95;
    *uint64_t v38 = v94;
    v38[1] = v39;
    unint64_t v40 = (void *)(a4 + a2);
    uint64_t v41 = v97;
    *unint64_t v40 = v96;
    v40[1] = v41;
    *(_DWORD *)(a4 + v91) = v98;
    SEL v42 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A828, 32LL, 7LL);
    *(void *)v42->endpoint = sub_1001758AC;
    *(void *)v42->containerMap = a4;
    aBlock[4] = (uint64_t)sub_100176BD4;
    SEL v108 = v42;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023A840;
    id v43 = _Block_copy(aBlock);
    int64_t v44 = v108;
    id v45 = v36;
    id v46 = v99;
    id v47 = v34;
    id v48 = a8;
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRetain(v104);
    swift_retain(v106);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v41);
    swift_retain(v100);
    swift_retain(v42);
    swift_release(v44, v49, v50, v51, v52, v53, v54, v55);
    [v101 performBlockAndWait:v43];

    _Block_release(v43);
    LOBYTE(v41) = swift_isEscapingClosureAtFileLocation(v42, "", 108LL, 3501LL, 41LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)a4, v56, v57, v58, v59, v60, v61, v62);
    swift_release(v42, v63, v64, v65, v66, v67, v68, v69);
    if ((v41 & 1) == 0) {
      return;
    }
    __break(1u);
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v70 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v70, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v71 = swift_errorRetain(a2);
  uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
  os_log_type_t v76 = static os_log_type_t.error.getter(v72, v73, v74, v75);
  if (os_log_type_enabled(v72, v76))
  {
    BOOL v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v78 = swift_slowAlloc(32LL, -1LL);
    uint64_t v106 = a4;
    aBlock[0] = v78;
    uint64_t v79 = v78;
    *(_DWORD *)BOOL v77 = 136446210;
    uint64_t v109 = a2;
    swift_errorRetain(a2);
    uint64_t v80 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v81 = String.init<A>(describing:)(&v109, v80);
    uint64_t v83 = (_TtC18TrustedPeersHelper6Client *)v82;
    uint64_t v109 = sub_10017C4C4(v81, v82, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v77 + 4, v77 + 12);
    swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v72, v76, "handle: no signing key pair: %{public}s", v77, 0xCu);
    swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1LL, -1LL);
    swift_slowDealloc(v77, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  v105(0LL, 0LL, a2);
}

uint64_t sub_1001059B4( char *a1, _TtC18TrustedPeersHelper6Client *a2, void *a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7, uint64_t a8, void (*a9)(void, void, uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  uint64_t v206 = a8;
  SEL v211 = a6;
  uint64_t v212 = a7;
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v204 = *(void *)(v21 - 8);
  uint64_t v205 = v21;
  uint64_t v22 = *(void *)(v204 + 64);
  __chkstk_darwin(v21, v23);
  unint64_t v208 = (char *)&v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v203 = type metadata accessor for AddCustodianRecoveryKeyRequest(0LL);
  __chkstk_darwin(v203, v24);
  uint64_t v210 = (char *)&v193 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v202 = (id)type metadata accessor for SignedPeerDynamicInfo(0LL);
  __chkstk_darwin(v202, v26);
  unint64_t v209 = (uint64_t *)((char *)&v193 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v28 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  __chkstk_darwin(v28, v29);
  id v215 = (uint64_t *)((char *)&v193 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v207 = a1;
  unint64_t v32 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  uint64_t v33 = *(void *)a2->containerMap;
  id v218 = 0LL;
  id v34 = [v32 getViewsForCRK:v33 donorPermanentInfo:a3 donorStableInfo:a4 error:&v218];
  id v35 = v218;
  if (!v34)
  {
    id v149 = v218;
    uint64_t v150 = _convertNSErrorToError(_:)(v35);

    swift_willThrow(v151);
    swift_errorRetain(v150);
    a9(0LL, 0LL, v150);
    swift_errorRelease();
    return swift_errorRelease();
  }

  uint64_t v36 = v34;
  uint64_t v213 = a10;
  id v214 = a9;
  uint64_t v37 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v34,  &type metadata for String,  &protocol witness table for String);
  id v38 = v35;

  swift_bridgeObjectRetain(v37);
  uint64_t v39 = (_TtC18TrustedPeersHelper6Client *)sub_10015A0B0(a5, v37);
  swift_bridgeObjectRelease_n(v37, 2LL);
  unint64_t v40 = (_TtC18TrustedPeersHelper6Client *)*(id *)a2->endpoint;
  uint64_t v41 = (uint64_t)[a3 epoch];
  if (v41 < 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  SEL v42 = (_TtC18TrustedPeersHelper6Client *)sub_1000E04C0(v39, (uint64_t)v40, v40, v41);
  swift_bridgeObjectRelease(v39, v43, v44, v45, v46, v47, v48, v49);

  BOOL v201 = v42;
  id v50 = v215;
  swift_retain(a2);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  id v51 = [*(id *)a2->containerMap data];
  uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
  uint64_t v54 = v53;

  uint64_t *v50 = v52;
  v50[1] = v54;
  id v55 = [*(id *)a2->containerMap sig];
  uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v58 = v57;

  swift_release(a2, v59, v60, v61, v62, v63, v64, v65);
  v50[2] = v56;
  v50[3] = v58;
  id v66 = [*(id *)a2->containerMap peerID];
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
  id v69 = v68;

  uint64_t v70 = *(void **)&v207[v31];
  uint64_t v71 = v207;
  id v72 = v70;
  NSString v73 = String._bridgeToObjectiveC()();
  uint64_t v74 = sub_100007578((uint64_t *)&unk_100251820);
  uint64_t v75 = swift_allocObject(v74, 48LL, 7LL);
  *(_OWORD *)(v75 + 16) = xmmword_1001DE710;
  uint64_t v199 = v67;
  id v200 = v69;
  *(void *)(v75 + 32) = v67;
  *(void *)(v75 + 40) = v69;
  swift_bridgeObjectRetain(v69);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v75, v77, v78, v79, v80, v81, v82, v83);
  SEL v84 = (void *)sub_1001A3414();
  id v218 = 0LL;
  id v85 =  [v72 calculateDynamicInfoForPeerWithID:v73 addingPeerIDs:isa removingPeerIDs:0 preapprovedKeys:0 signingKeyPair:v206 currentMachineIDs:v84 error:&v218];

  id v86 = v218;
  if (!v85)
  {
    id v153 = v218;
    swift_bridgeObjectRelease(v200, v154, v155, v156, v157, v158, v159, v160);
    swift_bridgeObjectRelease(v201, v161, v162, v163, v164, v165, v166, v167);
    uint64_t v22 = _convertNSErrorToError(_:)(v86);

    swift_willThrow(v168);
    if (qword_100250EB8 == -1)
    {
LABEL_7:
      uint64_t v169 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v169, (uint64_t)qword_1002567D0);
      swift_errorRetain(v22);
      uint64_t v170 = swift_errorRetain(v22);
      int64_t v171 = (os_log_s *)Logger.logObject.getter(v170);
      os_log_type_t v175 = static os_log_type_t.error.getter(v171, v172, v173, v174);
      if (os_log_type_enabled(v171, v175))
      {
        uint64_t v176 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v177 = (void *)swift_slowAlloc(32LL, -1LL);
        id v218 = v177;
        *(_DWORD *)uint64_t v176 = 136446210;
        uint64_t v216 = v22;
        swift_errorRetain(v22);
        uint64_t v178 = sub_100007578(&qword_100251D70);
        uint64_t v179 = String.init<A>(describing:)(&v216, v178);
        id v181 = (_TtC18TrustedPeersHelper6Client *)v180;
        uint64_t v216 = sub_10017C4C4(v179, v180, (uint64_t *)&v218);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &v217, v176 + 4, v176 + 12);
        swift_bridgeObjectRelease(v181, v182, v183, v184, v185, v186, v187, v188);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v171, v175, "Error preparing dynamic info: %{public}s", v176, 0xCu);
        swift_arrayDestroy(v177, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v177, -1LL, -1LL);
        swift_slowDealloc(v176, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      id v189 = v214;
      unint64_t v190 = (char *)v215;
      swift_errorRetain(v22);
      v189(0LL, 0LL, v22);
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v148 = (uint64_t)v190;
      return sub_1000415CC(v148, type metadata accessor for SignedCustodianRecoveryKey);
    }

void sub_1001062D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _TtC18TrustedPeersHelper6Client *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v97 = a8;
  uint64_t v95 = a5;
  uint64_t v96 = a6;
  uint64_t v94 = a4;
  uint64_t v101 = a9;
  uint64_t v13 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v21)) & 1) == 0)
  {
    uint64_t v22 = *(void *)(a1 + v21);
    uint64_t v23 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    uint64_t v24 = (void *)swift_retain(v22);
    uint64_t v25 = sub_100090AF8(v24);
    uint64_t v26 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v21);
    *(void *)(a1 + v21) = v25;
    swift_release(v26, v27, v28, v29, v30, v31, v32, v33);
  }

  uint64_t v34 = *(void *)(a1 + v21);
  swift_beginAccess(v34 + 32, v100, 1LL, 0LL);
  id v35 = *(_TtC18TrustedPeersHelper6Client **)(v34 + 40);
  *(void *)(v34 + 32) = a2;
  *(void *)(v34 + 40) = a3;
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  __chkstk_darwin(v43, v44);
  uint64_t v45 = v95;
  *(&v94 - 4) = v94;
  *(&v94 - 3) = v45;
  *(&v94 - 2) = v96;
  uint64_t v46 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  static Message.with(_:)(sub_100175D84, &v94 - 6, v17, v46);
  AddCustodianRecoveryKeyRequest.peer.setter((uint64_t)v20);
  swift_bridgeObjectRetain(a7);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v21)) & 1) == 0)
  {
    uint64_t v47 = *(void *)(a1 + v21);
    uint64_t v48 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    BOOL v49 = (void *)swift_retain(v47);
    id v50 = sub_100090AF8(v49);
    id v51 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v21);
    *(void *)(a1 + v21) = v50;
    swift_release(v51, v52, v53, v54, v55, v56, v57, v58);
  }

  SEL v59 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v21)
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess(v59, v99, 1LL, 0LL);
  id v60 = *v59;
  *SEL v59 = a7;
  swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
  sub_10004164C(v97, (uint64_t)v16, type metadata accessor for SignedPeerDynamicInfo);
  AddCustodianRecoveryKeyRequest.dynamicInfoAndSig.setter((uint64_t)v16);
  id v68 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v101
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
  if (v68)
  {
    id v69 = v68;
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    unint64_t v72 = v71;
  }

  else
  {
    uint64_t v70 = 0LL;
    unint64_t v72 = 0xE000000000000000LL;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v21)) & 1) == 0)
  {
    uint64_t v73 = *(void *)(a1 + v21);
    uint64_t v74 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
    uint64_t v75 = (void *)swift_retain(v73);
    os_log_type_t v76 = sub_100090AF8(v75);
    SEL v77 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v21);
    *(void *)(a1 + v21) = v76;
    swift_release(v77, v78, v79, v80, v81, v82, v83, v84);
  }

  uint64_t v85 = *(void *)(a1 + v21);
  swift_beginAccess(v85 + 16, v98, 1LL, 0LL);
  id v86 = *(_TtC18TrustedPeersHelper6Client **)(v85 + 24);
  *(void *)(v85 + 16) = v70;
  *(void *)(v85 + 24) = v72;
  swift_bridgeObjectRelease(v86, v87, v88, v89, v90, v91, v92, v93);
}

uint64_t sub_100106608(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (_TtC18TrustedPeersHelper6Client *)a1[1];
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  *a1 = a2;
  a1[1] = a3;
  sub_10004164C(a4, (uint64_t)v12, type metadata accessor for SignedCustodianRecoveryKey);
  uint64_t v21 = (uint64_t)a1 + *(int *)(type metadata accessor for Peer(0LL) + 44);
  sub_100041590(v21, &qword_100251F28);
  sub_100041608((uint64_t)v12, v21, type metadata accessor for SignedCustodianRecoveryKey);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v21, 0LL, 1LL, v8);
}

void sub_10010670C( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, void (*a10)(void, void, _TtC18TrustedPeersHelper6Client *), uint64_t a11)
{
  uint64_t v96 = a6;
  uint64_t v97 = a8;
  uint64_t v94 = a5;
  uint64_t v95 = a7;
  uint64_t v98 = a4;
  uint64_t v93 = a3;
  uint64_t v101 = a11;
  id v102 = a10;
  uint64_t v103 = a2;
  uint64_t v100 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v100 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v100, v14);
  uint64_t v99 = &v89[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = type metadata accessor for AddCustodianRecoveryKeyResponse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  BOOL v20 = &v89[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v19, v21);
  uint64_t v23 = &v89[-v22];
  uint64_t v24 = sub_100007578(&qword_100251DD8);
  __chkstk_darwin(v24, v25);
  SEL v27 = (_TtC18TrustedPeersHelper6Client **)&v89[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10000FC68(a1, (uint64_t)v27, &qword_100251DD8);
  if (swift_getEnumCaseMultiPayload(v27, v24) != 1)
  {
    int v90 = a9;
    BOOL v92 = v23;
    sub_100041608((uint64_t)v27, (uint64_t)v23, type metadata accessor for AddCustodianRecoveryKeyResponse);
    id v91 = *(id *)&v103[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    sub_10004164C((uint64_t)v23, (uint64_t)v20, type metadata accessor for AddCustodianRecoveryKeyResponse);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v99, v93, v100);
    uint64_t v49 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v50 = (v49 + 24) & ~v49;
    uint64_t v51 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v52 = (v17 + v51 + v50) & ~v51;
    unint64_t v53 = (v13 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v56 = (v55 + 19) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v57 = (v56 + 11) & 0xFFFFFFFFFFFFFFF8LL;
    id v58 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A8A0, v57 + 16, v49 | v51 | 7);
    *(void *)v58->endpoint = v103;
    sub_100041608( (uint64_t)v20,  (uint64_t)&v58->_TtCs12_SwiftObject_opaque[v50],  type metadata accessor for AddCustodianRecoveryKeyResponse);
    (*(void (**)(unsigned __int8 *, _BYTE *, uint64_t))(v12 + 32))( &v58->_TtCs12_SwiftObject_opaque[v52],  v99,  v100);
    uint64_t v59 = v98;
    *(void *)&v58->_TtCs12_SwiftObject_opaque[v53] = v98;
    id v60 = &v58->_TtCs12_SwiftObject_opaque[v54];
    uint64_t v62 = v96;
    uint64_t v61 = v97;
    *(void *)id v60 = v94;
    *((void *)v60 + 1) = v62;
    int64_t v63 = &v58->_TtCs12_SwiftObject_opaque[v55];
    *(void *)int64_t v63 = v95;
    *((void *)v63 + 1) = v61;
    *(_DWORD *)&v58->_TtCs12_SwiftObject_opaque[v56] = v90;
    id v64 = &v58->_TtCs12_SwiftObject_opaque[v57];
    uint64_t v65 = v101;
    *(void *)id v64 = v102;
    *((void *)v64 + 1) = v65;
    id v31 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A8C8, 32LL, 7LL);
    *(void *)v31->endpoint = sub_100175CAC;
    *(void *)v31->containerMap = v58;
    aBlock[4] = (uint64_t)sub_100176BD4;
    SEL v105 = v31;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023A8E0;
    BOOL v66 = _Block_copy(aBlock);
    id v28 = v105;
    BOOL v67 = v103;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v61);
    swift_retain(v65);
    swift_retain(v59);
    swift_retain(v31);
    swift_release(v28, v68, v69, v70, v71, v72, v73, v74);
    [v91 performBlockAndWait:v66];
    _Block_release(v66);
    sub_1000415CC((uint64_t)v92, type metadata accessor for AddCustodianRecoveryKeyResponse);
    LOBYTE(v66) = swift_isEscapingClosureAtFileLocation(v31, "", 108LL, 3546LL, 57LL, 1LL);
    swift_release(v58, v75, v76, v77, v78, v79, v80, v81);
    swift_release(v31, v82, v83, v84, v85, v86, v87, v88);
    __break(1u);
    goto LABEL_8;
  }

  id v28 = *v27;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v29, (uint64_t)qword_1002567D0);
  swift_errorRetain(v28);
  uint64_t v30 = swift_errorRetain(v28);
  id v31 = (_TtC18TrustedPeersHelper6Client *)Logger.logObject.getter(v30);
  os_log_type_t v35 = static os_log_type_t.error.getter(v31, v32, v33, v34);
  if (!os_log_type_enabled((os_log_t)v31, v35))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  SEL v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v37 = swift_slowAlloc(32LL, -1LL);
  aBlock[0] = v37;
  *(_DWORD *)SEL v36 = 136446210;
  uint64_t v106 = (uint64_t)v28;
  swift_errorRetain(v28);
  uint64_t v38 = sub_100007578(&qword_100251D70);
  uint64_t v39 = String.init<A>(describing:)(&v106, v38);
  BOOL v41 = (_TtC18TrustedPeersHelper6Client *)v40;
  uint64_t v106 = sub_10017C4C4(v39, v40, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v36 + 4, v36 + 12);
  swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v31,  v35,  "CreateCustodianRecoveryKey failed: %{public}s",  v36,  0xCu);
  swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v37, -1LL, -1LL);
  swift_slowDealloc(v36, -1LL, -1LL);
LABEL_9:

  swift_errorRetain(v28);
  v102(0LL, 0LL, v28);
  swift_errorRelease();
  swift_errorRelease();
}

void sub_100106C54( uint64_t a1, _TtC18TrustedPeersHelper6Client **a2, uint64_t a3, uint64_t a4, uint64_t a5, _TtC18TrustedPeersHelper6Client *a6, uint64_t a7, _TtC18TrustedPeersHelper6Client *a8, unsigned int a9, void (*a10)(_TtC18TrustedPeersHelper6Client *, id, void), uint64_t a11)
{
  uint64_t v111 = a7;
  SEL v112 = a8;
  uint64_t v109 = a5;
  BOOL v110 = a6;
  uint64_t v107 = a3;
  uint64_t v108 = a4;
  uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v115 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  int64_t v114 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v103 - v17;
  uint64_t v19 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for Changes(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  SEL v27 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for AddCustodianRecoveryKeyResponse(0LL);
  sub_10000FC68((uint64_t)a2 + *(int *)(v28 + 24), (uint64_t)v22, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23) == 1)
  {
    *(void *)SEL v27 = 0LL;
    *((void *)v27 + 1) = 0xE000000000000000LL;
    *((void *)v27 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v27 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v27 + 40) = xmmword_1001DE6F0;
    v27[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v22, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v22, (uint64_t)v27, type metadata accessor for Changes);
  }

  sub_10013D540((uint64_t)v27, 0);
  sub_1000415CC((uint64_t)v27, type metadata accessor for Changes);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  unsigned int v105 = a9;
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = sub_100006BAC(v29, (uint64_t)qword_1002567D0);
  id v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "CreateCustodianRecoveryKey succeeded", v33, 2u);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  id v113 = a10;
  uint64_t v106 = a11;

  uint64_t v34 = *a2;
  id v116 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)v34->endpoint;
  if (v35)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    SEL v36 = &v34->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v115 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80)];
    uint64_t v37 = *(void *)(v115 + 72);
    uint64_t v38 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v115 + 16);
    uint64_t v104 = v34;
    swift_bridgeObjectRetain(v34);
    do
    {
      v38(v18, v36, v12);
      BOOL v47 = v114;
      v38(v114, (unsigned __int8 *)v18, v12);
      uint64_t v48 = CKRecord.init(_:)(v47);
      uint64_t v49 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v18, v12);
      if (v48)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
        unint64_t v51 = *(void *)(((unint64_t)v116 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v50 = *(void *)(((unint64_t)v116 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v51 >= v50 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1LL);
        }
        uint64_t v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v48);
        specialized Array._endMutation()(v39);
      }

      v36 += v37;
      --v35;
    }

    while (v35);
    uint64_t v52 = v116;
    uint64_t v34 = v104;
  }

  else
  {
    swift_bridgeObjectRetain(v34);
    uint64_t v52 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v34, v40, v41, v42, v43, v44, v45, v46);
  UUID.uuidString.getter();
  unint64_t v54 = v53;
  uint64_t v55 = v108;
  id v56 = [*(id *)(v108 + 24) encryptionPublicKey];
  id v57 = [v56 spki];
  swift_unknownObjectRelease(v56);
  uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
  unint64_t v60 = v59;

  id v61 = [*(id *)(v55 + 24) signingPublicKey];
  id v62 = [v61 spki];
  swift_unknownObjectRelease(v61);
  uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v62);
  unint64_t v65 = v64;

  id v66 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperCustodianRecoveryKey);
  BOOL v67 = v112;
  swift_bridgeObjectRetain(v112);
  SEL v68 = v110;
  swift_bridgeObjectRetain(v110);
  NSString v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v54, v70, v71, v72, v73, v74, v75, v76);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v58, v60);
  Class v78 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v63, v65);
  NSString v79 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68, v80, v81, v82, v83, v84, v85, v86);
  NSString v87 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v67, v88, v89, v90, v91, v92, v93, v94);
  id v95 = [v66 initWithUUID:v69 encryptionKey:isa signingKey:v78 recoveryString:v79 salt:v87 kind:v105];

  v113(v52, v95, 0LL);
  swift_bridgeObjectRelease(v52, v96, v97, v98, v99, v100, v101, v102);
}

uint64_t sub_100107394(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_100146B88( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "removeCustodianRecoveryKey complete: %{public}s",  0xD000000000000027LL,  0x80000001001F9680LL);
}

void sub_1001073C0(char *a1, void (*a2)(void), _TtC18TrustedPeersHelper6Client *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v160 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v14 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v14)
  {
    uint64_t v15 = v14;
    BOOL v160 = a2;
    SEL v161 = a3;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;

    id v19 = *(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v162 = [v19 findCustodianRecoveryKeyWithUUID:isa];

    if (v162)
    {
      id v28 = [v162 peerID];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      id v31 = v30;

      if (v29 == v16 && v31 == v18)
      {
        swift_bridgeObjectRelease(v18, v32, v33, v34, v35, v36, v37, v38);
        goto LABEL_19;
      }

      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v16, v18, 0LL);
      swift_bridgeObjectRelease(v18, v41, v42, v43, v44, v45, v46, v47);
      uint64_t v55 = v161;
      if ((v40 & 1) != 0)
      {
        uint64_t v18 = v31;
LABEL_19:
        swift_bridgeObjectRelease(v18, v48, v49, v50, v51, v52, v53, v54);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v80 = type metadata accessor for Logger(0LL);
        uint64_t v81 = sub_100006BAC(v80, (uint64_t)qword_1002567D0);
        int64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
        os_log_type_t v83 = static os_log_type_t.info.getter(v82);
        if (os_log_type_enabled(v82, v83))
        {
          id v84 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v84 = 0;
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "Self-distrust via peerID not allowed", v84, 2u);
          swift_slowDealloc(v84, -1LL, -1LL);
        }

        unint64_t v85 = sub_100043F74();
        swift_allocError(&type metadata for ContainerError, v85, 0LL, 0LL);
        *(_OWORD *)uint64_t v86 = xmmword_1001E6830;
        *(_BYTE *)(v86 + 16) = 13;
        v160();
        swift_errorRelease();

        return;
      }

      uint64_t v90 = sub_100007578((uint64_t *)&unk_100251820);
      uint64_t inited = swift_initStackObject(v90, v164);
      *(_OWORD *)(inited + 16) = xmmword_1001DE710;
      *(void *)(inited + 32) = v29;
      *(void *)(inited + 40) = v31;
      swift_bridgeObjectRetain(v31);
      id v92 = (_TtC18TrustedPeersHelper6Client *)sub_10015AB0C(inited);
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
      uint64_t v93 = swift_allocObject(&unk_100238000, 64LL, 7LL);
      *(void *)(v93 + 16) = a1;
      *(void *)(v93 + 24) = v29;
      *(void *)(v93 + 32) = v31;
      BOOL v94 = v160;
      *(void *)(v93 + 40) = v162;
      *(void *)(v93 + 48) = v94;
      *(void *)(v93 + 56) = v55;
      id v95 = *(void **)&a1[v13];
      SEL v96 = a1;
      swift_retain_n(v55, 2LL);
      id v97 = v162;
      swift_bridgeObjectRetain(v31);
      int64_t v98 = v96;
      id v99 = v97;
      id v100 = [v95 egoPeerID];
      if (v100)
      {
        BOOL v101 = v100;
        uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
        uint64_t v104 = v103;

        strcpy((char *)v163, "signing-key ");
        BYTE5(v163[1]) = 0;
        HIWORD(v163[1]) = -5120;
        v105._uint64_t countAndFlagsBits = v102;
        v105._object = v104;
        String.append(_:)(v105);
        uint64_t v106 = v163[0];
        uint64_t v107 = v163[1];
        uint64_t v108 = v98;
        swift_retain(v93);
        swift_bridgeObjectRetain(v104);
        swift_bridgeObjectRetain(v92);
        sub_100160060( v106,  v107,  (uint64_t)sub_100171380,  v93,  (uint64_t)v108,  v102,  (uint64_t)v104,  (uint64_t)v92,  (void (*)(void))sub_100115284);
        uint64_t v109 = (_TtC18TrustedPeersHelper6Client *)v107;
        uint64_t v55 = v161;
        swift_bridgeObjectRelease(v109, v110, v111, v112, v113, v114, v115, v116);
        swift_release_n(v93, 2LL);

        swift_bridgeObjectRelease_n(v104, 2LL);
        swift_bridgeObjectRelease(v92, v117, v118, v119, v120, v121, v122, v123);
      }

      else
      {
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v131 = type metadata accessor for Logger(0LL);
        uint64_t v132 = sub_100006BAC(v131, (uint64_t)qword_1002567D0);
        uint64_t v133 = (os_log_s *)Logger.logObject.getter(v132);
        os_log_type_t v134 = static os_log_type_t.info.getter(v133);
        if (os_log_type_enabled(v133, v134))
        {
          id v135 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v135 = 0;
          _os_log_impl((void *)&_mh_execute_header, v133, v134, "No dynamic info for self?", v135, 2u);
          uint64_t v136 = v135;
          uint64_t v55 = v161;
          swift_slowDealloc(v136, -1LL, -1LL);
        }

        unint64_t v137 = sub_100043F74();
        swift_allocError(&type metadata for ContainerError, v137, 0LL, 0LL);
        *(_OWORD *)uint64_t v138 = xmmword_1001DE890;
        *(_BYTE *)(v138 + 16) = 13;
        v160();
        swift_errorRelease();

        swift_release((_TtC18TrustedPeersHelper6Client *)v93, v139, v140, v141, v142, v143, v144, v145);
      }

      swift_bridgeObjectRelease(v92, v124, v125, v126, v127, v128, v129, v130);
      swift_release(v55, v146, v147, v148, v149, v150, v151, v152);

      swift_bridgeObjectRelease(v31, v153, v154, v155, v156, v157, v158, v159);
    }

    else
    {
      swift_bridgeObjectRelease(v18, v21, v22, v23, v24, v25, v26, v27);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v63 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v63, (uint64_t)qword_1002567D0);
      uint64_t v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a4, v8);
      unint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
      os_log_type_t v66 = static os_log_type_t.info.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        BOOL v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v68 = swift_slowAlloc(32LL, -1LL);
        v163[0] = v68;
        *(_DWORD *)BOOL v67 = 136446210;
        uint64_t v69 = sub_1000077B8( (unint64_t *)&unk_100256D00,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v8, v69);
        int64_t v72 = (_TtC18TrustedPeersHelper6Client *)v71;
        uint64_t v165 = sub_10017C4C4(v70, v71, v163);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v67 + 4, v67 + 12);
        swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "Unable to find custodian recovery key %{public}s on model",  v67,  0xCu);
        swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1LL, -1LL);
        swift_slowDealloc(v67, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      }

      NSString v87 = v160;
      unint64_t v88 = sub_100043F74();
      swift_allocError(&type metadata for ContainerError, v88, 0LL, 0LL);
      *(_OWORD *)uint64_t v89 = xmmword_1001DE9E0;
      *(_BYTE *)(v89 + 16) = 13;
      v87();
      swift_errorRelease();
    }
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v56 = type metadata accessor for Logger(0LL);
    uint64_t v57 = sub_100006BAC(v56, (uint64_t)qword_1002567D0);
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.info.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      unint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "No dynamic info for self?", v60, 2u);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    unint64_t v61 = sub_100043F74();
    swift_allocError(&type metadata for ContainerError, v61, 0LL, 0LL);
    *(_OWORD *)uint64_t v62 = xmmword_1001DE890;
    *(_BYTE *)(v62 + 16) = 13;
    a2();
    swift_errorRelease();
  }

void sub_100107C38(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t))
{
  if (a1)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
LABEL_5:
    a6(a1);
    sub_10014E118((uint64_t)v7, (uint64_t)v8);
    return;
  }

  os_log_type_t v32 = a6;
  id v33 = *(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v8 = (void *)swift_allocObject(&unk_1002380C8, 48LL, 7LL);
  _OWORD v8[2] = a2;
  void v8[3] = a3;
  v8[4] = a4;
  v8[5] = a5;
  uint64_t v13 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002380F0, 32LL, 7LL);
  uint64_t v7 = sub_100171420;
  *(void *)v13->endpoint = sub_100171420;
  *(void *)v13->containerMap = v8;
  aBlock[4] = sub_100176BD4;
  uint64_t v35 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_100238108;
  id v14 = _Block_copy(aBlock);
  uint64_t v15 = v35;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain(a4);
  id v17 = a5;
  swift_retain(v13);
  swift_release(v15, v18, v19, v20, v21, v22, v23, v24);
  [v33 performBlockAndWait:v14];
  _Block_release(v14);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v13, "", 108LL, 3615LL, 45LL, 1LL);
  swift_release(v13, v25, v26, v27, v28, v29, v30, v31);
  if ((v15 & 1) == 0)
  {
    a6 = v32;
    goto LABEL_5;
  }

  __break(1u);
}

void sub_100107DC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 removeCustodianRecoveryKey:v7];

  uint64_t v8 = type metadata accessor for CustodianRecoveryKeyMO();
  id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)) initWithContext:*(void *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc)];
  id v10 = [a4 data];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  unint64_t v13 = v12;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v11, v13);
  [v9 setCrkInfo:isa];

  id v15 = [a4 sig];
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v18 = v17;

  Class v19 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v16, v18);
  [v9 setCrkInfoSig:v19];

  id v20 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  uint64_t v21 = sub_100007578(&qword_100256C28);
  uint64_t v22 = swift_allocObject(v21, 64LL, 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_1001DE710;
  *(void *)(v22 + 56) = v8;
  *(void *)(v22 + 32) = v9;
  sub_100007620(0LL, &qword_1002511B8, &OBJC_CLASS___NSSet_ptr);
  id v23 = v20;
  id v24 = v9;
  id v25 = (id)NSSet.init(arrayLiteral:)(v22);
  [v23 removeCustodianRecoveryKeys:v25];
}

uint64_t sub_100107FD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  return sub_100135B78( a1,  a2,  a3,  a4,  a5,  "findCustodianRecoveryKey complete: %{public}s",  0xD000000000000025LL,  0x80000001001F9650LL);
}

void sub_100107FF8(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v5 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v6 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 findCustodianRecoveryKeyWithUUID:isa];

  if (v8)
  {
    id v9 = *(void **)(a1 + v5);
    id v76 = 0LL;
    id v10 = v8;
    unsigned int v11 = [v9 isCustodianRecoveryKeyTrusted:v10 error:&v76];
    id v12 = v76;
    if (v76)
    {
      id v13 = v76;
      swift_willThrow(v13);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v14 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v14, (uint64_t)qword_1002567D0);
      id v15 = v13;
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v20 = static os_log_type_t.error.getter(v16, v17, v18, v19);
      if (os_log_type_enabled(v16, v20))
      {
        SEL v73 = a3;
        uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v71 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v21 = 138543362;
        id v22 = v15;
        id v23 = v15;
        id v24 = v10;
        id v25 = (void *)_swift_stdlib_bridgeErrorToNSError(v22);
        id v76 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v21 + 4, v21 + 12);
        void *v71 = v25;
        id v10 = v24;
        id v15 = v23;

        a3 = v73;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v20,  "error determine whether CRK is trusted: %{public}@",  v21,  0xCu);
        uint64_t v26 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v71, 1LL, v26);
        swift_slowDealloc(v71, -1LL, -1LL);
        swift_slowDealloc(v21, -1LL, -1LL);
      }

      else
      {

        uint64_t v16 = (os_log_s *)v15;
      }

      id v52 = v15;
      a3(0LL, v12);
    }

    else
    {
      if (v11)
      {
        UUID.uuidString.getter();
        int64_t v72 = v27;
        id v28 = [v10 encryptionPublicKey];
        id v29 = [v28 spki];
        swift_unknownObjectRelease(v28);
        uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
        unint64_t v32 = v31;

        id v33 = [v10 signingPublicKey];
        id v34 = [v33 spki];
        swift_unknownObjectRelease(v33);
        uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
        unint64_t v37 = v36;

        id v38 = [v10 kind];
        id v39 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperCustodianRecoveryKey);
        char v40 = v10;
        NSString v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v72, v42, v43, v44, v45, v46, v47, v48);
        Class v49 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v30, v32);
        Class v50 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v35, v37);
        id v51 = [v39 initWithUUID:v41 encryptionKey:v49 signingKey:v50 recoveryString:0 salt:0 kind:v38];

        a3(v51, 0LL);
      }

      else
      {
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v53 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v53, (uint64_t)qword_1002567D0);
        id v51 = v10;
        BOOL v54 = (os_log_s *)Logger.logObject.getter(v51);
        os_log_type_t v55 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v74 = (void *)swift_slowAlloc(32LL, -1LL);
          id v76 = v74;
          *(_DWORD *)uint64_t v56 = 136315138;
          id v57 = [v51 peerID];
          uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
          unint64_t v60 = v59;

          uint64_t v75 = sub_10017C4C4(v58, (unint64_t)v60, (uint64_t *)&v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v56 + 4, v56 + 12);

          swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "CRK %s is not trusted", v56, 0xCu);
          swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v74, -1LL, -1LL);
          swift_slowDealloc(v56, -1LL, -1LL);
        }

        else
        {
        }

        unint64_t v68 = sub_100043F74();
        uint64_t v69 = swift_allocError(&type metadata for ContainerError, v68, 0LL, 0LL);
        *(_OWORD *)uint64_t v70 = xmmword_1001DE9F0;
        *(_BYTE *)(v70 + 16) = 13;
        a3(0LL, v69);
        swift_errorRelease();
      }
    }
  }

  else
  {
    a3(0LL, 0LL);
  }

uint64_t sub_100108618( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  return sub_1001172B8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  "vouchWithBottle complete: %{public}s",  0xD00000000000003DLL,  0x80000001001F9AC0LL);
}

uint64_t sub_100108664( char *a1, _WORD *a2, _TtC18TrustedPeersHelper6Client *a3, void (*a4)(void, unint64_t, void, unint64_t, void, void, uint64_t), uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, _TtC18TrustedPeersHelper6Client *a9, uint64_t a10)
{
  id v15 = sub_100041C58(a2, a3);
  uint64_t v17 = v16;

  swift_bridgeObjectRelease(v17, v19, v20, v21, v22, v23, v24, v25);
  uint64_t v26 = v15;
  id v27 = [v26 contents];
  if (!v27)
  {

    unint64_t v86 = sub_100043F74();
    uint64_t v87 = swift_allocError(&type metadata for ContainerError, v86, 0LL, 0LL);
    *(_OWORD *)uint64_t v88 = xmmword_1001E68A0;
    *(_BYTE *)(v88 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v87);

    return swift_errorRelease();
  }

  id v28 = v27;
  uint64_t v178 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
  unint64_t v179 = v29;

  id v30 = [v26 signatureUsingEscrowKey];
  if (!v30)
  {

    unint64_t v90 = sub_100043F74();
    uint64_t v91 = swift_allocError(&type metadata for ContainerError, v90, 0LL, 0LL);
    *(_OWORD *)uint64_t v92 = xmmword_1001E6890;
    *(_BYTE *)(v92 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v91);

    swift_errorRelease();
    return sub_10000852C(v178, v179);
  }

  unint64_t v31 = v30;
  unint64_t v174 = a7;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
  unint64_t v34 = v33;

  id v35 = [v26 signatureUsingPeerKey];
  if (!v35)
  {

    unint64_t v93 = sub_100043F74();
    uint64_t v94 = swift_allocError(&type metadata for ContainerError, v93, 0LL, 0LL);
    *(_OWORD *)uint64_t v95 = xmmword_1001E6880;
    *(_BYTE *)(v95 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v94);

LABEL_15:
    swift_errorRelease();
    sub_10000852C(v32, v34);
    return sub_10000852C(v178, v179);
  }

  unint64_t v36 = v35;
  uint64_t v176 = v32;
  unint64_t v177 = v34;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
  unint64_t v34 = v37;

  id v38 = [v26 peerID];
  os_log_type_t v175 = v26;
  if (!v38)
  {
    unint64_t v96 = sub_100043F74();
    uint64_t v97 = swift_allocError(&type metadata for ContainerError, v96, 0LL, 0LL);
    *(_OWORD *)uint64_t v98 = xmmword_1001E6870;
    *(_BYTE *)(v98 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v97);

    sub_10000852C(v176, v177);
    goto LABEL_15;
  }

  uint64_t v172 = v32;
  unint64_t v173 = v34;
  uint64_t v171 = a5;
  uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  char v40 = v39;
  uint64_t v41 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  SEL v42 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  aBlock[0] = 0LL;
  id v43 = v42;
  id v44 = [v43 peerWithID:v38 error:aBlock];

  if (aBlock[0])
  {
    id v52 = aBlock[0];
    uint64_t v53 = v40;
    uint64_t v54 = (uint64_t)v52;
    swift_bridgeObjectRelease(v53, v55, v56, v57, v58, v59, v60, v61);

    swift_willThrow(v62);
    uint64_t v64 = v172;
    unint64_t v63 = v173;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v65 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v65, (uint64_t)qword_1002567D0);
    swift_errorRetain(v54);
    uint64_t v66 = swift_errorRetain(v54);
    BOOL v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v71 = static os_log_type_t.error.getter(v67, v68, v69, v70);
    if (os_log_type_enabled(v67, v71))
    {
      int64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      SEL v73 = (void *)swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v73;
      *(_DWORD *)int64_t v72 = 136446210;
      uint64_t v181 = v54;
      swift_errorRetain(v54);
      uint64_t v74 = sub_100007578(&qword_100251D70);
      uint64_t v75 = String.init<A>(describing:)(&v181, v74);
      uint64_t v77 = (_TtC18TrustedPeersHelper6Client *)v76;
      uint64_t v181 = sub_10017C4C4(v75, v76, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v72 + 4, v72 + 12);
      BOOL v78 = v77;
      unint64_t v63 = v173;
      uint64_t v64 = v172;
      swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v67,  v71,  "vouchWithBottle: Verification of bottled signature failed: %{public}s",  v72,  0xCu);
      swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v110 = sub_100043F74();
    uint64_t v111 = swift_allocError(&type metadata for ContainerError, v110, 0LL, 0LL);
    *(_OWORD *)uint64_t v112 = xmmword_1001E6850;
    *(_BYTE *)(v112 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v111);

    sub_10000852C(v176, v177);
    swift_errorRelease();
    swift_errorRelease();
    sub_10000852C(v64, v63);
    return sub_10000852C(v178, v179);
  }

  uint64_t v168 = v41;
  uint64_t v169 = v40;
  if (!v44)
  {
    unint64_t v113 = v173;
    swift_bridgeObjectRelease(v40, v45, v46, v47, v48, v49, v50, v51);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v114 = type metadata accessor for Logger(0LL);
    uint64_t v115 = sub_100006BAC(v114, (uint64_t)qword_1002567D0);
    BOOL v116 = (os_log_s *)Logger.logObject.getter(v115);
    os_log_type_t v117 = static os_log_type_t.info.getter(v116);
    uint64_t v118 = v172;
    unint64_t v119 = v179;
    uint64_t v120 = v178;
    if (os_log_type_enabled(v116, v117))
    {
      id v121 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v121 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v116,  v117,  "vouchWithBottle: Unable to find peer that created the bottle",  v121,  2u);
      swift_slowDealloc(v121, -1LL, -1LL);
    }

    unint64_t v122 = sub_100043F74();
    uint64_t v123 = swift_allocError(&type metadata for ContainerError, v122, 0LL, 0LL);
    *(_OWORD *)uint64_t v124 = xmmword_1001DE8A0;
    *(_BYTE *)(v124 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v123);

    sub_10000852C(v176, v177);
    goto LABEL_32;
  }

  id v99 = [v44 permanentInfo];
  id v100 = [v99 signingPubKey];

  uint64_t v101 = objc_opt_self(&OBJC_CLASS____SFECPublicKey);
  uint64_t v102 = swift_dynamicCastObjCClass(v100, v101);
  if (!v102)
  {
    unint64_t v125 = v44;
    unint64_t v113 = v173;
    swift_bridgeObjectRelease(v169, v103, v104, v105, v106, v107, v108, v109);
    swift_unknownObjectRelease(v100);
    uint64_t v118 = v172;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v126 = type metadata accessor for Logger(0LL);
    uint64_t v127 = sub_100006BAC(v126, (uint64_t)qword_1002567D0);
    unint64_t v128 = (os_log_s *)Logger.logObject.getter(v127);
    os_log_type_t v129 = static os_log_type_t.info.getter(v128);
    unint64_t v119 = v179;
    uint64_t v120 = v178;
    if (os_log_type_enabled(v128, v129))
    {
      BOOL v130 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v130 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v128,  v129,  "vouchWithBottle: Unable to create a sponsor public key",  v130,  2u);
      swift_slowDealloc(v130, -1LL, -1LL);
    }

    unint64_t v131 = sub_100043F74();
    uint64_t v132 = swift_allocError(&type metadata for ContainerError, v131, 0LL, 0LL);
    *(_OWORD *)uint64_t v133 = xmmword_1001E6860;
    *(_BYTE *)(v133 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v132);

    sub_10000852C(v176, v177);
LABEL_32:
    swift_errorRelease();
    sub_10000852C(v118, v113);
    return sub_10000852C(v120, v119);
  }

  sub_1001BB028(v178, v179, v172, v173, v102);

  swift_unknownObjectRelease(v100);
  objc_allocWithZone((Class)type metadata accessor for BottledPeer());
  sub_1000084E8(v178, v179);
  sub_1000084E8(a6, v174);
  swift_bridgeObjectRetain(a9);
  sub_1000084E8(v176, v177);
  sub_1000084E8(v172, v173);
  os_log_type_t v134 = sub_1001B91FC(v178, v179, a6, v174, a8, a9, v176, v177, v172, v173);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v135 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v135, (uint64_t)qword_1002567D0);
  uint64_t v136 = v134;
  unint64_t v137 = (os_log_s *)Logger.logObject.getter(v136);
  os_log_type_t v138 = static os_log_type_t.info.getter(v137);
  if (os_log_type_enabled(v137, v138))
  {
    SEL v139 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v140 = (void *)swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v140;
    *(_DWORD *)SEL v139 = 136446210;
    uint64_t v142 = *(void *)&v136[OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_peerID];
    id v141 = *(_TtC18TrustedPeersHelper6Client **)&v136[OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_peerID + 8];
    swift_bridgeObjectRetain(v141);
    uint64_t v181 = sub_10017C4C4(v142, (unint64_t)v141, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v139 + 4, v139 + 12);

    swift_bridgeObjectRelease(v141, v143, v144, v145, v146, v147, v148, v149);
    _os_log_impl((void *)&_mh_execute_header, v137, v138, "Have a bottle for peer %{public}s", v139, 0xCu);
    swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1LL, -1LL);
    swift_slowDealloc(v139, -1LL, -1LL);
  }

  else
  {
  }

  id v150 = *(void **)&a1[v168];
  id v151 = *(id *)&v136[OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_peerKeys];
  id v152 = v150;
  SEL v153 = sub_1000E07FC(a10, v151, (uint64_t)v152);
  int64_t v155 = v154;

  id v156 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  id v157 = (void *)swift_allocObject(&unk_100238D20, 80LL, 7LL);
  v157[2] = a1;
  v157[3] = a4;
  v157[4] = v171;
  v157[5] = v170;
  v157[6] = v40;
  v157[7] = v136;
  v157[8] = v153;
  v157[9] = v155;
  uint64_t v158 = swift_allocObject(&unk_100238D48, 32LL, 7LL);
  *(void *)(v158 + 16) = sub_1001728EC;
  *(void *)(v158 + 24) = v157;
  aBlock[4] = sub_100176BD4;
  uint64_t v184 = v158;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_100238D60;
  BOOL v159 = _Block_copy(aBlock);
  uint64_t v160 = v184;
  SEL v161 = v136;
  id v162 = a1;
  swift_retain(v171);
  id v163 = v155;
  swift_retain(v158);
  swift_release(v160);
  [v156 performBlockAndWait:v159];

  sub_10000852C(v176, v177);
  _Block_release(v159);
  sub_10000852C(v172, v173);
  sub_10000852C(v178, v179);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v158, "", 108LL, 3760LL, 37LL, 1LL);
  swift_release(v157);
  uint64_t result = swift_release(v158);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    swift_errorRelease();
    swift_errorRelease();

    unint64_t v165 = sub_100043F74();
    uint64_t v166 = swift_allocError(&type metadata for ContainerError, v165, 0LL, 0LL);
    *(_OWORD *)uint64_t v167 = xmmword_1001E6850;
    *(_BYTE *)(v167 + 16) = 13;
    a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v166);

    sub_10000852C(v176, v177);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10000852C(v171, v173);
    return sub_10000852C(v178, v179);
  }

  return result;
}

void sub_100109974( char *a1, void (*a2)(void, unint64_t, void, unint64_t, void, void, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v16 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v17 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v17)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v119 = type metadata accessor for Logger(0LL);
    uint64_t v120 = sub_100006BAC(v119, (uint64_t)qword_1002567D0);
    id v121 = (os_log_s *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.info.getter(v121);
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v123 = 0;
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "As a nonmember, can't vouch for someone else", v123, 2u);
      swift_slowDealloc(v123, -1LL, -1LL);
    }

    unint64_t v124 = sub_100043F74();
    uint64_t v125 = swift_allocError(&type metadata for ContainerError, v124, 0LL, 0LL);
    *(_OWORD *)uint64_t v126 = xmmword_1001E6820;
    *(_BYTE *)(v126 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v125);
    goto LABEL_19;
  }

  id v18 = v17;
  uint64_t v191 = a4;
  uint64_t v193 = a2;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  int64_t v21 = v20;

  id v22 = [*(id *)&a1[v16] egoPeerPermanentInfo];
  if (!v22)
  {
    swift_bridgeObjectRelease(v21, v23, v24, v25, v26, v27, v28, v29);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v127 = type metadata accessor for Logger(0LL);
    uint64_t v128 = sub_100006BAC(v127, (uint64_t)qword_1002567D0);
    os_log_type_t v129 = (os_log_s *)Logger.logObject.getter(v128);
    os_log_type_t v130 = static os_log_type_t.info.getter(v129);
    if (os_log_type_enabled(v129, v130))
    {
      unint64_t v131 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "permanentInfo does not exist", v131, 2u);
      swift_slowDealloc(v131, -1LL, -1LL);
    }

    unint64_t v132 = sub_100043F74();
    uint64_t v133 = swift_allocError(&type metadata for ContainerError, v132, 0LL, 0LL);
    *(_OWORD *)uint64_t v134 = xmmword_1001E6820;
    *(_BYTE *)(v134 + 16) = 13;
    v193(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v133);
LABEL_19:
    swift_errorRelease();
    return;
  }

  id v30 = v22;
  uint64_t v190 = v19;
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v192 = v32;

  id v33 = [*(id *)&a1[v16] egoPeerPermanentInfoSig];
  if (v33)
  {
    uint64_t v41 = v33;
    uint64_t v187 = a5;
    uint64_t v188 = a7;
    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v44 = v43;

    id v45 = [*(id *)&a1[v16] egoPeerStableInfo];
    if (v45)
    {
      uint64_t v53 = v45;
      uint64_t v181 = a8;
      uint64_t v189 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
      unint64_t v55 = v54;

      id v56 = [*(id *)&a1[v16] egoPeerStableInfoSig];
      if (v56)
      {
        uint64_t v64 = v56;
        unint64_t v180 = a6;
        uint64_t v184 = a3;
        uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
        unint64_t v185 = v66;
        uint64_t v186 = v65;

        id v67 = [objc_allocWithZone(TPECPublicKeyFactory) init];
        swift_bridgeObjectRetain(v21);
        sub_1000084E8(v31, v192);
        sub_1000084E8(v42, v44);
        NSString v68 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v21, v69, v70, v71, v72, v73, v74, v75);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v77 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v182 = v67;
        id v78 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v68 data:isa sig:v77 keyFactory:v67];
        unint64_t v183 = v44;
        sub_10000852C(v42, v44);
        sub_10000852C(v31, v192);

        if (v78)
        {
          id v86 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
          sub_1000084E8(v189, v55);
          sub_1000084E8(v186, v185);
          Class v87 = Data._bridgeToObjectiveC()().super.isa;
          Class v88 = Data._bridgeToObjectiveC()().super.isa;
          id v89 = [v86 initWithData:v87 sig:v88];
          sub_10000852C(v186, v185);
          sub_10000852C(v189, v55);

          if (v89)
          {
            uint64_t v97 = v89;
            uint64_t v98 = (void *)swift_allocObject(&unk_100238D98, 96LL, 7LL);
            v98[2] = v193;
            v98[3] = v184;
            v98[4] = a1;
            v98[5] = v78;
            v98[6] = v97;
            v98[7] = v191;
            v98[8] = v187;
            v98[9] = v180;
            v98[10] = v188;
            v98[11] = v181;
            strcpy((char *)v194, "signing-key ");
            BYTE5(v194[1]) = 0;
            HIWORD(v194[1]) = -5120;
            v99._uint64_t countAndFlagsBits = v190;
            v99._object = v21;
            String.append(_:)(v99);
            swift_bridgeObjectRetain_n(v21, 2LL);
            swift_retain(v98);
            swift_retain(v184);
            id v100 = a1;
            id v101 = v78;
            id v102 = v97;
            swift_bridgeObjectRetain(v187);
            swift_bridgeObjectRetain(v188);
            id v103 = v181;
            id v104 = v180;
            sub_10015FAA0( v194[0],  v194[1],  (void (*)(char *, uint64_t))sub_10017297C,  (uint64_t)v98,  v190,  v21);

            swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v194[1],  v105,  v106,  v107,  v108,  v109,  v110,  v111);
            swift_release_n(v98, 2LL);
            swift_bridgeObjectRelease_n(v21, 2LL);
            sub_10000852C(v186, v185);
            sub_10000852C(v189, v55);
            sub_10000852C(v42, v183);
            sub_10000852C(v31, v192);
            swift_bridgeObjectRelease(v21, v112, v113, v114, v115, v116, v117, v118);
            return;
          }

          unint64_t v168 = v185;
          uint64_t v169 = v78;
          swift_bridgeObjectRelease(v21, v90, v91, v92, v93, v94, v95, v96);
          uint64_t v170 = v31;
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v171 = type metadata accessor for Logger(0LL);
          uint64_t v172 = sub_100006BAC(v171, (uint64_t)qword_1002567D0);
          unint64_t v173 = (os_log_s *)Logger.logObject.getter(v172);
          os_log_type_t v174 = static os_log_type_t.info.getter(v173);
          if (os_log_type_enabled(v173, v174))
          {
            os_log_type_t v175 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)os_log_type_t v175 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v173,  v174,  "Invalid stableinfo or signature; van't vouch for them",
              v175,
              2u);
            uint64_t v176 = v175;
            unint64_t v168 = v185;
            uint64_t v170 = v31;
            swift_slowDealloc(v176, -1LL, -1LL);
          }

          unint64_t v177 = sub_100043F74();
          uint64_t v178 = swift_allocError(&type metadata for ContainerError, v177, 0LL, 0LL);
          *(_OWORD *)uint64_t v179 = xmmword_1001DEA00;
          *(_BYTE *)(v179 + 16) = 13;
          v193(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v178);
          swift_errorRelease();

          sub_10000852C(v186, v168);
          sub_10000852C(v189, v55);
          sub_10000852C(v42, v183);
          uint64_t v159 = v170;
        }

        else
        {
          swift_bridgeObjectRelease(v21, v79, v80, v81, v82, v83, v84, v85);
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v160 = type metadata accessor for Logger(0LL);
          uint64_t v161 = sub_100006BAC(v160, (uint64_t)qword_1002567D0);
          id v162 = (os_log_s *)Logger.logObject.getter(v161);
          os_log_type_t v163 = static os_log_type_t.info.getter(v162);
          if (os_log_type_enabled(v162, v163))
          {
            id v164 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)id v164 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v162,  v163,  "Invalid permenent info or signature; can't vouch for them",
              v164,
              2u);
            swift_slowDealloc(v164, -1LL, -1LL);
          }

          unint64_t v165 = sub_100043F74();
          uint64_t v166 = swift_allocError(&type metadata for ContainerError, v165, 0LL, 0LL);
          *(_OWORD *)uint64_t v167 = xmmword_1001DE880;
          *(_BYTE *)(v167 + 16) = 13;
          v193(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v166);
          swift_errorRelease();

          sub_10000852C(v186, v185);
          sub_10000852C(v189, v55);
          sub_10000852C(v42, v44);
          uint64_t v159 = v31;
        }

        goto LABEL_37;
      }

      swift_bridgeObjectRelease(v21, v57, v58, v59, v60, v61, v62, v63);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v151 = type metadata accessor for Logger(0LL);
      uint64_t v152 = sub_100006BAC(v151, (uint64_t)qword_1002567D0);
      SEL v153 = (os_log_s *)Logger.logObject.getter(v152);
      os_log_type_t v154 = static os_log_type_t.info.getter(v153);
      if (os_log_type_enabled(v153, v154))
      {
        int64_t v155 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)int64_t v155 = 0;
        _os_log_impl((void *)&_mh_execute_header, v153, v154, "stableInfoSig does not exist", v155, 2u);
        swift_slowDealloc(v155, -1LL, -1LL);
      }

      unint64_t v156 = sub_100043F74();
      uint64_t v157 = swift_allocError(&type metadata for ContainerError, v156, 0LL, 0LL);
      *(_OWORD *)uint64_t v158 = xmmword_1001E6820;
      *(_BYTE *)(v158 + 16) = 13;
      v193(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v157);
      swift_errorRelease();
      sub_10000852C(v189, v55);
    }

    else
    {
      swift_bridgeObjectRelease(v21, v46, v47, v48, v49, v50, v51, v52);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v143 = type metadata accessor for Logger(0LL);
      uint64_t v144 = sub_100006BAC(v143, (uint64_t)qword_1002567D0);
      int64_t v145 = (os_log_s *)Logger.logObject.getter(v144);
      os_log_type_t v146 = static os_log_type_t.info.getter(v145);
      if (os_log_type_enabled(v145, v146))
      {
        id v147 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v147 = 0;
        _os_log_impl((void *)&_mh_execute_header, v145, v146, "stableInfo does not exist", v147, 2u);
        swift_slowDealloc(v147, -1LL, -1LL);
      }

      unint64_t v148 = sub_100043F74();
      uint64_t v149 = swift_allocError(&type metadata for ContainerError, v148, 0LL, 0LL);
      *(_OWORD *)uint64_t v150 = xmmword_1001E6820;
      *(_BYTE *)(v150 + 16) = 13;
      v193(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v149);
      swift_errorRelease();
    }

    sub_10000852C(v42, v44);
  }

  else
  {
    swift_bridgeObjectRelease(v21, v34, v35, v36, v37, v38, v39, v40);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v135 = type metadata accessor for Logger(0LL);
    uint64_t v136 = sub_100006BAC(v135, (uint64_t)qword_1002567D0);
    unint64_t v137 = (os_log_s *)Logger.logObject.getter(v136);
    os_log_type_t v138 = static os_log_type_t.info.getter(v137);
    if (os_log_type_enabled(v137, v138))
    {
      SEL v139 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)SEL v139 = 0;
      _os_log_impl((void *)&_mh_execute_header, v137, v138, "permanentInfoSig does not exist", v139, 2u);
      swift_slowDealloc(v139, -1LL, -1LL);
    }

    unint64_t v140 = sub_100043F74();
    uint64_t v141 = swift_allocError(&type metadata for ContainerError, v140, 0LL, 0LL);
    *(_OWORD *)uint64_t v142 = xmmword_1001E6820;
    *(_BYTE *)(v142 + 16) = 13;
    v193(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v141);
    swift_errorRelease();
  }

  uint64_t v159 = v31;
LABEL_37:
  sub_10000852C(v159, v192);
}

void sub_10010A638( void *a1, void *a2, void (*a3)(uint64_t, unint64_t, uint64_t, unint64_t, _TtC18TrustedPeersHelper6Client *, uint64_t, id), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _TtC18TrustedPeersHelper6Client *a11, uint64_t a12)
{
  if (!a1)
  {
    id v20 = a2;
    if (qword_100250EB8 == -1)
    {
LABEL_6:
      uint64_t v24 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v24, (uint64_t)qword_1002567D0);
      swift_errorRetain(v20);
      uint64_t v25 = swift_errorRetain(v20);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v30 = static os_log_type_t.error.getter(v26, v27, v28, v29);
      if (os_log_type_enabled(v26, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v32 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v84 = (uint64_t)v20;
        id v85 = v32;
        *(_DWORD *)uint64_t v31 = 136446210;
        swift_errorRetain(v20);
        uint64_t v33 = sub_100007578((uint64_t *)&unk_1002516A0);
        uint64_t v34 = String.init<A>(describing:)(&v84, v33);
        int64_t v36 = (_TtC18TrustedPeersHelper6Client *)v35;
        uint64_t v84 = sub_10017C4C4(v34, v35, (uint64_t *)&v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v31 + 4, v31 + 12);
        swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v30, "Error loading ego peer keys: %{public}s", v31, 0xCu);
        swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v20);
      return;
    }

uint64_t sub_10010ABF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  return sub_1001172B8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  "vouchWithRecoveryKey complete: %{public}s",  0xD000000000000037LL,  0x80000001001F9A80LL);
}

void sub_10010AC44( char *a1, void (*a2)(void, unint64_t, void, unint64_t, void, void, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100006BAC(v14, (uint64_t)qword_1002567D0);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "beginning a vouchWithRecoveryKey", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v20 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v20)
  {
    uint64_t v119 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v120 = static os_log_type_t.info.getter(v119);
    if (os_log_type_enabled(v119, v120))
    {
      id v121 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v121 = 0;
      os_log_type_t v122 = "As a nonmember, can't vouch for someone else";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v119, v120, v122, v121, 2u);
      swift_slowDealloc(v121, -1LL, -1LL);
    }

void sub_10010B760( void *a1, uint64_t a2, void (*a3)(void, unint64_t, void, unint64_t, void, void, id), uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, _TtC18TrustedPeersHelper6Client *a8, uint64_t a9, void *a10, uint64_t a11, _TtC18TrustedPeersHelper6Client *a12)
{
  if (a1)
  {
    id v17 = a1;
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    int64_t v39 = (char *)sub_1000097E0(a5, a6, a7, a8);
    id v229 = v17;
    uint64_t v40 = OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys;
    BOOL v41 = *(void **)(*(void *)&v39[OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys]
                   + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey);
    id v232 = v39;
    id v42 = [v41 publicKey];
    id v43 = [v42 keyData];

    uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unint64_t v46 = v45;

    uint64_t v224 = v40;
    id v225 = v39;
    id v47 =  [*(id *)(*(void *)&v39[v40] + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey) publicKey];
    id v48 = [v47 keyData];

    uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
    unint64_t v51 = v50;

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v52, (uint64_t)qword_1002567D0);
    sub_1000084E8(v44, v46);
    uint64_t v53 = sub_1000084E8(v44, v46);
    BOOL v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.info.getter(v54);
    uint64_t v233 = v44;
    unint64_t v231 = v51;
    uint64_t v56 = v44;
    unint64_t v57 = v46;
    if (os_log_type_enabled(v54, v55))
    {
      id v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int64_t v59 = (void *)swift_slowAlloc(32LL, -1LL);
      id v236 = v59;
      *(_DWORD *)id v58 = 136446210;
      Swift::String v60 = Data.base64EncodedString(options:)(0LL);
      uint64_t v235 = sub_10017C4C4(v60._countAndFlagsBits, (unint64_t)v60._object, (uint64_t *)&v236);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v60._object, v61, v62, v63, v64, v65, v66, v67);
      sub_10000852C(v233, v57);
      sub_10000852C(v233, v57);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "vouchWithRecoveryKey signingPubKey: %{public}s", v58, 0xCu);
      swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {
      sub_10000852C(v56, v46);
      sub_10000852C(v56, v46);
    }

    sub_1000084E8(v49, v51);
    uint64_t v68 = sub_1000084E8(v49, v51);
    NSString v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v70 = static os_log_type_t.info.getter(v69);
    unint64_t v228 = v57;
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = v49;
      SEL v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v73 = (void *)swift_slowAlloc(32LL, -1LL);
      id v236 = v73;
      *(_DWORD *)SEL v72 = 136446210;
      Swift::String v74 = Data.base64EncodedString(options:)(0LL);
      uint64_t v235 = sub_10017C4C4(v74._countAndFlagsBits, (unint64_t)v74._object, (uint64_t *)&v236);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v74._object, v75, v76, v77, v78, v79, v80, v81);
      sub_10000852C(v71, v51);
      sub_10000852C(v71, v51);
      _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "vouchWithRecoveryKey encryptionPubKey: %{public}s",  v72,  0xCu);
      swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      BOOL v82 = v72;
      uint64_t v49 = v71;
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    else
    {
      sub_10000852C(v49, v51);
      sub_10000852C(v49, v51);
    }

    uint64_t v83 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
    int64_t v84 = *(void **)(a9 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
    id v236 = 0LL;
    unsigned int v85 = [v84 isRecoveryKeyEnrolledWithError:&v236];
    id v86 = v236;
    if (v236)
    {
      uint64_t v226 = v49;
      id v87 = v236;

      swift_willThrow(v88);
      id v89 = v87;
      Class v90 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v94 = static os_log_type_t.error.getter(v90, v91, v92, v93);
      if (os_log_type_enabled(v90, v94))
      {
        int64_t v95 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        BOOL v96 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)int64_t v95 = 138543362;
        id v97 = v89;
        BOOL v98 = (void *)_swift_stdlib_bridgeErrorToNSError(v97);
        id v236 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, v237, v95 + 4, v95 + 12);
        void *v96 = v98;

        unint64_t v57 = v228;
        _os_log_impl( (void *)&_mh_execute_header,  v90,  v94,  "Error determining whether Recovery Key is enrolled: %{public}@",  v95,  0xCu);
        uint64_t v99 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v96, 1LL, v99);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      else
      {

        Class v90 = (os_log_s *)v89;
      }

      id v124 = v89;
      a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v86);

      sub_10000852C(v233, v57);
      sub_10000852C(v226, v231);

      return;
    }

    if (v85)
    {
      id v100 = *(void **)(a9 + v83);
      id v101 = objc_allocWithZone(&OBJC_CLASS___TPRecoveryKeyPair);
      uint64_t v102 = v233;
      sub_1000084E8(v233, v57);
      sub_1000084E8(v49, v231);
      id v103 = v100;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v105 = Data._bridgeToObjectiveC()().super.isa;
      id v106 = [v101 initWithSigningKeyData:isa encryptionKeyData:v105];
      uint64_t v227 = v49;
      sub_10000852C(v49, v231);
      sub_10000852C(v233, v57);

      id v236 = 0LL;
      id v107 =  [v103 peerIDThatTrustsRecoveryKeys:v106 canIntroducePeer:a10 stableInfo:a11 error:&v236];

      id v108 = v236;
      if (v236)
      {
        id v109 = v236;

        swift_willThrow(v110);
        id v111 = v109;
        SEL v112 = (os_log_s *)Logger.logObject.getter(v111);
        os_log_type_t v116 = static os_log_type_t.error.getter(v112, v113, v114, v115);
        BOOL v117 = a3;
        if (os_log_type_enabled(v112, v116))
        {
          BOOL v118 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v119 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)BOOL v118 = 138543362;
          id v120 = v111;
          id v121 = (void *)_swift_stdlib_bridgeErrorToNSError(v120);
          id v236 = v121;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, v237, v118 + 4, v118 + 12);
          void *v119 = v121;
          unint64_t v122 = v228;

          BOOL v117 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v112,  v116,  "Failed to get peer that trusts RK: %{public}@",  v118,  0xCu);
          uint64_t v123 = sub_100007578(&qword_100250F90);
          swift_arrayDestroy(v119, 1LL, v123);
          swift_slowDealloc(v119, -1LL, -1LL);
          swift_slowDealloc(v118, -1LL, -1LL);
        }

        else
        {

          SEL v112 = (os_log_s *)v111;
          unint64_t v122 = v57;
        }

        id v158 = v111;
        v117(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v108);

        sub_10000852C(v233, v122);
        sub_10000852C(v227, v231);

        return;
      }

      if (v107)
      {
        uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
        unint64_t v137 = v136;
        unint64_t v138 = *(void **)(a9 + v83);
        uint64_t v139 = (_TtC18TrustedPeersHelper6Client *)*(id *)&v225[v224];
        id v140 = v138;
        BOOL v223 = (_TtC18TrustedPeersHelper6Client *)sub_1000E0A5C(a12, v139, v135, (uint64_t)v137, (uint64_t)v140);
        id v222 = v141;

        swift_bridgeObjectRelease(v137, v142, v143, v144, v145, v146, v147, v148);
        uint64_t v149 = *(void **)&v225[v224];
        id v150 = *(id *)(a9 + v83);
        os_log_type_t v151 = v149;

        id v152 = *(id *)&v151[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey];
        id v236 = 0LL;
        id v153 =  [v150 createVoucherForCandidate:a10 stableInfo:a11 withSponsorID:v107 reason:5 signingKeyPair:v152 error:&v236];

        id v154 = v236;
        if (v153)
        {
          id v155 = v229;
          id v156 = v154;
          uint64_t v157 = (uint64_t)[a10 epoch];
          if (v157 < 0) {
            __break(1u);
          }
          uint64_t v197 = (_TtC18TrustedPeersHelper6Client *)sub_1000DFDA0(v223, (uint64_t)v155, (uint64_t)v155, v157);
          swift_bridgeObjectRelease(v223, v198, v199, v200, v201, v202, v203, v204);

          id v205 = [v153 data];
          uint64_t v206 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v205);
          unint64_t v208 = v207;

          id v209 = [v153 sig];
          id v230 = v153;
          uint64_t v210 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v209);
          unint64_t v212 = v211;

          uint64_t v213 = v155;
          id v214 = v222;
          a3(v206, v208, v210, v212, v197, v222, 0LL);

          sub_10000852C(v233, v228);
          sub_10000852C(v227, v231);
          swift_bridgeObjectRelease(v197, v215, v216, v217, v218, v219, v220, v221);

          sub_10000852C(v210, v212);
          sub_10000852C(v206, v208);
        }

        else
        {
          id v167 = v236;
          swift_bridgeObjectRelease(v223, v168, v169, v170, v171, v172, v173, v174);
          uint64_t v175 = _convertNSErrorToError(_:)(v154);

          swift_willThrow(v176);
          unint64_t v177 = v228;
          swift_errorRetain(v175);
          uint64_t v178 = swift_errorRetain(v175);
          uint64_t v179 = (os_log_s *)Logger.logObject.getter(v178);
          os_log_type_t v183 = static os_log_type_t.error.getter(v179, v180, v181, v182);
          if (os_log_type_enabled(v179, v183))
          {
            uint64_t v184 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            unint64_t v185 = (void *)swift_slowAlloc(32LL, -1LL);
            uint64_t v235 = v175;
            id v236 = v185;
            *(_DWORD *)uint64_t v184 = 136446210;
            swift_errorRetain(v175);
            uint64_t v186 = sub_100007578(&qword_100251D70);
            uint64_t v187 = String.init<A>(describing:)(&v235, v186);
            uint64_t v189 = (_TtC18TrustedPeersHelper6Client *)v188;
            uint64_t v235 = sub_10017C4C4(v187, v188, (uint64_t *)&v236);
            unint64_t v177 = v228;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v184 + 4, v184 + 12);
            swift_bridgeObjectRelease(v189, v190, v191, v192, v193, v194, v195, v196);
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl( (void *)&_mh_execute_header,  v179,  v183,  "Error creating voucher using recovery key set: %{public}s",  v184,  0xCu);
            swift_arrayDestroy(v185, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v185, -1LL, -1LL);
            swift_slowDealloc(v184, -1LL, -1LL);
          }

          else
          {
            swift_errorRelease();
            swift_errorRelease();
          }

          swift_errorRetain(v175);
          a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, (id)v175);

          sub_10000852C(v233, v177);
          sub_10000852C(v227, v231);

          swift_errorRelease();
          swift_errorRelease();
        }

        return;
      }

      unint64_t v160 = (os_log_s *)Logger.logObject.getter(v159);
      os_log_type_t v161 = static os_log_type_t.info.getter(v160);
      if (os_log_type_enabled(v160, v161))
      {
        uint64_t v162 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v162 = 0;
        _os_log_impl((void *)&_mh_execute_header, v160, v161, "Untrusted recovery key set", v162, 2u);
        os_log_type_t v163 = v162;
        uint64_t v102 = v233;
        swift_slowDealloc(v163, -1LL, -1LL);
      }

      unint64_t v164 = sub_100043F74();
      uint64_t v165 = swift_allocError(&type metadata for ContainerError, v164, 0LL, 0LL);
      *(_OWORD *)uint64_t v166 = xmmword_1001DE9F0;
      *(_BYTE *)(v166 + 16) = 13;
      a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, (id)v165);

      sub_10000852C(v102, v57);
      uint64_t v134 = v227;
    }

    else
    {

      uint64_t v126 = (os_log_s *)Logger.logObject.getter(v125);
      os_log_type_t v127 = static os_log_type_t.info.getter(v126);
      uint64_t v128 = v233;
      if (os_log_type_enabled(v126, v127))
      {
        os_log_type_t v129 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v129 = 0;
        _os_log_impl((void *)&_mh_execute_header, v126, v127, "Recovery Key is not enrolled", v129, 2u);
        os_log_type_t v130 = v129;
        uint64_t v128 = v233;
        swift_slowDealloc(v130, -1LL, -1LL);
      }

      unint64_t v131 = sub_100043F74();
      uint64_t v132 = swift_allocError(&type metadata for ContainerError, v131, 0LL, 0LL);
      *(_OWORD *)uint64_t v133 = xmmword_1001DE9E0;
      *(_BYTE *)(v133 + 16) = 13;
      a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, (id)v132);

      sub_10000852C(v128, v57);
      uint64_t v134 = v49;
    }

    sub_10000852C(v134, v231);

    swift_errorRelease();
    return;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v19, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v20 = swift_errorRetain(a2);
  id v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v25 = static os_log_type_t.error.getter(v21, v22, v23, v24);
  if (os_log_type_enabled(v21, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int64_t v27 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v235 = a2;
    id v236 = v27;
    *(_DWORD *)uint64_t v26 = 136446210;
    swift_errorRetain(a2);
    uint64_t v28 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v29 = String.init<A>(describing:)(&v235, v28);
    BOOL v31 = (_TtC18TrustedPeersHelper6Client *)v30;
    uint64_t v235 = sub_10017C4C4(v29, v30, (uint64_t *)&v236);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v25,  "Don't have my own peer keys; can't vouch with recovery key: %{public}s",
      v26,
      0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, (id)a2);
}

uint64_t sub_10010CA68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void), uint64_t a6)
{
  return sub_1001473C0( a1,  a2,  a3,  a4,  a5,  a6,  "recoverTLKSharesForInheritor complete: %{public}s",  0xD000000000000032LL,  0x80000001001F9A40LL);
}

void sub_10010CAA8( char *a1, void (*a2)(void, void, uint64_t), uint64_t a3, void *a4, uint64_t a5)
{
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100006BAC(v10, (uint64_t)qword_1002567D0);
  id v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "beginning a recoverTLKSharesForInheritor", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v15 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v16 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v16)
  {
    id v86 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v87 = static os_log_type_t.info.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v88 = 0;
      id v89 = "As a nonmember, can't vouch for someone else";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v86, v87, v89, v88, 2u);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

void sub_10010D150( void *a1, uint64_t a2, void (*a3)(void, void, id), uint64_t a4, void *a5, uint64_t a6, void *a7, _TtC18TrustedPeersHelper6Client *a8)
{
  uint64_t v277 = a8;
  uint64_t v15 = sub_100007578(&qword_100251818);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v268 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v268 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    os_log_type_t v278 = v23;
    BOOL v280 = a3;
    id v279 = a1;
    id v24 = [a5 uuid];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v281 = v19;
    BOOL v27 = v26;

    UUID.init(uuidString:)(v25, v27);
    BOOL v28 = v27;
    uint64_t v29 = v281;
    swift_bridgeObjectRelease(v28, v30, v31, v32, v33, v34, v35, v36);
    int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v29);
    uint64_t v282 = a4;
    if (v37 == 1)
    {
      sub_100041590((uint64_t)v18, &qword_100251818);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v38 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v38, (uint64_t)qword_1002567D0);
      id v39 = a5;
      BOOL v40 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v41 = static os_log_type_t.info.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        id v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v43 = (void *)swift_slowAlloc(32LL, -1LL);
        id v284 = v43;
        *(_DWORD *)id v42 = 136446210;
        id v44 = [v39 uuid];
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        unint64_t v47 = v46;

        uint64_t v283 = sub_10017C4C4(v45, (unint64_t)v47, (uint64_t *)&v284);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, &v284, v42 + 4, v42 + 12);

        swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to parse uuid: %{public}s", v42, 0xCu);
        swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1LL, -1LL);
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      else
      {
      }

      unint64_t v97 = sub_100043F74();
      uint64_t v98 = swift_allocError(&type metadata for ContainerError, v97, 0LL, 0LL);
      *(_OWORD *)uint64_t v99 = xmmword_1001DE9E0;
      *(_BYTE *)(v99 + 16) = 13;
      v280(0LL, 0LL, (id)v98);
      swift_errorRelease();

      return;
    }

    uint64_t v76 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v278, v18, v29);
    uint64_t v77 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
    id v78 = *(id *)(a6 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v80 = (_TtC18TrustedPeersHelper6Client *)[v78 findCustodianRecoveryKeyWithUUID:isa];

    if (v80)
    {
      int64_t v81 = *(void **)(a6 + v77);
      id v284 = 0LL;
      unsigned int v82 = [v81 isCustodianRecoveryKeyTrusted:v80 error:&v284];
      id v83 = v284;
      if (v284)
      {
        id v84 = v284;
        swift_willThrow(v84);
        BOOL v85 = v280;
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v86 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v86, (uint64_t)qword_1002567D0);
        id v87 = v84;
        uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
        os_log_type_t v89 = static os_log_type_t.info.getter(v88);
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          BOOL v275 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v90 = 138543362;
          id v91 = v87;
          uint64_t v277 = v80;
          id v92 = v91;
          uint64_t v93 = v76;
          unint64_t v94 = (void *)_swift_stdlib_bridgeErrorToNSError(v91);
          id v284 = v94;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v284, v285, v90 + 4, v90 + 12);
          uint64_t v95 = v275;
          *(void *)v275->_TtCs12_SwiftObject_opaque = v94;
          uint64_t v76 = v93;

          id v80 = v277;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "error determining whether Custodian Recovery Key is trusted: %{public}@",  v90,  0xCu);
          uint64_t v96 = sub_100007578(&qword_100250F90);
          swift_arrayDestroy(v95, 1LL, v96);
          BOOL v85 = v280;
          swift_slowDealloc(v95, -1LL, -1LL);
          swift_slowDealloc(v90, -1LL, -1LL);
        }

        else
        {

          uint64_t v88 = (os_log_s *)v87;
        }

        uint64_t v29 = v281;

        id v137 = v87;
        v85(0LL, 0LL, v83);

        unint64_t v138 = *(void (**)(char *, uint64_t))(v76 + 8);
        goto LABEL_35;
      }

      uint64_t v117 = (void (*)(void, void, uint64_t))v280;
      if (v82)
      {
        id v118 = [a5 recoveryString];
        if (v118)
        {
          uint64_t v119 = v118;
          uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
          unint64_t v122 = v121;

          id v123 = [a5 salt];
          if (v123)
          {
            unint64_t v131 = v123;
            uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
            uint64_t v134 = v133;

            uint64_t v135 = type metadata accessor for CustodianRecoveryKey();
            swift_allocObject(v135, 32LL, 7LL);
            BOOL v275 = v80;
            uint64_t v136 = sub_100008A9C(v275, v120, (unint64_t)v122, v132, v134);
            uint64_t v276 = v76;
            uint64_t v157 = v136;
            uint64_t v158 = qword_100250EB8;
            swift_retain(v136);
            if (v158 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v159 = type metadata accessor for Logger(0LL);
            uint64_t v160 = sub_100006BAC(v159, (uint64_t)qword_1002567D0);
            uint64_t v161 = swift_retain_n(v157, 2LL);
            uint64_t v273 = v160;
            uint64_t v162 = (os_log_s *)Logger.logObject.getter(v161);
            os_log_type_t v163 = static os_log_type_t.info.getter(v162);
            BOOL v164 = os_log_type_enabled(v162, v163);
            uint64_t v274 = v157;
            if (v164)
            {
              os_log_t v272 = v162;
              uint64_t v165 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              int64_t v271 = (void *)swift_slowAlloc(32LL, -1LL);
              id v284 = v271;
              *(_DWORD *)uint64_t v165 = 136446210;
              id v270 = v165 + 12;
              SEL v269 = v165 + 4;
              id v166 = objc_retainAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(v157 + 16)
                               + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey),
                         "publicKey"));
              id v167 = [v166 keyData];

              uint64_t v168 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v167);
              unint64_t v170 = v169;

              Swift::String v171 = Data.base64EncodedString(options:)(0LL);
              uint64_t v172 = v168;
              uint64_t v157 = v274;
              sub_10000852C(v172, v170);
              uint64_t v283 = sub_10017C4C4(v171._countAndFlagsBits, (unint64_t)v171._object, (uint64_t *)&v284);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, &v284, v269, v270);
              swift_release_n(v157, 2LL);
              swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v171._object,  v173,  v174,  v175,  v176,  v177,  v178,  v179);
              os_log_t v180 = v272;
              _os_log_impl( (void *)&_mh_execute_header,  v272,  v163,  "recoverTLKSharesForInheritor signingPubKey: %{public}s",  v165,  0xCu);
              uint64_t v181 = v271;
              swift_arrayDestroy(v271, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v181, -1LL, -1LL);
              swift_slowDealloc(v165, -1LL, -1LL);
            }

            else
            {

              swift_release_n(v157, 2LL);
            }

            uint64_t v182 = swift_retain_n(v157, 2LL);
            os_log_type_t v183 = (os_log_s *)Logger.logObject.getter(v182);
            os_log_type_t v184 = static os_log_type_t.info.getter(v183);
            int v185 = v184;
            if (os_log_type_enabled(v183, v184))
            {
              os_log_t v272 = v183;
              uint64_t v186 = swift_slowAlloc(12LL, -1LL);
              LODWORD(v270) = v185;
              uint64_t v187 = (uint8_t *)v186;
              int64_t v271 = (void *)swift_slowAlloc(32LL, -1LL);
              id v284 = v271;
              *(_DWORD *)uint64_t v187 = 136446210;
              SEL v269 = v187 + 12;
              id v268 = v187 + 4;
              uint64_t v188 = v157;
              id v189 = objc_retainAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(v157 + 16)
                               + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey),
                         "publicKey"));
              id v190 = [v189 keyData];

              uint64_t v191 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v190);
              unint64_t v193 = v192;

              Swift::String v194 = Data.base64EncodedString(options:)(0LL);
              sub_10000852C(v191, v193);
              uint64_t v283 = sub_10017C4C4(v194._countAndFlagsBits, (unint64_t)v194._object, (uint64_t *)&v284);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, &v284, v268, v269);
              swift_release_n(v188, 2LL);
              swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v194._object,  v195,  v196,  v197,  v198,  v199,  v200,  v201);
              os_log_t v202 = v272;
              _os_log_impl( (void *)&_mh_execute_header,  v272,  (os_log_type_t)v270,  "recoverTLKSharesForInheritor encryptionPubKey: %{public}s",  v187,  0xCu);
              BOOL v203 = v271;
              swift_arrayDestroy(v271, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v203, -1LL, -1LL);
              swift_slowDealloc(v187, -1LL, -1LL);
            }

            else
            {

              swift_release_n(v157, 2LL);
            }

            BOOL v204 = (void (*)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, id))v280;
            uint64_t v29 = v281;
            id v205 = *(void **)(a6 + v77);
            id v284 = 0LL;
            id v206 =  [v205 peerIDThatTrustsCustodianRecoveryKeys:v275 canIntroducePeer:a7 stableInfo:0 error:&v284];
            unint64_t v207 = v206;
            id v208 = v284;
            if (v284)
            {
              id v209 = v284;
              swift_release(v274);

              swift_willThrow(v210);
              unint64_t v211 = (_TtC18TrustedPeersHelper6Client *)v209;
              unint64_t v212 = (os_log_s *)Logger.logObject.getter(v211);
              os_log_type_t v216 = static os_log_type_t.error.getter(v212, v213, v214, v215);
              if (os_log_type_enabled(v212, v216))
              {
                uint64_t v217 = swift_slowAlloc(12LL, -1LL);
                uint64_t v277 = v211;
                id v218 = (uint8_t *)v217;
                id v219 = (void *)swift_slowAlloc(8LL, -1LL);
                *(_DWORD *)id v218 = 138543362;
                BOOL v220 = v277;
                BOOL v221 = (void *)_swift_stdlib_bridgeErrorToNSError(v220);
                id v284 = v221;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v284, v285, v218 + 4, v218 + 12);
                *id v219 = v221;
                BOOL v204 = (void (*)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, id))v280;

                _os_log_impl( (void *)&_mh_execute_header,  v212,  v216,  "Error getting peer that trusts CRK: %{public}@",  v218,  0xCu);
                uint64_t v222 = sub_100007578(&qword_100250F90);
                swift_arrayDestroy(v219, 1LL, v222);
                swift_slowDealloc(v219, -1LL, -1LL);
                BOOL v223 = v218;
                unint64_t v211 = v277;
                swift_slowDealloc(v223, -1LL, -1LL);
              }

              else
              {

                unint64_t v212 = (os_log_s *)v211;
              }

              uint64_t v29 = v281;
              uint64_t v242 = v276;

              id v243 = v211;
              v204(0LL, 0LL, v208);
              swift_release(v274);

              unint64_t v138 = *(void (**)(char *, uint64_t))(v242 + 8);
              goto LABEL_35;
            }

            if (v206)
            {
              uint64_t v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
              uint64_t v226 = v225;

              uint64_t v227 = v274;
              unint64_t v228 = (_TtC18TrustedPeersHelper6Client *)*(id *)(v274 + 16);
              swift_release(v227);
              id v229 = *(id *)(a6 + v77);
              id v230 = (_TtC18TrustedPeersHelper6Client *)sub_1000E0A5C(v277, v228, v224, (uint64_t)v226, (uint64_t)v229);
              uint64_t v277 = v231;

              swift_bridgeObjectRelease(v226, v232, v233, v234, v235, v236, v237, v238);
              id v239 = v279;
              uint64_t v240 = (uint64_t)[a7 epoch];
              if (v240 < 0)
              {
                __break(1u);
                return;
              }

              SEL v241 = (_TtC18TrustedPeersHelper6Client *)sub_1000DFDA0(v230, (uint64_t)v239, (uint64_t)v239, v240);
              uint64_t v29 = v281;
              id v251 = v241;
              swift_bridgeObjectRelease(v230, v252, v253, v254, v255, v256, v257, v258);

              unint64_t v259 = v277;
              uint64_t v260 = v277;
              v204(v251, v259, 0LL);
              swift_release(v274);

              swift_bridgeObjectRelease(v251, v261, v262, v263, v264, v265, v266, v267);
              goto LABEL_34;
            }

            uint64_t v244 = swift_release(v274);
            id v245 = (os_log_s *)Logger.logObject.getter(v244);
            uint64_t v246 = static os_log_type_t.info.getter(v245);
            if (os_log_type_enabled(v245, (os_log_type_t)v246))
            {
              id v247 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)id v247 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v245,  (os_log_type_t)v246,  "Untrusted custodian recovery key set",  v247,  2u);
              swift_slowDealloc(v247, -1LL, -1LL);
            }

            unint64_t v248 = sub_100043F74();
            uint64_t v249 = swift_allocError(&type metadata for ContainerError, v248, 0LL, 0LL);
            *(_OWORD *)uint64_t v250 = xmmword_1001DE9F0;
            *(_BYTE *)(v250 + 16) = 13;
            v204(0LL, 0LL, (id)v249);
            swift_errorRelease();
            swift_release(v274);

LABEL_33:
LABEL_34:
            unint64_t v138 = *(void (**)(char *, uint64_t))(v276 + 8);
LABEL_35:
            v138(v278, v29);
            return;
          }

          swift_bridgeObjectRelease(v122, v124, v125, v126, v127, v128, v129, v130);
        }

        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v151 = type metadata accessor for Logger(0LL);
        uint64_t v152 = sub_100006BAC(v151, (uint64_t)qword_1002567D0);
        id v153 = (os_log_s *)Logger.logObject.getter(v152);
        os_log_type_t v154 = static os_log_type_t.info.getter(v153);
        if (os_log_type_enabled(v153, v154))
        {
          id v155 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v155 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v153,  v154,  "Bad format CRK: recovery string or salt not set",  v155,  2u);
          swift_slowDealloc(v155, -1LL, -1LL);
        }

        unint64_t v156 = sub_100043F74();
        uint64_t v149 = swift_allocError(&type metadata for ContainerError, v156, 0LL, 0LL);
        __int128 v150 = xmmword_1001DEA10;
      }

      else
      {
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v142 = type metadata accessor for Logger(0LL);
        uint64_t v143 = sub_100006BAC(v142, (uint64_t)qword_1002567D0);
        int64_t v144 = (os_log_s *)Logger.logObject.getter(v143);
        os_log_type_t v145 = static os_log_type_t.info.getter(v144);
        if (os_log_type_enabled(v144, v145))
        {
          id v146 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v146 = 0;
          _os_log_impl((void *)&_mh_execute_header, v144, v145, "Custodian Recovery Key is not trusted", v146, 2u);
          swift_slowDealloc(v146, -1LL, -1LL);
        }

        unint64_t v147 = sub_100043F74();
        uint64_t v149 = swift_allocError(&type metadata for ContainerError, v147, 0LL, 0LL);
        __int128 v150 = xmmword_1001DE9F0;
      }

      *(_OWORD *)uint64_t v148 = v150;
      *(_BYTE *)(v148 + 16) = 13;
      v117(0LL, 0LL, v149);
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v76 + 8))(v278, v281);
      return;
    }

    uint64_t v276 = v76;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v100 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v100, (uint64_t)qword_1002567D0);
    id v101 = a5;
    unint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
    os_log_type_t v103 = static os_log_type_t.info.getter(v102);
    if (os_log_type_enabled(v102, v103))
    {
      id v104 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v105 = (void *)swift_slowAlloc(32LL, -1LL);
      id v284 = v105;
      *(_DWORD *)id v104 = 136446210;
      id v106 = [v101 uuid];
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
      uint64_t v109 = v108;

      uint64_t v283 = sub_10017C4C4(v107, (unint64_t)v109, (uint64_t *)&v284);
      uint64_t v29 = v281;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, &v284, v104 + 4, v104 + 12);

      swift_bridgeObjectRelease(v109, v110, v111, v112, v113, v114, v115, v116);
      _os_log_impl( (void *)&_mh_execute_header,  v102,  v103,  "Unable to find custodian recovery key %{public}s on model",  v104,  0xCu);
      swift_arrayDestroy(v105, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v105, -1LL, -1LL);
      swift_slowDealloc(v104, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v139 = sub_100043F74();
    uint64_t v140 = swift_allocError(&type metadata for ContainerError, v139, 0LL, 0LL);
    *(_OWORD *)uint64_t v141 = xmmword_1001DE9E0;
    *(_BYTE *)(v141 + 16) = 13;
    v280(0LL, 0LL, (id)v140);
    swift_errorRelease();
    goto LABEL_33;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v55 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v55, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v56 = swift_errorRetain(a2);
  unint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
  os_log_type_t v61 = static os_log_type_t.error.getter(v57, v58, v59, v60);
  if (os_log_type_enabled(v57, v61))
  {
    int64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int64_t v63 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v282 = a4;
    id v64 = v63;
    uint64_t v283 = a2;
    id v284 = v63;
    *(_DWORD *)int64_t v62 = 136446210;
    swift_errorRetain(a2);
    uint64_t v65 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v66 = String.init<A>(describing:)(&v283, v65);
    Swift::String v68 = (_TtC18TrustedPeersHelper6Client *)v67;
    uint64_t v283 = sub_10017C4C4(v66, v67, (uint64_t *)&v284);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, &v284, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v57,  v61,  "Don't have my own peer keys; can't establish: %{public}s",
      v62,
      0xCu);
    swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a3(0LL, 0LL, (id)a2);
}

uint64_t sub_10010E828( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  return sub_1001172B8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  "vouchWithCustodianRecoveryKey complete: %{public}s",  0xD000000000000033LL,  0x80000001001F9A00LL);
}

void sub_10010E874( char *a1, void (*a2)(void, unint64_t, void, unint64_t, void, void, uint64_t), uint64_t a3, void *a4, uint64_t a5)
{
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100006BAC(v10, (uint64_t)qword_1002567D0);
  id v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "beginning a vouchWithCustodianRecoveryKey", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v15 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v16 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v16)
  {
    BOOL v116 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v117 = static os_log_type_t.info.getter(v116);
    if (os_log_type_enabled(v116, v117))
    {
      id v118 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v118 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "As a nonmember, can't vouch for someone else", v118, 2u);
      swift_slowDealloc(v118, -1LL, -1LL);
    }

    goto LABEL_18;
  }

  uint64_t v17 = v16;
  uint64_t v174 = a3;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v20 = v19;

  id v21 = [*(id *)&a1[v15] egoPeerPermanentInfo];
  if (!v21)
  {
    swift_bridgeObjectRelease(v20, v22, v23, v24, v25, v26, v27, v28);
    BOOL v116 = (os_log_s *)Logger.logObject.getter(v119);
    os_log_type_t v120 = static os_log_type_t.info.getter(v116);
    if (os_log_type_enabled(v116, v120))
    {
      id v121 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v120, "permanentInfo does not exist", v121, 2u);
      swift_slowDealloc(v121, -1LL, -1LL);
    }

void sub_10010F3C4( void *a1, uint64_t a2, void (*a3)(void, void, void, void, void, void, void), uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, _TtC18TrustedPeersHelper6Client *a9)
{
  id v330 = a6;
  uint64_t v16 = sub_100007578(&qword_100251818);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v316 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  int64_t v24 = (char *)&v316 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    id v325 = a7;
    unint64_t v326 = v24;
    uint64_t v328 = a4;
    id v327 = a1;
    id v25 = [a5 uuid];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    BOOL v28 = v27;

    UUID.init(uuidString:)(v26, v28);
    swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
    {
      sub_100041590((uint64_t)v19, &qword_100251818);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v36 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v36, (uint64_t)qword_1002567D0);
      id v37 = a5;
      BOOL v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.info.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        BOOL v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v41 = (void *)swift_slowAlloc(32LL, -1LL);
        SEL v329 = a3;
        unint64_t v42 = v41;
        id v332 = v41;
        *(_DWORD *)BOOL v40 = 136446210;
        id v43 = [v37 uuid];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        unint64_t v46 = v45;

        uint64_t v331 = sub_10017C4C4(v44, (unint64_t)v46, (uint64_t *)&v332);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v332, v40 + 4, v40 + 12);

        swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unable to parse uuid %{public}s", v40, 0xCu);
        swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
        unint64_t v54 = v42;
        a3 = v329;
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_slowDealloc(v40, -1LL, -1LL);
      }

      else
      {
      }

      unint64_t v99 = sub_100043F74();
      uint64_t v100 = swift_allocError(&type metadata for ContainerError, v99, 0LL, 0LL);
      *(_OWORD *)uint64_t v101 = xmmword_1001DE9E0;
      *(_BYTE *)(v101 + 16) = 13;
      a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v100);
      swift_errorRelease();

      return;
    }

    uint64_t v77 = v20;
    uint64_t v78 = v21;
    SEL v329 = a3;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v326, v19, v20);
    uint64_t v79 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
    int64_t v80 = v330;
    id v81 = *(id *)((char *)v330 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    BOOL v83 = [v81 findCustodianRecoveryKeyWithUUID:isa];

    if (v83)
    {
      BOOL v84 = *(void **)((char *)v80 + v79);
      id v332 = 0LL;
      unsigned int v85 = [v84 isCustodianRecoveryKeyTrusted:v83 error:&v332];
      id v86 = v332;
      if (v332)
      {
        uint64_t v324 = v78;
        id v87 = v332;
        swift_willThrow(v87);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v88, (uint64_t)qword_1002567D0);
        id v89 = v87;
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.info.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v323 = v77;
          uint64_t v92 = swift_slowAlloc(12LL, -1LL);
          id v330 = v83;
          uint64_t v93 = (uint8_t *)v92;
          BOOL v94 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v93 = 138543362;
          id v95 = v89;
          uint64_t v96 = (void *)_swift_stdlib_bridgeErrorToNSError(v95);
          id v332 = v96;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v332, v333, v93 + 4, v93 + 12);
          *BOOL v94 = v96;
          uint64_t v77 = v323;

          _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "Error determining whether Custodian Recovery Key is trusted: %{public}@",  v93,  0xCu);
          uint64_t v97 = sub_100007578(&qword_100250F90);
          swift_arrayDestroy(v94, 1LL, v97);
          swift_slowDealloc(v94, -1LL, -1LL);
          id v98 = v93;
          BOOL v83 = v330;
          swift_slowDealloc(v98, -1LL, -1LL);
        }

        else
        {

          uint64_t v90 = (os_log_s *)v89;
        }

        uint64_t v138 = (void (*)(void, unint64_t, void, unint64_t, void, void, id))v329;

        id v139 = v89;
        v138(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v86);

        goto LABEL_31;
      }

      if (v85)
      {
        id v119 = [a5 recoveryString];
        if (v119)
        {
          os_log_type_t v120 = v119;
          uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
          uint64_t v123 = v122;

          id v124 = [a5 salt];
          if (v124)
          {
            uint64_t v132 = v124;
            uint64_t v324 = v78;
            uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
            uint64_t v135 = v134;

            uint64_t v136 = type metadata accessor for CustodianRecoveryKey();
            swift_allocObject(v136, 32LL, 7LL);
            os_log_type_t v322 = v83;
            uint64_t v137 = sub_100008A9C(v322, v121, (unint64_t)v123, v133, v135);
            uint64_t v323 = v77;
            uint64_t v166 = v137;
            uint64_t v167 = qword_100250EB8;
            swift_retain(v137);
            if (v167 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v168 = type metadata accessor for Logger(0LL);
            uint64_t v169 = sub_100006BAC(v168, (uint64_t)qword_1002567D0);
            uint64_t v170 = swift_retain_n(v166, 2LL);
            uint64_t v320 = v169;
            uint64_t v171 = (os_log_s *)Logger.logObject.getter(v170);
            os_log_type_t v172 = static os_log_type_t.info.getter(v171);
            BOOL v173 = os_log_type_enabled(v171, v172);
            uint64_t v321 = a8;
            if (v173)
            {
              uint64_t v174 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              id v319 = (id)swift_slowAlloc(32LL, -1LL);
              id v332 = v319;
              *(_DWORD *)uint64_t v174 = 136446210;
              os_log_t v318 = (os_log_t)(v174 + 12);
              id v317 = v174 + 4;
              id v175 = objc_retainAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(v166 + 16)
                               + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey),
                         "publicKey"));
              id v176 = [v175 keyData];

              uint64_t v177 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v176);
              unint64_t v179 = v178;

              Swift::String v180 = Data.base64EncodedString(options:)(0LL);
              sub_10000852C(v177, v179);
              uint64_t v331 = sub_10017C4C4(v180._countAndFlagsBits, (unint64_t)v180._object, (uint64_t *)&v332);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v332, v317, v318);
              swift_release_n(v166, 2LL);
              swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v180._object,  v181,  v182,  v183,  v184,  v185,  v186,  v187);
              _os_log_impl( (void *)&_mh_execute_header,  v171,  v172,  "vouchWithCustodianRecoveryKey signingPubKey: %{public}s",  v174,  0xCu);
              id v188 = v319;
              swift_arrayDestroy(v319, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v188, -1LL, -1LL);
              swift_slowDealloc(v174, -1LL, -1LL);
            }

            else
            {

              swift_release_n(v166, 2LL);
            }

            uint64_t v189 = swift_retain_n(v166, 2LL);
            id v190 = (os_log_s *)Logger.logObject.getter(v189);
            os_log_type_t v191 = static os_log_type_t.info.getter(v190);
            int v192 = v191;
            if (os_log_type_enabled(v190, v191))
            {
              os_log_t v318 = v190;
              LODWORD(v319) = v192;
              unint64_t v193 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              Swift::String v194 = (void *)swift_slowAlloc(32LL, -1LL);
              id v332 = v194;
              *(_DWORD *)unint64_t v193 = 136446210;
              id v317 = v193 + 12;
              id v316 = v193 + 4;
              id v195 = objc_retainAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(v166 + 16)
                               + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey),
                         "publicKey"));
              id v196 = [v195 keyData];

              uint64_t v197 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v196);
              unint64_t v199 = v198;

              Swift::String v200 = Data.base64EncodedString(options:)(0LL);
              sub_10000852C(v197, v199);
              uint64_t v331 = sub_10017C4C4(v200._countAndFlagsBits, (unint64_t)v200._object, (uint64_t *)&v332);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v332, v316, v317);
              swift_release_n(v166, 2LL);
              swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v200._object,  v201,  v202,  v203,  v204,  v205,  v206,  v207);
              os_log_t v208 = v318;
              _os_log_impl( (void *)&_mh_execute_header,  v318,  (os_log_type_t)v319,  "vouchWithCustodianRecoveryKey encryptionPubKey: %{public}s",  v193,  0xCu);
              swift_arrayDestroy(v194, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v194, -1LL, -1LL);
              swift_slowDealloc(v193, -1LL, -1LL);
            }

            else
            {

              swift_release_n(v166, 2LL);
            }

            id v209 = *(void **)((char *)v330 + v79);
            id v332 = 0LL;
            id v210 =  [v209 peerIDThatTrustsCustodianRecoveryKeys:v322 canIntroducePeer:v325 stableInfo:v321 error:&v332];
            unint64_t v211 = v210;
            id v212 = v332;
            if (v332)
            {
              id v213 = v332;
              swift_release(v166);

              swift_willThrow(v214);
              id v215 = v213;
              os_log_type_t v216 = (os_log_s *)Logger.logObject.getter(v215);
              os_log_type_t v217 = static os_log_type_t.info.getter(v216);
              if (os_log_type_enabled(v216, v217))
              {
                id v218 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                id v330 = (void *)swift_slowAlloc(8LL, -1LL);
                *(_DWORD *)id v218 = 138543362;
                id v219 = v215;
                uint64_t v220 = v166;
                BOOL v221 = (void *)_swift_stdlib_bridgeErrorToNSError(v219);
                id v332 = v221;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v332, v333, v218 + 4, v218 + 12);
                uint64_t v222 = v330;
                *id v330 = v221;
                uint64_t v166 = v220;

                _os_log_impl( (void *)&_mh_execute_header,  v216,  v217,  "Error getting peer that trusts CRK: %{public}@",  v218,  0xCu);
                uint64_t v223 = sub_100007578(&qword_100250F90);
                swift_arrayDestroy(v222, 1LL, v223);
                swift_slowDealloc(v222, -1LL, -1LL);
                swift_slowDealloc(v218, -1LL, -1LL);
              }

              else
              {

                os_log_type_t v216 = (os_log_s *)v215;
              }

              id v251 = (void (*)(void, unint64_t, void, unint64_t, void, void, id))v329;
              uint64_t v77 = v323;

              id v139 = v215;
              v251(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v212);
              swift_release(v166);

LABEL_31:
              uint64_t v140 = *(void (**)(char *, uint64_t))(v324 + 8);
LABEL_47:
              uint64_t v145 = v326;
              uint64_t v146 = v77;
              goto LABEL_48;
            }

            if (v210)
            {
              uint64_t v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v210);
              uint64_t v226 = v225;
              uint64_t v227 = v330;
              unint64_t v228 = *(void **)((char *)v330 + v79);
              id v229 = (_TtC18TrustedPeersHelper6Client *)*(id *)(v166 + 16);
              id v230 = v228;
              unint64_t v231 = (_TtC18TrustedPeersHelper6Client *)sub_1000E0A5C(a9, v229, v224, (uint64_t)v226, (uint64_t)v230);
              id v319 = v232;

              swift_bridgeObjectRelease(v226, v233, v234, v235, v236, v237, v238, v239);
              uint64_t v240 = *(void **)(v166 + 16);
              id v241 = *(id *)((char *)v227 + v79);
              uint64_t v242 = v240;
              swift_release(v166);
              id v243 = *(id *)&v242[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey];

              id v332 = 0LL;
              uint64_t v244 = v325;
              id v245 =  [v241 createVoucherForCandidate:v325 stableInfo:v321 withSponsorID:v211 reason:5 signingKeyPair:v243 error:&v332];

              id v246 = v332;
              if (!v245)
              {
                id v259 = v332;
                swift_bridgeObjectRelease(v231, v260, v261, v262, v263, v264, v265, v266);
                uint64_t v267 = _convertNSErrorToError(_:)(v246);

                swift_willThrow(v268);
                SEL v269 = v329;
                swift_errorRetain(v267);
                uint64_t v270 = swift_errorRetain(v267);
                int64_t v271 = (os_log_s *)Logger.logObject.getter(v270);
                os_log_type_t v275 = static os_log_type_t.error.getter(v271, v272, v273, v274);
                if (os_log_type_enabled(v271, v275))
                {
                  uint64_t v276 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  uint64_t v277 = (void *)swift_slowAlloc(32LL, -1LL);
                  uint64_t v331 = v267;
                  id v332 = v277;
                  *(_DWORD *)uint64_t v276 = 136446210;
                  swift_errorRetain(v267);
                  uint64_t v278 = sub_100007578(&qword_100251D70);
                  uint64_t v279 = String.init<A>(describing:)(&v331, v278);
                  uint64_t v281 = (_TtC18TrustedPeersHelper6Client *)v280;
                  uint64_t v331 = sub_10017C4C4(v279, v280, (uint64_t *)&v332);
                  SEL v269 = v329;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v332, v276 + 4, v276 + 12);
                  swift_bridgeObjectRelease(v281, v282, v283, v284, v285, v286, v287, v288);
                  swift_errorRelease();
                  swift_errorRelease();
                  _os_log_impl( (void *)&_mh_execute_header,  v271,  v275,  "Error creating voucher using custodian recovery key set: %{public}s",  v276,  0xCu);
                  swift_arrayDestroy(v277, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v277, -1LL, -1LL);
                  swift_slowDealloc(v276, -1LL, -1LL);
                }

                else
                {
                  swift_errorRelease();
                  swift_errorRelease();
                }

                uint64_t v289 = v323;
                uint64_t v290 = v324;
                swift_errorRetain(v267);
                v269(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v267);
                swift_errorRelease();

                swift_errorRelease();
                swift_release(v166);

                (*(void (**)(char *, uint64_t))(v290 + 8))(v326, v289);
                return;
              }

              id v330 = (void *)v166;
              id v247 = v327;
              id v248 = v246;
              uint64_t v249 = (uint64_t)[v244 epoch];
              uint64_t v250 = (void (*)(uint64_t, unint64_t, uint64_t, unint64_t, _TtC18TrustedPeersHelper6Client *, id, void))v329;
              if (v249 < 0)
              {
                __break(1u);
                return;
              }

              id v291 = (_TtC18TrustedPeersHelper6Client *)sub_1000DFDA0(v231, (uint64_t)v247, (uint64_t)v247, v249);
              swift_bridgeObjectRelease(v231, v292, v293, v294, v295, v296, v297, v298);

              id v299 = [v245 data];
              uint64_t v300 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v299);
              unint64_t v302 = v301;

              id v303 = [v245 sig];
              uint64_t v304 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v303);
              unint64_t v306 = v305;

              id v307 = v319;
              id v308 = v319;
              v250(v300, v302, v304, v306, v291, v307, 0LL);
              swift_bridgeObjectRelease(v291, v309, v310, v311, v312, v313, v314, v315);

              sub_10000852C(v304, v306);
              sub_10000852C(v300, v302);
              swift_release(v330);
            }

            else
            {
              uint64_t v252 = swift_release(v166);
              id v253 = (os_log_s *)Logger.logObject.getter(v252);
              os_log_type_t v254 = static os_log_type_t.info.getter(v253);
              if (os_log_type_enabled(v253, v254))
              {
                id v255 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)id v255 = 0;
                _os_log_impl((void *)&_mh_execute_header, v253, v254, "Untrusted custodian recovery key set", v255, 2u);
                swift_slowDealloc(v255, -1LL, -1LL);
              }

              unint64_t v256 = sub_100043F74();
              uint64_t v257 = swift_allocError(&type metadata for ContainerError, v256, 0LL, 0LL);
              *(_OWORD *)uint64_t v258 = xmmword_1001DE9F0;
              *(_BYTE *)(v258 + 16) = 13;
              v329(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v257);
              swift_errorRelease();
              swift_release(v166);
            }

            uint64_t v140 = *(void (**)(char *, uint64_t))(v324 + 8);
LABEL_34:
            uint64_t v145 = v326;
            uint64_t v146 = v323;
LABEL_48:
            v140(v145, v146);
            return;
          }

          swift_bridgeObjectRelease(v123, v125, v126, v127, v128, v129, v130, v131);
        }

        uint64_t v147 = v78;
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v159 = type metadata accessor for Logger(0LL);
        uint64_t v160 = sub_100006BAC(v159, (uint64_t)qword_1002567D0);
        uint64_t v161 = (os_log_s *)Logger.logObject.getter(v160);
        os_log_type_t v162 = static os_log_type_t.info.getter(v161);
        BOOL v163 = os_log_type_enabled(v161, v162);
        uint64_t v153 = v329;
        if (v163)
        {
          unint64_t v164 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v164 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v161,  v162,  "Bad format CRK: recovery string or salt not set",  v164,  2u);
          swift_slowDealloc(v164, -1LL, -1LL);
        }

        unint64_t v165 = sub_100043F74();
        uint64_t v157 = swift_allocError(&type metadata for ContainerError, v165, 0LL, 0LL);
        __int128 v158 = xmmword_1001DEA10;
      }

      else
      {
        uint64_t v147 = v78;
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v148 = type metadata accessor for Logger(0LL);
        uint64_t v149 = sub_100006BAC(v148, (uint64_t)qword_1002567D0);
        unint64_t v150 = (os_log_s *)Logger.logObject.getter(v149);
        os_log_type_t v151 = static os_log_type_t.info.getter(v150);
        BOOL v152 = os_log_type_enabled(v150, v151);
        uint64_t v153 = v329;
        if (v152)
        {
          unint64_t v154 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v154 = 0;
          _os_log_impl((void *)&_mh_execute_header, v150, v151, "Custodian Recovery Key is not trusted", v154, 2u);
          swift_slowDealloc(v154, -1LL, -1LL);
        }

        unint64_t v155 = sub_100043F74();
        uint64_t v157 = swift_allocError(&type metadata for ContainerError, v155, 0LL, 0LL);
        __int128 v158 = xmmword_1001DE9F0;
      }

      *(_OWORD *)uint64_t v156 = v158;
      *(_BYTE *)(v156 + 16) = 13;
      v153(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v157);
      swift_errorRelease();

      uint64_t v140 = *(void (**)(char *, uint64_t))(v147 + 8);
      goto LABEL_47;
    }

    uint64_t v323 = v77;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v102 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v102, (uint64_t)qword_1002567D0);
    id v103 = a5;
    int64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
    os_log_type_t v105 = static os_log_type_t.info.getter(v104);
    if (os_log_type_enabled(v104, v105))
    {
      id v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v107 = (void *)swift_slowAlloc(32LL, -1LL);
      id v332 = v107;
      uint64_t v324 = v78;
      *(_DWORD *)id v106 = 136446210;
      id v108 = [v103 uuid];
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      int64_t v111 = v110;

      uint64_t v331 = sub_10017C4C4(v109, (unint64_t)v111, (uint64_t *)&v332);
      uint64_t v78 = v324;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v332, v106 + 4, v106 + 12);

      swift_bridgeObjectRelease(v111, v112, v113, v114, v115, v116, v117, v118);
      _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "Unable to find custodian recovery key %{public}s on model",  v106,  0xCu);
      swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1LL, -1LL);
      swift_slowDealloc(v106, -1LL, -1LL);
    }

    else
    {
    }

    os_log_type_t v141 = v329;
    unint64_t v142 = sub_100043F74();
    uint64_t v143 = swift_allocError(&type metadata for ContainerError, v142, 0LL, 0LL);
    *(_OWORD *)uint64_t v144 = xmmword_1001DE9E0;
    *(_BYTE *)(v144 + 16) = 13;
    v141(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v143);
    swift_errorRelease();

    uint64_t v140 = *(void (**)(char *, uint64_t))(v78 + 8);
    goto LABEL_34;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v55 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v55, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v56 = swift_errorRetain(a2);
  unint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
  os_log_type_t v61 = static os_log_type_t.error.getter(v57, v58, v59, v60);
  if (os_log_type_enabled(v57, v61))
  {
    BOOL v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int64_t v63 = (void *)swift_slowAlloc(32LL, -1LL);
    SEL v329 = a3;
    uint64_t v64 = v63;
    uint64_t v331 = a2;
    id v332 = v63;
    *(_DWORD *)BOOL v62 = 136446210;
    swift_errorRetain(a2);
    uint64_t v65 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v66 = String.init<A>(describing:)(&v331, v65);
    id v68 = (_TtC18TrustedPeersHelper6Client *)v67;
    uint64_t v331 = sub_10017C4C4(v66, v67, (uint64_t *)&v332);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v332, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v57,  v61,  "Don't have my own peer keys; can't establish: %{public}s",
      v62,
      0xCu);
    swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v76 = v64;
    a3 = v329;
    swift_slowDealloc(v76, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, a2);
}

uint64_t sub_100110C78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  return sub_1001172B8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  "vouchWithReroll complete: %{public}s",  0xD00000000000002BLL,  0x80000001001F99D0LL);
}

void sub_100110CC4( char *a1, void (*a2)(void, unint64_t, void, unint64_t, void, void, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_100006BAC(v11, (uint64_t)qword_1002567D0);
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "beginning a vouchWithReroll", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v17 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v17)
  {
    id v115 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v116 = static os_log_type_t.info.getter(v115);
    if (os_log_type_enabled(v115, v116))
    {
      BOOL v117 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v117 = 0;
      BOOL v118 = "As a nonmember, can't vouch for someone else";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v115, v116, v118, v117, 2u);
      swift_slowDealloc(v117, -1LL, -1LL);
    }

uint64_t sub_1001117C8( void *a1, uint64_t a2, uint64_t (*a3)(void, unint64_t, void, unint64_t, void, void, uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, void *a9, void *a10)
{
  if (a1)
  {
    id v17 = (void *)swift_allocObject(&unk_100238A00, 88LL, 7LL);
    v17[2] = a3;
    v17[3] = a4;
    v17[4] = a7;
    void v17[5] = a5;
    v17[6] = a6;
    v17[7] = a8;
    v17[8] = a9;
    v17[9] = a10;
    v17[10] = a1;
    strcpy((char *)v52, "signing-key ");
    BYTE5(v52[1]) = 0;
    HIWORD(v52[1]) = -5120;
    v18._uint64_t countAndFlagsBits = a5;
    v18._object = a6;
    String.append(_:)(v18);
    swift_bridgeObjectRetain_n(a6, 3LL);
    id v19 = a1;
    swift_retain(v17);
    swift_retain(a4);
    swift_bridgeObjectRetain(a7);
    id v20 = a8;
    id v21 = a9;
    id v22 = a10;
    sub_10015FAA0(v52[0], v52[1], (void (*)(char *, uint64_t))sub_100172688, (uint64_t)v17, a5, a6);

    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v52[1], v23, v24, v25, v26, v27, v28, v29);
    swift_release_n(v17, 2LL);
    return swift_bridgeObjectRelease_n(a6, 2LL);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v32, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v33 = swift_errorRetain(a2);
    BOOL v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v38 = static os_log_type_t.error.getter(v34, v35, v36, v37);
    if (os_log_type_enabled(v34, v38))
    {
      BOOL v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      v52[0] = v40;
      *(_DWORD *)BOOL v39 = 136446210;
      uint64_t v53 = a2;
      swift_errorRetain(a2);
      uint64_t v41 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v42 = String.init<A>(describing:)(&v53, v41);
      unint64_t v44 = (_TtC18TrustedPeersHelper6Client *)v43;
      uint64_t v53 = sub_10017C4C4(v42, v43, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v44, v45, v46, v47, v48, v49, v50, v51);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v38,  "Don't have my own peer keys; can't establish: %{public}s",
        v39,
        0xCu);
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return a3(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, a2);
  }

void sub_100111AD0( void *a1, uint64_t a2, void (*a3)(void, unint64_t, void, unint64_t, void, void, uint64_t), void (*a4)(void, unint64_t, void, unint64_t, void, void, uint64_t), _TtC18TrustedPeersHelper6Client *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  if (!a1)
  {
    uint64_t v17 = a2;
    a4 = a3;
    if (qword_100250EB8 == -1)
    {
LABEL_6:
      uint64_t v30 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v30, (uint64_t)qword_1002567D0);
      swift_errorRetain(v17);
      uint64_t v31 = swift_errorRetain(v17);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v36 = static os_log_type_t.error.getter(v32, v33, v34, v35);
      if (os_log_type_enabled(v32, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_type_t v38 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v106 = v17;
        id v107 = v38;
        *(_DWORD *)uint64_t v37 = 136446210;
        swift_errorRetain(v17);
        uint64_t v39 = sub_100007578((uint64_t *)&unk_1002516A0);
        uint64_t v40 = String.init<A>(describing:)(&v106, v39);
        uint64_t v42 = (_TtC18TrustedPeersHelper6Client *)v41;
        uint64_t v106 = sub_10017C4C4(v40, v41, (uint64_t *)&v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v36,  "Don't have my own peer keys; can't establish: %{public}s",
          v37,
          0xCu);
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, 0LL, 0LL, v17);
      return;
    }

uint64_t sub_1001120D4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v22, 41LL, 7LL);
  id v23 = v20;
  uint64_t v31 = sub_100159634(v23, 0xD000000000000083LL, 0x80000001001FA160LL);

  NSString v24 = (void *)swift_allocObject(&unk_10023A508, 40LL, 7LL);
  v24[2] = v31;
  v24[3] = a19;
  v24[4] = a20;
  uint64_t v39 = *(void **)&v23[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v25 = swift_allocObject(&unk_10023A530, 184LL, 7LL);
  *(void *)(v25 + 16) = v23;
  *(void *)(v25 + 24) = sub_100175058;
  *(void *)(v25 + 32) = v24;
  *(void *)(v25 + 40) = a1;
  *(void *)(v25 + 48) = a2;
  *(void *)(v25 + 56) = a3;
  *(void *)(v25 + 64) = a4;
  *(void *)(v25 + 72) = a5;
  *(void *)(v25 + 80) = a6;
  *(void *)(v25 + 88) = a7;
  *(void *)(v25 + 96) = a8;
  *(void *)(v25 + 104) = a9;
  *(void *)(v25 + 112) = a10;
  *(void *)(v25 + 120) = a12;
  *(void *)(v25 + 128) = a13;
  *(void *)(v25 + 136) = a14;
  *(void *)(v25 + 144) = a15;
  *(void *)(v25 + 152) = a16;
  *(void *)(v25 + 160) = a17;
  *(_BYTE *)(v25 + 168) = a18;
  *(void *)(v25 + 176) = a11;
  uint64_t v26 = swift_allocObject(&unk_10023A558, 32LL, 7LL);
  *(void *)(v26 + 16) = sub_100175118;
  *(void *)(v26 + 24) = v25;
  aBlock[4] = sub_100176BD4;
  uint64_t v43 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_10023A570;
  os_log_type_t v38 = _Block_copy(aBlock);
  uint64_t v36 = v43;
  id v27 = v23;
  swift_retain(v31);
  swift_retain(a20);
  swift_retain(v24);
  swift_bridgeObjectRetain(a2);
  sub_1000084E8(a3, a4);
  sub_1000084E8(a5, a6);
  sub_1000084E8(a7, a8);
  sub_1000084E8(a9, a10);
  swift_bridgeObjectRetain(a17);
  swift_bridgeObjectRetain(a11);
  swift_retain(v26);
  swift_bridgeObjectRetain(a13);
  swift_bridgeObjectRetain(a15);
  swift_release(v36);
  [v39 performBlockAndWait:v38];
  swift_release(v24);
  swift_release(v31);
  _Block_release(v38);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v26, "", 108LL, 4323LL, 33LL, 1LL);
  swift_release(v25);
  uint64_t result = swift_release(v26);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

void sub_1001123E0( char *a1, void (*a2)(void, unint64_t, void, unint64_t, uint64_t), uint64_t a3, uint64_t a4, _TtC18TrustedPeersHelper6Client *a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21)
{
  uint64_t v25 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v26 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v26)
  {
    id v27 = v26;
    uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v29 = v28;

    id v30 = [*(id *)&a1[v25] egoPeerPermanentInfo];
    if (v30)
    {
      os_log_type_t v38 = v30;
      unint64_t v159 = a5;
      uint64_t v39 = a1;
      uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
      unint64_t v42 = v41;

      unint64_t v154 = v39;
      id v43 = [*(id *)&v39[v25] egoPeerPermanentInfoSig];
      if (v43)
      {
        id v44 = v43;
        os_log_type_t v157 = a2;
        uint64_t v158 = a3;
        uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
        unint64_t v47 = v46;

        id v48 = [objc_allocWithZone(TPECPublicKeyFactory) init];
        swift_bridgeObjectRetain(v29);
        id v49 = v48;
        sub_1000084E8(v40, v42);
        sub_1000084E8(v45, v47);
        NSString v50 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v29, v51, v52, v53, v54, v55, v56, v57);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v59 = Data._bridgeToObjectiveC()().super.isa;
        id v152 = (id)objc_opt_self(&OBJC_CLASS___TPPeerPermanentInfo);
        uint64_t v60 = v29;
        id v61 = [v152 permanentInfoWithPeerID:v50 data:isa sig:v59 keyFactory:v49];
        uint64_t v155 = v49;

        sub_10000852C(v45, v47);
        uint64_t v62 = v40;
        sub_10000852C(v40, v42);

        uint64_t v153 = v61;
        if (v61)
        {
          uint64_t v150 = v40;
          unint64_t v151 = v47;
          id v70 = v155;
          swift_bridgeObjectRetain(v159);
          sub_1000084E8(a6, a7);
          sub_1000084E8(a8, a9);
          NSString v71 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v159, v72, v73, v74, v75, v76, v77, v78);
          Class v79 = Data._bridgeToObjectiveC()().super.isa;
          Class v80 = Data._bridgeToObjectiveC()().super.isa;
          id v81 = [v152 permanentInfoWithPeerID:v71 data:v79 sig:v80 keyFactory:v70];
          uint64_t v156 = v70;

          sub_10000852C(a8, a9);
          sub_10000852C(a6, a7);

          if (!v81)
          {
            swift_bridgeObjectRelease(v60, v82, v83, v84, v85, v86, v87, v88);
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v133 = type metadata accessor for Logger(0LL);
            uint64_t v134 = sub_100006BAC(v133, (uint64_t)qword_1002567D0);
            unint64_t v135 = (os_log_s *)Logger.logObject.getter(v134);
            os_log_type_t v136 = static os_log_type_t.info.getter(v135);
            if (os_log_type_enabled(v135, v136))
            {
              uint64_t v137 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v137 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v135,  v136,  "Invalid permenent info or signature; can't vouch for them",
                v137,
                2u);
              swift_slowDealloc(v137, -1LL, -1LL);
            }

            unint64_t v138 = sub_100043F74();
            uint64_t v139 = swift_allocError(&type metadata for ContainerError, v138, 0LL, 0LL);
            *(_OWORD *)uint64_t v140 = xmmword_1001DE880;
            *(_BYTE *)(v140 + 16) = 13;
            v157(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, v139);
            swift_errorRelease();

            sub_10000852C(v45, v151);
            uint64_t v141 = v40;
            goto LABEL_27;
          }

          uint64_t v164 = v81;
          id v89 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
          sub_1000084E8(a10, a11);
          sub_1000084E8(a12, a13);
          Class v90 = Data._bridgeToObjectiveC()().super.isa;
          Class v91 = Data._bridgeToObjectiveC()().super.isa;
          id v92 = [v89 initWithData:v90 sig:v91];
          sub_10000852C(a12, a13);
          sub_10000852C(a10, a11);

          if (v92)
          {
            uint64_t v100 = swift_allocObject(&unk_10023A5A8, 160LL, 7LL);
            *(void *)(v100 + 16) = a4;
            *(void *)(v100 + 24) = v159;
            *(void *)(v100 + 32) = v164;
            *(void *)(v100 + 40) = v157;
            *(void *)(v100 + 48) = v158;
            *(void *)(v100 + 56) = a14;
            *(void *)(v100 + 64) = a15;
            *(void *)(v100 + 72) = a16;
            *(void *)(v100 + 80) = a17;
            *(void *)(v100 + 88) = a18;
            *(void *)(v100 + 96) = a19;
            *(_BYTE *)(v100 + 104) = a20 & 1;
            *(void *)(v100 + 112) = v154;
            *(void *)(v100 + 120) = v92;
            *(void *)(v100 + 128) = v160;
            *(void *)(v100 + 136) = v60;
            *(void *)(v100 + 144) = a21;
            *(void *)(v100 + 152) = v153;
            strcpy((char *)v166, "signing-key ");
            BYTE5(v166[1]) = 0;
            HIWORD(v166[1]) = -5120;
            v101._uint64_t countAndFlagsBits = v160;
            v101._object = v60;
            String.append(_:)(v101);
            swift_bridgeObjectRetain(a19);
            id v102 = v154;
            id v103 = v92;
            swift_bridgeObjectRetain(a21);
            id v104 = v153;
            swift_bridgeObjectRetain_n(v60, 3LL);
            swift_bridgeObjectRetain(v159);
            swift_retain(v100);
            id v105 = v164;
            swift_retain(v158);
            swift_bridgeObjectRetain(a15);
            swift_bridgeObjectRetain(a17);
            sub_10015FAA0(v166[0], v166[1], (void (*)(char *, uint64_t))sub_1001751F8, v100, v160, v60);

            swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v166[1],  v106,  v107,  v108,  v109,  v110,  v111,  v112);
            swift_release_n(v100, 2LL);
            swift_bridgeObjectRelease_n(v60, 2LL);
            sub_10000852C(v45, v151);
            sub_10000852C(v150, v42);
            swift_bridgeObjectRelease(v60, v113, v114, v115, v116, v117, v118, v119);
            return;
          }

          swift_bridgeObjectRelease(v60, v93, v94, v95, v96, v97, v98, v99);
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v142 = type metadata accessor for Logger(0LL);
          uint64_t v143 = sub_100006BAC(v142, (uint64_t)qword_1002567D0);
          uint64_t v144 = (os_log_s *)Logger.logObject.getter(v143);
          os_log_type_t v145 = static os_log_type_t.info.getter(v144);
          uint64_t v62 = v40;
          if (os_log_type_enabled(v144, v145))
          {
            uint64_t v146 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v146 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v144,  v145,  "Invalid stableinfo or signature; van't vouch for them",
              v146,
              2u);
            swift_slowDealloc(v146, -1LL, -1LL);
          }

          unint64_t v147 = sub_100043F74();
          uint64_t v148 = swift_allocError(&type metadata for ContainerError, v147, 0LL, 0LL);
          *(_OWORD *)uint64_t v149 = xmmword_1001DEA00;
          *(_BYTE *)(v149 + 16) = 13;
          v157(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, v148);
          swift_errorRelease();

          uint64_t v131 = v45;
          unint64_t v132 = v151;
        }

        else
        {
          swift_bridgeObjectRelease(v60, v63, v64, v65, v66, v67, v68, v69);
          unint64_t v128 = sub_100043F74();
          uint64_t v129 = swift_allocError(&type metadata for ContainerError, v128, 0LL, 0LL);
          *(_OWORD *)uint64_t v130 = xmmword_1001DE880;
          *(_BYTE *)(v130 + 16) = 13;
          v157(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, v129);
          swift_errorRelease();

          uint64_t v131 = v45;
          unint64_t v132 = v47;
        }

        sub_10000852C(v131, v132);
        uint64_t v141 = v62;
LABEL_27:
        sub_10000852C(v141, v42);
        return;
      }

      sub_10000852C(v40, v42);
    }

    swift_bridgeObjectRelease(v29, v31, v32, v33, v34, v35, v36, v37);
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v120 = type metadata accessor for Logger(0LL);
  uint64_t v121 = sub_100006BAC(v120, (uint64_t)qword_1002567D0);
  uint64_t v122 = (os_log_s *)Logger.logObject.getter(v121);
  os_log_type_t v123 = static os_log_type_t.info.getter(v122);
  if (os_log_type_enabled(v122, v123))
  {
    uint64_t v124 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v124 = 0;
    _os_log_impl((void *)&_mh_execute_header, v122, v123, "As a nonmember, can't vouch for someone else", v124, 2u);
    swift_slowDealloc(v124, -1LL, -1LL);
  }

  unint64_t v125 = sub_100043F74();
  uint64_t v126 = swift_allocError(&type metadata for ContainerError, v125, 0LL, 0LL);
  *(_OWORD *)uint64_t v127 = xmmword_1001E6820;
  *(_BYTE *)(v127 + 16) = 13;
  a2(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, v126);
  swift_errorRelease();
}

void sub_100112D64( void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t (*a6)(void, unint64_t, void, unint64_t, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _TtC18TrustedPeersHelper6Client *a11, uint64_t a12, _TtC18TrustedPeersHelper6Client *a13, char a14, void *a15, void *a16, uint64_t a17, _TtC18TrustedPeersHelper6Client *a18, _TtC18TrustedPeersHelper6Client *a19, void *a20)
{
  id v20 = (void (*)(void, void, void, void, void))a6;
  if (a1)
  {
    uint64_t v25 = a1;
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCEventNameFetchPolicyDocument);
    uint64_t v124 = (_TtC18TrustedPeersHelper6Client *)a4;
    uint64_t v28 = v27;
    swift_bridgeObjectRetain(a13);
    id v116 = v25;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    sub_100173F04();
    LOBYTE(v25) = v29;
    id v30 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
    id v31 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
    id v32 = sub_10005F250( 0LL,  a8,  a9,  a10,  (uint64_t)a11,  a12,  (uint64_t)a13,  v113,  v28,  (char)v25,  a14 & 1,  v30);
    uint64_t v33 = sub_100007578(&qword_1002515D8);
    uint64_t inited = swift_initStackObject(v33, v128);
    *(_OWORD *)(inited + 16) = xmmword_1001E67F0;
    id v35 = [a16 bestPolicyVersion];
    *(void *)(inited + 32) = v35;
    v130[0] = inited;
    specialized Array._endMutation()(v35);
    BOOL v36 = (_TtC18TrustedPeersHelper6Client *)v130[0];
    int64_t v115 = (_TtC18TrustedPeersHelper6Client *)sub_100161474(v130[0]);
    swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRetain(v124);
    id v119 = a5;
    swift_errorRetain(a2);
    id v117 = v116;
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a13);
    id v114 = v32;
    swift_retain(a7);
    id v44 = a15;
    id v45 = a16;
    swift_bridgeObjectRetain(a18);
    swift_bridgeObjectRetain(a19);
    unint64_t v46 = a20;
    sub_10016D0C8( v115,  v44,  a2,  v114,  a6,  a7,  v44,  v119,  v45,  a17,  (uint64_t)a18,  v117,  (uint64_t)a19,  v46,  a3,  (uint64_t)v124,  a10,  (uint64_t)a11,  a12,  (uint64_t)a13);

    swift_release(a7);
    swift_bridgeObjectRelease(a18, v47, v48, v49, v50, v51, v52, v53);

    swift_bridgeObjectRelease(a19, v54, v55, v56, v57, v58, v59, v60);
    swift_bridgeObjectRelease(v124, v61, v62, v63, v64, v65, v66, v67);
    swift_bridgeObjectRelease(a11, v68, v69, v70, v71, v72, v73, v74);
    swift_bridgeObjectRelease(a13, v75, v76, v77, v78, v79, v80, v81);
    swift_errorRelease();

    swift_bridgeObjectRelease(v115, v82, v83, v84, v85, v86, v87, v88);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v89 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v89, (uint64_t)qword_1002567D0);
    swift_bridgeObjectRetain(a4);
    id v90 = a5;
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    id v91 = v90;
    uint64_t v92 = swift_errorRetain(a2);
    uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
    os_log_type_t v97 = static os_log_type_t.error.getter(v93, v94, v95, v96);
    if (os_log_type_enabled(v93, v97))
    {
      os_log_type_t v123 = v20;
      uint64_t v98 = swift_slowAlloc(32LL, -1LL);
      uint64_t v121 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v126 = swift_slowAlloc(64LL, -1LL);
      v130[0] = v126;
      *(_DWORD *)uint64_t v98 = 136446722;
      swift_bridgeObjectRetain(a4);
      uint64_t v129 = sub_10017C4C4(a3, a4, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130, v98 + 4, v98 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v98 + 12) = 2114;
      uint64_t v129 = (uint64_t)v91;
      id v99 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130, v98 + 14, v98 + 22);
      *uint64_t v121 = v91;

      *(_WORD *)(v98 + 22) = 2082;
      uint64_t v129 = a2;
      swift_errorRetain(a2);
      uint64_t v100 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v101 = String.init<A>(describing:)(&v129, v100);
      id v103 = (_TtC18TrustedPeersHelper6Client *)v102;
      uint64_t v129 = sub_10017C4C4(v101, v102, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130, v98 + 24, v98 + 32);
      swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v93,  v97,  "Don't have my own keys: can't vouch for %{public}s(%{public}@): %{public}s",  (uint8_t *)v98,  0x20u);
      uint64_t v111 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v121, 1LL, v111);
      swift_slowDealloc(v121, -1LL, -1LL);
      swift_arrayDestroy(v126, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1LL, -1LL);
      uint64_t v112 = v98;
      id v20 = v123;
      swift_slowDealloc(v112, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_errorRelease();
      swift_errorRelease();
    }

    v20(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, a2);
  }

uint64_t sub_100113338( uint64_t a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, unint64_t, void, unint64_t, uint64_t), uint64_t a8, unint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  id v259 = a7;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, v23);
  uint64_t v249 = (char *)&v241 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v25, v26);
  uint64_t v250 = (char *)&v241 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v28, v29);
  uint64_t v247 = (uint64_t)&v241 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v31, v32);
  uint64_t v254 = (uint64_t)&v241 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v34, v35);
  uint64_t v253 = (uint64_t)&v241 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v37, v38);
  uint64_t v257 = (_TtC18TrustedPeersHelper6Client *)((char *)&v241 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v252 = (uint64_t *)type metadata accessor for Metrics(0LL);
  uint64_t v244 = *(v252 - 1);
  __chkstk_darwin(v252, v40);
  uint64_t v256 = (uint64_t)&v241 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v43 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  uint64_t v245 = a4;
  uint64_t v246 = a5;
  NSString v44 = String._bridgeToObjectiveC()();
  uint64_t v45 = *(void *)(a6 + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey);
  int64_t v262 = 0LL;
  id v46 =  [v43 createVoucherForCandidate:a2 stableInfo:a3 withSponsorID:v44 reason:4 signingKeyPair:v45 error:&v262];

  SEL v47 = v262;
  if (!v46)
  {
    id v55 = v262;
    uint64_t v56 = _convertNSErrorToError(_:)(v47);

    swift_willThrow(v57);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v58, (uint64_t)qword_1002567D0);
    swift_errorRetain(v56);
    uint64_t v59 = swift_errorRetain(v56);
    BOOL v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v64 = static os_log_type_t.error.getter(v60, v61, v62, v63);
    if (os_log_type_enabled(v60, v64))
    {
      id v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v66 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
      int64_t v262 = v66;
      *(_DWORD *)id v65 = 136446210;
      uint64_t v260 = v56;
      swift_errorRetain(v56);
      uint64_t v67 = sub_100007578(&qword_100251D70);
      uint64_t v68 = String.init<A>(describing:)(&v260, v67);
      int64_t v70 = (_TtC18TrustedPeersHelper6Client *)v69;
      uint64_t v260 = sub_10017C4C4(v68, v69, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261, v65 + 4, v65 + 12);
      swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v64, "Error creating voucher: %{public}s", v65, 0xCu);
      swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    id v103 = v259;
    swift_errorRetain(v56);
    v103(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, v56);
    swift_errorRelease();
    return swift_errorRelease();
  }

  uint64_t v251 = a8;
  id v48 = *(void **)(a1 + v42);
  int64_t v262 = 0LL;
  id v258 = v46;
  int64_t v49 = v47;
  id v50 = [v48 getViewsForPeer:a2 stableInfo:a3 error:&v262];
  id v51 = v262;
  if (v50)
  {
    BOOL v52 = v50;
    uint64_t v53 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v50,  &type metadata for String,  &protocol witness table for String);
    SEL v54 = v51;
  }

  else
  {
    id v78 = v262;
    _convertNSErrorToError(_:)(v51);

    swift_willThrow(v79);
    swift_errorRelease();
    uint64_t v53 = 0LL;
  }

  uint64_t v80 = 0LL;
  int64_t v262 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  if (a9 >> 62)
  {
    if ((a9 & 0x8000000000000000LL) != 0LL) {
      uint64_t v105 = a9;
    }
    else {
      uint64_t v105 = a9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a9);
    uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v105);
    uint64_t v255 = a6;
    if (v81) {
      goto LABEL_11;
    }
LABEL_27:
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a9, v82, v83, v84, v85, v86, v87, v88);
    unint64_t v102 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    goto LABEL_28;
  }

  uint64_t v81 = *(void *)((a9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a9);
  uint64_t v255 = a6;
  if (!v81) {
    goto LABEL_27;
  }
LABEL_11:
  if (v81 < 1)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  uint64_t v242 = a2;
  uint64_t v243 = a1;
  for (uint64_t i = 0LL; i != v81; ++i)
  {
    if ((a9 & 0xC000000000000001LL) != 0) {
      id v99 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a9);
    }
    else {
      id v99 = *(id *)(a9 + 8 * i + 32);
    }
    uint64_t v100 = v99;
    id v101 = [v99 newUpload];
    if ((v101 & 1) != 0)
    {
    }

    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v101);
      uint64_t v90 = *(void *)v262->endpoint;
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v90);
      uint64_t v91 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v90, v100);
      specialized ContiguousArray._endMutation()(v91);
    }
  }

  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a9, v92, v93, v94, v95, v96, v97, v98);
  unint64_t v102 = v262;
  a1 = v243;
  a2 = v242;
  a6 = v255;
LABEL_28:
  uint64_t v106 = (uint64_t)sub_100158D7C((uint64_t)v102, v53);
  swift_release(v102);
  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v53, v107, v108, v109, v110, v111, v112, v113);
  if ((unint64_t)v106 >> 62)
  {
    if (v106 < 0) {
      uint64_t v136 = v106;
    }
    else {
      uint64_t v136 = v106 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v121 = _CocoaArrayWrapper.endIndex.getter(v136);
    if (v121) {
      goto LABEL_30;
    }
LABEL_41:
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v106, v114, v115, v116, v117, v118, v119, v120);
    unint64_t v135 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    goto LABEL_42;
  }

  uint64_t v121 = *(void *)((v106 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v121) {
    goto LABEL_41;
  }
LABEL_30:
  int64_t v262 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v121);
  if (v121 < 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  uint64_t v243 = 0LL;
  uint64_t v53 = 0LL;
  do
  {
    if ((v106 & 0xC000000000000001LL) != 0) {
      id v122 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v53, v106);
    }
    else {
      id v122 = *(id *)(v106 + 8 * v53 + 32);
    }
    os_log_type_t v123 = v122;
    ++v53;
    id v124 = [v122 tlk];

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v125);
    uint64_t v126 = *(void *)v262->endpoint;
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v126);
    uint64_t v127 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v126, v124);
    specialized ContiguousArray._endMutation()(v127);
  }

  while (v121 != v53);
  unint64_t v135 = v262;
  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v106, v128, v129, v130, v131, v132, v133, v134);
  a6 = v255;
  uint64_t v80 = v243;
LABEL_42:
  uint64_t v137 = (uint64_t)[a10 epoch];
  if (v137 < 0)
  {
    __break(1u);
    goto LABEL_60;
  }

  uint64_t v138 = a1;
  uint64_t v139 = sub_1000E04C0(v135, a6, a2, v137);
  if (v80)
  {
    uint64_t v53 = a12;

    swift_bridgeObjectRelease(v135, v147, v148, v149, v150, v151, v152, v153);
    if (qword_100250EB8 == -1)
    {
LABEL_45:
      uint64_t v154 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v154, (uint64_t)qword_1002567D0);
      swift_bridgeObjectRetain(v53);
      uint64_t v155 = a2;
      swift_errorRetain(v80);
      swift_bridgeObjectRetain(v53);
      uint64_t v156 = v155;
      uint64_t v157 = swift_errorRetain(v80);
      uint64_t v158 = (os_log_s *)Logger.logObject.getter(v157);
      os_log_type_t v162 = static os_log_type_t.error.getter(v158, v159, v160, v161);
      if (os_log_type_enabled(v158, v162))
      {
        uint64_t v163 = swift_slowAlloc(32LL, -1LL);
        uint64_t v164 = (_TtC18TrustedPeersHelper6Client **)swift_slowAlloc(8LL, -1LL);
        uint64_t v257 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(64LL, -1LL);
        int64_t v262 = v257;
        *(_DWORD *)uint64_t v163 = 136446722;
        swift_bridgeObjectRetain(v53);
        uint64_t v260 = sub_10017C4C4(a11, v53, (uint64_t *)&v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261, v163 + 4, v163 + 12);
        swift_bridgeObjectRelease_n(v53, 3LL);
        *(_WORD *)(v163 + 12) = 2114;
        uint64_t v260 = (uint64_t)v156;
        uint64_t v165 = v156;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261, v163 + 14, v163 + 22);
        void *v164 = v156;

        *(_WORD *)(v163 + 22) = 2082;
        uint64_t v260 = v80;
        swift_errorRetain(v80);
        uint64_t v166 = sub_100007578(&qword_100251D70);
        uint64_t v167 = String.init<A>(describing:)(&v260, v166);
        unint64_t v169 = (_TtC18TrustedPeersHelper6Client *)v168;
        uint64_t v260 = sub_10017C4C4(v167, v168, (uint64_t *)&v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261, v163 + 24, v163 + 32);
        swift_bridgeObjectRelease(v169, v170, v171, v172, v173, v174, v175, v176);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v158,  v162,  "Unable to make TLKShares for beneficiary %{public}s(%{public}@): %{public}s",  (uint8_t *)v163,  0x20u);
        uint64_t v177 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v164, 1LL, v177);
        swift_slowDealloc(v164, -1LL, -1LL);
        unint64_t v178 = v257;
        swift_arrayDestroy(v257, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v178, -1LL, -1LL);
        swift_slowDealloc(v163, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v53, 2LL);
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain(v80);
      v259(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, v80);

      swift_errorRelease();
      return swift_errorRelease();
    }

LABEL_62:
    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_45;
  }

  unint64_t v179 = (_TtC18TrustedPeersHelper6Client *)v139;
  swift_bridgeObjectRelease(v135, v140, v141, v142, v143, v144, v145, v146);
  if (*(void *)v179->endpoint)
  {
    __chkstk_darwin(v180, v181);
    *(&v241 - 4) = v189;
    *(&v241 - 3) = v188;
    *(&v241 - 2) = v191;
    *(&v241 - 1) = v190;
    uint64_t v192 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
    static Message.with(_:)(sub_100176DF4, &v241 - 6, v252, v192);
    uint64_t v255 = 0LL;
    unint64_t v193 = sub_1000084C4( (void *)(v138 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish),  *(void *)(v138 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24));
    id v194 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v138
                                                                 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
    if (v194)
    {
      id v195 = v194;
      uint64_t v243 = static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
      uint64_t v197 = v196;
    }

    else
    {
      uint64_t v243 = 0LL;
      uint64_t v197 = (_TtC18TrustedPeersHelper6Client *)0xE000000000000000LL;
    }

    uint64_t v212 = type metadata accessor for SignedPeerStableInfo(0LL);
    (*(void (**)(_TtC18TrustedPeersHelper6Client *, uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 56LL))( v257,  1LL,  1LL,  v212);
    uint64_t v213 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    uint64_t v214 = v253;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v213 - 8) + 56LL))(v253, 1LL, 1LL, v213);
    uint64_t v215 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
    uint64_t v216 = v254;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 56LL))(v254, 1LL, 1LL, v215);
    uint64_t v217 = v247;
    sub_10004164C(v256, v247, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t *))(v244 + 56))(v217, 0LL, 1LL, v252);
    uint64_t v218 = type metadata accessor for AccountInfo(0LL);
    uint64_t v219 = (uint64_t)v250;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v218 - 8) + 56LL))(v250, 1LL, 1LL, v218);
    uint64_t v220 = (void *)swift_allocObject(&unk_10023A710, 40LL, 7LL);
    uint64_t v252 = &v241;
    id v221 = v258;
    uint64_t v222 = v251;
    v220[2] = v259;
    v220[3] = v222;
    v220[4] = v221;
    id v259 = (void (*)(void, unint64_t, void, unint64_t, uint64_t))*v193;
    __chkstk_darwin(v220, v223);
    *(&v241 - 12) = v243;
    *(&v241 - 11) = (uint64_t)v197;
    uint64_t v224 = v246;
    *(&v241 - 10) = v245;
    *(&v241 - 9) = v224;
    *(&v241 - 8) = (uint64_t)v257;
    *(&v241 - 7) = v214;
    *(&v241 - 6) = (uint64_t)v179;
    *(&v241 - 5) = (uint64_t)_swiftEmptyArrayStorage;
    *(&v241 - 4) = v216;
    *(&v241 - 3) = v217;
    *(&v241 - 2) = v219;
    uint64_t v225 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
    swift_retain(v222);
    uint64_t v226 = (uint64_t)v249;
    static Message.with(_:)(sub_100175428, &v241 - 14, updated, v225);
    RetryingCKCodeService.updateTrust(_:completion:)(v226, (uint64_t)sub_10017541C, (uint64_t)v220);
    sub_1000415CC(v226, type metadata accessor for UpdateTrustRequest);
    swift_bridgeObjectRelease(v179, v227, v228, v229, v230, v231, v232, v233);
    swift_bridgeObjectRelease(v197, v234, v235, v236, v237, v238, v239, v240);
    swift_release(v220);

    sub_100041590(v219, &qword_100251F50);
    sub_100041590(v217, &qword_100257000);
    sub_100041590(v254, &qword_100256D20);
    sub_100041590(v253, &qword_100256CA0);
    sub_100041590((uint64_t)v257, &qword_100251F18);
    return sub_1000415CC(v256, type metadata accessor for Metrics);
  }

  else
  {
    swift_bridgeObjectRelease(v179, v181, v182, v183, v184, v185, v186, v187);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v198 = type metadata accessor for Logger(0LL);
    uint64_t v199 = sub_100006BAC(v198, (uint64_t)qword_1002567D0);
    Swift::String v200 = (os_log_s *)Logger.logObject.getter(v199);
    os_log_type_t v201 = static os_log_type_t.info.getter(v200);
    if (os_log_type_enabled(v200, v201))
    {
      id v202 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v202 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v200,  v201,  "No TLKShares to upload for new peer, returning voucher",  v202,  2u);
      swift_slowDealloc(v202, -1LL, -1LL);
    }

    id v203 = v258;
    id v204 = [v258 data];
    uint64_t v205 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v204);
    unint64_t v207 = v206;

    id v208 = [v203 sig];
    uint64_t v209 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v208);
    unint64_t v211 = v210;

    v259(v205, v207, v209, v211, 0LL);
    sub_10000852C(v209, v211);
    return sub_10000852C(v205, v207);
  }

uint64_t sub_10011423C( uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t), uint64_t a3, void *a4)
{
  id v111 = a4;
  uint64_t v112 = a3;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v12);
  os_log_type_t v14 = (char *)&v107 - v13;
  uint64_t updated = type metadata accessor for UpdateTrustResponse(0LL);
  __chkstk_darwin(updated, v16);
  uint64_t v18 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100007578((uint64_t *)&unk_100256D10);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (uint64_t *)((char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v22, (uint64_t *)&unk_100256D10);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    uint64_t v23 = *v22;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v24, (uint64_t)qword_1002567D0);
    swift_errorRetain(v23);
    uint64_t v25 = swift_errorRetain(v23);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v30 = static os_log_type_t.error.getter(v26, v27, v28, v29);
    if (os_log_type_enabled(v26, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
      uint64_t v115 = v23;
      int64_t v116 = v32;
      *(_DWORD *)uint64_t v31 = 136446210;
      swift_errorRetain(v23);
      uint64_t v33 = sub_100007578(&qword_100251D70);
      uint64_t v34 = String.init<A>(describing:)(&v115, v33);
      uint64_t v36 = (_TtC18TrustedPeersHelper6Client *)v35;
      uint64_t v115 = sub_10017C4C4(v34, v35, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v30, "Unable to upload new tlkshares: %{public}s", v31, 0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    id v88 = v111;
    id v89 = [v111 data];
    uint64_t v90 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v89);
    unint64_t v92 = v91;

    id v93 = [v88 sig];
    uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v93);
    unint64_t v96 = v95;

    swift_errorRetain(v23);
    a2(v90, v92, v94, v96, v23);
    swift_errorRelease();
    sub_10000852C(v94, v96);
    sub_10000852C(v90, v92);
    return swift_errorRelease();
  }

  else
  {
    sub_100041608((uint64_t)v22, (uint64_t)v18, type metadata accessor for UpdateTrustResponse);
    NSString v44 = *(_TtC18TrustedPeersHelper6Client **)v18;
    uint64_t v45 = *(void *)(*(void *)v18 + 16LL);
    id v46 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    id v110 = v18;
    if (v45)
    {
      int64_t v109 = a2;
      int64_t v116 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v44);
      specialized ContiguousArray.reserveCapacity(_:)(v45);
      uint64_t v47 = sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
      uint64_t v48 = *(unsigned __int8 *)(v7 + 80);
      id v108 = v44;
      int64_t v49 = &v44->_TtCs12_SwiftObject_opaque[(v48 + 32) & ~v48];
      uint64_t v113 = *(void *)(v7 + 72);
      uint64_t v114 = v47;
      id v50 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v7 + 16);
      do
      {
        v50(v14, v49, v6);
        v50(v11, (unsigned __int8 *)v14, v6);
        uint64_t v51 = CKRecord.init(_:)(v11);
        uint64_t v52 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v52);
        uint64_t v53 = v11;
        uint64_t v54 = v7;
        uint64_t v55 = *(void *)v116->endpoint;
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v55);
        uint64_t v56 = v55;
        uint64_t v7 = v54;
        uint64_t v11 = v53;
        uint64_t v57 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v51);
        specialized ContiguousArray._endMutation()(v57);
        v49 += v113;
        --v45;
      }

      while (v45);
      id v46 = v116;
      swift_bridgeObjectRelease(v108, v58, v59, v60, v61, v62, v63, v64);
      a2 = v109;
    }

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v65 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v65, (uint64_t)qword_1002567D0);
    uint64_t v66 = swift_bridgeObjectRetain(v46);
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = static os_log_type_t.info.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      unint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int64_t v70 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
      int64_t v116 = v70;
      *(_DWORD *)unint64_t v69 = 136446210;
      swift_bridgeObjectRetain(v46);
      uint64_t v71 = sub_100007578(&qword_100256D90);
      uint64_t v72 = Array.description.getter(v46, v71);
      id v74 = (_TtC18TrustedPeersHelper6Client *)v73;
      swift_bridgeObjectRelease(v46, v73, v75, v76, v77, v78, v79, v80);
      uint64_t v115 = sub_10017C4C4(v72, (unint64_t)v74, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease_n(v46, 2LL);
      swift_bridgeObjectRelease(v74, v81, v82, v83, v84, v85, v86, v87);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Uploaded new tlkshares: %{public}s", v69, 0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v46, 2LL);
    }

    id v98 = v111;
    id v99 = [v111 data];
    uint64_t v100 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v99);
    unint64_t v102 = v101;

    id v103 = [v98 sig];
    uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v103);
    unint64_t v106 = v105;

    a2(v100, v102, v104, v106, 0LL);
    sub_10000852C(v104, v106);
    sub_10000852C(v100, v102);
    return sub_1000415CC((uint64_t)v110, type metadata accessor for UpdateTrustResponse);
  }

uint64_t sub_1001148E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_100146B88( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "departByDistrustingSelf complete: %{public}s",  0xD00000000000001FLL,  0x80000001001F9840LL);
}

void sub_100114910(uint64_t a1, void (*a2)(void), _TtC18TrustedPeersHelper6Client *a3)
{
  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;

    uint64_t v10 = sub_100007578((uint64_t *)&unk_100251820);
    uint64_t inited = swift_initStackObject(v10, &v27);
    *(_OWORD *)(inited + 16) = xmmword_1001DE710;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v9;
    uint64_t v12 = (_TtC18TrustedPeersHelper6Client *)sub_10015AB0C(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
    sub_100115054(v12, a2, a3);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_100006BAC(v20, (uint64_t)qword_1002567D0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No dynamic info for self?", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    unint64_t v25 = sub_100043F74();
    swift_allocError(&type metadata for ContainerError, v25, 0LL, 0LL);
    *(_OWORD *)uint64_t v26 = xmmword_1001DE890;
    *(_BYTE *)(v26 + 16) = 13;
    a2();
    swift_errorRelease();
  }

uint64_t sub_100114B00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_100146B88( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "distrust complete: %{public}s",  0xD000000000000018LL,  0x80000001001F9820LL);
}

void sub_100114B2C( uint64_t a1, void (*a2)(void), _TtC18TrustedPeersHelper6Client *a3, _TtC18TrustedPeersHelper6Client *a4)
{
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (!v7)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_100006BAC(v28, (uint64_t)qword_1002567D0);
    os_log_type_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No dynamic info for self?", v32, 2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    unint64_t v33 = sub_100043F74();
    uint64_t v25 = swift_allocError(&type metadata for ContainerError, v33, 0LL, 0LL);
    __int128 v27 = xmmword_1001DE890;
    goto LABEL_13;
  }

  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v11 = v10;

  LOBYTE(v8) = sub_10003B7F0(v9, (uint64_t)v11, (uint64_t)a4);
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  if ((v8 & 1) != 0)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_100006BAC(v19, (uint64_t)qword_1002567D0);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Self-distrust via peerID not allowed", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    unint64_t v24 = sub_100043F74();
    uint64_t v25 = swift_allocError(&type metadata for ContainerError, v24, 0LL, 0LL);
    __int128 v27 = xmmword_1001E6830;
LABEL_13:
    *(_OWORD *)uint64_t v26 = v27;
    *(_BYTE *)(v26 + 16) = 13;
    ((void (*)(uint64_t))a2)(v25);
    swift_errorRelease();
    return;
  }

  sub_100115054(a4, a2, a3);
}

uint64_t sub_100114DB0(uint64_t *a1, uint64_t a2)
{
  id v41 = a1;
  uint64_t v3 = sub_100007578(&qword_100256D28);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  SEL v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v13);
  SEL v37 = (char *)&v36 - v14;
  uint64_t v15 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v39 = *(void *)(v15 - 8);
  uint64_t v40 = v15;
  __chkstk_darwin(v15, v16);
  id v38 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v19 =  [*(id *)(a2 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO) idmsTrustedDevicesVersion];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v23 = v22;
  }

  else
  {
    unint64_t v23 = 0xE700000000000000LL;
    uint64_t v21 = 0x6E776F6E6B6E75LL;
  }

  unint64_t v24 = v41;
  swift_bridgeObjectRelease(v41[1]);
  *unint64_t v24 = v21;
  v24[1] = v23;
  id v25 = [*(id *)(a2 + v18) idmsTrustedDeviceListFetchDate];
  if (!v25)
  {
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
    uint64_t v29 = v37;
    goto LABEL_8;
  }

  uint64_t v26 = v25;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  __int128 v27 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v27(v6, v12, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  uint64_t v29 = v37;
  if ((_DWORD)v28 == 1)
  {
LABEL_8:
    Date.init(timeIntervalSince1970:)(v28, 0.0);
    sub_100041590((uint64_t)v6, &qword_100256D28);
    goto LABEL_9;
  }

  v27(v37, v6, v7);
LABEL_9:
  os_log_type_t v30 = v38;
  Google_Protobuf_Timestamp.init(date:)(v29);
  uint64_t v31 = (uint64_t)v24 + *(int *)(type metadata accessor for IdmsTrustedDevicesVersion(0LL) + 24);
  sub_100041590(v31, (uint64_t *)&unk_100256D30);
  uint64_t v32 = v39;
  unint64_t v33 = v30;
  uint64_t v34 = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v31, v33, v40);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v31, 0LL, 1LL, v34);
}

void sub_100115054( _TtC18TrustedPeersHelper6Client *a1, void (*a2)(void), _TtC18TrustedPeersHelper6Client *a3)
{
  uint64_t v4 = v3;
  id v8 = [*(id *)&v3[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    SEL v12 = v11;

    strcpy((char *)v43, "signing-key ");
    BYTE5(v43[1]) = 0;
    HIWORD(v43[1]) = -5120;
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_retain(a3);
    id v14 = v4;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(a1);
    sub_100160060( v43[0],  v43[1],  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)v14,  v10,  (uint64_t)v12,  (uint64_t)a1,  (void (*)(void))sub_100115284);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v43[1], v15, v16, v17, v18, v19, v20, v21);
    swift_release(a3, v22, v23, v24, v25, v26, v27, v28);

    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_bridgeObjectRelease(a1, v29, v30, v31, v32, v33, v34, v35);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_100006BAC(v36, (uint64_t)qword_1002567D0);
    id v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No dynamic info for self?", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    unint64_t v41 = sub_100043F74();
    swift_allocError(&type metadata for ContainerError, v41, 0LL, 0LL);
    *(_OWORD *)uint64_t v42 = xmmword_1001DE890;
    *(_BYTE *)(v42 + 16) = 13;
    a2();
    swift_errorRelease();
  }

void sub_100115284( void *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    SEL v15 = *(void **)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v16 = swift_allocObject(&unk_100238028, 72LL, 7LL);
    *(void *)(v16 + 16) = a5;
    *(void *)(v16 + 24) = a6;
    *(void *)(v16 + 32) = a7;
    *(void *)(v16 + 40) = a8;
    *(void *)(v16 + 48) = a1;
    *(void *)(v16 + 56) = a3;
    *(void *)(v16 + 64) = a4;
    a3 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238050, 32LL, 7LL);
    *(void *)a3->endpoint = sub_100171390;
    *(void *)a3->containerMap = v16;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v65 = a3;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100238068;
    int64_t v17 = _Block_copy(aBlock);
    id v18 = v65;
    id v19 = a1;
    BOOL v20 = a5;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a8);
    swift_retain(a4);
    swift_retain(a3);
    swift_release(v18, v21, v22, v23, v24, v25, v26, v27);
    [v15 performBlockAndWait:v17];

    _Block_release(v17);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a3, "", 108LL, 4525LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v16, v29, v30, v31, v32, v33, v34, v35);
    swift_release(a3, v36, v37, v38, v39, v40, v41, v42);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
  }

  uint64_t v43 = a2;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v44 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v44, (uint64_t)qword_1002567D0);
  swift_errorRetain(v43);
  uint64_t v45 = swift_errorRetain(v43);
  id v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v50 = static os_log_type_t.error.getter(v46, v47, v48, v49);
  if (os_log_type_enabled(v46, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v52;
    *(_DWORD *)uint64_t v51 = 136446210;
    uint64_t v66 = v43;
    swift_errorRetain(v43);
    uint64_t v53 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v54 = String.init<A>(describing:)(&v66, v53);
    uint64_t v56 = (_TtC18TrustedPeersHelper6Client *)v55;
    uint64_t v66 = sub_10017C4C4(v54, v55, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v50,  "No longer have signing key pair; can't sign distrust: %{public}s",
      v51,
      0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  ((void (*)(uint64_t))a3)(v43);
}

uint64_t sub_1001155AC( char *a1, uint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, uint64_t a5, void (*a6)(void), uint64_t a7)
{
  unint64_t v132 = a6;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, v13);
  int64_t v130 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  __chkstk_darwin(v15, v16);
  id v18 = (uint64_t *)((char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v19 = *(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  uint64_t v127 = a2;
  uint64_t v128 = a3;
  NSString v20 = String._bridgeToObjectiveC()();
  uint64_t v21 = swift_bridgeObjectRetain(a4);
  id v22 = (_TtC18TrustedPeersHelper6Client *)sub_10014E370(v21);
  swift_bridgeObjectRelease(a4, v23, v24, v25, v26, v27, v28, v29);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v22, v31, v32, v33, v34, v35, v36, v37);
  id v38 = (void *)sub_1001A3414();
  id v135 = 0LL;
  id v39 =  [v19 calculateDynamicInfoForPeerWithID:v20 addingPeerIDs:0 removingPeerIDs:isa preapprovedKeys:0 signingKeyPair:a5 currentMachineIDs:v38 error:&v135];

  id v40 = v135;
  if (v39)
  {
    id v41 = v39;
    id v42 = v40;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    id v43 = [v41 data];
    uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v46 = v45;

    *id v18 = v44;
    v18[1] = v46;
    id v47 = [v41 sig];
    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v50 = v49;

    v18[2] = v48;
    void v18[3] = v50;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v51 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v51, (uint64_t)qword_1002567D0);
    swift_bridgeObjectRetain_n(a4, 2LL);
    id v131 = v41;
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v131);
    os_log_type_t v53 = static os_log_type_t.info.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      id v124 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v125 = (void *)swift_slowAlloc(32LL, -1LL);
      id v135 = v125;
      *(_DWORD *)uint64_t v54 = 136446466;
      uint64_t v55 = swift_bridgeObjectRetain(a4);
      uint64_t v56 = Set.description.getter(v55, &type metadata for String, &protocol witness table for String);
      uint64_t v126 = a7;
      uint64_t v57 = v56;
      int64_t v59 = (_TtC18TrustedPeersHelper6Client *)v58;
      swift_bridgeObjectRelease(a4, v58, v60, v61, v62, v63, v64, v65);
      uint64_t v133 = sub_10017C4C4(v57, (unint64_t)v59, (uint64_t *)&v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease(v59, v66, v67, v68, v69, v70, v71, v72);
      *(_WORD *)(v54 + 12) = 2114;
      uint64_t v133 = (uint64_t)v131;
      id v73 = v131;
      a7 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v54 + 14, v54 + 22);
      id v74 = v124;
      *id v124 = v39;

      _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "attempting distrust for %{public}s with: %{public}@",  (uint8_t *)v54,  0x16u);
      uint64_t v75 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v74, 1LL, v75);
      swift_slowDealloc(v74, -1LL, -1LL);
      int64_t v76 = v125;
      swift_arrayDestroy(v125, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {

      id v102 = v131;
      uint64_t v77 = swift_bridgeObjectRelease_n(a4, 2LL);
    }

    __chkstk_darwin(v77, v78);
    uint64_t v103 = v127;
    *(&v123 - 4) = (uint64_t)a1;
    *(&v123 - 3) = v103;
    uint64_t v121 = v128;
    id v122 = v18;
    uint64_t v104 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
    uint64_t v105 = (uint64_t)v130;
    static Message.with(_:)(sub_1001713AC, &v123 - 6, updated, v104);
    uint64_t v106 = *(void *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v107 = *(void *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v106);
    uint64_t v108 = swift_allocObject(&unk_1002380A0, 40LL, 7LL);
    int64_t v109 = v132;
    *(void *)(v108 + 16) = a1;
    *(void *)(v108 + 24) = v109;
    *(void *)(v108 + 32) = a7;
    uint64_t v110 = *(void *)(v107 + 16);
    id v111 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v110 + 32);
    uint64_t v112 = a1;
    swift_retain(a7);
    v111(v105, sub_1001713D4, v108, v106, v110);
    swift_release((_TtC18TrustedPeersHelper6Client *)v108, v113, v114, v115, v116, v117, v118, v119);

    sub_1000415CC(v105, type metadata accessor for UpdateTrustRequest);
    return sub_1000415CC((uint64_t)v18, type metadata accessor for SignedPeerDynamicInfo);
  }

  else
  {
    id v79 = v135;
    uint64_t v80 = _convertNSErrorToError(_:)(v40);

    swift_willThrow(v81);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v82 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v82, (uint64_t)qword_1002567D0);
    swift_errorRetain(v80);
    uint64_t v83 = swift_errorRetain(v80);
    id v84 = (os_log_s *)Logger.logObject.getter(v83);
    os_log_type_t v88 = static os_log_type_t.error.getter(v84, v85, v86, v87);
    if (os_log_type_enabled(v84, v88))
    {
      id v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v90 = (void *)swift_slowAlloc(32LL, -1LL);
      id v135 = v90;
      *(_DWORD *)id v89 = 136446210;
      uint64_t v133 = v80;
      swift_errorRetain(v80);
      uint64_t v91 = sub_100007578(&qword_100251D70);
      uint64_t v92 = String.init<A>(describing:)(&v133, v91);
      uint64_t v94 = (_TtC18TrustedPeersHelper6Client *)v93;
      uint64_t v133 = sub_10017C4C4(v92, v93, (uint64_t *)&v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v84, v88, "Error preparing dynamic info: %{public}s", v89, 0xCu);
      swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v80);
    v132(v80);
    swift_errorRelease();
    return swift_errorRelease();
  }

uint64_t sub_100115D08(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  v52[1] = a4;
  os_log_type_t v53 = a3;
  v52[0] = a2;
  uint64_t v5 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v5, v6);
  id v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Changes(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for UpdateTrustResponse(0LL);
  __chkstk_darwin(updated, v15);
  uint64_t v17 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100007578((uint64_t *)&unk_100256D10);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (void *)((char *)v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v21, (uint64_t *)&unk_100256D10);
  if (swift_getEnumCaseMultiPayload(v21, v18) == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v23, (uint64_t)qword_1002567D0);
    swift_errorRetain(v22);
    uint64_t v24 = swift_errorRetain(v22);
    int64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v29 = static os_log_type_t.error.getter(v25, v26, v27, v28);
    if (os_log_type_enabled(v25, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v54 = v22;
      uint64_t v55 = v31;
      *(_DWORD *)id v30 = 136446210;
      swift_errorRetain(v22);
      uint64_t v32 = sub_100007578(&qword_100251D70);
      uint64_t v33 = String.init<A>(describing:)(&v54, v32);
      id v35 = (_TtC18TrustedPeersHelper6Client *)v34;
      uint64_t v54 = sub_10017C4C4(v33, v34, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v29, "updateTrust failed: %{public}s", v30, 0xCu);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v22);
    v53(v22);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    sub_100041608((uint64_t)v21, (uint64_t)v17, type metadata accessor for UpdateTrustResponse);
    sub_10000FC68((uint64_t)&v17[*(int *)(updated + 24)], (uint64_t)v8, (uint64_t *)&unk_100256C90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
    {
      *(void *)uint64_t v13 = 0LL;
      *((void *)v13 + 1) = 0xE000000000000000LL;
      *((void *)v13 + 2) = _swiftEmptyArrayStorage;
      *(_OWORD *)(v13 + 24) = xmmword_1001DE6F0;
      *(_OWORD *)(v13 + 40) = xmmword_1001DE6F0;
      v13[56] = 0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      uint64_t v43 = sub_100041590((uint64_t)v8, (uint64_t *)&unk_100256C90);
    }

    else
    {
      uint64_t v43 = sub_100041608((uint64_t)v8, (uint64_t)v13, type metadata accessor for Changes);
    }

    __chkstk_darwin(v43, v44);
    v52[-4] = v13;
    v52[-3] = v46;
    LOBYTE(v52[-2]) = 0;
    NSManagedObjectContext.performAndWait<A>(_:)( &type metadata for (),  sub_1001713E0,  &v52[-6],  &type metadata for () + 1);
    sub_1000415CC((uint64_t)v13, type metadata accessor for Changes);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    uint64_t v48 = sub_100006BAC(v47, (uint64_t)qword_1002567D0);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.info.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "distrust succeeded", v51, 2u);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    v53(0LL);
    return sub_1000415CC((uint64_t)v17, type metadata accessor for UpdateTrustResponse);
  }

uint64_t sub_100116394(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_100146B88( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&static os_log_type_t.default.getter,  "drop complete: %{public}s",  0xD000000000000014LL,  0x80000001001F9800LL);
}

id sub_1001163C0( uint64_t a1, void (*a2)(uint64_t), uint64_t a3, _TtC18TrustedPeersHelper6Client *a4)
{
  id v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (!v8)
  {
    if (qword_100250EB8 != -1) {
LABEL_49:
    }
      swift_once(&qword_100250EB8, sub_1000DD078);
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_100006BAC(v32, (uint64_t)qword_1002567D0);
    unint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v38 = static os_log_type_t.error.getter(v34, v35, v36, v37);
    if (os_log_type_enabled(v34, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v38, "No dynamic info for self?", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    unint64_t v40 = sub_100043F74();
    uint64_t v29 = swift_allocError(&type metadata for ContainerError, v40, 0LL, 0LL);
    __int128 v31 = xmmword_1001DE890;
    goto LABEL_12;
  }

  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v12 = v11;

  LOBYTE(v9) = sub_10003B7F0(v10, (uint64_t)v12, (uint64_t)a4);
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  if ((v9 & 1) != 0)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_100006BAC(v20, (uint64_t)qword_1002567D0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v26 = static os_log_type_t.error.getter(v22, v23, v24, v25);
    if (os_log_type_enabled(v22, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v26, "Self-drop not allowed", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    unint64_t v28 = sub_100043F74();
    uint64_t v29 = swift_allocError(&type metadata for ContainerError, v28, 0LL, 0LL);
    __int128 v31 = xmmword_1001E6830;
LABEL_12:
    *(_OWORD *)uint64_t v30 = v31;
    *(_BYTE *)(v30 + 16) = 13;
    a2(v29);
    swift_errorRelease();
    return [*(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc) rollback];
  }

  uint64_t v95 = a3;
  id v96 = a2;
  containerMap = a4[1].containerMap;
  uint64_t v43 = 1LL << a4[1]._TtCs12_SwiftObject_opaque[0];
  uint64_t v44 = -1LL;
  if (v43 < 64) {
    uint64_t v44 = ~(-1LL << v43);
  }
  unint64_t v45 = v44 & *(void *)a4[1].containerMap;
  a2 = (void (*)(uint64_t))((unint64_t)(v43 + 63) >> 6);
  swift_bridgeObjectRetain(a4);
  uint64_t v53 = 0LL;
  if (!v45) {
    goto LABEL_17;
  }
LABEL_16:
  unint64_t v54 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  for (unint64_t i = v54 | (v53 << 6); ; unint64_t i = __clz(__rbit64(v57)) + (v53 << 6))
  {
    int64_t v59 = (uint64_t *)(*(void *)a4[1].endpoint + 16 * i);
    uint64_t v61 = *v59;
    id v60 = (_TtC18TrustedPeersHelper6Client *)v59[1];
    swift_bridgeObjectRetain(v60);
    id v62 = objc_autoreleasePoolPush();
    sub_100116CC0(a1, v61, (unint64_t)v60);
    objc_autoreleasePoolPop(v62);
    swift_bridgeObjectRelease(v60, v63, v64, v65, v66, v67, v68, v69);
    if (v45) {
      goto LABEL_16;
    }
LABEL_17:
    if (__OFADD__(v53++, 1LL))
    {
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    unint64_t v57 = *(void *)&containerMap[8 * v53];
    if (!v57) {
      break;
    }
LABEL_27:
    unint64_t v45 = (v57 - 1) & v57;
  }

  uint64_t v58 = v53 + 1;
  unint64_t v57 = *(void *)&containerMap[8 * v58];
  if (v57) {
    goto LABEL_26;
  }
  uint64_t v58 = v53 + 2;
  unint64_t v57 = *(void *)&containerMap[8 * v58];
  if (v57)
  {
LABEL_26:
    uint64_t v53 = v58;
    goto LABEL_27;
  }

  uint64_t v58 = v53 + 3;
  if (v53 + 3 < (uint64_t)a2)
  {
    unint64_t v57 = *(void *)&containerMap[8 * v58];
    if (!v57)
    {
      while (1)
      {
        uint64_t v53 = v58 + 1;
        if (__OFADD__(v58, 1LL)) {
          goto LABEL_48;
        }
        unint64_t v57 = *(void *)&containerMap[8 * v53];
        ++v58;
        if (v57) {
          goto LABEL_27;
        }
      }
    }

    goto LABEL_26;
  }

void sub_100116CC0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *(_TtC18TrustedPeersHelper6Client **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter);
  uint64_t v8 = *(void *)v7->endpoint;
  uint64_t v9 = *(void **)v7->containerMap;
  swift_retain(v7);
  uint64_t v10 = (void *)sub_1001616C8(v8, v9, a2, a3);
  swift_release(v7, v11, v12, v13, v14, v15, v16, v17);
  if (!v3)
  {
    if (v10)
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v18 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v18, (uint64_t)qword_1002567D0);
      uint64_t v19 = swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v29 = swift_slowAlloc(32LL, -1LL);
        uint64_t v32 = v29;
        *(_DWORD *)uint64_t v22 = 136380675;
        swift_bridgeObjectRetain(a3);
        uint64_t v30 = sub_10017C4C4(a2, a3, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease_n(a3, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Dropping MO for %{private}s", v22, 0xCu);
        swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a3, 2LL);
      }

      [*(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc) deleteObject:v10];
    }

    else
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v23, (uint64_t)qword_1002567D0);
      uint64_t v24 = swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        uint64_t v32 = v28;
        *(_DWORD *)uint64_t v27 = 136380675;
        swift_bridgeObjectRetain(a3);
        uint64_t v30 = sub_10017C4C4(a2, a3, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease_n(a3, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "MO for peer not found, but that's ok: %{private}s",  v27,  0xCu);
        swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a3, 2LL);
      }
    }
  }

void sub_100117034(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v5, 41LL, 7LL);
  uint64_t v6 = v2;
  uint64_t v7 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v6, 0xD00000000000001BLL, 0x80000001001FA140LL);

  uint64_t v8 = swift_allocObject(&unk_10023A468, 40LL, 7LL);
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  uint64_t v9 = qword_100250EB8;
  swift_retain(v7);
  swift_retain(a2);
  if (v9 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100006BAC(v10, (uint64_t)qword_1002567D0);
  id v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "beginning a fetchEscrowContents", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  id v15 = *(void **)&v6[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v16 = swift_allocObject(&unk_10023A490, 40LL, 7LL);
  *(void *)(v16 + 16) = v6;
  *(void *)(v16 + 24) = sub_100174FE4;
  *(void *)(v16 + 32) = v8;
  id v17 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A4B8, 32LL, 7LL);
  *(void *)v17->endpoint = sub_100175038;
  *(void *)v17->containerMap = v16;
  v57[4] = sub_100176BD4;
  uint64_t v58 = v17;
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 1107296256LL;
  v57[2] = sub_1000DC9F8;
  v57[3] = &unk_10023A4D0;
  uint64_t v18 = _Block_copy(v57);
  uint64_t v19 = v58;
  uint64_t v20 = v6;
  swift_retain(v8);
  swift_retain(v17);
  swift_release(v19, v21, v22, v23, v24, v25, v26, v27);
  [v15 performBlockAndWait:v18];
  swift_release((_TtC18TrustedPeersHelper6Client *)v8, v28, v29, v30, v31, v32, v33, v34);
  swift_release(v7, v35, v36, v37, v38, v39, v40, v41);
  _Block_release(v18);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v17, "", 108LL, 4636LL, 33LL, 1LL);
  swift_release((_TtC18TrustedPeersHelper6Client *)v16, v43, v44, v45, v46, v47, v48, v49);
  swift_release(v17, v50, v51, v52, v53, v54, v55, v56);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
}

uint64_t sub_1001172B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10, const char *a11, uint64_t a12, unint64_t a13)
{
  uint64_t v16 = a4;
  if (a7) {
    os_log_type_t v17 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v17 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v18 = v17;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v19, (uint64_t)qword_1002567D0);
  swift_errorRetain(a7);
  uint64_t v20 = swift_errorRetain(a7);
  SEL v21 = (os_log_s *)Logger.logObject.getter(v20);
  if (os_log_type_enabled(v21, v18))
  {
    uint64_t v44 = v16;
    uint64_t v45 = a5;
    uint64_t v46 = a6;
    id v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = v23;
    *(_DWORD *)id v22 = 136446210;
    id v24 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a7)
    {
      uint64_t v51 = 0x203A726F727265LL;
      unint64_t v52 = 0xE700000000000000LL;
      uint64_t v50 = a7;
      swift_errorRetain(a7);
      swift_errorRetain(a7);
      uint64_t v25 = sub_100007578(&qword_100251D70);
      v26._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v50, v25);
      object = (_TtC18TrustedPeersHelper6Client *)v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(object, v28, v29, v30, v31, v32, v33, v34);
      swift_errorRelease();
      uint64_t v35 = v51;
      id v24 = (_TtC18TrustedPeersHelper6Client *)v52;
    }

    else
    {
      uint64_t v35 = 0x73736563637573LL;
    }

    uint64_t v51 = sub_10017C4C4(v35, (unint64_t)v24, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v24, v36, v37, v38, v39, v40, v41, v42);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v18, a11, v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    a5 = v45;
    a6 = v46;
    uint64_t v16 = v44;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(a12, a13);
  return a9(a1, a2, a3, v16, a5, a6, a7);
}

void sub_100117544( uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, uint64_t, unint64_t, uint64_t))
{
  uint64_t v4 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (!v5)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v60 = type metadata accessor for Logger(0LL);
    uint64_t v61 = sub_100006BAC(v60, (uint64_t)qword_1002567D0);
    id v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.info.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      id v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "fetchEscrowContents failed", v64, 2u);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    unint64_t v65 = sub_100043F74();
    uint64_t v58 = swift_allocError(&type metadata for ContainerError, v65, 0LL, 0LL);
    __int128 v59 = xmmword_1001DE890;
    goto LABEL_18;
  }

  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v9 = v8;

  id v10 = [*(id *)(a1 + v4) bottles];
  if (!v10
    || (os_log_type_t v18 = v10,
        id v119 = 0LL,
        uint64_t v19 = type metadata accessor for BottleMO(),
        uint64_t v20 = sub_1000077B8( &qword_100251690,  (uint64_t (*)(uint64_t))type metadata accessor for BottleMO,  (uint64_t)&protocol conformance descriptor for NSObject),  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v18, &v119, v19, v20),  v18,  (v21 = v119) == 0LL))
  {
    swift_bridgeObjectRelease(v9, v11, v12, v13, v14, v15, v16, v17);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = sub_100006BAC(v50, (uint64_t)qword_1002567D0);
    unint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.info.getter(v52);
    if (!os_log_type_enabled(v52, v53)) {
      goto LABEL_12;
    }
    id v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v54 = 0;
    id v55 = "fetchEscrowContents failed";
    goto LABEL_11;
  }

  swift_bridgeObjectRetain(v9);
  sub_1001584FC((uint64_t)v21, v7, v9);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease(v21, v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(v9, v31, v32, v33, v34, v35, v36, v37);
  if (!v23)
  {
    swift_bridgeObjectRelease(v9, v38, v39, v40, v41, v42, v43, v44);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v66 = type metadata accessor for Logger(0LL);
    uint64_t v67 = sub_100006BAC(v66, (uint64_t)qword_1002567D0);
    unint64_t v52 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v53 = static os_log_type_t.info.getter(v52);
    if (!os_log_type_enabled(v52, v53)) {
      goto LABEL_12;
    }
    id v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v54 = 0;
    id v55 = "fetchEscrowContents no bottle matches peerID";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v52, v53, v55, v54, 2u);
    swift_slowDealloc(v54, -1LL, -1LL);
LABEL_12:

    unint64_t v56 = sub_100043F74();
    uint64_t v58 = swift_allocError(&type metadata for ContainerError, v56, 0LL, 0LL);
    __int128 v59 = xmmword_1001E68D0;
LABEL_18:
    *(_OWORD *)uint64_t v57 = v59;
    *(_BYTE *)(v57 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, 0xF000000000000000LL, v58);
LABEL_19:
    swift_errorRelease();
    return;
  }

  id v45 = [v23 bottleID];
  if (v45)
  {
    uint64_t v46 = v45;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    id v49 = v48;
  }

  else
  {
    uint64_t v47 = 0LL;
    id v49 = 0LL;
  }

  uint64_t v68 = sub_1000DF270(v7, (uint64_t)v9);
  unint64_t v70 = (unint64_t)v69;
  swift_bridgeObjectRelease(v9, v69, v71, v72, v73, v74, v75, v76);
  if (v70 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v49, v77, v78, v79, v80, v81, v82, v83);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v84 = type metadata accessor for Logger(0LL);
    uint64_t v85 = sub_100006BAC(v84, (uint64_t)qword_1002567D0);
    uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
    os_log_type_t v87 = static os_log_type_t.info.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "fetchEscrowContents failed to load entropy", v88, 2u);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    unint64_t v89 = sub_100043F74();
    uint64_t v90 = swift_allocError(&type metadata for ContainerError, v89, 0LL, 0LL);
    *(_OWORD *)uint64_t v91 = xmmword_1001E68C0;
    *(_BYTE *)(v91 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, 0xF000000000000000LL, v90);
LABEL_38:

    goto LABEL_19;
  }

  sub_1000084E8(v68, v70);
  id v92 = [v23 escrowedSigningSPKI];
  if (!v92)
  {
    swift_bridgeObjectRelease(v49, v93, v94, v95, v96, v97, v98, v99);
    sub_10003C1D0(v68, v70);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v111 = type metadata accessor for Logger(0LL);
    uint64_t v112 = sub_100006BAC(v111, (uint64_t)qword_1002567D0);
    SEL v113 = (os_log_s *)Logger.logObject.getter(v112);
    os_log_type_t v114 = static os_log_type_t.info.getter(v113);
    if (os_log_type_enabled(v113, v114))
    {
      id v115 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v115 = 0;
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "fetchEscrowContents no escrow signing spki", v115, 2u);
      swift_slowDealloc(v115, -1LL, -1LL);
    }

    unint64_t v116 = sub_100043F74();
    uint64_t v117 = swift_allocError(&type metadata for ContainerError, v116, 0LL, 0LL);
    *(_OWORD *)uint64_t v118 = xmmword_1001E68B0;
    *(_BYTE *)(v118 + 16) = 13;
    a2(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, 0xF000000000000000LL, v117);
    sub_10003C1D0(v68, v70);
    goto LABEL_38;
  }

  BOOL v100 = v92;
  uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v92);
  unint64_t v103 = v102;

  sub_1000084E8(v101, v103);
  a2(v68, v70, v47, v49, v101, v103, 0LL);
  sub_10003C1D0(v68, v70);
  sub_10000852C(v101, v103);
  sub_10000852C(v101, v103);
  sub_10003C1D0(v68, v70);

  swift_bridgeObjectRelease(v49, v104, v105, v106, v107, v108, v109, v110);
}

uint64_t sub_100117E44( _TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, char a3, uint64_t a4, void (*a5)(void, void, void))
{
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v28, (uint64_t)qword_1002567D0);
    swift_errorRetain(a1);
    uint64_t v29 = swift_errorRetain(a1);
    BOOL v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v34 = static os_log_type_t.error.getter(v30, v31, v32, v33);
    if (os_log_type_enabled(v30, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int64_t v72 = a1;
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)id v35 = 136446210;
      uint64_t v73 = 0x203A726F727265LL;
      id v74 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
      uint64_t v75 = v36;
      swift_errorRetain(a1);
      swift_errorRetain(a1);
      uint64_t v37 = sub_100007578(&qword_100251D70);
      v38._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v72, v37);
      id v39 = a5;
      object = (_TtC18TrustedPeersHelper6Client *)v38._object;
      String.append(_:)(v38);
      BOOL v41 = object;
      a5 = v39;
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      sub_100171A54((uint64_t)a1, (uint64_t)a2, 1);
      id v49 = v74;
      uint64_t v73 = sub_10017C4C4(v73, (unint64_t)v74, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
      sub_100171A54((uint64_t)a1, (uint64_t)a2, 1);
      sub_100171A54((uint64_t)a1, (uint64_t)a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v30, v34, "fetchViableBottles failed with %{public}s", v35, 0xCu);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      sub_100171A54((uint64_t)a1, (uint64_t)a2, 1);
      sub_100171A54((uint64_t)a1, (uint64_t)a2, 1);
    }

    swift_errorRetain(a1);
    a5(0LL, 0LL, a1);
    sub_100171A54((uint64_t)a1, (uint64_t)a2, 1);
    return sub_100171A54((uint64_t)a1, (uint64_t)a2, 1);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v9, (uint64_t)qword_1002567D0);
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = swift_bridgeObjectRetain(a2);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v13 = 134349312;
      uint64_t v73 = *(void *)a1->endpoint;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(a1, v14, v15, v16, v17, v18, v19, v20);
      *(_WORD *)(v13 + 12) = 2050;
      uint64_t v73 = *(void *)a2->endpoint;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease(a2, v21, v22, v23, v24, v25, v26, v27);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "fetchViableBottles succeeded with %{public}ld viable bottles and %{public}ld partial bottles",  (uint8_t *)v13,  0x16u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease(a2, v57, v58, v59, v60, v61, v62, v63);
      swift_bridgeObjectRelease(a1, v64, v65, v66, v67, v68, v69, v70);
    }

    return ((uint64_t (*)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, void))a5)( a1,  a2,  0LL);
  }

void sub_100118248(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100257040);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  os_log_type_t v12 = (char *)&v70 - v11;
  __chkstk_darwin(v10, v13);
  id v15 = (_TtC18TrustedPeersHelper6Client **)((char *)&v70 - v14);
  sub_10000FC68(a1, (uint64_t)&v70 - v14, &qword_100257040);
  uint64_t ViableBottlesResponse = type metadata accessor for FetchViableBottlesResponse(0LL);
  id v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(ViableBottlesResponse - 8) + 48LL);
  if (v17((char *)v15, 1LL, ViableBottlesResponse) == 1)
  {
    sub_100041590((uint64_t)v15, &qword_100257040);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_100006BAC(v18, (uint64_t)qword_1002567D0);
    BOOL v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "fetchViableBottles returned no viable bottles", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }
  }

  else
  {
    int64_t v23 = *v15;
    swift_bridgeObjectRetain(*v15);
    sub_1000415CC((uint64_t)v15, type metadata accessor for FetchViableBottlesResponse);
    sub_10000FC68(a1, (uint64_t)v12, &qword_100257040);
    if (v17(v12, 1LL, ViableBottlesResponse) == 1)
    {
      sub_100041590((uint64_t)v12, &qword_100257040);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v24 = type metadata accessor for Logger(0LL);
      uint64_t v25 = sub_100006BAC(v24, (uint64_t)qword_1002567D0);
      BOOL v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.info.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "fetchViableBottles returned no partially viable bottles, but that's ok",  v28,  2u);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      int64_t v72 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    }

    else
    {
      int64_t v72 = (_TtC18TrustedPeersHelper6Client *)*((void *)v12 + 1);
      swift_bridgeObjectRetain(v72);
      sub_1000415CC((uint64_t)v12, type metadata accessor for FetchViableBottlesResponse);
    }

    sub_10000FC68(a1, (uint64_t)v8, &qword_100257040);
    if (v17(v8, 1LL, ViableBottlesResponse) == 1)
    {
      sub_100041590((uint64_t)v8, &qword_100257040);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v29 = type metadata accessor for Logger(0LL);
      uint64_t v30 = sub_100006BAC(v29, (uint64_t)qword_1002567D0);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.info.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "fetchViableBottles returned no legacy escrow records",  v33,  2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      BOOL v41 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    }

    else
    {
      BOOL v41 = (_TtC18TrustedPeersHelper6Client *)*((void *)v8 + 2);
      swift_bridgeObjectRetain(v41);
      sub_1000415CC((uint64_t)v8, type metadata accessor for FetchViableBottlesResponse);
    }

    id v71 = v41;
    uint64_t v42 = *(void *)v23->endpoint;
    if (v42)
    {
      uint64_t v43 = *(void *)(type metadata accessor for EscrowPair(0LL) - 8);
      uint64_t v44 = (uint64_t)&v23->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)];
      uint64_t v45 = *(void *)(v43 + 72);
      BOOL v70 = v23;
      swift_bridgeObjectRetain(v23);
      do
      {
        sub_1001187F4( v44,  v2,  (SEL *)&selRef_fullyViableEscrowRecords,  sub_100176BBC,  "fetchViableBottles already knows about record, re-adding entry, label = %{public}s",  (SEL *)&selRef_removeFullyViableEscrowRecords_,  0,  sub_100176BA4);
        v44 += v45;
        --v42;
      }

      while (v42);
      swift_bridgeObjectRelease_n(v70, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v23, v34, v35, v36, v37, v38, v39, v40);
    }

    id v53 = v72;
    uint64_t v54 = *(void *)v72->endpoint;
    if (v54)
    {
      uint64_t v55 = *(void *)(type metadata accessor for EscrowPair(0LL) - 8);
      uint64_t v56 = (uint64_t)&v53->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v55 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80)];
      uint64_t v57 = *(void *)(v55 + 72);
      swift_bridgeObjectRetain(v53);
      do
      {
        sub_1001187F4( v56,  v2,  (SEL *)&selRef_partiallyViableEscrowRecords,  sub_100174FC4,  "fetchViableBottles already knows about record, re-adding entry: %{public}s",  (SEL *)&selRef_removePartiallyViableEscrowRecords_,  1u,  sub_100174FA8);
        v56 += v57;
        --v54;
      }

      while (v54);
      swift_bridgeObjectRelease_n(v72, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v72, v46, v47, v48, v49, v50, v51, v52);
    }

    id v65 = v71;
    uint64_t v66 = *(void *)v71->endpoint;
    if (v66)
    {
      uint64_t v67 = *(void *)(type metadata accessor for EscrowInformation(0LL) - 8);
      uint64_t v68 = (uint64_t)&v65->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80)];
      uint64_t v69 = *(void *)(v67 + 72);
      swift_bridgeObjectRetain(v65);
      do
      {
        sub_100119FC4(v68, v2);
        v68 += v69;
        --v66;
      }

      while (v66);
      swift_bridgeObjectRelease_n(v65, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v71, v58, v59, v60, v61, v62, v63, v64);
    }
  }

uint64_t sub_1001187F4( uint64_t a1, uint64_t a2, SEL *a3, uint64_t (*a4)(id *), const char *a5, SEL *a6, unsigned int a7, uint64_t (*a8)(id *))
{
  uint64_t v157 = a8;
  unsigned int v156 = a7;
  BOOL v153 = a6;
  BOOL v152 = a5;
  uint64_t v155 = a4;
  uint64_t v161 = a3;
  uint64_t v165 = a2;
  uint64_t v9 = sub_100007578((uint64_t *)&unk_100257060);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v163 = (char *)&v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v13);
  id v15 = (char *)&v152 - v14;
  uint64_t v16 = type metadata accessor for EscrowInformation(0LL);
  os_log_type_t v162 = *(void **)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v154 = (char *)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v20);
  uint64_t v164 = (const char **)((char *)&v152 - v21);
  uint64_t v22 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for Bottle(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v158 = (char *)&v152 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29, v31);
  uint64_t v33 = (char *)&v152 - v32;
  uint64_t v159 = (uint8_t *)*(int *)(type metadata accessor for EscrowPair(0LL) + 20);
  uint64_t v160 = a1;
  uint64_t v34 = *(void *)&v159[a1];
  uint64_t v35 = v34
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v170,  0LL,  0LL);
  sub_10000FC68(v35, (uint64_t)v25, &qword_100251F38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26) == 1)
  {
    *(_OWORD *)uint64_t v33 = xmmword_1001DE6F0;
    *((_OWORD *)v33 + 1) = xmmword_1001DE6F0;
    *((_OWORD *)v33 + 2) = xmmword_1001DE6F0;
    *((_OWORD *)v33 + 3) = xmmword_1001DE6F0;
    *((void *)v33 + 8) = 0LL;
    *((void *)v33 + 9) = 0xE000000000000000LL;
    *((void *)v33 + 10) = 0LL;
    *((void *)v33 + 11) = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v25, &qword_100251F38);
  }

  else
  {
    sub_100041608((uint64_t)v25, (uint64_t)v33, type metadata accessor for Bottle);
  }

  uint64_t v36 = v34
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  v169,  0LL,  0LL);
  sub_10000FC68(v36, (uint64_t)v15, (uint64_t *)&unk_100257060);
  uint64_t v37 = (uint64_t (*)(char *, uint64_t, uint64_t))v162[6];
  int v38 = v37(v15, 1LL, v16);
  uint64_t v39 = v166;
  BOOL v40 = v164;
  if (v38 == 1)
  {
    void *v164 = 0LL;
    v40[1] = 0LL;
    v40[3] = 0LL;
    v40[4] = 0LL;
    v40[2] = 0xE000000000000000LL;
    *((_BYTE *)v40 + 40) = 1;
    v40[6] = 0LL;
    *((_BYTE *)v40 + 56) = 1;
    v40[8] = 0LL;
    v40[9] = 0xE000000000000000LL;
    v40[10] = 0LL;
    v40[11] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    BOOL v41 = (char *)v40 + *(int *)(v16 + 48);
    uint64_t v42 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v41, 1LL, 1LL, v42);
    uint64_t v43 = (char *)v40 + *(int *)(v16 + 52);
    uint64_t v44 = type metadata accessor for EscrowInformation.Metadata(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v43, 1LL, 1LL, v44);
    sub_100041590((uint64_t)v15, (uint64_t *)&unk_100257060);
    uint64_t v34 = *(void *)&v159[v160];
  }

  else
  {
    sub_100041608((uint64_t)v15, (uint64_t)v164, type metadata accessor for EscrowInformation);
  }

  uint64_t v45 = v34
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  v168,  0LL,  0LL);
  uint64_t v46 = v45;
  uint64_t v47 = (uint64_t)v163;
  sub_10000FC68(v46, (uint64_t)v163, (uint64_t *)&unk_100257060);
  int v48 = v37((char *)v47, 1LL, v16);
  sub_100041590(v47, (uint64_t *)&unk_100257060);
  if (v48 == 1)
  {
    uint64_t v49 = v165;
  }

  else
  {
    uint64_t v50 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
    uint64_t v49 = v165;
    id v51 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v165
                                                                + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), *v161));
    if (v51)
    {
      BOOL v52 = v51;
      uint64_t v163 = v33;
      uint64_t v171 = 0LL;
      uint64_t v53 = type metadata accessor for EscrowRecordMO();
      uint64_t v54 = sub_1000077B8( (unint64_t *)&qword_100257050,  (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordMO,  (uint64_t)&protocol conformance descriptor for NSObject);
      static Set._conditionallyBridgeFromObjectiveC(_:result:)(v52, &v171, v53, v54);

      if (v171)
      {
        __chkstk_darwin(v55, v56);
        *(&v152 - 2) = (const char *)v40;
        Swift::Int v58 = sub_10014F568( v155,  (uint64_t)(&v152 - 4),  v57,  &qword_100257058,  (uint64_t (*)(void))type metadata accessor for EscrowRecordMO);
        Swift::Int v59 = v58;
        if ((v58 & 0xC000000000000001LL) != 0) {
          uint64_t v60 = __CocoaSet.count.getter(v58);
        }
        else {
          uint64_t v60 = *(void *)(v58 + 16);
        }
        uint64_t v61 = (uint64_t)v154;
        if (v60)
        {
          os_log_type_t v162 = (void *)v54;
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v62 = type metadata accessor for Logger(0LL);
          sub_100006BAC(v62, (uint64_t)qword_1002567D0);
          uint64_t v63 = sub_10004164C((uint64_t)v40, v61, type metadata accessor for EscrowInformation);
          BOOL v64 = (os_log_s *)Logger.logObject.getter(v63);
          os_log_type_t v65 = static os_log_type_t.info.getter(v64);
          if (os_log_type_enabled(v64, v65))
          {
            uint64_t v161 = (SEL *)v53;
            uint64_t v66 = v61;
            uint64_t v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v160 = swift_slowAlloc(32LL, -1LL);
            uint64_t v171 = v160;
            uint64_t v166 = v39;
            *(_DWORD *)uint64_t v67 = 136446210;
            uint64_t v159 = v67 + 4;
            uint64_t v69 = *(void *)(v61 + 8);
            uint64_t v68 = *(_TtC18TrustedPeersHelper6Client **)(v61 + 16);
            swift_bridgeObjectRetain(v68);
            uint64_t v167 = sub_10017C4C4(v69, (unint64_t)v68, &v171);
            uint64_t v39 = v166;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v159, v67 + 12);
            swift_bridgeObjectRelease(v68, v70, v71, v72, v73, v74, v75, v76);
            sub_1000415CC(v66, type metadata accessor for EscrowInformation);
            _os_log_impl((void *)&_mh_execute_header, v64, v65, v152, v67, 0xCu);
            uint64_t v77 = v160;
            swift_arrayDestroy(v160, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v77, -1LL, -1LL);
            os_log_type_t v78 = v67;
            uint64_t v49 = v165;
            swift_slowDealloc(v78, -1LL, -1LL);
          }

          else
          {
            sub_1000415CC(v61, type metadata accessor for EscrowInformation);
          }

          id v79 = *(id *)(v49 + v50);
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_release(v59);
          objc_msgSend(v79, *v153, isa);

          BOOL v40 = v164;
        }

        else
        {
          swift_release(v59);
        }

        sub_1001B2D30((uint64_t)v40, v156);
      }

      uint64_t v33 = v163;
    }
  }

  uint64_t v81 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v82 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v49
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "bottles", v152));
  if (!v82) {
    goto LABEL_34;
  }
  BOOL v83 = v82;
  uint64_t v171 = 0LL;
  uint64_t v84 = type metadata accessor for BottleMO();
  uint64_t v85 = sub_1000077B8( &qword_100251690,  (uint64_t (*)(uint64_t))type metadata accessor for BottleMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v83, &v171, v84, v85);

  if (!v171) {
    goto LABEL_34;
  }
  __chkstk_darwin(v86, v87);
  *(&v152 - 2) = v33;
  Swift::Int v89 = sub_10014F568( v157,  (uint64_t)(&v152 - 4),  v88,  (uint64_t *)&unk_100256E90,  (uint64_t (*)(void))type metadata accessor for BottleMO);
  Swift::Int v90 = v89;
  uint64_t v91 = (v89 & 0xC000000000000001LL) != 0 ? __CocoaSet.count.getter(v89) : *(void *)(v89 + 16);
  uint64_t v92 = (uint64_t)v158;
  swift_release(v90);
  if (v91)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v93 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v93, (uint64_t)qword_1002567D0);
    uint64_t v94 = sub_10004164C((uint64_t)v33, v92, type metadata accessor for Bottle);
    int64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
    os_log_type_t v96 = static os_log_type_t.info.getter(v95);
    if (os_log_type_enabled(v95, v96))
    {
      id v97 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v98 = swift_slowAlloc(32LL, -1LL);
      uint64_t v171 = v98;
      uint64_t v163 = v33;
      *(_DWORD *)id v97 = 136446210;
      uint64_t v99 = *(void *)(v92 + 80);
      unint64_t v100 = *(void *)(v92 + 88);
      swift_bridgeObjectRetain(v100);
      uint64_t v167 = sub_10017C4C4(v99, v100, &v171);
      uint64_t v33 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v97 + 4, v97 + 12);
      uint64_t v101 = (_TtC18TrustedPeersHelper6Client *)v100;
      BOOL v40 = v164;
      swift_bridgeObjectRelease(v101, v102, v103, v104, v105, v106, v107, v108);
      sub_1000415CC(v92, type metadata accessor for Bottle);
      _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "fetchViableBottles already knows about bottle: %{public}s",  v97,  0xCu);
      swift_arrayDestroy(v98, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1LL, -1LL);
      swift_slowDealloc(v97, -1LL, -1LL);
    }

    else
    {
      sub_1000415CC(v92, type metadata accessor for Bottle);
    }
  }

  else
  {
LABEL_34:
    uint64_t v109 = type metadata accessor for BottleMO();
    id v110 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v109)) initWithContext:*(void *)(v49 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc)];
    uint64_t v111 = (_TtC18TrustedPeersHelper6Client *)*((void *)v33 + 9);
    swift_bridgeObjectRetain(v111);
    NSString v112 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v111, v113, v114, v115, v116, v117, v118, v119);
    [v110 setPeerID:v112];

    BOOL v120 = (_TtC18TrustedPeersHelper6Client *)*((void *)v33 + 11);
    swift_bridgeObjectRetain(v120);
    NSString v121 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v120, v122, v123, v124, v125, v126, v127, v128);
    [v110 setBottleID:v121];

    uint64_t v129 = *((void *)v33 + 2);
    unint64_t v130 = *((void *)v33 + 3);
    sub_1000084E8(v129, v130);
    Class v131 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v129, v130);
    [v110 setEscrowedSigningSPKI:v131];

    uint64_t v132 = *((void *)v33 + 4);
    unint64_t v133 = *((void *)v33 + 5);
    sub_1000084E8(v132, v133);
    Class v134 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v132, v133);
    [v110 setSignatureUsingEscrowKey:v134];

    uint64_t v135 = *((void *)v33 + 6);
    unint64_t v136 = *((void *)v33 + 7);
    sub_1000084E8(v135, v136);
    Class v137 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v135, v136);
    [v110 setSignatureUsingPeerKey:v137];

    uint64_t v138 = *(void *)v33;
    unint64_t v139 = *((void *)v33 + 1);
    sub_1000084E8(*(void *)v33, v139);
    Class v140 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v138, v139);
    [v110 setContents:v140];

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v141 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v141, (uint64_t)qword_1002567D0);
    int64_t v95 = (os_log_s *)v110;
    int64_t v142 = (os_log_s *)Logger.logObject.getter(v95);
    os_log_type_t v143 = static os_log_type_t.info.getter(v142);
    if (os_log_type_enabled(v142, v143))
    {
      uint64_t v144 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v162 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v163 = v33;
      uint64_t v166 = v39;
      *(_DWORD *)uint64_t v144 = 138543362;
      uint64_t v171 = (uint64_t)v95;
      uint64_t v145 = v81;
      BOOL v146 = v95;
      BOOL v40 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, &v172, v144 + 4, v144 + 12);
      SEL v147 = v162;
      void *v162 = v95;

      uint64_t v81 = v145;
      _os_log_impl( (void *)&_mh_execute_header,  v142,  v143,  "fetchViableBottles saving new bottle: %{public}@",  v144,  0xCu);
      uint64_t v148 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v147, 1LL, v148);
      uint64_t v33 = v163;
      swift_slowDealloc(v147, -1LL, -1LL);
      swift_slowDealloc(v144, -1LL, -1LL);
    }

    else
    {

      int64_t v142 = v95;
    }

    uint64_t v149 = v165;

    id v150 = *(id *)(v149 + v81);
    [v150 addBottlesObject:v95];
  }

  sub_1000415CC((uint64_t)v40, type metadata accessor for EscrowInformation);
  return sub_1000415CC((uint64_t)v33, type metadata accessor for Bottle);
}

uint64_t sub_1001194B4(id *a1, uint64_t a2)
{
  uint64_t v5 = sub_100007578(&qword_100252098);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t v76 = *(void *)(v9 - 8);
  uint64_t v77 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for EscrowInformation(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v17 = *a1;
  id v18 = [*a1 label];
  if (!v18)
  {
    sub_10004164C(a2, (uint64_t)v16, type metadata accessor for EscrowInformation);
    goto LABEL_10;
  }

  uint64_t v19 = v18;
  uint64_t v79 = v2;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v22 = v21;

  uint64_t v28 = *(void **)(a2 + 8);
  int64_t v29 = *(void *)(a2 + 16);
  if ((void *)v20 == v28 && v22 == (_TtC18TrustedPeersHelper6Client *)v29)
  {
    swift_bridgeObjectRelease(v22, v23, v28, v29, v24, v25, v26, v27);
    sub_10004164C(a2, (uint64_t)v16, type metadata accessor for EscrowInformation);
    goto LABEL_7;
  }

  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v28, v29, 0LL);
  swift_bridgeObjectRelease(v22, v31, v32, v33, v34, v35, v36, v37);
  sub_10004164C(a2, (uint64_t)v16, type metadata accessor for EscrowInformation);
  if ((v30 & 1) == 0)
  {
LABEL_10:
    sub_1000415CC((uint64_t)v16, type metadata accessor for EscrowInformation);
LABEL_25:
    char v59 = 0;
    return v59 & 1;
  }

uint64_t sub_100119854(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bottle(0LL);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v12 = &v104[-v11];
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = &v104[-v15];
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = &v104[-v19];
  __chkstk_darwin(v18, v21);
  uint64_t v23 = &v104[-v22];
  id v106 = *a1;
  id v24 = [v106 peerID];
  if (!v24)
  {
    sub_10004164C(a2, (uint64_t)v23, type metadata accessor for Bottle);
    goto LABEL_17;
  }

  uint64_t v25 = v24;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v28 = v27;

  id v34 = *(void **)(a2 + 64);
  int64_t v35 = *(void *)(a2 + 72);
  if ((void *)v26 == v34 && v28 == (_TtC18TrustedPeersHelper6Client *)v35)
  {
    swift_bridgeObjectRelease(v28, v29, v34, v35, v30, v31, v32, v33);
    sub_10004164C(a2, (uint64_t)v23, type metadata accessor for Bottle);
  }

  else
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v34, v35, 0LL);
    swift_bridgeObjectRelease(v28, v38, v39, v40, v41, v42, v43, v44);
    sub_10004164C(a2, (uint64_t)v23, type metadata accessor for Bottle);
    if ((v37 & 1) == 0) {
      goto LABEL_17;
    }
  }

  id v45 = [v106 bottleID];
  if (!v45)
  {
LABEL_17:
    sub_1000415CC((uint64_t)v23, type metadata accessor for Bottle);
    sub_10004164C(a2, (uint64_t)v20, type metadata accessor for Bottle);
    goto LABEL_18;
  }

  uint64_t v46 = v45;
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  uint64_t v49 = v48;

  uint64_t v50 = *((void *)v23 + 10);
  id v51 = (_TtC18TrustedPeersHelper6Client *)*((void *)v23 + 11);
  if (v47 == v50 && v49 == v51)
  {
    sub_1000415CC((uint64_t)v23, type metadata accessor for Bottle);
    swift_bridgeObjectRelease(v49, v63, v64, v65, v66, v67, v68, v69);
    sub_10004164C(a2, (uint64_t)v20, type metadata accessor for Bottle);
  }

  else
  {
    char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v50, v51, 0LL);
    sub_1000415CC((uint64_t)v23, type metadata accessor for Bottle);
    swift_bridgeObjectRelease(v49, v54, v55, v56, v57, v58, v59, v60);
    sub_10004164C(a2, (uint64_t)v20, type metadata accessor for Bottle);
    if ((v53 & 1) == 0)
    {
LABEL_18:
      sub_1000415CC((uint64_t)v20, type metadata accessor for Bottle);
LABEL_19:
      sub_10004164C(a2, (uint64_t)v16, type metadata accessor for Bottle);
LABEL_20:
      sub_1000415CC((uint64_t)v16, type metadata accessor for Bottle);
LABEL_21:
      sub_10004164C(a2, (uint64_t)v12, type metadata accessor for Bottle);
LABEL_22:
      sub_1000415CC((uint64_t)v12, type metadata accessor for Bottle);
LABEL_23:
      sub_10004164C(a2, (uint64_t)v8, type metadata accessor for Bottle);
LABEL_24:
      sub_1000415CC((uint64_t)v8, type metadata accessor for Bottle);
      goto LABEL_25;
    }
  }

  id v70 = [v106 escrowedSigningSPKI];
  if (v70)
  {
    id v71 = v70;
    uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v70);
    unint64_t v74 = v73;

    uint64_t v75 = *((void *)v20 + 2);
    unint64_t v76 = *((void *)v20 + 3);
    if (v74 >> 60 != 15)
    {
      sub_1000084E8(*((void *)v20 + 2), *((void *)v20 + 3));
      sub_10004C798(v72, v74);
      sub_100041318(v72, v74);
      int v105 = v77;
      sub_10000852C(v75, v76);
      sub_10003C1D0(v72, v74);
      sub_1000415CC((uint64_t)v20, type metadata accessor for Bottle);
      sub_10003C1D0(v72, v74);
      sub_10004164C(a2, (uint64_t)v16, type metadata accessor for Bottle);
      if ((v105 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_35;
    }
  }

  else
  {
    uint64_t v72 = 0LL;
    uint64_t v75 = *((void *)v20 + 2);
    unint64_t v76 = *((void *)v20 + 3);
    unint64_t v74 = 0xF000000000000000LL;
  }

  sub_1000084E8(v75, v76);
  sub_1000415CC((uint64_t)v20, type metadata accessor for Bottle);
  sub_10003C1D0(v72, v74);
  if (v76 >> 60 != 15)
  {
    sub_10003C1D0(v75, v76);
    goto LABEL_19;
  }

  sub_10004164C(a2, (uint64_t)v16, type metadata accessor for Bottle);
LABEL_35:
  id v78 = [v106 signatureUsingEscrowKey];
  if (v78)
  {
    uint64_t v79 = v78;
    uint64_t v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v78);
    unint64_t v82 = v81;

    uint64_t v83 = *((void *)v16 + 4);
    unint64_t v84 = *((void *)v16 + 5);
    if (v82 >> 60 != 15)
    {
      sub_1000084E8(*((void *)v16 + 4), *((void *)v16 + 5));
      sub_10004C798(v80, v82);
      sub_100041318(v80, v82);
      char v86 = v85;
      sub_10000852C(v83, v84);
      sub_10003C1D0(v80, v82);
      sub_1000415CC((uint64_t)v16, type metadata accessor for Bottle);
      sub_10003C1D0(v80, v82);
      sub_10004164C(a2, (uint64_t)v12, type metadata accessor for Bottle);
      if ((v86 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_43;
    }
  }

  else
  {
    uint64_t v80 = 0LL;
    uint64_t v83 = *((void *)v16 + 4);
    unint64_t v84 = *((void *)v16 + 5);
    unint64_t v82 = 0xF000000000000000LL;
  }

  sub_1000084E8(v83, v84);
  sub_1000415CC((uint64_t)v16, type metadata accessor for Bottle);
  sub_10003C1D0(v80, v82);
  if (v84 >> 60 != 15)
  {
    sub_10003C1D0(v83, v84);
    goto LABEL_21;
  }

  sub_10004164C(a2, (uint64_t)v12, type metadata accessor for Bottle);
LABEL_43:
  id v87 = [v106 signatureUsingPeerKey];
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
    unint64_t v91 = v90;

    uint64_t v92 = *((void *)v12 + 6);
    unint64_t v93 = *((void *)v12 + 7);
    if (v91 >> 60 != 15)
    {
      sub_1000084E8(*((void *)v12 + 6), *((void *)v12 + 7));
      sub_10004C798(v89, v91);
      sub_100041318(v89, v91);
      char v95 = v94;
      sub_10000852C(v92, v93);
      sub_10003C1D0(v89, v91);
      sub_1000415CC((uint64_t)v12, type metadata accessor for Bottle);
      sub_10003C1D0(v89, v91);
      sub_10004164C(a2, (uint64_t)v8, type metadata accessor for Bottle);
      if ((v95 & 1) == 0) {
        goto LABEL_24;
      }
      goto LABEL_51;
    }
  }

  else
  {
    uint64_t v89 = 0LL;
    uint64_t v92 = *((void *)v12 + 6);
    unint64_t v93 = *((void *)v12 + 7);
    unint64_t v91 = 0xF000000000000000LL;
  }

  sub_1000084E8(v92, v93);
  sub_1000415CC((uint64_t)v12, type metadata accessor for Bottle);
  sub_10003C1D0(v89, v91);
  if (v93 >> 60 != 15)
  {
    sub_10003C1D0(v92, v93);
    goto LABEL_23;
  }

  sub_10004164C(a2, (uint64_t)v8, type metadata accessor for Bottle);
LABEL_51:
  id v96 = [v106 contents];
  if (v96)
  {
    id v97 = v96;
    uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
    unint64_t v100 = v99;

    uint64_t v101 = *(void *)v8;
    unint64_t v102 = *((void *)v8 + 1);
    if (v100 >> 60 != 15)
    {
      sub_1000084E8(*(void *)v8, *((void *)v8 + 1));
      sub_10004C798(v98, v100);
      sub_100041318(v98, v100);
      char v61 = v103;
      sub_10000852C(v101, v102);
      sub_10003C1D0(v98, v100);
      sub_1000415CC((uint64_t)v8, type metadata accessor for Bottle);
      sub_10003C1D0(v98, v100);
      return v61 & 1;
    }
  }

  else
  {
    uint64_t v98 = 0LL;
    uint64_t v101 = *(void *)v8;
    unint64_t v102 = *((void *)v8 + 1);
    unint64_t v100 = 0xF000000000000000LL;
  }

  sub_1000084E8(v101, v102);
  sub_1000415CC((uint64_t)v8, type metadata accessor for Bottle);
  sub_10003C1D0(v98, v100);
  if (v102 >> 60 == 15)
  {
    char v61 = 1;
    return v61 & 1;
  }

  sub_10003C1D0(v101, v102);
LABEL_25:
  char v61 = 0;
  return v61 & 1;
}

void sub_100119FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for EscrowInformation(0LL);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (char *)&v79 - v12;
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v79 - v15;
  uint64_t v17 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "legacyEscrowRecords"));
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v90 = 0LL;
    uint64_t v20 = type metadata accessor for EscrowRecordMO();
    uint64_t v87 = sub_1000077B8( (unint64_t *)&qword_100257050,  (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    static Set._conditionallyBridgeFromObjectiveC(_:result:)(v19, &v90, v20, v87);

    if (v90)
    {
      uint64_t v86 = v20;
      __chkstk_darwin(v21, v22);
      *(&v79 - 2) = a1;
      Swift::Int v24 = sub_10014F568( sub_100174F8C,  (uint64_t)(&v79 - 4),  v23,  &qword_100257058,  (uint64_t (*)(void))type metadata accessor for EscrowRecordMO);
      Swift::Int v25 = v24;
      if ((v24 & 0xC000000000000001LL) != 0)
      {
        uint64_t v26 = __CocoaSet.count.getter(v24);
        p_vtable = &OBJC_CLASS___VoucherMO.vtable;
        if (v26)
        {
LABEL_5:
          char v85 = v13;
          uint64_t v28 = type metadata accessor for Logger(0LL);
          sub_100006BAC(v28, (uint64_t)qword_1002567D0);
          uint64_t v29 = sub_10004164C(a1, (uint64_t)v16, type metadata accessor for EscrowInformation);
          char v30 = (os_log_s *)Logger.logObject.getter(v29);
          os_log_type_t v31 = static os_log_type_t.info.getter(v30);
          if (os_log_type_enabled(v30, v31))
          {
            uint64_t v84 = v2;
            uint64_t v32 = swift_slowAlloc(12LL, -1LL);
            uint64_t v83 = v9;
            BOOL v33 = (uint8_t *)v32;
            uint64_t v81 = swift_slowAlloc(32LL, -1LL);
            uint64_t v90 = v81;
            uint64_t v82 = a2;
            *(_DWORD *)BOOL v33 = 136446210;
            uint64_t v80 = v33 + 4;
            uint64_t v34 = *((void *)v16 + 1);
            int64_t v35 = (_TtC18TrustedPeersHelper6Client *)*((void *)v16 + 2);
            swift_bridgeObjectRetain(v35);
            uint64_t v88 = sub_10017C4C4(v34, (unint64_t)v35, &v90);
            a2 = v82;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v80, v33 + 12);
            swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
            sub_1000415CC((uint64_t)v16, type metadata accessor for EscrowInformation);
            _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "fetchViableBottles already knows about legacy record %{public}s, re-adding entry",  v33,  0xCu);
            uint64_t v43 = v81;
            swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v43, -1LL, -1LL);
            BOOL v44 = v33;
            uint64_t v9 = v83;
            swift_slowDealloc(v44, -1LL, -1LL);
          }

          else
          {
            sub_1000415CC((uint64_t)v16, type metadata accessor for EscrowInformation);
          }

          uint64_t v13 = v85;
          id v45 = *(id *)(a2 + v17);
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_release(v25);
          [v45 removeLegacyEscrowRecords:isa];

LABEL_13:
          v47._uint64_t countAndFlagsBits = 0x656C62756F642ELL;
          v47._object = (void *)0xE700000000000000LL;
          if (String.hasSuffix(_:)(v47))
          {
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v48 = type metadata accessor for Logger(0LL);
            sub_100006BAC(v48, (uint64_t)qword_1002567D0);
            uint64_t v49 = sub_10004164C(a1, (uint64_t)v13, type metadata accessor for EscrowInformation);
            uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
            os_log_type_t v51 = static os_log_type_t.info.getter(v50);
            if (os_log_type_enabled(v50, v51))
            {
              BOOL v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v53 = swift_slowAlloc(32LL, -1LL);
              uint64_t v90 = v53;
              *(_DWORD *)BOOL v52 = 136446210;
              uint64_t v54 = (uint64_t)v13;
              uint64_t v55 = *((void *)v13 + 1);
              int64_t v56 = (_TtC18TrustedPeersHelper6Client *)*((void *)v13 + 2);
              swift_bridgeObjectRetain(v56);
              uint64_t v88 = sub_10017C4C4(v55, (unint64_t)v56, &v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v52 + 4, v52 + 12);
              swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
              sub_1000415CC(v54, type metadata accessor for EscrowInformation);
              id v64 = "ignoring double enrollment record %{public}s";
LABEL_25:
              _os_log_impl((void *)&_mh_execute_header, v50, v51, v64, v52, 0xCu);
              swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v53, -1LL, -1LL);
              swift_slowDealloc(v52, -1LL, -1LL);
LABEL_28:

              return;
            }

            uint64_t v66 = (uint64_t)v13;
          }

          else
          {
            v65._object = (void *)0x80000001001FA120LL;
            v65._uint64_t countAndFlagsBits = 0xD000000000000016LL;
            if (String.hasPrefix(_:)(v65))
            {
              sub_1001B2D30(a1, 2LL);
              return;
            }

            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v67 = type metadata accessor for Logger(0LL);
            sub_100006BAC(v67, (uint64_t)qword_1002567D0);
            uint64_t v68 = sub_10004164C(a1, (uint64_t)v9, type metadata accessor for EscrowInformation);
            uint64_t v50 = (os_log_s *)Logger.logObject.getter(v68);
            os_log_type_t v51 = static os_log_type_t.info.getter(v50);
            if (os_log_type_enabled(v50, v51))
            {
              BOOL v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v69 = (uint64_t)v9;
              uint64_t v53 = swift_slowAlloc(32LL, -1LL);
              uint64_t v90 = v53;
              *(_DWORD *)BOOL v52 = 136446210;
              uint64_t v70 = *(void *)(v69 + 8);
              id v71 = *(_TtC18TrustedPeersHelper6Client **)(v69 + 16);
              swift_bridgeObjectRetain(v71);
              uint64_t v88 = sub_10017C4C4(v70, (unint64_t)v71, &v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v52 + 4, v52 + 12);
              swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
              sub_1000415CC(v69, type metadata accessor for EscrowInformation);
              id v64 = "ignoring non-iCDP record: %{public}s";
              goto LABEL_25;
            }

            uint64_t v66 = (uint64_t)v9;
          }

          sub_1000415CC(v66, type metadata accessor for EscrowInformation);
          goto LABEL_28;
        }
      }

      else
      {
        p_vtable = (void **)(&OBJC_CLASS___VoucherMO + 24);
        if (*(void *)(v24 + 16)) {
          goto LABEL_5;
        }
      }

      swift_release(v25);
      goto LABEL_13;
    }
  }

uint64_t sub_10011A65C(id *a1, uint64_t a2)
{
  id v3 = [*a1 label];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    if (v5 == v8 && v7 == v9) {
      char v11 = 1;
    }
    else {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
    }
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    char v11 = 0;
  }

  return v11 & 1;
}

uint64_t sub_10011A700(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  if ((a3 & 1) == 0) {
    return a4(a1, a2, 0LL);
  }
  swift_errorRetain(a1);
  a4(0LL, 0LL, a1);
  return sub_100171A54(a1, a2, 1);
}

void sub_10011A778(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_1002567D0);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "beginning a removeEscrowCache", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v11, 41LL, 7LL);
  uint64_t v12 = v3;
  uint64_t v13 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v12, 0xD000000000000019LL, 0x80000001001FA100LL);

  uint64_t v14 = swift_allocObject(&unk_10023A3C8, 40LL, 7LL);
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = a2;
  uint64_t v15 = *(void **)&v12[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v16 = swift_allocObject(&unk_10023A3F0, 40LL, 7LL);
  *(void *)(v16 + 16) = v12;
  *(void *)(v16 + 24) = sub_100174EF8;
  *(void *)(v16 + 32) = v14;
  uint64_t v17 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A418, 32LL, 7LL);
  *(void *)v17->endpoint = sub_100174F40;
  *(void *)v17->containerMap = v16;
  v57[4] = sub_100176BD4;
  id v58 = v17;
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 1107296256LL;
  v57[2] = sub_1000DC9F8;
  v57[3] = &unk_10023A430;
  id v18 = _Block_copy(v57);
  uint64_t v19 = v58;
  uint64_t v20 = v12;
  swift_retain(v13);
  swift_retain(a2);
  swift_retain(v14);
  swift_retain(v17);
  swift_release(v19, v21, v22, v23, v24, v25, v26, v27);
  [v15 performBlockAndWait:v18];
  swift_release((_TtC18TrustedPeersHelper6Client *)v14, v28, v29, v30, v31, v32, v33, v34);
  swift_release(v13, v35, v36, v37, v38, v39, v40, v41);
  _Block_release(v18);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v17, "", 108LL, 4844LL, 33LL, 1LL);
  swift_release((_TtC18TrustedPeersHelper6Client *)v16, v43, v44, v45, v46, v47, v48, v49);
  swift_release(v17, v50, v51, v52, v53, v54, v55, v56);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
}

id sub_10011AA04()
{
  uint64_t v1 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v2 =  [*(id *)(v0 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO) fullyViableEscrowRecords];
  if (v2)
  {
    id v3 = v2;
    [*(id *)(v0 + v1) removeFullyViableEscrowRecords:v2];
  }

  id v4 = [*(id *)(v0 + v1) partiallyViableEscrowRecords];
  if (v4)
  {
    uint64_t v5 = v4;
    [*(id *)(v0 + v1) removePartiallyViableEscrowRecords:v4];
  }

  id v6 = [*(id *)(v0 + v1) legacyEscrowRecords];
  if (v6)
  {
    uint64_t v7 = v6;
    [*(id *)(v0 + v1) removeLegacyEscrowRecords:v6];
  }

  return [*(id *)(v0 + v1) setEscrowFetchDate:0];
}

uint64_t sub_10011AAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_100006BAC(v15, (uint64_t)qword_1002567D0);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v19 = 134217984;
    uint64_t v24 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "beginning a fetchViableBottles from source %ld", v19, 0xCu);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  if (a1 == 2) {
    return sub_10011CA60(a2, a3, a4, a5, a6, a7);
  }
  if (a1 == 1) {
    return sub_10011B2C0(0, a6, a7);
  }
  SEL v21 = (void *)swift_allocObject(&unk_10023A3A0, 72LL, 7LL);
  void v21[2] = a6;
  v21[3] = a7;
  v21[4] = v8;
  v21[5] = a2;
  v21[6] = a3;
  v21[7] = a4;
  v21[8] = a5;
  swift_bridgeObjectRetain(a5);
  swift_retain(a7);
  id v22 = v8;
  swift_bridgeObjectRetain(a3);
  sub_10011B2C0(1, (uint64_t)sub_100174EC0, (uint64_t)v21);
  return swift_release(v21);
}

uint64_t sub_10011ACCC( uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a3 & 1) == 0 && (*(void *)(a1 + 16) || *(void *)(a2 + 16)))
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100006BAC(v16, (uint64_t)qword_1002567D0);
    os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.info.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "fetchViableBottlesFromCache returned bottles", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    return a4(a1, a2, 0LL);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_100006BAC(v22, (uint64_t)qword_1002567D0);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v26 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "fetchViableBottlesFromCache did not return any bottles, checking cuttlefish",  v26,  2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    return sub_10011CA60(a7, a8, a9, a10, (uint64_t)a4, a5);
  }

void sub_10011AEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_1002567D0);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v12 = 134217984;
    uint64_t v23 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4, v12 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "starting fetchEscrowRecordsWithSemaphore from source %ld",  v12,  0xCu);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  if (a1 == 2)
  {
    uint64_t v13 = swift_allocObject(&unk_10023A350, 40LL, 7LL);
    *(void *)(v13 + 16) = a2;
    *(void *)(v13 + 24) = a3;
    *(void *)(v13 + 32) = v4;
    swift_retain(a3);
    id v14 = v4;
    sub_10011CA60(0LL, 0LL, 0LL, 0LL, (uint64_t)sub_100174E4C, v13);
  }

  else
  {
    if (a1 == 1)
    {
      sub_10011B7F4(0, a2, a3);
      return;
    }

    uint64_t v13 = swift_allocObject(&unk_10023A328, 40LL, 7LL);
    *(void *)(v13 + 16) = a2;
    *(void *)(v13 + 24) = a3;
    *(void *)(v13 + 32) = v4;
    swift_retain(a3);
    id v22 = v4;
    sub_10011B7F4(1, (uint64_t)sub_100174E38, v13);
  }

  swift_release((_TtC18TrustedPeersHelper6Client *)v13, v15, v16, v17, v18, v19, v20, v21);
}

void sub_10011B0AC(uint64_t a1, char a2, void (*a3)(uint64_t, void), uint64_t a4, void *a5)
{
  if ((a2 & 1) != 0 || !*(void *)(a1 + 16))
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_100006BAC(v14, (uint64_t)qword_1002567D0);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "fetchEscrowRecordsFromCache did not return any records, checking cuttlefish",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = swift_allocObject(&unk_10023A378, 40LL, 7LL);
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = a4;
    *(void *)(v19 + 32) = a5;
    swift_retain(a4);
    id v20 = a5;
    sub_10011CA60(0LL, 0LL, 0LL, 0LL, (uint64_t)sub_100176C08, v19);
    swift_release((_TtC18TrustedPeersHelper6Client *)v19, v21, v22, v23, v24, v25, v26, v27);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_100006BAC(v9, (uint64_t)qword_1002567D0);
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "fetchEscrowRecordsFromCache returned records", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    a3(a1, 0LL);
  }

uint64_t sub_10011B2C0(char a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_1002567D0);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v12 = 67109120;
    LODWORD(v21[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, (char *)v21 + 4, v12 + 4, v12 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "starting fetchViableBottlesFromCacheWithSemaphore and will check timeout: %{BOOL}d",  v12,  8u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = *(void **)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v14 = swift_allocObject(&unk_10023A2B0, 48LL, 7LL);
  *(void *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = a1 & 1;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  uint64_t v15 = swift_allocObject(&unk_10023A2D8, 32LL, 7LL);
  *(void *)(v15 + 16) = sub_100174DD0;
  *(void *)(v15 + 24) = v14;
  v21[4] = sub_100176BD4;
  uint64_t v22 = v15;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  void v21[2] = sub_1000DC9F8;
  v21[3] = &unk_10023A2F0;
  uint64_t v16 = _Block_copy(v21);
  uint64_t v17 = v22;
  os_log_type_t v18 = v4;
  swift_retain(a3);
  swift_retain(v15);
  swift_release(v17);
  [v13 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v15, "", 108LL, 4926LL, 33LL, 1LL);
  swift_release(v14);
  uint64_t result = swift_release(v15);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10011B4F4(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t, void), uint64_t a4)
{
  uint64_t v24 = a1;
  uint64_t v8 = qword_100250EB8;
  swift_retain(a4);
  if (v8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v13 = 67109120;
    LODWORD(v25) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 4, v13 + 4, v13 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "starting fetchFromEscrowCacheWithSemaphore and will check timeout: %{BOOL}d",  v13,  8u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  __chkstk_darwin(v14, v15);
  void v21[2] = sub_100174DF0;
  v21[3] = &v23;
  v21[4] = a1;
  char v22 = a2 & 1;
  uint64_t v16 = sub_100007578((uint64_t *)&unk_100257030);
  NSManagedObjectContext.performAndWait<A>(_:)(&v25, sub_100174DF8, v21, v16);
  uint64_t v17 = v25;
  uint64_t v18 = v26;
  char v19 = v27;
  a3(v25, v26, v27);
  sub_100171A54(v17, v18, v19);
  return swift_release(a4);
}

BOOL sub_10011B6C8(uint64_t *a1)
{
  id v2 = sub_1001B5FD0();
  id v3 = [v2 viableBottles];
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String);

  *a1 = v4;
  id v5 = [v2 partialBottles];
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String);

  a1[1] = v6;
  id v7 = [v2 viableBottles];
  uint64_t v8 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for String);

  uint64_t v9 = *(void *)v8->endpoint;
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  if (v9)
  {

    return 0LL;
  }

  else
  {
    id v18 = [v2 partialBottles];
    char v19 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)( v18,  &type metadata for String);

    uint64_t v20 = *(void *)v19->endpoint;
    swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
    return v20 == 0;
  }

void sub_10011B7F4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_1002567D0);
  SEL v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    int64_t v12 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)int64_t v12 = 67109120;
    LODWORD(v41[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, (char *)v41 + 4, v12 + 4, v12 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "starting fetchEscrowRecordsFromCacheWithSemaphore and will check timeout: %{BOOL}d",  v12,  8u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  id v13 = *(void **)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v14 = swift_allocObject(&unk_10023A238, 48LL, 7LL);
  *(void *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = a1 & 1;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  BOOL v15 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A260, 32LL, 7LL);
  *(void *)v15->endpoint = sub_100174D30;
  *(void *)v15->containerMap = v14;
  v41[4] = sub_100176BD4;
  BOOL v42 = v15;
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 1107296256LL;
  v41[2] = sub_1000DC9F8;
  v41[3] = &unk_10023A278;
  BOOL v16 = _Block_copy(v41);
  uint64_t v17 = v42;
  id v18 = v4;
  swift_retain(a3);
  swift_retain(v15);
  swift_release(v17, v19, v20, v21, v22, v23, v24, v25);
  [v13 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v15, "", 108LL, 4939LL, 33LL, 1LL);
  swift_release((_TtC18TrustedPeersHelper6Client *)v14, v27, v28, v29, v30, v31, v32, v33);
  swift_release(v15, v34, v35, v36, v37, v38, v39, v40);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
}

void sub_10011BA28( uint64_t a1, char a2, void (*a3)(uint64_t, void), _TtC18TrustedPeersHelper6Client *a4)
{
  uint64_t v29 = a1;
  uint64_t v8 = qword_100250EB8;
  swift_retain(a4);
  if (v8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v13 = 67109120;
    LODWORD(v30) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v13 + 4, v13 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "starting fetchFromEscrowCacheWithSemaphore and will check timeout: %{BOOL}d",  v13,  8u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  __chkstk_darwin(v14, v15);
  v26[2] = sub_100174D50;
  v26[3] = &v28;
  void v26[4] = a1;
  char v27 = a2 & 1;
  uint64_t v16 = sub_100007578(&qword_100257048);
  NSManagedObjectContext.performAndWait<A>(_:)(&v30, sub_100174D58, v26, v16);
  uint64_t v17 = v30;
  char v18 = v31;
  a3(v30, v31);
  sub_100174D94(v17, v18);
  swift_release(a4, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_10011BBF4(_TtC18TrustedPeersHelper6Client **a1)
{
  uint64_t v3 = v2;
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(v2);
    id v23 = a1;
    if (v4) {
      goto LABEL_3;
    }
LABEL_20:
    id v7 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
LABEL_21:
    swift_bridgeObjectRelease_n(v3, 2LL);
    *id v23 = v7;
    return *(void *)v7->endpoint == 0LL;
  }

  if (v2 < 0) {
    uint64_t v22 = v2;
  }
  else {
    uint64_t v22 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v2);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v22);
  uint64_t v4 = result;
  id v23 = a1;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v6 = 0LL;
    id v7 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    do
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v9 = v8;
      id v10 = [v8 data];
      if (v10)
      {
        os_log_type_t v11 = v10;
        uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v14 = v13;

        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
          id v7 = sub_100149B04(0LL, *(void *)v7->endpoint + 1LL, 1, v7, v15, v16, v17, v18);
        }
        unint64_t v20 = *(void *)v7->endpoint;
        unint64_t v19 = *(void *)v7->containerMap;
        if (v20 >= v19 >> 1) {
          id v7 = sub_100149B04((_TtC18TrustedPeersHelper6Client *)(v19 > 1), v20 + 1, 1, v7, v15, v16, v17, v18);
        }
        *(void *)v7->endpoint = v20 + 1;
        id v21 = (char *)v7 + 16 * v20;
        *((void *)v21 + 4) = v12;
        *((void *)v21 + 5) = v14;
      }

      else
      {
      }

      ++v6;
    }

    while (v4 != v6);
    goto LABEL_21;
  }

  __break(1u);
  return result;
}

_TtC18TrustedPeersHelper6Client *sub_10011BDA4( uint64_t (*a1)(_TtC18TrustedPeersHelper6Client **), uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v76 = a3;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  os_log_type_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v15 = (char *)&v75 - v14;
  __chkstk_darwin(v13, v16);
  id v75 = (char *)&v75 - v17;
  uint64_t v18 = sub_100007578(&qword_100256D28);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v23);
  id v25 = (char *)&v75 - v24;
  if ((a1(v77) & 1) != 0)
  {
    id v26 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v76
                                                                + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "escrowFetchDate"));
    if (v26)
    {
      char v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v25, v15, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v25, 0LL, 1LL, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v25, 1LL, v6) != 1)
      {
        sub_100041590((uint64_t)v25, &qword_100256D28);
        goto LABEL_5;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v25, 1LL, 1LL, v6);
    }

    sub_100041590((uint64_t)v25, &qword_100256D28);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    uint64_t v48 = sub_100006BAC(v47, (uint64_t)qword_1002567D0);
    id v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.info.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      id v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v51 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "no cached records were found, no saved escrowFetchDate either, returning no cache error",  v51,  2u);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    unint64_t v52 = sub_100043F74();
    uint64_t v41 = swift_allocError(&type metadata for ContainerError, v52, 0LL, 0LL);
    __int128 v60 = xmmword_1001E68E0;
    goto LABEL_32;
  }

_TtC18TrustedPeersHelper6Client *sub_10011C408( uint64_t (*a1)(_TtC18TrustedPeersHelper6Client **), uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v70 = a3;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  os_log_type_t v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v15 = (char *)&v68 - v14;
  __chkstk_darwin(v13, v16);
  int64_t v69 = (char *)&v68 - v17;
  uint64_t v18 = sub_100007578(&qword_100256D28);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v23);
  id v25 = (char *)&v68 - v24;
  if ((a1(&v71) & 1) != 0)
  {
    id v26 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v70
                                                                + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "escrowFetchDate"));
    if (v26)
    {
      char v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v25, v15, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v25, 0LL, 1LL, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v25, 1LL, v6) != 1)
      {
        sub_100041590((uint64_t)v25, &qword_100256D28);
        goto LABEL_5;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v25, 1LL, 1LL, v6);
    }

    sub_100041590((uint64_t)v25, &qword_100256D28);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    uint64_t v48 = sub_100006BAC(v47, (uint64_t)qword_1002567D0);
    id v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.info.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      id v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v51 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "no cached records were found, no saved escrowFetchDate either, returning no cache error",  v51,  2u);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    unint64_t v52 = sub_100043F74();
    uint64_t v41 = swift_allocError(&type metadata for ContainerError, v52, 0LL, 0LL);
    __int128 v60 = xmmword_1001E68E0;
    goto LABEL_32;
  }

uint64_t sub_10011CA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v41 = a5;
  ViableBottlesuint64_t Request = type metadata accessor for FetchViableBottlesRequest(0LL);
  __chkstk_darwin(ViableBottlesRequest, v14);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_100006BAC(v17, (uint64_t)qword_1002567D0);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    id v40 = v7;
    uint64_t v22 = a6;
    uint64_t v23 = a3;
    uint64_t v24 = a1;
    uint64_t v25 = a4;
    uint64_t v26 = a2;
    char v27 = v21;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "starting fetchViableBottlesWithSemaphoreFromCuttlefish",  v21,  2u);
    id v28 = v27;
    a2 = v26;
    a4 = v25;
    a1 = v24;
    a3 = v23;
    a6 = v22;
    uint64_t v7 = v40;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  __chkstk_darwin(v29, v30);
  *(&v39 - 4) = a3;
  *(&v39 - 3) = a4;
  *(&v39 - 2) = a1;
  *(&v39 - 1) = a2;
  uint64_t v31 = sub_1000077B8( (unint64_t *)&unk_100257020,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
  static Message.with(_:)(sub_100174CCC, &v39 - 6, ViableBottlesRequest, v31);
  uint64_t v32 = *(void *)&v7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
  uint64_t v33 = *(void *)&v7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
  sub_1000084C4(&v7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v32);
  char v34 = (void *)swift_allocObject(&unk_10023A210, 40LL, 7LL);
  v34[2] = v41;
  v34[3] = a6;
  v34[4] = v7;
  uint64_t v35 = *(void *)(v33 + 16);
  uint64_t v36 = *(void (**)(char *, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v35 + 64);
  swift_retain(a6);
  uint64_t v37 = v7;
  v36(v16, sub_100174CEC, v34, v32, v35);
  swift_release(v34);
  return sub_1000415CC((uint64_t)v16, type metadata accessor for FetchViableBottlesRequest);
}

uint64_t sub_10011CCC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a2;
  uint64_t v9 = type metadata accessor for Metrics(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (OctagonPlatformSupportsSOS(v12) && (uint64_t v15 = SOSCompatibilityModeEnabled(), !(_DWORD)v15))
  {
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v28 = a3;
    uint64_t v17 = a4;
    uint64_t v18 = a5;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_100006BAC(v19, (uint64_t)qword_1002567D0);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Requesting Cuttlefish to filter records by Octagon Only",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    uint64_t v24 = 1LL;
    a5 = v18;
    a4 = v17;
    a3 = v28;
  }

  *(void *)a1 = v24;
  *(_BYTE *)(a1 + 8) = 1;
  __chkstk_darwin(v15, v16);
  *(&v28 - 4) = v29;
  *(&v28 - 3) = a3;
  *(&v28 - 2) = a4;
  *(&v28 - 1) = a5;
  uint64_t v25 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  static Message.with(_:)(sub_100174D10, &v28 - 6, v9, v25);
  uint64_t v26 = a1 + *(int *)(type metadata accessor for FetchViableBottlesRequest(0LL) + 24);
  sub_100041590(v26, &qword_100257000);
  sub_100041608((uint64_t)v14, v26, type metadata accessor for Metrics);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v26, 0LL, 1LL, v9);
}

uint64_t sub_10011CF04(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (a3) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = 0xE000000000000000LL;
  }
  uint64_t v10 = a1[3];
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v10);
  a1[2] = v8;
  a1[3] = v9;
  if (a5)
  {
    unint64_t v11 = a5;
  }

  else
  {
    a4 = 0LL;
    unint64_t v11 = 0xE000000000000000LL;
  }

  uint64_t v12 = a1[1];
  swift_bridgeObjectRetain(a5);
  uint64_t result = swift_bridgeObjectRelease(v12);
  *a1 = a4;
  a1[1] = v11;
  return result;
}

uint64_t sub_10011CF94( uint64_t a1, void (*a2)(uint64_t, _TtC18TrustedPeersHelper6Client *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t ViableBottlesResponse = type metadata accessor for FetchViableBottlesResponse(0LL);
  __chkstk_darwin(ViableBottlesResponse, v9);
  unint64_t v11 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100007578(&qword_100251E28);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (void *)((char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v15, &qword_100251E28);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    uint64_t v16 = *v15;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v17, (uint64_t)qword_1002567D0);
    swift_errorRetain(v16);
    uint64_t v18 = swift_errorRetain(v16);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v23 = static os_log_type_t.error.getter(v19, v20, v21, v22);
    if (os_log_type_enabled(v19, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = v16;
      uint64_t v56 = v25;
      *(_DWORD *)uint64_t v24 = 136446210;
      v51[1] = a3;
      uint64_t v52 = 0x203A726F727265LL;
      uint64_t v53 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
      swift_errorRetain(v16);
      swift_errorRetain(v16);
      uint64_t v26 = sub_100007578(&qword_100251D70);
      v27._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v55, v26);
      object = (_TtC18TrustedPeersHelper6Client *)v27._object;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(object, v29, v30, v31, v32, v33, v34, v35);
      swift_errorRelease();
      uint64_t v36 = v53;
      uint64_t v52 = sub_10017C4C4(v52, (unint64_t)v53, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v23, "fetchViableBottles failed with %{public}s", v24, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v16);
    a2(v16, 0LL, 1LL);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    uint64_t v44 = sub_100041608((uint64_t)v15, (uint64_t)v11, type metadata accessor for FetchViableBottlesResponse);
    __chkstk_darwin(v44, v45);
    v51[-2] = a4;
    v51[-1] = v11;
    uint64_t v46 = sub_100007578((uint64_t *)&unk_100257030);
    NSManagedObjectContext.performAndWait<A>(_:)(&v52, sub_100174CF8, &v51[-4], v46);
    uint64_t v47 = v52;
    uint64_t v48 = (uint64_t)v53;
    char v49 = v54;
    a2(v52, v53, v54);
    sub_100171A54(v47, v48, v49);
    return sub_1000415CC((uint64_t)v11, type metadata accessor for FetchViableBottlesResponse);
  }

void sub_10011D32C(uint64_t a1@<X0>, uint64_t a2@<X1>, _TtC18TrustedPeersHelper6Client **a3@<X8>)
{
  id v173 = a3;
  uint64_t v5 = sub_100007578(&qword_100251F38);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v177 = (uint64_t)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  BOOL v176 = (_TtC18TrustedPeersHelper6Client *)((char *)&v167 - v10);
  uint64_t v11 = type metadata accessor for Bottle(0LL);
  id v182 = *(uint8_t **)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v167 - v17;
  uint64_t v181 = type metadata accessor for EscrowPair(0LL);
  uint64_t v171 = *(void *)(v181 - 8);
  uint64_t v20 = __chkstk_darwin(v181, v19);
  uint64_t v180 = (uint64_t)&v167 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v22);
  uint64_t v179 = (uint64_t)&v167 - v23;
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100007578(&qword_100257040);
  __chkstk_darwin(v29, v30);
  id v32 = (char *)&v167 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10011AA04();
  uint64_t v172 = (_TtC18TrustedPeersHelper6Client **)a2;
  sub_10004164C(a2, (uint64_t)v32, type metadata accessor for FetchViableBottlesResponse);
  uint64_t ViableBottlesResponse = type metadata accessor for FetchViableBottlesResponse(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(ViableBottlesResponse - 8) + 56LL))( v32,  0LL,  1LL,  ViableBottlesResponse);
  sub_100118248((uint64_t)v32);
  sub_100041590((uint64_t)v32, &qword_100257040);
  uint64_t v34 = a1;
  id v35 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  Date.init()(v35);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  [v35 setEscrowFetchDate:isa];

  SEL v37 = *(void **)(v34 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  uint64_t v185 = 0LL;
  unsigned int v38 = [v37 save:&v185];
  uint64_t v39 = v185;
  if (v38)
  {
    uint64_t v40 = qword_100250EB8;
    id v41 = (id)v185;
    if (v40 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    unsigned int v170 = v38;
    uint64_t v42 = type metadata accessor for Logger(0LL);
    uint64_t v169 = sub_100006BAC(v42, (uint64_t)qword_1002567D0);
    BOOL v43 = (os_log_s *)Logger.logObject.getter(v169);
    os_log_type_t v44 = static os_log_type_t.info.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "fetchViableBottles saved bottles and records", v45, 2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    uint64_t v46 = *v172;
    int64_t v47 = *(void *)(*v172)->endpoint;
    uint64_t v48 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    uint64_t v178 = v11;
    if (v47)
    {
      v184[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v46);
      sub_10014E670(0, v47, 0);
      unint64_t v49 = (*(unsigned __int8 *)(v171 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80);
      unint64_t v168 = v46;
      uint64_t v50 = (uint64_t)&v46->_TtCs12_SwiftObject_opaque[v49];
      *(void *)&__int128 v175 = *(void *)(v171 + 72);
      __int128 v174 = xmmword_1001DE6F0;
      do
      {
        uint64_t v51 = v179;
        sub_10004164C(v50, v179, type metadata accessor for EscrowPair);
        swift_beginAccess(v52, &v185, 0LL, 0LL);
        uint64_t v53 = v52;
        uint64_t v54 = (uint64_t)v176;
        sub_10000FC68(v53, (uint64_t)v176, &qword_100251F38);
        if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v182 + 6))(v54, 1LL, v11) == 1)
        {
          __int128 v55 = v174;
          *(_OWORD *)uint64_t v18 = v174;
          *((_OWORD *)v18 + 1) = v55;
          *((_OWORD *)v18 + 2) = v55;
          *((_OWORD *)v18 + 3) = v55;
          *((void *)v18 + 8) = 0LL;
          *((void *)v18 + 9) = 0xE000000000000000LL;
          *((void *)v18 + 10) = 0LL;
          *((void *)v18 + 11) = 0xE000000000000000LL;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          sub_100041590(v54, &qword_100251F38);
        }

        else
        {
          sub_100041608(v54, (uint64_t)v18, type metadata accessor for Bottle);
        }

        uint64_t v57 = *((void *)v18 + 10);
        uint64_t v56 = *((void *)v18 + 11);
        swift_bridgeObjectRetain(v56);
        sub_1000415CC((uint64_t)v18, type metadata accessor for Bottle);
        sub_1000415CC(v179, type metadata accessor for EscrowPair);
        uint64_t v48 = (_TtC18TrustedPeersHelper6Client *)v184[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v184[0]) & 1) == 0)
        {
          sub_10014E670(0, *(void *)v48->endpoint + 1LL, 1);
          uint64_t v48 = (_TtC18TrustedPeersHelper6Client *)v184[0];
        }

        unint64_t v66 = *(void *)v48->endpoint;
        unint64_t v65 = *(void *)v48->containerMap;
        if (v66 >= v65 >> 1)
        {
          sub_10014E670(v65 > 1, v66 + 1, 1);
          uint64_t v48 = (_TtC18TrustedPeersHelper6Client *)v184[0];
        }

        *(void *)v48->endpoint = v66 + 1;
        SEL v67 = &v48->_TtCs12_SwiftObject_opaque[16 * v66];
        *((void *)v67 + 4) = v57;
        *((void *)v67 + 5) = v56;
        v50 += v175;
        --v47;
        uint64_t v11 = v178;
      }

      while (v47);
      swift_bridgeObjectRelease(v168, v58, v59, v60, v61, v62, v63, v64);
    }

    unint64_t v99 = v172[1];
    int64_t v100 = *(void *)v99->endpoint;
    uint64_t v101 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    BOOL v176 = v48;
    if (v100)
    {
      BOOL v187 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v99);
      sub_10014E670(0, v100, 0);
      uint64_t v48 = v176;
      uint64_t v102 = *(unsigned __int8 *)(v171 + 80);
      *(void *)&__int128 v174 = v99;
      uint64_t v103 = (uint64_t)&v99->_TtCs12_SwiftObject_opaque[(v102 + 32) & ~v102];
      uint64_t v179 = *(void *)(v171 + 72);
      __int128 v175 = xmmword_1001DE6F0;
      do
      {
        uint64_t v104 = v180;
        sub_10004164C(v103, v180, type metadata accessor for EscrowPair);
        swift_beginAccess(v105, v184, 0LL, 0LL);
        uint64_t v106 = v105;
        uint64_t v107 = v177;
        sub_10000FC68(v106, v177, &qword_100251F38);
        if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v182 + 6))(v107, 1LL, v11) == 1)
        {
          __int128 v108 = v175;
          *(_OWORD *)uint64_t v15 = v175;
          *((_OWORD *)v15 + 1) = v108;
          *((_OWORD *)v15 + 2) = v108;
          *((_OWORD *)v15 + 3) = v108;
          *((void *)v15 + 8) = 0LL;
          *((void *)v15 + 9) = 0xE000000000000000LL;
          *((void *)v15 + 10) = 0LL;
          *((void *)v15 + 11) = 0xE000000000000000LL;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          sub_100041590(v107, &qword_100251F38);
        }

        else
        {
          sub_100041608(v107, (uint64_t)v15, type metadata accessor for Bottle);
        }

        uint64_t v109 = *((void *)v15 + 10);
        uint64_t v110 = *((void *)v15 + 11);
        swift_bridgeObjectRetain(v110);
        sub_1000415CC((uint64_t)v15, type metadata accessor for Bottle);
        sub_1000415CC(v180, type metadata accessor for EscrowPair);
        uint64_t v101 = v187;
        if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
        {
          sub_10014E670(0, *(void *)v101->endpoint + 1LL, 1);
          uint64_t v48 = v176;
          uint64_t v101 = v187;
        }

        unint64_t v119 = *(void *)v101->endpoint;
        unint64_t v118 = *(void *)v101->containerMap;
        if (v119 >= v118 >> 1)
        {
          sub_10014E670(v118 > 1, v119 + 1, 1);
          uint64_t v48 = v176;
          uint64_t v101 = v187;
        }

        *(void *)v101->endpoint = v119 + 1;
        BOOL v120 = (char *)v101 + 16 * v119;
        *((void *)v120 + 4) = v109;
        *((void *)v120 + 5) = v110;
        uint64_t v11 = v178;
        v103 += v179;
        --v100;
      }

      while (v100);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v174, v111, v112, v113, v114, v115, v116, v117);
    }

    uint64_t v121 = swift_bridgeObjectRetain_n(v48, 2LL);
    SEL v122 = v48;
    id v123 = (os_log_s *)Logger.logObject.getter(v121);
    os_log_type_t v124 = static os_log_type_t.info.getter(v123);
    if (os_log_type_enabled(v123, v124))
    {
      id v125 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v126 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
      BOOL v187 = v126;
      *(_DWORD *)id v125 = 136446210;
      id v182 = v125 + 4;
      uint64_t v127 = swift_bridgeObjectRetain(v122);
      uint64_t v128 = Array.description.getter(v127, &type metadata for String);
      unint64_t v130 = (_TtC18TrustedPeersHelper6Client *)v129;
      swift_bridgeObjectRelease(v122, v129, v131, v132, v133, v134, v135, v136);
      uint64_t v183 = sub_10017C4C4(v128, (unint64_t)v130, (uint64_t *)&v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v182, v125 + 12);
      swift_bridgeObjectRelease_n(v122, 2LL);
      swift_bridgeObjectRelease(v130, v137, v138, v139, v140, v141, v142, v143);
      _os_log_impl( (void *)&_mh_execute_header,  v123,  v124,  "fetchViableBottles returned viable bottles: %{public}s",  v125,  0xCu);
      swift_arrayDestroy(v126, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1LL, -1LL);
      swift_slowDealloc(v125, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v122, 2LL);
    }

    uint64_t v144 = swift_bridgeObjectRetain_n(v101, 2LL);
    uint64_t v145 = (os_log_s *)Logger.logObject.getter(v144);
    os_log_type_t v146 = static os_log_type_t.info.getter(v145);
    if (os_log_type_enabled(v145, v146))
    {
      SEL v147 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v148 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
      BOOL v187 = v148;
      *(_DWORD *)SEL v147 = 136446210;
      uint64_t v149 = swift_bridgeObjectRetain(v101);
      uint64_t v150 = Array.description.getter(v149, &type metadata for String);
      BOOL v152 = (_TtC18TrustedPeersHelper6Client *)v151;
      swift_bridgeObjectRelease(v101, v151, v153, v154, v155, v156, v157, v158);
      uint64_t v183 = sub_10017C4C4(v150, (unint64_t)v152, (uint64_t *)&v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v147 + 4, v147 + 12);
      swift_bridgeObjectRelease_n(v101, 2LL);
      swift_bridgeObjectRelease(v152, v159, v160, v161, v162, v163, v164, v165);
      _os_log_impl( (void *)&_mh_execute_header,  v145,  v146,  "fetchViableBottles returned partial bottles: %{public}s",  v147,  0xCu);
      swift_arrayDestroy(v148, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v148, -1LL, -1LL);
      swift_slowDealloc(v147, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v101, 2LL);
    }

    LOBYTE(v38) = v170;
    int64_t v69 = v176;
  }

  else
  {
    id v68 = (id)v185;
    int64_t v69 = (_TtC18TrustedPeersHelper6Client *)_convertNSErrorToError(_:)(v39);

    swift_willThrow(v70);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v71 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v71, (uint64_t)qword_1002567D0);
    swift_errorRetain(v69);
    uint64_t v72 = swift_errorRetain(v69);
    BOOL v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v77 = static os_log_type_t.error.getter(v73, v74, v75, v76);
    if (os_log_type_enabled(v73, v77))
    {
      BOOL v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v79 = swift_slowAlloc(32LL, -1LL);
      unsigned int v170 = 0;
      uint64_t v80 = v79;
      v184[0] = v79;
      *(_DWORD *)BOOL v78 = 136446210;
      uint64_t v185 = 0x203A726F727265LL;
      BOOL v186 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
      BOOL v187 = v69;
      swift_errorRetain(v69);
      swift_errorRetain(v69);
      uint64_t v81 = sub_100007578(&qword_100251D70);
      v82._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v187, v81);
      object = (_TtC18TrustedPeersHelper6Client *)v82._object;
      String.append(_:)(v82);
      swift_bridgeObjectRelease(object, v84, v85, v86, v87, v88, v89, v90);
      swift_errorRelease();
      unint64_t v91 = v186;
      uint64_t v185 = sub_10017C4C4(v185, (unint64_t)v186, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v73,  v77,  "fetchViableBottles unable to save bottles and records with %{public}s",  v78,  0xCu);
      swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
      LOBYTE(v38) = v170;
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v78, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v101 = 0LL;
  }

  uint64_t v166 = v173;
  *id v173 = v69;
  v166[1] = v101;
  *((_BYTE *)v166 + 16) = v38 ^ 1;
}