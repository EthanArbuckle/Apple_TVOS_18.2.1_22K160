uint64_t sub_10011DFAC( uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, void), uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  void v11[4];
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  v11[2] = a1;
  v11[3] = a2;
  v12 = a3 & 1;
  v13 = a6;
  v7 = sub_100007578(&qword_100257048);
  NSManagedObjectContext.performAndWait<A>(_:)(&v14, sub_100174E5C, v11, v7);
  v8 = v14;
  v9 = v15;
  a4(v14, v15);
  return sub_100174D94(v8, v9);
}

void sub_10011E04C( _TtC18TrustedPeersHelper6Client *a1@<X0>, _TtC18TrustedPeersHelper6Client *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = a3;
  v5 = a1;
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a1);
LABEL_21:
    *(void *)a4 = v5;
    *(_BYTE *)(a4 + 8) = v4 & 1;
    return;
  }

  swift_bridgeObjectRetain(a1);
  v41 = a2;
  swift_bridgeObjectRetain(a2);
  sub_1001B6168();
  uint64_t v9 = v8;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v40 = v8;
    }
    else {
      uint64_t v40 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v40);
  }

  else
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v8);
  }

  char v44 = v4;
  v42 = v5;
  uint64_t v43 = a4;
  if (!v10)
  {
    v5 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease_n(v9, 2LL);
    swift_bridgeObjectRelease(v41, v26, v27, v28, v29, v30, v31, v32);
    swift_bridgeObjectRelease(v42, v33, v34, v35, v36, v37, v38, v39);
    char v4 = v44;
    a4 = v43;
    goto LABEL_21;
  }

  if (v10 >= 1)
  {
    uint64_t v11 = 0LL;
    v5 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    do
    {
      if ((v9 & 0xC000000000000001LL) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
      }
      else {
        id v12 = *(id *)(v9 + 8 * v11 + 32);
      }
      v13 = v12;
      id v14 = objc_msgSend(v12, "data", v41, v42);
      if (v14)
      {
        v15 = v14;
        uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
        uint64_t v18 = v17;

        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
          v5 = sub_100149B04(0LL, *(void *)v5->endpoint + 1LL, 1, v5, v19, v20, v21, v22);
        }
        unint64_t v24 = *(void *)v5->endpoint;
        unint64_t v23 = *(void *)v5->containerMap;
        if (v24 >= v23 >> 1) {
          v5 = sub_100149B04((_TtC18TrustedPeersHelper6Client *)(v23 > 1), v24 + 1, 1, v5, v19, v20, v21, v22);
        }
        *(void *)v5->endpoint = v24 + 1;
        v25 = (char *)v5 + 16 * v24;
        *((void *)v25 + 4) = v16;
        *((void *)v25 + 5) = v18;
      }

      else
      {
      }

      ++v11;
    }

    while (v10 != v11);
    goto LABEL_20;
  }

  __break(1u);
}

uint64_t sub_10011E24C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void))
{
  if (a3) {
    os_log_type_t v9 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v9 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v10 = v9;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v11, (uint64_t)qword_1002567D0);
  swift_errorRetain(a3);
  uint64_t v12 = swift_errorRetain(a3);
  v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v10))
  {
    id v36 = a5;
    id v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v15;
    *(_DWORD *)id v14 = 136446210;
    uint64_t v16 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a3)
    {
      uint64_t v38 = 0x203A726F727265LL;
      unint64_t v39 = 0xE700000000000000LL;
      uint64_t v37 = a3;
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      uint64_t v17 = sub_100007578(&qword_100251D70);
      v18._countAndFlagsBits = String.init<A>(describing:)(&v37, v17);
      object = (_TtC18TrustedPeersHelper6Client *)v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object, v20, v21, v22, v23, v24, v25, v26);
      swift_errorRelease();
      uint64_t v27 = v38;
      uint64_t v16 = (_TtC18TrustedPeersHelper6Client *)v39;
    }

    else
    {
      uint64_t v27 = 0x73736563637573LL;
    }

    uint64_t v38 = sub_10017C4C4(v27, (unint64_t)v16, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v16, v28, v29, v30, v31, v32, v33, v34);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v10, "fetchCurrentPolicy complete: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    a5 = v36;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD00000000000003DLL, 0x80000001001F9780LL);
  return a5(a1, a2, a3);
}

void sub_10011E4C0( char *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, void (*a4)(id, id, id), _TtC18TrustedPeersHelper6Client *a5, char a6)
{
  uint64_t v10 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v11 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v11)
  {
    uint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    id v14 = v13;

    id v15 = [*(id *)&a1[v10] egoPeerPermanentInfo];
    if (v15)
    {
      id v23 = v15;
      uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      unint64_t v26 = v25;

      id v27 = [*(id *)&a1[v10] egoPeerPermanentInfoSig];
      if (v27)
      {
        SEL v28 = v27;
        uint64_t v274 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
        unint64_t v275 = v29;

        id v30 = [*(id *)&a1[v10] egoPeerStableInfo];
        if (v30)
        {
          id v31 = v30;
          char v273 = a6;
          uint64_t v271 = a2;
          uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
          unint64_t v34 = v33;

          id v35 = [*(id *)&a1[v10] egoPeerStableInfoSig];
          if (v35)
          {
            id v36 = v35;
            uint64_t v267 = v32;
            unint64_t v268 = v34;
            uint64_t v269 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
            unint64_t v270 = v37;

            id v38 = [objc_allocWithZone(TPECPublicKeyFactory) init];
            sub_1000084E8(v24, v26);
            sub_1000084E8(v274, v275);
            NSString v39 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v14, v40, v41, v42, v43, v44, v45, v46);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            Class v48 = Data._bridgeToObjectiveC()().super.isa;
            id v49 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v39 data:isa sig:v48 keyFactory:v38];
            v266 = v38;

            sub_10000852C(v274, v275);
            sub_10000852C(v24, v26);

            v265 = v49;
            if (v49)
            {
              id v50 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
              uint64_t v51 = v267;
              sub_1000084E8(v267, v268);
              sub_1000084E8(v269, v270);
              Class v52 = Data._bridgeToObjectiveC()().super.isa;
              Class v53 = Data._bridgeToObjectiveC()().super.isa;
              id v54 = [v50 initWithData:v52 sig:v53];
              sub_10000852C(v269, v270);
              sub_10000852C(v267, v268);

              if (v54)
              {
                v55 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
                id v281 = 0LL;
                id v56 = [v55 allPolicyVersionsWithError:&v281];
                id v57 = v281;
                if (v56)
                {
                  v58 = v56;
                  uint64_t v59 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
                  uint64_t v60 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
                  v61 = (_TtC18TrustedPeersHelper6Client *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v58,  v59,  v60);
                  id v62 = v57;

                  swift_bridgeObjectRetain(a3);
                  id v63 = v265;
                  id v64 = v54;
                  swift_retain(a5);
                  v65 = a1;
                  sub_10016DDEC((uint64_t)v61, v65, v65, v271, a3, v63, v64, a4, (uint64_t)a5);

                  swift_bridgeObjectRelease(v61, v66, v67, v68, v69, v70, v71, v72);
                  swift_bridgeObjectRelease(a3, v73, v74, v75, v76, v77, v78, v79);

                  swift_release(a5, v80, v81, v82, v83, v84, v85, v86);
                  sub_10000852C(v269, v270);
                  sub_10000852C(v267, v268);
                  sub_10000852C(v274, v275);
                  uint64_t v87 = v24;
                  unint64_t v88 = v26;
                }

                else
                {
                  v272 = v54;
                  id v251 = v281;
                  uint64_t v252 = _convertNSErrorToError(_:)(v57);

                  swift_willThrow(v253);
                  if (qword_100250EB8 != -1) {
                    swift_once(&qword_100250EB8, sub_1000DD078);
                  }
                  uint64_t v254 = type metadata accessor for Logger(0LL);
                  sub_100006BAC(v254, (uint64_t)qword_1002567D0);
                  swift_errorRetain(v252);
                  uint64_t v255 = swift_errorRetain(v252);
                  v256 = (os_log_s *)Logger.logObject.getter(v255);
                  os_log_type_t v260 = static os_log_type_t.error.getter(v256, v257, v258, v259);
                  if (os_log_type_enabled(v256, v260))
                  {
                    v261 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                    v262 = (void *)swift_slowAlloc(8LL, -1LL);
                    *(_DWORD *)v261 = 138543362;
                    swift_errorRetain(v252);
                    v263 = (void *)_swift_stdlib_bridgeErrorToNSError(v252);
                    id v281 = v263;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v261 + 4, v261 + 12);
                    void *v262 = v263;
                    uint64_t v51 = v267;
                    swift_errorRelease();
                    swift_errorRelease();
                    _os_log_impl( (void *)&_mh_execute_header,  v256,  v260,  "Error fetching all policy versions: %{public}@",  v261,  0xCu);
                    uint64_t v264 = sub_100007578(&qword_100250F90);
                    swift_arrayDestroy(v262, 1LL, v264);
                    swift_slowDealloc(v262, -1LL, -1LL);
                    swift_slowDealloc(v261, -1LL, -1LL);
                  }

                  else
                  {
                    swift_errorRelease();
                    swift_errorRelease();
                  }

                  swift_errorRetain(v252);
                  a4(0LL, 0LL, (id)v252);
                  swift_errorRelease();
                  swift_errorRelease();

                  sub_10000852C(v269, v270);
                  sub_10000852C(v51, v268);
                  sub_10000852C(v274, v275);
                  uint64_t v87 = v24;
                  unint64_t v88 = v26;
                }

                sub_10000852C(v87, v88);
                return;
              }

              if (qword_100250EB8 != -1) {
                swift_once(&qword_100250EB8, sub_1000DD078);
              }
              uint64_t v240 = type metadata accessor for Logger(0LL);
              uint64_t v241 = sub_100006BAC(v240, (uint64_t)qword_1002567D0);
              v242 = (os_log_s *)Logger.logObject.getter(v241);
              os_log_type_t v246 = static os_log_type_t.error.getter(v242, v243, v244, v245);
              if (os_log_type_enabled(v242, v246))
              {
                v247 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)v247 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v242,  v246,  "fetchCurrentPolicy failed to create TPPeerStableInfo",  v247,  2u);
                swift_slowDealloc(v247, -1LL, -1LL);
              }

              unint64_t v248 = sub_100043F74();
              uint64_t v249 = swift_allocError(&type metadata for ContainerError, v248, 0LL, 0LL);
              *(_OWORD *)uint64_t v250 = xmmword_1001DEA00;
              *(_BYTE *)(v250 + 16) = 13;
              a4(0LL, 0LL, (id)v249);
              swift_errorRelease();

              sub_10000852C(v269, v270);
              sub_10000852C(v267, v268);
              sub_10000852C(v274, v275);
              uint64_t v205 = v24;
            }

            else
            {
              if (qword_100250EB8 != -1) {
                swift_once(&qword_100250EB8, sub_1000DD078);
              }
              uint64_t v194 = type metadata accessor for Logger(0LL);
              uint64_t v195 = sub_100006BAC(v194, (uint64_t)qword_1002567D0);
              v196 = (os_log_s *)Logger.logObject.getter(v195);
              os_log_type_t v200 = static os_log_type_t.error.getter(v196, v197, v198, v199);
              if (os_log_type_enabled(v196, v200))
              {
                v201 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)v201 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v196,  v200,  "fetchCurrentPolicy failed to create TPPeerPermanentInfo",  v201,  2u);
                swift_slowDealloc(v201, -1LL, -1LL);
              }

              unint64_t v202 = sub_100043F74();
              uint64_t v203 = swift_allocError(&type metadata for ContainerError, v202, 0LL, 0LL);
              *(_OWORD *)uint64_t v204 = xmmword_1001DE880;
              *(_BYTE *)(v204 + 16) = 13;
              a4(0LL, 0LL, (id)v203);
              swift_errorRelease();

              sub_10000852C(v269, v270);
              sub_10000852C(v267, v268);
              sub_10000852C(v274, v275);
              uint64_t v205 = v24;
            }

            sub_10000852C(v205, v26);
            return;
          }

          sub_10000852C(v32, v34);
          a6 = v273;
        }

        sub_10000852C(v274, v275);
      }

      sub_10000852C(v24, v26);
    }

    swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v89 = type metadata accessor for Logger(0LL);
  uint64_t v90 = sub_100006BAC(v89, (uint64_t)qword_1002567D0);
  v91 = (os_log_s *)Logger.logObject.getter(v90);
  os_log_type_t v95 = static os_log_type_t.error.getter(v91, v92, v93, v94);
  if (os_log_type_enabled(v91, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v96 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  v95,  "fetchCurrentPolicy failed to find ego peer information",  v96,  2u);
    swift_slowDealloc(v96, -1LL, -1LL);
  }

  if (a3)
  {
    v98 = (void *)objc_opt_self(&OBJC_CLASS___TPPeerPermanentInfo);
    NSString v99 = String._bridgeToObjectiveC()();
    id v100 = [v98 mungeModelID:v99];

    NSString v101 = v100;
    if (!v100)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      v103 = v102;
      NSString v101 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
    }

    char v111 = a6;
    uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v114 = v113;
    uint64_t v115 = qword_100250BA8;
    id v116 = *(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    if (v115 != -1) {
      swift_once(&qword_100250BA8, sub_10000FFC0);
    }
    id v281 = 0LL;
    id v117 = objc_msgSend(v116, "policyWithVersion:error:", objc_msgSend((id)qword_100258260, "versionNumber"), &v281);

    id v125 = v281;
    if (v281)
    {
      id v126 = v281;
      swift_bridgeObjectRelease(v114, v127, v128, v129, v130, v131, v132, v133);

      swift_willThrow(v134);
      id v135 = v126;
      v136 = (os_log_s *)Logger.logObject.getter(v135);
      os_log_type_t v140 = static os_log_type_t.error.getter(v136, v137, v138, v139);
      if (os_log_type_enabled(v136, v140))
      {
        v141 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v142 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)v141 = 138543362;
        id v143 = v135;
        id v144 = v135;
        v145 = (void *)_swift_stdlib_bridgeErrorToNSError(v144);
        id v281 = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v141 + 4, v141 + 12);
        void *v142 = v145;

        id v135 = v143;
        _os_log_impl((void *)&_mh_execute_header, v136, v140, "error finding prevailing policy: %{public}@", v141, 0xCu);
        uint64_t v146 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v142, 1LL, v146);
        swift_slowDealloc(v142, -1LL, -1LL);
        swift_slowDealloc(v141, -1LL, -1LL);
      }

      else
      {

        v136 = (os_log_s *)v135;
      }

      id v176 = v135;
      a4(0LL, 0LL, v125);

      return;
    }

    if (v117)
    {
      id v153 = v117;
      v154 = (_TtC18TrustedPeersHelper6Client *)sub_10000BD20((uint64_t)_swiftEmptyArrayStorage);
      Class v155 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v154, v156, v157, v158, v159, v160, v161, v162);
      id v163 = [objc_allocWithZone((Class)type metadata accessor for PolicyRedactionCrypter()) init];
      id v281 = 0LL;
      id v164 = [v153 policyWithSecrets:v155 decrypter:v163 error:&v281];

      id v165 = v281;
      if (v164)
      {
        id v281 = 0LL;
        id v166 = v165;
        id v167 =  [v164 syncingPolicyForModel:v101 syncUserControllableViews:0 isInheritedAccount:v111 & 1 error:&v281];

        id v168 = v281;
        if (v167)
        {
          id v169 = v281;
          uint64_t v170 = swift_bridgeObjectRetain(v114);
          v171 = (os_log_s *)Logger.logObject.getter(v170);
          os_log_type_t v172 = static os_log_type_t.info.getter(v171);
          if (os_log_type_enabled(v171, v172))
          {
            id v276 = v153;
            v173 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            v174 = (void *)swift_slowAlloc(32LL, -1LL);
            id v281 = v174;
            *(_DWORD *)v173 = 136446210;
            swift_bridgeObjectRetain(v114);
            uint64_t v279 = sub_10017C4C4(v112, (unint64_t)v114, (uint64_t *)&v281);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v279, &v280, v173 + 4, v173 + 12);
            swift_bridgeObjectRelease_n(v114, 3LL);
            _os_log_impl( (void *)&_mh_execute_header,  v171,  v172,  "returning a policy for model ID %{public}s",  v173,  0xCu);
            swift_arrayDestroy(v174, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v174, -1LL, -1LL);
            v175 = v173;
            id v153 = v276;
            swift_slowDealloc(v175, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v114, 2LL);
          }

          id v239 = v167;
          a4(v167, 0LL, 0LL);

          return;
        }

        id v206 = v281;
        swift_bridgeObjectRelease(v114, v207, v208, v209, v210, v211, v212, v213);
        uint64_t v192 = _convertNSErrorToError(_:)(v168);

        swift_willThrow(v214);
      }

      else
      {
        id v184 = v281;
        swift_bridgeObjectRelease(v114, v185, v186, v187, v188, v189, v190, v191);

        uint64_t v192 = _convertNSErrorToError(_:)(v165);
        swift_willThrow(v193);
      }

      swift_errorRetain(v192);
      uint64_t v215 = swift_errorRetain(v192);
      v216 = (os_log_s *)Logger.logObject.getter(v215);
      os_log_type_t v220 = static os_log_type_t.error.getter(v216, v217, v218, v219);
      if (os_log_type_enabled(v216, v220))
      {
        v221 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v222 = (void *)swift_slowAlloc(32LL, -1LL);
        id v281 = v222;
        *(_DWORD *)v221 = 136446210;
        uint64_t v279 = v192;
        swift_errorRetain(v192);
        uint64_t v223 = sub_100007578(&qword_100251D70);
        uint64_t v224 = String.init<A>(describing:)(&v279, v223);
        id v225 = v153;
        v227 = (_TtC18TrustedPeersHelper6Client *)v226;
        uint64_t v279 = sub_10017C4C4(v224, v226, (uint64_t *)&v281);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v279, &v280, v221 + 4, v221 + 12);
        v228 = v227;
        id v153 = v225;
        swift_bridgeObjectRelease(v228, v229, v230, v231, v232, v233, v234, v235);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v216,  v220,  "fetchCurrentPolicy failed to prevailing policy: %{public}s",  v221,  0xCu);
        swift_arrayDestroy(v222, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v222, -1LL, -1LL);
        swift_slowDealloc(v221, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      unint64_t v236 = sub_100043F74();
      uint64_t v237 = swift_allocError(&type metadata for ContainerError, v236, 0LL, 0LL);
      *(_OWORD *)uint64_t v238 = xmmword_1001DE890;
      *(_BYTE *)(v238 + 16) = 13;
      a4(0LL, 0LL, (id)v237);

      swift_errorRelease();
    }

    else
    {
      swift_bridgeObjectRelease(v114, v118, v119, v120, v121, v122, v123, v124);

      v178 = (os_log_s *)Logger.logObject.getter(v177);
      os_log_type_t v179 = static os_log_type_t.info.getter(v178);
      if (os_log_type_enabled(v178, v179))
      {
        v180 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v180 = 0;
        _os_log_impl((void *)&_mh_execute_header, v178, v179, "prevailing policy is missing?", v180, 2u);
        swift_slowDealloc(v180, -1LL, -1LL);
      }

      unint64_t v181 = sub_100043F74();
      uint64_t v182 = swift_allocError(&type metadata for ContainerError, v181, 0LL, 0LL);
      *(_OWORD *)uint64_t v183 = xmmword_1001DE890;
      *(_BYTE *)(v183 + 16) = 13;
      a4(0LL, 0LL, (id)v182);
    }

    swift_errorRelease();
    return;
  }

  v147 = (os_log_s *)Logger.logObject.getter(v97);
  os_log_type_t v148 = static os_log_type_t.info.getter(v147);
  if (os_log_type_enabled(v147, v148))
  {
    v149 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v149 = 0;
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "no model ID override; returning error", v149, 2u);
    swift_slowDealloc(v149, -1LL, -1LL);
  }

  unint64_t v150 = sub_100043F74();
  uint64_t v151 = swift_allocError(&type metadata for ContainerError, v150, 0LL, 0LL);
  *(_OWORD *)uint64_t v152 = xmmword_1001DE890;
  *(_BYTE *)(v152 + 16) = 13;
  a4(0LL, 0LL, (id)v151);
  swift_errorRelease();
}

id sub_10011F6F8(int a1, void *a2, id a3)
{
  uint64_t v5 = v3;
  id v6 = a3;
  v47 = a2;
  id v7 = [a3 bestPolicyVersion];
  id v8 = [v7 versionNumber];
  if (qword_100250BB0 != -1) {
    swift_once(&qword_100250BB0, sub_10000FFE0);
  }
  if (v8 >= [(id)qword_100258268 versionNumber])
  {
    id v16 = v7;
    id v10 = v16;
  }

  else
  {
    if (qword_100250BA8 != -1) {
      swift_once(&qword_100250BA8, sub_10000FFC0);
    }
    uint64_t v9 = qword_100250EB8;
    id v10 = (id)qword_100258260;
    if (v9 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_100006BAC(v11, (uint64_t)qword_1002567D0);
    v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ignoring policy version from pre-CKKS4All peer", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }
  }

  __chkstk_darwin(v16, v17);
  v46[2] = v5;
  v46[3] = v10;
  uint64_t v18 = sub_100007578(&qword_100257018);
  NSManagedObjectContext.performAndWait<A>(_:)(&v48, sub_100174CB4, v46, v18);
  if (!v4)
  {
    if (v48)
    {
      id v19 = v48;
      id v20 = [v6 policySecrets];
      if (v20)
      {
        BOOL v21 = v20;
        unint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v20,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
      }

      else
      {
        unint64_t v22 = sub_10000BD20((uint64_t)_swiftEmptyArrayStorage);
      }

      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v22);
      id v31 = [objc_allocWithZone((Class)type metadata accessor for PolicyRedactionCrypter()) init];
      id v48 = 0LL;
      id v32 = [v19 policyWithSecrets:isa decrypter:v31 error:&v48];

      id v33 = v48;
      if (v32)
      {
        id v34 = v48;
        NSString v35 = String._bridgeToObjectiveC()();
        id v36 = [v6 syncUserControllableViews];
        id v37 = [v6 isInheritedAccount];
        id v48 = 0LL;
        id v6 =  [v32 syncingPolicyForModel:v35 syncUserControllableViews:v36 isInheritedAccount:v37 error:&v48];

        id v38 = v48;
        if (v6)
        {
          id v39 = v48;

          return v6;
        }

        id v6 = v48;
        _convertNSErrorToError(_:)(v38);

        swift_willThrow(v44);
      }

      else
      {
        id v6 = v48;
        _convertNSErrorToError(_:)(v33);

        swift_willThrow(v40);
      }
    }

    else
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v23, (uint64_t)qword_1002567D0);
      id v10 = v10;
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        unint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v47 = (void *)swift_slowAlloc(8LL, -1LL);
        id v48 = v10;
        *(_DWORD *)unint64_t v26 = 138543362;
        id v27 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 4, v26 + 12);
        SEL v28 = v47;
        void *v47 = v10;

        _os_log_impl((void *)&_mh_execute_header, v24, v25, "best policy(%{public}@) is missing?", v26, 0xCu);
        uint64_t v29 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v28, 1LL, v29);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      else
      {

        uint64_t v24 = (os_log_s *)v10;
      }

      id v6 = [v10 versionNumber];
      unint64_t v41 = sub_100043F74();
      uint64_t v42 = swift_allocError(&type metadata for ContainerError, v41, 0LL, 0LL);
      *(void *)uint64_t v43 = v6;
      *(void *)(v43 + 8) = 0LL;
      *(_BYTE *)(v43 + 16) = 1;
      swift_willThrow(v42);
    }

    return v6;
  }

  return v6;
}

void sub_10011FCC0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v7 = 0LL;
  id v6 = objc_msgSend(v5, "policyWithVersion:error:", objc_msgSend(a2, "versionNumber"), &v7);

  if (v7)
  {
    v7;

    swift_willThrow();
  }

  else
  {
    *a3 = v6;
  }

void sub_10011FD98( uint64_t a1, uint64_t a2, void (*a3)(_TtC18TrustedPeersHelper6Client *, uint64_t))
{
  if (a1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      if (a1 >= 0) {
        a1 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      Swift::Int v5 = sub_100153E14(a1);
    }

    else
    {
      Swift::Int v5 = sub_100154308(a1);
    }

    id v6 = (_TtC18TrustedPeersHelper6Client *)v5;
  }

  else
  {
    id v6 = 0LL;
  }

  a3(v6, a2);
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_10011FE14(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void *a5)
{
  if (a2)
  {
    a3(0LL);
  }

  else if (a1 && (id v8 = a5, v9 = sub_1000DC7D8(v8, a1), v8, v9))
  {
    id v31 = v9;
    ((void (*)(void *, void))a3)(v9, 0LL);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v10, (uint64_t)qword_1002567D0);
    uint64_t v11 = swift_bridgeObjectRetain_n(a1, 2LL);
    BOOL v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = a1;
      uint64_t v33 = v15;
      *(_DWORD *)os_log_type_t v14 = 136446210;
      swift_bridgeObjectRetain(a1);
      uint64_t v16 = sub_100007578((uint64_t *)&unk_100256ED0);
      uint64_t v17 = String.init<A>(describing:)(&v32, v16);
      id v19 = (_TtC18TrustedPeersHelper6Client *)v18;
      uint64_t v32 = sub_10017C4C4(v17, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "fetchPolicyDocument: didn't return policy of version: %{public}s",  v14,  0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    id v27 = [a5 versionNumber];
    unint64_t v28 = sub_100043F74();
    uint64_t v29 = swift_allocError(&type metadata for ContainerError, v28, 0LL, 0LL);
    *(void *)uint64_t v30 = v27;
    *(void *)(v30 + 8) = 0LL;
    *(_BYTE *)(v30 + 16) = 1;
    ((void (*)(void, uint64_t))a3)(0LL, v29);
    swift_errorRelease();
  }

uint64_t sub_1001200B0(uint64_t *a1, uint64_t a2, Swift::Int *a3)
{
  uint64_t v5 = *a1;
  if ((*a1 & 0xC000000000000001LL) != 0)
  {
    if (v5 < 0) {
      uint64_t v6 = *a1;
    }
    else {
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*a1);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    uint64_t v8 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v9 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v10 = Set.Iterator.init(_cocoa:)(v82, v7, v8, v9);
    uint64_t v5 = v82[0];
    uint64_t v11 = v82[1];
    uint64_t v13 = v82[2];
    int64_t v12 = v82[3];
    unint64_t v14 = v82[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(v5 + 32);
    uint64_t v11 = v5 + 56;
    uint64_t v13 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v14 = v17 & *(void *)(v5 + 56);
    uint64_t v10 = (void *)swift_bridgeObjectRetain(*a1);
    int64_t v12 = 0LL;
  }

  uint64_t v75 = v13;
  int64_t v79 = (unint64_t)(v13 + 64) >> 6;
  BOOL v78 = a3;
  uint64_t v76 = v11;
  uint64_t v77 = a2;
  while (1)
  {
    int64_t v21 = v12;
    if (v5 < 0) {
      break;
    }
    if (v14)
    {
      unint64_t v22 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v23 = v22 | (v12 << 6);
    }

    else
    {
      ++v12;
      if (__OFADD__(v21, 1LL))
      {
        __break(1u);
LABEL_54:
        __break(1u);
      }

      if (v12 >= v79) {
        return sub_100172694(v5);
      }
      unint64_t v28 = *(void *)(v11 + 8 * v12);
      if (!v28)
      {
        int64_t v29 = v21 + 2;
        if (v21 + 2 >= v79) {
          return sub_100172694(v5);
        }
        unint64_t v28 = *(void *)(v11 + 8 * v29);
        if (v28) {
          goto LABEL_27;
        }
        int64_t v29 = v21 + 3;
        if (v21 + 3 >= v79) {
          return sub_100172694(v5);
        }
        unint64_t v28 = *(void *)(v11 + 8 * v29);
        if (v28)
        {
LABEL_27:
          int64_t v12 = v29;
        }

        else
        {
          int64_t v12 = v21 + 4;
          if (v21 + 4 >= v79) {
            return sub_100172694(v5);
          }
          unint64_t v28 = *(void *)(v11 + 8 * v12);
          if (!v28)
          {
            int64_t v73 = v21 + 5;
            do
            {
              if (v79 == v73) {
                return sub_100172694(v5);
              }
              unint64_t v28 = *(void *)(v11 + 8 * v73++);
            }

            while (!v28);
            int64_t v12 = v73 - 1;
          }
        }
      }

      unint64_t v14 = (v28 - 1) & v28;
      unint64_t v23 = __clz(__rbit64(v28)) + (v12 << 6);
    }

    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v23);
    if (!v20) {
      return sub_100172694(v5);
    }
LABEL_30:
    id v30 = objc_msgSend(v20, "versionNumber", v75);
    id v31 = *(void **)(a2 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
    id v81 = 0LL;
    id v32 = [v31 policyWithVersion:v30 error:&v81];
    uint64_t v33 = v32;
    if (v81)
    {
      id v18 = v81;

      swift_willThrow(v19);
      goto LABEL_12;
    }

    if (v32)
    {
      if (qword_100250BA8 != -1) {
        swift_once(&qword_100250BA8, sub_10000FFC0);
      }
      [(id)qword_100258260 versionNumber];
      id v34 = [v33 version];
      id v35 = [v34 policyHash];

      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      id v38 = v37;

      id v39 = [v20 policyHash];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v42 = v41;

      if (v36 == v40 && v38 == v42)
      {
        swift_bridgeObjectRelease_n(v38, 2LL);
        a2 = v77;
        uint64_t v43 = v78;
        uint64_t v11 = v76;
LABEL_38:
        id v59 = [v33 version];
        Swift::Int v60 = *v43;
        if ((*v43 & 0xC000000000000001LL) != 0)
        {
          if (v60 >= 0) {
            v60 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          id v61 = v33;
          uint64_t v62 = __CocoaDictionary.count.getter(v60);
          if (__OFADD__(v62, 1LL)) {
            goto LABEL_54;
          }
          Swift::Int v60 = sub_100149CB0(v60, v62 + 1);
          *uint64_t v43 = v60;
        }

        else
        {
          id v63 = v33;
        }

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
        id v81 = (id)*v43;
        *uint64_t v43 = 0x8000000000000000LL;
        sub_10014CA2C((uint64_t)v33, v59, isUniquelyReferenced_nonNull_native);
        v65 = (_TtC18TrustedPeersHelper6Client *)*v43;
        *uint64_t v43 = (Swift::Int)v81;

        swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
        id v18 = (id)sub_1001556C4(v20);

LABEL_12:
        id v20 = v18;
        goto LABEL_13;
      }

      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v42, 0LL);
      swift_bridgeObjectRelease(v38, v45, v46, v47, v48, v49, v50, v51);
      swift_bridgeObjectRelease(v42, v52, v53, v54, v55, v56, v57, v58);
      a2 = v77;
      uint64_t v43 = v78;
      uint64_t v11 = v76;
      if ((v44 & 1) != 0) {
        goto LABEL_38;
      }
    }

    else
    {
LABEL_13:
    }
  }

  uint64_t v24 = __CocoaSet.Iterator.next()(v10);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v80 = v24;
    uint64_t v26 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    swift_unknownObjectRetain(v25, v27);
    swift_dynamicCast(&v81, &v80, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
    id v20 = v81;
    swift_unknownObjectRelease(v25);
    if (v20) {
      goto LABEL_30;
    }
  }

  return sub_100172694(v5);
}

uint64_t sub_1001205D4(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  id v46 = a1;
  uint64_t v5 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *a2;
  unint64_t v51 = *a2 & 0xC000000000000001LL;
  if (v51)
  {
    if (v10 < 0) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v12 = __CocoaSet.count.getter(v11);
    if (v12) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease(v10);
    uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_30:
    char v44 = v46;
    uint64_t result = swift_bridgeObjectRelease(*v46);
    *char v44 = v17;
    return result;
  }

  uint64_t v12 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain(v10);
  if (!v12) {
    goto LABEL_12;
  }
LABEL_6:
  id v56 = _swiftEmptyArrayStorage;
  sub_10014E738(0, v12 & ~(v12 >> 63), 0);
  if (v51)
  {
    if (v10 < 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaSet.startIndex.getter(v13);
    unsigned __int8 v16 = 1;
  }

  else
  {
    uint64_t result = sub_1001AC348(v10);
    unsigned __int8 v16 = v18 & 1;
  }

  uint64_t v53 = result;
  uint64_t v54 = v15;
  unsigned __int8 v55 = v16;
  if ((v12 & 0x8000000000000000LL) == 0)
  {
    uint64_t v19 = v10 & 0xFFFFFFFFFFFFFF8LL;
    if (v10 < 0) {
      uint64_t v19 = v10;
    }
    uint64_t v49 = v5;
    uint64_t v50 = v19;
    int64_t v47 = v9;
    uint64_t v48 = v6;
    do
    {
      while (1)
      {
        sub_1001AC728(v53, v54, v55, v10);
        id v32 = v31;
        *(&v45 - 2) = __chkstk_darwin(v31, v33);
        uint64_t v34 = sub_1000077B8( &qword_100252298,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
        uint64_t v35 = v3;
        static Message.with(_:)(sub_1001719C4, &v45 - 4, v5, v34);

        uint64_t v36 = v56;
        if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
        {
          sub_10014E738(0, v36[2] + 1LL, 1);
          uint64_t v36 = v56;
        }

        unint64_t v38 = v36[2];
        unint64_t v37 = v36[3];
        if (v38 >= v37 >> 1)
        {
          sub_10014E738(v37 > 1, v38 + 1, 1);
          uint64_t v36 = v56;
        }

        v36[2] = v38 + 1;
        uint64_t result = sub_100041608( (uint64_t)v9,  (uint64_t)v36 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                 + *(void *)(v6 + 72) * v38,
                   type metadata accessor for PolicyDocumentKey);
        if (v51) {
          break;
        }
        uint64_t v20 = v53;
        uint64_t v21 = v54;
        unsigned __int8 v22 = v55;
        uint64_t v23 = sub_1001AC3E8(v53, v54, v55, v10);
        uint64_t v24 = v10;
        uint64_t v26 = v25;
        char v28 = v27;
        char v29 = v22;
        uint64_t v9 = v47;
        sub_100171978(v20, v21, v29);
        uint64_t v53 = v23;
        uint64_t v54 = v26;
        uint64_t v10 = v24;
        unsigned __int8 v30 = v28 & 1;
        uint64_t v3 = v35;
        uint64_t v6 = v48;
        uint64_t v5 = v49;
        unsigned __int8 v55 = v30;
        if (!--v12) {
          goto LABEL_29;
        }
      }

      if ((v55 & 1) == 0) {
        goto LABEL_32;
      }
      uint64_t v39 = __CocoaSet.Index.handleBitPattern.getter(v53, v54);
      if (v39) {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
      }
      else {
        uint64_t isUniquelyReferenced_nonNull_native = 1LL;
      }
      uint64_t v41 = sub_100007578(&qword_100256DF0);
      uint64_t v42 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v52, v41);
      __CocoaSet.formIndex(after:isUnique:)(v43, isUniquelyReferenced_nonNull_native, v50);
      v42(v52, 0LL);
      --v12;
    }

    while (v12);
LABEL_29:
    sub_100171978(v53, v54, v55);
    swift_bridgeObjectRelease(v10);
    uint64_t v17 = v56;
    goto LABEL_30;
  }

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100120940(void *a1, id a2)
{
  *a1 = [a2 versionNumber];
  id v4 = [a2 policyHash];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  uint64_t result = swift_bridgeObjectRelease(a1[2]);
  a1[1] = v5;
  a1[2] = v7;
  return result;
}

uint64_t sub_1001209C4( uint64_t a1, char *a2, void (*a3)(void, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = a4;
  id v56 = a3;
  uint64_t v54 = a2;
  uint64_t PolicyDocumentsResponse = type metadata accessor for FetchPolicyDocumentsResponse(0LL);
  uint64_t v10 = *(void *)(PolicyDocumentsResponse - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v13 = __chkstk_darwin(PolicyDocumentsResponse, v12);
  unint64_t v14 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (os_log_s *)((char *)&v50 - v16);
  uint64_t v18 = sub_100007578((uint64_t *)&unk_100256DC0);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (uint64_t *)((char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v21, (uint64_t *)&unk_100256DC0);
  if (swift_getEnumCaseMultiPayload(v21, v18) != 1)
  {
    uint64_t v51 = a5 + 16;
    uint64_t v52 = a6 + 16;
    sub_100041608((uint64_t)v21, (uint64_t)v17, type metadata accessor for FetchPolicyDocumentsResponse);
    uint64_t v35 = v54;
    id v53 = *(id *)&v54[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    sub_10004164C((uint64_t)v17, (uint64_t)v14, type metadata accessor for FetchPolicyDocumentsResponse);
    uint64_t v36 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v37 = (v36 + 16) & ~v36;
    unint64_t v38 = (v11 + v37 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v39 = (v38 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v42 = swift_allocObject(&unk_100238410, v41 + 8, v36 | 7);
    sub_100041608((uint64_t)v14, v42 + v37, type metadata accessor for FetchPolicyDocumentsResponse);
    uint64_t v43 = (void *)(v42 + v38);
    uint64_t v22 = v55;
    *uint64_t v43 = v56;
    v43[1] = v22;
    *(void *)(v42 + v39) = v51;
    *(void *)(v42 + v40) = v52;
    *(void *)(v42 + v41) = v35;
    uint64_t v44 = swift_allocObject(&unk_100238438, 32LL, 7LL);
    *(void *)(v44 + 16) = sub_100171900;
    *(void *)(v44 + 24) = v42;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v58 = v44;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100238450;
    uint64_t v45 = _Block_copy(aBlock);
    uint64_t v46 = v58;
    swift_retain(v22);
    id v47 = v35;
    swift_retain(v44);
    swift_release(v46);
    [v53 performBlockAndWait:v45];
    _Block_release(v45);
    sub_1000415CC((uint64_t)v17, type metadata accessor for FetchPolicyDocumentsResponse);
    LOBYTE(v45) = swift_isEscapingClosureAtFileLocation(v44, "", 108LL, 5222LL, 41LL, 1LL);
    swift_release(v42);
    uint64_t result = swift_release(v44);
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v22 = *v21;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v23, (uint64_t)qword_1002567D0);
  swift_errorRetain(v22);
  uint64_t v24 = swift_errorRetain(v22);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v28 = static os_log_type_t.error.getter(v17, v25, v26, v27);
  if (!os_log_type_enabled(v17, v28))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  char v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v30 = swift_slowAlloc(32LL, -1LL);
  aBlock[0] = v30;
  *(_DWORD *)char v29 = 136446210;
  uint64_t v59 = v22;
  swift_errorRetain(v22);
  uint64_t v31 = sub_100007578(&qword_100251D70);
  uint64_t v32 = String.init<A>(describing:)(&v59, v31);
  unint64_t v34 = v33;
  uint64_t v59 = sub_10017C4C4(v32, v33, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v29 + 4, v29 + 12);
  swift_bridgeObjectRelease(v34);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v17, v28, "FetchPolicyDocuments failed: %{public}s", v29, 0xCu);
  swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v30, -1LL, -1LL);
  swift_slowDealloc(v29, -1LL, -1LL);
LABEL_9:

  uint64_t v49 = v56;
  swift_errorRetain(v22);
  v49(0LL, v22);
  swift_errorRelease();
  return swift_errorRelease();
}

void sub_100120E34( uint64_t *a1, void (*a2)(void, void), uint64_t a3, void *a4, uint64_t *a5, char *a6)
{
  id v166 = a6;
  int64_t v158 = a5;
  uint64_t v10 = sub_100007578(&qword_100251668);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  unint64_t v14 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v15);
  uint64_t v161 = (uint64_t)&v145 - v16;
  uint64_t v17 = (void *)type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v160 = *(v17 - 1);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v145 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  id v159 = (char **)((char *)&v145 - v23);
  uint64_t v162 = type metadata accessor for PolicyDocumentMapEntry(0LL);
  uint64_t v24 = *(void *)(v162 - 8);
  uint64_t v26 = __chkstk_darwin(v162, v25);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  __chkstk_darwin(v28, v29);
  unint64_t v33 = (uint64_t *)((char *)&v145 - v32);
  uint64_t v34 = *a1;
  if (*(void *)(v34 + 16))
  {
    uint64_t v164 = *(void *)(v34 + 16);
    uint64_t v146 = v21;
    uint64_t v147 = v31;
    v145 = v14;
    uint64_t v148 = v30;
    uint64_t v150 = a3;
    uint64_t v151 = a2;
    id v157 = (id)objc_opt_self(&OBJC_CLASS___TPPolicyDocument);
    uint64_t v155 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc;
    uint64_t v153 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
    uint64_t v35 = v34 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    uint64_t v149 = v34;
    swift_bridgeObjectRetain(v34);
    id v165 = a4;
    swift_beginAccess(a4, v171, 0LL, 0LL);
    uint64_t v152 = *(void *)(v24 + 72);
    uint64_t v36 = &selRef_aessivkey;
    SEL v156 = v33;
    v154 = v17;
    while (1)
    {
      sub_10004164C(v35, (uint64_t)v33, type metadata accessor for PolicyDocumentMapEntry);
      uint64_t v39 = v161;
      sub_10000FC68((uint64_t)v33 + *(int *)(v162 + 24), v161, &qword_100251668);
      unint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v160 + 48);
      int v41 = v40(v39, 1LL, v17);
      uint64_t v163 = v35;
      uint64_t v42 = v159;
      if (v41 == 1)
      {
        *id v159 = 0LL;
        v42[1] = 0LL;
        v42[2] = 0xE000000000000000LL;
        _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
        sub_100041590(v39, &qword_100251668);
      }

      else
      {
        sub_100041608(v39, (uint64_t)v159, type metadata accessor for PolicyDocumentKey);
      }

      uint64_t v43 = v42[2];
      swift_bridgeObjectRetain(v43);
      sub_1000415CC((uint64_t)v42, type metadata accessor for PolicyDocumentKey);
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v43);
      uint64_t v45 = *v33;
      unint64_t v46 = v33[1];
      sub_1000084E8(*v33, v46);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000852C(v45, v46);
      id v48 = [v157 policyDocWithHash:v44 data:isa];

      if (!v48)
      {
        swift_bridgeObjectRelease(v149);
        if (qword_100250EB8 != -1) {
          goto LABEL_44;
        }
        goto LABEL_17;
      }

      uint64_t v49 = *v165;
      id v50 = v48;
      uint64_t v51 = swift_bridgeObjectRetain(v49);
      sub_100158854(v51, v50);
      uint64_t v17 = v52;
      swift_bridgeObjectRelease(v49);

      if (!v17) {
        break;
      }
      id v53 = v36;
      id v54 = [v17 policyHash];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      uint64_t v57 = v56;

      id v58 = [v50 v53[299]];
      id v59 = [v58 policyHash];

      unint64_t v33 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      uint64_t v61 = v60;

      if ((uint64_t *)v55 == v33 && v57 == v61)
      {
        swift_bridgeObjectRelease_n(v57, 2LL);
        uint64_t v62 = v165;
      }

      else
      {
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v33, v61, 0LL);
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v61);
        uint64_t v62 = v165;
        if ((v63 & 1) == 0)
        {
          swift_bridgeObjectRelease(v149);
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v115 = type metadata accessor for Logger(0LL);
          sub_100006BAC(v115, (uint64_t)qword_1002567D0);
          id v116 = v50;
          id v117 = v17;
          id v118 = v116;
          v119 = v117;
          int64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
          os_log_type_t v121 = static os_log_type_t.info.getter(v120);
          if (os_log_type_enabled(v120, v121))
          {
            uint64_t v122 = swift_slowAlloc(22LL, -1LL);
            id v166 = (char *)swift_slowAlloc(64LL, -1LL);
            id v169 = v166;
            *(_DWORD *)uint64_t v122 = 136446466;
            id v123 = [v119 policyHash];
            uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
            unint64_t v126 = v125;

            uint64_t v167 = sub_10017C4C4(v124, v126, (uint64_t *)&v169);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v122 + 4, v122 + 12);

            swift_bridgeObjectRelease(v126);
            *(_WORD *)(v122 + 12) = 2082;
            id v127 = [v118 version];
            id v128 = [v127 policyHash];

            uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
            unint64_t v131 = v130;

            uint64_t v167 = sub_10017C4C4(v129, v131, (uint64_t *)&v169);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v122 + 14, v122 + 22);

            swift_bridgeObjectRelease(v131);
            _os_log_impl( (void *)&_mh_execute_header,  v120,  v121,  "Requested hash %{public}s does not match fetched hash %{public}s",  (uint8_t *)v122,  0x16u);
            BOOL v132 = v166;
            swift_arrayDestroy(v166, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v132, -1LL, -1LL);
            swift_slowDealloc(v122, -1LL, -1LL);
          }

          else
          {
          }

          os_log_type_t v140 = v151;
          uint64_t v141 = (uint64_t)v156;
          unint64_t v142 = sub_100043F74();
          uint64_t v143 = swift_allocError(&type metadata for ContainerError, v142, 0LL, 0LL);
          *(_OWORD *)uint64_t v144 = xmmword_1001E68F0;
          *(_BYTE *)(v144 + 16) = 13;
          v140(0LL, v143);
          swift_errorRelease();

          uint64_t v114 = v141;
          goto LABEL_42;
        }
      }

      swift_beginAccess(v62, &v169, 33LL, 0LL);
      id v64 = (void *)sub_1001556C4(v17);
      swift_endAccess(&v169);

      uint64_t v36 = &selRef_aessivkey;
      id v65 = [v50 version];
      swift_beginAccess(v158, &v169, 33LL, 0LL);
      id v66 = v50;
      sub_100149C10((uint64_t)v66, v65);
      swift_endAccess(&v169);

      uint64_t v67 = type metadata accessor for PolicyMO();
      id v68 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v67)) initWithContext:*(void *)&v166[v155]];
      unint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, void *))[v66 version];
      unint64_t v69 = (unint64_t)[v40 versionNumber];

      if ((v69 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
LABEL_44:
        swift_once(&qword_100250EB8, sub_1000DD078);
LABEL_17:
        uint64_t v74 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v74, (uint64_t)qword_1002567D0);
        uint64_t v75 = v147;
        sub_10004164C((uint64_t)v33, v147, type metadata accessor for PolicyDocumentMapEntry);
        uint64_t v76 = v148;
        uint64_t v77 = sub_10004164C((uint64_t)v33, v148, type metadata accessor for PolicyDocumentMapEntry);
        BOOL v78 = (os_log_s *)Logger.logObject.getter(v77);
        os_log_type_t v79 = static os_log_type_t.info.getter(v78);
        if (os_log_type_enabled(v78, v79))
        {
          uint64_t v80 = swift_slowAlloc(22LL, -1LL);
          id v81 = (void *)swift_slowAlloc(64LL, -1LL);
          id v169 = v81;
          *(_DWORD *)uint64_t v80 = 136446466;
          uint64_t v82 = v75 + *(int *)(v162 + 24);
          uint64_t v83 = (uint64_t)v145;
          sub_10000FC68(v82, (uint64_t)v145, &qword_100251668);
          if (v40(v83, 1LL, v17) == 1)
          {
            id v84 = v146;
            *uint64_t v146 = 0LL;
            v84[1] = 0LL;
            v84[2] = 0xE000000000000000LL;
            _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
            sub_100041590(v83, &qword_100251668);
          }

          else
          {
            id v84 = v146;
            sub_100041608(v83, (uint64_t)v146, type metadata accessor for PolicyDocumentKey);
          }

          uint64_t v133 = v84[1];
          unint64_t v134 = v84[2];
          swift_bridgeObjectRetain(v134);
          sub_1000415CC((uint64_t)v84, type metadata accessor for PolicyDocumentKey);
          uint64_t v167 = sub_10017C4C4(v133, v134, (uint64_t *)&v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v80 + 4, v80 + 12);
          swift_bridgeObjectRelease(v134);
          sub_1000415CC(v147, type metadata accessor for PolicyDocumentMapEntry);
          *(_WORD *)(v80 + 12) = 2082;
          uint64_t v135 = v148;
          Swift::String v136 = Data.base64EncodedString(options:)(0LL);
          uint64_t v167 = sub_10017C4C4(v136._countAndFlagsBits, (unint64_t)v136._object, (uint64_t *)&v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v80 + 14, v80 + 22);
          swift_bridgeObjectRelease(v136._object);
          sub_1000415CC(v135, type metadata accessor for PolicyDocumentMapEntry);
          _os_log_impl( (void *)&_mh_execute_header,  v78,  v79,  "Can't make policy document with hash %{public}s and data %{public}s",  (uint8_t *)v80,  0x16u);
          swift_arrayDestroy(v81, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v81, -1LL, -1LL);
          swift_slowDealloc(v80, -1LL, -1LL);
        }

        else
        {
          sub_1000415CC(v75, type metadata accessor for PolicyDocumentMapEntry);
          sub_1000415CC(v76, type metadata accessor for PolicyDocumentMapEntry);
        }

        unint64_t v137 = sub_100043F74();
        uint64_t v138 = swift_allocError(&type metadata for ContainerError, v137, 0LL, 0LL);
        *(_OWORD *)uint64_t v139 = xmmword_1001E68F0;
        *(_BYTE *)(v139 + 16) = 13;
        v151(0LL, v138);
        swift_errorRelease();
        uint64_t v114 = (uint64_t)v33;
        goto LABEL_42;
      }

      [v68 setVersion:v69];
      id v70 = [v66 version];
      NSString v71 = [v70 policyHash];

      if (!v71)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v73 = v72;
        NSString v71 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v73);
      }

      [v68 setPolicyHash:v71];

      sub_1000084E8(v45, v46);
      Class v37 = Data._bridgeToObjectiveC()().super.isa;
      sub_10000852C(v45, v46);
      [v68 setPolicyData:v37];

      [*(id *)&v166[v153] addPoliciesObject:v68];
      unint64_t v33 = v156;
      sub_1000415CC((uint64_t)v156, type metadata accessor for PolicyDocumentMapEntry);
      uint64_t v35 = v163 + v152;
      BOOL v38 = v164-- == 1;
      uint64_t v17 = v154;
      if (v38)
      {
        swift_bridgeObjectRelease(v149);
        a2 = v151;
        a4 = v165;
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease(v149);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v85 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v85, (uint64_t)qword_1002567D0);
    id v86 = v50;
    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    os_log_type_t v88 = static os_log_type_t.info.getter(v87);
    BOOL v89 = os_log_type_enabled(v87, v88);
    uint64_t v90 = (uint64_t)v156;
    if (v89)
    {
      v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)v91 = 134217984;
      id v92 = [v86 v36[299]];
      id v93 = [v92 versionNumber];

      id v169 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170, v91 + 4, v91 + 12);

      _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "Received a policy version we didn't request: %llu",  v91,  0xCu);
      swift_slowDealloc(v91, -1LL, -1LL);
    }

    else
    {

      uint64_t v87 = (os_log_s *)v86;
    }

    BOOL v110 = v151;

    unint64_t v111 = sub_100043F74();
    uint64_t v112 = swift_allocError(&type metadata for ContainerError, v111, 0LL, 0LL);
    *(_OWORD *)uint64_t v113 = xmmword_1001E68F0;
    *(_BYTE *)(v113 + 16) = 13;
    v110(0LL, v112);
    swift_errorRelease();

    uint64_t v114 = v90;
LABEL_42:
    sub_1000415CC(v114, type metadata accessor for PolicyDocumentMapEntry);
  }

  else
  {
LABEL_25:
    uint64_t v94 = *(void **)&v166[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    id v169 = 0LL;
    unsigned __int8 v95 = [v94 save:&v169];
    id v96 = v169;
    if ((v95 & 1) != 0)
    {
      swift_beginAccess(a4, &v169, 0LL, 0LL);
      uint64_t v97 = *a4;
      swift_bridgeObjectRetain(*a4);
      id v98 = v96;
      NSString v99 = (void *)sub_1000DC8C0( v97,  sub_1001AC348,  (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001AC728);
      swift_bridgeObjectRelease(v97);
      if (v99)
      {
        id v100 = [v99 versionNumber];
        unint64_t v101 = sub_100043F74();
        uint64_t v102 = swift_allocError(&type metadata for ContainerError, v101, 0LL, 0LL);
        *(void *)uint64_t v103 = v100;
        *(void *)(v103 + 8) = 0LL;
        *(_BYTE *)(v103 + 16) = 1;
        a2(0LL, v102);
        swift_errorRelease();
      }

      else
      {
        id v107 = v158;
        swift_beginAccess(v158, &v167, 0LL, 0LL);
        uint64_t v108 = *v107;
        uint64_t v109 = swift_bridgeObjectRetain(v108);
        a2(v109, 0LL);
        swift_bridgeObjectRelease(v108);
      }
    }

    else
    {
      id v104 = v169;
      uint64_t v105 = _convertNSErrorToError(_:)(v96);

      swift_willThrow(v106);
      swift_errorRetain(v105);
      a2(0LL, v105);
      swift_errorRelease();
      swift_errorRelease();
    }
  }

uint64_t sub_100121DF0(void *a1, uint64_t a2, unint64_t a3)
{
  if (a3) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = 0xE000000000000000LL;
  }
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain(a3);
  uint64_t result = swift_bridgeObjectRelease(v6);
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t sub_100121E44(uint64_t a1, void (*a2)(void, char *), uint64_t a3)
{
  uint64_t RecoverableTLKShares = type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
  uint64_t v7 = *(void *)(RecoverableTLKShares - 8);
  __chkstk_darwin(RecoverableTLKShares, v8);
  uint64_t v10 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecoverableTLKSharesResponse = type metadata accessor for FetchRecoverableTLKSharesResponse(0LL);
  uint64_t v13 = __chkstk_darwin(RecoverableTLKSharesResponse, v12);
  uint64_t v15 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v99 - v17;
  uint64_t v19 = sub_100007578(&qword_100251DC8);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char **)((char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v22, &qword_100251DC8);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    uint64_t v18 = *v22;
    if (qword_100250EB8 == -1)
    {
LABEL_3:
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v23, (uint64_t)qword_1002567D0);
      swift_errorRetain(v18);
      uint64_t v24 = swift_errorRetain(v18);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v29 = static os_log_type_t.error.getter(v25, v26, v27, v28);
      if (os_log_type_enabled(v25, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v31 = (_TtC18TrustedPeersHelper6Client *)swift_slowAlloc(32LL, -1LL);
        uint64_t v105 = (uint64_t)v18;
        uint64_t v106 = v31;
        *(_DWORD *)uint64_t v30 = 136446210;
        swift_errorRetain(v18);
        uint64_t v32 = sub_100007578(&qword_100251D70);
        uint64_t v33 = String.init<A>(describing:)(&v105, v32);
        uint64_t v35 = (_TtC18TrustedPeersHelper6Client *)v34;
        uint64_t v105 = sub_10017C4C4(v33, v34, (uint64_t *)&v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v29, "fetchRecoverableTlkshares failed: %{public}s", v30, 0xCu);
        swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain(v18);
      a2(0LL, v18);
      swift_errorRelease();
      return swift_errorRelease();
    }

void sub_10012247C(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  id v7 = [a1 permanentInfo];
  NSString v8 = [v7 peerID];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v10 = v9;
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
  }

  uint64_t v11 = type metadata accessor for PeerMO();
  uint64_t v94 = *(void *)(v3 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11)) initWithContext:v94];
  [v12 setPeerID:v8];

  id v13 = [a1 permanentInfo];
  id v14 = [v13 data];

  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
  unint64_t v17 = v16;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v15, v17);
  [v12 setPermanentInfo:isa];

  id v19 = [a1 permanentInfo];
  id v20 = [v19 sig];

  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  unint64_t v23 = v22;

  Class v24 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v21, v23);
  id v96 = v12;
  [v12 setPermanentInfoSig:v24];

  uint64_t v25 = (objc_class *)[a1 stableInfo];
  Class v26 = v25;
  if (v25)
  {
    id v27 = -[objc_class data](v25, "data");

    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
    unint64_t v30 = v29;

    Class v26 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v28, v30);
  }

  uint64_t v32 = a2;
  uint64_t v31 = v96;
  [v96 setStableInfo:v26];

  uint64_t v33 = (objc_class *)[a1 stableInfo];
  Class v34 = v33;
  if (v33)
  {
    id v35 = -[objc_class sig](v33, "sig");

    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
    unint64_t v38 = v37;

    Class v34 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v31 = v96;
    sub_10000852C(v36, v38);
  }

  [v31 setStableInfoSig:v34];

  id v39 = (objc_class *)[a1 dynamicInfo];
  Class v40 = v39;
  if (v39)
  {
    id v41 = -[objc_class data](v39, "data");

    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    unint64_t v44 = v43;

    Class v40 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v31 = v96;
    sub_10000852C(v42, v44);
  }

  [v31 setDynamicInfo:v40];

  int64_t v45 = (objc_class *)[a1 dynamicInfo];
  Class v46 = v45;
  if (v45)
  {
    id v47 = -[objc_class sig](v45, "sig");

    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    unint64_t v50 = v49;

    Class v46 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v31 = v96;
    sub_10000852C(v48, v50);
  }

  [v31 setDynamicInfoSig:v46];

  [v31 setIsEgoPeer:a3 & 1];
  int64_t v51 = v31;
  uint64_t v52 = *(void *)(v4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter);
  swift_retain(v52);
  uint64_t v53 = sub_1000E3618();
  unint64_t v55 = v54;
  swift_release(v52);
  if (v55 >> 60 == 15)
  {
    [v51 setHmacSig:0];
  }

  else
  {
    Class v56 = Data._bridgeToObjectiveC()().super.isa;
    id v57 = [a1 calculateHmacWithHmacKey:v56];

    uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
    unint64_t v60 = v59;

    Class v61 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v58, v60);
    [v51 setHmacSig:v61];

    sub_10003C1D0(v53, v55);
  }

  uint64_t v62 = v93;
  BOOL v63 = v51;
  [*(id *)(v4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO) addPeersObject:v51];
  if (!a2)
  {
LABEL_31:

    return;
  }

  if ((unint64_t)a2 >> 62)
  {
    if (a2 >= 0) {
      uint64_t v92 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v92 = a2;
    }
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter(v92);
    if (v64) {
      goto LABEL_17;
    }
LABEL_36:

    swift_bridgeObjectRelease_n(a2, 2LL);
    return;
  }

  uint64_t v64 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain_n(a2, 2LL);
  if (!v64) {
    goto LABEL_36;
  }
LABEL_17:
  uint64_t v65 = v64 - 1;
  if (v64 >= 1)
  {
    uint64_t v66 = 0LL;
    if ((a2 & 0xC000000000000001LL) == 0) {
      goto LABEL_20;
    }
LABEL_19:
    for (id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v66, v32); ; id i = *(id *)(v32 + 8 * v66 + 32))
    {
      uint64_t v68 = i;
      id v69 = [v63 vouchers];
      if (!v69
        || (id v70 = v69,
            BOOL v97 = 0LL,
            uint64_t v71 = type metadata accessor for VoucherMO(),
            uint64_t v72 = sub_1000077B8( &qword_100256F88,  (uint64_t (*)(uint64_t))type metadata accessor for VoucherMO,  (uint64_t)&protocol conformance descriptor for NSObject),  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v70, &v97, v71, v72),  v70,  (v73 = v97) == 0LL))
      {
        swift_bridgeObjectRelease(0LL);
        uint64_t v73 = &_swiftEmptySetSingleton;
      }

      id v74 = v68;
      uint64_t v75 = v62;
      sub_100166698((uint64_t)v73, v74);
      char v77 = v76;
      swift_bridgeObjectRelease(v73);

      if ((v77 & 1) != 0)
      {

        if (v65 == v66) {
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v78 = type metadata accessor for VoucherMO();
        id v79 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v78)) initWithContext:v94];
        id v80 = [v74 data];
        uint64_t v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v80);
        unint64_t v83 = v82;

        Class v84 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v81, v83);
        [v79 setVoucherInfo:v84];

        id v85 = [v74 sig];
        uint64_t v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
        unint64_t v88 = v87;

        Class v89 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v90 = v86;
        uint64_t v62 = v75;
        unint64_t v91 = v88;
        uint64_t v32 = a2;
        BOOL v63 = v96;
        sub_10000852C(v90, v91);
        [v79 setVoucherInfoSig:v89];

        [v96 addVouchersObject:v79];
        if (v65 == v66)
        {
LABEL_30:
          swift_bridgeObjectRelease_n(v32, 2LL);
          goto LABEL_31;
        }
      }

      ++v66;
      if ((a2 & 0xC000000000000001LL) != 0) {
        goto LABEL_19;
      }
LABEL_20:
      ;
    }
  }

  __break(1u);
}

void sub_100122C24( uint64_t a1, _TtC18TrustedPeersHelper6Client *a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t a4, os_log_s *a5)
{
  uint64_t v7 = v5;
  uint64_t v147 = a4;
  uint64_t v151 = a3;
  uint64_t v152 = a5;
  uint64_t v146 = a2;
  uint64_t v9 = type metadata accessor for TLKShare(0LL);
  uint64_t v149 = *(void *)(v9 - 8);
  uint64_t v150 = v9;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  id v13 = (char *)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v141 - v15;
  uint64_t v17 = type metadata accessor for ViewKeys(0LL);
  uint64_t v153 = *(void *)(v17 - 8);
  uint64_t v154 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v157 = (uint64_t)&v141 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v159 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  id v20 = (_TtC18TrustedPeersHelper6Client *)((unint64_t)a1 >> 62);
  uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  for (i = swift_bridgeObjectRetain(a1); ; uint64_t v21 = i)
  {
    uint64_t v144 = v20;
    v145 = v13;
    uint64_t v156 = a1;
    unint64_t v142 = v16;
    if (v21)
    {
      if (v21 < 1)
      {
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }

      uint64_t v30 = 0LL;
      unint64_t v16 = (char *)(a1 & 0xC000000000000001LL);
      do
      {
        if (v16) {
          id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, a1);
        }
        else {
          id v41 = *(id *)(a1 + 8 * v30 + 32);
        }
        uint64_t v42 = v41;
        id v43 = [v41 newUpload];
        if ((_DWORD)v43)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
          uint64_t v31 = *(void *)v159->endpoint;
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
          uint64_t v32 = v31;
          a1 = v156;
          uint64_t v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v42);
          specialized ContiguousArray._endMutation()(v33);
        }

        else
        {
        }

        ++v30;
      }

      while (v21 != v30);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v34, v35, v36, v37, v38, v39, v40);
      uint64_t v6 = (uint64_t)v159;
    }

    else
    {
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v23, v24, v25, v26, v27, v28, v29);
      uint64_t v6 = (uint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v44 = ((unint64_t)v6 >> 62) & 1;
    if (v6 < 0) {
      LODWORD(v44) = 1;
    }
    int v143 = v44;
    if ((_DWORD)v44 == 1)
    {
      uint64_t v132 = swift_bridgeObjectRetain(v6);
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter(v132);
      swift_release(v6);
    }

    else
    {
      uint64_t v45 = *(void *)(v6 + 16);
    }

    a1 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v155 = v6;
    if (v45)
    {
      id v159 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      uint64_t i = sub_10014E70C(0, v45 & ~(v45 >> 63), 0);
      if (v45 < 0) {
        goto LABEL_88;
      }
      uint64_t v46 = 0LL;
      unint64_t v16 = (char *)(v6 & 0xC000000000000001LL);
      do
      {
        if (v16) {
          id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v155);
        }
        else {
          id v47 = *(id *)(v155 + 8 * v46 + 32);
        }
        unint64_t v49 = v47;
        *(&v141 - 2) = __chkstk_darwin(v47, v48);
        uint64_t v50 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
        static Message.with(_:)(sub_100176B68, &v141 - 4, v154, v50);

        a1 = (uint64_t)v159;
        if ((swift_isUniquelyReferenced_nonNull_native(v159) & 1) == 0)
        {
          sub_10014E70C(0, *(void *)(a1 + 16) + 1LL, 1);
          a1 = (uint64_t)v159;
        }

        unint64_t v52 = *(void *)(a1 + 16);
        unint64_t v51 = *(void *)(a1 + 24);
        if (v52 >= v51 >> 1)
        {
          sub_10014E70C(v51 > 1, v52 + 1, 1);
          a1 = (uint64_t)v159;
        }

        ++v46;
        *(void *)(a1 + 16) = v52 + 1;
        sub_100041608( v157,  a1 + ((*(unsigned __int8 *)(v153 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80))
        + *(void *)(v153 + 72) * v52,
          type metadata accessor for ViewKeys);
      }

      while (v45 != v46);
      uint64_t v6 = v155;
    }

    if (v144)
    {
      unint64_t v54 = (_TtC18TrustedPeersHelper6Client *)v156;
      if (v156 < 0) {
        uint64_t v55 = v156;
      }
      else {
        uint64_t v55 = v156 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v156);
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease(v54, v56, v57, v58, v59, v60, v61, v62);
    }

    else
    {
      uint64_t v53 = *(void *)((v156 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    BOOL v63 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    if (v53)
    {
      id v159 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      uint64_t i = specialized ContiguousArray.reserveCapacity(_:)(v53);
      if (v53 < 0) {
        goto LABEL_89;
      }
      uint64_t v64 = 0LL;
      unint64_t v65 = v156 & 0xC000000000000001LL;
      do
      {
        if (v65) {
          id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v156);
        }
        else {
          id v66 = *(id *)(v156 + 8 * v64 + 32);
        }
        uint64_t v67 = v66;
        ++v64;
        id v68 = [v66 tlk];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v69);
        uint64_t v70 = *(void *)v159->endpoint;
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v70);
        uint64_t v71 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v68);
        specialized ContiguousArray._endMutation()(v71);
      }

      while (v53 != v64);
      BOOL v63 = v159;
      uint64_t v6 = v155;
    }

    uint64_t v72 = sub_1000E04C0(v63, (uint64_t)v151, v151, (uint64_t)v152);
    if (v7)
    {
      swift_release(v6);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v80, v81, v82, v83, v84, v85, v86);
      swift_bridgeObjectRelease(v63, v87, v88, v89, v90, v91, v92, v93);
      return;
    }

    unint64_t v16 = (char *)v72;
    swift_bridgeObjectRelease(v63, v73, v74, v75, v76, v77, v78, v79);
    uint64_t i = (uint64_t)v146;
    if (!((unint64_t)v146 >> 62))
    {
      uint64_t v94 = *(void *)(((unint64_t)v146 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_49;
    }

LABEL_90:
    uint64_t v133 = i < 0 ? i : i & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(i);
    uint64_t v94 = _CocoaArrayWrapper.endIndex.getter(v133);
    swift_bridgeObjectRelease(v146, v134, v135, v136, v137, v138, v139, v140);
LABEL_49:
    uint64_t v156 = (uint64_t)v16;
    if (v94)
    {
      id v159 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      sub_10014E6E0(0, v94 & ~(v94 >> 63), 0);
      if (v94 < 0)
      {
        __break(1u);
LABEL_95:
        objc_autoreleasePoolPop(v16);
        __break(1u);
        return;
      }

      id v95 = v146;
      if (((unint64_t)v146 & 0xC000000000000001LL) != 0)
      {
        uint64_t v96 = 0LL;
        BOOL v97 = type metadata accessor for TLKShare;
        BOOL v98 = v142;
        uint64_t v157 = v94;
        do
        {
          uint64_t v99 = specialized _ArrayBuffer._getElementSlowPath(_:)(v96, v95);
          *(&v141 - 2) = __chkstk_darwin(v99, v100);
          uint64_t v101 = v97;
          uint64_t v102 = sub_1000077B8(&qword_100256D60, v97, (uint64_t)&protocol conformance descriptor for TLKShare);
          uint64_t v103 = (uint64_t)v98;
          static Message.with(_:)(sub_100176B54, &v141 - 4, v150, v102);
          swift_unknownObjectRelease(v99);
          id v20 = v159;
          if ((swift_isUniquelyReferenced_nonNull_native(v159) & 1) == 0)
          {
            sub_10014E6E0(0, *(void *)v20->endpoint + 1LL, 1);
            id v20 = v159;
          }

          unint64_t v105 = *(void *)v20->endpoint;
          unint64_t v104 = *(void *)v20->containerMap;
          if (v105 >= v104 >> 1)
          {
            sub_10014E6E0(v104 > 1, v105 + 1, 1);
            id v20 = v159;
          }

          ++v96;
          *(void *)v20->endpoint = v105 + 1;
          BOOL v98 = (char *)v103;
          uint64_t v107 = v103;
          BOOL v97 = v101;
          sub_100041608(v107, v106, v101);
          id v95 = v146;
        }

        while (v157 != v96);
      }

      else
      {
        uint64_t v108 = v146 + 1;
        uint64_t v109 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
        uint64_t v111 = v109;
        do
        {
          __chkstk_darwin(v109, v110);
          *(&v141 - 2) = (uint64_t)v112;
          id v113 = v112;
          static Message.with(_:)(sub_100176B54, &v141 - 4, v150, v111);

          id v20 = v159;
          if ((swift_isUniquelyReferenced_nonNull_native(v159) & 1) == 0)
          {
            sub_10014E6E0(0, *(void *)v20->endpoint + 1LL, 1);
            id v20 = v159;
          }

          unint64_t v115 = *(void *)v20->endpoint;
          unint64_t v114 = *(void *)v20->containerMap;
          if (v115 >= v114 >> 1)
          {
            sub_10014E6E0(v114 > 1, v115 + 1, 1);
            id v20 = v159;
          }

          *(void *)v20->endpoint = v115 + 1;
          uint64_t v109 = sub_100041608( (uint64_t)v145,  (uint64_t)&v20->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))
                                                           + *(void *)(v149 + 72) * v115],
                   type metadata accessor for TLKShare);
          uint64_t v108 = (_TtC18TrustedPeersHelper6Client *)((char *)v108 + 8);
          --v94;
        }

        while (v94);
      }

      uint64_t v6 = v155;
    }

    else
    {
      id v20 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    }

    id v159 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    if (!v143) {
      break;
    }
    uint64_t v116 = swift_bridgeObjectRetain(v6);
    uint64_t v117 = _CocoaArrayWrapper.endIndex.getter(v116);
    swift_release(v6);
    if (!v117) {
      goto LABEL_79;
    }
LABEL_69:
    unint64_t v118 = v6 & 0xC000000000000001LL;
    uint64_t v119 = 4LL;
    while (1)
    {
      unint64_t v16 = (char *)(v119 - 4);
      int64_t v120 = v118
      id v13 = v120;
      uint64_t v6 = v119 - 3;
      if (__OFADD__(v16, 1LL)) {
        break;
      }
      unint64_t v16 = (char *)objc_autoreleasePoolPush();
      sub_1001234FC(v148, v147, v13, v151, v152);
      if (v7) {
        goto LABEL_95;
      }
      uint64_t v7 = 0LL;
      objc_autoreleasePoolPop(v16);

      ++v119;
      BOOL v121 = v6 == v117;
      uint64_t v6 = v155;
      if (v121)
      {
        swift_release(v155);
        uint64_t v122 = v159;
        goto LABEL_80;
      }
    }

    __break(1u);
LABEL_82:
    if (a1 < 0) {
      uint64_t v131 = a1;
    }
    else {
      uint64_t v131 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t i = _CocoaArrayWrapper.endIndex.getter(v131);
  }

  uint64_t v117 = *(void *)(v6 + 16);
  if (v117) {
    goto LABEL_69;
  }
LABEL_79:
  swift_release(v6);
  uint64_t v122 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
LABEL_80:
  uint64_t v158 = v156;
  id v123 = (_TtC18TrustedPeersHelper6Client *)swift_bridgeObjectRetain(v122);
  sub_1000E4A3C(v123);
  sub_1000E4A3C(v20);
  swift_bridgeObjectRelease(v122, v124, v125, v126, v127, v128, v129, v130);
}

void sub_1001234FC(char *a1, uint64_t a2, void *a3, void *a4, os_log_s *a5)
{
  id v9 = *(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  id v10 = [a3 tlk];
  id v11 = [v10 zoneID];

  NSString v12 = [v11 zoneName];
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v14 = v13;
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  }

  id v119 = 0LL;
  id v22 = [v9 getPeerIDsTrustedByPeerWithDynamicInfo:a2 toAccessView:v12 error:&v119];

  id v23 = v119;
  p_vtable = &OBJC_CLASS___VoucherMO.vtable;
  if (v22)
  {
    uint64_t v112 = a4;
    os_log_t log = a5;
    int64_t v25 = (_TtC18TrustedPeersHelper6Client *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v22,  &type metadata for String,  &protocol witness table for String);
    id v26 = v23;

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v27, (uint64_t)qword_1002567D0);
    id v28 = a3;
    swift_bridgeObjectRetain_n(v25, 2LL);
    id v29 = v28;
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v110 = (void *)swift_slowAlloc(64LL, -1LL);
      id v119 = v110;
      *(_DWORD *)uint64_t v32 = 136446466;
      uint64_t v111 = a3;
      id v33 = [v29 tlk];
      id v34 = [v33 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      unint64_t v37 = v36;

      uint64_t v118 = sub_10017C4C4(v35, (unint64_t)v37, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v32 + 4, v32 + 12);

      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      *(_WORD *)(v32 + 12) = 2082;
      uint64_t v45 = swift_bridgeObjectRetain(v25);
      uint64_t v46 = Set.description.getter(v45, &type metadata for String, &protocol witness table for String);
      unint64_t v48 = (unint64_t)v47;
      swift_bridgeObjectRelease(v25, v47, v49, v50, v51, v52, v53, v54);
      uint64_t v118 = sub_10017C4C4(v46, v48, (uint64_t *)&v119);
      p_vtable = (void **)(&OBJC_CLASS___VoucherMO + 24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease_n(v25, 2LL);
      uint64_t v55 = (_TtC18TrustedPeersHelper6Client *)v48;
      a3 = v111;
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Planning to share %{public}s with peers %{public}s",  (uint8_t *)v32,  0x16u);
      swift_arrayDestroy(v110, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v25, 2LL);
    }

    id v66 = a1;
    uint64_t v67 = sub_10015A30C((uint64_t)v25, (uint64_t)v66);
    uint64_t v64 = v117;
    if (!v117)
    {
      uint64_t v99 = (_TtC18TrustedPeersHelper6Client *)v67;
      swift_bridgeObjectRelease(v25, v68, v69, v70, v71, v72, v73, v74);

      id v100 = v29;
      id v101 = v112;
      uint64_t v102 = (_TtC18TrustedPeersHelper6Client *)sub_1001592E0((uint64_t)v99, v100, v101, (uint64_t)log);
      swift_bridgeObjectRelease(v99, v103, v104, v105, v106, v107, v108, v109);

      sub_1000E4A3C(v102);
      return;
    }

    swift_bridgeObjectRelease(v25, v68, v69, v70, v71, v72, v73, v74);
  }

  else
  {
    id v63 = v119;
    uint64_t v64 = _convertNSErrorToError(_:)(v23);

    swift_willThrow(v65);
  }

  uint64_t v75 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v75, (uint64_t)qword_1002567D0);
  id v76 = a3;
  swift_errorRetain(v64);
  id v77 = v76;
  uint64_t v78 = swift_errorRetain(v64);
  BOOL v79 = (os_log_s *)Logger.logObject.getter(v78);
  os_log_type_t v83 = static os_log_type_t.error.getter(v79, v80, v81, v82);
  if (os_log_type_enabled(v79, v83))
  {
    uint64_t v84 = swift_slowAlloc(22LL, -1LL);
    loga = v79;
    BOOL v85 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v116 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v118 = (uint64_t)v77;
    id v119 = v116;
    *(_DWORD *)uint64_t v84 = 138543618;
    id v86 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v84 + 4, v84 + 12);
    *BOOL v85 = v77;

    *(_WORD *)(v84 + 12) = 2082;
    uint64_t v118 = v64;
    swift_errorRetain(v64);
    uint64_t v87 = sub_100007578(&qword_100251D70);
    uint64_t v88 = String.init<A>(describing:)(&v118, v87);
    id v90 = (_TtC18TrustedPeersHelper6Client *)v89;
    uint64_t v118 = sub_10017C4C4(v88, v89, (uint64_t *)&v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v84 + 14, v84 + 22);
    swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  loga,  v83,  "Unable to create TLKShares for keyset %{public}@: %{public}s",  (uint8_t *)v84,  0x16u);
    uint64_t v98 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v85, 1LL, v98);
    swift_slowDealloc(v85, -1LL, -1LL);
    swift_arrayDestroy(v116, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1LL, -1LL);
    swift_slowDealloc(v84, -1LL, -1LL);

    swift_errorRelease();
  }

  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }

id sub_100123BD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, NSString a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v138 = a6;
  BOOL v139 = a5;
  uint64_t v140 = a10;
  uint64_t v133 = type metadata accessor for Logger(0LL);
  uint64_t v135 = *(void *)(v133 - 8);
  __chkstk_darwin(v133, v17);
  SEL v134 = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = v10;
  uint64_t v129 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v19 = *(id *)(v10 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  NSString v20 = String._bridgeToObjectiveC()();
  if (a7) {
    a7 = String._bridgeToObjectiveC()();
  }
  uint64_t v132 = a1;
  uint64_t v131 = a3;
  uint64_t v130 = a2;
  if (a8) {
    v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v21.super.Class isa = 0LL;
  }
  uint64_t v137 = OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey;
  id v22 = *(id *)(v140 + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey);
  id v23 = (void *)sub_1001A3414();
  id v143 = 0LL;
  Class v24 = a4;
  int64_t v25 = v139;
  id v26 =  [v19 dynamicInfoForJoiningPeerID:v20 peerPermanentInfo:a4 peerStableInfo:v139 sponsorID:a7 preapprovedKeys:v21.super.isa signingKeyPair:v22 curren tMachineIDs:v23 error:&v143];

  id v27 = v143;
  id v138 = v26;
  if (!v26)
  {
    id v34 = v143;
    _convertNSErrorToError(_:)(v27);

    swift_willThrow(v35);
    return v138;
  }

  id v28 = v143;
  if (sub_1001245EC((uint64_t)[v25 syncUserControllableViews], (uint64_t)&off_1002351C8))
  {
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 1LL;
    id v32 = v138;
    id v33 = v24;
LABEL_35:
    v144[0].Class isa = 0LL;
    v144[1].Class isa = (Class)v31;
    __int128 v145 = 0u;
    __int128 v146 = 0u;
    uint64_t v147 = 0LL;
    uint64_t v148 = v29;
    uint64_t v149 = 0LL;
    uint64_t v150 = v30;
    uint64_t v152 = 0LL;
    uint64_t v153 = 0LL;
    uint64_t v151 = 0LL;
    id v109 = *(id *)(v140 + v137);
    uint64_t v110 = v25;
    id v36 = v32;
    uint64_t v111 = v136;
    uint64_t v112 = sub_1001412E4(v144, v33, v110, v32, (uint64_t)v109, a9);

    if (v111)
    {

      sub_1001734C8(0LL, v31, 0LL, 0LL, 0LL, 0LL, 0LL, v29, 0LL, v30, 0LL, 0LL, 0LL);
    }

    else
    {
      sub_1001734C8(0LL, v31, 0LL, 0LL, 0LL, 0LL, 0LL, v29, 0LL, v30, 0LL, 0LL, 0LL);
      id v113 = v112;
      uint64_t v114 = type metadata accessor for Peer(0LL);
      __chkstk_darwin(v114, type metadata accessor for Peer);
      uint64_t v115 = v131;
      *(&v129 - 8) = v130;
      *(&v129 - 7) = v115;
      SEL v124 = v33;
      id v125 = v113;
      int64_t v126 = v139;
      id v127 = v36;
      uint64_t v128 = a9;
      uint64_t v117 = sub_1000077B8((unint64_t *)&unk_100256E10, v116, (uint64_t)&protocol conformance descriptor for Peer);
      static Message.with(_:)(sub_100174C90, &v129 - 10, v114, v117);
    }

    return v36;
  }

  id v33 = v24;
  id v37 = [v24 modelID];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  id v39 = v38;

  v40._countAndFlagsBits = 0x5654656C707041LL;
  v40._object = (void *)0xE700000000000000LL;
  LOBYTE(v37) = String.hasPrefix(_:)(v40);
  swift_bridgeObjectRelease(v39, v41, v42, v43, v44, v45, v46, v47);
  if ((v37 & 1) != 0)
  {
    uint64_t v48 = 3LL;
    uint64_t v49 = v133;
    uint64_t v50 = v135;
    goto LABEL_15;
  }

  id v51 = [v24 modelID];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  BOOL v53 = v52;

  v54._countAndFlagsBits = 0x6363416F69647541LL;
  v54._object = (void *)0xEE0079726F737365LL;
  LOBYTE(v51) = String.hasPrefix(_:)(v54);
  swift_bridgeObjectRelease(v53, v55, v56, v57, v58, v59, v60, v61);
  uint64_t v49 = v133;
  uint64_t v50 = v135;
  id v62 = [v24 modelID];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  uint64_t v64 = v63;

  v65._countAndFlagsBits = 0x6863746157LL;
  v65._object = (void *)0xE500000000000000LL;
  LOBYTE(v62) = String.hasPrefix(_:)(v65);
  swift_bridgeObjectRelease(v64, v66, v67, v68, v69, v70, v71, v72);
  if ((v62 & 1) != 0)
  {
LABEL_14:
    uint64_t v48 = 3LL;
    goto LABEL_15;
  }

  uint64_t v81 = *(void **)(v141 + v129);
  id v143 = 0LL;
  id v82 = [v81 userViewSyncabilityConsensusAmongTrustedPeers:v138 error:&v143];
  if (!v143)
  {
    uint64_t v48 = (uint64_t)v82;
    BOOL v73 = v134;
    if ((_DWORD)v82 != 2) {
      goto LABEL_16;
    }
    if ([*(id *)(v141 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_managedConfigurationAdapter) isCloudKeychainSyncAllowed])
    {
      uint64_t v48 = 2LL;
      goto LABEL_16;
    }

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v120 = sub_100006BAC(v49, (uint64_t)qword_1002567D0);
    BOOL v121 = (os_log_s *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.info.getter(v121);
    if (os_log_type_enabled(v121, v122))
    {
      id v123 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v123 = 0;
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "user-controllable views disabled by profile", v123, 2u);
      swift_slowDealloc(v123, -1LL, -1LL);
    }

    uint64_t v48 = 1LL;
LABEL_15:
    BOOL v73 = v134;
LABEL_16:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v74 = sub_100006BAC(v49, (uint64_t)qword_1002567D0);
    uint64_t v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16))(v73, v74, v49);
    id v76 = (os_log_s *)Logger.logObject.getter(v75);
    int v77 = static os_log_type_t.info.getter(v76);
    if (os_log_type_enabled(v76, (os_log_type_t)v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v79 = (void *)swift_slowAlloc(32LL, -1LL);
      id v143 = v79;
      *(_DWORD *)uint64_t v78 = 136446210;
      LODWORD(v133) = v77;
      uint64_t v129 = (uint64_t)v79;
      switch((int)v48)
      {
        case 0:
          uint64_t v80 = @"UNKNOWN";
          goto LABEL_31;
        case 1:
          uint64_t v80 = @"DISABLED";
          goto LABEL_31;
        case 2:
          uint64_t v80 = @"ENABLED";
          goto LABEL_31;
        case 3:
          uint64_t v80 = @"FOLLOWING";
LABEL_31:
          id v95 = v80;
          break;
        default:
          uint64_t v80 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v48));
          break;
      }

      BOOL v96 = v80;
      if (!v96)
      {
        __break(1u);
        JUMPOUT(0x1001245DCLL);
      }

      BOOL v97 = v96;
      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      id v100 = v99;

      uint64_t v142 = sub_10017C4C4(v98, (unint64_t)v100, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
      _os_log_impl( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v133,  "join: setting 'user view sync' control as: %{public}s",  v78,  0xCu);
      uint64_t v108 = v129;
      swift_arrayDestroy(v129, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      swift_slowDealloc(v78, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v135 + 8))(v134, v49);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v50 + 8))(v73, v49);
    }

    uint64_t v31 = 0LL;
    uint64_t v30 = v48;
    uint64_t v29 = 1LL;
    id v32 = v138;
    int64_t v25 = v139;
    goto LABEL_35;
  }

  id v83 = v143;
  swift_willThrow(v83);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  sub_100006BAC(v49, (uint64_t)qword_1002567D0);
  id v84 = v83;
  BOOL v85 = (os_log_s *)Logger.logObject.getter(v84);
  os_log_type_t v89 = static os_log_type_t.error.getter(v85, v86, v87, v88);
  if (os_log_type_enabled(v85, v89))
  {
    id v90 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    SEL v91 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v90 = 138543362;
    id v92 = v84;
    int64_t v93 = (void *)_swift_stdlib_bridgeErrorToNSError(v92);
    id v143 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v90 + 4, v90 + 12);
    void *v91 = v93;

    _os_log_impl((void *)&_mh_execute_header, v85, v89, "error getting user view sync consensus: %{public}@", v90, 0xCu);
    uint64_t v94 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v91, 1LL, v94);
    swift_slowDealloc(v91, -1LL, -1LL);
    swift_slowDealloc(v90, -1LL, -1LL);
  }

  else
  {

    BOOL v85 = (os_log_s *)v84;
  }

  swift_willThrow(v119);
  id v36 = v138;

  return v36;
}

uint64_t sub_1001245EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 9LL; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1LL)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }

  __break(1u);
  return result;
}

void sub_100124650(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v85 = a8;
  id v82 = a7;
  id v77 = a6;
  BOOL v79 = a5;
  uint64_t v12 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v83 = *(void *)(v12 - 8);
  uint64_t v84 = v12;
  __chkstk_darwin(v12, v13);
  SEL v15 = (uint64_t *)((char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v80 = *(void *)(v16 - 8);
  uint64_t v81 = v16;
  __chkstk_darwin(v16, v17);
  id v19 = (uint64_t *)((char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v78 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  id v23 = (uint64_t *)((char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Class v24 = (_TtC18TrustedPeersHelper6Client *)a1[1];
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
  *a1 = a2;
  a1[1] = a3;
  id v32 = a4;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  id v33 = [v32 data];
  uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  *id v23 = v34;
  v23[1] = v36;
  id v37 = [v32 sig];
  uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
  uint64_t v40 = v39;

  SEL v41 = v79;
  v23[2] = v38;
  v23[3] = v40;
  id v42 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v43 = (uint64_t)a1 + v42[7];
  sub_100041590(v43, &qword_100256F80);
  sub_100041608((uint64_t)v23, v43, type metadata accessor for SignedPeerPermanentInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v43, 0LL, 1LL, v20);
  id v44 = v41;
  if (!v41) {
    id v44 = v77;
  }
  uint64_t v45 = v81;
  id v46 = v41;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  id v47 = [v44 data];
  uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
  uint64_t v50 = v49;

  uint64_t *v19 = v48;
  v19[1] = v50;
  id v51 = [v44 sig];
  uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
  uint64_t v54 = v53;

  v19[2] = v52;
  v19[3] = v54;
  uint64_t v55 = (uint64_t)a1 + v42[8];
  sub_100041590(v55, &qword_100251F18);
  sub_100041608((uint64_t)v19, v55, type metadata accessor for SignedPeerStableInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56))(v55, 0LL, 1LL, v45);
  uint64_t v56 = v84;
  id v57 = v82;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  id v58 = [v57 data];
  uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
  uint64_t v61 = v60;

  uint64_t *v15 = v59;
  v15[1] = v61;
  id v62 = [v57 sig];
  uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v62);
  uint64_t v65 = v64;

  v15[2] = v63;
  v15[3] = v65;
  uint64_t v66 = (uint64_t)a1 + v42[9];
  sub_100041590(v66, &qword_100256CA0);
  sub_100041608((uint64_t)v15, v66, type metadata accessor for SignedPeerDynamicInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v83 + 56))(v66, 0LL, 1LL, v56);
  id v67 = (_TtC18TrustedPeersHelper6Client *)a1[2];
  uint64_t v68 = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v67, v69, v70, v71, v72, v73, v74, v75);
  a1[2] = v68;
}

uint64_t sub_100124A10( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v17, 41LL, 7LL);
  id v31 = v16;
  uint64_t v18 = sub_100159634(v31, 0xD000000000000074LL, 0x80000001001FA080LL);

  BOOL v30 = (void *)swift_allocObject(&unk_100239F40, 40LL, 7LL);
  v30[2] = v18;
  v30[3] = a15;
  v30[4] = a16;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCEventNameFetchAndPersistChanges);
  uint64_t v21 = v20;
  swift_bridgeObjectRetain(a13);
  swift_retain(v18);
  swift_retain(a16);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a11);
  sub_100173F04();
  char v23 = v22;
  Class v24 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v25 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v29 = sub_10005F250(0LL, a8, a9, a10, a11, a12, a13, v19, v21, v23, a14, v24);
  uint64_t v26 = swift_allocObject(&unk_100239F68, 160LL, 7LL);
  *(void *)(v26 + 16) = sub_100173EB8;
  *(void *)(v26 + 24) = v30;
  *(void *)(v26 + 32) = v29;
  *(void *)(v26 + 40) = a8;
  *(void *)(v26 + 48) = a9;
  *(void *)(v26 + 56) = a10;
  *(void *)(v26 + 64) = a11;
  *(void *)(v26 + 72) = a12;
  *(void *)(v26 + 80) = a13;
  *(_BYTE *)(v26 + 88) = a14;
  *(void *)(v26 + 96) = v31;
  *(void *)(v26 + 104) = a1;
  *(void *)(v26 + 112) = a2;
  *(void *)(v26 + 120) = a3;
  *(void *)(v26 + 128) = a4;
  *(void *)(v26 + 136) = a7;
  *(void *)(v26 + 144) = a5;
  *(void *)(v26 + 152) = a6;
  v31;
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a11);
  swift_bridgeObjectRetain(a13);
  swift_retain(v30);
  id v27 = v29;
  sub_1000084E8(a1, a2);
  sub_1000084E8(a3, a4);
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  sub_100137F18(0, (uint64_t)sub_10017408C, v26);
  swift_release(v18);
  swift_release(v30);

  return swift_release(v26);
}

void sub_100124C94( uint64_t a1, void (*a2)(void, void, void *, void, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, _TtC18TrustedPeersHelper6Client *a6, uint64_t a7, char *a8, void *a9, _TtC18TrustedPeersHelper6Client *a10, char a11, _TtC18TrustedPeersHelper6Client *a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, _TtC18TrustedPeersHelper6Client *a17, _TtC18TrustedPeersHelper6Client *a18, _TtC18TrustedPeersHelper6Client *a19)
{
  if (a1)
  {
    a2(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, a1);
    char v22 = (void *)objc_opt_self(&OBJC_CLASS___SecurityAnalyticsReporterRTC);
    id v119 = (id)_convertErrorToNSError(_:)(a1);
    [v22 sendMetricWithEvent:a4 success:0 error:v119];
  }

  else
  {
    BOOL v107 = a18;
    uint64_t v108 = a19;
    BOOL v106 = a17;
    uint64_t v109 = a15;
    unint64_t v110 = a16;
    uint64_t v111 = a13;
    unint64_t v112 = a14;
    uint64_t v115 = (char *)a12;
    uint64_t v116 = a3;
    id v119 = a9;
    [(id)objc_opt_self(SecurityAnalyticsReporterRTC) sendMetricWithEvent:a4 success:1 error:0];
    uint64_t v114 = (_TtC18TrustedPeersHelper6Client *)static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCEventNameFetchPolicyDocument);
    uint64_t v28 = v27;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    sub_100173F04();
    char v30 = v29;
    id v31 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
    objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
    id v32 = v31;
    int v103 = a11 & 1;
    uint64_t v104 = a5;
    uint64_t v105 = a7;
    uint64_t v33 = a5;
    uint64_t v117 = (_TtC18TrustedPeersHelper6Client *)a8;
    uint64_t v118 = a10;
    uint64_t v34 = v116;
    id v35 = sub_10005F250( 0LL,  v33,  (uint64_t)a6,  a7,  (uint64_t)a8,  (uint64_t)a9,  (uint64_t)a10,  (uint64_t)v114,  v28,  v30,  a11 & 1,  v32);
    __chkstk_darwin(v35, v36);
    uint64_t v99 = a12;
    id v100 = (void (*)(void, void, void, void, void))a2;
    uint64_t v101 = v116;
    uint64_t v37 = sub_100007578(&qword_100251698);
    NSManagedObjectContext.performAndWait<A>(_:)(&v120, sub_1001740E4, &v98, v37);
    if (v120)
    {
      id v113 = a6;
      uint64_t v114 = v120;
      swift_bridgeObjectRetain(a6);
      swift_bridgeObjectRetain(v117);
      uint64_t v38 = v118;
      swift_bridgeObjectRetain(v118);
      id v39 = v35;
      id v102 = (void (*)(void, void, void, void, void))a2;
      id v40 = v39;
      uint64_t v115 = a12;
      uint64_t v42 = v111;
      unint64_t v41 = v112;
      sub_1000084E8(v111, v112);
      uint64_t v43 = v109;
      unint64_t v44 = v110;
      sub_1000084E8(v109, v110);
      uint64_t v45 = v106;
      swift_bridgeObjectRetain(v106);
      id v46 = v107;
      swift_bridgeObjectRetain(v107);
      id v47 = v108;
      swift_bridgeObjectRetain(v108);
      swift_retain(v34);
      uint64_t v99 = v38;
      uint64_t v48 = v117;
      sub_10016E690( (uint64_t)v114,  v115,  v40,  v115,  v42,  v41,  v43,  v44,  (uint64_t)v102,  v34,  (uint64_t)v45,  (uint64_t)v46,  (uint64_t)v47,  v105,  (char *)v117,  (uint64_t)v119,  (uint64_t)v99,  v104,  (uint64_t)v113,  v103);
      swift_release(v34);
      swift_bridgeObjectRelease(v45, v49, v50, v51, v52, v53, v54, v55);
      swift_bridgeObjectRelease(v46, v56, v57, v58, v59, v60, v61, v62);
      swift_bridgeObjectRelease(v47, v63, v64, v65, v66, v67, v68, v69);
      swift_bridgeObjectRelease(v48, v70, v71, v72, v73, v74, v75, v76);
      swift_bridgeObjectRelease(v118, v77, v78, v79, v80, v81, v82, v83);
      swift_bridgeObjectRelease(v113, v84, v85, v86, v87, v88, v89, v90);
      sub_10000852C(v43, v44);
      sub_10000852C(v42, v41);
      swift_bridgeObjectRelease(v114, v91, v92, v93, v94, v95, v96, v97);
    }

    else
    {
    }
  }

void sub_100125058( uint64_t a1@<X0>, void (*a2)(void, void, void *, void, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  BOOL v5 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v27 = 0LL;
  id v6 = [v5 allPolicyVersionsWithError:&v27];
  id v7 = v27;
  if (v6)
  {
    NSString v8 = v6;
    uint64_t v9 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v10 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);
    id v12 = v7;
  }

  else
  {
    id v13 = v27;
    uint64_t v14 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v15);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_1002567D0);
    swift_errorRetain(v14);
    uint64_t v17 = swift_errorRetain(v14);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v22 = static os_log_type_t.error.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      char v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)char v23 = 138543362;
      swift_errorRetain(v14);
      Class v24 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
      id v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 4, v23 + 12);
      *uint64_t v26 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Error fetching all policy versions: %{public}@", v23, 0xCu);
      uint64_t v25 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v26, 1LL, v25);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v14);
    a2(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v14);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v11 = 0LL;
  }

  *a3 = v11;
}

void sub_100125340( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void, void, void *, void, uint64_t), uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v25 = Data._bridgeToObjectiveC()().super.isa;
  id v26 = [(id)objc_opt_self(TPVoucher) voucherInfoWithData:isa sig:v25];
  sub_10000852C(a3, a4);
  sub_10000852C(a1, a2);

  if (!v26)
  {
    unint64_t v67 = sub_100043F74();
    uint64_t v68 = swift_allocError(&type metadata for ContainerError, v67, 0LL, 0LL);
    *(_OWORD *)uint64_t v69 = xmmword_1001E6900;
    *(_BYTE *)(v69 + 16) = 13;
    a5(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v68);
    swift_errorRelease();
    return;
  }

  uint64_t v237 = a5;
  uint64_t v239 = a6;
  id v27 = *(id *)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  NSString v28 = [v26 sponsorID];
  if (!v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    char v30 = v29;
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
  }

  v241[0] = 0LL;
  id v38 = [v27 peerWithID:v28 error:v241];

  uint64_t v39 = v241[0];
  if (!v241[0])
  {
    if (!v38)
    {
      id v171 = [v26 sponsorID];
      uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(v171);
      uint64_t v174 = v173;

      unint64_t v175 = sub_100043F74();
      uint64_t v176 = swift_allocError(&type metadata for ContainerError, v175, 0LL, 0LL);
      *(void *)uint64_t v177 = v172;
      *(void *)(v177 + 8) = v174;
      *(_BYTE *)(v177 + 16) = 0;
      a5(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v176);
      swift_errorRelease();

      return;
    }

    uint64_t v70 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
    id v71 = *(void **)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO];
    id v231 = v38;
    id v72 = [v71 egoPeerID];
    if (v72)
    {
      id v73 = v72;
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      BOOL v76 = v75;

      id v77 = [*(id *)&a7[v70] egoPeerPermanentInfo];
      if (v77)
      {
        id v85 = v77;
        uint64_t v229 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
        unint64_t v230 = v86;

        id v87 = [*(id *)&a7[v70] egoPeerPermanentInfoSig];
        if (v87)
        {
          id v88 = v87;
          uint64_t v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
          unint64_t v227 = v90;
          uint64_t v228 = v89;

          id v91 = [*(id *)&a7[v70] egoPeerStableInfo];
          if (v91)
          {
            id v92 = v91;
            uint64_t v93 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
            unint64_t v95 = v94;

            id v96 = [*(id *)&a7[v70] egoPeerStableInfoSig];
            if (v96)
            {
              BOOL v97 = v96;
              uint64_t v222 = v93;
              unint64_t v223 = v95;
              uint64_t v224 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
              unint64_t v225 = v98;

              id v226 = [objc_allocWithZone(TPECPublicKeyFactory) init];
              swift_bridgeObjectRetain(v76);
              uint64_t v99 = v74;
              id v100 = v76;
              sub_1000084E8(v229, v230);
              sub_1000084E8(v228, v227);
              v221._countAndFlagsBits = v99;
              NSString v101 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v76, v102, v103, v104, v105, v106, v107, v108);
              Class v109 = Data._bridgeToObjectiveC()().super.isa;
              Class v110 = Data._bridgeToObjectiveC()().super.isa;
              id v111 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v101 data:v109 sig:v110 keyFactory:v226];
              sub_10000852C(v228, v227);
              sub_10000852C(v229, v230);

              if (!v111)
              {
                swift_bridgeObjectRelease(v76, v112, v113, v114, v115, v116, v117, v118);
                unint64_t v181 = sub_100043F74();
                uint64_t v182 = swift_allocError(&type metadata for ContainerError, v181, 0LL, 0LL);
                *(_OWORD *)uint64_t v183 = xmmword_1001DE880;
                *(_BYTE *)(v183 + 16) = 13;
                v237(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v182);

                sub_10000852C(v229, v230);
                sub_10000852C(v228, v227);
                sub_10000852C(v222, v223);

                swift_errorRelease();
                sub_10000852C(v224, v225);

                return;
              }

              v221._object = v76;
              id v119 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
              unint64_t v120 = v223;
              sub_1000084E8(v222, v223);
              sub_1000084E8(v224, v225);
              Class v121 = Data._bridgeToObjectiveC()().super.isa;
              Class v122 = Data._bridgeToObjectiveC()().super.isa;
              id v123 = [v119 initWithData:v121 sig:v122];
              sub_10000852C(v224, v225);
              sub_10000852C(v222, v223);

              if (!v123)
              {
                swift_bridgeObjectRelease(v100, v124, v125, v126, v127, v128, v129, v130);
                unint64_t v184 = sub_100043F74();
                uint64_t v185 = swift_allocError(&type metadata for ContainerError, v184, 0LL, 0LL);
                *(_OWORD *)uint64_t v186 = xmmword_1001DEA00;
                *(_BYTE *)(v186 + 16) = 13;
                v237(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v185);

                sub_10000852C(v229, v230);
                sub_10000852C(v228, v227);
                sub_10000852C(v222, v223);

                sub_10000852C(v224, v225);
                swift_errorRelease();

                return;
              }

              uint64_t v131 = v123;
              id v132 = [v111 machineID];
              uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
              uint64_t v135 = v134;

              LOBYTE(v132) = sub_1001A372C(v133, (unint64_t)v135);
              swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
              if ((v132 & 1) != 0)
              {
                uint64_t v150 = swift_allocObject(&unk_10023A0D0, 193LL, 7LL);
                *(void *)(v150 + 16) = v237;
                *(void *)(v150 + 24) = v239;
                *(void *)(v150 + 32) = a7;
                *(Swift::String *)(v150 + 40) = v221;
                *(void *)(v150 + 56) = v111;
                *(void *)(v150 + 64) = v131;
                *(void *)(v150 + 72) = v231;
                *(void *)(v150 + 80) = a8;
                *(void *)(v150 + 88) = v26;
                *(void *)(v150 + 96) = a9;
                *(void *)(v150 + 104) = a10;
                *(void *)(v150 + 112) = v229;
                *(void *)(v150 + 120) = v230;
                *(void *)(v150 + 128) = v228;
                *(void *)(v150 + 136) = v227;
                *(void *)(v150 + 144) = a11;
                *(void *)(v150 + 152) = a12;
                *(void *)(v150 + 160) = a13;
                *(void *)(v150 + 168) = a14;
                *(void *)(v150 + 176) = a15;
                *(void *)(v150 + 184) = a16;
                *(_BYTE *)(v150 + 192) = a17 & 1;
                strcpy((char *)v241, "signing-key ");
                BYTE5(v241[1]) = 0;
                HIWORD(v241[1]) = -5120;
                String.append(_:)(v221);
                uint64_t v151 = (_TtC18TrustedPeersHelper6Client *)v241[1];
                uint64_t v232 = v241[0];
                swift_bridgeObjectRetain_n(v221._object, 3LL);
                id v238 = v231;
                sub_1000084E8(v229, v230);
                sub_1000084E8(v228, v227);
                swift_bridgeObjectRetain(a16);
                swift_retain(v150);
                swift_retain(v239);
                uint64_t v152 = a7;
                id v153 = v111;
                id v154 = v131;
                swift_bridgeObjectRetain(a8);
                id v155 = v26;
                swift_bridgeObjectRetain(a9);
                swift_bridgeObjectRetain(a10);
                swift_bridgeObjectRetain(a12);
                swift_bridgeObjectRetain(a14);
                sub_10015FAA0( v232,  (uint64_t)v151,  (void (*)(char *, uint64_t))sub_100174344,  v150,  v221._countAndFlagsBits,  v221._object);

                swift_bridgeObjectRelease(v151, v156, v157, v158, v159, v160, v161, v162);
                swift_release(v150);
                swift_bridgeObjectRelease_n(v221._object, 2LL);
                sub_10000852C(v229, v230);
                sub_10000852C(v228, v227);
                sub_10000852C(v222, v223);

                sub_10000852C(v224, v225);
                swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v221._object,  v163,  v164,  v165,  v166,  v167,  v168,  v169);
                swift_release(v150);

                return;
              }

              swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v221._object,  v143,  v144,  v145,  v146,  v147,  v148,  v149);
              if (qword_100250EB8 != -1) {
                swift_once(&qword_100250EB8, sub_1000DD078);
              }
              uint64_t v187 = type metadata accessor for Logger(0LL);
              sub_100006BAC(v187, (uint64_t)qword_1002567D0);
              id v188 = v111;
              id v189 = (os_log_s *)Logger.logObject.getter(v188);
              os_log_type_t v190 = static os_log_type_t.info.getter(v189);
              if (os_log_type_enabled(v189, v190))
              {
                BOOL v191 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                uint64_t v236 = swift_slowAlloc(32LL, -1LL);
                v241[0] = v236;
                *(_DWORD *)BOOL v191 = 136446210;
                uint64_t v192 = v131;
                id v193 = v26;
                id v194 = [v188 machineID];
                uint64_t v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
                unint64_t v197 = v196;

                id v26 = v193;
                uint64_t v131 = v192;
                uint64_t v240 = sub_10017C4C4(v195, v197, v241);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v191 + 4, v191 + 12);

                uint64_t v198 = v188;
                uint64_t v199 = (_TtC18TrustedPeersHelper6Client *)v197;
                unint64_t v120 = v223;
                uint64_t v200 = v222;
                swift_bridgeObjectRelease(v199, v201, v202, v203, v204, v205, v206, v207);
                _os_log_impl( (void *)&_mh_execute_header,  v189,  v190,  "join: self machineID %{public}s not on list",  v191,  0xCu);
                swift_arrayDestroy(v236, 1LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v236, -1LL, -1LL);
                swift_slowDealloc(v191, -1LL, -1LL);

                id v208 = &selRef_setAllSelves_;
              }

              else
              {
                uint64_t v200 = v222;

                uint64_t v198 = v188;
                id v208 = &selRef_setAllSelves_;
              }

              id v209 = objc_allocWithZone(&OBJC_CLASS___SecTapToRadar);
              NSString v210 = String._bridgeToObjectiveC()();
              NSString v211 = String._bridgeToObjectiveC()();
              NSString v212 = String._bridgeToObjectiveC()();
              id v213 = [v209 initTapToRadar:v210 description:v211 radar:v212];

              [v213 trigger];
              id v214 = [v198 v208[155]];
              uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)(v214);
              uint64_t v217 = v216;

              unint64_t v218 = sub_100043F74();
              uint64_t v219 = swift_allocError(&type metadata for ContainerError, v218, 0LL, 0LL);
              *(void *)uint64_t v220 = v215;
              *(void *)(v220 + 8) = v217;
              *(_BYTE *)(v220 + 16) = 2;
              v237(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v219);

              sub_10000852C(v229, v230);
              sub_10000852C(v228, v227);
              sub_10000852C(v200, v120);

              sub_10000852C(v224, v225);
LABEL_28:
              swift_errorRelease();
              return;
            }

            sub_10000852C(v93, v95);
          }

          sub_10000852C(v228, v227);
        }

        sub_10000852C(v229, v230);
      }

      swift_bridgeObjectRelease(v76, v78, v79, v80, v81, v82, v83, v84);
    }

    unint64_t v178 = sub_100043F74();
    uint64_t v179 = swift_allocError(&type metadata for ContainerError, v178, 0LL, 0LL);
    *(_OWORD *)uint64_t v180 = xmmword_1001DE890;
    *(_BYTE *)(v180 + 16) = 13;
    v237(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v179);

    goto LABEL_28;
  }

  id v40 = (id)v241[0];

  swift_willThrow(v41);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v42 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v42, (uint64_t)qword_1002567D0);
  id v43 = v26;
  id v44 = v40;
  id v45 = v43;
  id v46 = v44;
  id v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v51 = static os_log_type_t.error.getter(v47, v48, v49, v50);
  if (os_log_type_enabled(v47, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    BOOL v234 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v235 = swift_slowAlloc(32LL, -1LL);
    v241[0] = v235;
    *(_DWORD *)uint64_t v52 = 136315394;
    id v53 = [v45 sponsorID];
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    SEL v56 = v55;

    uint64_t v240 = sub_10017C4C4(v54, (unint64_t)v56, v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v52 + 4, v52 + 12);

    swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
    *(_WORD *)(v52 + 12) = 2114;
    id v64 = v46;
    uint64_t v65 = _swift_stdlib_bridgeErrorToNSError(v64);
    uint64_t v240 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v52 + 14, v52 + 22);
    *BOOL v234 = v65;

    _os_log_impl((void *)&_mh_execute_header, v47, v51, "Error getting sponsor (%s): %{public}@", (uint8_t *)v52, 0x16u);
    uint64_t v66 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v234, 1LL, v66);
    swift_slowDealloc(v234, -1LL, -1LL);
    swift_arrayDestroy(v235, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v235, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {
  }

  id v170 = v46;
  v237(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v39);
}

uint64_t sub_100126268( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  uint64_t v25 = a3;
  if (a1)
  {
    id v66 = *(id *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v31 = swift_allocObject(&unk_10023A0F8, 201LL, 7LL);
    *(void *)(v31 + 16) = a5;
    *(void *)(v31 + 24) = a6;
    *(void *)(v31 + 32) = a7;
    *(void *)(v31 + 40) = a8;
    *(void *)(v31 + 48) = a9;
    *(void *)(v31 + 56) = a10;
    *(void *)(v31 + 64) = a11;
    *(void *)(v31 + 72) = a12;
    *(void *)(v31 + 80) = a1;
    *(void *)(v31 + 88) = a3;
    *(void *)(v31 + 96) = a4;
    *(void *)(v31 + 104) = a13;
    *(void *)(v31 + 112) = a14;
    *(void *)(v31 + 120) = a15;
    *(void *)(v31 + 128) = a16;
    *(void *)(v31 + 136) = a17;
    *(void *)(v31 + 144) = a18;
    *(void *)(v31 + 152) = a19;
    *(void *)(v31 + 160) = a20;
    *(void *)(v31 + 168) = a21;
    *(void *)(v31 + 176) = a22;
    *(void *)(v31 + 184) = a23;
    *(void *)(v31 + 192) = a24;
    *(_BYTE *)(v31 + 200) = a25 & 1;
    uint64_t v25 = swift_allocObject(&unk_10023A120, 32LL, 7LL);
    *(void *)(v25 + 16) = sub_100174438;
    *(void *)(v25 + 24) = v31;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v69 = v25;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023A138;
    id v32 = _Block_copy(aBlock);
    uint64_t v62 = v69;
    swift_bridgeObjectRetain(a11);
    id v33 = a12;
    swift_retain(a4);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a14);
    id v34 = a1;
    id v35 = a5;
    swift_bridgeObjectRetain(a7);
    id v36 = a8;
    id v37 = a9;
    id v38 = a10;
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    swift_bridgeObjectRetain(a24);
    swift_retain(v25);
    swift_bridgeObjectRetain(a20);
    swift_bridgeObjectRetain(a22);
    swift_release(v62);
    [v66 performBlockAndWait:v32];

    _Block_release(v32);
    LOBYTE(v34) = swift_isEscapingClosureAtFileLocation(v25, "", 108LL, 5562LL, 49LL, 1LL);
    swift_release(v31);
    uint64_t result = swift_release(v25);
    __break(1u);
  }

  uint64_t v40 = a2;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v41 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v41, (uint64_t)qword_1002567D0);
  swift_errorRetain(v40);
  uint64_t v42 = swift_errorRetain(v40);
  id v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v49 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v49;
    *(_DWORD *)uint64_t v48 = 136446210;
    uint64_t v70 = v40;
    swift_errorRetain(v40);
    uint64_t v50 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v51 = String.init<A>(describing:)(&v70, v50);
    id v53 = (_TtC18TrustedPeersHelper6Client *)v52;
    uint64_t v70 = sub_10017C4C4(v51, v52, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "Don't have my own peer keys; can't join: %{public}s",
      v48,
      0xCu);
    swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return ((uint64_t (*)(void, void, void *, void, uint64_t))v25)( 0LL,  0LL,  _swiftEmptyArrayStorage,  0LL,  v40);
}

uint64_t sub_1001266F4( char *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t *a4, void *a5, _TtC18TrustedPeersHelper6Client *a6, void *a7, uint8_t *a8, _TtC18TrustedPeersHelper6Client *a9, void (*a10)(void, void, void *, void, void), uint64_t a11, uint64_t a12, _TtC18TrustedPeersHelper6Client *a13, uint64_t a14, unint64_t a15, uint64_t a16, char *a17, uint8_t *a18, void *a19, uint64_t a20, void *a21, uint64_t a22, void *a23, unsigned __int8 a24)
{
  v600 = a8;
  v601 = a5;
  id v602 = a7;
  uint64_t v603 = a2;
  v606 = a1;
  v607 = a4;
  uint64_t v597 = a11;
  v598 = a10;
  v604 = a3;
  v605 = a9;
  uint64_t v578 = type metadata accessor for JoinWithVoucherRequest(0LL);
  __chkstk_darwin(v578, v25);
  v584 = (char *)&v562 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v575 = type metadata accessor for Metrics(0LL);
  __chkstk_darwin(v575, v27);
  uint64_t v583 = (uint64_t)&v562 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for SignedVoucher(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  uint64_t v591 = (uint64_t)&v562 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_100007578(&qword_100256CA0);
  uint64_t v35 = __chkstk_darwin(v33, v34);
  uint64_t v572 = (uint64_t)&v562 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35, v37);
  uint64_t v571 = (uint64_t)&v562 - v38;
  uint64_t v574 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v573 = *(void *)(v574 - 8);
  uint64_t v40 = __chkstk_darwin(v574, v39);
  v568 = (_OWORD *)((char *)&v562 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v40, v42);
  v567 = (_OWORD *)((char *)&v562 - v43);
  uint64_t v44 = type metadata accessor for Bottle(0LL);
  uint64_t v46 = __chkstk_darwin(v44, v45);
  uint64_t v586 = (uint64_t)&v562 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v46, v48);
  v587 = (objc_class *)((char *)&v562 - v49);
  uint64_t v50 = sub_100007578(&qword_100251F18);
  uint64_t v52 = __chkstk_darwin(v50, v51);
  uint64_t v570 = (uint64_t)&v562 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = __chkstk_darwin(v52, v54);
  uint64_t v569 = (uint64_t)&v562 - v56;
  uint64_t v58 = __chkstk_darwin(v55, v57);
  v589 = (char *)&v562 - v59;
  __chkstk_darwin(v58, v60);
  v593 = (char *)&v562 - v61;
  uint64_t v595 = type metadata accessor for SignedPeerStableInfo(0LL);
  v592 = *(_TtC18TrustedPeersHelper6Client **)(v595 - 8);
  uint64_t v63 = __chkstk_darwin(v595, v62);
  v566 = (_OWORD *)((char *)&v562 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v66 = __chkstk_darwin(v63, v65);
  v565 = (_OWORD *)((char *)&v562 - v67);
  uint64_t v69 = __chkstk_darwin(v66, v68);
  v588 = (_OWORD *)((char *)&v562 - v70);
  __chkstk_darwin(v69, v71);
  id v73 = (char *)&v562 - v72;
  uint64_t v594 = type metadata accessor for Peer(0LL);
  uint64_t v576 = *(void *)(v594 - 8);
  uint64_t v74 = *(void *)(v576 + 64);
  uint64_t v76 = __chkstk_darwin(v594, v75);
  uint64_t v577 = (uint64_t)&v562 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = __chkstk_darwin(v76, v77);
  v579 = (char *)&v562 - v79;
  uint64_t v81 = __chkstk_darwin(v78, v80);
  uint64_t v581 = (uint64_t)&v562 - v82;
  uint64_t v84 = __chkstk_darwin(v81, v83);
  uint64_t v580 = (uint64_t)&v562 - v85;
  uint64_t v87 = __chkstk_darwin(v84, v86);
  uint64_t v585 = (uint64_t)&v562 - v88;
  uint64_t v90 = __chkstk_darwin(v87, v89);
  uint64_t v582 = (uint64_t)&v562 - v91;
  uint64_t v93 = __chkstk_darwin(v90, v92);
  unint64_t v95 = (char *)&v562 - v94;
  uint64_t v97 = __chkstk_darwin(v93, v96);
  uint64_t v99 = (char *)&v562 - v98;
  __chkstk_darwin(v97, v100);
  uint64_t v596 = (uint64_t)&v562 - v101;
  v590 = a6;
  id v102 = -[Client peerID](a6, "peerID");
  v599 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
  int64_t v104 = v103;

  uint64_t v105 = sub_100007578(&qword_100257008);
  id v106 = *(char **)(v30 + 72);
  uint64_t v107 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v108 = (v107 + 32) & ~v107;
  uint64_t v109 = swift_allocObject(v105, &v106[v108], v107 | 7);
  *(_OWORD *)(v109 + 16) = xmmword_1001DE710;
  v611 = v600;
  uint64_t v110 = sub_1000077B8( &qword_100257010,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
  uint64_t v111 = (uint64_t)v99;
  static Message.with(_:)(sub_1001744A4, v610, v29, v110);
  id v112 = sub_100123BD4((uint64_t)v99, v603, (uint64_t)v604, v607, v601, v599, v104, (uint64_t)v602, v109, (uint64_t)v605);
  v563 = v95;
  uint64_t v564 = v108;
  v601 = v106;
  uint64_t v562 = v74;
  swift_bridgeObjectRelease(v104, v113, v114, v115, v116, v117, v118, v119);
  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v109, v120, v121, v122, v123, v124, v125, v126);
  uint64_t v127 = v596;
  sub_100041608(v111, v596, type metadata accessor for Peer);
  v599 = (void *)(v127 + *(int *)(v594 + 32));
  uint64_t v128 = (uint64_t)v593;
  sub_10000FC68((uint64_t)v599, (uint64_t)v593, &qword_100251F18);
  v600 = *(uint8_t **)v592[1].endpoint;
  int v129 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v600)(v128, 1LL, v595);
  id v602 = v112;
  if (v129 == 1)
  {
    *(_OWORD *)id v73 = xmmword_1001DE6F0;
    *((_OWORD *)v73 + 1) = xmmword_1001DE6F0;
    id v130 = v112;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v128, &qword_100251F18);
  }

  else
  {
    sub_100041608(v128, (uint64_t)v73, type metadata accessor for SignedPeerStableInfo);
    id v131 = v112;
  }

  uint64_t v132 = *(void *)v73;
  unint64_t v133 = *((void *)v73 + 1);
  uint64_t v134 = (uint64_t)v73;
  uint64_t v135 = *((void *)v73 + 2);
  unint64_t v136 = *((void *)v73 + 3);
  id v137 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  sub_1000084E8(v132, v133);
  sub_1000084E8(v135, v136);
  v138.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v140 = (char *)[v137 initWithData:v138.super.isa sig:isa];
  sub_10000852C(v135, v136);
  sub_10000852C(v132, v133);

  sub_1000415CC(v134, type metadata accessor for SignedPeerStableInfo);
  if (v140)
  {
    BOOL v141 = (os_log_s *)[v607 epoch];
    id v142 = v602;
    if (((unint64_t)v141 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
      swift_once(&qword_100250EB8, sub_1000DD078);
      uint64_t v144 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v144, (uint64_t)qword_1002567D0);
      swift_errorRetain(0LL);
      uint64_t v145 = swift_errorRetain(0LL);
      __int128 v146 = (os_log_s *)Logger.logObject.getter(v145);
      os_log_type_t v150 = static os_log_type_t.error.getter(v146, v147, v148, v149);
      if (os_log_type_enabled(v146, v150))
      {
        uint64_t v151 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v152 = (void *)swift_slowAlloc(32LL, -1LL);
        id v612 = v152;
        *(_DWORD *)uint64_t v151 = 136446210;
        v608 = 0LL;
        swift_errorRetain(0LL);
        uint64_t v153 = sub_100007578(&qword_100251D70);
        uint64_t v154 = String.init<A>(describing:)(&v608, v153);
        id v155 = v140;
        id v157 = (_TtC18TrustedPeersHelper6Client *)v156;
        v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v154, v156, (uint64_t *)&v612);
        id v142 = v602;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v151 + 4, v151 + 12);
        int64_t v158 = v157;
        id v140 = v155;
        swift_bridgeObjectRelease(v158, v159, v160, v161, v162, v163, v164, v165);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v146,  v150,  "Unable to process keys before joining: %{public}s",  v151,  0xCu);
        swift_arrayDestroy(v152, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v152, -1LL, -1LL);
        swift_slowDealloc(v151, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain(0LL);
      v598(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, 0LL);

      swift_errorRelease();
      swift_errorRelease();
      unint64_t v175 = type metadata accessor for Peer;
      Class v176 = v138.super.isa;
    }

    else
    {
      id v143 = v606;
      sub_100122C24(a12, a13, v605, (uint64_t)v602, v141);
      unint64_t v178 = v177;
      uint64_t v180 = v179;
      unint64_t v181 = *(void **)&v143[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
      uint64_t v182 = (uint64_t)v589;
      sub_10000FC68((uint64_t)v599, (uint64_t)v589, &qword_100251F18);
      int v183 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v600)(v182, 1LL, v595);
      v605 = v180;
      v593 = v140;
      v592 = v178;
      unint64_t v184 = v588;
      if (v183 == 1)
      {
        _OWORD *v588 = xmmword_1001DE6F0;
        v184[1] = xmmword_1001DE6F0;
        id v185 = v181;
        _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
        sub_100041590(v182, &qword_100251F18);
      }

      else
      {
        sub_100041608(v182, (uint64_t)v588, type metadata accessor for SignedPeerStableInfo);
        id v186 = v181;
      }

      uint64_t v187 = *(void *)v184;
      unint64_t v188 = *((void *)v184 + 1);
      uint64_t v189 = *((void *)v184 + 2);
      unint64_t v190 = *((void *)v184 + 3);
      id v191 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
      sub_1000084E8(v187, v188);
      sub_1000084E8(v189, v190);
      Class v192 = Data._bridgeToObjectiveC()().super.isa;
      Class v193 = Data._bridgeToObjectiveC()().super.isa;
      id v194 = [v191 initWithData:v192 sig:v193];
      sub_10000852C(v189, v190);
      sub_10000852C(v187, v188);

      sub_1000415CC((uint64_t)v184, type metadata accessor for SignedPeerStableInfo);
      NSString v195 = -[Client peerID](v590, "peerID");
      if (!v195)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        unint64_t v197 = v196;
        NSString v195 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v197, v198, v199, v200, v201, v202, v203, v204);
      }

      id v612 = 0LL;
      unsigned int v205 = [v181 checkIntroductionForCandidate:v607 stableInfo:v194 withSponsorID:v195 error:&v612];

      id v206 = v612;
      id v214 = v602;
      uint64_t v215 = v593;
      if (v205)
      {
        uint64_t v216 = v586;
        uint64_t v217 = v604;
        sub_100142BBC(v603, v604, v586);
        sub_100041608(v216, (uint64_t)v587, type metadata accessor for Bottle);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v249 = type metadata accessor for Logger(0LL);
        uint64_t v250 = (void *)sub_100006BAC(v249, (uint64_t)qword_1002567D0);
        uint64_t v251 = swift_bridgeObjectRetain_n(v217, 2LL);
        v599 = v250;
        uint64_t v252 = (os_log_s *)Logger.logObject.getter(v251);
        os_log_type_t v253 = static os_log_type_t.info.getter(v252);
        BOOL v254 = os_log_type_enabled(v252, v253);
        v590 = 0LL;
        v589 = a17;
        if (v254)
        {
          uint64_t v255 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v256 = (void *)swift_slowAlloc(32LL, -1LL);
          id v612 = v256;
          *(_DWORD *)uint64_t v255 = 136446210;
          uint64_t v257 = v604;
          swift_bridgeObjectRetain(v604);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v603, (unint64_t)v257, (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v255 + 4, v255 + 12);
          swift_bridgeObjectRelease_n(v257, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v252, v253, "Beginning join for peer %{public}s", v255, 0xCu);
          swift_arrayDestroy(v256, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v256, -1LL, -1LL);
          swift_slowDealloc(v255, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v217, 2LL);
        }

        sub_1000084E8(a14, a15);
        uint64_t v258 = sub_1000084E8(a14, a15);
        uint64_t v259 = (os_log_s *)Logger.logObject.getter(v258);
        os_log_type_t v260 = static os_log_type_t.info.getter(v259);
        if (os_log_type_enabled(v259, v260))
        {
          v261 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v262 = (void *)swift_slowAlloc(32LL, -1LL);
          id v612 = v262;
          *(_DWORD *)v261 = 136446210;
          Swift::String v263 = Data.base64EncodedString(options:)(0LL);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v263._countAndFlagsBits,  (unint64_t)v263._object,  (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v261 + 4, v261 + 12);
          swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v263._object,  v264,  v265,  v266,  v267,  v268,  v269,  v270);
          sub_10000852C(a14, a15);
          sub_10000852C(a14, a15);
          _os_log_impl((void *)&_mh_execute_header, v259, v260, "Join permanentInfo: %{public}s", v261, 0xCu);
          swift_arrayDestroy(v262, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v262, -1LL, -1LL);
          swift_slowDealloc(v261, -1LL, -1LL);
        }

        else
        {
          sub_10000852C(a14, a15);
          sub_10000852C(a14, a15);
        }

        uint64_t v271 = v596;
        uint64_t v272 = v564;
        unint64_t v273 = (unint64_t)v589;
        sub_1000084E8(a16, (unint64_t)v589);
        uint64_t v274 = sub_1000084E8(a16, v273);
        unint64_t v275 = (os_log_s *)Logger.logObject.getter(v274);
        os_log_type_t v276 = static os_log_type_t.info.getter(v275);
        if (os_log_type_enabled(v275, v276))
        {
          v277 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v278 = (void *)swift_slowAlloc(32LL, -1LL);
          id v612 = v278;
          *(_DWORD *)v277 = 136446210;
          Swift::String v279 = Data.base64EncodedString(options:)(0LL);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v279._countAndFlagsBits,  (unint64_t)v279._object,  (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v277 + 4, v277 + 12);
          swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v279._object,  v280,  v281,  v282,  v283,  v284,  v285,  v286);
          sub_10000852C(a16, v273);
          uint64_t v272 = v564;
          sub_10000852C(a16, v273);
          _os_log_impl((void *)&_mh_execute_header, v275, v276, "Join permanentInfoSig: %{public}s", v277, 0xCu);
          swift_arrayDestroy(v278, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v278, -1LL, -1LL);
          swift_slowDealloc(v277, -1LL, -1LL);
        }

        else
        {
          sub_10000852C(a16, v273);
          sub_10000852C(a16, v273);
        }

        uint64_t v287 = v585;
        uint64_t v288 = v595;
        uint64_t v289 = v582;
        uint64_t v290 = (uint64_t)v563;
        uint64_t v291 = sub_10004164C(v271, (uint64_t)v563, type metadata accessor for Peer);
        v292 = (os_log_s *)Logger.logObject.getter(v291);
        os_log_type_t v293 = static os_log_type_t.info.getter(v292);
        if (os_log_type_enabled(v292, v293))
        {
          v294 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v295 = (void *)swift_slowAlloc(32LL, -1LL);
          uint64_t v296 = v290;
          v297 = v295;
          id v612 = v295;
          *(_DWORD *)v294 = 136446210;
          uint64_t v298 = v569;
          sub_10000FC68(v296 + *(int *)(v594 + 32), v569, &qword_100251F18);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v600)(v298, 1LL, v288) == 1)
          {
            v299 = v565;
            _OWORD *v565 = xmmword_1001DE6F0;
            v299[1] = xmmword_1001DE6F0;
            _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
            sub_100041590(v298, &qword_100251F18);
          }

          else
          {
            v299 = v565;
            sub_100041608(v298, (uint64_t)v565, type metadata accessor for SignedPeerStableInfo);
          }

          uint64_t v300 = *(void *)v299;
          unint64_t v301 = *((void *)v299 + 1);
          sub_1000084E8(*(void *)v299, v301);
          sub_1000415CC((uint64_t)v299, type metadata accessor for SignedPeerStableInfo);
          Swift::String v302 = Data.base64EncodedString(options:)(0LL);
          sub_10000852C(v300, v301);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v302._countAndFlagsBits,  (unint64_t)v302._object,  (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v294 + 4, v294 + 12);
          swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v302._object,  v303,  v304,  v305,  v306,  v307,  v308,  v309);
          sub_1000415CC((uint64_t)v563, type metadata accessor for Peer);
          _os_log_impl((void *)&_mh_execute_header, v292, v293, "Join stableInfo: %{public}s", v294, 0xCu);
          swift_arrayDestroy(v297, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v297, -1LL, -1LL);
          swift_slowDealloc(v294, -1LL, -1LL);

          uint64_t v272 = v564;
          uint64_t v287 = v585;
          uint64_t v288 = v595;
          uint64_t v289 = v582;
        }

        else
        {
          sub_1000415CC(v290, type metadata accessor for Peer);
        }

        uint64_t v310 = sub_10004164C(v271, v289, type metadata accessor for Peer);
        v311 = (os_log_s *)Logger.logObject.getter(v310);
        os_log_type_t v312 = static os_log_type_t.info.getter(v311);
        if (os_log_type_enabled(v311, v312))
        {
          v313 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v314 = (void *)swift_slowAlloc(32LL, -1LL);
          id v612 = v314;
          *(_DWORD *)v313 = 136446210;
          uint64_t v315 = v570;
          sub_10000FC68(v289 + *(int *)(v594 + 32), v570, &qword_100251F18);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v600)(v315, 1LL, v288) == 1)
          {
            v316 = v566;
            _OWORD *v566 = xmmword_1001DE6F0;
            v316[1] = xmmword_1001DE6F0;
            _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
            sub_100041590(v315, &qword_100251F18);
          }

          else
          {
            v316 = v566;
            sub_100041608(v315, (uint64_t)v566, type metadata accessor for SignedPeerStableInfo);
          }

          uint64_t v317 = *((void *)v316 + 2);
          unint64_t v318 = *((void *)v316 + 3);
          sub_1000084E8(v317, v318);
          sub_1000415CC((uint64_t)v316, type metadata accessor for SignedPeerStableInfo);
          Swift::String v319 = Data.base64EncodedString(options:)(0LL);
          sub_10000852C(v317, v318);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v319._countAndFlagsBits,  (unint64_t)v319._object,  (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v313 + 4, v313 + 12);
          swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v319._object,  v320,  v321,  v322,  v323,  v324,  v325,  v326);
          sub_1000415CC(v582, type metadata accessor for Peer);
          _os_log_impl((void *)&_mh_execute_header, v311, v312, "Join stableInfoSig: %{public}s", v313, 0xCu);
          swift_arrayDestroy(v314, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v314, -1LL, -1LL);
          swift_slowDealloc(v313, -1LL, -1LL);

          uint64_t v272 = v564;
          uint64_t v287 = v585;
        }

        else
        {
          sub_1000415CC(v289, type metadata accessor for Peer);
        }

        uint64_t v327 = sub_10004164C(v271, v287, type metadata accessor for Peer);
        v328 = (os_log_s *)Logger.logObject.getter(v327);
        os_log_type_t v329 = static os_log_type_t.info.getter(v328);
        if (os_log_type_enabled(v328, v329))
        {
          v330 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v331 = (void *)swift_slowAlloc(32LL, -1LL);
          id v612 = v331;
          *(_DWORD *)v330 = 136446210;
          uint64_t v332 = v571;
          sub_10000FC68(v287 + *(int *)(v594 + 36), v571, &qword_100256CA0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v573 + 48))(v332, 1LL, v574) == 1)
          {
            v333 = v567;
            _OWORD *v567 = xmmword_1001DE6F0;
            v333[1] = xmmword_1001DE6F0;
            _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
            sub_100041590(v332, &qword_100256CA0);
          }

          else
          {
            v333 = v567;
            sub_100041608(v332, (uint64_t)v567, type metadata accessor for SignedPeerDynamicInfo);
          }

          uint64_t v334 = *(void *)v333;
          unint64_t v335 = *((void *)v333 + 1);
          sub_1000084E8(*(void *)v333, v335);
          sub_1000415CC((uint64_t)v333, type metadata accessor for SignedPeerDynamicInfo);
          Swift::String v336 = Data.base64EncodedString(options:)(0LL);
          sub_10000852C(v334, v335);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v336._countAndFlagsBits,  (unint64_t)v336._object,  (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v330 + 4, v330 + 12);
          swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v336._object,  v337,  v338,  v339,  v340,  v341,  v342,  v343);
          sub_1000415CC(v585, type metadata accessor for Peer);
          _os_log_impl((void *)&_mh_execute_header, v328, v329, "Join dynamicInfo: %{public}s", v330, 0xCu);
          swift_arrayDestroy(v331, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v331, -1LL, -1LL);
          swift_slowDealloc(v330, -1LL, -1LL);

          uint64_t v272 = v564;
        }

        else
        {
          sub_1000415CC(v287, type metadata accessor for Peer);
        }

        uint64_t v344 = v580;
        uint64_t v345 = sub_10004164C(v271, v580, type metadata accessor for Peer);
        v346 = (os_log_s *)Logger.logObject.getter(v345);
        os_log_type_t v347 = static os_log_type_t.info.getter(v346);
        if (os_log_type_enabled(v346, v347))
        {
          v348 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v349 = (void *)swift_slowAlloc(32LL, -1LL);
          id v612 = v349;
          *(_DWORD *)v348 = 136446210;
          uint64_t v350 = v344 + *(int *)(v594 + 36);
          uint64_t v351 = v572;
          sub_10000FC68(v350, v572, &qword_100256CA0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v573 + 48))(v351, 1LL, v574) == 1)
          {
            v352 = v568;
            _OWORD *v568 = xmmword_1001DE6F0;
            v352[1] = xmmword_1001DE6F0;
            _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
            sub_100041590(v351, &qword_100256CA0);
          }

          else
          {
            v352 = v568;
            sub_100041608(v351, (uint64_t)v568, type metadata accessor for SignedPeerDynamicInfo);
          }

          uint64_t v353 = *((void *)v352 + 2);
          unint64_t v354 = *((void *)v352 + 3);
          sub_1000084E8(v353, v354);
          sub_1000415CC((uint64_t)v352, type metadata accessor for SignedPeerDynamicInfo);
          Swift::String v355 = Data.base64EncodedString(options:)(0LL);
          sub_10000852C(v353, v354);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v355._countAndFlagsBits,  (unint64_t)v355._object,  (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v348 + 4, v348 + 12);
          swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v355._object,  v356,  v357,  v358,  v359,  v360,  v361,  v362);
          sub_1000415CC(v580, type metadata accessor for Peer);
          _os_log_impl((void *)&_mh_execute_header, v346, v347, "Join dynamicInfoSig: %{public}s", v348, 0xCu);
          swift_arrayDestroy(v349, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v349, -1LL, -1LL);
          swift_slowDealloc(v348, -1LL, -1LL);

          uint64_t v272 = v564;
        }

        else
        {
          sub_1000415CC(v344, type metadata accessor for Peer);
        }

        uint64_t v363 = v581;
        uint64_t v364 = sub_10004164C(v271, v581, type metadata accessor for Peer);
        v365 = (os_log_s *)Logger.logObject.getter(v364);
        int v366 = static os_log_type_t.info.getter(v365);
        if (os_log_type_enabled(v365, (os_log_type_t)v366))
        {
          LODWORD(v595) = v366;
          v367 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v589 = (char *)swift_slowAlloc(32LL, -1LL);
          id v612 = v589;
          v600 = v367;
          *(_DWORD *)v367 = 136446210;
          v368 = *(_TtC18TrustedPeersHelper6Client **)(v363 + 16);
          int64_t v369 = *(void *)v368->endpoint;
          v370 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
          uint64_t v371 = v591;
          if (v369)
          {
            v608 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
            swift_bridgeObjectRetain(v368);
            sub_10014E670(0, v369, 0);
            uint64_t v372 = (uint64_t)&v368->_TtCs12_SwiftObject_opaque[v272];
            v370 = v608;
            do
            {
              sub_10004164C(v372, v371, type metadata accessor for SignedVoucher);
              Swift::String v373 = Data.base64EncodedString(options:)(0LL);
              sub_1000415CC(v371, type metadata accessor for SignedVoucher);
              if ((swift_isUniquelyReferenced_nonNull_native(v370) & 1) == 0)
              {
                sub_10014E670(0, *(void *)v370->endpoint + 1LL, 1);
                v370 = v608;
              }

              unint64_t v382 = *(void *)v370->endpoint;
              unint64_t v381 = *(void *)v370->containerMap;
              v383 = v601;
              if (v382 >= v381 >> 1)
              {
                sub_10014E670(v381 > 1, v382 + 1, 1);
                v383 = v601;
                v370 = v608;
              }

              *(void *)v370->endpoint = v382 + 1;
              *(Swift::String *)&v370[1]._TtCs12_SwiftObject_opaque[16 * v382] = v373;
              v372 += (uint64_t)v383;
              --v369;
              uint64_t v371 = v591;
            }

            while (v369);
            swift_bridgeObjectRelease(v368, v374, v375, v376, v377, v378, v379, v380);
            uint64_t v271 = v596;
            uint64_t v272 = v564;
          }

          v385 = v600;
          uint64_t v386 = Array.description.getter(v370, &type metadata for String);
          v388 = (_TtC18TrustedPeersHelper6Client *)v387;
          swift_bridgeObjectRelease(v370, v387, v389, v390, v391, v392, v393, v394);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v386, (unint64_t)v388, (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v385 + 4, v385 + 12);
          swift_bridgeObjectRelease(v388, v395, v396, v397, v398, v399, v400, v401);
          sub_1000415CC(v581, type metadata accessor for Peer);
          _os_log_impl((void *)&_mh_execute_header, v365, (os_log_type_t)v595, "Join vouchers: %{public}s", v385, 0xCu);
          v402 = v589;
          swift_arrayDestroy(v589, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v402, -1LL, -1LL);
          swift_slowDealloc(v385, -1LL, -1LL);

          uint64_t v384 = (uint64_t)v579;
        }

        else
        {
          sub_1000415CC(v363, type metadata accessor for Peer);

          uint64_t v384 = (uint64_t)v579;
        }

        uint64_t v403 = sub_10004164C(v271, v384, type metadata accessor for Peer);
        v404 = (os_log_s *)Logger.logObject.getter(v403);
        int v405 = static os_log_type_t.info.getter(v404);
        if (os_log_type_enabled(v404, (os_log_type_t)v405))
        {
          LODWORD(v595) = v405;
          v406 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v589 = (char *)swift_slowAlloc(32LL, -1LL);
          id v612 = v589;
          v600 = v406;
          *(_DWORD *)v406 = 136446210;
          v407 = *(_TtC18TrustedPeersHelper6Client **)(v384 + 16);
          int64_t v408 = *(void *)v407->endpoint;
          v409 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
          if (v408)
          {
            v608 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
            swift_bridgeObjectRetain(v407);
            sub_10014E670(0, v408, 0);
            uint64_t v410 = (uint64_t)&v407->_TtCs12_SwiftObject_opaque[v272];
            v409 = v608;
            do
            {
              uint64_t v411 = v591;
              sub_10004164C(v410, v591, type metadata accessor for SignedVoucher);
              Swift::String v412 = Data.base64EncodedString(options:)(0LL);
              sub_1000415CC(v411, type metadata accessor for SignedVoucher);
              if ((swift_isUniquelyReferenced_nonNull_native(v409) & 1) == 0)
              {
                sub_10014E670(0, *(void *)v409->endpoint + 1LL, 1);
                v409 = v608;
              }

              unint64_t v421 = *(void *)v409->endpoint;
              unint64_t v420 = *(void *)v409->containerMap;
              v422 = v601;
              if (v421 >= v420 >> 1)
              {
                sub_10014E670(v420 > 1, v421 + 1, 1);
                v422 = v601;
                v409 = v608;
              }

              *(void *)v409->endpoint = v421 + 1;
              *(Swift::String *)&v409[1]._TtCs12_SwiftObject_opaque[16 * v421] = v412;
              v410 += (uint64_t)v422;
              --v408;
            }

            while (v408);
            swift_bridgeObjectRelease(v407, v413, v414, v415, v416, v417, v418, v419);
            uint64_t v271 = v596;
            v423 = v605;
            uint64_t v384 = (uint64_t)v579;
          }

          else
          {
            v423 = v605;
          }

          v424 = v600;
          uint64_t v425 = Array.description.getter(v409, &type metadata for String);
          v427 = (_TtC18TrustedPeersHelper6Client *)v426;
          swift_bridgeObjectRelease(v409, v426, v428, v429, v430, v431, v432, v433);
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v425, (unint64_t)v427, (uint64_t *)&v612);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v424 + 4, v424 + 12);
          swift_bridgeObjectRelease(v427, v434, v435, v436, v437, v438, v439, v440);
          sub_1000415CC(v384, type metadata accessor for Peer);
          _os_log_impl( (void *)&_mh_execute_header,  v404,  (os_log_type_t)v595,  "Join voucher signatures: %{public}s",  v424,  0xCu);
          v441 = v589;
          swift_arrayDestroy(v589, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v441, -1LL, -1LL);
          swift_slowDealloc(v424, -1LL, -1LL);
        }

        else
        {
          sub_1000415CC(v384, type metadata accessor for Peer);

          v423 = v605;
        }

        uint64_t v442 = swift_bridgeObjectRetain(v423);
        v443 = (os_log_s *)Logger.logObject.getter(v442);
        os_log_type_t v444 = static os_log_type_t.info.getter(v443);
        if (os_log_type_enabled(v443, v444))
        {
          v445 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)v445 = 134217984;
          id v612 = *(id *)v423->endpoint;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v612, &v613, v445 + 4, v445 + 12);
          swift_bridgeObjectRelease(v423, v446, v447, v448, v449, v450, v451, v452);
          _os_log_impl((void *)&_mh_execute_header, v443, v444, "Uploading %ld tlk shares", v445, 0xCu);
          swift_slowDealloc(v445, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease(v423, v453, v454, v455, v456, v457, v458, v459);
        }

        uint64_t v460 = v594;
        v461 = v590;
        uint64_t v463 = a20;
        uint64_t v462 = (uint64_t)a21;
        v600 = a18;
        v601 = a19;
        uint64_t v464 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
        uint64_t v465 = Message.serializedData(partial:)(0LL, v460, v464);
        if (v461)
        {
          swift_errorRetain(v461);
          uint64_t v467 = swift_errorRetain(v461);
          v468 = (os_log_s *)Logger.logObject.getter(v467);
          os_log_type_t v469 = static os_log_type_t.info.getter(v468);
          if (os_log_type_enabled(v468, v469))
          {
            uint64_t v470 = swift_slowAlloc(12LL, -1LL);
            v599 = a21;
            v471 = (uint8_t *)v470;
            v472 = (void *)swift_slowAlloc(32LL, -1LL);
            uint64_t v595 = a20;
            v473 = v472;
            id v612 = v472;
            *(_DWORD *)v471 = 136446210;
            v608 = v461;
            swift_errorRetain(v461);
            uint64_t v474 = sub_100007578(&qword_100251D70);
            uint64_t v475 = String.init<A>(describing:)(&v608, v474);
            v477 = (_TtC18TrustedPeersHelper6Client *)v476;
            v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v475, v476, (uint64_t *)&v612);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v471 + 4, v471 + 12);
            swift_bridgeObjectRelease(v477, v478, v479, v480, v481, v482, v483, v484);
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v468, v469, "Join unable to encode peer: %{public}s", v471, 0xCu);
            swift_arrayDestroy(v473, 1LL, (char *)&type metadata for Any + 8);
            v485 = v473;
            uint64_t v463 = v595;
            swift_slowDealloc(v485, -1LL, -1LL);
            v486 = v471;
            uint64_t v462 = (uint64_t)v599;
            swift_slowDealloc(v486, -1LL, -1LL);

            uint64_t v487 = swift_errorRelease();
          }

          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }

          uint64_t v497 = v583;
          uint64_t v498 = v575;
        }

        else
        {
          uint64_t v489 = v465;
          unint64_t v490 = v466;
          uint64_t v595 = a20;
          v599 = a21;
          Swift::String v491 = Data.base64EncodedString(options:)(0LL);
          sub_10000852C(v489, v490);
          uint64_t v492 = swift_bridgeObjectRetain(v491._object);
          v493 = (os_log_s *)Logger.logObject.getter(v492);
          os_log_type_t v494 = static os_log_type_t.info.getter(v493);
          if (os_log_type_enabled(v493, v494))
          {
            v495 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            v496 = (void *)swift_slowAlloc(32LL, -1LL);
            id v612 = v496;
            *(_DWORD *)v495 = 136446210;
            swift_bridgeObjectRetain(v491._object);
            v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v491._countAndFlagsBits,  (unint64_t)v491._object,  (uint64_t *)&v612);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v495 + 4, v495 + 12);
            swift_bridgeObjectRelease_n(v491._object, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v493, v494, "Join peer: %{public}s", v495, 0xCu);
            swift_arrayDestroy(v496, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v496, -1LL, -1LL);
            swift_slowDealloc(v495, -1LL, -1LL);
          }

          else
          {

            uint64_t v487 = swift_bridgeObjectRelease_n(v491._object, 2LL);
          }

          uint64_t v497 = v583;
          uint64_t v498 = v575;
          uint64_t v462 = (uint64_t)v599;
          uint64_t v463 = v595;
        }

        LODWORD(v595) = a24;
        uint64_t v594 = a22;
        __chkstk_darwin(v487, v488);
        uint64_t v499 = (uint64_t)v601;
        *(&v562 - 4) = (uint64_t)v600;
        *(&v562 - 3) = v499;
        v560 = (char *)v463;
        uint64_t v561 = v462;
        uint64_t v500 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
        static Message.with(_:)(sub_100176DF4, &v562 - 6, v498, v500);
        id v501 = [*(id *)&v606[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] changeToken];
        v599 = a23;
        if (v501)
        {
          v503 = v501;
          uint64_t v504 = v271;
          uint64_t v505 = static String._unconditionallyBridgeFromObjectiveC(_:)(v501);
          unint64_t v507 = v506;
        }

        else
        {
          uint64_t v504 = v271;
          uint64_t v505 = 0LL;
          unint64_t v507 = 0xE000000000000000LL;
        }

        __chkstk_darwin(v501, v502);
        *(&v562 - 8) = v505;
        *(&v562 - 7) = v507;
        uint64_t v508 = (uint64_t)v587;
        *(&v562 - 6) = v504;
        *(&v562 - 5) = v508;
        v509 = (_TtC18TrustedPeersHelper6Client *)v507;
        v510 = v605;
        v511 = v606;
        v512 = v592;
        *(&v562 - 4) = (uint64_t)v605;
        *(&v562 - 3) = (uint64_t)v512;
        v560 = v511;
        uint64_t v561 = v497;
        uint64_t v513 = sub_1000077B8( &qword_1002526D8,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
        static Message.with(_:)(sub_1001744BC, &v562 - 10, v578, v513);
        swift_bridgeObjectRelease(v512, v514, v515, v516, v517, v518, v519, v520);
        swift_bridgeObjectRelease(v510, v521, v522, v523, v524, v525, v526, v527);
        swift_bridgeObjectRelease(v509, v528, v529, v530, v531, v532, v533, v534);
        uint64_t v535 = *(void *)&v511[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
        v605 = *(_TtC18TrustedPeersHelper6Client **)&v511[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
        uint64_t v591 = v535;
        v592 = (_TtC18TrustedPeersHelper6Client *)sub_1000084C4( &v511[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish],  (uint64_t)v605);
        uint64_t v536 = v577;
        sub_10004164C(v504, v577, type metadata accessor for Peer);
        uint64_t v537 = *(unsigned __int8 *)(v576 + 80);
        uint64_t v538 = (v537 + 65) & ~v537;
        unint64_t v539 = (v562 + v538 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v540 = (v539 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v541 = (v540 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v542 = (v541 + 23) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v543 = swift_allocObject(&unk_10023A170, v542 + 16, v537 | 7);
        v545 = v601;
        id v544 = v602;
        *(void *)(v543 + 16) = v511;
        *(void *)(v543 + 24) = v544;
        v546 = v599;
        *(void *)(v543 + 32) = v594;
        *(void *)(v543 + 40) = v546;
        *(void *)(v543 + 48) = v600;
        *(void *)(v543 + 56) = v545;
        *(_BYTE *)(v543 + 64) = v595 & 1;
        sub_100041608(v536, v543 + v538, type metadata accessor for Peer);
        v547 = v607;
        *(void *)(v543 + v539) = v607;
        v548 = v593;
        *(void *)(v543 + v540) = v593;
        v549 = (void *)(v543 + v541);
        uint64_t v550 = v597;
        void *v549 = v598;
        v549[1] = v550;
        v551 = (void *)(v543 + v542);
        v552 = v604;
        void *v551 = v603;
        v551[1] = v552;
        uint64_t v553 = *(void *)(v591 + 16);
        v554 = *(void (**)(char *, uint64_t (*)(uint64_t), uint64_t, _TtC18TrustedPeersHelper6Client *, uint64_t))(v553 + 24);
        swift_bridgeObjectRetain(v545);
        v555 = v547;
        id v556 = v548;
        swift_retain(v550);
        swift_bridgeObjectRetain(v552);
        v557 = v511;
        swift_bridgeObjectRetain(v546);
        uint64_t v558 = (uint64_t)v584;
        v554(v584, sub_100174790, v543, v605, v553);

        swift_release(v543);
        sub_1000415CC(v558, type metadata accessor for JoinWithVoucherRequest);
        sub_1000415CC(v583, type metadata accessor for Metrics);
        sub_1000415CC(v596, type metadata accessor for Peer);
        unint64_t v175 = type metadata accessor for Bottle;
        Class v176 = v587;
      }

      else
      {
        unint64_t v218 = v206;
        swift_bridgeObjectRelease(v605, v207, v208, v209, v210, v211, v212, v213);

        swift_bridgeObjectRelease(v592, v219, v220, v221, v222, v223, v224, v225);
        uint64_t v226 = _convertNSErrorToError(_:)(v218);

        swift_willThrow(v227);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v228 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v228, (uint64_t)qword_1002567D0);
        swift_errorRetain(v226);
        uint64_t v229 = swift_errorRetain(v226);
        unint64_t v230 = (os_log_s *)Logger.logObject.getter(v229);
        os_log_type_t v234 = static os_log_type_t.error.getter(v230, v231, v232, v233);
        if (os_log_type_enabled(v230, v234))
        {
          uint64_t v235 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v236 = (void *)swift_slowAlloc(32LL, -1LL);
          id v612 = v236;
          *(_DWORD *)uint64_t v235 = 136446210;
          v608 = (_TtC18TrustedPeersHelper6Client *)v226;
          swift_errorRetain(v226);
          uint64_t v237 = sub_100007578(&qword_100251D70);
          uint64_t v238 = String.init<A>(describing:)(&v608, v237);
          uint64_t v240 = (_TtC18TrustedPeersHelper6Client *)v239;
          v608 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v238, v239, (uint64_t *)&v612);
          id v214 = v602;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v608, v609, v235 + 4, v235 + 12);
          swift_bridgeObjectRelease(v240, v241, v242, v243, v244, v245, v246, v247);
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v230, v234, "Error checking introduction: %{public}s", v235, 0xCu);
          swift_arrayDestroy(v236, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v236, -1LL, -1LL);
          swift_slowDealloc(v235, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        uint64_t v248 = v596;
        swift_errorRetain(v226);
        v598(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v226);

        swift_errorRelease();
        swift_errorRelease();
        unint64_t v175 = type metadata accessor for Peer;
        Class v176 = (Class)v248;
      }
    }
  }

  else
  {
    id v166 = v602;

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v167 = type metadata accessor for Logger(0LL);
    uint64_t v168 = sub_100006BAC(v167, (uint64_t)qword_1002567D0);
    BOOL v169 = (os_log_s *)Logger.logObject.getter(v168);
    os_log_type_t v170 = static os_log_type_t.info.getter(v169);
    if (os_log_type_enabled(v169, v170))
    {
      id v171 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v171 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v169,  v170,  "Unable to create new peer stable info for joining",  v171,  2u);
      swift_slowDealloc(v171, -1LL, -1LL);
    }

    unint64_t v172 = sub_100043F74();
    uint64_t v173 = swift_allocError(&type metadata for ContainerError, v172, 0LL, 0LL);
    *(_OWORD *)uint64_t v174 = xmmword_1001DEA00;
    *(_BYTE *)(v174 + 16) = 13;
    v598(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v173);

    swift_errorRelease();
    unint64_t v175 = type metadata accessor for Peer;
    Class v176 = (Class)v127;
  }

  return sub_1000415CC((uint64_t)v176, v175);
}

uint64_t sub_100129188(uint64_t a1, id a2)
{
  id v4 = [a2 data];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  sub_10000852C(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  id v8 = [a2 sig];
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  uint64_t result = sub_10000852C(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v11;
  return result;
}

uint64_t sub_100129230( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _TtC18TrustedPeersHelper6Client *a6, _TtC18TrustedPeersHelper6Client *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v81 = a8;
  uint64_t v77 = a4;
  uint64_t v78 = a5;
  uint64_t v76 = a2;
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v82 = (uint64_t)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Bottle(0LL);
  __chkstk_darwin(v20, v21);
  char v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  uint64_t v79 = a6;
  swift_bridgeObjectRetain(a6);
  uint64_t v80 = a7;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v28)) & 1) == 0)
  {
    uint64_t v29 = *(void *)(a1 + v28);
    uint64_t v30 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    uint64_t v31 = swift_retain(v29);
    uint64_t v32 = sub_100089850(v31);
    uint64_t v33 = *(void *)(a1 + v28);
    *(void *)(a1 + v28) = v32;
    swift_release(v33);
  }

  uint64_t v34 = *(void *)(a1 + v28);
  swift_beginAccess(v34 + 16, v85, 1LL, 0LL);
  uint64_t v35 = *(_TtC18TrustedPeersHelper6Client **)(v34 + 24);
  *(void *)(v34 + 16) = v76;
  *(void *)(v34 + 24) = a3;
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  sub_10004164C(v77, (uint64_t)v27, type metadata accessor for Peer);
  JoinWithVoucherRequest.peer.setter((uint64_t)v27);
  sub_10004164C(v78, (uint64_t)v23, type metadata accessor for Bottle);
  JoinWithVoucherRequest.bottle.setter((uint64_t)v23);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v28)) & 1) == 0)
  {
    uint64_t v43 = *(void *)(a1 + v28);
    uint64_t v44 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
    uint64_t v45 = swift_retain(v43);
    uint64_t v46 = sub_100089850(v45);
    uint64_t v47 = *(void *)(a1 + v28);
    *(void *)(a1 + v28) = v46;
    swift_release(v47);
  }

  uint64_t v48 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v28)
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess(v48, v84, 1LL, 0LL);
  uint64_t v49 = *v48;
  *uint64_t v48 = v79;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v28)) & 1) == 0)
  {
    uint64_t v57 = *(void *)(a1 + v28);
    uint64_t v58 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
    uint64_t v59 = swift_retain(v57);
    uint64_t v60 = sub_100089850(v59);
    uint64_t v61 = *(void *)(a1 + v28);
    *(void *)(a1 + v28) = v60;
    swift_release(v61);
  }

  uint64_t v62 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v28)
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess(v62, v83, 1LL, 0LL);
  uint64_t v63 = *v62;
  *uint64_t v62 = v80;
  swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
  __chkstk_darwin(v71, v72);
  *(&v76 - 2) = v81;
  uint64_t v73 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  static Message.with(_:)(sub_100176B40, &v76 - 4, v16, v73);
  JoinWithVoucherRequest.trustedDevicesVersion.setter((uint64_t)v19);
  uint64_t v74 = v82;
  sub_10004164C(a9, v82, type metadata accessor for Metrics);
  return JoinWithVoucherRequest.metrics.setter(v74);
}

uint64_t sub_1001295E0( uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, void *a10, void *a11, void (*a12)(void, void, void *, void, void *), uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v92 = a8;
  uint64_t v90 = a4;
  uint64_t v91 = a6;
  id v95 = a3;
  uint64_t v96 = a5;
  uint64_t v93 = a7;
  uint64_t v94 = a13;
  uint64_t v97 = a12;
  uint64_t v98 = a2;
  uint64_t v16 = type metadata accessor for Peer(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  uint64_t v89 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for JoinWithVoucherResponse(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v83 - v27;
  uint64_t v29 = sub_100007578((uint64_t *)&unk_100256E20);
  __chkstk_darwin(v29, v30);
  uint64_t v32 = (void **)((char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v32, (uint64_t *)&unk_100256E20);
  if (swift_getEnumCaseMultiPayload(v32, v29) != 1)
  {
    uint64_t v85 = a14;
    uint64_t v86 = a15;
    uint64_t v84 = a11;
    uint64_t v83 = a10;
    uint64_t v54 = (uint64_t)v32;
    uint64_t v55 = (uint64_t)v28;
    uint64_t v88 = v28;
    sub_100041608(v54, (uint64_t)v28, type metadata accessor for JoinWithVoucherResponse);
    id v87 = *(id *)&v98[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v56 = v89;
    sub_10004164C(a9, v89, type metadata accessor for Peer);
    sub_10004164C(v55, (uint64_t)v25, type metadata accessor for JoinWithVoucherResponse);
    uint64_t v57 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v58 = (v57 + 72) & ~v57;
    unint64_t v59 = (v18 + v58 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v61 = *(unsigned __int8 *)(v21 + 80);
    uint64_t v62 = (v61 + v60 + 8) & ~v61;
    unint64_t v63 = (v22 + v62 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v64 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v65 = swift_allocObject(&unk_10023A198, v64 + 16, v57 | v61 | 7);
    uint64_t v66 = v90;
    *(void *)(v65 + 16) = v95;
    *(void *)(v65 + 24) = v66;
    uint64_t v67 = v91;
    *(void *)(v65 + 32) = v96;
    *(void *)(v65 + 40) = v67;
    uint64_t v68 = v93;
    *(void *)(v65 + 48) = v93;
    *(_BYTE *)(v65 + 56) = v92 & 1;
    *(void *)(v65 + 64) = v98;
    sub_100041608(v56, v65 + v58, type metadata accessor for Peer);
    BOOL v69 = v83;
    *(void *)(v65 + v59) = v83;
    BOOL v70 = v84;
    *(void *)(v65 + v60) = v84;
    sub_100041608((uint64_t)v25, v65 + v62, type metadata accessor for JoinWithVoucherResponse);
    uint64_t v71 = (void *)(v65 + v63);
    uint64_t v72 = v94;
    *uint64_t v71 = v97;
    v71[1] = v72;
    uint64_t v73 = (void *)(v65 + v64);
    uint64_t v74 = v86;
    *uint64_t v73 = v85;
    v73[1] = v74;
    uint64_t v75 = swift_allocObject(&unk_10023A1C0, 32LL, 7LL);
    *(void *)(v75 + 16) = sub_100174BAC;
    *(void *)(v75 + 24) = v65;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v100 = v75;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023A1D8;
    uint64_t v33 = _Block_copy(aBlock);
    uint64_t v76 = v100;
    swift_bridgeObjectRetain(v68);
    uint64_t v77 = v98;
    id v78 = v69;
    id v79 = v70;
    swift_retain(v72);
    swift_bridgeObjectRetain(v74);
    id v80 = v95;
    swift_retain(v75);
    swift_bridgeObjectRetain(v96);
    swift_release(v76);
    [v87 performBlockAndWait:v33];
    _Block_release(v33);
    sub_1000415CC((uint64_t)v88, type metadata accessor for JoinWithVoucherResponse);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v75, "", 108LL, 5659LL, 61LL, 1LL);
    swift_release(v65);
    uint64_t result = swift_release(v75);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v33 = *v32;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v34, (uint64_t)qword_1002567D0);
  swift_errorRetain(v33);
  uint64_t v35 = swift_errorRetain(v33);
  uint64_t isEscapingClosureAtFileLocation = Logger.logObject.getter(v35);
  os_log_type_t v40 = static os_log_type_t.error.getter(isEscapingClosureAtFileLocation, v37, v38, v39);
  if (!os_log_type_enabled((os_log_t)isEscapingClosureAtFileLocation, v40))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  BOOL v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v42 = swift_slowAlloc(32LL, -1LL);
  aBlock[0] = v42;
  *(_DWORD *)BOOL v41 = 136446210;
  uint64_t v101 = (uint64_t)v33;
  swift_errorRetain(v33);
  uint64_t v43 = sub_100007578(&qword_100251D70);
  uint64_t v44 = String.init<A>(describing:)(&v101, v43);
  uint64_t v46 = (_TtC18TrustedPeersHelper6Client *)v45;
  uint64_t v101 = sub_10017C4C4(v44, v45, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v41 + 4, v41 + 12);
  swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)isEscapingClosureAtFileLocation,  v40,  "joinWithVoucher failed: %{public}s",  v41,  0xCu);
  swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v42, -1LL, -1LL);
  swift_slowDealloc(v41, -1LL, -1LL);
LABEL_9:

  uint64_t v82 = v97;
  swift_errorRetain(v33);
  v82(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v33);
  swift_errorRelease();
  return swift_errorRelease();
}

void sub_100129B88( void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9, void *a10, _TtC18TrustedPeersHelper6Client **a11, void (*a12)(uint64_t, _OWORD *, _TtC18TrustedPeersHelper6Client *, id, void), uint64_t a13, uint64_t a14, _OWORD *a15)
{
  uint64_t v155 = a8;
  uint64_t v149 = a7;
  int v147 = a6;
  id v154 = a4;
  uint64_t v148 = a2;
  id v153 = a10;
  id v152 = a9;
  uint64_t v18 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v158 = v18;
  uint64_t v159 = v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  id v157 = (char *)&v140 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v23);
  unint64_t v156 = (char *)&v140 - v24;
  uint64_t v25 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v25, v26);
  uint64_t v143 = (uint64_t)&v140 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = type metadata accessor for Changes(0LL);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142, v28);
  uint64_t v144 = (uint64_t *)((char *)&v140 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = sub_100007578(&qword_100251F18);
  uint64_t v32 = __chkstk_darwin(v30, v31);
  uint64_t v150 = (uint64_t)&v140 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32, v34);
  SEL v36 = (char *)&v140 - v35;
  uint64_t v145 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v146 = *(void *)(v145 - 8);
  uint64_t v38 = __chkstk_darwin(v145, v37);
  uint64_t v151 = (_OWORD *)((char *)&v140 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v38, v40);
  uint64_t v42 = (char *)&v140 - v41;
  uint64_t v43 = sub_100007578(&qword_100256C10);
  uint64_t inited = swift_initStackObject(v43, v161);
  *(_OWORD *)(inited + 16) = xmmword_1001DE710;
  v160[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldNumberOfTrustedPeers);
  v160[1] = v45;
  AnyHashable.init<A>(_:)(v160, &type metadata for String, &protocol witness table for String);
  id v46 = [a1 includedPeerIDs];
  SEL v47 = (_TtC18TrustedPeersHelper6Client *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v46,  &type metadata for String,  &protocol witness table for String);

  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 96) = sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(inited + 72) = isa;
  unint64_t v56 = sub_10000BE44(inited);
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCEventNameNumberOfTrustedOctagonPeers);
  uint64_t v59 = v58;
  uint64_t v60 = a5;
  swift_bridgeObjectRetain(a5);
  uint64_t v61 = a3;
  swift_bridgeObjectRetain(a3);
  sub_100173F04();
  LOBYTE(v46) = v62;
  unint64_t v63 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v64 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v65 = v63;
  uint64_t v66 = v57;
  uint64_t v67 = (uint64_t)v36;
  id v68 = sub_10005F250(v56, v148, v61, (uint64_t)v154, v60, 0LL, 0LL, v66, v59, (char)v46, v147, v65);
  BOOL v69 = (void *)objc_opt_self(&OBJC_CLASS___SecurityAnalyticsReporterRTC);
  id v154 = v68;
  uint64_t v70 = v145;
  [v69 sendMetricWithEvent:v68 success:1 error:0];
  uint64_t v71 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  uint64_t v72 = v149;
  uint64_t v73 = *(void **)(v149 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  uint64_t v74 = v155 + *(int *)(type metadata accessor for Peer(0LL) + 32);
  sub_10000FC68(v74, v67, &qword_100251F18);
  uint64_t v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
  if (v75(v67, 1LL, v70) == 1)
  {
    *(_OWORD *)uint64_t v42 = xmmword_1001DE6F0;
    *((_OWORD *)v42 + 1) = xmmword_1001DE6F0;
    id v76 = v73;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v67, &qword_100251F18);
  }

  else
  {
    sub_100041608(v67, (uint64_t)v42, type metadata accessor for SignedPeerStableInfo);
    id v77 = v73;
  }

  uint64_t v155 = a13;
  uint64_t v78 = *(void *)v42;
  unint64_t v79 = *((void *)v42 + 1);
  sub_1000084E8(*(void *)v42, v79);
  sub_1000415CC((uint64_t)v42, type metadata accessor for SignedPeerStableInfo);
  Class v80 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v78, v79);
  [v73 setEgoPeerStableInfo:v80];

  uint64_t v81 = *(void **)(v72 + v71);
  uint64_t v82 = v150;
  sub_10000FC68(v74, v150, &qword_100251F18);
  if (v75(v82, 1LL, v70) == 1)
  {
    uint64_t v83 = v151;
    *uint64_t v151 = xmmword_1001DE6F0;
    v83[1] = xmmword_1001DE6F0;
    id v84 = v81;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v82, &qword_100251F18);
  }

  else
  {
    uint64_t v83 = v151;
    sub_100041608(v82, (uint64_t)v151, type metadata accessor for SignedPeerStableInfo);
    id v85 = v81;
  }

  uint64_t v86 = a12;
  uint64_t v87 = *((void *)v83 + 2);
  unint64_t v88 = *((void *)v83 + 3);
  sub_1000084E8(v87, v88);
  sub_1000415CC((uint64_t)v83, type metadata accessor for SignedPeerStableInfo);
  Class v89 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v87, v88);
  [v81 setEgoPeerStableInfoSig:v89];

  id v90 = [v152 modelID];
  LODWORD(v89) = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
  int v92 = v91;

  id v93 = sub_10011F6F8((int)v89, v92, v153);
  swift_bridgeObjectRelease(v92, v94, v95, v96, v97, v98, v99, v100);
  uint64_t v101 = type metadata accessor for JoinWithVoucherResponse(0LL);
  uint64_t v102 = v143;
  sub_10000FC68((uint64_t)a11 + *(int *)(v101 + 24), v143, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v102, 1LL, v142) == 1)
  {
    id v103 = v144;
    *uint64_t v144 = 0LL;
    v103[1] = 0xE000000000000000LL;
    v103[2] = _swiftEmptyArrayStorage;
    *(_OWORD *)(v103 + 3) = xmmword_1001DE6F0;
    *(_OWORD *)(v103 + 5) = xmmword_1001DE6F0;
    *((_BYTE *)v103 + 56) = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v102, (uint64_t *)&unk_100256C90);
  }

  else
  {
    id v103 = v144;
    sub_100041608(v102, (uint64_t)v144, type metadata accessor for Changes);
  }

  sub_10013D540((uint64_t)v103, 0);
  sub_1000415CC((uint64_t)v103, type metadata accessor for Changes);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v105 = a14;
  int64_t v104 = a15;
  uint64_t v106 = type metadata accessor for Logger(0LL);
  uint64_t v107 = sub_100006BAC(v106, (uint64_t)qword_1002567D0);
  uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
  os_log_type_t v109 = static os_log_type_t.info.getter(v108);
  if (os_log_type_enabled(v108, v109))
  {
    uint64_t v110 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v110 = 0;
    _os_log_impl((void *)&_mh_execute_header, v108, v109, "JoinWithVoucher succeeded", v110, 2u);
    swift_slowDealloc(v110, -1LL, -1LL);
  }

  uint64_t v111 = *a11;
  v160[0] = _swiftEmptyArrayStorage;
  uint64_t v112 = *(void *)v111->endpoint;
  if (v112)
  {
    uint64_t v150 = a14;
    uint64_t v151 = a15;
    id v152 = v93;
    id v153 = a12;
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    SEL v113 = &v111->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v159 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80)];
    uint64_t v114 = *(void *)(v159 + 72);
    int64_t v115 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v159 + 16);
    swift_bridgeObjectRetain(v111);
    id v116 = v156;
    do
    {
      uint64_t v125 = v158;
      v115(v116, v113, v158);
      BOOL v126 = v157;
      v115(v157, (unsigned __int8 *)v116, v125);
      uint64_t v127 = CKRecord.init(_:)(v126);
      uint64_t v128 = (*(uint64_t (**)(char *, uint64_t))(v159 + 8))(v116, v125);
      if (v127)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v128);
        unint64_t v130 = *(void *)((v160[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v129 = *(void *)((v160[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v130 >= v129 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1LL);
        }
        uint64_t v117 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v130, v127);
        specialized Array._endMutation()(v117);
      }

      v113 += v114;
      --v112;
    }

    while (v112);
    id v131 = (_TtC18TrustedPeersHelper6Client *)v160[0];
    uint64_t v86 = (void (*)(uint64_t, _OWORD *, _TtC18TrustedPeersHelper6Client *, id, void))v153;
    id v93 = v152;
    int64_t v104 = v151;
    uint64_t v105 = v150;
  }

  else
  {
    swift_bridgeObjectRetain(v111);
    id v131 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v111, v118, v119, v120, v121, v122, v123, v124);
  id v132 = v93;
  v86(v105, v104, v131, v93, 0LL);

  swift_bridgeObjectRelease(v131, v133, v134, v135, v136, v137, v138, v139);
}

void sub_10012A700( char a1, char a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v15, 41LL, 7LL);
  uint64_t v16 = v9;
  uint64_t v17 = sub_100159634(v16, 0xD00000000000005DLL, 0x80000001001FA020LL);

  uint64_t v18 = swift_allocObject(&unk_100239E78, 40LL, 7LL);
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = a8;
  *(void *)(v18 + 32) = a9;
  uint64_t v19 = qword_100250EB8;
  id v95 = (_TtC18TrustedPeersHelper6Client *)v17;
  swift_retain(v17);
  swift_retain(a9);
  if (v19 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v20, (uint64_t)qword_1002567D0);
  uint64_t v21 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v90 = a6;
    uint64_t v91 = a5;
    uint64_t v24 = swift_slowAlloc(24LL, -1LL);
    uint64_t v89 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v89;
    *(_DWORD *)uint64_t v24 = 67109634;
    LODWORD(v96) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 4, v24 + 4, v24 + 8);
    *(_WORD *)(v24 + 8) = 1024;
    LODWORD(v96) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 4, v24 + 10, v24 + 14);
    *(_WORD *)(v24 + 14) = 2082;
    uint64_t v25 = swift_bridgeObjectRetain(a3);
    uint64_t v26 = Array.description.getter(v25, &type metadata for String);
    unint64_t v28 = (unint64_t)v27;
    swift_bridgeObjectRelease(a3, v27, v29, v30, v31, v32, v33, v34);
    uint64_t v96 = sub_10017C4C4(v26, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, aBlock, v24 + 16, v24 + 24);
    swift_bridgeObjectRelease_n(a3, 2LL);
    uint64_t v35 = (_TtC18TrustedPeersHelper6Client *)v28;
    char v36 = a2;
    char v37 = a1;
    swift_bridgeObjectRelease(v35, v38, v39, v40, v41, v42, v43, v44);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "requestHealthCheck requiring escrow check: %{BOOL}d, %{BOOL}d, knownFederations: %{public}s",  (uint8_t *)v24,  0x18u);
    swift_arrayDestroy(v89, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1LL, -1LL);
    uint64_t v45 = v24;
    a6 = v90;
    a5 = v91;
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    char v36 = a2;
    char v37 = a1;
  }

  id v46 = *(void **)&v16[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v47 = swift_allocObject(&unk_100239EA0, 89LL, 7LL);
  *(void *)(v47 + 16) = v16;
  *(void *)(v47 + 24) = sub_100173D98;
  *(void *)(v47 + 32) = v18;
  *(void *)(v47 + 40) = a4;
  uint64_t v48 = a5;
  *(void *)(v47 + 48) = a5;
  *(void *)(v47 + 56) = a6;
  *(void *)(v47 + 64) = a7;
  *(_BYTE *)(v47 + 72) = v37 & 1;
  *(void *)(v47 + 80) = a3;
  *(_BYTE *)(v47 + 88) = v36 & 1;
  id v49 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239EC8, 32LL, 7LL);
  *(void *)v49->endpoint = sub_100173E18;
  *(void *)v49->containerMap = v47;
  aBlock[4] = (uint64_t)sub_100176BD4;
  id v98 = v49;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000DC9F8;
  aBlock[3] = (uint64_t)&unk_100239EE0;
  int64_t v50 = _Block_copy(aBlock);
  id v51 = v98;
  swift_bridgeObjectRetain(a7);
  swift_retain(v49);
  id v52 = v16;
  swift_bridgeObjectRetain(a3);
  swift_retain(v18);
  swift_bridgeObjectRetain(v48);
  swift_release(v51, v53, v54, v55, v56, v57, v58, v59);
  [v46 performBlockAndWait:v50];
  swift_release((_TtC18TrustedPeersHelper6Client *)v18, v60, v61, v62, v63, v64, v65, v66);
  swift_release(v95, v67, v68, v69, v70, v71, v72, v73);
  _Block_release(v50);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v49, "", 108LL, 5716LL, 33LL, 1LL);
  swift_release((_TtC18TrustedPeersHelper6Client *)v47, v75, v76, v77, v78, v79, v80, v81);
  swift_release(v49, v82, v83, v84, v85, v86, v87, v88);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
}

uint64_t sub_10012AB2C( uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v71 = a6;
  uint64_t v72 = a7;
  int v69 = a10;
  int v70 = a8;
  uint64_t v68 = a9;
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  __chkstk_darwin(RepairActionRequest, v16);
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Metrics(0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v23 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    SEL v67 = a2;
    uint64_t v26 = v25;
    uint64_t v65 = a1;
    unint64_t v28 = v27;

    uint64_t v66 = a3;
    __chkstk_darwin(v29, v30);
    *(&v65 - 4) = a4;
    *(&v65 - 3) = a5;
    uint64_t v31 = v72;
    *(&v65 - 2) = v71;
    *(&v65 - 1) = v31;
    uint64_t v32 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
    uint64_t v33 = static Message.with(_:)(sub_100173E68, &v65 - 6, v19, v32);
    __chkstk_darwin(v33, v34);
    *(&v65 - 6) = v26;
    *(&v65 - 5) = (uint64_t)v28;
    *((_BYTE *)&v65 - 32) = v70 & 1;
    *(&v65 - 3) = v68;
    *((_BYTE *)&v65 - 16) = v69 & 1;
    *(&v65 - 1) = (uint64_t)v22;
    uint64_t v35 = sub_1000077B8( &qword_100252898,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
    static Message.with(_:)(sub_100173E84, &v65 - 8, RepairActionRequest, v35);
    swift_bridgeObjectRelease(v28, v36, v37, v38, v39, v40, v41, v42);
    uint64_t v43 = *(void *)(v65 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24);
    uint64_t v44 = *(void *)(v65 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32);
    sub_1000084C4((void *)(v65 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish), v43);
    uint64_t v45 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239F18, 32LL, 7LL);
    *(void *)v45->endpoint = v67;
    uint64_t v46 = v66;
    *(void *)v45->containerMap = v66;
    uint64_t v47 = *(void *)(v44 + 16);
    uint64_t v48 = *(void (**)(char *, uint64_t (*)(uint64_t), _TtC18TrustedPeersHelper6Client *, uint64_t, uint64_t))(v47 + 88);
    swift_retain(v46);
    v48(v18, sub_100173EAC, v45, v43, v47);
    swift_release(v45, v49, v50, v51, v52, v53, v54, v55);
    sub_1000415CC((uint64_t)v18, type metadata accessor for GetRepairActionRequest);
    return sub_1000415CC((uint64_t)v22, type metadata accessor for Metrics);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    uint64_t v58 = sub_100006BAC(v57, (uint64_t)qword_1002567D0);
    id v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.info.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "requestHealthCheck: No identity.", v61, 2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    unint64_t v62 = sub_100043F74();
    uint64_t v63 = swift_allocError(&type metadata for ContainerError, v62, 0LL, 0LL);
    *(_OWORD *)uint64_t v64 = xmmword_1001DE890;
    *(_BYTE *)(v64 + 16) = 13;
    a2(0LL, v63);
    return swift_errorRelease();
  }

uint64_t sub_10012AEF4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (a3) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = 0xE000000000000000LL;
  }
  uint64_t v10 = a1[1];
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v10);
  *a1 = v8;
  a1[1] = v9;
  if (a5)
  {
    unint64_t v11 = a5;
  }

  else
  {
    a4 = 0LL;
    unint64_t v11 = 0xE000000000000000LL;
  }

  uint64_t v12 = a1[3];
  swift_bridgeObjectRetain(a5);
  uint64_t result = swift_bridgeObjectRelease(v12);
  a1[2] = a4;
  a1[3] = v11;
  return result;
}

uint64_t sub_10012AF84(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v37 = a7;
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 8);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = a4;
  uint64_t v26 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 24);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
  *(void *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = a6;
  sub_10004164C(v37, (uint64_t)v17, type metadata accessor for Metrics);
  uint64_t v34 = a1 + *(int *)(type metadata accessor for GetRepairActionRequest(0LL) + 36);
  sub_100041590(v34, &qword_100257000);
  sub_100041608((uint64_t)v17, v34, type metadata accessor for Metrics);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v34, 0LL, 1LL, v13);
}

uint64_t sub_10012B0B8(uint64_t a1, void (*a2)(id, void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  uint64_t v134 = *(void *)(v6 - 8);
  int64_t v135 = (int *)v6;
  uint64_t v8 = __chkstk_darwin(v6, v7);
  SEL v133 = &v122[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = __chkstk_darwin(v8, v10);
  id v131 = &v122[-v12];
  __chkstk_darwin(v11, v13);
  unint64_t v129 = &v122[-v14];
  uint64_t v15 = sub_100007578((uint64_t *)&unk_100256FF0);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  id v132 = &v122[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = __chkstk_darwin(v17, v19);
  unint64_t v130 = &v122[-v21];
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v128 = &v122[-v24];
  __chkstk_darwin(v23, v25);
  SEL v27 = &v122[-v26];
  uint64_t RepairActionResponse = type metadata accessor for GetRepairActionResponse(0LL);
  __chkstk_darwin(RepairActionResponse, v29);
  id v31 = &v122[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v32 = sub_100007578(&qword_100251E08);
  __chkstk_darwin(v32, v33);
  uint64_t v35 = &v122[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10000FC68(a1, (uint64_t)v35, &qword_100251E08);
  if (swift_getEnumCaseMultiPayload(v35, v32) == 1)
  {
    uint64_t v36 = *v35;
    swift_errorRetain(*v35);
    a2(0LL, v36);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    uint64_t v126 = a3;
    uint64_t v127 = (void (*)(id, void))a2;
    sub_100041608((uint64_t)v35, (uint64_t)v31, type metadata accessor for GetRepairActionResponse);
    uint64_t v38 = *(int *)(RepairActionResponse + 20);
    uint64_t v39 = *(void *)&v31[v38];
    swift_beginAccess(v39 + 16, v153, 0LL, 0LL);
    id v40 = v31;
    if (*(_BYTE *)(v39 + 24) == 1)
    {
      uint64_t v41 = *(void *)(v39 + 16) & 0x3FLL;
      LODWORD(v125) = v41 == 4;
      HIDWORD(v125) = v41 == 5;
      LODWORD(v124) = v41 == 2;
      HIDWORD(v124) = v41 == 3;
      BOOL v123 = v41 == 1;
    }

    else
    {
      uint64_t v124 = 0LL;
      uint64_t v125 = 0LL;
      BOOL v123 = 0;
    }

    uint64_t v43 = v134;
    BOOL v42 = v135;
    uint64_t v44 = v39
        + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
    swift_beginAccess( v39 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest,  v152,  0LL,  0LL);
    sub_10000FC68(v44, (uint64_t)v27, (uint64_t *)&unk_100256FF0);
    uint64_t v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v43 + 48);
    LODWORD(v44) = v45(v27, 1LL, v42);
    sub_100041590((uint64_t)v27, (uint64_t *)&unk_100256FF0);
    uint64_t v46 = 0LL;
    if ((_DWORD)v44 != 1)
    {
      uint64_t v46 = (int *)[objc_allocWithZone((Class)OTEscrowMoveRequestContext) init];
      if (v46)
      {
        uint64_t v47 = *(void *)&v40[v38]
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
        swift_beginAccess(v47, &v138, 0LL, 0LL);
        uint64_t v48 = v128;
        sub_10000FC68(v47, (uint64_t)v128, (uint64_t *)&unk_100256FF0);
        if (v45(v48, 1LL, v42) == 1)
        {
          SEL v49 = v129;
          *unint64_t v129 = 0LL;
          v49[1] = 0xE000000000000000LL;
          v49[2] = 0LL;
          v49[3] = 0xE000000000000000LL;
          v49[4] = 0LL;
          v49[5] = 0xE000000000000000LL;
          id v50 = v46;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          id v51 = (char *)v49 + v42[8];
          uint64_t v52 = type metadata accessor for Metrics(0LL);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v51, 1LL, 1LL, v52);
          sub_100041590((uint64_t)v48, (uint64_t *)&unk_100256FF0);
        }

        else
        {
          SEL v49 = v129;
          sub_100041608((uint64_t)v48, (uint64_t)v129, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
          id v53 = v46;
        }

        uint64_t v54 = (uint64_t)v130;
        id v55 = (_TtC18TrustedPeersHelper6Client *)v49[1];
        swift_bridgeObjectRetain(v55);
        sub_1000415CC((uint64_t)v49, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
        NSString v56 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v55, v57, v58, v59, v60, v61, v62, v63);
        [v46 setEscrowRecordLabel:v56];

        uint64_t v64 = *(void *)&v40[v38]
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
        swift_beginAccess(v64, &v137, 0LL, 0LL);
        sub_10000FC68(v64, v54, (uint64_t *)&unk_100256FF0);
        if (v45((_BYTE *)v54, 1LL, v42) == 1)
        {
          uint64_t v65 = v131;
          *id v131 = 0LL;
          v65[1] = 0xE000000000000000LL;
          v65[2] = 0LL;
          v65[3] = 0xE000000000000000LL;
          v65[4] = 0LL;
          v65[5] = 0xE000000000000000LL;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          uint64_t v66 = (char *)v65 + v42[8];
          uint64_t v67 = type metadata accessor for Metrics(0LL);
          uint64_t v68 = v66;
          int v69 = v65;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56LL))(v68, 1LL, 1LL, v67);
          sub_100041590(v54, (uint64_t *)&unk_100256FF0);
        }

        else
        {
          int v69 = v131;
          sub_100041608(v54, (uint64_t)v131, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
        }

        int v70 = v133;
        uint64_t v71 = v42;
        uint64_t v72 = (_TtC18TrustedPeersHelper6Client *)v69[3];
        swift_bridgeObjectRetain(v72);
        sub_1000415CC((uint64_t)v69, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
        NSString v73 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v72, v74, v75, v76, v77, v78, v79, v80);
        [v46 setCurrentFederation:v73];

        uint64_t v81 = *(void *)&v40[v38]
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
        swift_beginAccess(v81, &v136, 0LL, 0LL);
        SEL v82 = v132;
        sub_10000FC68(v81, (uint64_t)v132, (uint64_t *)&unk_100256FF0);
        if (v45(v82, 1LL, v71) == 1)
        {
          *int v70 = 0LL;
          v70[1] = 0xE000000000000000LL;
          v70[2] = 0LL;
          v70[3] = 0xE000000000000000LL;
          v70[4] = 0LL;
          v70[5] = 0xE000000000000000LL;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          id v83 = (char *)v70 + v71[8];
          uint64_t v84 = type metadata accessor for Metrics(0LL);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56LL))(v83, 1LL, 1LL, v84);
          sub_100041590((uint64_t)v82, (uint64_t *)&unk_100256FF0);
        }

        else
        {
          sub_100041608((uint64_t)v82, (uint64_t)v70, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
        }

        id v85 = (_TtC18TrustedPeersHelper6Client *)v70[5];
        swift_bridgeObjectRetain(v85);
        sub_1000415CC((uint64_t)v70, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
        NSString v86 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v85, v87, v88, v89, v90, v91, v92, v93);
        [v46 setIntendedFederation:v86];
      }
    }

    int64_t v135 = v46;
    uint64_t v94 = *(void *)&v40[v38];
    id v95 = (uint64_t *)(v94
                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords,  v151,  0LL,  0LL);
    uint64_t v134 = *v95;
    uint64_t v96 = (_BYTE **)(v94
                   + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords,  v150,  0LL,  0LL);
    SEL v133 = *v96;
    id v97 = (_BYTE **)(v94
                   + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords,  v149,  0LL,  0LL);
    id v132 = *v97;
    id v98 = (unsigned __int8 *)(v94
                            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled,  v148,  0LL,  0LL);
    LODWORD(v131) = *v98;
    BOOL v99 = (_BYTE **)(v94
                   + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares,  v147,  0LL,  0LL);
    unint64_t v130 = *v99;
    BOOL v100 = (void **)(v94
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares,  &v146,  0LL,  0LL);
    unint64_t v129 = *v100;
    uint64_t v101 = (uint64_t *)(v94
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares,  &v145,  0LL,  0LL);
    uint64_t v102 = *v101;
    id v103 = (char *)(v94
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled,  &v144,  0LL,  0LL);
    char v104 = *v103;
    uint64_t v105 = (uint64_t *)(v94
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers,  &v143,  0LL,  0LL);
    uint64_t v106 = *v105;
    uint64_t v107 = (uint64_t *)(v94
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers,  &v142,  0LL,  0LL);
    uint64_t v108 = *v107;
    os_log_type_t v109 = (uint64_t *)(v94
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers,  &v141,  0LL,  0LL);
    uint64_t v110 = *v109;
    uint64_t v111 = (uint64_t *)(v94
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup,  &v140,  0LL,  0LL);
    uint64_t v112 = (uint64_t)v40;
    uint64_t v113 = *v111;
    uint64_t v114 = (_BYTE *)(v94
                   + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
    swift_beginAccess( v94 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled,  &v139,  0LL,  0LL);
    LOBYTE(v114) = *v114;
    id v115 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperHealthCheckResult);
    LOBYTE(v121) = (_BYTE)v114;
    uint64_t v120 = v106;
    LOBYTE(v119) = v104;
    LOBYTE(v118) = (_BYTE)v131;
    id v116 = v135;
    id v117 = [v115 initWithPostRepairCFU:v123 postEscrowCFU:v124 resetOctagon:HIDWORD(v124) leaveTrust:v125 reroll:HIDWORD(v125) moveRequest:v135 totalEscrowRecords:v134 collectab leEscrowRecords:v133 collectedEscrowRecords:v132 escrowRecordGarbageCollectionEnabled:v118 totalTlkShares:v130 collectableTlkSh ares:v129 collectedTlkShares:v102 tlkShareGarbageCollectionEnabled:v119 totalPeers:v120 trustedPeers:v108 superfluousPeers:v110 peersClea nedup:v113 superfluousPeersCleanupEnabled:v121];
    v127(v117, 0LL);

    return sub_1000415CC(v112, type metadata accessor for GetRepairActionResponse);
  }

uint64_t sub_10012B9F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void), uint64_t a6)
{
  return sub_1001473C0( a1,  a2,  a3,  a4,  a5,  a6,  "getSupportAppInfo complete: %{public}s",  0xD000000000000019LL,  0x80000001001F9630LL);
}

uint64_t sub_10012BA30(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t))
{
  uint64_t SupportAppInfoResponse = type metadata accessor for GetSupportAppInfoResponse(0LL);
  __chkstk_darwin(SupportAppInfoResponse, v5);
  uint64_t v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_100007578((uint64_t *)&unk_100256CF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (uint64_t *)&v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10000FC68(a1, (uint64_t)v11, (uint64_t *)&unk_100256CF0);
  if (swift_getEnumCaseMultiPayload(v11, v8) == 1)
  {
    uint64_t v12 = *v11;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v13, (uint64_t)qword_1002567D0);
    swift_errorRetain(v12);
    uint64_t v14 = swift_errorRetain(v12);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v19 = static os_log_type_t.error.getter(v15, v16, v17, v18);
    if (os_log_type_enabled(v15, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = v12;
      uint64_t v40 = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_errorRetain(v12);
      uint64_t v22 = sub_100007578(&qword_100251D70);
      uint64_t v23 = String.init<A>(describing:)(&v39, v22);
      uint64_t v25 = (_TtC18TrustedPeersHelper6Client *)v24;
      uint64_t v39 = sub_10017C4C4(v23, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v19, "getSupportAppInfo failed: %{public}s", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v12);
    a2(0LL, 0xF000000000000000LL, v12);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    sub_100041608((uint64_t)v11, (uint64_t)v7, type metadata accessor for GetSupportAppInfoResponse);
    uint64_t v33 = sub_1000077B8( &qword_100252918,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
    uint64_t v34 = Message.serializedData(partial:)(0LL, SupportAppInfoResponse, v33);
    unint64_t v36 = v35;
    sub_1000084E8(v34, v35);
    a2(v34, v36, 0LL);
    sub_10000852C(v34, v36);
    sub_10000852C(v34, v36);
    return sub_1000415CC((uint64_t)v7, type metadata accessor for GetSupportAppInfoResponse);
  }

void sub_10012BDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239DB0, 32LL, 7LL);
  *(void *)v6->endpoint = a1;
  *(void *)v6->containerMap = a2;
  uint64_t v7 = qword_100250EB8;
  swift_retain(a2);
  if (v7 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_1002567D0);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "beginning a fetchTrustedPeersCount", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = swift_allocObject(&unk_100239DD8, 40LL, 7LL);
  *(void *)(v13 + 16) = sub_100173D5C;
  *(void *)(v13 + 24) = v6;
  *(void *)(v13 + 32) = v3;
  swift_retain(v6);
  id v14 = v3;
  sub_100137D5C((uint64_t)sub_100173D68, v13);
  swift_release(v6, v15, v16, v17, v18, v19, v20, v21);
  swift_release((_TtC18TrustedPeersHelper6Client *)v13, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_10012BF14(void *a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  id v4 = a3;
  if (a2) {
    os_log_type_t v7 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v7 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v8 = v7;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  id v10 = a1;
  swift_errorRetain(a2);
  id v11 = v10;
  uint64_t v12 = swift_errorRetain(a2);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v8))
  {
    uint64_t v48 = v4;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    uint64_t v52 = v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v50 = (uint64_t)a1;
    id v16 = v11;
    uint64_t v17 = sub_100007578(&qword_100256FD8);
    uint64_t v18 = String.init<A>(reflecting:)(&v50, v17);
    id v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v50 = sub_10017C4C4(v18, v19, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    *(_WORD *)(v14 + 12) = 2082;
    id v28 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a2)
    {
      uint64_t v50 = 0x203A726F727265LL;
      unint64_t v51 = 0xE700000000000000LL;
      uint64_t v49 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v29 = sub_100007578(&qword_100251D70);
      v30._countAndFlagsBits = String.init<A>(describing:)(&v49, v29);
      object = (_TtC18TrustedPeersHelper6Client *)v30._object;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(object, v32, v33, v34, v35, v36, v37, v38);
      swift_errorRelease();
      uint64_t v39 = v50;
      id v28 = (_TtC18TrustedPeersHelper6Client *)v51;
    }

    else
    {
      uint64_t v39 = 0x73736563637573LL;
    }

    id v4 = v48;
    uint64_t v50 = sub_10017C4C4(v39, (unint64_t)v28, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v28, v40, v41, v42, v43, v44, v45, v46);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v8,  "fetch trusted peer count complete: %{public}s %{public}s",  (uint8_t *)v14,  0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  return v4(a1, a2);
}

void sub_10012C1E0(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3, char *a4)
{
  if (a1)
  {
    a2(0LL, a1);
  }

  else
  {
    os_log_type_t v7 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v8 = swift_allocObject(&unk_100239E00, 40LL, 7LL);
    *(void *)(v8 + 16) = a2;
    *(void *)(v8 + 24) = a3;
    *(void *)(v8 + 32) = a4;
    uint64_t v9 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239E28, 32LL, 7LL);
    *(void *)v9->endpoint = sub_100173D78;
    *(void *)v9->containerMap = v8;
    v34[4] = sub_100176BD4;
    id v35 = v9;
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 1107296256LL;
    v34[2] = sub_1000DC9F8;
    v34[3] = &unk_100239E40;
    id v10 = _Block_copy(v34);
    id v11 = v35;
    swift_retain(a3);
    uint64_t v12 = a4;
    swift_retain(v9);
    swift_release(v11, v13, v14, v15, v16, v17, v18, v19);
    [v7 performBlockAndWait:v10];
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 108LL, 5848LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v8, v20, v21, v22, v23, v24, v25, v26);
    swift_release(v9, v27, v28, v29, v30, v31, v32, v33);
  }

void sub_10012C348(void (*a1)(id, id), uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a3 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v9 = 0LL;
  id v5 = [v4 trustedPeerCountWithError:&v9];
  id v6 = v9;
  if (v9)
  {
    id v7 = v9;
    swift_willThrow();
    id v8 = v7;
    a1(0LL, v6);
  }

  else
  {
    id v8 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:v5];
    a1(v8, 0LL);
  }
}

void sub_10012C430(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239CE8, 32LL, 7LL);
  *(void *)v6->endpoint = a1;
  *(void *)v6->containerMap = a2;
  uint64_t v7 = qword_100250EB8;
  swift_retain(a2);
  if (v7 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_1002567D0);
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "beginning a octagonContainsDistrustedRecoveryKeys", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = swift_allocObject(&unk_100239D10, 40LL, 7LL);
  *(void *)(v13 + 16) = sub_100173CF4;
  *(void *)(v13 + 24) = v6;
  *(void *)(v13 + 32) = v3;
  swift_retain(v6);
  id v14 = v3;
  sub_100137D5C((uint64_t)sub_100173D00, v13);
  swift_release(v6, v15, v16, v17, v18, v19, v20, v21);
  swift_release((_TtC18TrustedPeersHelper6Client *)v13, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_10012C588(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  id v4 = a3;
  char v6 = a1;
  if (a2) {
    os_log_type_t v7 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v7 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v8 = v7;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v9, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v10 = swift_errorRetain(a2);
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  if (os_log_type_enabled(v11, v8))
  {
    id v44 = v4;
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v13;
    *(_DWORD *)uint64_t v12 = 136446466;
    LOBYTE(v46) = v6 & 1;
    uint64_t v14 = String.init<A>(reflecting:)(&v46, &type metadata for Bool);
    id v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v46 = sub_10017C4C4(v14, v15, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    *(_WORD *)(v12 + 12) = 2082;
    id v24 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a2)
    {
      uint64_t v46 = 0x203A726F727265LL;
      unint64_t v47 = 0xE700000000000000LL;
      uint64_t v45 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v25 = sub_100007578(&qword_100251D70);
      v26._countAndFlagsBits = String.init<A>(describing:)(&v45, v25);
      object = (_TtC18TrustedPeersHelper6Client *)v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(object, v28, v29, v30, v31, v32, v33, v34);
      swift_errorRelease();
      uint64_t v35 = v46;
      id v24 = (_TtC18TrustedPeersHelper6Client *)v47;
    }

    else
    {
      uint64_t v35 = 0x73736563637573LL;
    }

    uint64_t v46 = sub_10017C4C4(v35, (unint64_t)v24, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v24, v36, v37, v38, v39, v40, v41, v42);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v8,  "octagon contains distrusted recovery keys complete: %{public}s %{public}s",  (uint8_t *)v12,  0x16u);
    swift_arrayDestroy(v13, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    id v4 = v44;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return v4(v6 & 1, a2);
}

void sub_10012C824(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3, char *a4)
{
  if (a1)
  {
    a2(0LL, a1);
  }

  else
  {
    os_log_type_t v7 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v8 = swift_allocObject(&unk_100239D38, 40LL, 7LL);
    *(void *)(v8 + 16) = a4;
    *(void *)(v8 + 24) = a2;
    *(void *)(v8 + 32) = a3;
    uint64_t v9 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239D60, 32LL, 7LL);
    *(void *)v9->endpoint = sub_100173D10;
    *(void *)v9->containerMap = v8;
    v34[4] = sub_100176BD4;
    uint64_t v35 = v9;
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 1107296256LL;
    v34[2] = sub_1000DC9F8;
    v34[3] = &unk_100239D78;
    uint64_t v10 = _Block_copy(v34);
    os_log_type_t v11 = v35;
    uint64_t v12 = a4;
    swift_retain(a3);
    swift_retain(v9);
    swift_release(v11, v13, v14, v15, v16, v17, v18, v19);
    [v7 performBlockAndWait:v10];
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 108LL, 5873LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v8, v20, v21, v22, v23, v24, v25, v26);
    swift_release(v9, v27, v28, v29, v30, v31, v32, v33);
  }

uint64_t sub_10012C98C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_100146B88( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "resetCDPAccountData complete: %{public}s",  0xD00000000000006BLL,  0x80000001001F95C0LL);
}

uint64_t sub_10012C9B8( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8)
{
  int v40 = a7;
  int v41 = a8;
  int v39 = a6;
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  uint64_t v43 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  id v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)a1 = 6LL;
  *(_BYTE *)(a1 + 8) = 1;
  if (a3)
  {
    unint64_t v17 = a3;
  }

  else
  {
    a2 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
  }

  id v18 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 24);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = v17;
  if (a5)
  {
    unint64_t v26 = a5;
  }

  else
  {
    a4 = 0LL;
    unint64_t v26 = 0xE000000000000000LL;
  }

  SEL v27 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 40);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = v26;
  *(_BYTE *)(a1 + 48) = v39;
  v42[16] = v40;
  v42[17] = v41;
  uint64_t v35 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  static Message.with(_:)(sub_100171318, v42, v13, v35);
  uint64_t v36 = a1 + *(int *)(type metadata accessor for ResetAccountCDPContentsRequest(0LL) + 40);
  sub_100041590(v36, &qword_100251F50);
  sub_100041608((uint64_t)v16, v36, type metadata accessor for AccountInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v36, 0LL, 1LL, v13);
}

void sub_10012CB64(uint64_t a1, char *a2, void (*a3)(uint64_t))
{
  uint64_t v6 = sub_100007578(&qword_100251DE8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v9, &qword_100251DE8);
  if (swift_getEnumCaseMultiPayload(v9, v6) == 1)
  {
    uint64_t v10 = *v9;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v11, (uint64_t)qword_1002567D0);
    swift_errorRetain(v10);
    uint64_t v12 = swift_errorRetain(v10);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v17 = static os_log_type_t.error.getter(v13, v14, v15, v16);
    if (os_log_type_enabled(v13, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v19;
      *(_DWORD *)id v18 = 136446210;
      uint64_t v62 = v10;
      swift_errorRetain(v10);
      uint64_t v20 = sub_100007578(&qword_100251D70);
      uint64_t v21 = String.init<A>(describing:)(&v62, v20);
      id v23 = (_TtC18TrustedPeersHelper6Client *)v22;
      uint64_t v62 = sub_10017C4C4(v21, v22, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v17, "resetCDPAccountData failed: %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v10);
    a3(v10);
    swift_errorRelease();
    swift_errorRelease();
  }

  else
  {
    id v31 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    id v32 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237F88, 24LL, 7LL);
    *(void *)v32->endpoint = a2;
    BOOL v33 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237FB0, 32LL, 7LL);
    *(void *)v33->endpoint = sub_1001712BC;
    *(void *)v33->containerMap = v32;
    aBlock[4] = (uint64_t)sub_100176BD4;
    id v61 = v33;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100237FC8;
    BOOL v34 = _Block_copy(aBlock);
    uint64_t v35 = v61;
    uint64_t v36 = a2;
    swift_retain(v33);
    swift_release(v35, v37, v38, v39, v40, v41, v42, v43);
    [v31 performBlockAndWait:v34];
    _Block_release(v34);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v33, "", 108LL, 5910LL, 41LL, 1LL);
    swift_release(v33, v45, v46, v47, v48, v49, v50, v51);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      a3(0LL);
      sub_100041590((uint64_t)v9, &qword_100251DE8);
      swift_release(v32, v52, v53, v54, v55, v56, v57, v58);
    }
  }

void sub_10012CEE4(uint64_t a1, _TtC18TrustedPeersHelper6Client **a2)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "accountSettings"));
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    uint64_t v8 = sub_100166400(v5, v7);
    sub_10000852C(v5, v7);
    if (v8)
    {
      uint64_t v16 = *a2;
      *a2 = (_TtC18TrustedPeersHelper6Client *)v8;
      swift_bridgeObjectRelease(v16, v9, v10, v11, v12, v13, v14, v15);
    }
  }

void sub_10012D250(void *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, char *a4)
{
  if (!a1)
  {
    unint64_t v6 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v9 = swift_allocObject(&unk_100237F10, 40LL, 7LL);
    *(void *)(v9 + 16) = a4;
    *(void *)(v9 + 24) = a2;
    *(void *)(v9 + 32) = a3;
    a2 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237F38, 32LL, 7LL);
    *(void *)a2->endpoint = sub_10017127C;
    *(void *)a2->containerMap = v9;
    aBlock[4] = (uint64_t)sub_100176BD4;
    id v55 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100237F50;
    id v28 = _Block_copy(aBlock);
    BOOL v29 = v55;
    BOOL v30 = a4;
    swift_retain(a3);
    swift_retain(a2);
    swift_release(v29, v31, v32, v33, v34, v35, v36, v37);
    [v6 performBlockAndWait:v28];
    _Block_release(v28);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a2, "", 108LL, 5968LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v9, v39, v40, v41, v42, v43, v44, v45);
    swift_release(a2, v46, v47, v48, v49, v50, v51, v52);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_8;
  }

  unint64_t v6 = a1;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v7, (uint64_t)qword_1002567D0);
  swift_errorRetain(v6);
  uint64_t v8 = swift_errorRetain(v6);
  uint64_t v9 = Logger.logObject.getter(v8);
  os_log_type_t v13 = static os_log_type_t.error.getter(v9, v10, v11, v12);
  if (!os_log_type_enabled((os_log_t)v9, v13))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  BOOL v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v15 = swift_slowAlloc(32LL, -1LL);
  uint64_t v53 = (uint64_t)v6;
  aBlock[0] = v15;
  *(_DWORD *)BOOL v14 = 136446210;
  swift_errorRetain(v6);
  uint64_t v16 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v17 = String.init<A>(describing:)(&v53, v16);
  uint64_t v19 = (_TtC18TrustedPeersHelper6Client *)v18;
  uint64_t v53 = sub_10017C4C4(v17, v18, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v14 + 4, v14 + 12);
  swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  v13,  "fetchAccountSettings unable to fetch changes: %{public}s",  v14,  0xCu);
  swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v15, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);
LABEL_9:

  ((void (*)(void, void *))a2)(0LL, v6);
}

void sub_10012D540(uint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v139 = a3;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  uint64_t v140 = 0LL;
  id v12 = [v11 bestWalrusAcrossTrustedPeersWithError:&v140];
  os_log_type_t v13 = v12;
  BOOL v14 = v140;
  if (v140)
  {
    uint64_t v15 = v140;

    swift_willThrow(v16);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v17, (uint64_t)qword_1002567D0);
    unint64_t v18 = v15;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v23 = static os_log_type_t.error.getter(v19, v20, v21, v22);
    if (os_log_type_enabled(v19, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v25 = (_TtC18TrustedPeersHelper6Client **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v24 = 138543362;
      BOOL v26 = v18;
      uint64_t v138 = a2;
      id v27 = v26;
      id v28 = (_TtC18TrustedPeersHelper6Client *)_swift_stdlib_bridgeErrorToNSError(v26);
      uint64_t v140 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v24 + 4, v24 + 12);
      _TtC18TrustedPeersHelper6Client *v25 = v28;

      a2 = v138;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v23,  "fetchAccountSettings unable to find best walrus: %{public}@",  v24,  0xCu);
      uint64_t v29 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v25, 1LL, v29);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {

      uint64_t v19 = (os_log_s *)v18;
    }

    id v51 = v18;
    a2(0LL, v14);
    id v52 = v51;
  }

  else
  {
    BOOL v30 = *(void **)(a1 + v10);
    uint64_t v140 = 0LL;
    SEL v31 = (_TtC18TrustedPeersHelper6Client *)v12;
    id v32 = [v30 bestWebAccessAcrossTrustedPeersWithError:&v140];
    id v33 = v32;
    id v34 = v140;
    if (v140)
    {
      id v35 = v140;

      swift_willThrow(v36);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v37, (uint64_t)qword_1002567D0);
      id v38 = v35;
      SEL v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v43 = static os_log_type_t.error.getter(v39, v40, v41, v42);
      if (os_log_type_enabled(v39, v43))
      {
        id v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v136 = (_TtC18TrustedPeersHelper6Client **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v44 = 138543362;
        id v45 = v38;
        uint64_t v137 = v31;
        SEL v46 = v45;
        id v47 = a2;
        id v48 = (_TtC18TrustedPeersHelper6Client *)_swift_stdlib_bridgeErrorToNSError(v45);
        uint64_t v140 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v44 + 4, v44 + 12);
        id v49 = v136;
        os_log_s *v136 = v48;
        a2 = v47;

        SEL v31 = v137;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v43,  "fetchAccountSettings unable to find best web access: %{public}@",  v44,  0xCu);
        uint64_t v50 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v49, 1LL, v50);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      else
      {

        SEL v39 = (os_log_s *)v38;
      }

      id v51 = v38;
      a2(0LL, v34);

      id v52 = v31;
    }

    else
    {
      id v52 = (_TtC18TrustedPeersHelper6Client *)v32;
      uint64_t v53 = (_TtC18TrustedPeersHelper6Client *)sub_10000C48C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v137 = v31;
      if (v31)
      {
        id v54 = v31;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v53);
        uint64_t v140 = v53;
        sub_10014CB8C( (uint64_t)v54,  0x7375726C6177LL,  0xE600000000000000LL,  isUniquelyReferenced_nonNull_native,  (uint64_t *)&unk_100256CB0);
        uint64_t v53 = v140;

        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0x8000000000000000LL,  v56,  v57,  v58,  v59,  v60,  v61,  v62);
      }

      uint64_t v138 = a2;
      if (v52)
      {
        uint64_t v63 = v52;
        char v64 = swift_isUniquelyReferenced_nonNull_native(v53);
        uint64_t v140 = v53;
        sub_10014CB8C((uint64_t)v63, 0x7365636341626577LL, 0xE900000000000073LL, v64, (uint64_t *)&unk_100256CB0);
        uint64_t v53 = v140;

        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0x8000000000000000LL,  v65,  v66,  v67,  v68,  v69,  v70,  v71);
      }

      uint64_t v136 = (_TtC18TrustedPeersHelper6Client **)OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
      uint64_t v72 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
      NSString v73 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
      sub_100007620(0LL, &qword_100256CA8, &OBJC_CLASS___TPPBPeerStableInfoSetting_ptr);
      id v74 = v72;
      swift_bridgeObjectRetain(v53);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      int64_t v135 = v53;
      swift_bridgeObjectRelease(v53, v76, v77, v78, v79, v80, v81, v82);
      uint64_t v140 = 0LL;
      id v83 = [v73 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v140];

      uint64_t v84 = v140;
      if (v83)
      {
        uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v83);
        unint64_t v87 = v86;

        Class v88 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v85, v87);
        [v74 setAccountSettings:v88];

        int64_t v89 = *(_TtC18TrustedPeersHelper6Client **)((char *)v136 + a1);
        Date.init()(v89);
        Class v90 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        -[Client setAccountSettingsDate:](v89, "setAccountSettingsDate:", v90);

        id v91 = (void (*)(_TtC18TrustedPeersHelper6Client *, void))v138;
      }

      else
      {
        BOOL v92 = v84;

        uint64_t v93 = _convertNSErrorToError(_:)(v92);
        swift_willThrow(v94);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v95 = type metadata accessor for Logger(0LL);
        uint64_t v96 = sub_100006BAC(v95, (uint64_t)qword_1002567D0);
        swift_errorRetain(v93);
        uint64_t v97 = swift_errorRetain(v93);
        id v98 = (os_log_s *)Logger.logObject.getter(v97);
        os_log_type_t v102 = static os_log_type_t.error.getter(v98, v99, v100, v101);
        if (os_log_type_enabled(v98, v102))
        {
          id v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v104 = swift_slowAlloc(8LL, -1LL);
          v134[1] = v96;
          uint64_t v105 = (void *)v104;
          *(_DWORD *)id v103 = 138412290;
          swift_errorRetain(v93);
          uint64_t v106 = (_TtC18TrustedPeersHelper6Client *)_swift_stdlib_bridgeErrorToNSError(v93);
          uint64_t v140 = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v103 + 4, v103 + 12);
          *uint64_t v105 = v106;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v98,  v102,  "Failed to set cached account settings, ignoring: %@",  v103,  0xCu);
          uint64_t v107 = sub_100007578(&qword_100250F90);
          swift_arrayDestroy(v105, 1LL, v107);
          swift_slowDealloc(v105, -1LL, -1LL);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        id v91 = (void (*)(_TtC18TrustedPeersHelper6Client *, void))v138;
        uint64_t v108 = v136;

        -[Client setAccountSettings:]( *(_TtC18TrustedPeersHelper6Client **)((char *)v108 + a1),  "setAccountSettings:",  0LL);
        -[Client setAccountSettingsDate:]( *(_TtC18TrustedPeersHelper6Client **)((char *)v108 + a1),  "setAccountSettingsDate:",  0LL);
        os_log_type_t v109 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
        uint64_t v140 = 0LL;
        unsigned int v110 = [v109 save:&v140];
        uint64_t v111 = v140;
        if (v110)
        {
          uint64_t v112 = v140;
          swift_errorRelease();
        }

        else
        {
          uint64_t v113 = v140;
          uint64_t v114 = _convertNSErrorToError(_:)(v111);

          swift_willThrow(v115);
          swift_errorRetain(v114);
          uint64_t v116 = swift_errorRetain(v114);
          id v117 = (os_log_s *)Logger.logObject.getter(v116);
          os_log_type_t v121 = static os_log_type_t.error.getter(v117, v118, v119, v120);
          if (os_log_type_enabled(v117, v121))
          {
            int64_t v122 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            BOOL v123 = (_TtC18TrustedPeersHelper6Client **)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)int64_t v122 = 138412290;
            swift_errorRetain(v114);
            uint64_t v124 = (_TtC18TrustedPeersHelper6Client *)_swift_stdlib_bridgeErrorToNSError(v114);
            uint64_t v140 = v124;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v122 + 4, v122 + 12);
            *BOOL v123 = v124;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v117, v121, "failed to save: %@", v122, 0xCu);
            uint64_t v125 = sub_100007578(&qword_100250F90);
            swift_arrayDestroy(v123, 1LL, v125);
            id v91 = (void (*)(_TtC18TrustedPeersHelper6Client *, void))v138;
            swift_slowDealloc(v123, -1LL, -1LL);
            swift_slowDealloc(v122, -1LL, -1LL);

            swift_errorRelease();
            swift_errorRelease();
          }

          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
        }
      }

      uint64_t v126 = v135;
      v91(v135, 0LL);
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
      id v51 = v137;
    }
  }
}

uint64_t sub_10012DF38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  return sub_100143568( a1,  a2,  a3,  a4,  a5,  "preflightPreapprovedJoin complete: %{public}s",  0xD000000000000030LL,  0x80000001001F9990LL);
}

void sub_10012DF5C( uint64_t a1, _TtC18TrustedPeersHelper6Client *a2, _TtC18TrustedPeersHelper6Client *a3, void *a4, _TtC18TrustedPeersHelper6Client *a5)
{
  if (a1)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v8, (uint64_t)qword_1002567D0);
    swift_errorRetain(a1);
    uint64_t v9 = swift_errorRetain(a1);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v14 = static os_log_type_t.error.getter(v10, v11, v12, v13);
    if (os_log_type_enabled(v10, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      int64_t v58 = (_TtC18TrustedPeersHelper6Client *)v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      uint64_t v56 = a1;
      swift_errorRetain(a1);
      uint64_t v17 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v18 = String.init<A>(describing:)(&v56, v17);
      uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
      uint64_t v56 = sub_10017C4C4(v18, v19, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v14,  "preflightPreapprovedJoin unable to fetch changes: %{public}s",  v15,  0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    ((void (*)(void, uint64_t))a2)(0LL, a1);
  }

  else
  {
    __chkstk_darwin(0LL, a2);
    v55[2] = v30;
    v55[3] = a2;
    v55[4] = a3;
    uint64_t v31 = sub_100007578(&qword_100251698);
    NSManagedObjectContext.performAndWait<A>(_:)(&v58, sub_100172528, v55, v31);
    id v32 = v58;
    if (v58)
    {
      swift_bridgeObjectRetain(a5);
      id v33 = a4;
      swift_retain(a3);
      sub_10016EF24((uint64_t)v32, v33, v33, a2, (uint64_t)a3, (uint64_t)a5);
      swift_bridgeObjectRelease(v32, v34, v35, v36, v37, v38, v39, v40);

      swift_release(a3, v41, v42, v43, v44, v45, v46, v47);
      swift_bridgeObjectRelease(a5, v48, v49, v50, v51, v52, v53, v54);
    }
  }

void sub_10012E204(uint64_t a1@<X0>, void (*a2)(void, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v27 = 0LL;
  id v6 = [v5 allPolicyVersionsWithError:&v27];
  id v7 = v27;
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v10 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);
    id v12 = v7;
  }

  else
  {
    id v13 = v27;
    uint64_t v14 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v15);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_1002567D0);
    swift_errorRetain(v14);
    uint64_t v17 = swift_errorRetain(v14);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v22 = static os_log_type_t.error.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      int64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v26 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)int64_t v23 = 138543362;
      swift_errorRetain(v14);
      id v24 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
      id v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 4, v23 + 12);
      *BOOL v26 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Error fetching all policy versions: %{public}@", v23, 0xCu);
      uint64_t v25 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v26, 1LL, v25);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v14);
    a2(0LL, v14);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v11 = 0LL;
  }

  *a3 = v11;
}

void sub_10012E4DC(char *a1, void (*a2)(uint64_t, id), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v7 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  id v140 = 0LL;
  unsigned int v8 = [v7 hasAnyPeersWithError:&v140];
  id v9 = v140;
  if (v140)
  {
    id v10 = v140;
    swift_willThrow(v10);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v11, (uint64_t)qword_1002567D0);
    id v12 = v10;
    id v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v17 = static os_log_type_t.error.getter(v13, v14, v15, v16);
    if (os_log_type_enabled(v13, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v18 = 138543362;
      id v20 = v12;
      uint64_t v21 = (void *)_swift_stdlib_bridgeErrorToNSError(v20);
      id v140 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v18 + 4, v18 + 12);
      void *v19 = v21;

      _os_log_impl((void *)&_mh_execute_header, v13, v17, "error calling hasAnyPeers: %{public}@", v18, 0xCu);
      uint64_t v22 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v19, 1LL, v22);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      id v13 = (os_log_s *)v12;
    }

    id v75 = v12;
    a2(0LL, v9);

    return;
  }

  if (!v8)
  {
    a2(1LL, 0LL);
    return;
  }

  uint64_t v23 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v24 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v24) {
    goto LABEL_21;
  }
  uint64_t v25 = v24;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  id v27 = v26;

  id v28 = [*(id *)&a1[v23] egoPeerPermanentInfo];
  if (!v28)
  {
LABEL_20:
    swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
LABEL_21:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v76 = type metadata accessor for Logger(0LL);
    uint64_t v77 = sub_100006BAC(v76, (uint64_t)qword_1002567D0);
    int64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
    os_log_type_t v79 = static os_log_type_t.info.getter(v78);
    if (os_log_type_enabled(v78, v79))
    {
      id v80 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "preflightPreapprovedJoin: no prepared identity", v80, 2u);
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    unint64_t v81 = sub_100043F74();
    uint64_t v82 = swift_allocError(&type metadata for ContainerError, v81, 0LL, 0LL);
    *(_OWORD *)uint64_t v83 = xmmword_1001DE890;
    *(_BYTE *)(v83 + 16) = 13;
    a2(0LL, (id)v82);
    swift_errorRelease();
    return;
  }

  int64_t v36 = v28;
  uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
  unint64_t v138 = v38;

  id v39 = [*(id *)&a1[v23] egoPeerPermanentInfoSig];
  if (!v39)
  {
    sub_10000852C(v37, v138);
    goto LABEL_20;
  }

  BOOL v40 = v39;
  uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
  unint64_t v43 = v42;

  id v44 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  uint64_t v45 = v37;
  sub_1000084E8(v37, v138);
  unint64_t v137 = v43;
  sub_1000084E8(v41, v43);
  NSString v136 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27, v46, v47, v48, v49, v50, v51, v52);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v54 = Data._bridgeToObjectiveC()().super.isa;
  id v55 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v136 data:isa sig:v54 keyFactory:v44];
  uint64_t v134 = v44;

  uint64_t v135 = v41;
  sub_10000852C(v41, v137);
  sub_10000852C(v45, v138);

  uint64_t v56 = v45;
  if (!v55)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v84 = type metadata accessor for Logger(0LL);
    uint64_t v85 = sub_100006BAC(v84, (uint64_t)qword_1002567D0);
    unint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
    os_log_type_t v87 = static os_log_type_t.info.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      Class v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)Class v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "preflightPreapprovedJoin: invalid permanent info", v88, 2u);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    unint64_t v89 = sub_100043F74();
    uint64_t v90 = swift_allocError(&type metadata for ContainerError, v89, 0LL, 0LL);
    *(_OWORD *)uint64_t v91 = xmmword_1001DE880;
    *(_BYTE *)(v91 + 16) = 13;
    a2(0LL, (id)v90);
    swift_errorRelease();

    goto LABEL_41;
  }

  id v57 = *(id *)&a1[v6];
  id v58 = [v55 signingPubKey];
  id v59 = [v58 spki];
  swift_unknownObjectRelease(v58);
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
  unint64_t v62 = v61;

  Class v63 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v60, v62);
  id v140 = 0LL;
  unsigned int v64 = [v57 hasPotentiallyTrustedPeerPreapprovingKey:v63 error:&v140];

  id v65 = v140;
  if (v140)
  {
    id v66 = v140;
    swift_willThrow(v66);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v67 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v67, (uint64_t)qword_1002567D0);
    id v68 = v66;
    id v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v70 = static os_log_type_t.info.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      BOOL v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v132 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)BOOL v71 = 138543362;
      id v133 = v55;
      id v72 = v68;
      NSString v73 = (void *)_swift_stdlib_bridgeErrorToNSError(v72);
      id v140 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v71 + 4, v71 + 12);
      *BOOL v132 = v73;

      id v55 = v133;
      _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "preflightPreapprovedJoin: error calling hasPotentiallyTrustedPeerPreapprovingKey %{public}@",  v71,  0xCu);
      uint64_t v74 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v132, 1LL, v74);
      swift_slowDealloc(v132, -1LL, -1LL);
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    else
    {

      id v69 = (os_log_s *)v68;
    }

    id v100 = v68;
    a2(0LL, v65);

LABEL_41:
    sub_10000852C(v135, v137);
    sub_10000852C(v56, v138);
    return;
  }

  if (!v64)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v101 = type metadata accessor for Logger(0LL);
    uint64_t v102 = sub_100006BAC(v101, (uint64_t)qword_1002567D0);
    id v103 = (os_log_s *)Logger.logObject.getter(v102);
    os_log_type_t v104 = static os_log_type_t.info.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      uint64_t v105 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v105 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v103,  v104,  "preflightPreapprovedJoin: no peers preapprove our key",  v105,  2u);
      swift_slowDealloc(v105, -1LL, -1LL);
    }

    unint64_t v106 = sub_100043F74();
    uint64_t v107 = swift_allocError(&type metadata for ContainerError, v106, 0LL, 0LL);
    *(_OWORD *)uint64_t v108 = xmmword_1001E6910;
    *(_BYTE *)(v108 + 16) = 13;
    a2(0LL, (id)v107);
    swift_errorRelease();

    goto LABEL_41;
  }

  if (a4)
  {
    BOOL v92 = a1;
    uint64_t v93 = (_TtC18TrustedPeersHelper6Client *)swift_bridgeObjectRetain(a4);
    uint64_t v124 = sub_100158F50(v93, v92, v94, v95, v96, v97, v98, v99);

    if (*(void *)v124->endpoint)
    {
      a2(1LL, 0LL);
      sub_10000852C(v56, v138);
      sub_10000852C(v135, v137);
      swift_bridgeObjectRelease(v124, v125, v126, v127, v128, v129, v130, v131);

      return;
    }
  }

  else
  {
    uint64_t v124 = 0LL;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v109 = type metadata accessor for Logger(0LL);
  uint64_t v110 = sub_100006BAC(v109, (uint64_t)qword_1002567D0);
  uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
  os_log_type_t v112 = static os_log_type_t.info.getter(v111);
  if (os_log_type_enabled(v111, v112))
  {
    uint64_t v113 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v113 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "preflightPreapprovedJoin: no reciprocal trust for existing peers",  v113,  2u);
    swift_slowDealloc(v113, -1LL, -1LL);
  }

  unint64_t v114 = sub_100043F74();
  uint64_t v115 = swift_allocError(&type metadata for ContainerError, v114, 0LL, 0LL);
  *(_OWORD *)uint64_t v116 = xmmword_1001E6920;
  *(_BYTE *)(v116 + 16) = 13;
  a2(0LL, (id)v115);
  sub_10000852C(v56, v138);
  sub_10000852C(v135, v137);

  swift_errorRelease();
  swift_bridgeObjectRelease(v124, v117, v118, v119, v120, v121, v122, v123);
}

uint64_t sub_10012F1CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, void, void, void, void), uint64_t a8)
{
  return sub_10012F210( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  "preapprovedJoin complete: %{public}s",  0xD00000000000003ALL,  0x80000001001F9950LL);
}

uint64_t sub_10012F210( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, void, void, void, void), uint64_t a8, const char *a9, uint64_t a10, unint64_t a11)
{
  uint64_t v13 = a4;
  if (a5) {
    os_log_type_t v15 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v15 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v16 = v15;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v17, (uint64_t)qword_1002567D0);
  swift_errorRetain(a5);
  uint64_t v18 = swift_errorRetain(a5);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  if (os_log_type_enabled(v19, v16))
  {
    uint64_t v42 = v13;
    unint64_t v43 = a7;
    id v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = v21;
    *(_DWORD *)id v20 = 136446210;
    uint64_t v22 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a5)
    {
      uint64_t v47 = 0x203A726F727265LL;
      unint64_t v48 = 0xE700000000000000LL;
      uint64_t v46 = a5;
      swift_errorRetain(a5);
      swift_errorRetain(a5);
      uint64_t v23 = sub_100007578(&qword_100251D70);
      v24._countAndFlagsBits = String.init<A>(describing:)(&v46, v23);
      object = (_TtC18TrustedPeersHelper6Client *)v24._object;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(object, v26, v27, v28, v29, v30, v31, v32);
      swift_errorRelease();
      uint64_t v33 = v47;
      uint64_t v22 = (_TtC18TrustedPeersHelper6Client *)v48;
    }

    else
    {
      uint64_t v33 = 0x73736563637573LL;
    }

    uint64_t v47 = sub_10017C4C4(v33, (unint64_t)v22, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v22, v34, v35, v36, v37, v38, v39, v40);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v16, a9, v20, 0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    a7 = v43;
    uint64_t v13 = v42;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(a10, a11);
  return a7(a1, a2, a3, v13, a5);
}

void sub_10012F48C( void *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    id v9 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v12 = swift_allocObject(&unk_100238668, 64LL, 7LL);
    *(void *)(v12 + 16) = a4;
    *(void *)(v12 + 24) = a5;
    *(void *)(v12 + 32) = a6;
    *(void *)(v12 + 40) = a7;
    *(void *)(v12 + 48) = a2;
    *(void *)(v12 + 56) = a3;
    a2 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238690, 32LL, 7LL);
    *(void *)a2->endpoint = sub_100171C7C;
    *(void *)a2->containerMap = v12;
    aBlock[4] = (uint64_t)sub_100176BD4;
    unint64_t v61 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_1002386A8;
    SEL v34 = _Block_copy(aBlock);
    id v35 = v61;
    swift_bridgeObjectRetain(a7);
    swift_retain(a3);
    swift_retain(a2);
    int64_t v36 = a4;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_release(v35, v37, v38, v39, v40, v41, v42, v43);
    [v9 performBlockAndWait:v34];
    _Block_release(v34);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a2, "", 108LL, 6136LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v12, v45, v46, v47, v48, v49, v50, v51);
    swift_release(a2, v52, v53, v54, v55, v56, v57, v58);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_8;
  }

  id v9 = a1;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v10, (uint64_t)qword_1002567D0);
  swift_errorRetain(v9);
  uint64_t v11 = swift_errorRetain(v9);
  uint64_t v12 = Logger.logObject.getter(v11);
  os_log_type_t v16 = static os_log_type_t.error.getter(v12, v13, v14, v15);
  if (!os_log_type_enabled((os_log_t)v12, v16))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v18 = swift_slowAlloc(32LL, -1LL);
  uint64_t v59 = (uint64_t)v9;
  aBlock[0] = v18;
  *(_DWORD *)uint64_t v17 = 136446210;
  swift_errorRetain(v9);
  uint64_t v19 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v20 = String.init<A>(describing:)(&v59, v19);
  uint64_t v22 = (_TtC18TrustedPeersHelper6Client *)v21;
  uint64_t v59 = sub_10017C4C4(v20, v21, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, aBlock, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  v16,  "preapprovedJoin unable to fetch changes: %{public}s",  v17,  0xCu);
  swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v18, -1LL, -1LL);
  swift_slowDealloc(v17, -1LL, -1LL);
LABEL_9:

  ((void (*)(void, void, void *, void, void *))a2)(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v9);
}

void sub_10012F7B4( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void *, void, uint64_t), uint64_t a6)
{
  uint64_t v12 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  v189[0] = 0LL;
  id v13 = [v12 peerCountWithError:v189];
  uint64_t v14 = v189[0];
  if (v189[0])
  {
    id v185 = a5;
    id v15 = (id)v189[0];
    swift_willThrow(v15);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_1002567D0);
    id v17 = v15;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v22 = static os_log_type_t.error.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      SEL v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int v183 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)SEL v23 = 138543362;
      id v24 = v17;
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError(v24);
      v189[0] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v189, &v189[1], v23 + 4, v23 + 12);
      *int v183 = v25;

      _os_log_impl( (void *)&_mh_execute_header,  v18,  v22,  "preapprovedJoin: error getting peerCount: %{public}@",  v23,  0xCu);
      uint64_t v26 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v183, 1LL, v26);
      swift_slowDealloc(v183, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      uint64_t v18 = (os_log_s *)v17;
    }

    id v116 = v17;
    v185(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v14);

    return;
  }

  if (!v13)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v117 = type metadata accessor for Logger(0LL);
    uint64_t v118 = sub_100006BAC(v117, (uint64_t)qword_1002567D0);
    int64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
    os_log_type_t v120 = static os_log_type_t.info.getter(v119);
    if (os_log_type_enabled(v119, v120))
    {
      id v121 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v121 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v119,  v120,  "preapprovedJoin but no existing peers, attempting establish",  v121,  2u);
      swift_slowDealloc(v121, -1LL, -1LL);
    }

    sub_1000FC834(a2, a3, a4, a5, a6);
    return;
  }

  uint64_t v27 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v28 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v28)
  {
LABEL_27:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v122 = type metadata accessor for Logger(0LL);
    uint64_t v123 = sub_100006BAC(v122, (uint64_t)qword_1002567D0);
    uint64_t v124 = (os_log_s *)Logger.logObject.getter(v123);
    os_log_type_t v125 = static os_log_type_t.info.getter(v124);
    if (os_log_type_enabled(v124, v125))
    {
      id v126 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v126 = 0;
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "preapprovedJoin: no prepared identity", v126, 2u);
      swift_slowDealloc(v126, -1LL, -1LL);
    }

    unint64_t v127 = sub_100043F74();
    uint64_t v128 = swift_allocError(&type metadata for ContainerError, v127, 0LL, 0LL);
    *(_OWORD *)uint64_t v129 = xmmword_1001DE890;
    *(_BYTE *)(v129 + 16) = 13;
    a5(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v128);
    swift_errorRelease();
    return;
  }

  BOOL v29 = v28;
  id v186 = a5;
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  BOOL v32 = v31;

  id v33 = [*(id *)&a1[v27] egoPeerPermanentInfo];
  if (!v33)
  {
LABEL_26:
    swift_bridgeObjectRelease(v32, v34, v35, v36, v37, v38, v39, v40);
    a5 = v186;
    goto LABEL_27;
  }

  id v41 = v33;
  uint64_t v184 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  unint64_t v43 = v42;

  id v44 = [*(id *)&a1[v27] egoPeerPermanentInfoSig];
  if (!v44)
  {
LABEL_25:
    sub_10000852C(v184, v43);
    goto LABEL_26;
  }

  SEL v45 = v44;
  uint64_t v181 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
  unint64_t v182 = v46;

  id v47 = [*(id *)&a1[v27] egoPeerStableInfo];
  if (!v47)
  {
LABEL_24:
    sub_10000852C(v181, v182);
    goto LABEL_25;
  }

  id v48 = v47;
  uint64_t v177 = v30;
  uint64_t v179 = v32;
  uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
  unint64_t v51 = v50;

  id v52 = [*(id *)&a1[v27] egoPeerStableInfoSig];
  if (!v52)
  {
    sub_10000852C(v49, v51);
    BOOL v32 = v179;
    goto LABEL_24;
  }

  id v53 = v52;
  unint64_t v172 = v51;
  uint64_t v173 = v49;
  uint64_t v174 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);
  unint64_t v175 = v54;

  id v178 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  swift_bridgeObjectRetain(v179);
  sub_1000084E8(v184, v43);
  sub_1000084E8(v181, v182);
  id v169 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v179, v55, v56, v57, v58, v59, v60, v61);
  unint64_t v176 = v43;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v62 = Data._bridgeToObjectiveC()().super.isa;
  id v63 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v169 data:isa sig:v62 keyFactory:v178];
  sub_10000852C(v181, v182);
  sub_10000852C(v184, v43);

  if (v63)
  {
    id v170 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    sub_1000084E8(v173, v51);
    sub_1000084E8(v174, v175);
    Class v71 = Data._bridgeToObjectiveC()().super.isa;
    Class v167 = Data._bridgeToObjectiveC()().super.isa;
    id v171 = [v170 initWithData:v71 sig:v167];
    sub_10000852C(v174, v175);
    sub_10000852C(v173, v51);

    if (v171)
    {
      id v79 = [v63 machineID];
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
      uint64_t v82 = v81;

      LOBYTE(v79) = sub_1001A372C(v80, (unint64_t)v82);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
      if ((v79 & 1) != 0)
      {
        uint64_t v97 = (void *)swift_allocObject(&unk_1002386E0, 160LL, 7LL);
        v97[2] = v186;
        v97[3] = a6;
        v97[4] = a1;
        v97[5] = v177;
        v98._countAndFlagsBits = v177;
        v97[6] = v179;
        v97[7] = v63;
        v98._object = v179;
        v97[8] = v171;
        v97[9] = a4;
        v97[10] = a2;
        v97[11] = a3;
        v97[12] = v184;
        v97[13] = v176;
        v97[14] = v181;
        v97[15] = v182;
        v97[16] = v173;
        v97[17] = v51;
        v97[18] = v174;
        v97[19] = v175;
        strcpy((char *)v189, "signing-key ");
        BYTE5(v189[1]) = 0;
        HIWORD(v189[1]) = -5120;
        String.append(_:)(v98);
        uint64_t v187 = v189[0];
        uint64_t v168 = (_TtC18TrustedPeersHelper6Client *)v189[1];
        swift_bridgeObjectRetain_n(v179, 3LL);
        sub_1000084E8(v184, v176);
        sub_1000084E8(v181, v182);
        sub_1000084E8(v173, v51);
        sub_1000084E8(v174, v175);
        swift_bridgeObjectRetain(a4);
        swift_bridgeObjectRetain(a2);
        swift_bridgeObjectRetain(a3);
        swift_retain(v97);
        swift_retain(a6);
        uint64_t v99 = a1;
        id v100 = v63;
        id v101 = v171;
        sub_10015FAA0( v187,  (uint64_t)v168,  (void (*)(char *, uint64_t))sub_100171D18,  (uint64_t)v97,  v177,  v179);

        swift_bridgeObjectRelease(v168, v102, v103, v104, v105, v106, v107, v108);
        swift_release_n(v97, 2LL);
        swift_bridgeObjectRelease_n(v179, 2LL);
        sub_10000852C(v174, v175);
        sub_10000852C(v173, v51);
        sub_10000852C(v181, v182);
        sub_10000852C(v184, v176);
        swift_bridgeObjectRelease(v179, v109, v110, v111, v112, v113, v114, v115);
        return;
      }

      swift_bridgeObjectRelease(v179, v90, v91, v92, v93, v94, v95, v96);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v137 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v137, (uint64_t)qword_1002567D0);
      id v138 = v63;
      uint64_t v139 = (os_log_s *)Logger.logObject.getter(v138);
      os_log_type_t v140 = static os_log_type_t.info.getter(v139);
      if (os_log_type_enabled(v139, v140))
      {
        uint64_t v141 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v180 = swift_slowAlloc(32LL, -1LL);
        v189[0] = v180;
        *(_DWORD *)uint64_t v141 = 136446210;
        id v142 = [v138 machineID];
        uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
        uint64_t v145 = v144;

        uint64_t v188 = sub_10017C4C4(v143, (unint64_t)v145, v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v141 + 4, v141 + 12);

        uint64_t v146 = v138;
        swift_bridgeObjectRelease(v145, v147, v148, v149, v150, v151, v152, v153);
        _os_log_impl( (void *)&_mh_execute_header,  v139,  v140,  "preapprovedJoin: self machineID %{public}s (me) not on list",  v141,  0xCu);
        swift_arrayDestroy(v180, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v180, -1LL, -1LL);
        swift_slowDealloc(v141, -1LL, -1LL);
      }

      else
      {

        uint64_t v146 = v138;
      }

      id v154 = objc_allocWithZone(&OBJC_CLASS___SecTapToRadar);
      NSString v155 = String._bridgeToObjectiveC()();
      NSString v156 = String._bridgeToObjectiveC()();
      NSString v157 = String._bridgeToObjectiveC()();
      id v158 = [v154 initTapToRadar:v155 description:v156 radar:v157];

      [v158 trigger];
      id v159 = [v146 machineID];
      uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
      uint64_t v162 = v161;

      unint64_t v163 = sub_100043F74();
      uint64_t v164 = swift_allocError(&type metadata for ContainerError, v163, 0LL, 0LL);
      *(void *)uint64_t v165 = v160;
      *(void *)(v165 + 8) = v162;
      *(_BYTE *)(v165 + 16) = 2;
      v186(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v164);
      swift_errorRelease();

      sub_10000852C(v174, v175);
      sub_10000852C(v173, v172);
      uint64_t v136 = v181;
    }

    else
    {
      swift_bridgeObjectRelease(v179, v72, v73, v74, v75, v76, v77, v78);
      unint64_t v133 = sub_100043F74();
      uint64_t v134 = swift_allocError(&type metadata for ContainerError, v133, 0LL, 0LL);
      *(_OWORD *)uint64_t v135 = xmmword_1001DEA00;
      *(_BYTE *)(v135 + 16) = 13;
      v186(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v134);
      swift_errorRelease();

      sub_10000852C(v174, v175);
      sub_10000852C(v173, v51);
      uint64_t v136 = v181;
    }

    sub_10000852C(v136, v182);
    sub_10000852C(v184, v176);
  }

  else
  {
    swift_bridgeObjectRelease(v179, v64, v65, v66, v67, v68, v69, v70);
    unint64_t v130 = sub_100043F74();
    uint64_t v131 = swift_allocError(&type metadata for ContainerError, v130, 0LL, 0LL);
    *(_OWORD *)uint64_t v132 = xmmword_1001DE880;
    *(_BYTE *)(v132 + 16) = 13;
    v186(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v131);
    swift_errorRelease();

    sub_10000852C(v174, v175);
    sub_10000852C(v173, v51);
    sub_10000852C(v181, v182);
    sub_10000852C(v184, v43);
  }

void sub_1001304F0( char *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, void *a4, char *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void **a11, os_log_s *a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20)
{
  if (a1)
  {
    uint64_t v26 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey];
    id v27 = *(id *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    BOOL v107 = a1;
    id v28 = [v26 publicKey];
    id v29 = [v28 spki];
    swift_unknownObjectRelease(v28);
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
    unint64_t v32 = v31;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v30, v32);
    aBlock = 0LL;
    unsigned int v34 = [v27 hasPotentiallyTrustedPeerPreapprovingKey:isa error:&aBlock];

    id v35 = aBlock;
    if (aBlock)
    {
      id v106 = a3;
      int64_t v36 = aBlock;
      swift_willThrow(v36);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v37, (uint64_t)qword_1002567D0);
      id v38 = v36;
      BOOL v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.info.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        id v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v105 = (void ***)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v41 = 138543362;
        unint64_t v42 = v38;
        unint64_t v43 = (void **)_swift_stdlib_bridgeErrorToNSError(v42);
        aBlock = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v110, v41 + 4, v41 + 12);
        *id v105 = v43;

        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "preapprovedJoin: error calling hasPotentiallyTrustedPeerPreapprovingKey %{public}@",  v41,  0xCu);
        uint64_t v44 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v105, 1LL, v44);
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);
LABEL_15:

        uint64_t v93 = v38;
        ((void (*)(void, void, void *, void, void **))v106)( 0LL,  0LL,  _swiftEmptyArrayStorage,  0LL,  v35);

        return;
      }

uint64_t sub_100130CCC( char *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t *a4, _TtC18TrustedPeersHelper6Client *a5, void *a6, _TtC18TrustedPeersHelper6Client *a7, void (*a8)(void, void, void *, void, void), uint64_t a9, uint64_t a10, _TtC18TrustedPeersHelper6Client *a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v470 = (void (*)(void, void, void *, void, void))a8;
  v471 = a3;
  uint64_t v467 = a5;
  id v468 = a6;
  v472 = a4;
  v473 = a1;
  uint64_t v469 = a9;
  uint64_t v451 = type metadata accessor for JoinWithVoucherRequest(0LL);
  __chkstk_darwin(v451, v21);
  BOOL v452 = (char *)&v436 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for SignedVoucher(0LL);
  id v457 = *(os_log_s **)(v23 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v466 = (uint64_t)&v436 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100007578(&qword_100256CA0);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v448 = (uint64_t)&v436 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28, v30);
  uint64_t v447 = (uint64_t)&v436 - v31;
  uint64_t v454 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  SEL v453 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v454 - 8);
  uint64_t v33 = __chkstk_darwin(v454, v32);
  id v450 = (uint8_t *)&v436 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33, v35);
  id v449 = (_OWORD *)((char *)&v436 - v36);
  uint64_t v37 = type metadata accessor for Bottle(0LL);
  uint64_t v39 = __chkstk_darwin(v37, v38);
  uint64_t v458 = (uint64_t)&v436 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v39, v41);
  uint64_t v459 = (uint64_t)&v436 - v42;
  uint64_t v43 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v43, v44);
  uint64_t v464 = (uint64_t)&v436 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v462 = *(void *)(v46 - 8);
  uint64_t v463 = (_TtC18TrustedPeersHelper6Client *)v46;
  __chkstk_darwin(v46, v47);
  v461 = (char *)&v436 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v465 = type metadata accessor for Peer(0LL);
  uint64_t v455 = *(void *)(v465 - 8);
  uint64_t v49 = *(void *)(v455 + 64);
  uint64_t v51 = __chkstk_darwin(v465, v50);
  uint64_t v456 = (uint64_t)&v436 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = __chkstk_darwin(v51, v52);
  uint64_t v55 = (char *)&v436 - v54;
  uint64_t v57 = __chkstk_darwin(v53, v56);
  SEL v59 = (char *)&v436 - v58;
  uint64_t v61 = __chkstk_darwin(v57, v60);
  id v63 = (char *)&v436 - v62;
  uint64_t v65 = __chkstk_darwin(v61, v64);
  uint64_t v67 = (char *)&v436 - v66;
  uint64_t v69 = __chkstk_darwin(v65, v68);
  id v71 = (char *)&v436 - v70;
  __chkstk_darwin(v69, v72);
  id v74 = (char *)&v436 - v73;
  uint64_t v460 = a2;
  id v75 = sub_100123BD4( (uint64_t)v71,  a2,  (uint64_t)v471,  v472,  v467,  0LL,  0LL,  (uint64_t)v468,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)a7);
  id v76 = v461;
  uint64_t v467 = a7;
  uint64_t v442 = v67;
  v443 = v63;
  v445 = v59;
  os_log_type_t v444 = v55;
  uint64_t v441 = v49;
  id v468 = v75;
  sub_100041608((uint64_t)v71, (uint64_t)v74, type metadata accessor for Peer);
  uint64_t v77 = *(int *)(v465 + 32);
  SEL v446 = v74;
  uint64_t v78 = v464;
  sub_10000FC68((uint64_t)&v74[v77], v464, &qword_100251F18);
  SEL v79 = v76;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *))(v462 + 48))(v78, 1LL, v463) == 1)
  {
    *id v76 = xmmword_1001DE6F0;
    v76[1] = xmmword_1001DE6F0;
    id v80 = v468;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v78, &qword_100251F18);
  }

  else
  {
    sub_100041608(v78, (uint64_t)v76, type metadata accessor for SignedPeerStableInfo);
    id v81 = v468;
  }

  id v82 = v467;
  uint64_t v83 = *(void *)v76;
  unint64_t v84 = v79[1];
  uint64_t v85 = v79[2];
  unint64_t v86 = v79[3];
  id v87 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  sub_1000084E8(v83, v84);
  sub_1000084E8(v85, v86);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v89 = Data._bridgeToObjectiveC()().super.isa;
  id v90 = (_TtC18TrustedPeersHelper6Client *)[v87 initWithData:isa sig:v89];
  sub_10000852C(v85, v86);
  sub_10000852C(v83, v84);

  sub_1000415CC((uint64_t)v79, type metadata accessor for SignedPeerStableInfo);
  if (v90)
  {
    id v91 = (os_log_s *)[v472 epoch];
    id v92 = v470;
    id v93 = v468;
    if (((unint64_t)v91 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
      swift_once(&qword_100250EB8, sub_1000DD078);
      uint64_t v95 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v95, (uint64_t)qword_1002567D0);
      swift_errorRetain(0LL);
      uint64_t v96 = swift_errorRetain(0LL);
      os_log_type_t v97 = (os_log_s *)Logger.logObject.getter(v96);
      os_log_type_t v101 = static os_log_type_t.error.getter(v97, v98, v99, v100);
      if (os_log_type_enabled(v97, v101))
      {
        uint64_t v467 = v90;
        SEL v102 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v103 = swift_slowAlloc(32LL, -1LL);
        uint64_t v474 = 0LL;
        uint64_t v475 = v103;
        *(_DWORD *)SEL v102 = 136446210;
        swift_errorRetain(0LL);
        uint64_t v104 = sub_100007578(&qword_100251D70);
        uint64_t v105 = String.init<A>(describing:)(&v474, v104);
        BOOL v107 = (_TtC18TrustedPeersHelper6Client *)v106;
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v105, v106, &v475);
        id v90 = v467;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v102 + 4, v102 + 12);
        BOOL v108 = v107;
        id v93 = v468;
        swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v97,  v101,  "Unable to process keys before joining: %{public}s",  v102,  0xCu);
        swift_arrayDestroy(v103, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v103, -1LL, -1LL);
        swift_slowDealloc(v102, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain(0LL);
      v92(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, 0LL);

      swift_errorRelease();
      swift_errorRelease();
      uint64_t v128 = type metadata accessor for Peer;
      uint64_t v129 = (uint64_t)v446;
    }

    else
    {
      sub_100122C24(a10, a11, v82, (uint64_t)v468, v91);
      uint64_t v94 = v460;
      uint64_t v131 = v130;
      unint64_t v133 = v132;
      uint64_t v134 = v90;

      uint64_t v135 = v458;
      sub_100142BBC(v94, v471, v458);
      v461 = 0LL;
      uint64_t v463 = v133;
      uint64_t v467 = v134;
      sub_100041608(v135, v459, type metadata accessor for Bottle);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v137 = type metadata accessor for Logger(0LL);
      uint64_t v138 = sub_100006BAC(v137, (uint64_t)qword_1002567D0);
      uint64_t v139 = v471;
      uint64_t v140 = swift_bridgeObjectRetain_n(v471, 2LL);
      uint64_t v141 = (os_log_s *)Logger.logObject.getter(v140);
      os_log_type_t v142 = static os_log_type_t.info.getter(v141);
      BOOL v143 = os_log_type_enabled(v141, v142);
      uint64_t v464 = v138;
      uint64_t v462 = v131;
      unint64_t v438 = a15;
      if (v143)
      {
        uint64_t v144 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v145 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v145;
        *(_DWORD *)uint64_t v144 = 136446210;
        swift_bridgeObjectRetain(v471);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v460, (unint64_t)v471, &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v144 + 4, v144 + 12);
        swift_bridgeObjectRelease_n(v471, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v141,  v142,  "Beginning preapprovedJoin for peer %{public}s",  v144,  0xCu);
        swift_arrayDestroy(v145, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v145, -1LL, -1LL);
        swift_slowDealloc(v144, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v139, 2LL);
      }

      uint64_t v458 = a17;
      sub_1000084E8(a12, a13);
      uint64_t v146 = sub_1000084E8(a12, a13);
      SEL v147 = (os_log_s *)Logger.logObject.getter(v146);
      os_log_type_t v148 = static os_log_type_t.info.getter(v147);
      BOOL v149 = os_log_type_enabled(v147, v148);
      uint64_t v440 = a16;
      if (v149)
      {
        id v150 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v151 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v151;
        *(_DWORD *)id v150 = 136446210;
        Swift::String v152 = Data.base64EncodedString(options:)(0LL);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v152._countAndFlagsBits,  (unint64_t)v152._object,  &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v150 + 4, v150 + 12);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v152._object,  v153,  v154,  v155,  v156,  v157,  v158,  v159);
        sub_10000852C(a12, a13);
        sub_10000852C(a12, a13);
        _os_log_impl((void *)&_mh_execute_header, v147, v148, "preapprovedJoin permanentInfo: %{public}s", v150, 0xCu);
        swift_arrayDestroy(v151, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v151, -1LL, -1LL);
        swift_slowDealloc(v150, -1LL, -1LL);
      }

      else
      {
        sub_10000852C(a12, a13);
        sub_10000852C(a12, a13);
      }

      unint64_t v160 = v438;
      unint64_t v439 = a19;
      sub_1000084E8(a14, v438);
      uint64_t v161 = sub_1000084E8(a14, v160);
      uint64_t v162 = (os_log_s *)Logger.logObject.getter(v161);
      os_log_type_t v163 = static os_log_type_t.info.getter(v162);
      BOOL v164 = os_log_type_enabled(v162, v163);
      uint64_t v437 = a18;
      if (v164)
      {
        uint64_t v165 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v166 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v166;
        *(_DWORD *)uint64_t v165 = 136446210;
        Swift::String v167 = Data.base64EncodedString(options:)(0LL);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v167._countAndFlagsBits,  (unint64_t)v167._object,  &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v165 + 4, v165 + 12);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v167._object,  v168,  v169,  v170,  v171,  v172,  v173,  v174);
        sub_10000852C(a14, v160);
        sub_10000852C(a14, v160);
        _os_log_impl( (void *)&_mh_execute_header,  v162,  v163,  "preapprovedJoin permanentInfoSig: %{public}s",  v165,  0xCu);
        swift_arrayDestroy(v166, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v166, -1LL, -1LL);
        swift_slowDealloc(v165, -1LL, -1LL);
      }

      else
      {
        sub_10000852C(a14, v160);
        sub_10000852C(a14, v160);
      }

      uint64_t v175 = v440;
      unint64_t v176 = v458;
      sub_1000084E8(v440, v458);
      uint64_t v177 = sub_1000084E8(v175, v176);
      id v178 = (os_log_s *)Logger.logObject.getter(v177);
      os_log_type_t v179 = static os_log_type_t.info.getter(v178);
      if (os_log_type_enabled(v178, v179))
      {
        uint64_t v180 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v181 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v181;
        *(_DWORD *)uint64_t v180 = 136446210;
        Swift::String v182 = Data.base64EncodedString(options:)(0LL);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v182._countAndFlagsBits,  (unint64_t)v182._object,  &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v180 + 4, v180 + 12);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v182._object,  v183,  v184,  v185,  v186,  v187,  v188,  v189);
        sub_10000852C(v175, v176);
        sub_10000852C(v175, v176);
        _os_log_impl((void *)&_mh_execute_header, v178, v179, "preapprovedJoin stableInfo: %{public}s", v180, 0xCu);
        swift_arrayDestroy(v181, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v181, -1LL, -1LL);
        swift_slowDealloc(v180, -1LL, -1LL);
      }

      else
      {
        sub_10000852C(v175, v176);
        sub_10000852C(v175, v176);
      }

      uint64_t v190 = v437;
      unint64_t v191 = v439;
      sub_1000084E8(v437, v439);
      uint64_t v192 = sub_1000084E8(v190, v191);
      Class v193 = (os_log_s *)Logger.logObject.getter(v192);
      os_log_type_t v194 = static os_log_type_t.info.getter(v193);
      if (os_log_type_enabled(v193, v194))
      {
        NSString v195 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v196 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v196;
        *(_DWORD *)NSString v195 = 136446210;
        Swift::String v197 = Data.base64EncodedString(options:)(0LL);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v197._countAndFlagsBits,  (unint64_t)v197._object,  &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v195 + 4, v195 + 12);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v197._object,  v198,  v199,  v200,  v201,  v202,  v203,  v204);
        sub_10000852C(v190, v191);
        sub_10000852C(v190, v191);
        _os_log_impl((void *)&_mh_execute_header, v193, v194, "preapprovedJoin stableInfoSig: %{public}s", v195, 0xCu);
        swift_arrayDestroy(v196, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v196, -1LL, -1LL);
        swift_slowDealloc(v195, -1LL, -1LL);
      }

      else
      {
        sub_10000852C(v190, v191);
        sub_10000852C(v190, v191);
      }

      uint64_t v205 = (uint64_t)v446;
      uint64_t v206 = (uint64_t)v445;
      uint64_t v207 = (uint64_t)v443;
      uint64_t v208 = (uint64_t)v442;
      uint64_t v209 = sub_10004164C((uint64_t)v446, (uint64_t)v442, type metadata accessor for Peer);
      NSString v210 = (os_log_s *)Logger.logObject.getter(v209);
      os_log_type_t v211 = static os_log_type_t.info.getter(v210);
      if (os_log_type_enabled(v210, v211))
      {
        BOOL v212 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v213 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v213;
        *(_DWORD *)BOOL v212 = 136446210;
        uint64_t v214 = v447;
        sub_10000FC68(v208 + *(int *)(v465 + 36), v447, &qword_100256CA0);
        if (v453[6](v214, 1LL, v454) == 1)
        {
          uint64_t v215 = v449;
          *id v449 = xmmword_1001DE6F0;
          v215[1] = xmmword_1001DE6F0;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          sub_100041590(v214, &qword_100256CA0);
        }

        else
        {
          uint64_t v215 = v449;
          sub_100041608(v214, (uint64_t)v449, type metadata accessor for SignedPeerDynamicInfo);
        }

        uint64_t v216 = *(void *)v215;
        unint64_t v217 = *((void *)v215 + 1);
        sub_1000084E8(*(void *)v215, v217);
        sub_1000415CC((uint64_t)v215, type metadata accessor for SignedPeerDynamicInfo);
        Swift::String v218 = Data.base64EncodedString(options:)(0LL);
        sub_10000852C(v216, v217);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v218._countAndFlagsBits,  (unint64_t)v218._object,  &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v212 + 4, v212 + 12);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v218._object,  v219,  v220,  v221,  v222,  v223,  v224,  v225);
        sub_1000415CC((uint64_t)v442, type metadata accessor for Peer);
        _os_log_impl((void *)&_mh_execute_header, v210, v211, "preapprovedJoin dynamicInfo: %{public}s", v212, 0xCu);
        swift_arrayDestroy(v213, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v213, -1LL, -1LL);
        swift_slowDealloc(v212, -1LL, -1LL);

        uint64_t v205 = (uint64_t)v446;
        uint64_t v206 = (uint64_t)v445;
        uint64_t v207 = (uint64_t)v443;
      }

      else
      {
        sub_1000415CC(v208, type metadata accessor for Peer);
      }

      uint64_t v226 = sub_10004164C(v205, v207, type metadata accessor for Peer);
      uint64_t v227 = (os_log_s *)Logger.logObject.getter(v226);
      os_log_type_t v228 = static os_log_type_t.info.getter(v227);
      if (os_log_type_enabled(v227, v228))
      {
        uint64_t v229 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v230 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v230;
        *(_DWORD *)uint64_t v229 = 136446210;
        uint64_t v231 = v207 + *(int *)(v465 + 36);
        uint64_t v232 = v448;
        sub_10000FC68(v231, v448, &qword_100256CA0);
        if (v453[6](v232, 1LL, v454) == 1)
        {
          uint64_t v233 = v450;
          *(_OWORD *)id v450 = xmmword_1001DE6F0;
          *((_OWORD *)v233 + 1) = xmmword_1001DE6F0;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          sub_100041590(v232, &qword_100256CA0);
        }

        else
        {
          uint64_t v233 = v450;
          sub_100041608(v232, (uint64_t)v450, type metadata accessor for SignedPeerDynamicInfo);
        }

        uint64_t v234 = *((void *)v233 + 2);
        unint64_t v235 = *((void *)v233 + 3);
        sub_1000084E8(v234, v235);
        sub_1000415CC((uint64_t)v233, type metadata accessor for SignedPeerDynamicInfo);
        Swift::String v236 = Data.base64EncodedString(options:)(0LL);
        sub_10000852C(v234, v235);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v236._countAndFlagsBits,  (unint64_t)v236._object,  &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v229 + 4, v229 + 12);
        swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v236._object,  v237,  v238,  v239,  v240,  v241,  v242,  v243);
        sub_1000415CC((uint64_t)v443, type metadata accessor for Peer);
        _os_log_impl((void *)&_mh_execute_header, v227, v228, "preapprovedJoin dynamicInfoSig: %{public}s", v229, 0xCu);
        swift_arrayDestroy(v230, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v230, -1LL, -1LL);
        swift_slowDealloc(v229, -1LL, -1LL);

        uint64_t v205 = (uint64_t)v446;
        uint64_t v206 = (uint64_t)v445;
      }

      else
      {
        sub_1000415CC(v207, type metadata accessor for Peer);
      }

      uint64_t v244 = sub_10004164C(v205, v206, type metadata accessor for Peer);
      id v245 = (os_log_s *)Logger.logObject.getter(v244);
      int v246 = static os_log_type_t.info.getter(v245);
      BOOL v247 = os_log_type_enabled(v245, (os_log_type_t)v246);
      uint64_t v248 = (uint64_t)v444;
      uint64_t v249 = v457;
      if (v247)
      {
        LODWORD(v458) = v246;
        uint64_t v250 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v454 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v454;
        *(_DWORD *)uint64_t v250 = 136446210;
        uint64_t v251 = *(_TtC18TrustedPeersHelper6Client **)(v206 + 16);
        int64_t v252 = *(void *)v251->endpoint;
        os_log_type_t v253 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
        uint64_t v254 = v466;
        if (v252)
        {
          id v450 = v250;
          SEL v453 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v245;
          uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v251);
          sub_10014E670(0, v252, 0);
          uint64_t v255 = (uint64_t)&v251->_TtCs12_SwiftObject_opaque[(*((unsigned __int8 *)v249 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v249 + 80)];
          uint64_t v256 = *((void *)v249 + 9);
          os_log_type_t v253 = v474;
          do
          {
            sub_10004164C(v255, v254, type metadata accessor for SignedVoucher);
            Swift::String v257 = Data.base64EncodedString(options:)(0LL);
            sub_1000415CC(v254, type metadata accessor for SignedVoucher);
            if ((swift_isUniquelyReferenced_nonNull_native(v253) & 1) == 0)
            {
              sub_10014E670(0, *(void *)v253->endpoint + 1LL, 1);
              os_log_type_t v253 = v474;
            }

            unint64_t v266 = *(void *)v253->endpoint;
            unint64_t v265 = *(void *)v253->containerMap;
            if (v266 >= v265 >> 1)
            {
              sub_10014E670(v265 > 1, v266 + 1, 1);
              os_log_type_t v253 = v474;
            }

            *(void *)v253->endpoint = v266 + 1;
            *(Swift::String *)&v253[1]._TtCs12_SwiftObject_opaque[16 * v266] = v257;
            v255 += v256;
            --v252;
            uint64_t v254 = v466;
          }

          while (v252);
          swift_bridgeObjectRelease(v251, v258, v259, v260, v261, v262, v263, v264);
          uint64_t v205 = (uint64_t)v446;
          uint64_t v206 = (uint64_t)v445;
          id v245 = (os_log_s *)v453;
          uint64_t v250 = v450;
        }

        uint64_t v267 = Array.description.getter(v253, &type metadata for String);
        BOOL v269 = (_TtC18TrustedPeersHelper6Client *)v268;
        swift_bridgeObjectRelease(v253, v268, v270, v271, v272, v273, v274, v275);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v267, (unint64_t)v269, &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v250 + 4, v250 + 12);
        swift_bridgeObjectRelease(v269, v276, v277, v278, v279, v280, v281, v282);
        sub_1000415CC(v206, type metadata accessor for Peer);
        _os_log_impl( (void *)&_mh_execute_header,  v245,  (os_log_type_t)v458,  "preapprovedJoin vouchers: %{public}s",  v250,  0xCu);
        uint64_t v283 = v454;
        swift_arrayDestroy(v454, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v283, -1LL, -1LL);
        swift_slowDealloc(v250, -1LL, -1LL);

        uint64_t v248 = (uint64_t)v444;
        uint64_t v249 = v457;
      }

      else
      {
        sub_1000415CC(v206, type metadata accessor for Peer);
      }

      uint64_t v284 = sub_10004164C(v205, v248, type metadata accessor for Peer);
      BOOL v285 = (os_log_s *)Logger.logObject.getter(v284);
      int v286 = static os_log_type_t.info.getter(v285);
      if (os_log_type_enabled(v285, (os_log_type_t)v286))
      {
        uint64_t v287 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v458 = swift_slowAlloc(32LL, -1LL);
        uint64_t v475 = v458;
        *(_DWORD *)uint64_t v287 = 136446210;
        uint64_t v288 = *(_TtC18TrustedPeersHelper6Client **)(v248 + 16);
        int64_t v289 = *(void *)v288->endpoint;
        uint64_t v290 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
        if (v289)
        {
          LODWORD(v453) = v286;
          uint64_t v454 = (uint64_t)v287;
          id v457 = v285;
          uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v288);
          sub_10014E670(0, v289, 0);
          uint64_t v291 = (uint64_t)&v288->_TtCs12_SwiftObject_opaque[(*((unsigned __int8 *)v249 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v249 + 80)];
          uint64_t v292 = *((void *)v249 + 9);
          uint64_t v290 = v474;
          do
          {
            uint64_t v293 = v466;
            sub_10004164C(v291, v466, type metadata accessor for SignedVoucher);
            Swift::String v294 = Data.base64EncodedString(options:)(0LL);
            sub_1000415CC(v293, type metadata accessor for SignedVoucher);
            if ((swift_isUniquelyReferenced_nonNull_native(v290) & 1) == 0)
            {
              sub_10014E670(0, *(void *)v290->endpoint + 1LL, 1);
              uint64_t v290 = v474;
            }

            unint64_t v303 = *(void *)v290->endpoint;
            unint64_t v302 = *(void *)v290->containerMap;
            if (v303 >= v302 >> 1)
            {
              sub_10014E670(v302 > 1, v303 + 1, 1);
              uint64_t v290 = v474;
            }

            *(void *)v290->endpoint = v303 + 1;
            *(Swift::String *)&v290[1]._TtCs12_SwiftObject_opaque[16 * v303] = v294;
            v291 += v292;
            --v289;
          }

          while (v289);
          swift_bridgeObjectRelease(v288, v295, v296, v297, v298, v299, v300, v301);
          BOOL v285 = v457;
          uint64_t v287 = (uint8_t *)v454;
          LOBYTE(v286) = (_BYTE)v453;
        }

        uint64_t v304 = Array.description.getter(v290, &type metadata for String);
        id v306 = (_TtC18TrustedPeersHelper6Client *)v305;
        swift_bridgeObjectRelease(v290, v305, v307, v308, v309, v310, v311, v312);
        uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v304, (unint64_t)v306, &v475);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v287 + 4, v287 + 12);
        swift_bridgeObjectRelease(v306, v313, v314, v315, v316, v317, v318, v319);
        sub_1000415CC((uint64_t)v444, type metadata accessor for Peer);
        _os_log_impl( (void *)&_mh_execute_header,  v285,  (os_log_type_t)v286,  "preapprovedJoin voucher signatures: %{public}s",  v287,  0xCu);
        uint64_t v320 = v458;
        swift_arrayDestroy(v458, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v320, -1LL, -1LL);
        swift_slowDealloc(v287, -1LL, -1LL);
      }

      else
      {
        sub_1000415CC(v248, type metadata accessor for Peer);
      }

      id v321 = v463;
      uint64_t v322 = swift_bridgeObjectRetain(v463);
      id v323 = (os_log_s *)Logger.logObject.getter(v322);
      os_log_type_t v324 = static os_log_type_t.info.getter(v323);
      if (os_log_type_enabled(v323, v324))
      {
        BOOL v325 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)BOOL v325 = 134217984;
        uint64_t v475 = *(void *)v321->endpoint;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, v476, v325 + 4, v325 + 12);
        swift_bridgeObjectRelease(v321, v326, v327, v328, v329, v330, v331, v332);
        _os_log_impl((void *)&_mh_execute_header, v323, v324, "preapprovedJoin: uploading %ld tlk shares", v325, 0xCu);
        swift_slowDealloc(v325, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease(v321, v333, v334, v335, v336, v337, v338, v339);
      }

      uint64_t v340 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
      id v341 = (_TtC18TrustedPeersHelper6Client *)v461;
      uint64_t v342 = Message.serializedData(partial:)(0LL, v465, v340);
      if (v341)
      {
        swift_errorRetain(v341);
        uint64_t v344 = swift_errorRetain(v341);
        uint64_t v345 = (os_log_s *)Logger.logObject.getter(v344);
        os_log_type_t v346 = static os_log_type_t.info.getter(v345);
        BOOL v347 = os_log_type_enabled(v345, v346);
        v348 = v473;
        if (v347)
        {
          v349 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v350 = swift_slowAlloc(32LL, -1LL);
          uint64_t v474 = v341;
          uint64_t v475 = v350;
          *(_DWORD *)v349 = 136446210;
          swift_errorRetain(v341);
          uint64_t v351 = sub_100007578(&qword_100251D70);
          uint64_t v352 = String.init<A>(describing:)(&v474, v351);
          unint64_t v354 = (_TtC18TrustedPeersHelper6Client *)v353;
          uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4(v352, v353, &v475);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v349 + 4, v349 + 12);
          swift_bridgeObjectRelease(v354, v355, v356, v357, v358, v359, v360, v361);
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v345,  v346,  "preapprovedJoin unable to encode peer: %{public}s",  v349,  0xCu);
          swift_arrayDestroy(v350, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v350, -1LL, -1LL);
          swift_slowDealloc(v349, -1LL, -1LL);

          swift_errorRelease();
        }

        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }

        uint64_t v466 = 0LL;
      }

      else
      {
        uint64_t v362 = v342;
        unint64_t v363 = v343;
        uint64_t v466 = 0LL;
        Swift::String v364 = Data.base64EncodedString(options:)(0LL);
        sub_10000852C(v362, v363);
        uint64_t v365 = swift_bridgeObjectRetain(v364._object);
        int v366 = (os_log_s *)Logger.logObject.getter(v365);
        os_log_type_t v367 = static os_log_type_t.info.getter(v366);
        BOOL v368 = os_log_type_enabled(v366, v367);
        v348 = v473;
        if (v368)
        {
          int64_t v369 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v370 = swift_slowAlloc(32LL, -1LL);
          uint64_t v475 = v370;
          *(_DWORD *)int64_t v369 = 136446210;
          swift_bridgeObjectRetain(v364._object);
          uint64_t v474 = (_TtC18TrustedPeersHelper6Client *)sub_10017C4C4( v364._countAndFlagsBits,  (unint64_t)v364._object,  &v475);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v474, &v475, v369 + 4, v369 + 12);
          swift_bridgeObjectRelease_n(v364._object, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v366, v367, "preapprovedJoin peer: %{public}s", v369, 0xCu);
          swift_arrayDestroy(v370, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v370, -1LL, -1LL);
          swift_slowDealloc(v369, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v364._object, 2LL);
        }
      }

      uint64_t v371 = v452;
      uint64_t v372 = v451;
      id v373 = [*(id *)&v348[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] changeToken];
      if (v373)
      {
        v375 = v373;
        uint64_t v376 = static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
        v378 = v377;
      }

      else
      {
        uint64_t v376 = 0LL;
        v378 = (_TtC18TrustedPeersHelper6Client *)0xE000000000000000LL;
      }

      __chkstk_darwin(v373, v374);
      *(&v436 - 8) = v376;
      *(&v436 - 7) = (uint64_t)v378;
      uint64_t v379 = (uint64_t)v446;
      uint64_t v380 = v459;
      *(&v436 - 6) = (uint64_t)v446;
      *(&v436 - 5) = v380;
      unint64_t v381 = (_TtC18TrustedPeersHelper6Client *)v462;
      unint64_t v382 = v463;
      *(&v436 - 4) = (uint64_t)v463;
      *(&v436 - 3) = (uint64_t)v381;
      v383 = v473;
      id v435 = v473;
      uint64_t v384 = sub_1000077B8( &qword_1002526D8,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
      static Message.with(_:)(sub_100171DC4, &v436 - 10, v372, v384);
      swift_bridgeObjectRelease(v381, v385, v386, v387, v388, v389, v390, v391);
      swift_bridgeObjectRelease(v382, v392, v393, v394, v395, v396, v397, v398);
      swift_bridgeObjectRelease(v378, v399, v400, v401, v402, v403, v404, v405);
      uint64_t v406 = *(void *)&v383[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      uint64_t v466 = *(void *)&v383[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v464 = v406;
      uint64_t v465 = (uint64_t)sub_1000084C4(&v383[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v466);
      uint64_t v407 = v456;
      sub_10004164C(v379, v456, type metadata accessor for Peer);
      uint64_t v408 = *(unsigned __int8 *)(v455 + 80);
      uint64_t v409 = (uint64_t)v371;
      uint64_t v410 = (v408 + 24) & ~v408;
      unint64_t v411 = (v441 + v410 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v412 = (v411 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      v413 = v383;
      unint64_t v414 = (v412 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v415 = (v414 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      v416 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238780, v415 + 16, v408 | 7);
      *(void *)v416->endpoint = v383;
      sub_100041608(v407, (uint64_t)&v416->_TtCs12_SwiftObject_opaque[v410], type metadata accessor for Peer);
      v417 = v471;
      BOOL v418 = v472;
      *(void *)&v416->_TtCs12_SwiftObject_opaque[v411] = v472;
      BOOL v419 = v467;
      *(void *)&v416->_TtCs12_SwiftObject_opaque[v412] = v467;
      unint64_t v420 = &v416->_TtCs12_SwiftObject_opaque[v414];
      uint64_t v421 = v469;
      *(void *)unint64_t v420 = v470;
      *((void *)v420 + 1) = v421;
      v422 = &v416->_TtCs12_SwiftObject_opaque[v415];
      *(void *)v422 = v460;
      *((void *)v422 + 1) = v417;
      uint64_t v423 = *(void *)(v464 + 16);
      v424 = *(void (**)(uint64_t, void (*)(uint64_t), _TtC18TrustedPeersHelper6Client *, uint64_t, uint64_t))(v423 + 24);
      swift_bridgeObjectRetain(v417);
      id v425 = v413;
      v426 = v418;
      v427 = v419;
      swift_retain(v421);
      v424(v409, sub_100172074, v416, v466, v423);

      swift_release(v416, v428, v429, v430, v431, v432, v433, v434);
      sub_1000415CC(v409, type metadata accessor for JoinWithVoucherRequest);
      sub_1000415CC((uint64_t)v446, type metadata accessor for Peer);
      uint64_t v128 = type metadata accessor for Bottle;
      uint64_t v129 = v459;
    }
  }

  else
  {
    id v116 = v468;

    uint64_t v117 = v470;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v118 = type metadata accessor for Logger(0LL);
    uint64_t v119 = sub_100006BAC(v118, (uint64_t)qword_1002567D0);
    os_log_type_t v120 = (os_log_s *)Logger.logObject.getter(v119);
    os_log_type_t v121 = static os_log_type_t.info.getter(v120);
    BOOL v122 = os_log_type_enabled(v120, v121);
    uint64_t v123 = (uint64_t)v446;
    if (v122)
    {
      uint64_t v124 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v124 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v120,  v121,  "Unable to create new peer stable info for joining",  v124,  2u);
      swift_slowDealloc(v124, -1LL, -1LL);
    }

    unint64_t v125 = sub_100043F74();
    uint64_t v126 = swift_allocError(&type metadata for ContainerError, v125, 0LL, 0LL);
    *(_OWORD *)uint64_t v127 = xmmword_1001DEA00;
    *(_BYTE *)(v127 + 16) = 13;
    v117(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v126);

    swift_errorRelease();
    uint64_t v128 = type metadata accessor for Peer;
    uint64_t v129 = v123;
  }

  return sub_1000415CC(v129, v128);
}

uint64_t sub_100132E70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _TtC18TrustedPeersHelper6Client *a6, _TtC18TrustedPeersHelper6Client *a7, uint64_t a8)
{
  uint64_t v95 = a8;
  uint64_t v93 = a5;
  uint64_t v97 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  __chkstk_darwin(v97, v14);
  uint64_t v96 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Bottle(0LL);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  swift_bridgeObjectRetain(a6);
  uint64_t v94 = a7;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v24)) & 1) == 0)
  {
    uint64_t v25 = *(void *)(a1 + v24);
    uint64_t v26 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    uint64_t v27 = swift_retain(v25);
    uint64_t v28 = sub_100089850(v27);
    uint64_t v29 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v24);
    *(void *)(a1 + v24) = v28;
    swift_release(v29, v30, v31, v32, v33, v34, v35, v36);
  }

  uint64_t v37 = *(void *)(a1 + v24);
  swift_beginAccess(v37 + 16, v100, 1LL, 0LL);
  uint64_t v38 = *(_TtC18TrustedPeersHelper6Client **)(v37 + 24);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
  sub_10004164C(a4, (uint64_t)v23, type metadata accessor for Peer);
  JoinWithVoucherRequest.peer.setter((uint64_t)v23);
  sub_10004164C(v93, (uint64_t)v19, type metadata accessor for Bottle);
  JoinWithVoucherRequest.bottle.setter((uint64_t)v19);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v24)) & 1) == 0)
  {
    uint64_t v46 = *(void *)(a1 + v24);
    uint64_t v47 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
    uint64_t v48 = swift_retain(v46);
    uint64_t v49 = sub_100089850(v48);
    uint64_t v50 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v24);
    *(void *)(a1 + v24) = v49;
    swift_release(v50, v51, v52, v53, v54, v55, v56, v57);
  }

  uint64_t v58 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v24)
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess(v58, v99, 1LL, 0LL);
  SEL v59 = *v58;
  _TtC18TrustedPeersHelper6Client *v58 = a6;
  swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v24)) & 1) == 0)
  {
    uint64_t v67 = *(void *)(a1 + v24);
    uint64_t v68 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
    uint64_t v69 = swift_retain(v67);
    uint64_t v70 = sub_100089850(v69);
    id v71 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v24);
    *(void *)(a1 + v24) = v70;
    swift_release(v71, v72, v73, v74, v75, v76, v77, v78);
  }

  SEL v79 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v24)
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess(v79, v98, 1LL, 0LL);
  id v80 = *v79;
  *SEL v79 = v94;
  swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
  __chkstk_darwin(v88, v89);
  *(&v93 - 2) = v95;
  uint64_t v90 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  uint64_t v91 = (uint64_t)v96;
  static Message.with(_:)(sub_100176B40, &v93 - 4, v97, v90);
  return JoinWithVoucherRequest.trustedDevicesVersion.setter(v91);
}

void sub_1001331BC( uint64_t a1, char *a2, uint64_t a3, void *a4, void *a5, void (*a6)(void, void, void *, void, _TtC18TrustedPeersHelper6Client *), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v95 = a8;
  uint64_t v96 = a5;
  uint64_t v99 = a7;
  uint64_t v100 = a6;
  uint64_t v97 = a2;
  id v98 = a4;
  uint64_t v93 = a3;
  uint64_t v10 = type metadata accessor for Peer(0LL);
  uint64_t v94 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v94 + 64);
  __chkstk_darwin(v10, v12);
  id v13 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for JoinWithVoucherResponse(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v90 - v21;
  uint64_t v23 = sub_100007578((uint64_t *)&unk_100256E20);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (_TtC18TrustedPeersHelper6Client **)((char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v26, (uint64_t *)&unk_100256E20);
  if (swift_getEnumCaseMultiPayload(v26, v23) != 1)
  {
    uint64_t v90 = a9;
    id v92 = v22;
    sub_100041608((uint64_t)v26, (uint64_t)v22, type metadata accessor for JoinWithVoucherResponse);
    uint64_t v48 = v97;
    id v91 = *(id *)&v97[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    sub_10004164C(v93, (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for Peer);
    sub_10004164C((uint64_t)v22, (uint64_t)v19, type metadata accessor for JoinWithVoucherResponse);
    uint64_t v49 = *(unsigned __int8 *)(v94 + 80);
    uint64_t v50 = (v49 + 24) & ~v49;
    unint64_t v51 = (v11 + v50 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v53 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v54 = (v53 + v52 + 8) & ~v53;
    unint64_t v55 = (v16 + v54 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v56 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    id v57 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002387A8, v56 + 16, v49 | v53 | 7);
    *(void *)v57->endpoint = v48;
    sub_100041608((uint64_t)v13, (uint64_t)&v57->_TtCs12_SwiftObject_opaque[v50], type metadata accessor for Peer);
    *(void *)&v57->_TtCs12_SwiftObject_opaque[v51] = v98;
    uint64_t v58 = v96;
    *(void *)&v57->_TtCs12_SwiftObject_opaque[v52] = v96;
    sub_100041608( (uint64_t)v19,  (uint64_t)&v57->_TtCs12_SwiftObject_opaque[v54],  type metadata accessor for JoinWithVoucherResponse);
    SEL v59 = &v57->_TtCs12_SwiftObject_opaque[v55];
    uint64_t v60 = v99;
    *(void *)SEL v59 = v100;
    *((void *)v59 + 1) = v60;
    id v61 = &v57->_TtCs12_SwiftObject_opaque[v56];
    uint64_t v62 = v90;
    *(void *)id v61 = v95;
    *((void *)v61 + 1) = v62;
    id v63 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002387D0, 32LL, 7LL);
    *(void *)v63->endpoint = sub_100172460;
    *(void *)v63->containerMap = v57;
    aBlock[4] = (uint64_t)sub_100176BD4;
    SEL v102 = v63;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_1002387E8;
    id v64 = _Block_copy(aBlock);
    uint64_t v27 = v102;
    BOOL v65 = v97;
    id v66 = v98;
    id v67 = v58;
    swift_retain(v60);
    swift_bridgeObjectRetain(v62);
    swift_retain(v63);
    swift_release(v27, v68, v69, v70, v71, v72, v73, v74);
    [v91 performBlockAndWait:v64];
    _Block_release(v64);
    sub_1000415CC((uint64_t)v92, type metadata accessor for JoinWithVoucherResponse);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v63, "", 108LL, 6280LL, 57LL, 1LL);
    swift_release(v57, v75, v76, v77, v78, v79, v80, v81);
    swift_release(v63, v82, v83, v84, v85, v86, v87, v88);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v27 = *v26;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v28, (uint64_t)qword_1002567D0);
  swift_errorRetain(v27);
  uint64_t v29 = swift_errorRetain(v27);
  uint64_t isEscapingClosureAtFileLocation = Logger.logObject.getter(v29);
  os_log_type_t v34 = static os_log_type_t.error.getter(isEscapingClosureAtFileLocation, v31, v32, v33);
  if (!os_log_type_enabled((os_log_t)isEscapingClosureAtFileLocation, v34))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  id v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v36 = swift_slowAlloc(32LL, -1LL);
  aBlock[0] = v36;
  *(_DWORD *)id v35 = 136446210;
  uint64_t v103 = (uint64_t)v27;
  swift_errorRetain(v27);
  uint64_t v37 = sub_100007578(&qword_100251D70);
  uint64_t v38 = String.init<A>(describing:)(&v103, v37);
  id v40 = (_TtC18TrustedPeersHelper6Client *)v39;
  uint64_t v103 = sub_10017C4C4(v38, v39, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v35 + 4, v35 + 12);
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)isEscapingClosureAtFileLocation,  v34,  "preapprovedJoin failed: %{public}s",  v35,  0xCu);
  swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v36, -1LL, -1LL);
  swift_slowDealloc(v35, -1LL, -1LL);
LABEL_9:

  uint64_t v89 = v100;
  swift_errorRetain(v27);
  v89(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v27);
  swift_errorRelease();
  swift_errorRelease();
}

void sub_1001336E8( uint64_t a1, uint64_t a2, void *a3, void *a4, _TtC18TrustedPeersHelper6Client **a5, void (*a6)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, id, void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v105 = a8;
  uint64_t v115 = a7;
  id v116 = a6;
  SEL v109 = a5;
  id v111 = a3;
  id v112 = a4;
  uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v119 = v11;
  uint64_t v120 = v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v118 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v16);
  uint64_t v117 = (char *)&v105 - v17;
  uint64_t v18 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v18, v19);
  uint64_t v107 = (uint64_t)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = type metadata accessor for Changes(0LL);
  uint64_t v106 = *(void *)(v113 - 8);
  __chkstk_darwin(v113, v21);
  BOOL v108 = (uint64_t *)((char *)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = sub_100007578(&qword_100251F18);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v27 = (char *)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v28);
  SEL v30 = (char *)&v105 - v29;
  uint64_t v31 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v36 = (char *)&v105 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34, v37);
  unint64_t v39 = (char *)&v105 - v38;
  uint64_t v114 = a1;
  uint64_t v110 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v40 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  uint64_t v41 = a2 + *(int *)(type metadata accessor for Peer(0LL) + 32);
  sub_10000FC68(v41, (uint64_t)v30, &qword_100251F18);
  id v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v42(v30, 1LL, v31) == 1)
  {
    *(_OWORD *)unint64_t v39 = xmmword_1001DE6F0;
    *((_OWORD *)v39 + 1) = xmmword_1001DE6F0;
    id v43 = v40;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v30, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v30, (uint64_t)v39, type metadata accessor for SignedPeerStableInfo);
    id v44 = v40;
  }

  uint64_t v45 = *(void *)v39;
  unint64_t v46 = *((void *)v39 + 1);
  sub_1000084E8(*(void *)v39, v46);
  sub_1000415CC((uint64_t)v39, type metadata accessor for SignedPeerStableInfo);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v45, v46);
  [v40 setEgoPeerStableInfo:isa];

  uint64_t v48 = *(void **)(v114 + v110);
  sub_10000FC68(v41, (uint64_t)v27, &qword_100251F18);
  if (v42(v27, 1LL, v31) == 1)
  {
    *(_OWORD *)uint64_t v36 = xmmword_1001DE6F0;
    *((_OWORD *)v36 + 1) = xmmword_1001DE6F0;
    id v49 = v48;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v27, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v27, (uint64_t)v36, type metadata accessor for SignedPeerStableInfo);
    id v50 = v48;
  }

  uint64_t v51 = v113;
  uint64_t v52 = *((void *)v36 + 2);
  unint64_t v53 = *((void *)v36 + 3);
  sub_1000084E8(v52, v53);
  sub_1000415CC((uint64_t)v36, type metadata accessor for SignedPeerStableInfo);
  Class v54 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v52, v53);
  [v48 setEgoPeerStableInfoSig:v54];

  id v55 = [v111 modelID];
  LODWORD(v53) = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  id v57 = v56;

  id v58 = sub_10011F6F8(v53, v57, v112);
  swift_bridgeObjectRelease(v57, v59, v60, v61, v62, v63, v64, v65);
  uint64_t v66 = type metadata accessor for JoinWithVoucherResponse(0LL);
  id v67 = v109;
  uint64_t v68 = v107;
  sub_10000FC68((uint64_t)v109 + *(int *)(v66 + 24), v107, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v68, 1LL, v51) == 1)
  {
    id v69 = v108;
    *BOOL v108 = 0LL;
    v69[1] = 0xE000000000000000LL;
    v69[2] = _swiftEmptyArrayStorage;
    *(_OWORD *)(v69 + 3) = xmmword_1001DE6F0;
    *(_OWORD *)(v69 + 5) = xmmword_1001DE6F0;
    *((_BYTE *)v69 + 56) = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v68, (uint64_t *)&unk_100256C90);
  }

  else
  {
    id v69 = v108;
    sub_100041608(v68, (uint64_t)v108, type metadata accessor for Changes);
  }

  sub_10013D540((uint64_t)v69, 0);
  sub_1000415CC((uint64_t)v69, type metadata accessor for Changes);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v70 = a9;
  uint64_t v71 = type metadata accessor for Logger(0LL);
  uint64_t v72 = sub_100006BAC(v71, (uint64_t)qword_1002567D0);
  id v73 = (os_log_s *)Logger.logObject.getter(v72);
  os_log_type_t v74 = static os_log_type_t.info.getter(v73);
  if (os_log_type_enabled(v73, v74))
  {
    SEL v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)SEL v75 = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "preapprovedJoin succeeded", v75, 2u);
    swift_slowDealloc(v75, -1LL, -1LL);
  }

  id v76 = *v67;
  os_log_type_t v121 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v77 = *(void *)v76->endpoint;
  if (v77)
  {
    uint64_t v114 = a9;
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    id v78 = &v76->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v120 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80)];
    uint64_t v79 = *(void *)(v120 + 72);
    id v80 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v120 + 16);
    uint64_t v113 = (uint64_t)v76;
    swift_bridgeObjectRetain(v76);
    id v81 = v117;
    do
    {
      uint64_t v90 = v119;
      v80(v81, v78, v119);
      id v91 = v118;
      v80(v118, (unsigned __int8 *)v81, v90);
      uint64_t v92 = CKRecord.init(_:)(v91);
      uint64_t v93 = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v81, v90);
      if (v92)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v93);
        unint64_t v95 = *(void *)(((unint64_t)v121 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v94 = *(void *)(((unint64_t)v121 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v95 >= v94 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1LL);
        }
        uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v95, v92);
        specialized Array._endMutation()(v82);
      }

      v78 += v79;
      --v77;
    }

    while (v77);
    uint64_t v96 = v121;
    id v76 = (_TtC18TrustedPeersHelper6Client *)v113;
    uint64_t v70 = v114;
  }

  else
  {
    swift_bridgeObjectRetain(v76);
    uint64_t v96 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v76, v83, v84, v85, v86, v87, v88, v89);
  id v97 = v58;
  v116(v105, v70, v96, v58, 0LL);
  swift_bridgeObjectRelease(v96, v98, v99, v100, v101, v102, v103, v104);
}

uint64_t sub_100133F8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void), uint64_t a6)
{
  return sub_1001473C0( a1,  a2,  a3,  a4,  a5,  a6,  "update complete: %{public}s",  0xD0000000000000A1LL,  0x80000001001F9880LL);
}

uint64_t sub_100133FCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  return sub_100135B78( a1,  a2,  a3,  a4,  a5,  "setPreapprovedKeys complete: %{public}s",  0xD00000000000001BLL,  0x80000001001F9860LL);
}

void sub_100133FF0( _TtC18TrustedPeersHelper6Client *a1, char *a2, void (*a3)(void, uint64_t), _TtC18TrustedPeersHelper6Client *a4)
{
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v8, (uint64_t)qword_1002567D0);
  uint64_t v9 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v70 = a4;
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    v72[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v14 = swift_bridgeObjectRetain(a1);
    uint64_t v15 = Array.description.getter(v14, &type metadata for Data);
    id v69 = a2;
    unint64_t v17 = (unint64_t)v16;
    swift_bridgeObjectRelease(a1, v16, v18, v19, v20, v21, v22, v23);
    uint64_t v71 = sub_10017C4C4(v15, v17, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v24 = (_TtC18TrustedPeersHelper6Client *)v17;
    a2 = v69;
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "setPreapprovedKeys: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v32 = v13;
    a4 = v70;
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  id v33 = [*(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v37 = v36;

    strcpy((char *)v72, "signing-key ");
    BYTE5(v72[1]) = 0;
    HIWORD(v72[1]) = -5120;
    v38._countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    uint64_t v39 = v72[0];
    id v40 = (_TtC18TrustedPeersHelper6Client *)v72[1];
    swift_bridgeObjectRetain(a1);
    swift_retain(a4);
    uint64_t v41 = a2;
    swift_bridgeObjectRetain(v37);
    sub_100160060( v39,  (uint64_t)v40,  (uint64_t)a3,  (uint64_t)a4,  (uint64_t)v41,  v35,  (uint64_t)v37,  (uint64_t)a1,  (void (*)(void))sub_100134378);
    swift_bridgeObjectRelease(v40, v42, v43, v44, v45, v46, v47, v48);
    swift_release(a4, v49, v50, v51, v52, v53, v54, v55);

    swift_bridgeObjectRelease_n(v37, 2LL);
    swift_bridgeObjectRelease(a1, v56, v57, v58, v59, v60, v61, v62);
  }

  else
  {
    id v63 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v64 = static os_log_type_t.info.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      BOOL v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "setPreapprovedKeys: No identity.", v65, 2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    unint64_t v66 = sub_100043F74();
    uint64_t v67 = swift_allocError(&type metadata for ContainerError, v66, 0LL, 0LL);
    *(_OWORD *)uint64_t v68 = xmmword_1001DE890;
    *(_BYTE *)(v68 + 16) = 13;
    a3(0LL, v67);
    swift_errorRelease();
  }

void sub_100134378( void *a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v15 = *(void **)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v16 = swift_allocObject(&unk_100238550, 72LL, 7LL);
    *(void *)(v16 + 16) = a5;
    *(void *)(v16 + 24) = a6;
    *(void *)(v16 + 32) = a7;
    *(void *)(v16 + 40) = a8;
    *(void *)(v16 + 48) = a1;
    *(void *)(v16 + 56) = a3;
    *(void *)(v16 + 64) = a4;
    a3 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238578, 32LL, 7LL);
    *(void *)a3->endpoint = sub_100171AC8;
    *(void *)a3->containerMap = v16;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v68 = a3;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100238590;
    unint64_t v17 = _Block_copy(aBlock);
    id v18 = v68;
    id v19 = a1;
    id v20 = a5;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a8);
    swift_retain(a4);
    swift_retain(a3);
    swift_release(v18, v21, v22, v23, v24, v25, v26, v27);
    [v15 performBlockAndWait:v17];

    _Block_release(v17);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a3, "", 108LL, 6369LL, 41LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v16, v29, v30, v31, v32, v33, v34, v35);
    swift_release(a3, v36, v37, v38, v39, v40, v41, v42);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
  }

  uint64_t v43 = a2;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v44 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v44, (uint64_t)qword_1002567D0);
  swift_errorRetain(v43);
  uint64_t v45 = swift_errorRetain(v43);
  id v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v50 = static os_log_type_t.error.getter(v46, v47, v48, v49);
  if (os_log_type_enabled(v46, v50))
  {
    id v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v52;
    *(_DWORD *)id v51 = 136446210;
    uint64_t v69 = v43;
    swift_errorRetain(v43);
    uint64_t v53 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v54 = String.init<A>(describing:)(&v69, v53);
    SEL v56 = (_TtC18TrustedPeersHelper6Client *)v55;
    uint64_t v69 = sub_10017C4C4(v54, v55, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v50,  "setPreapprovedKeys: no signing key pair: %{public}s",  v51,  0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v64 = v43;
  if (!v43)
  {
    unint64_t v65 = sub_100043F74();
    uint64_t v64 = swift_allocError(&type metadata for ContainerError, v65, 0LL, 0LL);
    *(void *)uint64_t v66 = 0LL;
    *(void *)(v66 + 8) = 0LL;
    *(_BYTE *)(v66 + 16) = 13;
  }

  swift_errorRetain(v43);
  ((void (*)(void, uint64_t))a3)(0LL, v64);
  swift_errorRelease();
}

void sub_1001346E8( os_log_s *a1, os_log_s *a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void, uint64_t), uint64_t a7)
{
  uint64_t v141 = a6;
  uint64_t v142 = a7;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, v12);
  uint64_t v14 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v140 = (char *)OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v15 = *(id *)((char *)a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  NSString v16 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v18 = (void *)sub_1001A3414();
  *(void *)&__int128 v145 = 0LL;
  id v19 =  [v15 calculateDynamicInfoForPeerWithID:v16 addingPeerIDs:0 removingPeerIDs:0 preapprovedKeys:isa signingKeyPair:a5 currentMachineIDs:v18 error:&v145];

  id v20 = v19;
  uint64_t v21 = v145;
  if (v20)
  {
    uint64_t v22 = qword_100250EB8;
    id v23 = (id)v145;
    uint64_t v137 = v20;
    id v24 = v20;
    if (v22 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_100006BAC(v25, (uint64_t)qword_1002567D0);
    id v27 = v24;
    id v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.info.getter(v28);
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v136 = v14;
    uint64_t v135 = updated;
    uint64_t v139 = (os_log_s *)v26;
    uint64_t v138 = (uint64_t)v27;
    if (v30)
    {
      id v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v32 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v134 = a2;
      *(_DWORD *)id v31 = 138543362;
      *(void *)&__int128 v145 = v27;
      id v33 = v27;
      a2 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8, v31 + 4, v31 + 12);
      *id v32 = v137;

      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "setPreapprovedKeys: produced a dynamicInfo: %{public}@",  v31,  0xCu);
      uint64_t v34 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v32, 1LL, v34);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      id v28 = (os_log_s *)v27;
    }

    id v58 = *(id *)&v140[(void)a1];
    NSString v59 = String._bridgeToObjectiveC()();
    *(void *)&__int128 v145 = 0LL;
    id v60 = (char *)[v58 peerWithID:v59 error:&v145];

    if ((void)v145)
    {
      id v61 = (id)v145;

      swift_willThrow(v62);
      id v63 = v61;
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v68 = static os_log_type_t.error.getter(v64, v65, v66, v67);
      if (os_log_type_enabled(v64, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v70 = swift_slowAlloc(8LL, -1LL);
        uint64_t v134 = a2;
        unint64_t v71 = a3;
        uint64_t v72 = (void *)v70;
        *(_DWORD *)uint64_t v69 = 138543362;
        id v63 = v63;
        uint64_t v73 = _swift_stdlib_bridgeErrorToNSError(v63);
        *(void *)&__int128 v145 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8, v69 + 4, v69 + 12);
        *uint64_t v72 = v73;

        _os_log_impl( (void *)&_mh_execute_header,  v64,  v68,  "setPreapprovedKeys: error getting ego peer from model: %{public}@",  v69,  0xCu);
        uint64_t v74 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v72, 1LL, v74);
        SEL v75 = v72;
        a3 = v71;
        a2 = v134;
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v69, -1LL, -1LL);
      }

      else
      {

        uint64_t v64 = (os_log_s *)v63;
      }

      uint64_t v77 = (void *)v138;

      id v60 = 0LL;
      goto LABEL_22;
    }

    if (v60)
    {
      id v76 = [v60 dynamicInfo];
      uint64_t v77 = (void *)v138;
      if (v76)
      {
        id v78 = v76;
        sub_100007620(0LL, &qword_100256E08, &OBJC_CLASS___TPPeerDynamicInfo_ptr);
        uint64_t v79 = v77;
        id v80 = v77;
        char v81 = static NSObject.== infix(_:_:)(v80);

        if ((v81 & 1) != 0)
        {

          id v83 = (os_log_s *)Logger.logObject.getter(v82);
          os_log_type_t v84 = static os_log_type_t.info.getter(v83);
          if (os_log_type_enabled(v83, v84))
          {
            int64_t v85 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)int64_t v85 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "setPreapprovedKeys: no change; nothing to do.",
              v85,
              2u);
            swift_slowDealloc(v85, -1LL, -1LL);
          }

          __int128 v145 = xmmword_1001E6930;
          __int128 v146 = 0u;
          __int128 v147 = 0u;
          __int128 v148 = 0u;
          __int128 v149 = 0u;
          __int128 v150 = 0u;
          uint64_t v151 = 0LL;
          id v86 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238618, 32LL, 7LL);
          *(void *)v86->endpoint = v141;
          uint64_t v87 = v142;
          *(void *)v86->containerMap = v142;
          swift_retain(v87);
          sub_100139928(&v145, 0, (uint64_t)sub_100171B10, (uint64_t)v86);

          swift_release(v86, v88, v89, v90, v91, v92, v93, v94);
          return;
        }

        uint64_t v77 = v79;
      }
    }

    else
    {
      uint64_t v77 = (void *)v138;
    }

uint64_t sub_10013526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v55 = a3;
  uint64_t v9 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v59 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  id v58 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v56 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  id v15 = (uint64_t *)((char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v57 = a2;
  NSString v16 = *(void **)(a2 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  id v17 = a5;
  id v18 = [v16 changeToken];
  if (v18)
  {
    uint64_t v26 = v18;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    unint64_t v29 = v28;
  }

  else
  {
    uint64_t v27 = 0LL;
    unint64_t v29 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 8), v19, v20, v21, v22, v23, v24, v25);
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v29;
  BOOL v30 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 24);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
  *(void *)(a1 + 16) = v55;
  *(void *)(a1 + 24) = a4;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  id v38 = [v17 data];
  uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
  uint64_t v41 = v40;

  uint64_t *v15 = v39;
  v15[1] = v41;
  id v42 = [v17 sig];
  uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  v15[2] = v43;
  v15[3] = v45;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  uint64_t v47 = a1 + *(int *)(updated + 40);
  sub_100041590(v47, &qword_100256CA0);
  sub_100041608((uint64_t)v15, v47, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v48 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v47, 0LL, 1LL, v12);
  __chkstk_darwin(v48, v49);
  *(&v54 - 2) = v57;
  uint64_t v50 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  uint64_t v51 = (uint64_t)v58;
  static Message.with(_:)(sub_100176B40, &v54 - 4, v9, v50);
  uint64_t v52 = a1 + *(int *)(updated + 44);
  sub_100041590(v52, &qword_100256D20);
  sub_100041608(v51, v52, type metadata accessor for IdmsTrustedDevicesVersion);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v52, 0LL, 1LL, v9);
}

uint64_t sub_100135538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (a3)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v7, (uint64_t)qword_1002567D0);
    swift_errorRetain(a3);
    uint64_t v8 = swift_errorRetain(a3);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v13 = static os_log_type_t.error.getter(v9, v10, v11, v12);
    if (os_log_type_enabled(v9, v13))
    {
      BOOL v36 = a4;
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = a3;
      uint64_t v38 = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_errorRetain(a3);
      uint64_t v16 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v17 = String.init<A>(describing:)(&v37, v16);
      id v19 = (_TtC18TrustedPeersHelper6Client *)v18;
      uint64_t v37 = sub_10017C4C4(v17, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v14 + 4, v14 + 12);
      id v20 = v19;
      a4 = v36;
      swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v13, "setPreapprovedKeys: failed: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v33 = a1;
    uint64_t v34 = a3;
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_100006BAC(v28, (uint64_t)qword_1002567D0);
    BOOL v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "setPreapprovedKeys: updateTrust succeeded", v32, 2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    uint64_t v33 = a1;
    uint64_t v34 = 0LL;
  }

  return a4(v33, v34);
}

void sub_1001357D4(_TtC18TrustedPeersHelper6Client *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v9, 41LL, 7LL);
  uint64_t v10 = v4;
  uint64_t v11 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v10, 0xD000000000000025LL, 0x80000001001F9FF0LL);

  uint64_t v12 = swift_allocObject(&unk_100239C48, 40LL, 7LL);
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 32) = a4;
  uint64_t v13 = qword_100250EB8;
  swift_retain(v11);
  swift_retain(a4);
  if (v13 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v14, (uint64_t)qword_1002567D0);
  uint64_t v15 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v80 = a2;
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v19;
    *(_DWORD *)unint64_t v18 = 136446210;
    uint64_t v20 = sub_100007620(0LL, &qword_100256FC0, off_10022CE98);
    uint64_t v21 = swift_bridgeObjectRetain(a1);
    uint64_t v22 = Array.description.getter(v21, v20);
    id v24 = (_TtC18TrustedPeersHelper6Client *)v23;
    swift_bridgeObjectRelease(a1, v23, v25, v26, v27, v28, v29, v30);
    uint64_t v81 = sub_10017C4C4(v22, (unint64_t)v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, aBlock, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v24, v31, v32, v33, v34, v35, v36, v37);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Uploading some new TLKs: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v38 = v19;
    a2 = v80;
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v39 = *(void **)&v10[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v40 = swift_allocObject(&unk_100239C70, 56LL, 7LL);
  *(void *)(v40 + 16) = v10;
  *(void *)(v40 + 24) = a1;
  *(void *)(v40 + 32) = a2;
  *(void *)(v40 + 40) = sub_100173C40;
  *(void *)(v40 + 48) = v12;
  uint64_t v41 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239C98, 32LL, 7LL);
  *(void *)v41->endpoint = sub_100173CB8;
  *(void *)v41->containerMap = v40;
  aBlock[4] = (uint64_t)sub_100176BD4;
  id v83 = v41;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000DC9F8;
  aBlock[3] = (uint64_t)&unk_100239CB0;
  id v42 = _Block_copy(aBlock);
  uint64_t v43 = v83;
  uint64_t v44 = v10;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_retain(v12);
  swift_retain(v41);
  swift_release(v43, v45, v46, v47, v48, v49, v50, v51);
  [v39 performBlockAndWait:v42];
  swift_release((_TtC18TrustedPeersHelper6Client *)v12, v52, v53, v54, v55, v56, v57, v58);
  swift_release(v11, v59, v60, v61, v62, v63, v64, v65);
  _Block_release(v42);
  LOBYTE(v42) = swift_isEscapingClosureAtFileLocation(v41, "", 108LL, 6439LL, 33LL, 1LL);
  swift_release((_TtC18TrustedPeersHelper6Client *)v40, v66, v67, v68, v69, v70, v71, v72);
  swift_release(v41, v73, v74, v75, v76, v77, v78, v79);
}

uint64_t sub_100135B78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5, const char *a6, uint64_t a7, unint64_t a8)
{
  uint64_t v10 = a4;
  if (a2) {
    os_log_type_t v13 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v13 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v14 = v13;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v15, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v16 = swift_errorRetain(a2);
  os_log_type_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v14))
  {
    unint64_t v40 = a8;
    uint64_t v41 = v10;
    unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v19;
    *(_DWORD *)unint64_t v18 = 136446210;
    uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a2)
    {
      uint64_t v44 = 0x203A726F727265LL;
      unint64_t v45 = 0xE700000000000000LL;
      uint64_t v43 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v21 = sub_100007578(&qword_100251D70);
      v22._countAndFlagsBits = String.init<A>(describing:)(&v43, v21);
      object = (_TtC18TrustedPeersHelper6Client *)v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(object, v24, v25, v26, v27, v28, v29, v30);
      swift_errorRelease();
      uint64_t v31 = v44;
      uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v45;
    }

    else
    {
      uint64_t v31 = 0x73736563637573LL;
    }

    uint64_t v44 = sub_10017C4C4(v31, (unint64_t)v20, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v20, v32, v33, v34, v35, v36, v37, v38);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v14, a6, v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    uint64_t v10 = v41;
    a8 = v40;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(a7, a8);
  return v10(a1, a2);
}

uint64_t sub_100135DE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v8;
  uint64_t v17 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  Swift::String v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(a3 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_tlkSharesBatch);
  BOOL v24 = __OFADD__(a2, v23);
  uint64_t v25 = a2 + v23;
  if (v24)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v49 = v19;
  uint64_t v50 = a7;
  SEL v52 = v22;
  uint64_t v53 = v8;
  uint64_t v54 = v20;
  if (*(void *)(a4 + 16) >= v25) {
    uint64_t v7 = v25;
  }
  else {
    uint64_t v7 = *(void *)(a4 + 16);
  }
  uint64_t v51 = a3;
  id v26 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
  if (v26)
  {
    id v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    unint64_t v30 = v29;
  }

  else
  {
    uint64_t v28 = 0LL;
    unint64_t v30 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(a1[1]);
  *a1 = v28;
  a1[1] = v30;
  uint64_t v31 = a1[3];
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRelease(v31);
  a1[2] = a5;
  a1[3] = a6;
  uint64_t v9 = v7 - a2;
  if (v7 < a2) {
    goto LABEL_18;
  }
  if (a2 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_bridgeObjectRelease(a4);
    uint64_t v47 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TLKShare(0LL) - 8) + 80LL);
    BOOL v38 = sub_10014E454(a4, a4 + ((v47 + 32) & ~v47), a2, (2 * v7) | 1);
    goto LABEL_16;
  }

  uint64_t v32 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v33 = swift_bridgeObjectRetain(a4);
  uint64_t v34 = swift_unknownObjectRetain_n(v33, 2LL);
  id v35 = (void *)swift_dynamicCastClass(v34, v32);
  if (!v35)
  {
    swift_bridgeObjectRelease(a4);
    id v35 = _swiftEmptyArrayStorage;
  }

  uint64_t v36 = v35[2];
  swift_release(v35);
  BOOL v37 = v36 == v9;
  uint64_t v9 = v50;
  if (!v37) {
    goto LABEL_20;
  }
  BOOL v38 = (void *)swift_dynamicCastClass(a4, v32);
  if (!v38)
  {
    swift_bridgeObjectRelease(a4);
    BOOL v38 = _swiftEmptyArrayStorage;
  }

uint64_t sub_1001360CC( uint64_t a1, char *a2, void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v53 = a6;
  uint64_t v54 = a8;
  uint64_t v55 = a5;
  id v56 = a3;
  id v57 = a4;
  uint64_t updated = type metadata accessor for UpdateTrustResponse(0LL);
  uint64_t v14 = *(void *)(updated - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v17 = __chkstk_darwin(updated, v16);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (void (*)(uint64_t, uint64_t))((char *)&v46 - v19);
  uint64_t v21 = sub_100007578((uint64_t *)&unk_100256D10);
  __chkstk_darwin(v21, v22);
  BOOL v24 = (uint64_t *)((char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v24, (uint64_t *)&unk_100256D10);
  if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
  {
    uint64_t v25 = *v24;
    swift_errorRetain(*v24);
    v56(v25, 1LL);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    uint64_t v49 = a10 + 16;
    uint64_t v50 = a9;
    sub_100041608((uint64_t)v24, (uint64_t)v20, type metadata accessor for UpdateTrustResponse);
    id v51 = *(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    id v52 = a2;
    sub_10004164C( (uint64_t)v20,  (uint64_t)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for UpdateTrustResponse);
    uint64_t v27 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v28 = (v27 + 24) & ~v27;
    unint64_t v29 = (v15 + v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v47 = (uint64_t)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v48 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v32 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v33 = v54;
    unint64_t v34 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v35 = swift_allocObject(&unk_100239BA8, v34 + 8, v27 | 7);
    *(void *)(v35 + 16) = v52;
    sub_100041608(v47, v35 + v28, type metadata accessor for UpdateTrustResponse);
    uint64_t v36 = (void (**)(uint64_t, uint64_t))(v35 + v29);
    BOOL v37 = v57;
    *uint64_t v36 = v56;
    v36[1] = v37;
    id v56 = v20;
    uint64_t v38 = v55;
    *(void *)(v35 + v30) = v55;
    uint64_t v39 = (void *)(v35 + v31);
    *uint64_t v39 = v53;
    v39[1] = a7;
    *(void *)(v35 + v48) = v33;
    uint64_t v40 = v49;
    uint64_t v41 = v50;
    *(void *)(v35 + v32) = v50;
    *(void *)(v35 + v34) = v40;
    uint64_t v42 = swift_allocObject(&unk_100239BD0, 32LL, 7LL);
    *(void *)(v42 + 16) = sub_100173ADC;
    *(void *)(v42 + 24) = v35;
    aBlock[4] = sub_100176BD4;
    uint64_t v59 = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000DC9F8;
    aBlock[3] = &unk_100239BE8;
    uint64_t v43 = _Block_copy(aBlock);
    uint64_t v44 = v59;
    id v45 = v52;
    swift_retain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v41);
    swift_retain(v42);
    swift_release(v44);
    [v51 performBlockAndWait:v43];
    _Block_release(v43);
    sub_1000415CC((uint64_t)v56, type metadata accessor for UpdateTrustResponse);
    LOBYTE(v38) = swift_isEscapingClosureAtFileLocation(v42, "", 108LL, 6469LL, 41LL, 1LL);
    swift_release(v35);
    uint64_t result = swift_release(v42);
    if ((v38 & 1) != 0) {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10013641C( char *a1, uint64_t *a2, void (*a3)(uint64_t, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v56 = a7;
  uint64_t v57 = a8;
  uint64_t v54 = a5;
  uint64_t v55 = a6;
  id v58 = a1;
  uint64_t v13 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v60 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v59 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v49 - v18;
  uint64_t v20 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Changes(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for UpdateTrustResponse(0LL);
  sub_10000FC68((uint64_t)a2 + *(int *)(updated + 24), (uint64_t)v23, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24) == 1)
  {
    *(void *)uint64_t v28 = 0LL;
    *((void *)v28 + 1) = 0xE000000000000000LL;
    *((void *)v28 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v28 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v28 + 40) = xmmword_1001DE6F0;
    v28[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v28, type metadata accessor for Changes);
  }

  unint64_t v30 = v58;
  sub_10013D540((uint64_t)v28, 0);
  uint64_t v52 = a10;
  uint64_t v53 = a9;
  sub_1000415CC((uint64_t)v28, type metadata accessor for Changes);
  uint64_t v31 = *a2;
  v61[0] = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    uint64_t v50 = a3;
    uint64_t v51 = a4;
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v33 = v31 + ((*(unsigned __int8 *)(v60 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
    uint64_t v34 = *(void *)(v60 + 72);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    uint64_t v49 = v31;
    swift_bridgeObjectRetain(v31);
    do
    {
      v35(v19, v33, v13);
      BOOL v37 = v59;
      v35(v59, (uint64_t)v19, v13);
      uint64_t v38 = CKRecord.init(_:)(v37);
      uint64_t v39 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v19, v13);
      if (v38)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
        unint64_t v41 = *(void *)((v61[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v40 = *(void *)((v61[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v41 >= v40 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1LL);
        }
        uint64_t v36 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v38);
        specialized Array._endMutation()(v36);
      }

      v33 += v34;
      --v32;
    }

    while (v32);
    uint64_t v42 = (void *)v61[0];
    a3 = v50;
    a4 = v51;
    unint64_t v30 = v58;
    uint64_t v31 = v49;
  }

  else
  {
    swift_bridgeObjectRetain(v31);
    uint64_t v42 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v31);
  v61[0] = v54;
  swift_bridgeObjectRetain(v54);
  sub_1000E4884((uint64_t)v42);
  uint64_t v43 = v61[0];
  uint64_t v44 = v52;
  swift_beginAccess(v52, v64, 0LL, 0LL);
  sub_1000610A0(v44, (uint64_t)v61);
  uint64_t v45 = v62;
  uint64_t v46 = v63;
  uint64_t v47 = sub_1000084C4(v61, v62);
  sub_1001581B0(v55, v56, v57, v53, (uint64_t)v47, v43, a3, a4, v30, v45, v46);
  swift_bridgeObjectRelease(v43);
  return sub_100007600(v61);
}

void sub_100136994( _TtC18TrustedPeersHelper6Client *a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v11 = [*(id *)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    id v16 = [*(id *)&v5[v10] egoPeerPermanentInfo];
    if (v16)
    {
      uint64_t v24 = v16;
      uint64_t v114 = v13;
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
      unint64_t v27 = v26;

      id v28 = [*(id *)&v5[v10] egoPeerPermanentInfoSig];
      if (v28)
      {
        unint64_t v29 = v28;
        uint64_t v106 = a2;
        uint64_t v112 = a1;
        SEL v109 = a3;
        uint64_t v110 = a4;
        uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
        unint64_t v32 = v31;

        id v33 = objc_allocWithZone(&OBJC_CLASS___TPECPublicKeyFactory);
        swift_bridgeObjectRetain(v15);
        sub_1000084E8(v25, v27);
        sub_1000084E8(v30, v32);
        id v34 = [v33 init];
        NSString v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v15, v36, v37, v38, v39, v40, v41, v42);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v44 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v111 = v15;
        id v45 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v35 data:isa sig:v44 keyFactory:v34];

        uint64_t v107 = v30;
        unint64_t v108 = v32;
        sub_10000852C(v30, v32);
        unint64_t v113 = v27;
        sub_10000852C(v25, v27);

        if (v45)
        {
          uint64_t v53 = (void *)swift_allocObject(&unk_100239A68, 80LL, 7LL);
          v53[2] = v109;
          v53[3] = v110;
          v53[4] = v5;
          v53[5] = v114;
          v53[6] = v111;
          v53[7] = v112;
          v53[8] = v106;
          v53[9] = v45;
          strcpy((char *)&v115, "signing-key ");
          BYTE5(v115._object) = 0;
          HIWORD(v115._object) = -5120;
          v54._countAndFlagsBits = v114;
          v54._object = v111;
          String.append(_:)(v54);
          swift_bridgeObjectRetain_n(v111, 3LL);
          swift_retain(v53);
          swift_retain(v110);
          uint64_t v55 = v5;
          swift_bridgeObjectRetain(v112);
          swift_bridgeObjectRetain(v106);
          id v56 = v45;
          sub_10015FAA0( v115._countAndFlagsBits,  (uint64_t)v115._object,  (void (*)(char *, uint64_t))sub_100173874,  (uint64_t)v53,  v114,  v111);

          swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v115._object, v57, v58, v59, v60, v61, v62, v63);
          swift_release_n(v53, 2LL);
          swift_bridgeObjectRelease_n(v111, 2LL);
          sub_10000852C(v30, v32);
          sub_10000852C(v25, v27);
          swift_bridgeObjectRelease(v111, v64, v65, v66, v67, v68, v69, v70);
        }

        else
        {
          swift_bridgeObjectRelease(v111, v46, v47, v48, v49, v50, v51, v52);
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v79 = type metadata accessor for Logger(0LL);
          sub_100006BAC(v79, (uint64_t)qword_1002567D0);
          uint64_t v80 = swift_bridgeObjectRetain_n(v112, 2LL);
          uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
          os_log_type_t v82 = static os_log_type_t.info.getter(v81);
          if (os_log_type_enabled(v81, v82))
          {
            id v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v84 = swift_slowAlloc(32LL, -1LL);
            v115._countAndFlagsBits = v84;
            *(_DWORD *)id v83 = 136446210;
            uint64_t v85 = sub_100007620(0LL, &qword_100256FC0, off_10022CE98);
            uint64_t v86 = swift_bridgeObjectRetain(v112);
            uint64_t v87 = Array.description.getter(v86, v85);
            id v89 = (_TtC18TrustedPeersHelper6Client *)v88;
            swift_bridgeObjectRelease(v112, v88, v90, v91, v92, v93, v94, v95);
            uint64_t v116 = sub_10017C4C4(v87, (unint64_t)v89, &v115._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v83 + 4, v83 + 12);
            swift_bridgeObjectRelease_n(v112, 2LL);
            swift_bridgeObjectRelease(v89, v96, v97, v98, v99, v100, v101, v102);
            _os_log_impl((void *)&_mh_execute_header, v81, v82, "Couldn't parse self identity: %{public}s", v83, 0xCu);
            swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v84, -1LL, -1LL);
            swift_slowDealloc(v83, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v112, 2LL);
          }

          unint64_t v103 = sub_100043F74();
          uint64_t v104 = swift_allocError(&type metadata for ContainerError, v103, 0LL, 0LL);
          *(_OWORD *)uint64_t v105 = xmmword_1001DE880;
          *(_BYTE *)(v105 + 16) = 13;
          v109(0LL, v104);
          swift_errorRelease();
          sub_10000852C(v107, v108);
          sub_10000852C(v25, v113);
        }

        return;
      }

      sub_10000852C(v25, v27);
    }

    swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v71 = type metadata accessor for Logger(0LL);
  uint64_t v72 = sub_100006BAC(v71, (uint64_t)qword_1002567D0);
  SEL v73 = (os_log_s *)Logger.logObject.getter(v72);
  os_log_type_t v74 = static os_log_type_t.info.getter(v73);
  if (os_log_type_enabled(v73, v74))
  {
    id v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v75 = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Have no self identity, can't make tlk shares", v75, 2u);
    swift_slowDealloc(v75, -1LL, -1LL);
  }

  unint64_t v76 = sub_100043F74();
  uint64_t v77 = swift_allocError(&type metadata for ContainerError, v76, 0LL, 0LL);
  *(_OWORD *)uint64_t v78 = xmmword_1001DE890;
  *(_BYTE *)(v78 + 16) = 13;
  a3(0LL, v77);
  swift_errorRelease();
}

uint64_t sub_100136FD4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a1)
  {
    id v46 = *(id *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v17 = (void *)swift_allocObject(&unk_100239A90, 88LL, 7LL);
    v17[2] = a5;
    v17[3] = a6;
    v17[4] = a7;
    v17[5] = a3;
    v17[6] = a4;
    v17[7] = a8;
    v17[8] = a9;
    v17[9] = a1;
    v17[10] = a10;
    a3 = swift_allocObject(&unk_100239AB8, 32LL, 7LL);
    *(void *)(a3 + 16) = sub_1001738B8;
    *(void *)(a3 + 24) = v17;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v48 = a3;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100239AD0;
    uint64_t v18 = _Block_copy(aBlock);
    uint64_t v19 = v48;
    id v20 = a1;
    uint64_t v21 = a5;
    swift_bridgeObjectRetain(a7);
    swift_retain(a4);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a9);
    id v22 = a10;
    swift_retain(a3);
    swift_release(v19);
    [v46 performBlockAndWait:v18];

    _Block_release(v18);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a3, "", 108LL, 6527LL, 37LL, 1LL);
    swift_release(v17);
    uint64_t result = swift_release(a3);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
  }

  uint64_t v25 = a2;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v26, (uint64_t)qword_1002567D0);
  swift_errorRetain(v25);
  uint64_t v27 = swift_errorRetain(v25);
  id v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v32 = static os_log_type_t.error.getter(v28, v29, v30, v31);
  if (os_log_type_enabled(v28, v32))
  {
    id v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v34;
    *(_DWORD *)id v33 = 136446210;
    uint64_t v49 = v25;
    swift_errorRetain(v25);
    uint64_t v35 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v36 = String.init<A>(describing:)(&v49, v35);
    int64_t v38 = (_TtC18TrustedPeersHelper6Client *)v37;
    uint64_t v49 = sub_10017C4C4(v36, v37, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v32,  "Don't have my own peer keys; can't upload new TLKs: %{public}s",
      v33,
      0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return ((uint64_t (*)(void, uint64_t))a3)(0LL, v25);
}

void sub_10013732C( void *a1, void *a2, void *a3, void (*a4)(void, uint64_t), uint64_t a5, uint64_t a6, _TtC18TrustedPeersHelper6Client *a7, _TtC18TrustedPeersHelper6Client *a8, void *a9)
{
  Swift::String v115 = a8;
  uint64_t v116 = a5;
  uint64_t v117 = a4;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, v15);
  uint64_t v17 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v18 = *(id *)((char *)a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  NSString v19 = String._bridgeToObjectiveC()();
  id v120 = 0LL;
  id v20 = [v18 getDynamicInfoForPeerWithID:v19 error:&v120];

  uint64_t v21 = (uint64_t)v120;
  if (v120)
  {
    id v22 = v120;

    swift_willThrow(v23);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v24, (uint64_t)qword_1002567D0);
    id v25 = v22;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.info.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v28 = 138543362;
      id v30 = v25;
      uint64_t v31 = (void *)_swift_stdlib_bridgeErrorToNSError(v30);
      id v120 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v28 + 4, v28 + 12);
      *uint64_t v29 = v31;

      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Unable to fetch dynamic info for self: %{public}@",  v28,  0xCu);
      uint64_t v32 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v29, 1LL, v32);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {

      uint64_t v26 = (os_log_s *)v25;
    }

    SEL v57 = (_TtC18TrustedPeersHelper6Client *)v25;
    v117(0LL, v21);
LABEL_13:

    return;
  }

  id v33 = v115;
  unint64_t v113 = v17;
  uint64_t v114 = a1;
  if (v20)
  {
    uint64_t v34 = (_TtC18TrustedPeersHelper6Client *)v20;
    uint64_t v35 = (os_log_s *)[a9 epoch];
    if (((unint64_t)v35 & 0x8000000000000000LL) == 0)
    {
      uint64_t v36 = v114;
      sub_100122C24(a6, a7, v33, (uint64_t)v34, v35);
      id v67 = v66;
      uint64_t v110 = a3;
      uint64_t v111 = v68;
      Swift::String v115 = v34;
      uint64_t v69 = swift_allocObject(&unk_100239B08, 32LL, 7LL);
      uint64_t v70 = v116;
      *(void *)(v69 + 16) = v117;
      *(void *)(v69 + 24) = v70;
      uint64_t v112 = v69;
      uint64_t v71 = *(void *)((char *)v36 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_tlkSharesBatch);
      if (!v71) {
        __break(1u);
      }
      uint64_t v72 = v67;
      uint64_t v73 = *(void *)v67->endpoint;
      v121[2] = sub_100007578(&qword_100256FC8);
      v121[3] = sub_1001738E0( &qword_100256FD0,  &qword_100256FC8,  (uint64_t)&protocol conformance descriptor for StrideToIterator<A>);
      uint64_t v74 = swift_allocObject(&unk_100239B30, 64LL, 7LL);
      id v120 = (id)v74;
      *(void *)(v74 + 16) = 0LL;
      *(void *)(v74 + 24) = v73;
      *(void *)(v74 + 32) = v71;
      *(void *)(v74 + 40) = 0LL;
      *(_BYTE *)(v74 + 48) = 0;
      *(void *)(v74 + 56) = 0LL;
      uint64_t v75 = swift_allocObject(&unk_100239B58, 56LL, 7LL);
      sub_1000610A0((uint64_t)&v120, v75 + 16);
      uint64_t v76 = *(void *)(v75 + 40);
      uint64_t v77 = *(void *)(v75 + 48);
      sub_100006248(v75 + 16, v76);
      swift_retain_n(v70, 2LL);
      uint64_t v78 = dispatch thunk of IteratorProtocol.next()(&v118, v76, v77);
      if ((v119[0] & 1) != 0)
      {
        sub_100137B88((uint64_t)_swiftEmptyArrayStorage, 0, v117);
        uint64_t v80 = v111;
        uint64_t v81 = v112;
      }

      else
      {
        __chkstk_darwin(v78, v79);
        os_log_type_t v82 = v114;
        *(&v108 - 6) = v83;
        *(&v108 - 5) = v82;
        SEL v109 = v67;
        *(&v108 - 4) = v67->_TtCs12_SwiftObject_opaque;
        *(&v108 - 3) = a2;
        uint64_t v84 = v110;
        uint64_t v80 = v111;
        *(&v108 - 2) = v110;
        *(&v108 - 1) = v80->_TtCs12_SwiftObject_opaque;
        uint64_t v85 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
        static Message.with(_:)(sub_100173954, &v108 - 8, updated, v85);
        uint64_t v86 = *(void *)((char *)v82 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32);
        uint64_t v117 = *(void (**)(void, uint64_t))((char *)v82
                                                      + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish
                                                      + 24);
        unint64_t v108 = sub_1000084C4( (void *)((char *)v82 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish),  (uint64_t)v117);
        uint64_t v87 = (void *)swift_allocObject(&unk_100239B80, 88LL, 7LL);
        v87[2] = v82;
        v87[3] = sub_1001738D4;
        uint64_t v88 = v112;
        v87[4] = v112;
        v87[5] = _swiftEmptyArrayStorage;
        v87[6] = a2;
        v87[7] = v84;
        id v89 = v109;
        v87[8] = v109;
        v87[9] = v80;
        v87[10] = v75;
        uint64_t v90 = *(void *)(v86 + 16);
        int64_t v91 = *(void (**)(char *, uint64_t (*)(), void *, void (*)(void, uint64_t), uint64_t))(v90 + 32);
        id v92 = v82;
        uint64_t v81 = v88;
        swift_retain(v88);
        swift_bridgeObjectRetain(v84);
        uint64_t v72 = v89;
        swift_bridgeObjectRetain(v89);
        swift_bridgeObjectRetain(v80);
        swift_retain(v75);
        uint64_t v93 = (uint64_t)v113;
        v91(v113, sub_10017396C, v87, v117, v90);
        swift_release(v87);
        uint64_t v70 = v116;
        sub_1000415CC(v93, type metadata accessor for UpdateTrustRequest);
      }

      swift_release(v75);
      sub_100007600(&v120);
      swift_bridgeObjectRelease(v72, v94, v95, v96, v97, v98, v99, v100);
      swift_bridgeObjectRelease(v80, v101, v102, v103, v104, v105, v106, v107);
      swift_release(v70);
      swift_release(v81);
      SEL v57 = v115;
      goto LABEL_13;
    }

    __break(1u);
    swift_once(&qword_100250EB8, sub_1000DD078);
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v37, (uint64_t)qword_1002567D0);
    swift_errorRetain(a6);
    uint64_t v38 = swift_errorRetain(a6);
    SEL v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v43 = static os_log_type_t.error.getter(v39, v40, v41, v42);
    if (os_log_type_enabled(v39, v43))
    {
      BOOL v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v45 = (void *)swift_slowAlloc(32LL, -1LL);
      id v120 = v45;
      *(_DWORD *)BOOL v44 = 136446210;
      uint64_t v118 = a6;
      swift_errorRetain(a6);
      uint64_t v46 = sub_100007578(&qword_100251D70);
      uint64_t v47 = String.init<A>(describing:)(&v118, v46);
      uint64_t v49 = (_TtC18TrustedPeersHelper6Client *)v48;
      uint64_t v118 = sub_10017C4C4(v47, v48, (uint64_t *)&v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v43,  "Unable to process keys before uploading: %{public}s",  v44,  0xCu);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(a6);
    v117(0LL, a6);

    swift_errorRelease();
    swift_errorRelease();
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    uint64_t v59 = sub_100006BAC(v58, (uint64_t)qword_1002567D0);
    id v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.info.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      BOOL v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unable to fetch dynamic info for self", v62, 2u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    unint64_t v63 = sub_100043F74();
    uint64_t v64 = swift_allocError(&type metadata for ContainerError, v63, 0LL, 0LL);
    *(_OWORD *)uint64_t v65 = xmmword_1001E6940;
    *(_BYTE *)(v65 + 16) = 13;
    v117(0LL, v64);
    swift_errorRelease();
  }

uint64_t sub_100137B88(uint64_t a1, char a2, void (*a3)(void, uint64_t))
{
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(0LL, a1);
    return sub_100174D94(a1, 1);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v5, (uint64_t)qword_1002567D0);
    sub_100173C30(a1, 0);
    uint64_t v6 = swift_bridgeObjectRetain(a1);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.info.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v9 = 134217984;
      if ((unint64_t)a1 >> 62)
      {
        if (a1 >= 0) {
          uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v12 = a1;
        }
        swift_bridgeObjectRetain(a1);
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v12);
        sub_100174D94(a1, 0);
      }

      else
      {
        uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      }

      sub_100174D94(a1, 0);
      uint64_t v13 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4, v9 + 12);
      sub_100174D94(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received %ld CKRecords back", v9, 0xCu);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
      sub_100174D94(a1, 0);
      sub_100174D94(a1, 0);
    }

    return ((uint64_t (*)(uint64_t, void))a3)(a1, 0LL);
  }

uint64_t sub_100137D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v6 = (void *)swift_allocObject(&unk_1002399F0, 40LL, 7LL);
  v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = swift_allocObject(&unk_100239A18, 32LL, 7LL);
  *(void *)(v7 + 16) = sub_10017380C;
  *(void *)(v7 + 24) = v6;
  v13[4] = sub_100176BD4;
  uint64_t v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  v13[2] = sub_1000DC9F8;
  v13[3] = &unk_100239A30;
  os_log_type_t v8 = _Block_copy(v13);
  uint64_t v9 = v14;
  uint64_t v10 = v2;
  swift_retain(a2);
  swift_retain(v7);
  swift_release(v9);
  [v5 performBlockAndWait:v8];
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 108LL, 6625LL, 33LL, 1LL);
  swift_release(v6);
  uint64_t result = swift_release(v7);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100137EA8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
  if (!v5) {
    return sub_100138594(0, (uint64_t)a2, a3);
  }

  return a2(0LL);
}

uint64_t sub_100137F18(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void **)&v3[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v8 = swift_allocObject(&unk_100239978, 48LL, 7LL);
  *(_BYTE *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v3;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  uint64_t v9 = swift_allocObject(&unk_1002399A0, 32LL, 7LL);
  *(void *)(v9 + 16) = sub_1001737E8;
  *(void *)(v9 + 24) = v8;
  v15[4] = sub_100176BD4;
  uint64_t v16 = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  v15[2] = sub_1000DC9F8;
  v15[3] = &unk_1002399B8;
  uint64_t v10 = _Block_copy(v15);
  uint64_t v11 = v16;
  uint64_t v12 = v3;
  swift_retain(a3);
  swift_retain(v9);
  swift_release(v11);
  [v7 performBlockAndWait:v10];
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 108LL, 6635LL, 33LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

void sub_10013806C(char a1, char *a2, void (*a3)(void), uint64_t a4)
{
  if ((a1 & 1) != 0)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_100006BAC(v7, (uint64_t)qword_1002567D0);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_7;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Forcing a full refetch: by request", v11, 2u);
    uint64_t v12 = v11;
LABEL_6:
    swift_slowDealloc(v12, -1LL, -1LL);
LABEL_7:

LABEL_8:
    LOBYTE(v13) = 1;
LABEL_9:
    sub_100138594(v13, (uint64_t)a3, a4);
    return;
  }

  uint64_t v14 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  id v42 = 0LL;
  unsigned int v13 = [v14 currentStatePossiblyMissingDataWithError:&v42];
  id v15 = v42;
  if (!v42)
  {
    if (!v13) {
      goto LABEL_9;
    }
    uint64_t v30 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
    if ((uint64_t)[*(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] refetchLevel] > 0)
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v31 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v31, (uint64_t)qword_1002567D0);
      uint64_t v32 = a2;
      id v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v35 = 134217984;
        id v42 = [*(id *)&a2[v30] refetchLevel];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v35 + 4, v35 + 12);

        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Model would like a full refetch, but we've done one at this refetch level: %lld",  v35,  0xCu);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
      }

      LOBYTE(v13) = 0;
      goto LABEL_9;
    }

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v37, (uint64_t)qword_1002567D0);
    uint64_t v38 = a2;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v9, v39))
    {

      goto LABEL_8;
    }

    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v40 = 134217984;
    id v42 = [*(id *)&a2[v30] refetchLevel];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v40 + 4, v40 + 12);

    _os_log_impl( (void *)&_mh_execute_header,  v9,  v39,  "Forcing a full refetch due to model: last refetch level: %lld",  v40,  0xCu);
    uint64_t v12 = v40;
    goto LABEL_6;
  }

  id v16 = v42;
  swift_willThrow(v16);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v17, (uint64_t)qword_1002567D0);
  id v18 = v16;
  NSString v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v23 = static os_log_type_t.error.getter(v19, v20, v21, v22);
  if (os_log_type_enabled(v19, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = a3;
    id v25 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v24 = 138543362;
    id v26 = v18;
    os_log_type_t v27 = (void *)_swift_stdlib_bridgeErrorToNSError(v26);
    id v42 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v24 + 4, v24 + 12);
    void *v25 = v27;

    _os_log_impl((void *)&_mh_execute_header, v19, v23, "currentStatePossiblyMissingData error: %{public}@", v24, 0xCu);
    uint64_t v28 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v25, 1LL, v28);
    uint64_t v29 = v25;
    a3 = v41;
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    NSString v19 = (os_log_s *)v18;
  }

  id v36 = v18;
  a3(v15);
}

uint64_t sub_100138594(char a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  uint64_t v9 = __chkstk_darwin(ChangesRequest, type metadata accessor for FetchChangesRequest);
  uint64_t v11 = (uint64_t *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v35 - v13;
  int v15 = a1 & 1;
  v39[16] = a1;
  uint64_t v40 = v4;
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FB0,  v16,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
  static Message.with(_:)(sub_10017376C, v39, ChangesRequest, v17);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v18, (uint64_t)qword_1002567D0);
  uint64_t v19 = sub_10004164C((uint64_t)v14, (uint64_t)v11, type metadata accessor for FetchChangesRequest);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  int v38 = v15;
  if (v22)
  {
    uint64_t v36 = a2;
    uint64_t v37 = a3;
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v42[0] = v24;
    *(_DWORD *)os_log_type_t v23 = 136446210;
    uint64_t v25 = *v11;
    unint64_t v26 = v11[1];
    uint64_t v27 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000LL) == 0) {
      uint64_t v27 = *v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v27)
    {
      swift_bridgeObjectRetain(v11[1]);
    }

    else
    {
      unint64_t v26 = 0xE500000000000000LL;
      uint64_t v25 = 0x7974706D65LL;
    }

    uint64_t v41 = sub_10017C4C4(v25, v26, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v26);
    sub_1000415CC((uint64_t)v11, type metadata accessor for FetchChangesRequest);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching with change token: %{public}s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    a2 = v36;
    a3 = v37;
  }

  else
  {
    sub_1000415CC((uint64_t)v11, type metadata accessor for FetchChangesRequest);
  }

  uint64_t v28 = *(void *)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
  uint64_t v29 = *(void *)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
  sub_1000084C4(&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v28);
  uint64_t v30 = swift_allocObject(&unk_1002398D8, 48LL, 7LL);
  *(void *)(v30 + 16) = v4;
  *(_BYTE *)(v30 + 24) = v38;
  *(void *)(v30 + 32) = a2;
  *(void *)(v30 + 40) = a3;
  uint64_t v31 = *(void *)(v29 + 16);
  uint64_t v32 = *(void (**)(char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v31 + 56);
  id v33 = v4;
  swift_retain(a3);
  v32(v14, sub_10017378C, v30, v28, v31);
  swift_release(v30);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for FetchChangesRequest);
}

uint64_t sub_1001388B4(uint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0)
  {
    id v3 = (void *)result;
    id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                               + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      unint64_t v8 = v7;
    }

    else
    {
      uint64_t v6 = 0LL;
      unint64_t v8 = 0xE000000000000000LL;
    }

    uint64_t result = swift_bridgeObjectRelease(v3[1]);
    *id v3 = v6;
    v3[1] = v8;
  }

  return result;
}

uint64_t sub_10013893C(uint64_t a1, char *a2, int a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v88 = a4;
  uint64_t v89 = a5;
  int v86 = a3;
  uint64_t v87 = a2;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v85 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v84 - v11;
  uint64_t v13 = type metadata accessor for Changes(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v84 = (void **)((char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v84 - v19;
  uint64_t ChangesResponse = type metadata accessor for FetchChangesResponse(0LL);
  __chkstk_darwin(ChangesResponse, v22);
  uint64_t v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100007578(&qword_100251E38);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (void **)((char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v28, &qword_100251E38);
  if (swift_getEnumCaseMultiPayload(v28, v25) != 1)
  {
LABEL_9:
    sub_100041608((uint64_t)v28, (uint64_t)v24, type metadata accessor for FetchChangesResponse);
    uint64_t v44 = (uint64_t)&v24[*(int *)(ChangesResponse + 20)];
    sub_10000FC68(v44, (uint64_t)v12, (uint64_t *)&unk_100256C90);
    BOOL v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v45(v12, 1LL, v13) == 1)
    {
      *(void *)uint64_t v20 = 0LL;
      *((void *)v20 + 1) = 0xE000000000000000LL;
      *((void *)v20 + 2) = _swiftEmptyArrayStorage;
      *(_OWORD *)(v20 + 24) = xmmword_1001DE6F0;
      *(_OWORD *)(v20 + 40) = xmmword_1001DE6F0;
      v20[56] = 0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      uint64_t v46 = sub_100041590((uint64_t)v12, (uint64_t *)&unk_100256C90);
    }

    else
    {
      uint64_t v46 = sub_100041608((uint64_t)v12, (uint64_t)v20, type metadata accessor for Changes);
    }

    uint64_t v58 = (uint64_t)v87;
    __chkstk_darwin(v46, v47);
    *(&v84 - 4) = v20;
    *(&v84 - 3) = (void *)v58;
    *((_BYTE *)&v84 - 16) = v86 & 1;
    NSManagedObjectContext.performAndWait<A>(_:)( &type metadata for (),  sub_100176F50,  &v84 - 6,  &type metadata for () + 1);
    sub_1000415CC((uint64_t)v20, type metadata accessor for Changes);
    uint64_t v59 = v85;
    sub_10000FC68(v44, v85, (uint64_t *)&unk_100256C90);
    if (v45((char *)v59, 1LL, v13) == 1)
    {
      id v60 = v84;
      *uint64_t v84 = 0LL;
      v60[1] = 0xE000000000000000LL;
      v60[2] = _swiftEmptyArrayStorage;
      *(_OWORD *)(v60 + 3) = xmmword_1001DE6F0;
      *(_OWORD *)(v60 + 5) = xmmword_1001DE6F0;
      *((_BYTE *)v60 + 56) = 0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      sub_100041590(v59, (uint64_t *)&unk_100256C90);
    }

    else
    {
      id v60 = v84;
      sub_100041608(v59, (uint64_t)v84, type metadata accessor for Changes);
    }

    int v73 = *((unsigned __int8 *)v60 + 56);
    sub_1000415CC((uint64_t)v60, type metadata accessor for Changes);
    if (v73 == 1)
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v74 = type metadata accessor for Logger(0LL);
      uint64_t v75 = sub_100006BAC(v74, (uint64_t)qword_1002567D0);
      uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
      os_log_type_t v77 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "persist: More changes indicated. Fetching...", v78, 2u);
        swift_slowDealloc(v78, -1LL, -1LL);
      }

      sub_100137F18(0LL, v88, v89);
    }

    else
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v79 = type metadata accessor for Logger(0LL);
      uint64_t v80 = sub_100006BAC(v79, (uint64_t)qword_1002567D0);
      uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
      os_log_type_t v82 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v81, v82))
      {
        id v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "persist: no more changes!", v83, 2u);
        swift_slowDealloc(v83, -1LL, -1LL);
      }

      v88(0LL);
    }

    return sub_1000415CC((uint64_t)v24, type metadata accessor for FetchChangesResponse);
  }

  uint64_t v12 = (char *)*v28;
  swift_errorRetain(*v28);
  swift_errorRetain(v12);
  swift_errorRetain(v12);
  uint64_t v29 = (void *)_convertErrorToNSError(_:)(v12);
  unsigned int v30 = [v29 isCuttlefishError:1018];

  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  if (v30)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_100006BAC(v31, (uint64_t)qword_1002567D0);
    id v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.info.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v24 = v87;
    if (v35)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "change token is expired; resetting local CK storage",
        v36,
        2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    uint64_t v37 = *(void **)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    int v38 = (void *)swift_allocObject(&unk_100239900, 40LL, 7LL);
    os_log_type_t v39 = v88;
    uint64_t v14 = v89;
    v38[2] = v24;
    v38[3] = v39;
    v38[4] = v14;
    uint64_t v40 = swift_allocObject(&unk_100239928, 32LL, 7LL);
    *(void *)(v40 + 16) = sub_1001737A0;
    *(void *)(v40 + 24) = v38;
    aBlock[4] = (uint64_t)sub_100176BD4;
    int64_t v91 = (void *)v40;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100239940;
    uint64_t v41 = _Block_copy(aBlock);
    uint64_t v28 = v91;
    id v42 = v24;
    swift_retain(v14);
    swift_retain(v40);
    swift_release(v28);
    [v37 performBlockAndWait:v41];
    swift_errorRelease();
    _Block_release(v41);
    uint64_t ChangesResponse = swift_isEscapingClosureAtFileLocation(v40, "", 108LL, 6698LL, 45LL, 1LL);
    swift_release(v38);
    uint64_t result = swift_release(v40);
    if ((ChangesResponse & 1) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v48, (uint64_t)qword_1002567D0);
    swift_errorRetain(v12);
    uint64_t v49 = swift_errorRetain(v12);
    SEL v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      int64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v53;
      *(_DWORD *)int64_t v52 = 136446210;
      uint64_t v92 = (uint64_t)v12;
      swift_errorRetain(v12);
      uint64_t v54 = sub_100007578(&qword_100251D70);
      uint64_t v55 = String.init<A>(describing:)(&v92, v54);
      unint64_t v57 = v56;
      uint64_t v92 = sub_10017C4C4(v55, v56, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease(v57);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Fetch error is an unknown error: %{public}s", v52, 0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v12);
    uint64_t v61 = swift_errorRetain(v12);
    BOOL v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v66 = static os_log_type_t.error.getter(v62, v63, v64, v65);
    if (os_log_type_enabled(v62, v66))
    {
      id v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v68 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v68;
      *(_DWORD *)id v67 = 136446210;
      uint64_t v92 = (uint64_t)v12;
      swift_errorRetain(v12);
      uint64_t v69 = sub_100007578(&qword_100251D70);
      uint64_t v70 = String.init<A>(describing:)(&v92, v69);
      unint64_t v72 = v71;
      uint64_t v92 = sub_10017C4C4(v70, v71, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease(v72);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, v66, "Could not fetch changes: %{public}s", v67, 0xCu);
      swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v12);
    v88(v12);
    swift_errorRelease();
    return swift_errorRelease();
  }

  return result;
}

uint64_t sub_1001394FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100137F18(0LL, a2, a3);
}

uint64_t sub_10013970C( uint64_t a1, void (*a2)(void, void, uint64_t), uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if (!a1) {
    return sub_100139928(a5, a6 & 1, (uint64_t)a2, a3);
  }
  swift_errorRetain(a1);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v8, (uint64_t)qword_1002567D0);
  swift_errorRetain(a1);
  uint64_t v9 = swift_errorRetain(a1);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v14 = static os_log_type_t.error.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = a1;
    uint64_t v23 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_errorRetain(a1);
    uint64_t v17 = sub_100007578(&qword_100251D70);
    uint64_t v18 = String.init<A>(describing:)(&v22, v17);
    unint64_t v20 = v19;
    uint64_t v22 = sub_10017C4C4(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v14,  "fetchChangesAndUpdateTrustIfNeeded: fetching failed: %{public}s",  v15,  0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain(a1);
  a2(0LL, 0LL, a1);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_100139928(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void **)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v10 = swift_allocObject(&unk_100239680, 152LL, 7LL);
  *(void *)(v10 + 16) = v4;
  *(void *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a4;
  *(_BYTE *)(v10 + 40) = a2;
  sub_1000B669C((uint64_t)a1, v10 + 48, &qword_100256E00);
  uint64_t v11 = swift_allocObject(&unk_1002396A8, 32LL, 7LL);
  *(void *)(v11 + 16) = sub_100173450;
  *(void *)(v11 + 24) = v10;
  v17[4] = sub_100176BD4;
  uint64_t v18 = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  v17[2] = sub_1000DC9F8;
  v17[3] = &unk_1002396C0;
  uint64_t v12 = _Block_copy(v17);
  uint64_t v13 = v18;
  os_log_type_t v14 = v4;
  swift_retain(a4);
  sub_100173474( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
  swift_retain(v11);
  swift_release(v13);
  [v9 performBlockAndWait:v12];
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 108LL, 6777LL, 33LL, 1LL);
  swift_release(v10);
  uint64_t result = swift_release(v11);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

void sub_100139AA4(char *a1, void (*a2)(id, void, void), uint64_t a3, char a4, void *a5)
{
  id v10 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    os_log_type_t v14 = v13;

    strcpy((char *)v23, "signing-key ");
    BYTE5(v23[1]) = 0;
    HIWORD(v23[1]) = -5120;
    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_retain(a3);
    uint64_t v16 = a1;
    swift_bridgeObjectRetain(v14);
    sub_100173474( a5,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
    sub_100160CC4( v23[0],  v23[1],  (void (*)(void, void, void))a2,  a3,  a4 & 1,  v16,  v12,  (uint64_t)v14,  a5);
    sub_100173474( a5,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1001734C8);
    swift_bridgeObjectRelease(v23[1]);
    swift_release(a3);

    swift_bridgeObjectRelease_n(v14, 2LL);
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_100006BAC(v17, (uint64_t)qword_1002567D0);
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "updateTrustIfNeeded: No identity.", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    id v22 = [objc_allocWithZone((Class)TrustedPeersHelperPeerState) initWithPeerID:0 isPreapproved:0 status:32 memberChanges:a4 & 1 unknownMachineIDs:0 osVersion:0 walrus:0 webAccess:0];
    a2(v22, 0LL, 0LL);
  }

void sub_100139CFC( void *a1, uint64_t a2, void (*a3)(void, void, void), uint64_t a4, int a5, char *a6, uint64_t a7, uint64_t a8, void *a9)
{
  int v9 = a5;
  if (a1)
  {
    os_log_type_t v14 = a6;
    LODWORD(v101) = a5;
    uint64_t v99 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
    id v16 = *(id *)&a6[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
    id v17 = a1;
    NSString v18 = String._bridgeToObjectiveC()();
    id v103 = 0LL;
    id v19 = [v16 peerWithID:v18 error:&v103];

    uint64_t v98 = a8;
    BOOL v100 = (void (*)(void, void, void))a7;
    if (v103)
    {
      id v20 = v103;

      swift_willThrow(v21);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v22 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v22, (uint64_t)qword_1002567D0);
      id v23 = v20;
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v28 = static os_log_type_t.error.getter(v24, v25, v26, v27);
      if (os_log_type_enabled(v24, v28))
      {
        id v97 = v17;
        uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        int64_t v96 = v14;
        unsigned int v30 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v29 = 138543362;
        id v23 = v23;
        uint64_t v31 = (void *)_swift_stdlib_bridgeErrorToNSError(v23);
        id v103 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v29 + 4, v29 + 12);
        *unsigned int v30 = v31;
        id v17 = v97;

        _os_log_impl( (void *)&_mh_execute_header,  v24,  v28,  "Failed to get (current self) ego peer from model: %{public}@",  v29,  0xCu);
        uint64_t v32 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v30, 1LL, v32);
        id v33 = v30;
        os_log_type_t v14 = v96;
        swift_slowDealloc(v33, -1LL, -1LL);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      else
      {

        uint64_t v24 = (os_log_s *)v23;
      }
    }

    else if (v19)
    {
      id v49 = v19;
      id v50 = [v49 dynamicInfo];
      __chkstk_darwin(v50, v51);
      v95[2] = v14;
      v95[3] = a3;
      v95[4] = a4;
      uint64_t v52 = sub_100007578(&qword_100251698);
      NSManagedObjectContext.performAndWait<A>(_:)(&v103, sub_100173548, v95, v52);
      uint64_t v53 = (uint64_t)v103;
      if (v103)
      {
        id v17 = v17;
        id v54 = v49;
        uint64_t v55 = v14;
        swift_bridgeObjectRetain(a8);
        sub_100173474( a9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
        swift_retain(a4);
        uint64_t v56 = a8;
        id v57 = v50;
        sub_1001606B8(v53, v55, v55, (uint64_t)v100, v56, v17, a9, v54, (uint64_t)a3, a4, v101 & 1, v50);

        sub_100173474( a9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1001734C8);
        swift_bridgeObjectRelease(v53);

        swift_release(a4);
        swift_bridgeObjectRelease(v56);
      }

      else
      {

        id v17 = v49;
      }

      goto LABEL_38;
    }

    id v58 = *(id *)&v14[v99];
    id v59 = [v17 publicKey];
    id v60 = [v59 spki];
    swift_unknownObjectRelease(v59);
    uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
    unint64_t v63 = v62;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v61, v63);
    id v103 = 0LL;
    id v65 = [v58 hasPotentiallyTrustedPeerPreapprovingKey:isa error:&v103];

    id v66 = v103;
    if (v103)
    {
      id v67 = v103;
      swift_willThrow(v67);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v68 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v68, (uint64_t)qword_1002567D0);
      id v69 = v67;
      uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
      os_log_type_t v74 = static os_log_type_t.error.getter(v70, v71, v72, v73);
      if (os_log_type_enabled(v70, v74))
      {
        BOOL v100 = a3;
        uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v97 = v17;
        uint64_t v76 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v75 = 138543362;
        id v101 = v69;
        id v77 = v69;
        uint64_t v78 = (void *)_swift_stdlib_bridgeErrorToNSError(v77);
        id v103 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v75 + 4, v75 + 12);
        *uint64_t v76 = v78;
        a3 = v100;

        id v69 = v101;
        _os_log_impl( (void *)&_mh_execute_header,  v70,  v74,  "updateTrustIfNeeded: error calling hasPotentiallyTrustedPeerPreapprovingKey %{public}@",  v75,  0xCu);
        uint64_t v79 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v76, 1LL, v79);
        uint64_t v80 = v76;
        id v17 = v97;
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v75, -1LL, -1LL);
      }

      else
      {

        uint64_t v70 = (os_log_s *)v69;
      }

      id v91 = v69;
      a3(0LL, 0LL, v66);
    }

    else
    {
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v81 = type metadata accessor for Logger(0LL);
      uint64_t v82 = sub_100006BAC(v81, (uint64_t)qword_1002567D0);
      id v83 = (os_log_s *)Logger.logObject.getter(v82);
      os_log_type_t v84 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        int v86 = (void *)swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v85 = 136446210;
        id v103 = v86;
        if ((_DWORD)v65) {
          uint64_t v87 = 0x6F72707061657270LL;
        }
        else {
          uint64_t v87 = 0xD000000000000013LL;
        }
        if ((_DWORD)v65) {
          unint64_t v88 = 0xEB00000000646576LL;
        }
        else {
          unint64_t v88 = 0x80000001001F9F40LL;
        }
        LODWORD(v99) = (_DWORD)v65;
        uint64_t v102 = sub_10017C4C4(v87, v88, (uint64_t *)&v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v85 + 4, v85 + 12);
        swift_bridgeObjectRelease(v88);
        _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "updateTrustIfNeeded: ego peer is not in model, is %{public}s",  v85,  0xCu);
        swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v89 = v86;
        unint64_t v90 = v65;
        swift_slowDealloc(v89, -1LL, -1LL);
        swift_slowDealloc(v85, -1LL, -1LL);
      }

      else
      {

        unint64_t v90 = (unint64_t)v65;
      }

      id v92 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperPeerState);
      swift_bridgeObjectRetain(v98);
      NSString v93 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v98);
      id v94 = [v92 initWithPeerID:v93 isPreapproved:v90 status:32 memberChanges:v101 & 1 unknownMachineIDs:0 osVersion:0 walrus:0 webAccess:0];

      a3(v94, 0LL, 0LL);
    }
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v35, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v36 = swift_errorRetain(a2);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v41 = static os_log_type_t.error.getter(v37, v38, v39, v40);
    if (os_log_type_enabled(v37, v41))
    {
      LODWORD(v101) = v9;
      id v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v100 = a3;
      uint64_t v43 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v102 = a2;
      id v103 = v43;
      *(_DWORD *)id v42 = 136446210;
      swift_errorRetain(a2);
      uint64_t v44 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v45 = String.init<A>(describing:)(&v102, v44);
      unint64_t v47 = v46;
      uint64_t v102 = sub_10017C4C4(v45, v46, (uint64_t *)&v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v47);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v41,  "updateTrustIfNeeded: no signing key pair: %{public}s",  v42,  0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v48 = v43;
      a3 = v100;
      swift_slowDealloc(v48, -1LL, -1LL);
      LOBYTE(v9) = (_BYTE)v101;
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    id v17 = [objc_allocWithZone((Class)TrustedPeersHelperPeerState) initWithPeerID:0 isPreapproved:0 status:32 memberChanges:v9 & 1 unknownMachineIDs:0 osVersion:0 walrus:0 webAccess:0];
    a3(v17, 0LL, a2);
  }

void sub_10013A768(uint64_t a1@<X0>, void (*a2)(void, void, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  id v5 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v27 = 0LL;
  id v6 = [v5 allPolicyVersionsWithError:&v27];
  id v7 = v27;
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v10 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);
    id v12 = v7;
  }

  else
  {
    id v13 = v27;
    uint64_t v14 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v15);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_1002567D0);
    swift_errorRetain(v14);
    uint64_t v17 = swift_errorRetain(v14);
    NSString v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v22 = static os_log_type_t.error.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v23 = 138543362;
      swift_errorRetain(v14);
      uint64_t v24 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
      id v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 4, v23 + 12);
      *uint64_t v26 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Error fetching all policy versions: %{public}@", v23, 0xCu);
      uint64_t v25 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v26, 1LL, v25);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v14);
    a2(0LL, 0LL, v14);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v11 = 0LL;
  }

  *a3 = v11;
}

void sub_10013AA44( char *a1, uint64_t a2, unint64_t a3, uint64_t a4, objc_class *a5, void *a6, void (*a7)(id, id, void), uint64_t a8, unsigned __int8 a9, id a10)
{
  id v316 = a7;
  LODWORD(v312) = a9;
  uint64_t v305 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v304 = *(void *)(v305 - 8);
  __chkstk_darwin(v305, v17);
  unint64_t v303 = (uint64_t *)((char *)&v296 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, v19);
  int64_t v308 = (char *)&v296 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v306 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  __chkstk_darwin(v306, v21);
  id v310 = (uint64_t *)((char *)&v296 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  BOOL v325 = 0LL;
  SEL v313 = (void *)OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v23 = *(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  uint64_t v317 = a2;
  NSString v24 = String._bridgeToObjectiveC()();
  uint64_t v25 = (void *)sub_1001A3414();
  id v323 = 0LL;
  id v26 =  [v23 calculateDynamicInfoForPeerWithID:v24 addingPeerIDs:0 removingPeerIDs:0 preapprovedKeys:0 signingKeyPair:a4 currentMachineIDs:v25 error:&v323];

  unint64_t v27 = a3;
  id v28 = v323;
  unint64_t v314 = a3;
  int64_t v315 = a1;
  id v311 = v26;
  if (v26)
  {
    uint64_t v309 = a8;
    id v29 = v323;
    id v30 = v26;
    uint64_t v31 = (uint64_t *)[a6 permanentInfo];
    id v32 = [a6 stableInfo];
    uint64_t v68 = sub_1001412E4(a5, v31, v32, v30, a4, 0LL);

    BOOL v325 = v68;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v69 = type metadata accessor for Logger(0LL);
    uint64_t v302 = sub_100006BAC(v69, (uint64_t)qword_1002567D0);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v302);
    os_log_type_t v71 = static os_log_type_t.info.getter(v70);
    BOOL v72 = os_log_type_enabled(v70, v71);
    uint64_t v298 = a5;
    if (v72)
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v74 = (void *)swift_slowAlloc(32LL, -1LL);
      id v323 = v74;
      *(_DWORD *)uint64_t v73 = 136446210;
      swift_beginAccess(&v325, &v320, 0LL, 0LL);
      uint64_t v322 = v325;
      uint64_t v75 = v325;
      uint64_t v76 = sub_100007578(&qword_100256FA8);
      uint64_t v77 = String.init<A>(describing:)(&v322, v76);
      unint64_t v78 = v27;
      unint64_t v80 = v79;
      uint64_t v322 = (void *)sub_10017C4C4(v77, v79, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v322, &v323, v73 + 4, v73 + 12);
      unint64_t v81 = v80;
      unint64_t v27 = v78;
      swift_bridgeObjectRelease(v81);
      _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "updateTrustIfNeeded: produced a stableInfo: %{public}s",  v73,  0xCu);
      swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    id v82 = v30;
    id v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.info.getter(v83);
    BOOL v85 = os_log_type_enabled(v83, v84);
    id v301 = v82;
    if (v85)
    {
      int v86 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v87 = (void *)swift_slowAlloc(32LL, -1LL);
      id v323 = v87;
      *(_DWORD *)int v86 = 136446210;
      id v300 = v86 + 4;
      id v88 = v82;
      id v89 = [v88 description];
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      unint64_t v92 = v91;

      unint64_t v93 = v314;
      uint64_t v322 = (void *)sub_10017C4C4(v90, v92, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v322, &v323, v300, v86 + 12);

      unint64_t v27 = v93;
      swift_bridgeObjectRelease(v92);
      _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "updateTrustIfNeeded: produced a dynamicInfo: %{public}s",  v86,  0xCu);
      swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_slowDealloc(v86, -1LL, -1LL);
    }

    else
    {
    }

    id v94 = v315;
    id v95 = v313;
    id v96 = *(id *)((char *)v313 + (void)v315);
    NSString v97 = String._bridgeToObjectiveC()();
    id v323 = 0LL;
    id v98 = [v96 peerWithID:v97 error:&v323];

    if (v323)
    {
      id v99 = v323;

      swift_willThrow(v100);
      id v101 = v99;
      uint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
      os_log_type_t v106 = static os_log_type_t.error.getter(v102, v103, v104, v105);
      if (os_log_type_enabled(v102, v106))
      {
        BOOL v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v108 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)BOOL v107 = 138543362;
        id v109 = v101;
        uint64_t v110 = (void *)_swift_stdlib_bridgeErrorToNSError(v109);
        id v323 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, v324, v107 + 4, v107 + 12);
        *unint64_t v108 = v110;
        id v95 = v313;
        unint64_t v27 = v314;

        _os_log_impl( (void *)&_mh_execute_header,  v102,  v106,  "Error getting ego peer from model: %{public}@",  v107,  0xCu);
        uint64_t v111 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v108, 1LL, v111);
        id v94 = v315;
        swift_slowDealloc(v108, -1LL, -1LL);
        swift_slowDealloc(v107, -1LL, -1LL);
      }

      else
      {
      }

      id v98 = 0LL;
    }

    uint64_t v299 = 0LL;
    swift_beginAccess(&v325, &v323, 0LL, 0LL);
    if (v325)
    {
      uint64_t v112 = v325;
      id v113 = v98;
      id v114 = [v113 stableInfo];
      if (!v114) {
        goto LABEL_41;
      }
      Swift::String v115 = v114;
      sub_100007620(0LL, &qword_100256FA0, &OBJC_CLASS___TPPeerStableInfo_ptr);
      uint64_t v116 = v112;
      char v117 = static NSObject.== infix(_:_:)(v116);

      if ((v117 & 1) == 0 || !v98) {
        goto LABEL_42;
      }
    }

    else
    {
      if (!v98) {
        goto LABEL_42;
      }
      id v113 = v98;
    }

    uint64_t v112 = (char *)v301;
    id v113 = v113;
    id v118 = [v113 dynamicInfo];
    if (v118)
    {
      id v119 = v118;
      sub_100007620(0LL, &qword_100256E08, &OBJC_CLASS___TPPeerDynamicInfo_ptr);
      id v120 = v112;
      char v121 = static NSObject.== infix(_:_:)(v120);

      int64_t v297 = v120;
      if ((v121 & 1) != 0)
      {
        id v123 = (os_log_s *)Logger.logObject.getter(v122);
        os_log_type_t v124 = static os_log_type_t.info.getter(v123);
        if (os_log_type_enabled(v123, v124))
        {
          id v125 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v125 = 0;
          _os_log_impl((void *)&_mh_execute_header, v123, v124, "updateTrustIfNeeded: complete.", v125, 2u);
          swift_slowDealloc(v125, -1LL, -1LL);
        }

        id v126 = v297;
        sub_1001A42C0(v297);

        id v127 = *(void **)&v94[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
        uint64_t v322 = 0LL;
        unsigned int v128 = [v127 save:&v322];
        id v129 = v322;
        if (v128)
        {
          id v130 = v322;
        }

        else
        {
          BOOL v224 = v322;
          uint64_t v225 = _convertNSErrorToError(_:)(v129);

          swift_willThrow(v226);
          uint64_t v299 = 0LL;
          swift_errorRetain(v225);
          uint64_t v227 = swift_errorRetain(v225);
          os_log_type_t v228 = (os_log_s *)Logger.logObject.getter(v227);
          os_log_type_t v232 = static os_log_type_t.error.getter(v228, v229, v230, v231);
          if (os_log_type_enabled(v228, v232))
          {
            uint64_t v233 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v234 = (void *)swift_slowAlloc(32LL, -1LL);
            uint64_t v322 = v234;
            *(_DWORD *)uint64_t v233 = 136446210;
            uint64_t v318 = v225;
            swift_errorRetain(v225);
            uint64_t v235 = sub_100007578(&qword_100251D70);
            uint64_t v236 = String.init<A>(describing:)(&v318, v235);
            unint64_t v238 = v237;
            uint64_t v318 = sub_10017C4C4(v236, v237, (uint64_t *)&v322);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v233 + 4, v233 + 12);
            unint64_t v239 = v238;
            id v95 = v313;
            swift_bridgeObjectRelease(v239);
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl( (void *)&_mh_execute_header,  v228,  v232,  "updateTrustIfNeeded: unable to remove untrusted MachineIDs: %{public}s",  v233,  0xCu);
            swift_arrayDestroy(v234, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v234, -1LL, -1LL);
            swift_slowDealloc(v233, -1LL, -1LL);

            swift_errorRelease();
          }

          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
        }

        id v240 = v113;
        id v241 = &selRef_setAllSelves_;
        id v242 = [v240 stableInfo];
        if (v242)
        {
          BOOL v243 = v242;
          id v244 = [v240 permanentInfo];
          id v245 = [v244 modelID];

          LODWORD(v244) = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
          BOOL v247 = v246;

          uint64_t v248 = v299;
          id v249 = sub_10011F6F8((int)v244, v247, v243);
          if (!v248)
          {
            id v311 = v249;
            swift_bridgeObjectRelease(v247);

LABEL_88:
            id v263 = *(id *)((char *)v95 + (void)v315);
            NSString v264 = String._bridgeToObjectiveC()();
            uint64_t v322 = 0LL;
            uint64_t v265 = (uint64_t)[v263 statusOfPeerWithID:v264 error:&v322];

            if (v322)
            {
              unint64_t v266 = v322;
              swift_willThrow(v266);
              uint64_t v267 = v266;
              id v268 = (os_log_s *)Logger.logObject.getter(v267);
              os_log_type_t v272 = static os_log_type_t.error.getter(v268, v269, v270, v271);
              if (os_log_type_enabled(v268, v272))
              {
                id v273 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                BOOL v274 = (void *)swift_slowAlloc(8LL, -1LL);
                *(_DWORD *)id v273 = 138543362;
                uint64_t v267 = v267;
                BOOL v275 = (void *)_swift_stdlib_bridgeErrorToNSError(v267);
                uint64_t v322 = v275;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v322, &v323, v273 + 4, v273 + 12);
                *BOOL v274 = v275;

                _os_log_impl( (void *)&_mh_execute_header,  v268,  v272,  "updateTrustIfNeeded: ignoring additional error calling statusOfPeer: %{public}@",  v273,  0xCu);
                uint64_t v276 = sub_100007578(&qword_100250F90);
                swift_arrayDestroy(v274, 1LL, v276);
                swift_slowDealloc(v274, -1LL, -1LL);
                swift_slowDealloc(v273, -1LL, -1LL);
              }

              else
              {

                id v268 = (os_log_s *)v267;
              }

              uint64_t v265 = 32LL;
            }

            char v277 = sub_1001A2BAC();
            id v278 = [v240 v241[70]];
            if (v278)
            {
              id v279 = v278;
              id v280 = [v278 osVersion];

              static String._unconditionallyBridgeFromObjectiveC(_:)(v280);
              uint64_t v282 = v281;
            }

            else
            {
              uint64_t v282 = 0LL;
            }

            id v283 = [v240 v241[70]];
            id v284 = [v283 walrusSetting];

            id v285 = [v240 v241[70]];
            id v286 = [v285 webAccess];

            unint64_t v287 = v314;
            swift_bridgeObjectRetain(v314);
            NSString v288 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v287);
            if (v282)
            {
              NSString v289 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v282);
            }

            else
            {
              NSString v289 = 0LL;
            }

            id v290 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperPeerState);
            id v291 = [v290 initWithPeerID:v288 isPreapproved:0 status:v265 memberChanges:v312 & 1 unknownMachineIDs:v277 & 1 osVersion:v289 walrus:v284 webAccess:v286];

            uint64_t v292 = v311;
            v316(v291, v311, 0LL);

            goto LABEL_75;
          }

          swift_bridgeObjectRelease(v247);
          swift_errorRetain(v248);
          uint64_t v250 = swift_errorRetain(v248);
          uint64_t v251 = (os_log_s *)Logger.logObject.getter(v250);
          os_log_type_t v255 = static os_log_type_t.error.getter(v251, v252, v253, v254);
          if (os_log_type_enabled(v251, v255))
          {
            uint64_t v256 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            Swift::String v257 = (void *)swift_slowAlloc(32LL, -1LL);
            uint64_t v322 = v257;
            *(_DWORD *)uint64_t v256 = 136446210;
            uint64_t v318 = v248;
            swift_errorRetain(v248);
            uint64_t v258 = sub_100007578(&qword_100251D70);
            uint64_t v259 = String.init<A>(describing:)(&v318, v258);
            unint64_t v261 = v260;
            uint64_t v318 = sub_10017C4C4(v259, v260, (uint64_t *)&v322);
            id v241 = &selRef_setAllSelves_;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v318, &v319, v256 + 4, v256 + 12);
            unint64_t v262 = v261;
            id v95 = v313;
            swift_bridgeObjectRelease(v262);
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl( (void *)&_mh_execute_header,  v251,  v255,  "updateTrustIfNeeded: unable to compute a new syncing policy: %{public}s",  v256,  0xCu);
            swift_arrayDestroy(v257, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v257, -1LL, -1LL);
            swift_slowDealloc(v256, -1LL, -1LL);

            swift_errorRelease();
          }

          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
        }

        else
        {
        }

        id v311 = 0LL;
        goto LABEL_88;
      }

uint64_t sub_10013C7F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a6;
  uint64_t v32 = a3;
  uint64_t v33 = a5;
  uint64_t v9 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v37 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v35 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = a2;
  id v17 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(a1[1]);
  *a1 = v19;
  a1[1] = v21;
  uint64_t v22 = a1[3];
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = v33;
  a1[2] = v32;
  a1[3] = a4;
  sub_10004164C(v23, (uint64_t)v16, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  uint64_t v25 = (uint64_t)a1 + *(int *)(updated + 40);
  sub_100041590(v25, &qword_100256CA0);
  sub_100041608((uint64_t)v16, v25, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v25, 0LL, 1LL, v12);
  __chkstk_darwin(v26, v27);
  *(&v32 - 2) = v34;
  uint64_t v28 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  uint64_t v29 = (uint64_t)v35;
  static Message.with(_:)(v36, &v32 - 4, v9, v28);
  uint64_t v30 = (uint64_t)a1 + *(int *)(updated + 44);
  sub_100041590(v30, &qword_100256D20);
  sub_100041608(v29, v30, type metadata accessor for IdmsTrustedDevicesVersion);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v30, 0LL, 1LL, v9);
}

uint64_t sub_10013CA40( uint64_t a1, void *a2, void (*a3)(void, void, uint64_t), uint64_t a4, void *a5, int a6)
{
  int v59 = a6;
  id v60 = a5;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v7 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v57 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v57 - v12;
  uint64_t v14 = type metadata accessor for Changes(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  os_log_type_t v58 = (uint64_t *)((char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v17, v19);
  unint64_t v21 = (char *)&v57 - v20;
  uint64_t updated = type metadata accessor for UpdateTrustResponse(0LL);
  __chkstk_darwin(updated, v23);
  uint64_t v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100007578((uint64_t *)&unk_100256D10);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (uint64_t *)((char *)&v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v29, (uint64_t *)&unk_100256D10);
  if (swift_getEnumCaseMultiPayload(v29, v26) == 1)
  {
    uint64_t v30 = *v29;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v31, (uint64_t)qword_1002567D0);
    swift_errorRetain(v30);
    uint64_t v32 = swift_errorRetain(v30);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v37 = static os_log_type_t.error.getter(v33, v34, v35, v36);
    if (os_log_type_enabled(v33, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      uint64_t v64 = v30;
      uint64_t v65 = v39;
      *(_DWORD *)uint64_t v38 = 136446210;
      swift_errorRetain(v30);
      uint64_t v40 = sub_100007578(&qword_100251D70);
      uint64_t v41 = String.init<A>(describing:)(&v64, v40);
      unint64_t v43 = v42;
      uint64_t v64 = sub_10017C4C4(v41, v42, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v37, "UpdateTrust failed: %{public}s", v38, 0xCu);
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v30);
    v62(0LL, 0LL, v30);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    sub_100041608((uint64_t)v29, (uint64_t)v25, type metadata accessor for UpdateTrustResponse);
    uint64_t v44 = (uint64_t)&v25[*(int *)(updated + 24)];
    sub_10000FC68(v44, (uint64_t)v13, (uint64_t *)&unk_100256C90);
    uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v45(v13, 1LL, v14) == 1)
    {
      *(void *)unint64_t v21 = 0LL;
      *((void *)v21 + 1) = 0xE000000000000000LL;
      *((void *)v21 + 2) = _swiftEmptyArrayStorage;
      *(_OWORD *)(v21 + 24) = xmmword_1001DE6F0;
      *(_OWORD *)(v21 + 40) = xmmword_1001DE6F0;
      v21[56] = 0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      uint64_t v46 = sub_100041590((uint64_t)v13, (uint64_t *)&unk_100256C90);
    }

    else
    {
      uint64_t v46 = sub_100041608((uint64_t)v13, (uint64_t)v21, type metadata accessor for Changes);
    }

    id v49 = v61;
    __chkstk_darwin(v46, v47);
    *(&v57 - 4) = (uint64_t)v21;
    *(&v57 - 3) = (uint64_t)v49;
    *((_BYTE *)&v57 - 16) = 0;
    NSManagedObjectContext.performAndWait<A>(_:)( &type metadata for (),  sub_100176F50,  &v57 - 6,  &type metadata for () + 1);
    sub_1000415CC((uint64_t)v21, type metadata accessor for Changes);
    uint64_t v50 = v57;
    sub_10000FC68(v44, v57, (uint64_t *)&unk_100256C90);
    if (v45((char *)v50, 1LL, v14) == 1)
    {
      uint64_t v51 = v58;
      void *v58 = 0LL;
      v51[1] = 0xE000000000000000LL;
      v51[2] = _swiftEmptyArrayStorage;
      *(_OWORD *)(v51 + 3) = xmmword_1001DE6F0;
      *(_OWORD *)(v51 + 5) = xmmword_1001DE6F0;
      *((_BYTE *)v51 + 56) = 0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      sub_100041590(v50, (uint64_t *)&unk_100256C90);
    }

    else
    {
      uint64_t v51 = v58;
      sub_100041608(v50, (uint64_t)v58, type metadata accessor for Changes);
    }

    int v52 = *((unsigned __int8 *)v51 + 56);
    sub_1000415CC((uint64_t)v51, type metadata accessor for Changes);
    if (v52 == 1)
    {
      uint64_t v53 = swift_allocObject(&unk_100238640, 145LL, 7LL);
      uint64_t v54 = v63;
      *(void *)(v53 + 16) = v62;
      *(void *)(v53 + 24) = v54;
      *(void *)(v53 + 32) = v49;
      uint64_t v55 = v60;
      sub_1000B669C((uint64_t)v60, v53 + 40, &qword_100256E00);
      *(_BYTE *)(v53 + 144) = v59 & 1;
      swift_retain(v54);
      id v56 = v49;
      sub_100173474( v55,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
      sub_100137F18(0, (uint64_t)sub_100171BA0, v53);
      swift_release(v53);
    }

    else
    {
      sub_100139928(v60, v59 & 1, (uint64_t)v62, v63);
    }

    return sub_1000415CC((uint64_t)v25, type metadata accessor for UpdateTrustResponse);
  }

uint64_t sub_10013D1C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v37 = a2;
  int v36 = a3;
  uint64_t v4 = type metadata accessor for Changes(0LL);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v12 = (char *)&v34 - v11;
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v34 - v14;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v16, (uint64_t)qword_1002567D0);
  sub_10004164C(a1, (uint64_t)v15, type metadata accessor for Changes);
  uint64_t v17 = sub_10004164C(a1, (uint64_t)v12, type metadata accessor for Changes);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (_DWORD *)swift_slowAlloc(18LL, -1LL);
    uint64_t v35 = a1;
    unint64_t v21 = v20;
    _DWORD *v20 = 134218240;
    uint64_t v22 = v20 + 1;
    uint64_t v23 = *(void *)(*((void *)v15 + 2) + 16LL);
    sub_1000415CC((uint64_t)v15, type metadata accessor for Changes);
    uint64_t v40 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v22, v21 + 3);
    *((_WORD *)v21 + 6) = 1024;
    int v24 = v12[56];
    sub_1000415CC((uint64_t)v12, type metadata accessor for Changes);
    LODWORD(v40) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, (char *)v21 + 14, (char *)v21 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "persist: Received %ld peer differences, more: %{BOOL}d",  (uint8_t *)v21,  0x12u);
    uint64_t v25 = v21;
    a1 = v35;
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    sub_1000415CC((uint64_t)v12, type metadata accessor for Changes);
    sub_1000415CC((uint64_t)v15, type metadata accessor for Changes);
  }

  uint64_t v26 = sub_10004164C(a1, (uint64_t)v8, type metadata accessor for Changes);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v30;
    *(_DWORD *)uint64_t v29 = 136446210;
    uint64_t v31 = *v8;
    unint64_t v32 = v8[1];
    swift_bridgeObjectRetain(v32);
    uint64_t v38 = sub_10017C4C4(v31, v32, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v32);
    sub_1000415CC((uint64_t)v8, type metadata accessor for Changes);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "persist: New change token: %{public}s", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    sub_1000415CC((uint64_t)v8, type metadata accessor for Changes);
  }

  return sub_10013D540(a1, v36 & 1);
}

uint64_t sub_10013D540(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v8 = *(id *)(v4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setChangeToken:v9];

  [*(id *)(v4 + v7) setMoreChanges:*(unsigned __int8 *)(a1 + 56)];
  if ((a2 & 1) != 0) {
    [*(id *)(v4 + v7) setRefetchLevel:1];
  }
  if (!*(void *)(*(void *)(a1 + 16) + 16LL)) {
    goto LABEL_13;
  }
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100006BAC(v10, (uint64_t)qword_1002567D0);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "escrow cache and viable bottles are no longer valid", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  sub_10011AA04();
  [*(id *)(v4 + v7) setAccountSettings:0];
  [*(id *)(v4 + v7) setAccountSettingsDate:0];
  [(id)swift_getObjCClassFromMetadata(*(void *)(v4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_darwinNotifier)) post:OTCliqueChanged];
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16) {
LABEL_13:
  }
    __asm { BR              X10 }

  uint64_t v17 = *(void *)(type metadata accessor for PeerDifference(0LL) - 8);
  uint64_t v18 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v19 = *(void *)(v17 + 72);
  swift_bridgeObjectRetain(v15);
  while (1)
  {
    sub_10013DB1C(v18, v4);
    if (v3) {
      return swift_bridgeObjectRelease(v15);
    }
    v18 += v19;
    if (!--v16)
    {
      swift_bridgeObjectRelease(v15);
      goto LABEL_13;
    }
  }

uint64_t sub_10013DB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a2;
  uint64_t v89 = a1;
  uint64_t v2 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v2, v3);
  uint64_t v86 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v87 = *(void *)(v85 - 8);
  __chkstk_darwin(v85, v5);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Peer(0LL);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (uint64_t *)((char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (uint64_t *)((char *)&v82 - v14);
  uint64_t v16 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v26);
  os_log_type_t v28 = (char *)&v82 - v27;
  sub_10000FC68(v89, (uint64_t)v19, &qword_100251658);
  uint64_t v89 = v8;
  uint64_t v30 = v15;
  os_log_type_t v84 = v7;
  sub_100041608((uint64_t)v19, (uint64_t)v28, type metadata accessor for PeerDifference.OneOf_Operation);
  sub_10004164C((uint64_t)v28, (uint64_t)v25, type metadata accessor for PeerDifference.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload(v25, v20) == 1)
  {
    sub_100041608((uint64_t)v25, (uint64_t)v12, type metadata accessor for Peer);
    uint64_t v32 = *v12;
    uint64_t v31 = v12[1];
    uint64_t v33 = v88;
    uint64_t v34 = *(void *)(v88 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter);
    uint64_t v35 = *(void *)(v34 + 16);
    int v36 = *(void **)(v34 + 24);
    swift_retain(v34);
    uint64_t v37 = v32;
    uint64_t v38 = v90;
    uint64_t v39 = (void *)sub_1001616C8(v35, v36, v37, v31);
    swift_release(v34);
    if (!v38)
    {
      if (v39)
      {
        [*(id *)(v33 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc) deleteObject:v39];
      }
    }

    sub_1000415CC((uint64_t)v28, type metadata accessor for PeerDifference.OneOf_Operation);
    uint64_t v40 = type metadata accessor for Peer;
    uint64_t v41 = (uint64_t)v12;
    return sub_1000415CC(v41, v40);
  }

  uint64_t v42 = (uint64_t)v15;
  sub_100041608((uint64_t)v25, (uint64_t)v15, type metadata accessor for Peer);
  uint64_t v43 = v88;
  uint64_t v44 = v90;
  sub_10013F17C(v30);
  if (v44)
  {
LABEL_9:
    sub_1000415CC(v42, type metadata accessor for Peer);
    uint64_t v40 = type metadata accessor for PeerDifference.OneOf_Operation;
    uint64_t v41 = (uint64_t)v28;
    return sub_1000415CC(v41, v40);
  }

  uint64_t v45 = *v30;
  uint64_t v46 = v30[1];
  uint64_t v47 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  uint64_t v48 = *(void **)(v43 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  swift_bridgeObjectRetain(v46);
  id v49 = [v48 egoPeerID];
  if (!v49)
  {
    swift_bridgeObjectRelease(v46);
    goto LABEL_9;
  }

  uint64_t v50 = v49;
  uint64_t v83 = v47;
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  uint64_t v53 = v52;

  if (v45 == v51 && v46 == v53)
  {
    swift_bridgeObjectRelease_n(v46, 2LL);
    uint64_t v42 = (uint64_t)v30;
    uint64_t v54 = v87;
    uint64_t v55 = v89;
  }

  else
  {
    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v51, v53, 0LL);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v53);
    uint64_t v42 = (uint64_t)v30;
    uint64_t v54 = v87;
    uint64_t v55 = v89;
    if ((v56 & 1) == 0) {
      goto LABEL_9;
    }
  }

  uint64_t v57 = v86;
  sub_10000FC68(v42 + *(int *)(v55 + 32), v86, &qword_100251F18);
  int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v57, 1LL, v85);
  uint64_t v90 = 0LL;
  id v82 = v28;
  uint64_t v60 = v83;
  int v59 = v84;
  if (v58 == 1)
  {
    *os_log_type_t v84 = xmmword_1001DE6F0;
    v59[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590(v57, &qword_100251F18);
  }

  else
  {
    sub_100041608(v57, (uint64_t)v84, type metadata accessor for SignedPeerStableInfo);
  }

  sub_1000415CC(v42, type metadata accessor for Peer);
  uint64_t v61 = *(void *)v59;
  unint64_t v62 = *((void *)v59 + 1);
  uint64_t v63 = *((void *)v59 + 2);
  unint64_t v64 = *((void *)v59 + 3);
  id v65 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  sub_1000084E8(v61, v62);
  sub_1000084E8(v63, v64);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v67 = Data._bridgeToObjectiveC()().super.isa;
  id v68 = [v65 initWithData:isa sig:v67];
  sub_10000852C(v63, v64);
  sub_10000852C(v61, v62);

  sub_1000415CC((uint64_t)v59, type metadata accessor for SignedPeerStableInfo);
  if (v68)
  {
    uint64_t v69 = v88;
    id v70 = *(id *)(v88 + v60);
    id v71 = objc_msgSend(v68, "data", v82);
    uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v71);
    unint64_t v74 = v73;

    Class v75 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v72, v74);
    [v70 setEgoPeerStableInfo:v75];

    id v76 = *(id *)(v69 + v60);
    id v77 = [v68 sig];
    uint64_t v78 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
    unint64_t v80 = v79;

    Class v81 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v78, v80);
    [v76 setEgoPeerStableInfoSig:v81];
  }

  return sub_1000415CC((uint64_t)v82, type metadata accessor for PeerDifference.OneOf_Operation);
}

void sub_10013E13C()
{
  uint64_t v1 = v0;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v95 = sub_100006BAC(v2, (uint64_t)qword_1002567D0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v95);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deleting all CloudKit data", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  id v6 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithEntityName:v7];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v9 = sub_100007578(&qword_100251578);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001DE710;
  uint64_t v11 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  uint64_t v13 = type metadata accessor for ContainerMO();
  *(void *)(v10 + 56) = v13;
  uint64_t v14 = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 32) = v12;
  id v15 = v12;
  uint64_t v16 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v10);
  [v8 setPredicate:v16];

  [v8 setResultType:1];
  uint64_t v17 = *(void **)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  id v96 = v8;
  id v18 = [objc_allocWithZone(NSBatchDeleteRequest) initWithFetchRequest:v8];
  id v98 = 0LL;
  id v94 = v17;
  id v19 = [v17 executeRequest:v18 error:&v98];

  id v20 = v98;
  if (!v19)
  {
    id v33 = v98;
    id v34 = v20;
LABEL_18:
    uint64_t v76 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v77);
    uint64_t v41 = v96;
LABEL_19:

    swift_errorRetain(v76);
    uint64_t v78 = swift_errorRetain(v76);
    id v66 = (os_log_s *)Logger.logObject.getter(v78);
    os_log_type_t v82 = static os_log_type_t.error.getter(v66, v79, v80, v81);
    if (!os_log_type_enabled(v66, v82))
    {
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_23;
    }

    id v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v72 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v97 = v76;
    id v98 = v72;
    *(_DWORD *)id v71 = 136446210;
    swift_errorRetain(v76);
    uint64_t v83 = sub_100007578(&qword_100251D70);
    uint64_t v84 = String.init<A>(describing:)(&v97, v83);
    unint64_t v86 = v85;
    uint64_t v97 = sub_10017C4C4(v84, v85, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v71 + 4, v71 + 12);
    swift_bridgeObjectRelease(v86);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, v82, "Local delete failed: %{public}s", v71, 0xCu);
    Class v75 = (char *)&type metadata for Any + 8;
LABEL_21:
    swift_arrayDestroy(v72, 1LL, v75);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v71, -1LL, -1LL);
LABEL_23:

LABEL_24:
    swift_willThrow(v87);
    return;
  }

  id v21 = v98;

  id v22 = [*(id *)(v1 + v11) egoPeerID];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v26 = v25;

    id v27 = [*(id *)(v1 + v11) bottles];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = sub_10016BC04(v28, v24, v26);
      swift_bridgeObjectRelease(v26);
      id v30 = objc_allocWithZone(&OBJC_CLASS___NSSet);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v29);
      id v32 = [v30 initWithArray:isa];

      [*(id *)(v1 + v11) removeBottles:v32];
      goto LABEL_13;
    }

    swift_bridgeObjectRelease(v26);
  }

  id v35 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v36 = String._bridgeToObjectiveC()();
  id v32 = [v35 initWithEntityName:v36];

  uint64_t v37 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v37 + 16) = xmmword_1001DE710;
  uint64_t v38 = *(void **)(v1 + v11);
  *(void *)(v37 + 56) = v13;
  *(void *)(v37 + 64) = v14;
  *(void *)(v37 + 32) = v38;
  id v39 = v38;
  uint64_t v40 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v37);
  [v32 setPredicate:v40];

  uint64_t v41 = v96;
  [v96 setResultType:1];
  id v42 = [objc_allocWithZone(NSBatchDeleteRequest) initWithFetchRequest:v32];
  id v98 = 0LL;
  id v43 = [v94 executeRequest:v42 error:&v98];

  id v44 = v98;
  if (!v43)
  {
    id v88 = v98;
    uint64_t v76 = _convertNSErrorToError(_:)(v44);

    swift_willThrow(v89);
    goto LABEL_19;
  }

  id v45 = v98;

  [*(id *)(v1 + v11) setBottles:0];
LABEL_13:

  [*(id *)(v1 + v11) setPeers:0];
  [*(id *)(v1 + v11) setChangeToken:0];
  [*(id *)(v1 + v11) setMoreChanges:0];
  uint64_t v46 = *(void **)(v1 + v11);
  uint64_t v47 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter;
  uint64_t v48 = *(void *)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter);
  id v49 = v46;
  swift_retain(v48);
  uint64_t v50 = sub_1000E3618();
  unint64_t v52 = v51;
  swift_release(v48);
  uint64_t v53 = sub_100163650(v94, v49, v50, v52);
  uint64_t v55 = v54;
  sub_10003C1D0(v50, v52);

  uint64_t v56 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  uint64_t v57 = *(void **)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  *(void *)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model) = v53;

  uint64_t v58 = *(void *)(v1 + v47);
  *(void *)(v1 + v47) = v55;
  swift_release(v58);
  id v98 = 0LL;
  unsigned int v59 = [v94 save:&v98];
  id v60 = v98;
  if (!v59)
  {
    id v33 = v98;
    id v34 = v60;
    goto LABEL_18;
  }

  id v61 = v98;

  unint64_t v62 = *(void **)(v1 + v56);
  id v98 = 0LL;
  id v63 = [v62 peerCountWithError:&v98];
  if (v98)
  {
    id v64 = v98;
    swift_willThrow(v64);
    id v65 = v64;
    id v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v70 = static os_log_type_t.error.getter(v66, v67, v68, v69);
    if (!os_log_type_enabled(v66, v70))
    {

      goto LABEL_24;
    }

    id v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v72 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v71 = 138543362;
    id v73 = v65;
    unint64_t v74 = (void *)_swift_stdlib_bridgeErrorToNSError(v73);
    id v98 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v71 + 4, v71 + 12);
    *uint64_t v72 = v74;

    _os_log_impl((void *)&_mh_execute_header, v66, v70, "error getting peerCount: %{public}@", v71, 0xCu);
    Class v75 = (char *)sub_100007578(&qword_100250F90);
    goto LABEL_21;
  }

  uint64_t v90 = v63;
  unint64_t v91 = (os_log_s *)Logger.logObject.getter(v63);
  os_log_type_t v92 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v91, v92))
  {
    unint64_t v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)unint64_t v93 = 134217984;
    id v98 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v93 + 4, v93 + 12);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Saved model with %lu peers", v93, 0xCu);
    swift_slowDealloc(v93, -1LL, -1LL);
  }
}

void sub_10013EA7C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = *(void **)(v4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v10 = objc_allocWithZone(&OBJC_CLASS___TPRecoveryKeyPair);
  id v11 = v9;
  sub_1000084E8(a1, a2);
  sub_1000084E8(a3, a4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v13 = Data._bridgeToObjectiveC()().super.isa;
  id v14 = [v10 initWithSigningKeyData:isa encryptionKeyData:v13];
  sub_10000852C(a3, a4);
  sub_10000852C(a1, a2);

  [v11 setRecoveryKeys:v14];
  uint64_t v15 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v16 = *(id *)(v4 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  Class v17 = Data._bridgeToObjectiveC()().super.isa;
  [v16 setRecoveryKeySigningSPKI:v17];

  id v18 = *(id *)(v4 + v15);
  Class v19 = Data._bridgeToObjectiveC()().super.isa;
  [v18 setRecoveryKeyEncryptionSPKI:v19];
}

void sub_10013EBF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (uint64_t *)((char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_100007578(&qword_100251F28);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  id v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(int *)(v2 + 44);
  uint64_t v53 = a1;
  sub_10000FC68(a1 + v15, (uint64_t)v9, &qword_100251F28);
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
  uint64_t v54 = v5;
  if (v16 == 1)
  {
    *(_OWORD *)id v14 = xmmword_1001DE6F0;
    *((_OWORD *)v14 + 1) = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v9, &qword_100251F28);
  }

  else
  {
    sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedCustodianRecoveryKey);
  }

  uint64_t v17 = *(void *)v14;
  unint64_t v18 = *((void *)v14 + 1);
  uint64_t v20 = *((void *)v14 + 2);
  unint64_t v19 = *((void *)v14 + 3);
  id v21 = objc_allocWithZone(&OBJC_CLASS___TPECPublicKeyFactory);
  sub_1000084E8(v17, v18);
  sub_1000084E8(v20, v19);
  id v22 = [v21 init];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v24 = Data._bridgeToObjectiveC()().super.isa;
  id v25 =  [(id)objc_opt_self(TPCustodianRecoveryKey) custodianRecoveryKeyWithData:isa sig:v24 keyFactory:v22];

  sub_10000852C(v20, v19);
  sub_10000852C(v17, v18);

  sub_1000415CC((uint64_t)v14, type metadata accessor for SignedCustodianRecoveryKey);
  if (v25)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v26, (uint64_t)qword_1002567D0);
    id v27 = v54;
    uint64_t v28 = sub_10004164C(v53, (uint64_t)v54, type metadata accessor for Peer);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v58 = v32;
      *(_DWORD *)uint64_t v31 = 136446210;
      uint64_t v33 = *v27;
      unint64_t v34 = v27[1];
      swift_bridgeObjectRetain(v34);
      uint64_t v56 = sub_10017C4C4(v33, v34, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v34);
      sub_1000415CC((uint64_t)v27, type metadata accessor for Peer);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Register CRK with peerID %{public}s", v31, 0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      sub_1000415CC((uint64_t)v27, type metadata accessor for Peer);
    }

    uint64_t v40 = v55;
    [*(id *)(v55 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model) registerCustodianRecoveryKey:v25];
    uint64_t v41 = type metadata accessor for CustodianRecoveryKeyMO();
    id v37 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v41)) initWithContext:*(void *)(v40 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc)];
    id v42 = [v25 data];
    uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
    unint64_t v45 = v44;

    Class v46 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v43, v45);
    [v37 setCrkInfo:v46];

    id v47 = [v25 sig];
    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    unint64_t v50 = v49;

    Class v51 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v48, v50);
    [v37 setCrkInfoSig:v51];

    [*(id *)(v40 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO) addCustodianRecoveryKeysObject:v37];
  }

  else
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = sub_100006BAC(v35, (uint64_t)qword_1002567D0);
    id v37 = (id)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled((os_log_t)v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v37, v38, "failed to parse custodian recovery key", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }
  }
}

void sub_10013F17C(uint64_t *a1)
{
  BOOL v325 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v4 = __chkstk_darwin(v325, v3);
  uint64_t v305 = (uint64_t)&v301 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v6);
  uint64_t v306 = (uint64_t)&v301 - v7;
  uint64_t v8 = sub_100007578(&qword_100251F28);
  __chkstk_darwin(v8, v9);
  uint64_t v311 = (uint64_t)&v301 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SignedVoucher(0LL);
  uint64_t v316 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  SEL v326 = (char *)&v301 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100007578(&qword_100256CA0);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v307 = (uint64_t)&v301 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16, v18);
  uint64_t v314 = (uint64_t)&v301 - v19;
  uint64_t v317 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v319 = *(void *)(v317 - 8);
  uint64_t v21 = __chkstk_darwin(v317, v20);
  int64_t v308 = (_OWORD *)((char *)&v301 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v21, v23);
  int64_t v315 = (_OWORD *)((char *)&v301 - v24);
  uint64_t v25 = sub_100007578(&qword_100251F18);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v309 = (uint64_t)&v301 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v312 = (uint64_t)&v301 - v30;
  unint64_t v318 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v320 = *(uint64_t (***)(uint64_t, uint64_t, unint64_t))(v318 - 8);
  uint64_t v32 = __chkstk_darwin(v318, v31);
  id v310 = (_OWORD *)((char *)&v301 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v32, v34);
  SEL v313 = (_OWORD *)((char *)&v301 - v35);
  uint64_t v36 = sub_100007578(&qword_100256F80);
  __chkstk_darwin(v36, v37);
  uint64_t v321 = (uint64_t *)((char *)&v301 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v39 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v41);
  uint64_t v43 = (char *)&v301 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = *a1;
  uint64_t v44 = a1[1];
  id v323 = v1;
  unint64_t v324 = (unint64_t)a1;
  uint64_t v46 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v47 = *(void **)&v1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  swift_bridgeObjectRetain(v44);
  id v48 = v47;
  NSString v49 = String._bridgeToObjectiveC()();
  unint64_t v328 = 0LL;
  unsigned __int8 v50 = [v48 hasPeerWithID:v49 error:&v328];

  if (v328)
  {
    (id)v328;
    uint64_t v51 = swift_bridgeObjectRelease(v44);
LABEL_3:
    swift_willThrow(v51);
    return;
  }

  uint64_t v52 = v321;
  uint64_t v302 = v46;
  uint64_t v303 = v45;
  uint64_t v304 = v44;
  if ((v50 & 1) != 0)
  {
    uint64_t v53 = (_OWORD *)OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter;
    uint64_t v54 = *(void *)&v323[OBJC_IVAR____TtC18TrustedPeersHelper9Container_dbAdapter];
    uint64_t v56 = *(void *)(v54 + 16);
    uint64_t v55 = *(void **)(v54 + 24);
    swift_retain(v54);
    uint64_t v57 = v56;
    uint64_t v58 = v55;
    uint64_t v59 = v303;
    uint64_t v60 = v304;
    os_log_t v61 = v322;
    uint64_t v62 = sub_1001616C8(v57, v58, v303, v304);
    uint64_t v63 = (uint64_t)v320;
    if (v61)
    {
      swift_bridgeObjectRelease(v60);
      swift_release(v54);
      return;
    }

    uint64_t v79 = (char *)v62;
    swift_release(v54);
    if (!v79)
    {
      unint64_t v151 = sub_100043F74();
      uint64_t v51 = swift_allocError(&type metadata for ContainerError, v151, 0LL, 0LL);
      *(void *)uint64_t v152 = v59;
      *(void *)(v152 + 8) = v60;
      *(_BYTE *)(v152 + 16) = 8;
      goto LABEL_3;
    }

    uint64_t v80 = v309;
    sub_10000FC68(v324 + v325[8], v309, &qword_100251F18);
    int v81 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v63 + 48))(v80, 1LL, v318);
    os_log_t v322 = 0LL;
    int64_t v315 = v53;
    uint64_t v82 = (uint64_t)v310;
    if (v81 == 1)
    {
      *id v310 = xmmword_1001DE6F0;
      *(_OWORD *)(v82 + 16) = xmmword_1001DE6F0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      sub_100041590(v80, &qword_100251F18);
    }

    else
    {
      sub_100041608(v80, (uint64_t)v310, type metadata accessor for SignedPeerStableInfo);
    }

    uint64_t v153 = *(void *)v82;
    unint64_t v154 = *(void *)(v82 + 8);
    uint64_t v155 = *(void *)(v82 + 16);
    unint64_t v156 = *(void *)(v82 + 24);
    id v157 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    sub_1000084E8(v153, v154);
    sub_1000084E8(v155, v156);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v159 = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v160 = (uint64_t *)[v157 initWithData:isa sig:v159];
    sub_10000852C(v155, v156);
    sub_10000852C(v153, v154);

    sub_1000415CC(v82, type metadata accessor for SignedPeerStableInfo);
    uint64_t v161 = (uint64_t)v323;
    uint64_t v162 = v319;
    uint64_t v321 = v160;
    if (v160)
    {
      id v163 = *(id *)&v323[v302];
      unint64_t v164 = v160;
      uint64_t v165 = v304;
      NSString v166 = String._bridgeToObjectiveC()();
      unint64_t v328 = 0LL;
      id v167 = [v163 copyPeerWithNewStableInfo:v164 forPeerWithID:v166 error:&v328];

      unint64_t v168 = v328;
      if (!v167)
      {
        id v220 = (id)v328;
        swift_bridgeObjectRelease(v165);
        _convertNSErrorToError(_:)(v168);

        swift_willThrow(v221);
        return;
      }

      id v169 = (id)v328;
      char v170 = (objc_class *)[v167 stableInfo];
      Class v171 = v170;
      if (v170)
      {
        id v172 = -[objc_class data](v170, "data");

        uint64_t v173 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v172);
        unint64_t v175 = v174;

        Class v171 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v173, v175);
      }

      [v79 setStableInfo:v171];

      id v176 = (objc_class *)[v167 stableInfo];
      Class v177 = v176;
      if (v176)
      {
        id v178 = -[objc_class sig](v176, "sig");

        uint64_t v179 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v178);
        unint64_t v181 = v180;

        Class v177 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v179, v181);
      }

      uint64_t v162 = v319;
      [v79 setStableInfoSig:v177];
    }

    uint64_t v182 = v307;
    sub_10000FC68(v324 + v325[9], v307, &qword_100256CA0);
    int v183 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v182, 1LL, v317);
    SEL v326 = v79;
    uint64_t v184 = v308;
    if (v183 == 1)
    {
      *int64_t v308 = xmmword_1001DE6F0;
      v184[1] = xmmword_1001DE6F0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      sub_100041590(v182, &qword_100256CA0);
    }

    else
    {
      sub_100041608(v182, (uint64_t)v308, type metadata accessor for SignedPeerDynamicInfo);
    }

    uint64_t v185 = *(void *)v184;
    unint64_t v186 = *((void *)v184 + 1);
    uint64_t v187 = *((void *)v184 + 2);
    unint64_t v188 = *((void *)v184 + 3);
    sub_1000084E8(*(void *)v184, v186);
    sub_1000084E8(v187, v188);
    Class v189 = Data._bridgeToObjectiveC()().super.isa;
    Class v190 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v191 = (int *) [(id)objc_opt_self(TPPeerDynamicInfo) dynamicInfoWithData:v189 sig:v190];
    sub_10000852C(v187, v188);
    sub_10000852C(v185, v186);

    sub_1000415CC((uint64_t)v184, type metadata accessor for SignedPeerDynamicInfo);
    uint64_t v192 = v322;
    BOOL v325 = v191;
    uint64_t v193 = v316;
    if (v191)
    {
      id v194 = *(id *)(v161 + v302);
      uint64_t v195 = v325;
      uint64_t v196 = v304;
      NSString v197 = String._bridgeToObjectiveC()();
      unint64_t v328 = 0LL;
      id v198 = [v194 copyPeerWithNewDynamicInfo:v195 forPeerWithID:v197 error:&v328];

      unint64_t v199 = v328;
      if (!v198)
      {
        id v253 = (id)v328;
        swift_bridgeObjectRelease(v196);
        _convertNSErrorToError(_:)(v199);

        swift_willThrow(v254);
        goto LABEL_87;
      }

      uint64_t v200 = v192;
      id v201 = (id)v328;
      uint64_t v202 = (objc_class *)[v198 dynamicInfo];
      Class v203 = v202;
      BOOL v204 = v326;
      if (v202)
      {
        id v205 = -[objc_class data](v202, "data");

        uint64_t v206 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v205);
        unint64_t v208 = v207;

        Class v203 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v206, v208);
      }

      [v204 setDynamicInfo:v203];

      uint64_t v209 = (objc_class *)[v198 dynamicInfo];
      Class v210 = v209;
      if (v209)
      {
        id v211 = -[objc_class sig](v209, "sig");

        uint64_t v212 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v211);
        unint64_t v214 = v213;

        Class v210 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000852C(v212, v214);
      }

      uint64_t v192 = v200;
      uint64_t v161 = (uint64_t)v323;
      [v204 setDynamicInfoSig:v210];

      uint64_t v193 = v316;
    }

    uint64_t v215 = *(void *)(v324 + 16);
    uint64_t v216 = *(void *)(v215 + 16);
    if (v216)
    {
      uint64_t v217 = (uint64_t *)(v215
                       + ((*(unsigned __int8 *)(v193 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80)));
      uint64_t v218 = *(void *)(v193 + 72);
      swift_bridgeObjectRetain(*(void *)(v324 + 16));
      SEL v219 = v326;
      do
      {
        sub_100140F24(v217, v219, v161);
        uint64_t v217 = (uint64_t *)((char *)v217 + v218);
        --v216;
      }

      while (v216);
      swift_bridgeObjectRelease(v215);
    }

    else
    {
      SEL v219 = v326;
    }

    id v222 = [v219 permanentInfo];
    uint64_t v223 = v304;
    if (v222)
    {
      BOOL v224 = v222;
      uint64_t v225 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v222);
      unint64_t v227 = v226;

      id v228 = [v219 permanentInfoSig];
      if (v228)
      {
        uint64_t v229 = v228;
        uint64_t v230 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v228);
        unint64_t v232 = v231;

        SEL v326 = (char *)[objc_allocWithZone(TPECPublicKeyFactory) init];
        swift_bridgeObjectRetain(v223);
        sub_1000084E8(v225, v227);
        sub_1000084E8(v230, v232);
        NSString v233 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v223);
        Class v234 = Data._bridgeToObjectiveC()().super.isa;
        Class v235 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v236 = (void *)objc_opt_self(&OBJC_CLASS___TPPeerPermanentInfo);
        id v237 = [v236 permanentInfoWithPeerID:v233 data:v234 sig:v235 keyFactory:v326];
        uint64_t v319 = v230;
        uint64_t v238 = v230;
        unint64_t v239 = v237;
        unint64_t v324 = v232;
        sub_10000852C(v238, v232);
        uint64_t v320 = (uint64_t (**)(uint64_t, uint64_t, unint64_t))v225;
        sub_10000852C(v225, v227);

        if (v239)
        {
          id v240 = v326;
          unint64_t v318 = v227;
          id v241 = objc_allocWithZone(&OBJC_CLASS___TPPeer);
          unint64_t v328 = 0LL;
          id v242 = v321;
          BOOL v243 = v325;
          id v244 = v239;
          id v245 = [v241 initWithPermanentInfo:v244 stableInfo:v242 dynamicInfo:v243 error:&v328];
          unint64_t v246 = v328;
          if (v245)
          {
            BOOL v247 = v245;
            os_log_t v322 = v192;
            id v248 = (id)v328;
            swift_bridgeObjectRelease(v304);

            uint64_t v249 = *(void *)((char *)v315 + (void)v323);
            swift_retain(v249);
            uint64_t v250 = sub_1000E3618();
            unint64_t v252 = v251;
            swift_release(v249);
            if (v252 >> 60 == 15)
            {
              [v219 setHmacSig:0];

              sub_10000852C((uint64_t)v320, v318);
              sub_10000852C(v319, v324);
            }

            else
            {
              Class v293 = Data._bridgeToObjectiveC()().super.isa;
              id v294 = [v247 calculateHmacWithHmacKey:v293];
              BOOL v325 = v244;
              uint64_t v295 = v242;
              id v296 = v294;

              uint64_t v297 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v296);
              unint64_t v299 = v298;

              Class v300 = Data._bridgeToObjectiveC()().super.isa;
              sub_10000852C(v297, v299);
              [v219 setHmacSig:v300];

              sub_10000852C((uint64_t)v320, v318);
              sub_10000852C(v319, v324);

              sub_10003C1D0(v250, v252);
            }
          }

          else
          {
            id v275 = (id)v328;
            uint64_t v276 = _convertNSErrorToError(_:)(v246);

            swift_willThrow(v277);
            unint64_t v278 = v304;
            if (qword_100250EB8 != -1) {
              swift_once(&qword_100250EB8, sub_1000DD078);
            }
            uint64_t v279 = type metadata accessor for Logger(0LL);
            sub_100006BAC(v279, (uint64_t)qword_1002567D0);
            swift_errorRetain(v276);
            swift_bridgeObjectRetain(v278);
            uint64_t v280 = swift_errorRetain(v276);
            uint64_t v281 = (os_log_s *)Logger.logObject.getter(v280);
            os_log_type_t v285 = static os_log_type_t.error.getter(v281, v282, v283, v284);
            if (os_log_type_enabled(v281, v285))
            {
              uint64_t v286 = swift_slowAlloc(22LL, -1LL);
              os_log_t v322 = v281;
              uint64_t v287 = v286;
              uint64_t v321 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
              id v323 = (_BYTE *)swift_slowAlloc(32LL, -1LL);
              unint64_t v328 = (unint64_t)v323;
              *(_DWORD *)uint64_t v287 = 136446466;
              BOOL v325 = (int *)v242;
              swift_bridgeObjectRetain(v278);
              uint64_t v327 = sub_10017C4C4(v303, v278, (uint64_t *)&v328);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v327, &v328, v287 + 4, v287 + 12);
              swift_bridgeObjectRelease_n(v278, 3LL);
              *(_WORD *)(v287 + 12) = 2112;
              swift_errorRetain(v276);
              uint64_t v288 = _swift_stdlib_bridgeErrorToNSError(v276);
              uint64_t v327 = v288;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v327, &v328, v287 + 14, v287 + 22);
              NSString v289 = v321;
              *uint64_t v321 = v288;
              swift_errorRelease();
              swift_errorRelease();
              os_log_t v290 = v322;
              _os_log_impl( (void *)&_mh_execute_header,  v322,  v285,  "failed to construct peer for %{public}s: %@",  (uint8_t *)v287,  0x16u);
              uint64_t v291 = sub_100007578(&qword_100250F90);
              swift_arrayDestroy(v289, 1LL, v291);
              swift_slowDealloc(v289, -1LL, -1LL);
              uint64_t v292 = v323;
              swift_arrayDestroy(v323, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v292, -1LL, -1LL);
              swift_slowDealloc(v287, -1LL, -1LL);

              swift_errorRelease();
              sub_10000852C(v319, v324);
              sub_10000852C((uint64_t)v320, v318);
            }

            else
            {

              sub_10000852C((uint64_t)v320, v318);
              sub_10000852C(v319, v324);

              swift_errorRelease();
              swift_bridgeObjectRelease_n(v278, 2LL);
              swift_errorRelease();
              swift_errorRelease();
            }
          }
        }

        else
        {
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v265 = type metadata accessor for Logger(0LL);
          sub_100006BAC(v265, (uint64_t)qword_1002567D0);
          unint64_t v266 = v304;
          uint64_t v267 = swift_bridgeObjectRetain(v304);
          id v268 = (os_log_s *)Logger.logObject.getter(v267);
          os_log_type_t v272 = static os_log_type_t.error.getter(v268, v269, v270, v271);
          if (os_log_type_enabled(v268, v272))
          {
            os_log_t v322 = v192;
            id v273 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            unint64_t v274 = swift_slowAlloc(32LL, -1LL);
            unint64_t v328 = v274;
            *(_DWORD *)id v273 = 136446210;
            swift_bridgeObjectRetain(v266);
            uint64_t v327 = sub_10017C4C4(v303, v266, (uint64_t *)&v328);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v327, &v328, v273 + 4, v273 + 12);
            swift_bridgeObjectRelease_n(v266, 3LL);
            _os_log_impl( (void *)&_mh_execute_header,  v268,  v272,  "Couldn't parse peer identity: %{public}s",  v273,  0xCu);
            swift_arrayDestroy(v274, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v274, -1LL, -1LL);
            swift_slowDealloc(v273, -1LL, -1LL);

            sub_10000852C(v319, v324);
            sub_10000852C((uint64_t)v320, v227);
          }

          else
          {

            sub_10000852C((uint64_t)v320, v227);
            sub_10000852C(v319, v324);

            swift_bridgeObjectRelease_n(v266, 2LL);
          }
        }

        return;
      }

      sub_10000852C(v225, v227);
    }

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v255 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v255, (uint64_t)qword_1002567D0);
    uint64_t v256 = swift_bridgeObjectRetain(v223);
    Swift::String v257 = (os_log_s *)Logger.logObject.getter(v256);
    unint64_t v261 = v223;
    os_log_type_t v262 = static os_log_type_t.error.getter(v257, v258, v259, v260);
    if (os_log_type_enabled(v257, v262))
    {
      id v263 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v264 = swift_slowAlloc(32LL, -1LL);
      unint64_t v328 = v264;
      *(_DWORD *)id v263 = 136446210;
      swift_bridgeObjectRetain(v261);
      uint64_t v327 = sub_10017C4C4(v303, v261, (uint64_t *)&v328);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v327, &v328, v263 + 4, v263 + 12);
      swift_bridgeObjectRelease_n(v261, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v257,  v262,  "addOrUpdate peer %{public}s has no/incomplete permanent info/sig",  v263,  0xCu);
      swift_arrayDestroy(v264, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v264, -1LL, -1LL);
      swift_slowDealloc(v263, -1LL, -1LL);

      return;
    }

    swift_bridgeObjectRelease_n(v261, 2LL);
LABEL_87:

    return;
  }

  sub_10000FC68(v324 + v325[7], (uint64_t)v321, &qword_100256F80);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48))(v52, 1LL, v39) == 1)
  {
    *(_OWORD *)uint64_t v43 = xmmword_1001DE6F0;
    *((_OWORD *)v43 + 1) = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v52, &qword_100256F80);
  }

  else
  {
    sub_100041608((uint64_t)v52, (uint64_t)v43, type metadata accessor for SignedPeerPermanentInfo);
  }

  id v301 = v43;
  id v64 = *(uint64_t **)v43;
  unint64_t v65 = *((void *)v43 + 1);
  uint64_t v66 = *((void *)v43 + 2);
  unint64_t v67 = *((void *)v43 + 3);
  id v68 = objc_allocWithZone(&OBJC_CLASS___TPECPublicKeyFactory);
  uint64_t v69 = v304;
  swift_bridgeObjectRetain(v304);
  uint64_t v321 = v64;
  sub_1000084E8((uint64_t)v64, v65);
  sub_1000084E8(v66, v67);
  id v70 = [v68 init];
  NSString v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v69);
  Class v72 = Data._bridgeToObjectiveC()().super.isa;
  Class v73 = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v74 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v71 data:v72 sig:v73 keyFactory:v70];

  sub_10000852C(v66, v67);
  sub_10000852C((uint64_t)v321, v65);

  sub_1000415CC((uint64_t)v301, type metadata accessor for SignedPeerPermanentInfo);
  if (v74)
  {
    unint64_t v75 = v324;
    uint64_t v76 = v312;
    sub_10000FC68(v324 + v325[8], v312, &qword_100251F18);
    int v77 = v320[6](v76, 1LL, v318);
    id v310 = v74;
    uint64_t v78 = v313;
    if (v77 == 1)
    {
      _OWORD *v313 = xmmword_1001DE6F0;
      v78[1] = xmmword_1001DE6F0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      sub_100041590(v76, &qword_100251F18);
    }

    else
    {
      sub_100041608(v76, (uint64_t)v313, type metadata accessor for SignedPeerStableInfo);
    }

    uint64_t v99 = *(void *)v78;
    unint64_t v100 = *((void *)v78 + 1);
    uint64_t v101 = *((void *)v78 + 2);
    unint64_t v102 = *((void *)v78 + 3);
    id v103 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    sub_1000084E8(v99, v100);
    sub_1000084E8(v101, v102);
    Class v104 = Data._bridgeToObjectiveC()().super.isa;
    Class v105 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v321 = (uint64_t *)[v103 initWithData:v104 sig:v105];
    sub_10000852C(v101, v102);
    sub_10000852C(v99, v100);

    sub_1000415CC((uint64_t)v78, type metadata accessor for SignedPeerStableInfo);
    uint64_t v106 = v314;
    sub_10000FC68(v75 + v325[9], v314, &qword_100256CA0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v319 + 48))(v106, 1LL, v317) == 1)
    {
      BOOL v107 = v315;
      *int64_t v315 = xmmword_1001DE6F0;
      v107[1] = xmmword_1001DE6F0;
      _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
      sub_100041590(v106, &qword_100256CA0);
    }

    else
    {
      BOOL v107 = v315;
      sub_100041608(v106, (uint64_t)v315, type metadata accessor for SignedPeerDynamicInfo);
    }

    uint64_t v108 = *(void *)v107;
    unint64_t v109 = *((void *)v107 + 1);
    uint64_t v110 = *((void *)v107 + 2);
    unint64_t v111 = *((void *)v107 + 3);
    sub_1000084E8(*(void *)v107, v109);
    sub_1000084E8(v110, v111);
    Class v112 = Data._bridgeToObjectiveC()().super.isa;
    Class v113 = Data._bridgeToObjectiveC()().super.isa;
    id v114 = (uint64_t (**)(uint64_t, uint64_t, unint64_t)) [(id)objc_opt_self(TPPeerDynamicInfo) dynamicInfoWithData:v112 sig:v113];
    sub_10000852C(v110, v111);
    sub_10000852C(v108, v109);

    sub_1000415CC((uint64_t)v107, type metadata accessor for SignedPeerDynamicInfo);
    uint64_t v115 = *(void *)(v75 + 16);
    unint64_t v328 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v116 = *(void *)(v115 + 16);
    if (v116)
    {
      uint64_t v320 = v114;
      char v117 = (int *)objc_opt_self(&OBJC_CLASS___TPVoucher);
      uint64_t v118 = v115 + ((*(unsigned __int8 *)(v316 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v316 + 80));
      unint64_t v324 = *(void *)(v316 + 72);
      BOOL v325 = v117;
      uint64_t v319 = v115;
      swift_bridgeObjectRetain_n(v115, 2LL);
      id v119 = (uint64_t *)v326;
      do
      {
        sub_10004164C(v118, (uint64_t)v119, type metadata accessor for SignedVoucher);
        uint64_t v121 = *v119;
        unint64_t v122 = v119[1];
        uint64_t v123 = v119[2];
        unint64_t v124 = v119[3];
        sub_1000084E8(*v119, v122);
        sub_1000084E8(v123, v124);
        Class v125 = Data._bridgeToObjectiveC()().super.isa;
        Class v126 = Data._bridgeToObjectiveC()().super.isa;
        id v127 = [v325 voucherInfoWithData:v125 sig:v126];
        sub_10000852C(v123, v124);
        sub_10000852C(v121, v122);

        id v119 = (uint64_t *)v326;
        uint64_t v128 = sub_1000415CC((uint64_t)v119, type metadata accessor for SignedVoucher);
        if (v127)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v128);
          unint64_t v130 = *(void *)((v328 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v129 = *(void *)((v328 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v130 >= v129 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1LL);
          }
          uint64_t v120 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v130, v127);
          specialized Array._endMutation()(v120);
        }

        v118 += v324;
        --v116;
      }

      while (v116);
      uint64_t v115 = v319;
      swift_bridgeObjectRelease(v319);
      id v131 = (void *)v328;
      id v132 = v323;
      id v114 = v320;
    }

    else
    {
      swift_bridgeObjectRetain(v115);
      id v131 = _swiftEmptyArrayStorage;
      id v132 = v323;
    }

    swift_bridgeObjectRelease(v115);
    id v133 = [*(id *)&v132[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
    if (v133)
    {
      id v134 = v133;
      uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
      uint64_t v137 = v136;

      uint64_t v138 = v304;
      if (v303 == v135 && v304 == v137)
      {
        char v139 = 1;
        uint64_t v137 = v304;
      }

      else
      {
        char v139 = _stringCompareWithSmolCheck(_:_:expecting:)(v303, v304, v135, v137, 0LL);
      }

      swift_bridgeObjectRelease(v138);
      uint64_t v140 = v137;
    }

    else
    {
      char v139 = 0;
      uint64_t v140 = v304;
    }

    swift_bridgeObjectRelease(v140);
    id v141 = objc_allocWithZone(&OBJC_CLASS___TPPeer);
    unint64_t v328 = 0LL;
    uint64_t v142 = v310;
    id v143 = v321;
    uint64_t v144 = v114;
    id v145 = [v141 initWithPermanentInfo:v142 stableInfo:v143 dynamicInfo:v144 error:&v328];
    unint64_t v146 = v328;
    if (v145)
    {
      unint64_t v147 = v145;
      id v148 = (id)v328;

      sub_10012247C(v147, (uint64_t)v131, v139 & 1);
      swift_bridgeObjectRelease(v131);
    }

    else
    {
      id v149 = (id)v328;
      _convertNSErrorToError(_:)(v146);

      swift_willThrow(v150);
      swift_bridgeObjectRelease(v131);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v69);
    uint64_t v83 = v324;
    uint64_t v84 = v325;
    uint64_t v85 = v311;
    sub_10000FC68(v324 + v325[11], v311, &qword_100251F28);
    uint64_t v86 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    int v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 48LL))(v85, 1LL, v86);
    sub_100041590(v85, &qword_100251F28);
    if (v87 != 1)
    {
      if (v323[OBJC_IVAR____TtC18TrustedPeersHelper9Container_testIgnoreCustodianUpdates] == 1)
      {
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v88, (uint64_t)qword_1002567D0);
        uint64_t v89 = v306;
        uint64_t v90 = sub_10004164C(v83, v306, type metadata accessor for Peer);
        unint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
        os_log_type_t v92 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v91, v92))
        {
          unint64_t v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          unint64_t v94 = swift_slowAlloc(32LL, -1LL);
          unint64_t v328 = v94;
          *(_DWORD *)unint64_t v93 = 136446210;
          uint64_t v95 = v305;
          sub_10004164C(v89, v305, type metadata accessor for Peer);
          uint64_t v96 = String.init<A>(describing:)(v95, v84);
          unint64_t v98 = v97;
          uint64_t v327 = sub_10017C4C4(v96, v97, (uint64_t *)&v328);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v327, &v328, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease(v98);
          sub_1000415CC(v89, type metadata accessor for Peer);
          _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "Ignoring Custodian update due to test request: %{public}s",  v93,  0xCu);
          swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1LL, -1LL);
          swift_slowDealloc(v93, -1LL, -1LL);
        }

        else
        {
          sub_1000415CC(v89, type metadata accessor for Peer);
        }
      }

      else
      {
        sub_10013EBF8(v83);
      }
    }
  }

void sub_100140F24(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  sub_1000084E8(*a1, v5);
  sub_1000084E8(v6, v7);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v9 = Data._bridgeToObjectiveC()().super.isa;
  id v10 = [(id)objc_opt_self(TPVoucher) voucherInfoWithData:isa sig:v9];
  sub_10000852C(v6, v7);
  sub_10000852C(v4, v5);

  if (v10)
  {
    id v11 = [a2 vouchers];
    uint64_t v12 = a2;
    if (!v11
      || (uint64_t v13 = v11,
          uint64_t v33 = 0LL,
          uint64_t v14 = type metadata accessor for VoucherMO(),
          v15 = sub_1000077B8( &qword_100256F88,  (uint64_t (*)(uint64_t))type metadata accessor for VoucherMO,  (uint64_t)&protocol conformance descriptor for NSObject),  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v13, &v33, v14, v15),  v13,  (uint64_t v16 = v33) == 0LL))
    {
      swift_bridgeObjectRelease(0LL);
      uint64_t v16 = &_swiftEmptySetSingleton;
    }

    id v17 = v10;
    sub_100166698((uint64_t)v16, v17);
    char v19 = v18;
    swift_bridgeObjectRelease(v16);

    if ((v19 & 1) == 0)
    {
      uint64_t v20 = type metadata accessor for VoucherMO();
      id v21 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v20)) initWithContext:*(void *)(a3 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc)];
      id v22 = [v17 data];
      uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
      unint64_t v25 = v24;

      Class v26 = Data._bridgeToObjectiveC()().super.isa;
      sub_10000852C(v23, v25);
      [v21 setVoucherInfo:v26];

      id v27 = [v17 sig];
      uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v30 = v29;

      Class v31 = Data._bridgeToObjectiveC()().super.isa;
      sub_10000852C(v28, v30);
      [v21 setVoucherInfoSig:v31];

      [v12 addVouchersObject:v21];
    }
  }

void *sub_1001411C0(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v10 = 0LL;
  id v4 = [v3 policyWithVersion:a1 error:&v10];
  unint64_t v5 = v4;
  if (v10)
  {
    v10;

LABEL_3:
    swift_willThrow(v6);
    return v5;
  }

  if (!v4)
  {
    unint64_t v8 = sub_100043F74();
    uint64_t v6 = swift_allocError(&type metadata for ContainerError, v8, 0LL, 0LL);
    *(void *)uint64_t v9 = a1;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 1;
    goto LABEL_3;
  }

  if (qword_100250BA8 != -1) {
    swift_once(&qword_100250BA8, sub_10000FFC0);
  }
  [(id)qword_100258260 versionNumber];
  return v5;
}

char *sub_1001412E4(objc_class *a1, uint64_t *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v232 = a6;
  uint64_t v222 = a5;
  Class v234 = a1;
  sub_1000B669C((uint64_t)a1, (uint64_t)v242, &qword_100256E00);
  unint64_t v227 = (char *)v242[1];
  Class v228 = (Class)v242[0];
  id v226 = (id)v242[10];
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v224 = *(void *)(v11 - 8);
  uint64_t v225 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v223 = (char *)&v219 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SignedVoucher(0LL);
  unint64_t v239 = *(uint64_t **)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v238 = (uint64_t *)((char *)&v219 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Class v235 = v6;
  unint64_t v231 = (char *)OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v17 = *(id *)&v6[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  id v18 = [a4 includedPeerIDs];
  uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v18,  &type metadata for String,  &protocol witness table for String);

  v20.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  uint64_t v230 = a2;
  NSString v21 = [a2 peerID];
  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v23 = v22;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
  }

  unint64_t v241 = 0LL;
  id v233 = a3;
  unint64_t v24 = (uint64_t *) [v17 policyForPeerIDs:v20.super.isa candidatePeerID:v21 candidateStableInfo:a3 error:&v241];

  id v25 = (id)v241;
  if (v24)
  {
    Class v26 = v24;
    id v27 = v235;
    uint64_t v28 = v7;
  }

  else
  {
    unint64_t v29 = v25;
    _convertNSErrorToError(_:)(v25);

    swift_willThrow(v30);
    swift_errorRelease();
    Class v26 = 0LL;
    uint64_t v28 = 0LL;
    id v27 = v235;
  }

  uint64_t v31 = v232;
  sub_1000B669C((uint64_t)v234, (uint64_t)v264, &qword_100256E00);
  if (v265 != 1 && (v267 & 1) == 0)
  {
    uint64_t v229 = v266;
    if (!v31) {
      goto LABEL_40;
    }
    goto LABEL_12;
  }

  uint64_t v32 = *(void **)&v27[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride];
  if (!v32)
  {
    if (v233)
    {
      id v51 = [v233 bestPolicyVersion];
      uint64_t v52 = (uint64_t *)[v51 versionNumber];

      if (v26)
      {
LABEL_22:
        id v53 = [v26 version];
        uint64_t v54 = (uint64_t *)[v53 versionNumber];

        goto LABEL_32;
      }
    }

    else
    {
      if (qword_100250BA8 != -1) {
        swift_once(&qword_100250BA8, sub_10000FFC0);
      }
      uint64_t v52 = (uint64_t *)[(id)qword_100258260 versionNumber];
      if (v26) {
        goto LABEL_22;
      }
    }

    if (qword_100250BA8 != -1) {
      swift_once(&qword_100250BA8, sub_10000FFC0);
    }
    uint64_t v54 = (uint64_t *)[(id)qword_100258260 versionNumber];
LABEL_32:
    if (qword_100250BA8 != -1) {
      swift_once(&qword_100250BA8, sub_10000FFC0);
    }
    os_log_t v61 = (uint64_t *)[(id)qword_100258260 versionNumber];
    if (v54 <= v52) {
      uint64_t v62 = v52;
    }
    else {
      uint64_t v62 = v54;
    }
    if (v61 > v62) {
      uint64_t v62 = v61;
    }
    uint64_t v229 = v62;
    id v27 = v235;
    if (!v31) {
      goto LABEL_40;
    }
    goto LABEL_12;
  }

  uint64_t v229 = (uint64_t *)[v32 versionNumber];
  if (!v31)
  {
LABEL_40:
    uint64_t v57 = *(void **)&v231[(void)v27];
    id v58 = v233;
    goto LABEL_41;
  }

LABEL_83:
          swift_bridgeObjectRelease(v82);
          swift_bridgeObjectRelease(v86);
LABEL_84:
          sub_1000B669C((uint64_t)v234, (uint64_t)v253, &qword_100256E00);
          if (v253[1] == 1LL)
          {
            if (!v58)
            {
              swift_bridgeObjectRelease_n(0LL, 2LL);
              goto LABEL_97;
            }

            uint64_t v82 = 0LL;
            uint64_t v87 = 0LL;
          }

          else
          {
            uint64_t v87 = v253[4];
            uint64_t v82 = v254;
            swift_bridgeObjectRetain(v254);
            if (!v58)
            {
              unint64_t v91 = 0LL;
              char v115 = v82 == 0LL;
              goto LABEL_126;
            }
          }

          id v27 = (char *)[v58 osVersion];
          uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          unint64_t v91 = v90;

          if (!v82)
          {
LABEL_93:
            swift_bridgeObjectRelease(v91);
            swift_bridgeObjectRelease(v82);
            goto LABEL_128;
          }

          if (v91)
          {
            if (v87 == v89 && v82 == v91) {
              goto LABEL_93;
            }
            char v115 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v82, v89, v91, 0LL);
LABEL_126:
            swift_bridgeObjectRelease(v82);
            swift_bridgeObjectRelease(v91);
            if (!v58 || (v115 & 1) == 0) {
              goto LABEL_97;
            }
LABEL_128:
            id v116 = [v58 bestPolicyVersion];
            char v117 = (uint64_t *)[v116 versionNumber];

            if (v229 != v117) {
              goto LABEL_97;
            }
            sub_1000B669C((uint64_t)v234, (uint64_t)v251, &qword_100256E00);
            if (v251[1] == 1LL)
            {
              uint64_t v118 = 0LL;
            }

            else
            {
              uint64_t v118 = v252;
              swift_bridgeObjectRetain(v252);
            }

            id v119 = [v58 policySecrets];
            if (v119)
            {
              uint64_t v120 = v119;
              uint64_t v121 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v119,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);

              if (v118)
              {
                if (v121)
                {
                  swift_bridgeObjectRetain_n(v118, 2LL);
                  swift_bridgeObjectRetain(v121);
                  char v122 = sub_100157724(v118, v121);
                  swift_bridgeObjectRelease_n(v118, 3LL);
                  swift_bridgeObjectRelease_n(v121, 2LL);
                  if ((v122 & 1) == 0) {
                    goto LABEL_97;
                  }
LABEL_199:
                  if (v237)
                  {
                    id v183 = [v237 signingKeyData];
                    uint64_t v184 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v183);
                    unint64_t v186 = v185;
                  }

                  else
                  {
                    uint64_t v184 = 0LL;
                    unint64_t v186 = 0xF000000000000000LL;
                  }

                  uint64_t v187 = (char *)[v58 recoverySigningPublicKey];
                  if (v187)
                  {
                    id v27 = v187;
                    uint64_t v188 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v187);
                    unint64_t v190 = v189;

                    if (v186 >> 60 == 15)
                    {
                      id v191 = v233;
                      if (v190 >> 60 != 15) {
                        goto LABEL_219;
                      }
                    }

                    else
                    {
                      id v191 = v233;
                      if (v190 >> 60 == 15) {
                        goto LABEL_219;
                      }
                      sub_10004C798(v188, v190);
                      sub_10004C798(v184, v186);
                      sub_100041318(v184, v186);
                      id v27 = v192;
                      sub_10003C1D0(v188, v190);
                      sub_10003C1D0(v184, v186);
                      sub_10003C1D0(v188, v190);
                      sub_10003C1D0(v184, v186);
                    }
                  }

                  else
                  {
                    id v191 = v233;
                    if (v186 >> 60 != 15) {
                      goto LABEL_218;
                    }
                  }

                  if (v237)
                  {
                    id v193 = [v237 encryptionKeyData];
                    uint64_t v184 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v193);
                    unint64_t v186 = v194;
                  }

                  else
                  {
                    uint64_t v184 = 0LL;
                    unint64_t v186 = 0xF000000000000000LL;
                  }

                  uint64_t v195 = (char *)[v191 recoveryEncryptionPublicKey];
                  if (v195)
                  {
                    id v27 = v195;
                    uint64_t v188 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v195);
                    unint64_t v190 = v196;

                    if (v186 >> 60 == 15)
                    {
                      if (v190 >> 60 == 15) {
                        goto LABEL_222;
                      }
                    }

                    else if (v190 >> 60 != 15)
                    {
                      sub_10004C798(v188, v190);
                      sub_10004C798(v184, v186);
                      sub_100041318(v184, v186);
                      id v27 = v197;
                      sub_10003C1D0(v188, v190);
                      sub_10003C1D0(v184, v186);
                      sub_10003C1D0(v188, v190);
                      sub_10003C1D0(v184, v186);
LABEL_222:
                      unsigned int v198 = [v191 syncUserControllableViews];
                      int v199 = v232;
                      if ((_DWORD)v226 == v198) {
                        int v199 = 1;
                      }
                      if (v199 == 1)
                      {
                        uint64_t v200 = v239;
                        uint64_t v230 = v239;
                        id v201 = [v191 walrusSetting];
                        uint64_t v202 = v201;
                        if (v200)
                        {
                          if (!v201)
                          {

                            goto LABEL_97;
                          }

                          sub_100007620(0LL, &qword_100256CA8, &OBJC_CLASS___TPPBPeerStableInfoSetting_ptr);
                          Class v203 = v230;
                          id v27 = v202;
                          char v204 = static NSObject.== infix(_:_:)(v203);

                          if ((v204 & 1) == 0) {
                            goto LABEL_97;
                          }
                        }

                        else
                        {
                        }

                        id v205 = v238;
                        uint64_t v179 = v238;
                        id v206 = [v191 webAccess];
                        unint64_t v207 = v206;
                        if (v205)
                        {
                          if (!v206)
                          {

                            goto LABEL_97;
                          }

                          sub_100007620(0LL, &qword_100256CA8, &OBJC_CLASS___TPPBPeerStableInfoSetting_ptr);
                          id v27 = v179;
                          id v208 = v207;
                          char v209 = static NSObject.== infix(_:_:)(v27);

                          id v191 = v233;
                          if ((v209 & 1) == 0) {
                            goto LABEL_97;
                          }
                        }

                        else
                        {
                        }

                        uint64_t v210 = v236;
                        unint64_t v180 = (uint64_t *)(id)v236;
                        id v211 = (char *)[v191 secureElementIdentity];
                        id v27 = v211;
                        if (v210)
                        {
                          if (v211)
                          {
                            sub_100007620( 0LL,  (unint64_t *)&unk_100256F70,  &OBJC_CLASS___TPPBSecureElementIdentity_ptr);
                            unint64_t v180 = v180;
                            char v212 = static NSObject.== infix(_:_:)(v180);

                            if ((v212 & 1) != 0)
                            {
                              id v27 = 0LL;
LABEL_243:
                              id v178 = v237;
                              Class v177 = v230;
                              goto LABEL_195;
                            }
                          }

                          else
                          {
                          }
                        }

                        else
                        {
                          if (!v211) {
                            goto LABEL_243;
                          }
                        }
                      }

LABEL_97:
                      id v93 = v235;
                      unint64_t v94 = sub_1001411C0((uint64_t)v229);
                      if (v28)
                      {

                        unint64_t v24 = (uint64_t *)v236;
                        goto LABEL_99;
                      }

                      uint64_t v96 = v94;
                      unint64_t v97 = (uint64_t *)[v94 version];

                      uint64_t v230 = v97;
                      uint64_t v229 = (uint64_t *)[v97 versionNumber];
                      if (qword_100250BB0 != -1) {
                        swift_once(&qword_100250BB0, sub_10000FFE0);
                      }
                      unint64_t v98 = (uint64_t *)[(id)qword_100258268 versionNumber];
                      uint64_t v100 = v224;
                      uint64_t v99 = v225;
                      uint64_t v101 = v223;
                      uint64_t v220 = 0LL;
                      uint64_t v221 = v24;
                      if ((v232 & 1) == 0)
                      {
                        if (qword_100250EB8 != -1) {
                          swift_once(&qword_100250EB8, sub_1000DD078);
                        }
                        uint64_t v102 = sub_100006BAC(v99, (uint64_t)qword_1002567D0);
                        uint64_t v103 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 16))(v101, v102, v99);
                        Class v104 = (os_log_s *)Logger.logObject.getter(v103);
                        os_log_type_t v105 = static os_log_type_t.info.getter();
                        if (os_log_type_enabled(v104, v105))
                        {
                          uint64_t v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                          Class v228 = (Class)swift_slowAlloc(32LL, -1LL);
                          unint64_t v241 = (unint64_t)v228;
                          *(_DWORD *)uint64_t v106 = 136446210;
                          switch((int)v226)
                          {
                            case 0:
                              BOOL v107 = @"UNKNOWN";
                              goto LABEL_143;
                            case 1:
                              BOOL v107 = @"DISABLED";
                              goto LABEL_143;
                            case 2:
                              BOOL v107 = @"ENABLED";
                              goto LABEL_143;
                            case 3:
                              BOOL v107 = @"FOLLOWING";
LABEL_143:
                              uint64_t v123 = v107;
                              break;
                            default:
                              BOOL v107 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v226));
                              break;
                          }

                          unint64_t v124 = v107;
                          if (!v124)
                          {
                            __break(1u);
                            JUMPOUT(0x100142BACLL);
                          }

                          Class v125 = v124;
                          uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
                          unint64_t v128 = v127;

                          uint64_t v240 = sub_10017C4C4(v126, v128, (uint64_t *)&v241);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, &v241, v106 + 4, v106 + 12);
                          swift_bridgeObjectRelease(v128);
                          _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "Intending to set user-controllable views to %{public}s",  v106,  0xCu);
                          Class v129 = v228;
                          swift_arrayDestroy(v228, 1LL, (char *)&type metadata for Any + 8);
                          swift_slowDealloc(v129, -1LL, -1LL);
                          swift_slowDealloc(v106, -1LL, -1LL);

                          (*(void (**)(char *, uint64_t))(v224 + 8))(v223, v225);
                          id v93 = v235;
                        }

                        else
                        {

                          (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
                        }
                      }

                      Class v235 = *(char **)&v231[(void)v93];
                      Class v130 = v234;
                      if (v229 >= v98)
                      {
                        uint64_t v229 = (uint64_t *)(id)qword_100258268;
                        unint64_t v231 = (char *)v230;
                      }

                      else
                      {
                        unint64_t v231 = 0LL;
                        uint64_t v229 = v230;
                      }

                      id v131 = v233;
                      sub_1000B669C((uint64_t)v130, (uint64_t)v249, &qword_100256E00);
                      if (v249[1] == 1LL || (uint64_t v132 = v250) == 0)
                      {
                        uint64_t v135 = v235;
                        uint64_t v136 = v230;
                        if (!v131)
                        {
                          swift_bridgeObjectRelease(0LL);
                          Class v228 = 0LL;
                          if ((_DWORD)v232) {
                            int v139 = 0;
                          }
                          else {
                            int v139 = (int)v226;
                          }
                          LODWORD(v232) = v139;
LABEL_168:
                          sub_1000B669C((uint64_t)v130, (uint64_t)&v247, &qword_100256E00);
                          unint64_t v141 = v248;
                          if (v248 >= 2)
                          {
                            swift_bridgeObjectRetain(v248);
                          }

                          else if (v131 {
                                 && (id v142 = [v131 deviceName]) != 0)
                          }
                          {
                            id v143 = v142;
                            static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
                            unint64_t v141 = v144;
                            swift_bridgeObjectRelease(0LL);
                          }

                          else
                          {
                            swift_bridgeObjectRelease(0LL);
                            unint64_t v141 = 0xE000000000000000LL;
                          }

                          unint64_t v227 = (char *)String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease(v141);
                          sub_1000B669C((uint64_t)v130, (uint64_t)v245, &qword_100256E00);
                          if (v245[1] == 1LL || (unint64_t v145 = v246) == 0)
                          {
                            if (v131
                              && (id v146 = [v131 serialNumber]) != 0)
                            {
                              unint64_t v147 = v146;
                              static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
                              unint64_t v145 = v148;
                              swift_bridgeObjectRelease(0LL);
                            }

                            else
                            {
                              swift_bridgeObjectRelease(0LL);
                              unint64_t v145 = 0xE000000000000000LL;
                            }
                          }

                          else
                          {
                            swift_bridgeObjectRetain(v246);
                          }

                          NSString v149 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease(v145);
                          sub_1000B669C((uint64_t)v130, (uint64_t)v243, &qword_100256E00);
                          if (v243[1] == 1LL || (unint64_t v150 = v244) == 0)
                          {
                            if (v131)
                            {
                              id v151 = [v131 osVersion];
                              static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
                              unint64_t v150 = v152;
                              swift_bridgeObjectRelease(0LL);
                            }

                            else
                            {
                              swift_bridgeObjectRelease(0LL);
                              unint64_t v150 = 0xE000000000000000LL;
                            }
                          }

                          else
                          {
                            swift_bridgeObjectRetain(v244);
                          }

                          NSString v153 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease(v150);
                          id v154 = v237;
                          if (v237)
                          {
                            id v155 = [v237 signingKeyData];
                            uint64_t v156 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v155);
                            unint64_t v158 = v157;

                            v159.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
                            sub_10000852C(v156, v158);
                            id v160 = [v154 encryptionKeyData];
                            uint64_t v161 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v160);
                            unint64_t v163 = v162;

                            v164.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
                            id v131 = v233;
                            sub_10000852C(v161, v163);
                          }

                          else
                          {
                            v164.super.Class isa = 0LL;
                            v159.super.Class isa = 0LL;
                          }

                          uint64_t v165 = v222;
                          NSString v166 = v239;
                          if (v131)
                          {
                            id v167 = v239;
                            unsigned __int8 v168 = [v131 isInheritedAccount];
                            NSString v166 = v167;
                          }

                          else
                          {
                            unsigned __int8 v168 = 0;
                          }

                          unint64_t v241 = 0LL;
                          LOBYTE(v218) = v168;
                          Class v217 = v164.super.isa;
                          Class v234 = v164.super.isa;
                          Class v169 = v159.super.isa;
                          uint64_t v215 = v165;
                          Class v216 = v159.super.isa;
                          id v226 = v153;
                          NSString v213 = v149;
                          NSString v214 = v153;
                          char v170 = v227;
                          Class v171 = v235;
                          Class v172 = v228;
                          uint64_t v173 = v229;
                          unint64_t v174 = v149;
                          unint64_t v175 = v231;
                          unint64_t v239 = v166;
                          id v27 = (char *) [v235 createStableInfoWithFrozenPolicyVersion:v229 flexiblePolicyVersion:v231 policySecrets:v228  syncUserControllableViews:v232 secureElementIdentity:v236 walrusSetting:v166 webAccess:v238 devi ceName:v227 serialNumber:v213 osVersion:v214 signingKeyPair:v215 recoverySigningPubKey:v216 recoveryE ncryptionPubKey:v217 isInheritedAccount:v218 error:&v241];

                          id v176 = (id)v241;
                          if (!v27)
                          {
                            unint64_t v181 = v176;
                            _convertNSErrorToError(_:)(v176);

                            swift_willThrow(v182);
                            unint64_t v24 = v238;
                            goto LABEL_99;
                          }

                          id v178 = (id)v236;
                          Class v177 = (uint64_t *)v237;
                          uint64_t v179 = (char *)v221;
                          unint64_t v180 = v238;
                          unint64_t v24 = v239;
LABEL_195:

                          return v27;
                        }

                        id v137 = [v131 policySecrets];
                        uint64_t v138 = v137;
                        if (!v137)
                        {
                          Class v228 = 0LL;
                          goto LABEL_161;
                        }

                        uint64_t v132 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v137,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
                        swift_bridgeObjectRelease(0LL);
                      }

                      else
                      {
                        id v133 = v235;
                        id v134 = v230;
                        swift_bridgeObjectRetain(v132);
                      }

                      uint64_t v138 = (void *)sub_1001773F0(v132);
                      swift_bridgeObjectRelease(v132);
                      Class v228 = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_161:
                      swift_bridgeObjectRelease(v138);
                      if ((_DWORD)v232) {
                        int v140 = 0;
                      }
                      else {
                        int v140 = (int)v226;
                      }
                      else {
                        LODWORD(v232) = [v131 syncUserControllableViews];
                      }
                      goto LABEL_168;
                    }

LABEL_219:
                    sub_10003C1D0(v184, v186);
                    sub_10003C1D0(v188, v190);
                    goto LABEL_97;
                  }

                  if (v186 >> 60 == 15) {
                    goto LABEL_222;
                  }
LABEL_218:
                  uint64_t v188 = 0LL;
                  unint64_t v190 = 0xF000000000000000LL;
                  goto LABEL_219;
                }

                goto LABEL_138;
              }
            }

            else
            {
              if (v118)
              {
LABEL_138:
                uint64_t v92 = v118;
                goto LABEL_96;
              }

              uint64_t v121 = 0LL;
            }

            swift_bridgeObjectRelease(v121);
            goto LABEL_199;
          }

          goto LABEL_94;
        }

LABEL_79:
        uint64_t v84 = 0LL;
        uint64_t v86 = 0LL;
        if (!v82) {
          goto LABEL_83;
        }
        goto LABEL_80;
      }

LABEL_70:
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v80);
      goto LABEL_71;
    }

LABEL_66:
    uint64_t v78 = 0LL;
    uint64_t v80 = 0LL;
    id v237 = v63;
    if (!v27) {
      goto LABEL_70;
    }
    goto LABEL_67;
  }

  (id)v241;

  swift_willThrow(v64);
LABEL_99:

  return v27;
}

void sub_100142BBC(uint64_t a1@<X0>, _TtC18TrustedPeersHelper6Client *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for Bottle(0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "bottles"));
  if (!v13
    || (uint64_t v14 = v13,
        uint64_t v57 = 0LL,
        uint64_t v15 = type metadata accessor for BottleMO(),
        uint64_t v16 = sub_1000077B8( &qword_100251690,  (uint64_t (*)(uint64_t))type metadata accessor for BottleMO,  (uint64_t)&protocol conformance descriptor for NSObject),  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v14, &v57, v15, v16),  v14,  (v17 = v57) == 0LL))
  {
    uint64_t v57 = 0LL;
    unint64_t v34 = sub_100043F74();
    uint64_t v31 = swift_allocError(&type metadata for ContainerError, v34, 0LL, 0LL);
    __int128 v33 = xmmword_1001E6960;
    goto LABEL_7;
  }

  swift_bridgeObjectRetain(a2);
  uint64_t v18 = (uint64_t)v17;
  uint64_t v19 = v5;
  Swift::Int v20 = sub_10016C9FC(v18, a1, a2);
  swift_bridgeObjectRelease(a2, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v57 = (_TtC18TrustedPeersHelper6Client *)v20;
  if ((v20 & 0xC000000000000001LL) != 0)
  {
    uint64_t v28 = swift_retain(v20);
    uint64_t v29 = __CocoaSet.count.getter(v28);
    swift_release(v20);
    if (v29 >= 2)
    {
LABEL_5:
      unint64_t v30 = sub_100043F74();
      uint64_t v31 = swift_allocError(&type metadata for ContainerError, v30, 0LL, 0LL);
      __int128 v33 = xmmword_1001E6950;
LABEL_7:
      *(_OWORD *)uint64_t v32 = v33;
      *(_BYTE *)(v32 + 16) = 13;
      swift_willThrow(v31);
LABEL_8:
      swift_bridgeObjectRelease(v57, v35, v36, v37, v38, v39, v40, v41);
      return;
    }
  }

  else
  {
    uint64_t v29 = *(void *)(v20 + 16);
    if (v29 >= 2) {
      goto LABEL_5;
    }
  }

  if (!v29)
  {
    unint64_t v46 = sub_100043F74();
    uint64_t v31 = swift_allocError(&type metadata for ContainerError, v46, 0LL, 0LL);
    __int128 v33 = xmmword_1001E68D0;
    goto LABEL_7;
  }

  uint64_t v55 = a3;
  uint64_t v56 = v19;
  if ((v20 & 0xC000000000000001LL) != 0)
  {
    if (v20 >= 0) {
      v20 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (__CocoaSet.count.getter(v20))
    {
      uint64_t v42 = __CocoaSet.startIndex.getter(v20);
      uint64_t v44 = v43;
      char v45 = 1;
      goto LABEL_19;
    }

    __break(1u);
  }

  else if (*(void *)(v20 + 16))
  {
    uint64_t v42 = sub_1001AC2BC(v20);
    uint64_t v44 = v47;
    char v45 = v48 & 1;
LABEL_19:
    sub_100156D58(v42, v44, v45);
    unsigned __int8 v50 = v49;
    uint64_t v51 = sub_100171978(v42, v44, v45);
    __chkstk_darwin(v51, v52);
    *(&v55 - 4) = a1;
    *(&v55 - 3) = (uint64_t)a2;
    *(&v55 - 2) = (uint64_t)v50;
    uint64_t v53 = sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
    uint64_t v54 = v56;
    static Message.with(_:)(sub_1001733C8, &v55 - 6, v9, v53);

    if (!v54) {
      sub_100041608((uint64_t)v12, v55, type metadata accessor for Bottle);
    }
    goto LABEL_8;
  }

  __break(1u);
}

void sub_100142ED8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 72);
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  if (!a4) {
    goto LABEL_8;
  }
  id v14 = [a4 contents];
  if (!v14) {
    goto LABEL_8;
  }
  uint64_t v15 = v14;
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v18 = v17;

  sub_10000852C(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v18;
  id v19 = [a4 escrowedSigningSPKI];
  if (!v19) {
    goto LABEL_8;
  }
  Swift::Int v20 = v19;
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v23 = v22;

  sub_10000852C(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v23;
  id v24 = [a4 signatureUsingEscrowKey];
  if (!v24) {
    goto LABEL_8;
  }
  id v25 = v24;
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v28 = v27;

  sub_10000852C(*(void *)(a1 + 32), *(void *)(a1 + 40));
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v28;
  id v29 = [a4 signatureUsingPeerKey];
  if (!v29) {
    goto LABEL_8;
  }
  unint64_t v30 = v29;
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v33 = v32;

  sub_10000852C(*(void *)(a1 + 48), *(void *)(a1 + 56));
  *(void *)(a1 + 48) = v31;
  *(void *)(a1 + 56) = v33;
  id v34 = [a4 bottleID];
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v38 = v37;

    swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 88), v39, v40, v41, v42, v43, v44, v45);
    *(void *)(a1 + 80) = v36;
    *(void *)(a1 + 88) = v38;
  }

  else
  {
LABEL_8:
    unint64_t v46 = sub_100043F74();
    uint64_t v47 = swift_allocError(&type metadata for ContainerError, v46, 0LL, 0LL);
    *(_OWORD *)uint64_t v48 = xmmword_1001E6960;
    *(_BYTE *)(v48 + 16) = 13;
    swift_willThrow(v47);
  }

uint64_t sub_100143098( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  return sub_100143568( a1,  a2,  a3,  a4,  a5,  "isRecoveryKeySet complete %{public}s",  0xD000000000000018LL,  0x80000001001F9570LL);
}

void sub_1001430BC(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3, char *a4)
{
  if (a1)
  {
    a2(0LL, a1);
  }

  else
  {
    SEL v7 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v8 = swift_allocObject(&unk_100237D58, 40LL, 7LL);
    *(void *)(v8 + 16) = a4;
    *(void *)(v8 + 24) = a2;
    *(void *)(v8 + 32) = a3;
    int64_t v9 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237D80, 32LL, 7LL);
    *(void *)v9->endpoint = sub_100171188;
    *(void *)v9->containerMap = v8;
    v34[4] = sub_100176BD4;
    uint64_t v35 = v9;
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 1107296256LL;
    v34[2] = sub_1000DC9F8;
    v34[3] = &unk_100237D98;
    id v10 = _Block_copy(v34);
    id v11 = v35;
    BOOL v12 = a4;
    swift_retain(a3);
    swift_retain(v9);
    swift_release(v11, v13, v14, v15, v16, v17, v18, v19);
    [v7 performBlockAndWait:v10];
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 108LL, 7437LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v8, v20, v21, v22, v23, v24, v25, v26);
    swift_release(v9, v27, v28, v29, v30, v31, v32, v33);
  }

void sub_100143224( uint64_t a1, void (*a2)(void, void), int16x8_t a3, uint64_t a4, SEL *a5, const char *a6, char *a7)
{
  id v10 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v36 = 0LL;
  id v11 = objc_msgSend(v10, *a5, &v36);
  id v12 = v36;
  if (v36)
  {
    id v13 = v36;
    swift_willThrow(v13);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v14, (uint64_t)qword_1002567D0);
    id v15 = v13;
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v20 = static os_log_type_t.error.getter(v16, v17, v18, v19);
    if (os_log_type_enabled(v16, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v22 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v21 = 138543362;
      uint64_t v35 = a2;
      id v23 = v15;
      format = a7;
      id v24 = (void *)_swift_stdlib_bridgeErrorToNSError(v23);
      id v36 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 4, v21 + 12);
      *id v22 = v24;

      a2 = v35;
      _os_log_impl((void *)&_mh_execute_header, v16, v20, format, v21, 0xCu);
      uint64_t v25 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v22, 1LL, v25);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      id v16 = (os_log_s *)v15;
    }

    id v32 = v15;
    a2(0LL, v12);
  }

  else
  {
    id v26 = v11;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_100006BAC(v27, (uint64_t)qword_1002567D0);
    id v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v31 = vmovn_s16(a3).u32[0];
      LODWORD(v36) = (_DWORD)v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v31 + 4, v31 + 8);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, a6, v31, 8u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    a2(v26, 0LL);
  }

uint64_t sub_100143544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  return sub_100143568( a1,  a2,  a3,  a4,  a5,  "removeRecoveryKey complete: %{public}s",  0xD000000000000019LL,  0x80000001001F9550LL);
}

uint64_t sub_100143568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5, const char *a6, uint64_t a7, unint64_t a8)
{
  id v10 = a4;
  char v12 = a1;
  if (a2) {
    os_log_type_t v13 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v13 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v14 = v13;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v15, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v16 = swift_errorRetain(a2);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v14))
  {
    unint64_t v40 = a8;
    int64_t v41 = v10;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    os_log_type_t v20 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a2)
    {
      uint64_t v44 = 0x203A726F727265LL;
      unint64_t v45 = 0xE700000000000000LL;
      uint64_t v43 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v21 = sub_100007578(&qword_100251D70);
      v22._countAndFlagsBits = String.init<A>(describing:)(&v43, v21);
      object = (_TtC18TrustedPeersHelper6Client *)v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(object, v24, v25, v26, v27, v28, v29, v30);
      swift_errorRelease();
      uint64_t v31 = v44;
      os_log_type_t v20 = (_TtC18TrustedPeersHelper6Client *)v45;
    }

    else
    {
      uint64_t v31 = 0x73736563637573LL;
    }

    uint64_t v44 = sub_10017C4C4(v31, (unint64_t)v20, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v20, v32, v33, v34, v35, v36, v37, v38);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v14, a6, v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    id v10 = v41;
    a8 = v40;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(a7, a8);
  return v10(v12 & 1, a2);
}

void sub_1001437D4(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3, char *a4)
{
  if (a1)
  {
    a2(0LL, a1);
  }

  else
  {
    SEL v7 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v8 = swift_allocObject(&unk_100237BC8, 40LL, 7LL);
    *(void *)(v8 + 16) = a4;
    *(void *)(v8 + 24) = a2;
    *(void *)(v8 + 32) = a3;
    int64_t v9 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237BF0, 32LL, 7LL);
    *(void *)v9->endpoint = sub_100170F94;
    *(void *)v9->containerMap = v8;
    v34[4] = sub_100176BD4;
    id v35 = v9;
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 1107296256LL;
    v34[2] = sub_1000DC9F8;
    v34[3] = &unk_100237C08;
    id v10 = _Block_copy(v34);
    id v11 = v35;
    char v12 = a4;
    swift_retain(a3);
    swift_retain(v9);
    swift_release(v11, v13, v14, v15, v16, v17, v18, v19);
    [v7 performBlockAndWait:v10];
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 108LL, 7473LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v8, v20, v21, v22, v23, v24, v25, v26);
    swift_release(v9, v27, v28, v29, v30, v31, v32, v33);
  }

void sub_10014393C(char *a1, void (*a2)(uint64_t, uint64_t), _TtC18TrustedPeersHelper6Client *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v7 = [*(id *)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO] egoPeerID];
  if (!v7)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v142 = type metadata accessor for Logger(0LL);
    uint64_t v143 = sub_100006BAC(v142, (uint64_t)qword_1002567D0);
    unint64_t v144 = (os_log_s *)Logger.logObject.getter(v143);
    os_log_type_t v145 = static os_log_type_t.info.getter(v144);
    if (os_log_type_enabled(v144, v145))
    {
      id v146 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v146 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v144,  v145,  "no prepared identity, cannot remove recovery key",  v146,  2u);
      swift_slowDealloc(v146, -1LL, -1LL);
    }

    unint64_t v147 = sub_100043F74();
    uint64_t v149 = swift_allocError(&type metadata for ContainerError, v147, 0LL, 0LL);
    __int128 v150 = xmmword_1001DE890;
    goto LABEL_24;
  }

  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  id v11 = v10;

  id v12 = [*(id *)&a1[v6] egoPeerStableInfo];
  if (!v12)
  {
    swift_bridgeObjectRelease(v11, v13, v14, v15, v16, v17, v18, v19);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v151 = type metadata accessor for Logger(0LL);
    uint64_t v152 = sub_100006BAC(v151, (uint64_t)qword_1002567D0);
    NSString v153 = (os_log_s *)Logger.logObject.getter(v152);
    os_log_type_t v154 = static os_log_type_t.info.getter(v153);
    if (os_log_type_enabled(v153, v154))
    {
      id v155 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v155 = 0;
      _os_log_impl((void *)&_mh_execute_header, v153, v154, "stableInfo does not exist", v155, 2u);
      swift_slowDealloc(v155, -1LL, -1LL);
    }

    unint64_t v156 = sub_100043F74();
    uint64_t v149 = swift_allocError(&type metadata for ContainerError, v156, 0LL, 0LL);
    __int128 v150 = xmmword_1001E6820;
LABEL_24:
    *(_OWORD *)uint64_t v148 = v150;
    *(_BYTE *)(v148 + 16) = 13;
    a2(0LL, v149);
    swift_errorRelease();
    return;
  }

  SEL v20 = v12;
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v23 = v22;

  id v24 = [*(id *)&a1[v6] egoPeerStableInfoSig];
  if (v24)
  {
    id v32 = v24;
    uint64_t v299 = v9;
    uint64_t v303 = a2;
    uint64_t v304 = a3;
    uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
    unint64_t v35 = v34;

    id v36 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    sub_1000084E8(v21, v23);
    sub_1000084E8(v33, v35);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v38 = Data._bridgeToObjectiveC()().super.isa;
    id v39 = [v36 initWithData:isa sig:v38];
    uint64_t v301 = v33;
    unint64_t v302 = v35;
    sub_10000852C(v33, v35);
    unint64_t v305 = v23;
    sub_10000852C(v21, v23);

    if (v39)
    {
      Class v300 = v39;
      id v47 = [*(id *)&a1[v6] egoPeerPermanentInfo];
      if (v47)
      {
        uint64_t v55 = v47;
        uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
        unint64_t v58 = v57;

        id v59 = [*(id *)&a1[v6] egoPeerPermanentInfoSig];
        uint64_t v298 = v21;
        if (v59)
        {
          Class v67 = v59;
          uint64_t v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
          unint64_t v70 = v69;

          id v71 = [objc_allocWithZone(TPECPublicKeyFactory) init];
          swift_bridgeObjectRetain(v11);
          sub_1000084E8(v56, v58);
          sub_1000084E8(v68, v70);
          NSString v72 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v11, v73, v74, v75, v76, v77, v78, v79);
          Class v80 = Data._bridgeToObjectiveC()().super.isa;
          Class v81 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v297 = v71;
          id v82 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v72 data:v80 sig:v81 keyFactory:v71];
          unint64_t v294 = v70;
          uint64_t v295 = v68;
          uint64_t v83 = v68;
          uint64_t v84 = v82;
          sub_10000852C(v83, v70);
          uint64_t v296 = v56;
          sub_10000852C(v56, v58);

          uint64_t v92 = v303;
          if (v84)
          {
            uint64_t v93 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
            unint64_t v94 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
            v306[0] = 0LL;
            id v95 = [v94 getViewsForPeer:v84 stableInfo:v300 error:v306];
            unint64_t v97 = v305;
            id v96 = v306[0];
            if (v95)
            {
              unint64_t v98 = v95;
              uint64_t v99 = (_TtC18TrustedPeersHelper6Client *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v95,  &type metadata for String,  &protocol witness table for String);
              id v100 = v96;

              uint64_t v101 = *(void **)&a1[v93];
              v306[0] = 0LL;
              unsigned __int8 v102 = [v101 isRecoveryKeyEnrolledWithError:v306];
              uint64_t v110 = v298;
              if (!v306[0])
              {
                if ((v102 & 1) != 0)
                {
                  id v228 = [objc_allocWithZone(TPRecoveryKeyPair) initWithStableInfo:v300];
                  uint64_t v250 = (void *)sub_1000099CC(v228, (uint64_t)v99);

                  swift_bridgeObjectRelease(v99, v251, v252, v253, v254, v255, v256, v257);
                  strcpy((char *)v306, "signing-key ");
                  BYTE5(v306[1]) = 0;
                  HIWORD(v306[1]) = -5120;
                  v258._countAndFlagsBits = v299;
                  v258._object = v11;
                  String.append(_:)(v258);
                  uint64_t v259 = (_TtC18TrustedPeersHelper6Client *)v306[1];
                  id v291 = v306[0];
                  swift_bridgeObjectRetain(v11);
                  swift_retain(v304);
                  unsigned int v260 = a1;
                  id v261 = v300;
                  id v262 = v250;
                  sub_100160F8C((uint64_t)v291, (uint64_t)v259, v303, (uint64_t)v304, v260, v261, v262, v299, (uint64_t)v11);

                  swift_bridgeObjectRelease(v11, v263, v264, v265, v266, v267, v268, v269);
                  sub_10000852C(v298, v305);
                  sub_10000852C(v301, v302);
                  sub_10000852C(v296, v58);
                  sub_10000852C(v295, v294);
                  swift_bridgeObjectRelease(v259, v270, v271, v272, v273, v274, v275, v276);
                  swift_bridgeObjectRelease(v11, v277, v278, v279, v280, v281, v282, v283);

                  swift_release(v304, v284, v285, v286, v287, v288, v289, v290);
                  return;
                }

                swift_bridgeObjectRelease(v99, v103, v104, v105, v106, v107, v108, v109);
                swift_bridgeObjectRelease(v11, v236, v237, v238, v239, v240, v241, v242);
                if (qword_100250EB8 != -1) {
                  swift_once(&qword_100250EB8, sub_1000DD078);
                }
                uint64_t v243 = type metadata accessor for Logger(0LL);
                uint64_t v244 = sub_100006BAC(v243, (uint64_t)qword_1002567D0);
                id v245 = (os_log_s *)Logger.logObject.getter(v244);
                os_log_type_t v246 = static os_log_type_t.info.getter(v245);
                unint64_t v97 = v305;
                if (os_log_type_enabled(v245, v246))
                {
                  unint64_t v247 = v58;
                  unint64_t v248 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                  *(_WORD *)unint64_t v248 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v245,  v246,  "recovery key is not registered, nothing to remove.",  v248,  2u);
                  uint64_t v249 = v248;
                  unint64_t v58 = v247;
                  uint64_t v92 = v303;
                  uint64_t v110 = v298;
                  swift_slowDealloc(v249, -1LL, -1LL);
                }

                v92(1LL, 0LL);
                sub_10000852C(v295, v294);
                sub_10000852C(v296, v58);

                sub_10000852C(v301, v302);
                uint64_t v235 = v110;
                goto LABEL_63;
              }

              unint64_t v292 = v58;
              id v111 = v306[0];
              id v112 = v306[0];
              swift_bridgeObjectRelease(v99, v113, v114, v115, v116, v117, v118, v119);
              swift_bridgeObjectRelease(v11, v120, v121, v122, v123, v124, v125, v126);
              swift_willThrow(v127);
              if (qword_100250EB8 != -1) {
                swift_once(&qword_100250EB8, sub_1000DD078);
              }
              unint64_t v128 = v84;
              uint64_t v129 = type metadata accessor for Logger(0LL);
              sub_100006BAC(v129, (uint64_t)qword_1002567D0);
              id v130 = v112;
              id v131 = (os_log_s *)Logger.logObject.getter(v130);
              os_log_type_t v135 = static os_log_type_t.error.getter(v131, v132, v133, v134);
              unint64_t v97 = v305;
              if (os_log_type_enabled(v131, v135))
              {
                uint64_t v136 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                id v137 = (void *)swift_slowAlloc(8LL, -1LL);
                *(_DWORD *)uint64_t v136 = 138543362;
                id v138 = v130;
                id v139 = v130;
                int v140 = (void *)_swift_stdlib_bridgeErrorToNSError(v139);
                v306[0] = v140;
                unint64_t v97 = v305;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v306, &v306[1], v136 + 4, v136 + 12);
                *id v137 = v140;

                id v130 = v138;
                _os_log_impl( (void *)&_mh_execute_header,  v131,  v135,  "error determining whether Recovery Key is enrolled: %{public}@",  v136,  0xCu);
                uint64_t v141 = sub_100007578(&qword_100250F90);
                swift_arrayDestroy(v137, 1LL, v141);
                swift_slowDealloc(v137, -1LL, -1LL);
                swift_slowDealloc(v136, -1LL, -1LL);
              }

              else
              {

                id v131 = (os_log_s *)v130;
              }

              unint64_t v229 = v302;

              id v230 = v130;
              v303(0LL, (uint64_t)v111);

              sub_10000852C(v295, v294);
              sub_10000852C(v296, v292);

              uint64_t v231 = v301;
            }

            else
            {
              unint64_t v293 = v58;
              id v206 = v306[0];
              swift_bridgeObjectRelease(v11, v207, v208, v209, v210, v211, v212, v213);
              uint64_t v214 = _convertNSErrorToError(_:)(v96);

              swift_willThrow(v215);
              if (qword_100250EB8 != -1) {
                swift_once(&qword_100250EB8, sub_1000DD078);
              }
              Class v216 = v84;
              uint64_t v217 = type metadata accessor for Logger(0LL);
              sub_100006BAC(v217, (uint64_t)qword_1002567D0);
              swift_errorRetain(v214);
              uint64_t v218 = swift_errorRetain(v214);
              uint64_t v219 = (os_log_s *)Logger.logObject.getter(v218);
              os_log_type_t v223 = static os_log_type_t.error.getter(v219, v220, v221, v222);
              if (os_log_type_enabled(v219, v223))
              {
                uint64_t v224 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                uint64_t v225 = (void *)swift_slowAlloc(8LL, -1LL);
                *(_DWORD *)uint64_t v224 = 138412290;
                swift_errorRetain(v214);
                id v226 = (void *)_swift_stdlib_bridgeErrorToNSError(v214);
                v306[0] = v226;
                unint64_t v97 = v305;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v306, &v306[1], v224 + 4, v224 + 12);
                *uint64_t v225 = v226;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v219, v223, "cannot create peerViews: %@)", v224, 0xCu);
                uint64_t v227 = sub_100007578(&qword_100250F90);
                swift_arrayDestroy(v225, 1LL, v227);
                swift_slowDealloc(v225, -1LL, -1LL);
                swift_slowDealloc(v224, -1LL, -1LL);
              }

              else
              {
                swift_errorRelease();
                swift_errorRelease();
              }

              unint64_t v229 = v302;

              unint64_t v232 = sub_100043F74();
              uint64_t v233 = swift_allocError(&type metadata for ContainerError, v232, 0LL, 0LL);
              *(void *)uint64_t v234 = v214;
              *(void *)(v234 + 8) = 0LL;
              *(_BYTE *)(v234 + 16) = 10;
              swift_errorRetain(v214);
              v303(0LL, v233);
              swift_errorRelease();
              swift_errorRelease();

              sub_10000852C(v295, v294);
              sub_10000852C(v296, v293);

              uint64_t v231 = v301;
            }

            sub_10000852C(v231, v229);
            uint64_t v235 = v298;
LABEL_63:
            sub_10000852C(v235, v97);
            return;
          }

          swift_bridgeObjectRelease(v11, v85, v86, v87, v88, v89, v90, v91);
          unint64_t v169 = v305;
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v196 = type metadata accessor for Logger(0LL);
          uint64_t v197 = sub_100006BAC(v196, (uint64_t)qword_1002567D0);
          unsigned int v198 = (os_log_s *)Logger.logObject.getter(v197);
          os_log_type_t v199 = static os_log_type_t.info.getter(v198);
          if (os_log_type_enabled(v198, v199))
          {
            unint64_t v200 = v58;
            id v201 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)id v201 = 0;
            _os_log_impl((void *)&_mh_execute_header, v198, v199, "cannot create TPPeerPermanentInfo", v201, 2u);
            uint64_t v202 = v201;
            unint64_t v58 = v200;
            uint64_t v92 = v303;
            swift_slowDealloc(v202, -1LL, -1LL);
          }

          unint64_t v203 = sub_100043F74();
          uint64_t v204 = swift_allocError(&type metadata for ContainerError, v203, 0LL, 0LL);
          *(_OWORD *)uint64_t v205 = xmmword_1001DEA00;
          *(_BYTE *)(v205 + 16) = 13;
          v92(0LL, v204);
          swift_errorRelease();

          sub_10000852C(v295, v294);
          sub_10000852C(v296, v58);

          sub_10000852C(v301, v302);
          uint64_t v184 = v298;
        }

        else
        {
          uint64_t v185 = v56;
          swift_bridgeObjectRelease(v11, v60, v61, v62, v63, v64, v65, v66);
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v186 = type metadata accessor for Logger(0LL);
          uint64_t v187 = sub_100006BAC(v186, (uint64_t)qword_1002567D0);
          uint64_t v188 = (os_log_s *)Logger.logObject.getter(v187);
          os_log_type_t v189 = static os_log_type_t.info.getter(v188);
          unint64_t v169 = v23;
          if (os_log_type_enabled(v188, v189))
          {
            unint64_t v190 = v58;
            id v191 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)id v191 = 0;
            _os_log_impl((void *)&_mh_execute_header, v188, v189, "permInfoSig does not exist", v191, 2u);
            uint64_t v192 = v191;
            unint64_t v58 = v190;
            swift_slowDealloc(v192, -1LL, -1LL);
          }

          unint64_t v193 = sub_100043F74();
          uint64_t v194 = swift_allocError(&type metadata for ContainerError, v193, 0LL, 0LL);
          *(_OWORD *)uint64_t v195 = xmmword_1001E6820;
          *(_BYTE *)(v195 + 16) = 13;
          v303(0LL, v194);
          swift_errorRelease();
          sub_10000852C(v185, v58);

          sub_10000852C(v301, v35);
          uint64_t v184 = v298;
        }

void sub_100144DEC( void *a1, id a2, void *a3, uint64_t a4, char *a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v68 = *(id *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v17 = swift_allocObject(&unk_100237C40, 88LL, 7LL);
    *(void *)(v17 + 16) = a6;
    *(void *)(v17 + 24) = a5;
    *(void *)(v17 + 32) = a1;
    *(void *)(v17 + 40) = a7;
    *(void *)(v17 + 48) = a2;
    *(void *)(v17 + 56) = a3;
    *(void *)(v17 + 64) = a4;
    *(void *)(v17 + 72) = a8;
    *(void *)(v17 + 80) = a9;
    BOOL v18 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237C68, 32LL, 7LL);
    *(void *)v18->endpoint = sub_100171004;
    *(void *)v18->containerMap = v17;
    aBlock[4] = (uint64_t)sub_100176BD4;
    unint64_t v70 = v18;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100237C80;
    a3 = _Block_copy(aBlock);
    BOOL v19 = v70;
    id v20 = a1;
    swift_errorRetain(a2);
    a2 = v20;
    id v21 = a6;
    unint64_t v22 = a5;
    swift_retain(a4);
    swift_bridgeObjectRetain(a9);
    id v23 = a7;
    swift_retain(v18);
    swift_release(v19, v24, v25, v26, v27, v28, v29, v30);
    [v68 performBlockAndWait:a3];

    _Block_release(a3);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v18, "", 108LL, 7547LL, 45LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v17, v32, v33, v34, v35, v36, v37, v38);
    swift_release(v18, v39, v40, v41, v42, v43, v44, v45);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v46, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v47 = swift_errorRetain(a2);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
  if (os_log_type_enabled(v48, v52))
  {
    BOOL v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v54;
    *(_DWORD *)BOOL v53 = 136446210;
    uint64_t v71 = (uint64_t)a2;
    swift_errorRetain(a2);
    uint64_t v55 = sub_100007578((uint64_t *)&unk_1002516A0);
    uint64_t v56 = String.init<A>(describing:)(&v71, v55);
    unint64_t v57 = a3;
    id v59 = (_TtC18TrustedPeersHelper6Client *)v58;
    uint64_t v71 = sub_10017C4C4(v56, v58, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v53 + 4, v53 + 12);
    NSArray v60 = v59;
    a3 = v57;
    swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v48, v52, "handle: no signing key pair: %{public}s", v53, 0xCu);
    swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  ((void (*)(void, id))a3)(0LL, a2);
}

uint64_t sub_100145140( void *a1, char *a2, void *a3, void *a4, uint64_t a5, void (*a6)(void, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v203 = a4;
  uint64_t v204 = a8;
  id v206 = a6;
  uint64_t v207 = a7;
  id v205 = a3;
  uint64_t v200 = a5;
  uint64_t v201 = a9;
  uint64_t v11 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  __chkstk_darwin(v11, v12);
  id v14 = (char *)&v183 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  __chkstk_darwin(v15, v16);
  BOOL v18 = (char *)&v183 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for SignedPeerStableInfo(0LL);
  __chkstk_darwin(v19, v20);
  unint64_t v22 = (char *)&v183 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v23 = [a1 bestPolicyVersion];
  id v202 = sub_1001411C0((uint64_t)[v23 versionNumber]);
  unint64_t v190 = (uint64_t *)v22;
  uint64_t v187 = v14;
  uint64_t v185 = v15;
  uint64_t v186 = v11;
  uint64_t v188 = a2;
  SEL v24 = (char *)[a1 clock];
  id v25 = v24 + 1;
  if (v24 == (char *)-1LL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v184 = (uint64_t *)v18;
    if (qword_100250BB0 == -1) {
      goto LABEL_3;
    }
  }

  swift_once(&qword_100250BB0, sub_10000FFE0);
LABEL_3:
  id v26 = (id)qword_100258268;
  id v27 = [v202 version];
  id v28 = [a1 policySecrets];
  uint64_t v189 = v19;
  if (v28)
  {
    id v29 = v28;
    uint64_t v194 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v28,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
  }

  else
  {
    uint64_t v194 = 0LL;
  }

  unsigned int v195 = [a1 syncUserControllableViews];
  id v30 = [a1 secureElementIdentity];
  id v31 = [a1 walrusSetting];
  id v196 = [a1 webAccess];
  id v32 = [a1 deviceName];
  id v191 = v23;
  if (v32)
  {
    id v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v192 = v35;
    uint64_t v193 = v34;
  }

  else
  {
    uint64_t v192 = 0LL;
    uint64_t v193 = 0LL;
  }

  id v36 = [a1 serialNumber];
  id v198 = v30;
  id v199 = v27;
  id v197 = v31;
  if (v36)
  {
    id v37 = v36;
    id v38 = v26;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v41 = v40;
  }

  else
  {
    id v38 = v26;
    uint64_t v39 = 0LL;
    uint64_t v41 = 0LL;
  }

  id v42 = [a1 osVersion];
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  unsigned __int8 v46 = [a1 isInheritedAccount];
  id v47 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  id v48 = v205;
  char v182 = v46;
  uint64_t v176 = v45;
  uint64_t v174 = v39;
  uint64_t v49 = (uint64_t)v25;
  uint64_t v50 = v38;
  uint64_t v51 = (uint64_t)v38;
  BOOL v53 = v198;
  os_log_type_t v52 = v199;
  id v55 = v196;
  uint64_t v54 = v197;
  id v56 = sub_10016AD4C( v49,  v51,  (uint64_t)v199,  v194,  v195,  (uint64_t)v198,  (uint64_t)v197,  (uint64_t)v196,  v193,  v192,  v174,  v41,  v43,  v176,  (uint64_t)v48,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  v182);

  unint64_t v57 = v190;
  id v58 = v56;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  id v59 = [v58 data];
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
  uint64_t v62 = v61;

  *unint64_t v57 = v60;
  v57[1] = v62;
  id v63 = [v58 sig];
  uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v63);
  uint64_t v66 = v65;

  v57[2] = v64;
  v57[3] = v66;
  id v67 = [v203 peerID];
  if (!v67)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v124 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v124, (uint64_t)qword_1002567D0);
    uint64_t v125 = v200;
    swift_errorRetain(v200);
    uint64_t v126 = swift_errorRetain(v125);
    uint64_t v127 = (os_log_s *)Logger.logObject.getter(v126);
    os_log_type_t v131 = static os_log_type_t.error.getter(v127, v128, v129, v130);
    if (os_log_type_enabled(v127, v131))
    {
      uint64_t v132 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v133 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v208 = v125;
      id v209 = v133;
      *(_DWORD *)uint64_t v132 = 136446210;
      swift_errorRetain(v125);
      uint64_t v134 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v135 = String.init<A>(describing:)(&v208, v134);
      id v137 = (_TtC18TrustedPeersHelper6Client *)v136;
      uint64_t v208 = sub_10017C4C4(v135, v136, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v208, &v209, v132 + 4, v132 + 12);
      id v138 = v137;
      uint64_t v125 = v200;
      swift_bridgeObjectRelease(v138, v139, v140, v141, v142, v143, v144, v145);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v127,  v131,  "Error creating recovery key peerid: %{public}s",  v132,  0xCu);
      swift_arrayDestroy(v133, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v133, -1LL, -1LL);
      swift_slowDealloc(v132, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    id v169 = v191;
    v206(0LL, v125);

    goto LABEL_27;
  }

  id v68 = v67;
  id v205 = v58;
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  uint64_t v71 = v70;

  uint64_t v72 = v188;
  id v73 = *(id *)&v188[OBJC_IVAR____TtC18TrustedPeersHelper9Container_model];
  uint64_t v74 = v201;
  NSString v75 = String._bridgeToObjectiveC()();
  uint64_t v76 = sub_100007578((uint64_t *)&unk_100251820);
  uint64_t v77 = swift_allocObject(v76, 48LL, 7LL);
  *(_OWORD *)(v77 + 16) = xmmword_1001DE710;
  *(void *)(v77 + 32) = v69;
  *(void *)(v77 + 40) = v71;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v77, v79, v80, v81, v82, v83, v84, v85);
  uint64_t v86 = v72;
  int64_t v87 = (void *)sub_1001A3414();
  id v209 = 0LL;
  id v88 =  [v73 calculateDynamicInfoForPeerWithID:v75 addingPeerIDs:0 removingPeerIDs:isa preapprovedKeys:0 signingKeyPair:v48 currentMachineIDs:v87 error:&v209];

  id v89 = v209;
  if (!v88)
  {
    id v146 = v209;
    uint64_t v147 = _convertNSErrorToError(_:)(v89);

    swift_willThrow(v148);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v149 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v149, (uint64_t)qword_1002567D0);
    swift_errorRetain(v147);
    uint64_t v150 = swift_errorRetain(v147);
    uint64_t v151 = (os_log_s *)Logger.logObject.getter(v150);
    os_log_type_t v155 = static os_log_type_t.error.getter(v151, v152, v153, v154);
    if (os_log_type_enabled(v151, v155))
    {
      unint64_t v156 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v157 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v208 = v147;
      id v209 = v157;
      *(_DWORD *)unint64_t v156 = 136446210;
      swift_errorRetain(v147);
      uint64_t v158 = sub_100007578(&qword_100251D70);
      uint64_t v159 = String.init<A>(describing:)(&v208, v158);
      uint64_t v161 = (_TtC18TrustedPeersHelper6Client *)v160;
      uint64_t v208 = sub_10017C4C4(v159, v160, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v208, &v209, v156 + 4, v156 + 12);
      swift_bridgeObjectRelease(v161, v162, v163, v164, v165, v166, v167, v168);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v151, v155, "Error preparing dynamic info: %{public}s", v156, 0xCu);
      swift_arrayDestroy(v157, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v157, -1LL, -1LL);
      swift_slowDealloc(v156, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    char v170 = v206;
    id v171 = v191;
    id v172 = v205;
    swift_errorRetain(v147);
    v170(0LL, v147);

    swift_errorRelease();
    swift_errorRelease();
LABEL_27:
    uint64_t v123 = (uint64_t)v57;
    return sub_1000415CC(v123, type metadata accessor for SignedPeerStableInfo);
  }

  BOOL v90 = v57;
  BOOL v91 = v184;
  id v92 = v209;
  id v93 = v88;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  id v94 = [v93 data];
  uint64_t v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v94);
  uint64_t v97 = v96;

  uint64_t *v91 = v95;
  v91[1] = v97;
  id v203 = v93;
  id v98 = [v93 sig];
  uint64_t v99 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v98);
  uint64_t v101 = v100;

  v91[2] = v99;
  v91[3] = v101;
  __chkstk_darwin(v102, v103);
  uint64_t v177 = v204;
  uint64_t v178 = v74;
  os_log_type_t v179 = v90;
  unint64_t v180 = v91;
  unint64_t v181 = v86;
  uint64_t v104 = sub_1000077B8( (unint64_t *)&unk_100256C80,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
  uint64_t v105 = (uint64_t)v187;
  static Message.with(_:)(sub_100171020, &v175, v186, v104);
  uint64_t v106 = *(void *)&v86[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
  uint64_t v107 = *(void *)&v86[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
  sub_1000084C4(&v86[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v106);
  uint64_t v108 = swift_allocObject(&unk_100237CB8, 48LL, 7LL);
  id v110 = v205;
  BOOL v109 = v206;
  *(void *)(v108 + 16) = v86;
  *(void *)(v108 + 24) = v110;
  uint64_t v111 = v207;
  *(void *)(v108 + 32) = v109;
  *(void *)(v108 + 40) = v111;
  uint64_t v112 = *(void *)(v107 + 16);
  SEL v113 = *(void (**)(uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v112 + 112);
  id v114 = v110;
  int64_t v115 = v86;
  swift_retain(v111);
  v113(v105, sub_100171044, v108, v106, v112);

  swift_release((_TtC18TrustedPeersHelper6Client *)v108, v116, v117, v118, v119, v120, v121, v122);
  sub_1000415CC(v105, type metadata accessor for RemoveRecoveryKeyRequest);
  sub_1000415CC((uint64_t)v91, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v123 = (uint64_t)v190;
  return sub_1000415CC(v123, type metadata accessor for SignedPeerStableInfo);
}

void sub_100145D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = a6;
  uint64_t v42 = a5;
  uint64_t v43 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v18 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 24);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  sub_10004164C(a4, (uint64_t)v17, type metadata accessor for SignedPeerStableInfo);
  uint64_t v26 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  uint64_t v27 = a1 + *(int *)(v26 + 28);
  sub_100041590(v27, &qword_100251F18);
  sub_100041608((uint64_t)v17, v27, type metadata accessor for SignedPeerStableInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v27, 0LL, 1LL, v13);
  sub_10004164C(v42, (uint64_t)v12, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v28 = a1 + *(int *)(v26 + 32);
  sub_100041590(v28, &qword_100256CA0);
  sub_100041608((uint64_t)v12, v28, type metadata accessor for SignedPeerDynamicInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v28, 0LL, 1LL, v43);
  id v29 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v44
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "changeToken"));
  if (v29)
  {
    id v37 = v29;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    unint64_t v40 = v39;
  }

  else
  {
    uint64_t v38 = 0LL;
    unint64_t v40 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 8), v30, v31, v32, v33, v34, v35, v36);
  *(void *)a1 = v38;
  *(void *)(a1 + 8) = v40;
}

void sub_100145F18(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v76 = a3;
  uint64_t v77 = a5;
  uint64_t v8 = type metadata accessor for RemoveRecoveryKeyResponse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (os_log_s *)((char *)&v75 - v15);
  uint64_t v17 = sub_100007578(&qword_100251DB8);
  __chkstk_darwin(v17, v18);
  id v20 = (uint64_t *)((char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v20, &qword_100251DB8);
  if (swift_getEnumCaseMultiPayload(v20, v17) != 1)
  {
    sub_100041608((uint64_t)v20, (uint64_t)v16, type metadata accessor for RemoveRecoveryKeyResponse);
    unint64_t v40 = a2;
    id v75 = *(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    sub_10004164C((uint64_t)v16, (uint64_t)v13, type metadata accessor for RemoveRecoveryKeyResponse);
    uint64_t v41 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v42 = (v41 + 32) & ~v41;
    unint64_t v43 = (v10 + v42 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v44 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237CE0, v43 + 16, v41 | 7);
    uint64_t v45 = v76;
    *(void *)v44->endpoint = a2;
    *(void *)v44->containerMap = v45;
    sub_100041608( (uint64_t)v13,  (uint64_t)&v44->_TtCs12_SwiftObject_opaque[v42],  type metadata accessor for RemoveRecoveryKeyResponse);
    unsigned __int8 v46 = &v44->_TtCs12_SwiftObject_opaque[v43];
    uint64_t v47 = v77;
    *(void *)unsigned __int8 v46 = a4;
    *((void *)v46 + 1) = v47;
    id v48 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237D08, 32LL, 7LL);
    *(void *)v48->endpoint = sub_100171160;
    *(void *)v48->containerMap = v44;
    aBlock[4] = (uint64_t)sub_100176BD4;
    SEL v79 = v48;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100237D20;
    uint64_t v49 = _Block_copy(aBlock);
    uint64_t v50 = v79;
    id v51 = v40;
    id v52 = v45;
    swift_retain(v47);
    swift_retain(v48);
    swift_release(v50, v53, v54, v55, v56, v57, v58, v59);
    [v75 performBlockAndWait:v49];
    _Block_release(v49);
    sub_1000415CC((uint64_t)v16, type metadata accessor for RemoveRecoveryKeyResponse);
    LOBYTE(v42) = swift_isEscapingClosureAtFileLocation(v48, "", 108LL, 7601LL, 61LL, 1LL);
    swift_release(v44, v60, v61, v62, v63, v64, v65, v66);
    swift_release(v48, v67, v68, v69, v70, v71, v72, v73);
    if ((v42 & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v76 = (void *)a4;
  a4 = *v20;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v21, (uint64_t)qword_1002567D0);
  swift_errorRetain(a4);
  uint64_t v22 = swift_errorRetain(a4);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v26 = static os_log_type_t.error.getter(v16, v23, v24, v25);
  if (!os_log_type_enabled(v16, v26))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v28 = swift_slowAlloc(32LL, -1LL);
  aBlock[0] = v28;
  *(_DWORD *)uint64_t v27 = 136446210;
  uint64_t v80 = a4;
  swift_errorRetain(a4);
  uint64_t v29 = sub_100007578(&qword_100251D70);
  uint64_t v30 = String.init<A>(describing:)(&v80, v29);
  int64_t v32 = (_TtC18TrustedPeersHelper6Client *)v31;
  uint64_t v80 = sub_10017C4C4(v30, v31, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v27 + 4, v27 + 12);
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v16, v26, "removeRecoveryKey failed: %{public}s", v27, 0xCu);
  swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v28, -1LL, -1LL);
  swift_slowDealloc(v27, -1LL, -1LL);
LABEL_9:

  uint64_t v74 = (void (*)(void, uint64_t))v76;
  swift_errorRetain(a4);
  v74(0LL, a4);
  swift_errorRelease();
  swift_errorRelease();
}

uint64_t sub_100146360( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v64 = a5;
  id v65 = a4;
  uint64_t v63 = a3;
  uint64_t v7 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Changes(0LL);
  uint64_t v62 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v16 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO);
  id v17 = [a2 data];
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
  unint64_t v20 = v19;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v18, v20);
  [v16 setEgoPeerStableInfo:isa];

  id v22 = *(id *)(a1 + v15);
  id v23 = [a2 sig];
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  unint64_t v26 = v25;

  Class v27 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000852C(v24, v26);
  [v22 setEgoPeerStableInfoSig:v27];

  uint64_t v28 = type metadata accessor for RemoveRecoveryKeyResponse(0LL);
  sub_10000FC68(v63 + *(int *)(v28 + 20), (uint64_t)v10, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v10, 1LL, v11) == 1)
  {
    *(void *)uint64_t v14 = 0LL;
    *((void *)v14 + 1) = 0xE000000000000000LL;
    *((void *)v14 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v14 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v14 + 40) = xmmword_1001DE6F0;
    v14[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v10, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v10, (uint64_t)v14, type metadata accessor for Changes);
  }

  sub_10013D540((uint64_t)v14, 0);
  sub_1000415CC((uint64_t)v14, type metadata accessor for Changes);
  [*(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model) removeRecoveryKey];
  [*(id *)(a1 + v15) setRecoveryKeySigningSPKI:0];
  [*(id *)(a1 + v15) setRecoveryKeyEncryptionSPKI:0];
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = sub_100006BAC(v29, (uint64_t)qword_1002567D0);
  unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    SEL v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)SEL v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "removeRecoveryKey succeeded", v33, 2u);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  id v34 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  id v68 = 0LL;
  unsigned int v35 = [v34 save:&v68];
  id v36 = v68;
  if (v35)
  {
    id v37 = v68;
    return v65(1LL, 0LL);
  }

  else
  {
    id v39 = v68;
    uint64_t v40 = _convertNSErrorToError(_:)(v36);

    swift_willThrow(v41);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v42, (uint64_t)qword_1002567D0);
    swift_errorRetain(v40);
    uint64_t v43 = swift_errorRetain(v40);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
    if (os_log_type_enabled(v44, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = (void *)swift_slowAlloc(32LL, -1LL);
      id v68 = v50;
      *(_DWORD *)uint64_t v49 = 136446210;
      uint64_t v66 = v40;
      swift_errorRetain(v40);
      uint64_t v51 = sub_100007578(&qword_100251D70);
      uint64_t v52 = String.init<A>(describing:)(&v66, v51);
      id v54 = (_TtC18TrustedPeersHelper6Client *)v53;
      uint64_t v66 = sub_10017C4C4(v52, v53, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v48, "removeRecoveryKey handling failed: %{public}s", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v40);
    v65(0LL, v40);
    swift_errorRelease();
    return swift_errorRelease();
  }

uint64_t sub_100146910(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C70);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v7, (uint64_t *)&unk_100256C70);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    uint64_t v8 = *v7;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v9, (uint64_t)qword_1002567D0);
    swift_errorRetain(v8);
    uint64_t v10 = swift_errorRetain(v8);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v15 = static os_log_type_t.error.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v11, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v8;
      uint64_t v31 = v17;
      *(_DWORD *)id v16 = 136446210;
      swift_errorRetain(v8);
      uint64_t v18 = sub_100007578(&qword_100251D70);
      uint64_t v19 = String.init<A>(describing:)(&v30, v18);
      uint64_t v21 = (_TtC18TrustedPeersHelper6Client *)v20;
      uint64_t v30 = sub_10017C4C4(v19, v20, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v15, "performATOPRVActions failed: %{public}s", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v8);
    a2(v8);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    a2(0LL);
    return sub_100041590((uint64_t)v7, (uint64_t *)&unk_100256C70);
  }

uint64_t sub_100146B88( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), char *a6, uint64_t a7, unint64_t a8)
{
  uint64_t v11 = a3;
  if (a1) {
    os_log_type_t v13 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v13 = a5();
  }
  os_log_type_t v14 = v13;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v15, (uint64_t)qword_1002567D0);
  swift_errorRetain(a1);
  uint64_t v16 = swift_errorRetain(a1);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v14))
  {
    format = a6;
    BOOL v27 = v11;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    unint64_t v20 = 0xE700000000000000LL;
    if (a1)
    {
      uint64_t v29 = 0x203A726F727265LL;
      unint64_t v30 = 0xE700000000000000LL;
      uint64_t v28 = a1;
      swift_errorRetain(a1);
      swift_errorRetain(a1);
      uint64_t v21 = sub_100007578(&qword_100251D70);
      v22._countAndFlagsBits = String.init<A>(describing:)(&v28, v21);
      object = v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(object);
      swift_errorRelease();
      uint64_t v24 = v29;
      unint64_t v20 = v30;
    }

    else
    {
      uint64_t v24 = 0x73736563637573LL;
    }

    uint64_t v29 = sub_10017C4C4(v24, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v14, format, v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    uint64_t v11 = v27;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(a7, a8);
  return v11(a1);
}

uint64_t sub_100146DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v95 = a1;
  uint64_t v6 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v93 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v11);
  uint64_t v94 = (uint64_t)&v88 - v12;
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  __chkstk_darwin(Request, v14);
  uint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v17, 41LL, 7LL);
  uint64_t v18 = v3;
  uint64_t v19 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v18, 0xD00000000000001ELL, 0x80000001001F9F20LL);
  BOOL v90 = v18;

  unint64_t v20 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239630, 40LL, 7LL);
  *(void *)v20->endpoint = v19;
  *(void *)v20->containerMap = a2;
  BOOL v91 = v20;
  *(void *)v20[1]._TtCs12_SwiftObject_opaque = a3;
  uint64_t v21 = qword_100250EB8;
  swift_retain(v19);
  swift_retain(a3);
  if (v21 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100006BAC(v22, (uint64_t)qword_1002567D0);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.info.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "starting fetchCurrentItem", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v29 = v95;
  if ((unint64_t)v95 >> 62)
  {
    if (v95 < 0) {
      uint64_t v80 = v95;
    }
    else {
      uint64_t v80 = v95 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v95);
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v29, v81, v82, v83, v84, v85, v86, v87);
  }

  else
  {
    uint64_t v30 = *(void *)((v95 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v31 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v92 = Request;
  if (!v30) {
    goto LABEL_25;
  }
  uint64_t v96 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t result = sub_10014E780(0, v30 & ~(v30 >> 63), 0);
  if ((v30 & 0x8000000000000000LL) == 0)
  {
    id v88 = v19;
    id v89 = v16;
    if ((v29 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v30; ++i)
      {
        uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v95);
        *(&v88 - 2) = (_TtC18TrustedPeersHelper6Client *)__chkstk_darwin(v34, v35);
        uint64_t v36 = sub_1000077B8( &qword_100252380,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
        static Message.with(_:)(sub_100173360, &v88 - 4, v6, v36);
        swift_unknownObjectRelease(v34);
        uint64_t v31 = v96;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
        {
          sub_10014E780(0, *(void *)v31->endpoint + 1LL, 1);
          uint64_t v31 = v96;
        }

        unint64_t v38 = *(void *)v31->endpoint;
        unint64_t v37 = *(void *)v31->containerMap;
        if (v38 >= v37 >> 1)
        {
          sub_10014E780(v37 > 1, v38 + 1, 1);
          uint64_t v31 = v96;
        }

        *(void *)v31->endpoint = v38 + 1;
        uint64_t v27 = sub_100041608( v94,  (uint64_t)&v31->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                                                        + *(void *)(v7 + 72) * v38],
                type metadata accessor for CurrentCKKSItemSpecifier);
      }
    }

    else
    {
      id v39 = (_TtC18TrustedPeersHelper6Client *)(v29 + 32);
      uint64_t v27 = sub_1000077B8( &qword_100252380,  type metadata accessor for CurrentCKKSItemSpecifier,  (uint64_t)&protocol conformance descriptor for CurrentCKKSItemSpecifier);
      uint64_t v40 = v27;
      do
      {
        __chkstk_darwin(v27, v28);
        *(&v88 - 2) = v41;
        uint64_t v42 = v41;
        static Message.with(_:)(sub_100176B90, &v88 - 4, v6, v40);

        uint64_t v31 = v96;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
        {
          sub_10014E780(0, *(void *)v31->endpoint + 1LL, 1);
          uint64_t v31 = v96;
        }

        unint64_t v44 = *(void *)v31->endpoint;
        unint64_t v43 = *(void *)v31->containerMap;
        if (v44 >= v43 >> 1)
        {
          sub_10014E780(v43 > 1, v44 + 1, 1);
          uint64_t v31 = v96;
        }

        *(void *)v31->endpoint = v44 + 1;
        uint64_t v27 = sub_100041608( v93,  (uint64_t)&v31->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                                                        + *(void *)(v7 + 72) * v44],
                type metadata accessor for CurrentCKKSItemSpecifier);
        id v39 = (_TtC18TrustedPeersHelper6Client *)((char *)v39 + 8);
        --v30;
      }

      while (v30);
    }

    uint64_t v19 = v88;
    uint64_t v16 = v89;
LABEL_25:
    __chkstk_darwin(v27, v28);
    *(&v88 - 2) = v31;
    uint64_t v45 = sub_1000077B8( (unint64_t *)&unk_100256F40,  type metadata accessor for CurrentItemFetchRequest,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
    static Message.with(_:)(sub_1001732F8, &v88 - 4, v92, v45);
    swift_bridgeObjectRelease(v31, v46, v47, v48, v49, v50, v51, v52);
    uint64_t v53 = *(void *)&v90[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v54 = *(void *)&v90[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&v90[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v53);
    SEL v55 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239658, 32LL, 7LL);
    id v56 = v91;
    *(void *)v55->endpoint = sub_100173318;
    *(void *)v55->containerMap = v56;
    uint64_t v57 = *(void *)(v54 + 16);
    id v58 = *(void (**)(char *, uint64_t (*)(uint64_t), _TtC18TrustedPeersHelper6Client *, uint64_t, uint64_t))(v57 + 136);
    swift_retain(v56);
    v58(v16, sub_1001733C0, v55, v53, v57);
    swift_release(v19, v59, v60, v61, v62, v63, v64, v65);
    swift_release(v56, v66, v67, v68, v69, v70, v71, v72);
    swift_release(v55, v73, v74, v75, v76, v77, v78, v79);
    return sub_1000415CC((uint64_t)v16, type metadata accessor for CurrentItemFetchRequest);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001473C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void), uint64_t a6, const char *a7, uint64_t a8, unint64_t a9)
{
  uint64_t v11 = a2;
  if (a3) {
    os_log_type_t v13 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v13 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v14 = v13;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v15, (uint64_t)qword_1002567D0);
  swift_errorRetain(a3);
  uint64_t v16 = swift_errorRetain(a3);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v14))
  {
    uint64_t v40 = v11;
    uint64_t v41 = a5;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    unint64_t v20 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a3)
    {
      uint64_t v45 = 0x203A726F727265LL;
      unint64_t v46 = 0xE700000000000000LL;
      uint64_t v44 = a3;
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      uint64_t v21 = sub_100007578(&qword_100251D70);
      v22._countAndFlagsBits = String.init<A>(describing:)(&v44, v21);
      object = (_TtC18TrustedPeersHelper6Client *)v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(object, v24, v25, v26, v27, v28, v29, v30);
      swift_errorRelease();
      uint64_t v31 = v45;
      unint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v46;
    }

    else
    {
      uint64_t v31 = 0x73736563637573LL;
    }

    uint64_t v45 = sub_10017C4C4(v31, (unint64_t)v20, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v20, v32, v33, v34, v35, v36, v37, v38);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v14, a7, v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    a5 = v41;
    uint64_t v11 = v40;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(a8, a9);
  return a5(a1, v11, a3);
}

uint64_t sub_100147630(uint64_t *a1, id a2)
{
  id v4 = [a2 itemPtrName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  swift_bridgeObjectRelease(a1[3]);
  a1[2] = v5;
  a1[3] = v7;
  id v8 = [a2 zoneID];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  uint64_t result = swift_bridgeObjectRelease(a1[1]);
  *a1 = v9;
  a1[1] = v11;
  return result;
}

uint64_t sub_1001476D8( uint64_t a1, void (*a2)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, uint64_t), uint64_t a3)
{
  int64_t v141 = a2;
  uint64_t v5 = sub_100007578(&qword_1002517E0);
  __chkstk_darwin(v5, v6);
  id v8 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100007578((uint64_t *)&unk_100256F50);
  __chkstk_darwin(v9, v10);
  uint64_t v148 = (uint64_t)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v146 = *(void *)(v12 - 8);
  uint64_t v147 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (_TtC18TrustedPeersHelper6Client **)((char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v150 = type metadata accessor for CurrentCKKSItem(0LL);
  uint64_t v142 = *(void *)(v150 - 8);
  __chkstk_darwin(v150, v16);
  uint64_t v149 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v151 = v18;
  uint64_t v152 = v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  BOOL v145 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  int64_t v26 = (char *)&v137 - v25;
  __chkstk_darwin(v24, v27);
  BOOL v29 = (char *)&v137 - v28;
  uint64_t Response = type metadata accessor for CurrentItemFetchResponse(0LL);
  __chkstk_darwin(Response, v31);
  id v33 = (_TtC18TrustedPeersHelper6Client **)((char *)&v137 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v34 = sub_100007578(&qword_100251D98);
  __chkstk_darwin(v34, v35);
  BOOL v37 = (uint64_t *)((char *)&v137 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v37, &qword_100251D98);
  if (swift_getEnumCaseMultiPayload(v37, v34) == 1)
  {
    uint64_t v38 = *v37;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v39, (uint64_t)qword_1002567D0);
    swift_errorRetain(v38);
    uint64_t v40 = swift_errorRetain(v38);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v45 = static os_log_type_t.error.getter(v41, v42, v43, v44);
    if (os_log_type_enabled(v41, v45))
    {
      unint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v47 = swift_slowAlloc(32LL, -1LL);
      uint64_t v153 = v38;
      uint64_t v154 = v47;
      *(_DWORD *)unint64_t v46 = 136446210;
      swift_errorRetain(v38);
      uint64_t v48 = sub_100007578(&qword_100251D70);
      uint64_t v49 = String.init<A>(describing:)(&v153, v48);
      BOOL v51 = (_TtC18TrustedPeersHelper6Client *)v50;
      uint64_t v153 = sub_10017C4C4(v49, v50, &v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v45, "fetchCurrentItem failed: %{public}s", v46, 0xCu);
      swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v38);
    v141( (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage,  (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage,  v38);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    uint64_t v140 = a3;
    sub_100041608((uint64_t)v37, (uint64_t)v33, type metadata accessor for CurrentItemFetchResponse);
    SEL v59 = v33[1];
    uint64_t v154 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v60 = *(void *)v59->endpoint;
    BOOL v144 = v8;
    SEL v139 = v33;
    if (v60)
    {
      uint64_t v143 = sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
      id v61 = &v59->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v152 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80)];
      uint64_t v62 = *(void *)(v152 + 72);
      id v63 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v152 + 16);
      id v138 = v59;
      swift_bridgeObjectRetain(v59);
      do
      {
        uint64_t v72 = v151;
        v63(v29, v61, v151);
        v63(v26, (unsigned __int8 *)v29, v72);
        uint64_t v73 = CKRecord.init(_:)(v26);
        uint64_t v74 = (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v29, v72);
        if (v73)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v74);
          unint64_t v76 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v75 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v76 >= v75 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1LL);
          }
          uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v76, v73);
          specialized Array._endMutation()(v64);
        }

        v61 += v62;
        --v60;
      }

      while (v60);
      id v77 = (_TtC18TrustedPeersHelper6Client *)v154;
      SEL v59 = v138;
      id v33 = v139;
    }

    else
    {
      swift_bridgeObjectRetain(v59);
      id v77 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease(v59, v65, v66, v67, v68, v69, v70, v71);
    id v79 = *v33;
    uint64_t v80 = *(void *)(*v33)->endpoint;
    SEL v81 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    uint64_t v82 = (uint64_t)v149;
    if (v80)
    {
      id v138 = v77;
      uint64_t v154 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v79);
      specialized ContiguousArray.reserveCapacity(_:)(v80);
      uint64_t v83 = v142;
      unint64_t v84 = (*(unsigned __int8 *)(v142 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
      id v137 = v79;
      uint64_t v85 = (uint64_t)&v79->_TtCs12_SwiftObject_opaque[v84];
      uint64_t v143 = sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
      uint64_t v142 = *(void *)(v83 + 72);
      while (1)
      {
        sub_10004164C(v85, v82, type metadata accessor for CurrentCKKSItem);
        uint64_t v86 = v148;
        sub_10000FC68(v82 + *(int *)(v150 + 24), v148, (uint64_t *)&unk_100256F50);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v86, 1LL, v147) == 1)
        {
          void *v15 = 0LL;
          v15[1] = 0xE000000000000000LL;
          v15[2] = 0LL;
          v15[3] = 0xE000000000000000LL;
          _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
          sub_100041590(v86, (uint64_t *)&unk_100256F50);
        }

        else
        {
          sub_100041608(v86, (uint64_t)v15, type metadata accessor for CurrentCKKSItemSpecifier);
        }

        BOOL v87 = (_TtC18TrustedPeersHelper6Client *)v15[3];
        id v88 = (_TtC18TrustedPeersHelper6Client *)v15[1];
        id v89 = objc_allocWithZone((Class)&OBJC_CLASS___CuttlefishCurrentItemSpecifier);
        swift_bridgeObjectRetain(v87);
        swift_bridgeObjectRetain(v88);
        NSString v90 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v87, v91, v92, v93, v94, v95, v96, v97);
        NSString v98 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v88, v99, v100, v101, v102, v103, v104, v105);
        id v106 = [v89 init:v90 zoneID:v98];

        sub_1000415CC((uint64_t)v15, type metadata accessor for CurrentCKKSItemSpecifier);
        uint64_t v82 = (uint64_t)v149;
        uint64_t v107 = (uint64_t)v144;
        sub_10000FC68((uint64_t)&v149[*(int *)(v150 + 20)], (uint64_t)v144, &qword_1002517E0);
        uint64_t v108 = v151;
        uint64_t v109 = v152;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v107, 1LL, v151) == 1)
        {
          id v110 = v145;
          Ckcode_RecordTransport.init()();
          sub_100041590(v107, &qword_1002517E0);
        }

        else
        {
          id v110 = v145;
          (*(void (**)(char *, uint64_t, uint64_t))(v109 + 32))(v145, v107, v108);
        }

        uint64_t result = CKRecord.init(_:)(v110);
        if (!result) {
          break;
        }
        uint64_t v111 = (void *)result;
        id v112 = [objc_allocWithZone((Class)CuttlefishCurrentItem) init:v106 item:result];

        uint64_t v113 = sub_1000415CC(v82, type metadata accessor for CurrentCKKSItem);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v113);
        uint64_t v114 = *(void *)(v154 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v114);
        uint64_t v115 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, v112);
        specialized ContiguousArray._endMutation()(v115);
        v85 += v142;
        if (!--v80)
        {
          SEL v81 = (_TtC18TrustedPeersHelper6Client *)v154;
          swift_bridgeObjectRelease(v137, v116, v117, v118, v119, v120, v121, v122);
          id v77 = v138;
          goto LABEL_28;
        }
      }

      __break(1u);
    }

    else
    {
LABEL_28:
      v141(v81, v77, 0LL);
      swift_bridgeObjectRelease(v81, v123, v124, v125, v126, v127, v128, v129);
      swift_bridgeObjectRelease(v77, v130, v131, v132, v133, v134, v135, v136);
      return sub_1000415CC((uint64_t)v139, type metadata accessor for CurrentItemFetchResponse);
    }
  }

  return result;
}

uint64_t sub_100147F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v95 = a1;
  uint64_t v6 = type metadata accessor for PCSService(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v93 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v11);
  uint64_t v94 = (uint64_t)&v88 - v12;
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  __chkstk_darwin(Request, v14);
  uint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v17, 41LL, 7LL);
  uint64_t v18 = v3;
  uint64_t v19 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v18, 0xD000000000000026LL, 0x80000001001F9EF0LL);
  NSString v90 = v18;

  uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002395E0, 40LL, 7LL);
  *(void *)v20->endpoint = v19;
  *(void *)v20->containerMap = a2;
  SEL v91 = v20;
  *(void *)v20[1]._TtCs12_SwiftObject_opaque = a3;
  uint64_t v21 = qword_100250EB8;
  swift_retain(v19);
  swift_retain(a3);
  if (v21 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100006BAC(v22, (uint64_t)qword_1002567D0);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.info.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    int64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "starting fetchPCSIdentityByKey", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v29 = v95;
  if ((unint64_t)v95 >> 62)
  {
    if (v95 < 0) {
      uint64_t v80 = v95;
    }
    else {
      uint64_t v80 = v95 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v95);
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v29, v81, v82, v83, v84, v85, v86, v87);
  }

  else
  {
    uint64_t v30 = *(void *)((v95 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v31 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v92 = Request;
  if (!v30) {
    goto LABEL_25;
  }
  BOOL v96 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t result = sub_10014E7AC(0, v30 & ~(v30 >> 63), 0);
  if ((v30 & 0x8000000000000000LL) == 0)
  {
    id v88 = v19;
    id v89 = v16;
    if ((v29 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v30; ++i)
      {
        uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v95);
        *(&v88 - 2) = (_TtC18TrustedPeersHelper6Client *)__chkstk_darwin(v34, v35);
        uint64_t v36 = sub_1000077B8( &qword_100252350,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
        static Message.with(_:)(sub_1001732E0, &v88 - 4, v6, v36);
        swift_unknownObjectRelease(v34);
        uint64_t v31 = v96;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
        {
          sub_10014E7AC(0, *(void *)v31->endpoint + 1LL, 1);
          uint64_t v31 = v96;
        }

        unint64_t v38 = *(void *)v31->endpoint;
        unint64_t v37 = *(void *)v31->containerMap;
        if (v38 >= v37 >> 1)
        {
          sub_10014E7AC(v37 > 1, v38 + 1, 1);
          uint64_t v31 = v96;
        }

        *(void *)v31->endpoint = v38 + 1;
        uint64_t v27 = sub_100041608( v94,  (uint64_t)&v31->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                                                        + *(void *)(v7 + 72) * v38],
                type metadata accessor for PCSService);
      }
    }

    else
    {
      uint64_t v39 = (_TtC18TrustedPeersHelper6Client *)(v29 + 32);
      uint64_t v27 = sub_1000077B8( &qword_100252350,  type metadata accessor for PCSService,  (uint64_t)&protocol conformance descriptor for PCSService);
      uint64_t v40 = v27;
      do
      {
        __chkstk_darwin(v27, v28);
        *(&v88 - 2) = v41;
        uint64_t v42 = v41;
        static Message.with(_:)(sub_100176B7C, &v88 - 4, v6, v40);

        uint64_t v31 = v96;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
        {
          sub_10014E7AC(0, *(void *)v31->endpoint + 1LL, 1);
          uint64_t v31 = v96;
        }

        unint64_t v44 = *(void *)v31->endpoint;
        unint64_t v43 = *(void *)v31->containerMap;
        if (v44 >= v43 >> 1)
        {
          sub_10014E7AC(v43 > 1, v44 + 1, 1);
          uint64_t v31 = v96;
        }

        *(void *)v31->endpoint = v44 + 1;
        uint64_t v27 = sub_100041608( v93,  (uint64_t)&v31->_TtCs12_SwiftObject_opaque[((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                                                        + *(void *)(v7 + 72) * v44],
                type metadata accessor for PCSService);
        uint64_t v39 = (_TtC18TrustedPeersHelper6Client *)((char *)v39 + 8);
        --v30;
      }

      while (v30);
    }

    uint64_t v19 = v88;
    uint64_t v16 = v89;
LABEL_25:
    __chkstk_darwin(v27, v28);
    *(&v88 - 2) = v31;
    uint64_t v45 = sub_1000077B8( (unint64_t *)&unk_100256F20,  type metadata accessor for DirectPCSIdentityFetchRequest,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
    static Message.with(_:)(sub_1001732F8, &v88 - 4, v92, v45);
    swift_bridgeObjectRelease(v31, v46, v47, v48, v49, v50, v51, v52);
    uint64_t v53 = *(void *)&v90[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v54 = *(void *)&v90[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&v90[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v53);
    id v55 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100239608, 32LL, 7LL);
    id v56 = v91;
    *(void *)v55->endpoint = sub_1001732D4;
    *(void *)v55->containerMap = v56;
    uint64_t v57 = *(void *)(v54 + 16);
    BOOL v58 = *(void (**)(char *, uint64_t (*)(uint64_t), _TtC18TrustedPeersHelper6Client *, uint64_t, uint64_t))(v57 + 128);
    swift_retain(v56);
    v58(v16, sub_10017330C, v55, v53, v57);
    swift_release(v19, v59, v60, v61, v62, v63, v64, v65);
    swift_release(v56, v66, v67, v68, v69, v70, v71, v72);
    swift_release(v55, v73, v74, v75, v76, v77, v78, v79);
    return sub_1000415CC((uint64_t)v16, type metadata accessor for DirectPCSIdentityFetchRequest);
  }

  __break(1u);
  return result;
}

void sub_1001484F0( _TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void))
{
  if (a3) {
    os_log_type_t v9 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v9 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v10 = v9;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v11, (uint64_t)qword_1002567D0);
  swift_errorRetain(a3);
  uint64_t v12 = swift_errorRetain(a3);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v10))
  {
    BOOL v51 = a5;
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v55 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v16 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a3)
    {
      uint64_t v53 = 0x203A726F727265LL;
      unint64_t v54 = 0xE700000000000000LL;
      uint64_t v52 = a3;
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      uint64_t v17 = sub_100007578(&qword_100251D70);
      v18._countAndFlagsBits = String.init<A>(describing:)(&v52, v17);
      object = (_TtC18TrustedPeersHelper6Client *)v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object, v20, v21, v22, v23, v24, v25, v26);
      swift_errorRelease();
      uint64_t v27 = v53;
      uint64_t v16 = (_TtC18TrustedPeersHelper6Client *)v54;
    }

    else
    {
      uint64_t v27 = 0x73736563637573LL;
    }

    uint64_t v53 = sub_10017C4C4(v27, (unint64_t)v16, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v16, v28, v29, v30, v31, v32, v33, v34);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v10, "fetchPCSIdentityByKey complete: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    a5 = v51;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD000000000000026LL, 0x80000001001F9EF0LL);
  if (a1) {
    uint64_t v35 = a1;
  }
  else {
    uint64_t v35 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }
  if (a2) {
    uint64_t v36 = a2;
  }
  else {
    uint64_t v36 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  a5(v35, v36, a3);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(v35, v44, v45, v46, v47, v48, v49, v50);
}

void sub_10014879C(uint64_t a1, id a2)
{
  Class isa = (Class)[a2 PCSServiceID];
  if (!isa)
  {
    sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
    Class isa = NSNumber.init(integerLiteral:)(-1LL).super.super.isa;
  }

  int v5 = Int32.init(truncating:)(isa);

  *(_DWORD *)a1 = v5;
  id v6 = [a2 PCSPublicKey];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0xC000000000000000LL;
  }

  sub_10000852C(*(void *)(a1 + 8), *(void *)(a1 + 16));
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v10;
  id v11 = [a2 zoneID];
  if (v11)
  {
    uint64_t v19 = v11;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v22 = v21;
  }

  else
  {
    uint64_t v20 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 32), v12, v13, v14, v15, v16, v17, v18);
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v22;
}

uint64_t sub_1001488BC(uint64_t a1, void (*a2)(void *, void *, uint64_t), uint64_t a3)
{
  id v100 = a2;
  uint64_t v5 = type metadata accessor for DirectPCSIdentity(0LL);
  uint64_t v98 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v103 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v97 - v15;
  uint64_t Response = type metadata accessor for DirectPCSIdentityFetchResponse(0LL);
  __chkstk_darwin(Response, v18);
  uint64_t v20 = (_TtC18TrustedPeersHelper6Client **)((char *)v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = sub_100007578(&qword_100251D88);
  __chkstk_darwin(v21, v22);
  id v24 = (void *)((char *)v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FC68(a1, (uint64_t)v24, &qword_100251D88);
  if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
  {
    uint64_t v25 = *v24;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v26, (uint64_t)qword_1002567D0);
    swift_errorRetain(v25);
    uint64_t v27 = swift_errorRetain(v25);
    SEL v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v32 = static os_log_type_t.error.getter(v28, v29, v30, v31);
    if (os_log_type_enabled(v28, v32))
    {
      BOOL v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v104 = v25;
      uint64_t v105 = v34;
      *(_DWORD *)BOOL v33 = 136446210;
      swift_errorRetain(v25);
      uint64_t v35 = sub_100007578(&qword_100251D70);
      uint64_t v36 = String.init<A>(describing:)(&v104, v35);
      id v38 = (_TtC18TrustedPeersHelper6Client *)v37;
      uint64_t v104 = sub_10017C4C4(v36, v37, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v32, "fetchPCSIdentityByKey failed: %{public}s", v33, 0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    id v65 = v100;
    swift_errorRetain(v25);
    v65(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v25);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    v97[1] = a3;
    sub_100041608((uint64_t)v24, (uint64_t)v20, type metadata accessor for DirectPCSIdentityFetchResponse);
    int64_t v46 = v20[1];
    uint64_t v105 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v47 = *(void *)v46->endpoint;
    SEL v99 = v20;
    if (v47)
    {
      uint64_t v48 = sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
      BOOL v49 = &v46->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80)];
      uint64_t v101 = *(void *)(v103 + 72);
      uint64_t v102 = v48;
      BOOL v50 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v103 + 16);
      v97[0] = v46;
      swift_bridgeObjectRetain(v46);
      do
      {
        v50(v16, v49, v9);
        v50(v13, (unsigned __int8 *)v16, v9);
        uint64_t v59 = CKRecord.init(_:)(v13);
        uint64_t v60 = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v16, v9);
        if (v59)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
          unint64_t v62 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v61 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v62 >= v61 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1LL);
          }
          uint64_t v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
          specialized Array._endMutation()(v51);
        }

        v49 += v101;
        --v47;
      }

      while (v47);
      id v63 = (_TtC18TrustedPeersHelper6Client *)v105;
      uint64_t v20 = v99;
      id v64 = (void (*)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, void))v100;
      int64_t v46 = (_TtC18TrustedPeersHelper6Client *)v97[0];
    }

    else
    {
      swift_bridgeObjectRetain(v46);
      id v63 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      id v64 = (void (*)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, void))v100;
    }

    swift_bridgeObjectRelease(v46, v52, v53, v54, v55, v56, v57, v58);
    id v67 = *v20;
    uint64_t v68 = *(void *)(*v20)->endpoint;
    id v69 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    if (v68)
    {
      uint64_t v105 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v67);
      specialized ContiguousArray.reserveCapacity(_:)(v68);
      uint64_t v70 = (uint64_t)&v67->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v98 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80)];
      uint64_t v71 = *(void *)(v98 + 72);
      do
      {
        sub_10004164C(v70, (uint64_t)v8, type metadata accessor for DirectPCSIdentity);
        uint64_t v72 = sub_1000464F0();
        uint64_t v73 = sub_1000415CC((uint64_t)v8, type metadata accessor for DirectPCSIdentity);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v73);
        uint64_t v74 = *(void *)(v105 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v74);
        uint64_t v75 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v72);
        specialized ContiguousArray._endMutation()(v75);
        v70 += v71;
        --v68;
      }

      while (v68);
      id v69 = (_TtC18TrustedPeersHelper6Client *)v105;
      swift_bridgeObjectRelease(v67, v76, v77, v78, v79, v80, v81, v82);
      id v64 = (void (*)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, void))v100;
    }

    v64(v69, v63, 0LL);
    swift_bridgeObjectRelease(v69, v83, v84, v85, v86, v87, v88, v89);
    swift_bridgeObjectRelease(v63, v90, v91, v92, v93, v94, v95, v96);
    return sub_1000415CC((uint64_t)v99, type metadata accessor for DirectPCSIdentityFetchResponse);
  }

id sub_100148E48()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Container();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100148F54(uint64_t a1)
{
  uint64_t v3 = (void *)(*v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish);
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  sub_1000084C4(v3, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 + 8) + 8LL))(a1, v4) & 1;
}

void sub_100148FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100149010( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1001491F4LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *unint64_t v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_100149218(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v3 = 0LL;
  uint64_t v31 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v32 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v33 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }

    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_45;
    }

    if (v10 >= v32) {
      return 1LL;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v32) {
        return 1LL;
      }
      unint64_t v11 = *(void *)(v31 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v32) {
          return 1LL;
        }
        unint64_t v11 = *(void *)(v31 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v32) {
            return 1LL;
          }
          unint64_t v11 = *(void *)(v31 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }

LABEL_45:
  __break(1u);
  return result;
}

                a5[3] = v15;
                a5[4] = 0LL;
                swift_retain(a3);
                return (unint64_t *)sub_1001511DC(v41, a2, v40, a3);
              }

              goto LABEL_15;
            }
          }

          uint64_t v13 = v18;
        }

      unint64_t v9 = v21;
    }

uint64_t sub_1001494B8(char a1, int64_t a2, char a3, _TtC18TrustedPeersHelper6Client *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)a4->containerMap;
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)a4->endpoint;
  if (v7 <= v8) {
    uint64_t v9 = *(void *)a4->endpoint;
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100007578(&qword_100256D68);
  uint64_t v11 = *(void *)(type metadata accessor for TLKShare(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  *(void *)v15->endpoint = v8;
  *(void *)v15->containerMap = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for TLKShare(0LL);
  uint64_t v23 = *(void *)(v18 - 8);
  unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (char *)&v15->_TtCs12_SwiftObject_opaque[v24];
  if ((a1 & 1) != 0)
  {
    int64_t v26 = v18;
    uint64_t v27 = (const char *)&a4->_TtCs12_SwiftObject_opaque[v24];
    if (v15 < a4 || v25 >= &v27[*(void *)(v23 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(&v15->_TtCs12_SwiftObject_opaque[v24], v27, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(&v15->_TtCs12_SwiftObject_opaque[v24]);
    }

    *(void *)a4->endpoint = 0LL;
  }

  else
  {
    sub_100161254(0LL, v8, (unint64_t)v25, (uint64_t)a4);
  }

  swift_bridgeObjectRelease(a4, v27, v25, v26, v19, v20, v21, v22);
  return (uint64_t)v15;
}

_TtC18TrustedPeersHelper6Client *sub_1001496C0( _TtC18TrustedPeersHelper6Client *result, int64_t a2, char a3, _TtC18TrustedPeersHelper6Client *a4, void *a5, void *a6, BOOL a7, BOOL a8)
{
  char v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v11 = a2;
    goto LABEL_8;
  }

  unint64_t v10 = *(void *)a4->containerMap;
  uint64_t v11 = v10 >> 1;
  if (v11 + 0x4000000000000000LL >= 0)
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v12 = *(void *)a4->endpoint;
    if (v11 <= v12) {
      uint64_t v13 = *(void *)a4->endpoint;
    }
    else {
      uint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = sub_100007578(&qword_100256E58);
      uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(v14, 8 * v13 + 32, 7LL);
      int64_t v16 = j__malloc_size(v15);
      uint64_t v17 = v16 - 32;
      if (v16 < 32) {
        uint64_t v17 = v16 - 25;
      }
      *(void *)v15->endpoint = v12;
      *(void *)v15->containerMap = 2 * (v17 >> 3);
      TtCs12_SwiftObject_opaque = v15[1]._TtCs12_SwiftObject_opaque;
      if ((v9 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      TtCs12_SwiftObject_opaque = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        uint64_t v19 = a4 + 1;
        if (v15 != a4 || TtCs12_SwiftObject_opaque >= &a4[1]._TtCs12_SwiftObject_opaque[8 * v12]) {
          memmove(TtCs12_SwiftObject_opaque, v19, 8 * v12);
        }
        *(void *)a4->endpoint = 0LL;
        goto LABEL_24;
      }
    }

    sub_10016136C(0LL, v12, (unint64_t)TtCs12_SwiftObject_opaque, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, TtCs12_SwiftObject_opaque, (int64_t)a4, a5, a6, a7, a8);
    return v15;
  }

  __break(1u);
  return result;
}

_TtC18TrustedPeersHelper6Client *sub_1001497CC( _TtC18TrustedPeersHelper6Client *result, int64_t a2, char a3, _TtC18TrustedPeersHelper6Client *a4, void *a5, void *a6, BOOL a7, BOOL a8)
{
  char v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v11 = a2;
    goto LABEL_8;
  }

  unint64_t v10 = *(void *)a4->containerMap;
  uint64_t v11 = v10 >> 1;
  if (v11 + 0x4000000000000000LL >= 0)
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v12 = *(void *)a4->endpoint;
    if (v11 <= v12) {
      uint64_t v13 = *(void *)a4->endpoint;
    }
    else {
      uint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = sub_100007578(&qword_100256E38);
      uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(v14, 40 * v13 + 32, 7LL);
      size_t v16 = j__malloc_size(v15);
      *(void *)v15->endpoint = v12;
      *(void *)v15->containerMap = 2 * ((uint64_t)(v16 - 32) / 40);
      TtCs12_SwiftObject_opaque = v15[1]._TtCs12_SwiftObject_opaque;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        uint64_t v18 = a4 + 1;
        if (v15 != a4 || TtCs12_SwiftObject_opaque >= &a4[1]._TtCs12_SwiftObject_opaque[40 * v12]) {
          memmove(TtCs12_SwiftObject_opaque, v18, 40 * v12);
        }
        *(void *)a4->endpoint = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      TtCs12_SwiftObject_opaque = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    }

    sub_10015B1A0(0LL, v12, (unint64_t)TtCs12_SwiftObject_opaque, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, TtCs12_SwiftObject_opaque, (int64_t)a4, a5, a6, a7, a8);
    return v15;
  }

  __break(1u);
  return result;
}

void *sub_1001498EC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100007578((uint64_t *)&unk_100251820);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100159FC0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1001499F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100007578(&qword_1002570F8);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100166590(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

_TtC18TrustedPeersHelper6Client *sub_100149B04( _TtC18TrustedPeersHelper6Client *result, int64_t a2, char a3, _TtC18TrustedPeersHelper6Client *a4, void *a5, void *a6, BOOL a7, BOOL a8)
{
  char v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v11 = a2;
    goto LABEL_8;
  }

  unint64_t v10 = *(void *)a4->containerMap;
  uint64_t v11 = v10 >> 1;
  if (v11 + 0x4000000000000000LL >= 0)
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v12 = *(void *)a4->endpoint;
    if (v11 <= v12) {
      uint64_t v13 = *(void *)a4->endpoint;
    }
    else {
      uint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = sub_100007578(&qword_100256E30);
      uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(v14, 16 * v13 + 32, 7LL);
      int64_t v16 = j__malloc_size(v15);
      uint64_t v17 = v16 - 32;
      if (v16 < 32) {
        uint64_t v17 = v16 - 17;
      }
      *(void *)v15->endpoint = v12;
      *(void *)v15->containerMap = 2 * (v17 >> 4);
      TtCs12_SwiftObject_opaque = v15[1]._TtCs12_SwiftObject_opaque;
      if ((v9 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
      TtCs12_SwiftObject_opaque = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        uint64_t v19 = a4 + 1;
        if (v15 != a4 || TtCs12_SwiftObject_opaque >= &a4[1]._TtCs12_SwiftObject_opaque[16 * v12]) {
          memmove(TtCs12_SwiftObject_opaque, v19, 16 * v12);
        }
        *(void *)a4->endpoint = 0LL;
        goto LABEL_24;
      }
    }

    sub_10016D668(0LL, v12, (unint64_t)TtCs12_SwiftObject_opaque, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, TtCs12_SwiftObject_opaque, (int64_t)a4, a5, a6, a7, a8);
    return v15;
  }

  __break(1u);
  return result;
}

uint64_t sub_100149C10(uint64_t a1, void *a2)
{
  int64_t v3 = v2;
  Swift::Int v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1LL))
  {
    Swift::Int v6 = sub_100149CB0(v7, result + 1);
    *int64_t v3 = v6;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    Swift::Int v11 = *v3;
    *int64_t v3 = 0x8000000000000000LL;
    sub_10014CA2C(a1, a2, isUniquelyReferenced_nonNull_native);
    Swift::Int v10 = *v3;
    *int64_t v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }

  __break(1u);
  return result;
}

Swift::Int sub_100149CB0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100007578(&qword_100256DD0);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
      do
      {
        uint64_t v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v27 = v9;
        uint64_t v21 = sub_100007620(0LL, &qword_100256DB8, &OBJC_CLASS___TPPolicyDocument_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v4 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_10014B500(v22 + 1, 1LL);
          uint64_t v4 = v30;
        }

        uint64_t v12 = v28;
        uint64_t v11 = v29;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v17 == v24;
            if (v17 == v24) {
              unint64_t v17 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v14 + 8 * v17);
          }

          while (v26 == -1);
          unint64_t v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  return v4;
}

uint64_t sub_100149F00(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100007578(&qword_100251588);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v12) {
      break;
    }
    uint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v15);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v15 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v15);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v22;
      }
    }

LABEL_24:
    unint64_t v11 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    char v23 = *(void **)(*(void *)(v5 + 48) + 8 * v18);
    unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
    if ((a2 & 1) != 0)
    {
      sub_100008570(v24, v39);
    }

    else
    {
      sub_100061664((uint64_t)v24, (uint64_t)v39);
      id v25 = v23;
    }

    Hasher.init(_seed:)(v38);
    type metadata accessor for CFString(0LL);
    uint64_t v27 = v26;
    uint64_t v28 = sub_1000077B8( &qword_100256EF0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE368);
    _CFObject.hash(into:)(v38, v27, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v8 + 48) + 8 * v16) = v23;
    uint64_t result = (uint64_t)sub_100008570(v39, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v20 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v20, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v20 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *int64_t v3 = v8;
  return result;
}

        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      unint64_t v24 = *v22;
      char v23 = v22[1];
      id v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100008570(v25, v38);
      }

      else
      {
        sub_100061664((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        int64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          unint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          char v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        int64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *unint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_100008570(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *int64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    uint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      uint64_t v27 = *(_OWORD *)v26;
      uint64_t v28 = *(_OWORD *)(v26 + 16);
      int64_t v41 = *(void *)(v26 + 32);
      uint64_t v39 = v27;
      uint64_t v40 = v28;
      sub_100008570((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_10000DE70(v26, (uint64_t)&v39);
      sub_100061664(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    unint64_t v17 = *(void *)(v8 + 48) + 40 * v16;
    unint64_t v18 = v39;
    int64_t v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)unint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    uint64_t result = (uint64_t)sub_100008570(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  char v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *char v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *int64_t v3 = v8;
  return result;
}

        uint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        uint64_t v9 = v14;
      }

      unint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      unint64_t v18 = *v16;
      unint64_t v17 = v16[1];
      Hasher.init(_seed:)(v43);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v43, v18, v17);
      int64_t v19 = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }

    int64_t v22 = *(void *)(v2 + 48);
    char v23 = (void *)(v22 + 16 * v21);
    unint64_t v24 = v23[1];
    id v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      char v44 = a1;
      char v45 = v42;
      char v46 = v40;
      char v47 = v9;
      uint64_t v48 = v7;
    }

    else
    {
      uint64_t v26 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v27 = (void *)(v22 + 16 * v21);
        uint64_t v28 = v27[1];
        uint64_t v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      char v44 = a1;
      char v45 = v42;
      char v46 = v40;
      char v47 = v9;
      uint64_t v48 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }

    char v32 = *(_BYTE *)(v2 + 32);
    unint64_t v33 = v32 & 0x3F;
    BOOL v34 = (1LL << v32) + 63;
    uint64_t v35 = v34 >> 6;
    uint64_t v36 = 8 * (v34 >> 6);
    if (v33 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v34 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe, v31);
      memcpy((char *)&v40 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v36);
      uint64_t v37 = sub_100156A64((unint64_t *)((char *)&v40 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v35, v2, v21, &v44);
      swift_release(v2);
      sub_100172694(v44);
    }

    else
    {
      id v38 = (void *)swift_slowAlloc(v36, -1LL);
      memcpy(v38, (const void *)(v2 + 56), v36);
      uint64_t v37 = sub_100156A64((unint64_t *)v38, v35, v2, v21, &v44);
      swift_release(v2);
      sub_100172694(v44);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    return v37;
  }

  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v2, v4, v5, v6, v7, v8, v9, v10);
  return _swiftEmptyArrayStorage;
}

        __break(1u);
        goto LABEL_25;
      }

        __break(1u);
        goto LABEL_25;
      }

uint64_t sub_10014A220(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100007578(&qword_100251530);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    BOOL v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              int64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

Swift::Int sub_10014A51C(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100007578((uint64_t *)&unk_100256B40);
  char v41 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v37 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v39 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v14 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v14 << 6);
      }

      else
      {
        int64_t v22 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v22 >= v38) {
          goto LABEL_36;
        }
        unint64_t v23 = v39[v22];
        ++v14;
        if (!v23)
        {
          int64_t v14 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_36;
          }
          unint64_t v23 = v39[v14];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_36:
              swift_release(v5);
              int64_t v3 = v37;
              if ((v41 & 1) != 0)
              {
                uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v39 = -1LL << v36;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v14 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v38) {
                  goto LABEL_36;
                }
                unint64_t v23 = v39[v14];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v14 = v24;
          }
        }

uint64_t sub_10014A860(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100007578(&qword_100251560);
  int v46 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_43;
  }
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  char v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain(v11);
  int64_t v20 = 0LL;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v43) {
      break;
    }
    char v25 = v44;
    unint64_t v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_36;
      }
      unint64_t v26 = v44[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_36:
          swift_release(v11);
          int64_t v3 = v42;
          if ((v46 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v20 >= v43) {
              goto LABEL_36;
            }
            unint64_t v26 = v44[v20];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        int64_t v20 = v27;
      }
    }

Swift::Int sub_10014ABF4(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100007578(&qword_100257090);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    char v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          int64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_10014AF18(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100007578(&qword_100251540);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

void sub_10014B22C(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100007578(&qword_100256DA8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v15 = v7;
  if (*(void *)(v5 + 16))
  {
    char v47 = v3;
    uint64_t v16 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v17 = (void *)(v5 + 64);
    if (v16 < 64) {
      uint64_t v18 = ~(-1LL << v16);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v19 = v18 & *(void *)(v5 + 64);
    int64_t v20 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v21 = v7 + 64;
    swift_retain(v5);
    int64_t v29 = 0LL;
    while (1)
    {
      if (v19)
      {
        unint64_t v35 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v36 = v35 | (v29 << 6);
      }

      else
      {
        int64_t v37 = v29 + 1;
        if (__OFADD__(v29, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }

        if (v37 >= v20) {
          goto LABEL_36;
        }
        unint64_t v38 = v17[v37];
        ++v29;
        if (!v38)
        {
          int64_t v29 = v37 + 1;
          if (v37 + 1 >= v20) {
            goto LABEL_36;
          }
          unint64_t v38 = v17[v29];
          if (!v38)
          {
            int64_t v39 = v37 + 2;
            if (v39 >= v20)
            {
LABEL_36:
              swift_release((_TtC18TrustedPeersHelper6Client *)v5, v22, v23, v24, v25, v26, v27, v28);
              if ((a2 & 1) == 0)
              {
                swift_release((_TtC18TrustedPeersHelper6Client *)v5, v8, v9, v10, v11, v12, v13, v14);
                int64_t v3 = v47;
                goto LABEL_43;
              }

              uint64_t v46 = 1LL << *(_BYTE *)(v5 + 32);
              if (v46 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v17 = -1LL << v46;
              }
              int64_t v3 = v47;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v38 = v17[v39];
            if (!v38)
            {
              while (1)
              {
                int64_t v29 = v39 + 1;
                if (__OFADD__(v39, 1LL)) {
                  goto LABEL_45;
                }
                if (v29 >= v20) {
                  goto LABEL_36;
                }
                unint64_t v38 = v17[v29];
                ++v39;
                if (v38) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v29 = v39;
          }
        }

Swift::Int sub_10014B500(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100007578(&qword_100256DD0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  int64_t v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          int64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_10014B7D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100007578(a3);
  char v40 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v37 = v4;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          uint64_t v4 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_10014BAD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100007578(a3);
  char v38 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v36) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v36) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

_OWORD *sub_10014BDE8(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10000D160((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      int64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = (void *)(v15[7] + 32 * v9);
        sub_100007600(v16);
        return sub_100008570(a1, v16);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10014D05C();
      goto LABEL_7;
    }

    sub_100149F00(v12, a3 & 1);
    unint64_t v18 = sub_10000D160((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      int64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10014CE80(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  type metadata accessor for CFString(0LL);
  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

_OWORD *sub_10014BF08(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000D1E8(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        char v19 = (void *)(v18[7] + 32 * v12);
        sub_100007600(v19);
        return sub_100008570(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10014D220();
      goto LABEL_7;
    }

    sub_10014A220(v15, a4 & 1);
    unint64_t v21 = sub_10000D1E8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10014CEE4(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

id sub_10014C040(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 2:
    case 8:
      Swift::Int result = (id)swift_bridgeObjectRetain(a2);
      break;
    case 3:
    case 6:
    case 10:
    case 11:
      Swift::Int result = (id)swift_errorRetain(result);
      break;
    case 9:
      Swift::Int result = result;
      break;
    default:
      return result;
  }

  return result;
}

void destroy for ContainerError(uint64_t a1)
{
}

uint64_t _s18TrustedPeersHelper14ContainerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10014C040(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ContainerError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10014C040(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000DD904(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ContainerError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000DD904(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContainerError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF3 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 243);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xD) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContainerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)Swift::Int result = a2 - 243;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xF3) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF3) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10014C1F8(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 13);
  }
}

uint64_t sub_10014C210(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xD)
  {
    *(void *)Swift::Int result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 13;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContainerError()
{
  return &type metadata for ContainerError;
}

uint64_t type metadata accessor for Container()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper9Container);
}

uint64_t type metadata accessor for Container.SemaphoreWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtCC18TrustedPeersHelper9Container16SemaphoreWrapper);
}

uint64_t type metadata accessor for Container.DBAdapter()
{
  return objc_opt_self(&OBJC_CLASS____TtCC18TrustedPeersHelper9Container9DBAdapter);
}

uint64_t destroy for ContainerName(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for ContainerName(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for ContainerName(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for ContainerName(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for ContainerName(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContainerName(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContainerName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ContainerName()
{
  return &type metadata for ContainerName;
}

unint64_t sub_10014C454()
{
  unint64_t result = qword_100256B38;
  if (!qword_100256B38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001E64C8, &type metadata for ContainerName);
    atomic_store(result, (unint64_t *)&qword_100256B38);
  }

  return result;
}

void sub_10014C498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_10000D0B4(a2, a3, a4, a5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_10014D404();
LABEL_7:
    char v22 = (void *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = a1;
      return;
    }

void sub_10014C624(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_10000D2AC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7];

      *(void *)(v22 + 8 * v15) = a1;
      return;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10014D5CC();
    goto LABEL_7;
  }

  sub_10014A860(v18, a3 & 1);
  unint64_t v23 = sub_10000D2AC(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v15 = v23;
  uint64_t v21 = *v4;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  sub_10014CF4C(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_10014C780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10000D1E8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10014D7F4();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease(v21[1]);
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }

_OWORD *sub_10014C8F4(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10000D24C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100007600(v17);
        return sub_100008570(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10014D9AC();
      goto LABEL_7;
    }

    sub_10014AF18(v13, a3 & 1);
    unint64_t v19 = sub_10000D24C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10000DE70(a2, (uint64_t)v21);
      return sub_10014CFE4(v10, (uint64_t)v21, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10014CA2C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10000D27C((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10014DB90();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }

void sub_10014CB8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10000D1E8(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10014DD34(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

uint64_t sub_10014CD00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10014CD0C(a1, a2, a3, a4, (uint64_t *)&unk_100256C40);
}

uint64_t sub_10014CD0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10000D1E8(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10014DEDC(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

_OWORD *sub_10014CE80(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100008570(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *sub_10014CEE4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100008570(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_10014CF4C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_10014CFE4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100008570(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

id sub_10014D05C()
{
  uint64_t v1 = v0;
  sub_100007578(&qword_100251588);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_10014D220()
{
  uint64_t v1 = v0;
  sub_100007578(&qword_100251530);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

LABEL_30:
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

id sub_10014D404()
{
  uint64_t v1 = v0;
  sub_100007578((uint64_t *)&unk_100256B40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

id sub_10014D5CC()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100007578(&qword_100251560);
  unint64_t v25 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v6);
    uint64_t *v25 = v8;
    return result;
  }

  id result = (id)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v12 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v26 = v6 + 64;
  int64_t v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v12);
      if (!v22) {
        break;
      }
    }

void *sub_10014D7F4()
{
  uint64_t v1 = v0;
  sub_100007578(&qword_100257090);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_10014D9AC()
{
  uint64_t v1 = v0;
  sub_100007578(&qword_100251540);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

id sub_10014DB90()
{
  uint64_t v1 = v0;
  sub_100007578(&qword_100256DD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_10014DD34(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100007578(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

void *sub_10014DEDC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100007578(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

uint64_t sub_10014E088()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10014E0AC(void *a1@<X8>)
{
}

uint64_t sub_10014E0C4(uint64_t a1, uint64_t a2)
{
  return sub_1000E8E60(a1, a2, v2);
}

uint64_t sub_10014E0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10014E0EC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10014E0F4()
{
}

uint64_t sub_10014E118(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10014E128()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10014E154()
{
  return sub_1000E8B54(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_10014E160()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014E170()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *sub_10014E190(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100007578(&qword_1002515D8);
  uint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  uint64_t v7 = sub_100157028(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100172694(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t **sub_10014E278(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return (uint64_t **)_swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaSet.count.getter(a1);
  if (!v2) {
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    uint64_t v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_100007578(&qword_1002515D8);
    uint64_t v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7LL);
    int64_t v5 = j__malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }

  swift_bridgeObjectRetain(v1);
  uint64_t v7 = sub_100157220(&v9, v4 + 4, v2, v1);
  id result = (uint64_t **)sub_100172694(v9);
  __break(1u);
  return result;
}

void *sub_10014E370(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100007578((uint64_t *)&unk_100251820);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_100157528((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100172694(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10014E454(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  if (v5 > 0)
  {
    uint64_t v8 = sub_100007578(&qword_100256D68);
    uint64_t v9 = *(void *)(type metadata accessor for TLKShare(0LL) - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v12 = (v11 + 32) & ~v11;
    unint64_t v13 = (void *)swift_allocObject(v8, v12 + v10 * v5, v11 | 7);
    size_t v14 = j__malloc_size(v13);
    if (!v10)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }

    if (v14 - v12 == 0x8000000000000000LL && v10 == -1) {
      goto LABEL_23;
    }
    v13[2] = v5;
    v13[3] = 2 * ((uint64_t)(v14 - v12) / v10);
    if (v4 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

  unint64_t v13 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

uint64_t sub_10014E61C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014E7D8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E638(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014E960(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10014E654(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014EAE0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E670(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014EC68(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10014E68C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014EDD0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E6A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014EF58(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10014E6C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014F0B4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10014E6E0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014F388(a1, a2, a3, (void *)*v3, &qword_100256D68, type metadata accessor for TLKShare);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E70C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014F388(a1, a2, a3, (void *)*v3, &qword_100256EC0, type metadata accessor for ViewKeys);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E738(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014F388(a1, a2, a3, (void *)*v3, &qword_100256DF8, type metadata accessor for PolicyDocumentKey);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E764( char a1, int64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result = sub_10014F220(a1, a2, a3, *v8, a5, a6, a7, a8);
  *uint64_t v8 = (_TtC18TrustedPeersHelper6Client *)result;
  return result;
}

uint64_t sub_10014E780(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014F388( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_100256F60,  type metadata accessor for CurrentCKKSItemSpecifier);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E7AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014F388(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_100256F30, type metadata accessor for PCSService);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10014E7D8(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578(&qword_100256BC8);
    uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100007578((uint64_t *)&unk_100256BD0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10014E960(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578(&qword_1002515D0);
    uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8]) {
      memmove(v13, v14, 40 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10014EAE0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578(&qword_100256BB8);
    uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8) {
      memmove(v11 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_100007578(&qword_100256BC0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10014EC68(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578((uint64_t *)&unk_100251820);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10014EDD0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578(&qword_1002570F8);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100007578(&qword_1002570A8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10014EF58(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578(&qword_100256D98);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10014F0B4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578(&qword_100256C28);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10014F220( char a1, int64_t a2, void *a3, _TtC18TrustedPeersHelper6Client *a4, void *a5, void *a6, void *a7, void *a8)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v10 = *(void *)a4->containerMap;
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v11 = a2;
  }

  uint64_t v12 = *(void *)a4->endpoint;
  if (v11 <= v12) {
    uint64_t v13 = *(void *)a4->endpoint;
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    uint64_t v14 = sub_100007578(&qword_100256E30);
    unint64_t v15 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(v14, 16 * v13 + 32, 7LL);
    int64_t v16 = j__malloc_size(v15);
    uint64_t v17 = v16 - 32;
    if (v16 < 32) {
      uint64_t v17 = v16 - 17;
    }
    *(void *)v15->endpoint = v12;
    *(void *)v15->containerMap = 2 * (v17 >> 4);
  }

  else
  {
    unint64_t v15 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  uint64_t v18 = v15 + 1;
  unint64_t v19 = a4 + 1;
  if ((a1 & 1) != 0)
  {
    *(void *)a4->endpoint = 0LL;
    goto LABEL_30;
  }

  if (v19 >= (_TtC18TrustedPeersHelper6Client *)((char *)v18 + 16 * v12)
    || v18 >= (_TtC18TrustedPeersHelper6Client *)((char *)v19 + 16 * v12))
  {
    swift_arrayInitWithCopy(v18);
LABEL_30:
    swift_release(a4, (SEL)v19, a3, a4, a5, a6, a7, a8);
    return (uint64_t)v15;
  }

uint64_t sub_10014F388( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100007578(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (char *)v18 + v23;
  int64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  int64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

Swift::Int sub_10014F568( uint64_t (*a1)(id *), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void))
{
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    unint64_t v6 = &_swiftEmptySetSingleton;
    uint64_t v31 = &_swiftEmptySetSingleton;
    if (a3 < 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v10 = __CocoaSet.makeIterator()(v9);
    uint64_t v11 = __CocoaSet.Iterator.next()(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      unint64_t v6 = (void *)a5(0LL);
      do
      {
        uint64_t v29 = v12;
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v6, 7LL);
        char v14 = a1(&v30);
        if (v5)
        {
          swift_release(v10);

          swift_release(v31);
          return (Swift::Int)v6;
        }

        id v15 = v30;
        if ((v14 & 1) != 0)
        {
          uint64_t v16 = v31;
          unint64_t v17 = v31[2];
          if (v31[3] <= v17)
          {
            sub_10014FFE4(v17 + 1, a4);
            uint64_t v16 = v31;
          }

          Swift::Int result = NSObject._rawHashValue(seed:)(v16[5]);
          uint64_t v18 = v16 + 7;
          uint64_t v19 = -1LL << *((_BYTE *)v16 + 32);
          unint64_t v20 = result & ~v19;
          unint64_t v21 = v20 >> 6;
          if (((-1LL << v20) & ~v16[(v20 >> 6) + 7]) != 0)
          {
            unint64_t v22 = __clz(__rbit64((-1LL << v20) & ~v16[(v20 >> 6) + 7])) | v20 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v23 = 0;
            unint64_t v24 = (unint64_t)(63 - v19) >> 6;
            do
            {
              if (++v21 == v24 && (v23 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              BOOL v25 = v21 == v24;
              if (v21 == v24) {
                unint64_t v21 = 0LL;
              }
              v23 |= v25;
              uint64_t v26 = v18[v21];
            }

            while (v26 == -1);
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          }

          *(void *)((char *)v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
          *(void *)(v16[6] + 8 * v22) = v15;
          ++v16[2];
        }

        else
        {
        }

        uint64_t v12 = __CocoaSet.Iterator.next()(result);
      }

      while (v12);
      unint64_t v6 = v31;
    }

    swift_release(v10);
  }

  else
  {
    uint64_t v27 = sub_100150464((uint64_t)a1, a2, a3, a4);
    if (!v5) {
      return v27;
    }
  }

  return (Swift::Int)v6;
}

Swift::Int sub_10014F7A8(uint64_t a1)
{
  return sub_10014FFE4(a1, (uint64_t *)&unk_100256E90);
}

Swift::Int sub_10014F7B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100007578(&qword_100256BA0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

LABEL_26:
        unint64_t v9 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      Swift::Int result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      void *v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        int64_t v10 = (v20 - 1) & v20;
        int64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      uint64_t v22 = *(void *)(v3 + 48) + 40 * v18;
      uint64_t v32 = *(_OWORD *)v22;
      uint64_t v33 = *(_OWORD *)(v22 + 16);
      uint64_t v34 = *(void *)(v22 + 32);
      Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        id v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          BOOL v29 = *(void *)(v12 + 8 * v25);
        }

        while (v29 == -1);
        id v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      unint64_t v16 = *(void *)(v6 + 48) + 40 * v15;
      *(_OWORD *)unint64_t v16 = v32;
      *(_OWORD *)(v16 + 16) = v33;
      *(void *)(v16 + 32) = v34;
      ++*(void *)(v6 + 16);
    }
  }

  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      int64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Swift::Int result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      unint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          char v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        int64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      uint64_t v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          BOOL v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  Swift::Int result = swift_release(v4);
  *uint64_t v3 = v7;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    int64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    Swift::Int result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    void *v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    int64_t v10 = (v22 - 1) & v22;
    int64_t v20 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_27:
    sub_10000DE70(*(void *)(v3 + 48) + 40 * v20, (uint64_t)v32);
    Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v6 + 40));
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      id v15 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v26);
      }

      while (v30 == -1);
      id v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    unint64_t v16 = *(void *)(v6 + 48) + 40 * v15;
    unint64_t v17 = v32[0];
    int64_t v18 = v32[1];
    *(void *)(v16 + 32) = v33;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(void *)(v6 + 16);
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v11)
  {
LABEL_36:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v22 = *(void *)(v8 + 8 * v23);
  if (v22)
  {
    unint64_t v14 = v23;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v22 = *(void *)(v8 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    int64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Swift::Int result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    unint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        char v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    Swift::Int result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  int64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    int64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v20 - 1) & v20;
    int64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    uint64_t v22 = *(void *)(v7 + 40);
    uint64_t v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    Swift::Int result = NSObject._rawHashValue(seed:)(v22);
    uint64_t v24 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      unint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
    ++*(void *)(v7 + 16);
  }

  unint64_t v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    Swift::Int result = swift_release_n(v4, 2LL);
    uint64_t v3 = v31;
    goto LABEL_38;
  }

  int64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    id v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    id v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    int64_t v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_27;
    }

    __break(1u);
    goto LABEL_26;
  }

  if ((a3 & 1) != 0)
  {
    if (v9 < 0) {
      int64_t v10 = *v5;
    }
    else {
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v11 = __CocoaSet.member(for:)(a1, a2, v10);
    __int128 v48 = v11;
    uint64_t v12 = type metadata accessor for BottleMO();
    swift_bridgeObjectRetain(v9);
    swift_unknownObjectRetain(v11, v13);
    swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
    unint64_t v14 = (char *)v49;
    swift_unknownObjectRelease(v11);
    sub_100155A2C(v10, v14, v15, v16, v17, v18, v19, v20);

    unint64_t v28 = (_TtC18TrustedPeersHelper6Client *)v9;
LABEL_23:
    swift_bridgeObjectRelease(v28, v21, v22, v23, v24, v25, v26, v27);
    return;
  }

  uint64_t v43 = (v22 - 1) & v22;
  int64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; int64_t v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    unint64_t v25 = 16 * v20;
    unint64_t v26 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v20);
    unint64_t v28 = *v26;
    char v27 = v26[1];
    BOOL v29 = (uint64_t *)(*(void *)(v1 + 56) + v25);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    id v45 = v28;
    uint64_t v46 = v27;
    v44[0] = v30;
    v44[1] = v31;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_dynamicCast(v7, v44, v12, v11, 7LL);
    uint64_t v32 = v45;
    uint64_t v33 = v46;
    sub_100008570(v7, v8);
    sub_100008570(v8, v50);
    sub_100008570(v50, &v48);
    Swift::Int result = sub_10000D1E8(v32, v33);
    uint64_t v34 = result;
    if ((v35 & 1) != 0)
    {
      BOOL v42 = i;
      int64_t v13 = v8;
      unint64_t v14 = v7;
      id v15 = v1;
      unint64_t v16 = v12;
      unint64_t v17 = v11;
      int64_t v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *int64_t v18 = v32;
      v18[1] = v33;
      uint64_t v11 = v17;
      uint64_t v12 = v16;
      uint64_t v1 = v15;
      uint64_t v7 = v14;
      uint64_t v8 = v13;
      uint64_t i = v42;
      unint64_t v19 = (void *)(v3[7] + 32 * v34);
      sub_100007600(v19);
      Swift::Int result = (unint64_t)sub_100008570(&v48, v19);
      uint64_t v6 = v43;
      if (!v43) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    int64_t v36 = (uint64_t *)(v3[6] + 16 * result);
    *int64_t v36 = v32;
    v36[1] = v33;
    Swift::Int result = (unint64_t)sub_100008570(&v48, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v37 = v3[2];
    char v38 = __OFADD__(v37, 1LL);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_34;
    }
    v3[2] = v39;
    uint64_t v6 = v43;
    if (!v43) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v43 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  uint64_t v6 = (v13 - 1) & v13;
  uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; uint64_t v11 = v10 | (i << 6))
  {
    unint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    int64_t v18 = *v16;
    unint64_t v17 = v16[1];
    sub_10000DE70(*(void *)(a1 + 56) + 40 * v11, (uint64_t)v40);
    char v38 = v18;
    uint64_t v39 = v17;
    v30[0] = v40[0];
    v30[1] = v40[1];
    uint64_t v31 = v41;
    uint64_t v32 = v18;
    uint64_t v33 = v17;
    swift_bridgeObjectRetain(v17);
    swift_dynamicCast(v34, v30, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7LL);
    int64_t v20 = v32;
    unint64_t v19 = v33;
    sub_100008570(v34, v36);
    sub_100008570(v36, v37);
    sub_100008570(v37, &v35);
    Swift::Int result = sub_10000D1E8(v20, v19);
    unint64_t v21 = result;
    if ((v22 & 1) != 0)
    {
      uint64_t v8 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v8[1]);
      *uint64_t v8 = v20;
      v8[1] = v19;
      unint64_t v9 = (void *)(v3[7] + 32 * v21);
      sub_100007600(v9);
      Swift::Int result = (unint64_t)sub_100008570(&v35, v9);
      if (!v6) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v23 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v23 = v20;
    v23[1] = v19;
    Swift::Int result = (unint64_t)sub_100008570(&v35, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v24 = v3[2];
    unint64_t v25 = __OFADD__(v24, 1LL);
    unint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v3[2] = v26;
    if (!v6) {
      goto LABEL_11;
    }
LABEL_10:
    int64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        uint64_t v30 = (v32 - 1) & v32;
        uint64_t v31 = __clz(__rbit64(v32)) + (v29 << 6);
      }

      unint64_t v28 = *(id *)(*(void *)(v11 + 48) + 8 * v31);
    }
  }

  uint64_t v35 = v11;
LABEL_39:
  sub_100172694(v35);
}

Swift::Int sub_10014FA90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100007578((uint64_t *)&unk_100256E80);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v31 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v11) {
          goto LABEL_36;
        }
        unint64_t v20 = v8[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v20 = v8[v14];
          if (!v20)
          {
            int64_t v14 = v19 + 2;
            if (v19 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v20 = v8[v14];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v30;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v8[v14];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v21;
            }
          }
        }

Swift::Int sub_10014FD58(uint64_t a1)
{
  return sub_10014FFE4(a1, (uint64_t *)&unk_100256B90);
}

uint64_t sub_10014FD64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100007578(&qword_100256BF0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    uint64_t v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  *uint64_t v8 = v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

Swift::Int sub_10014FFE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100007578(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    uint64_t v31 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v9 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1LL << v8);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 56;
    Swift::Int result = swift_retain(v4);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }

      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v20 = v9[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v3 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v4 + 32);
                if (v30 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v9 = -1LL << v30;
                }
                *(void *)(v4 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v15 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v9[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v15 = v21;
            }
          }
        }

unint64_t sub_10015027C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_1001502FC(uint64_t a1, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  unint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    uint64_t v10 = a2((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8, a1);
    uint64_t v11 = swift_release(a1);
    if (v2) {
      swift_willThrow(v11);
    }
  }

  else
  {
    int64_t v12 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v12, v9);
    uint64_t v10 = a2((char *)v12, v8, a1);
    swift_release(a1);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  return v10;
}

uint64_t sub_100150464(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = (uint64_t (*)(id *))isStackAllocationSafe;
  char v9 = *(_BYTE *)(a3 + 32);
  unsigned int v10 = v9 & 0x3F;
  unint64_t v11 = (1LL << v9) + 63;
  uint64_t v12 = v11 >> 6;
  size_t v13 = 8 * (v11 >> 6);
  if (v10 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v11 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v20 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0LL), v13);
    sub_100150FC8((unint64_t *)((char *)&v20 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v12, a3, v8, a2, a4);
    uint64_t v15 = v14;
    uint64_t v16 = swift_release(a3);
    if (v4) {
      swift_willThrow(v16);
    }
  }

  else
  {
    unint64_t v17 = (void *)swift_slowAlloc(v13, -1LL);
    bzero(v17, v13);
    sub_100150FC8((unint64_t *)v17, v12, a3, v8, a2, a4);
    uint64_t v15 = v18;
    swift_release(a3);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  return v15;
}

unint64_t *sub_1001505F4(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

unint64_t *sub_100150794(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

unint64_t *sub_100150938(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

unint64_t *sub_100150ADC(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

unint64_t *sub_100150C80(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

unint64_t *sub_100150E24(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

void sub_100150FC8( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *), uint64_t a5, uint64_t *a6)
{
  uint64_t v23 = 0LL;
  int64_t v9 = 0LL;
  uint64_t v24 = a3 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 56);
  int64_t v25 = (unint64_t)(v10 + 63) >> 6;
  while (v12)
  {
    unint64_t v13 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v14 = v13 | (v9 << 6);
LABEL_17:
    id v26 = *(id *)(*(void *)(a3 + 48) + 8 * v14);
    id v18 = v26;
    char v19 = a4(&v26);

    if (v6) {
      return;
    }
    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      BOOL v15 = __OFADD__(v23++, 1LL);
      if (v15) {
        goto LABEL_30;
      }
    }
  }

  BOOL v15 = __OFADD__(v9++, 1LL);
  if (v15)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v9 >= v25) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v9);
  if (v16)
  {
LABEL_16:
    unint64_t v12 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_17;
  }

  int64_t v17 = v9 + 1;
  if (v9 + 1 >= v25) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v9 + 2;
  if (v9 + 2 >= v25) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v9 + 3;
  if (v9 + 3 >= v25)
  {
LABEL_27:
    swift_retain(a3);
    sub_10015147C(a1, a2, v23, a3, a6);
    return;
  }

  unint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16)
  {
LABEL_15:
    int64_t v9 = v17;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v9 >= v25) {
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_16;
    }
  }

Swift::Int sub_1001511D0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10015147C(a1, a2, a3, a4, (uint64_t *)&unk_100256E90);
}

Swift::Int sub_1001511DC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100007578(&qword_100256BA0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (_BYTE *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    int64_t v92 = objc_autoreleasePoolPush();
    sub_1000E964C((void *)v10, (uint64_t)v299);
    objc_autoreleasePoolPop(v92);
    id v93 = [(id)v10 machines];
    if (!v93
      || (id v94 = v93,
          uint64_t v303 = 0LL,
          BOOL v95 = type metadata accessor for MachineMO(),
          v96 = sub_1000077B8( &qword_100256B78,  (uint64_t (*)(uint64_t))type metadata accessor for MachineMO,  (uint64_t)&protocol conformance descriptor for NSObject),  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v94, &v303, v95, v96),  v94,  (BOOL v97 = (uint64_t)v303) == 0))
    {
      swift_bridgeObjectRelease(0LL);
      BOOL v97 = (uint64_t)&_swiftEmptySetSingleton;
    }

    uint64_t v98 = &_swiftEmptySetSingleton;
    SEL v99 = v97 & 0xC000000000000001LL;
    uint64_t v297 = v97 & 0xC000000000000001LL;
    uint64_t v299 = (id)v97;
    if ((v97 & 0xC000000000000001LL) != 0)
    {
      uint64_t v303 = (unint64_t *)&_swiftEmptySetSingleton;
      id v100 = v97 < 0 ? v97 : v97 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v97);
      unint64_t v12 = (char **)__CocoaSet.makeIterator()(v100);
      uint64_t v101 = __CocoaSet.Iterator.next()(v12);
      if (v101)
      {
        uint64_t v102 = v101;
        uint64_t v103 = type metadata accessor for MachineMO();
        do
        {
          Class v300 = v102;
          swift_dynamicCast(&v301, &v300, (char *)&type metadata for Swift.AnyObject + 8, v103, 7LL);
          uint64_t v105 = [v301 status];
          uint64_t v10 = (uint64_t)v301;
          if (v105 == (id)1)
          {
            id v106 = v303;
            uint64_t v107 = v303[2];
            if (v303[3] <= v107)
            {
              sub_10014FFE4(v107 + 1, (uint64_t *)&unk_100256B90);
              id v106 = v303;
            }

            uint64_t v104 = NSObject._rawHashValue(seed:)(v106[5]);
            uint64_t v108 = (char *)(v106 + 7);
            uint64_t v109 = -1LL << *((_BYTE *)v106 + 32);
            id v110 = v104 & ~v109;
            uint64_t v111 = v110 >> 6;
            if (((-1LL << v110) & ~v106[(v110 >> 6) + 7]) != 0)
            {
              id v112 = __clz(__rbit64((-1LL << v110) & ~v106[(v110 >> 6) + 7])) | v110 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              uint64_t v113 = 0;
              uint64_t v114 = (unint64_t)(63 - v109) >> 6;
              do
              {
                if (++v111 == v114 && (v113 & 1) != 0)
                {
                  __break(1u);
LABEL_221:
                  __break(1u);
LABEL_222:
                  __break(1u);
LABEL_223:
                  __break(1u);
LABEL_224:
                  __break(1u);
                  goto LABEL_225;
                }

                uint64_t v115 = v111 == v114;
                if (v111 == v114) {
                  uint64_t v111 = 0LL;
                }
                v113 |= v115;
                SEL v116 = *(void *)&v108[8 * v111];
              }

              while (v116 == -1);
              id v112 = __clz(__rbit64(~v116)) + (v111 << 6);
            }

            *(void *)&v108[(v112 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v112;
            *(void *)(v106[6] + 8 * v112) = v10;
            ++v106[2];
          }

          else
          {
          }

          uint64_t v102 = __CocoaSet.Iterator.next()(v104);
        }

        while (v102);
        int64_t v118 = v303;
        uint64_t v98 = &_swiftEmptySetSingleton;
        SEL v99 = v297;
        BOOL v97 = (uint64_t)v299;
      }

      else
      {
        int64_t v118 = &_swiftEmptySetSingleton;
      }

      swift_release(v12);
    }

    else
    {
      id v117 = swift_bridgeObjectRetain(v97);
      int64_t v118 = (id)sub_1001502FC(v117, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100150E24);
    }

    sub_1000DCA18((uint64_t)v118);
    id v120 = v119;
    swift_release(v118);
    uint64_t v296 = sub_100161634(v120);
    swift_bridgeObjectRelease(v120);
    if (v99)
    {
      uint64_t v303 = (unint64_t *)&_swiftEmptySetSingleton;
      BOOL v121 = v97 < 0 ? v97 : v97 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v97);
      unint64_t v12 = (char **)__CocoaSet.makeIterator()(v121);
      BOOL v122 = __CocoaSet.Iterator.next()(v12);
      if (v122)
      {
        SEL v123 = v122;
        id v124 = type metadata accessor for MachineMO();
        do
        {
          Class v300 = v123;
          swift_dynamicCast(&v301, &v300, (char *)&type metadata for Swift.AnyObject + 8, v124, 7LL);
          id v126 = [v301 status];
          uint64_t v10 = (uint64_t)v301;
          if (v126 == (id)2)
          {
            id v127 = v303;
            BOOL v128 = v303[2];
            if (v303[3] <= v128)
            {
              sub_10014FFE4(v128 + 1, (uint64_t *)&unk_100256B90);
              id v127 = v303;
            }

            int64_t v125 = NSObject._rawHashValue(seed:)(v127[5]);
            BOOL v129 = (char *)(v127 + 7);
            SEL v130 = -1LL << *((_BYTE *)v127 + 32);
            id v131 = v125 & ~v130;
            int64_t v132 = v131 >> 6;
            if (((-1LL << v131) & ~v127[(v131 >> 6) + 7]) != 0)
            {
              id v133 = __clz(__rbit64((-1LL << v131) & ~v127[(v131 >> 6) + 7])) | v131 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              id v134 = 0;
              BOOL v135 = (unint64_t)(63 - v130) >> 6;
              do
              {
                if (++v132 == v135 && (v134 & 1) != 0) {
                  goto LABEL_221;
                }
                BOOL v136 = v132 == v135;
                if (v132 == v135) {
                  int64_t v132 = 0LL;
                }
                v134 |= v136;
                id v137 = *(void *)&v129[8 * v132];
              }

              while (v137 == -1);
              id v133 = __clz(__rbit64(~v137)) + (v132 << 6);
            }

            *(void *)&v129[(v133 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v133;
            *(void *)(v127[6] + 8 * v133) = v10;
            ++v127[2];
          }

          else
          {
          }

          SEL v123 = __CocoaSet.Iterator.next()(v125);
        }

        while (v123);
        SEL v139 = v303;
        uint64_t v98 = &_swiftEmptySetSingleton;
        SEL v99 = v297;
        BOOL v97 = (uint64_t)v299;
      }

      else
      {
        SEL v139 = &_swiftEmptySetSingleton;
      }

      swift_release(v12);
    }

    else
    {
      id v138 = swift_bridgeObjectRetain(v97);
      SEL v139 = (id)sub_1001502FC(v138, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100150C80);
    }

    sub_1000DCA18((uint64_t)v139);
    int64_t v141 = v140;
    swift_release(v139);
    unint64_t v293 = sub_100161634(v141);
    swift_bridgeObjectRelease(v141);
    if (v99)
    {
      uint64_t v303 = (unint64_t *)&_swiftEmptySetSingleton;
      uint64_t v142 = v97 < 0 ? v97 : v97 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v97);
      unint64_t v12 = (char **)__CocoaSet.makeIterator()(v142);
      uint64_t v143 = __CocoaSet.Iterator.next()(v12);
      if (v143)
      {
        BOOL v144 = v143;
        BOOL v145 = type metadata accessor for MachineMO();
        do
        {
          Class v300 = v144;
          swift_dynamicCast(&v301, &v300, (char *)&type metadata for Swift.AnyObject + 8, v145, 7LL);
          uint64_t v147 = [v301 status];
          uint64_t v10 = (uint64_t)v301;
          if (v147 == (id)5)
          {
            uint64_t v148 = v303;
            uint64_t v149 = v303[2];
            if (v303[3] <= v149)
            {
              sub_10014FFE4(v149 + 1, (uint64_t *)&unk_100256B90);
              uint64_t v148 = v303;
            }

            uint64_t v146 = NSObject._rawHashValue(seed:)(v148[5]);
            uint64_t v150 = (char *)(v148 + 7);
            uint64_t v151 = -1LL << *((_BYTE *)v148 + 32);
            uint64_t v152 = v146 & ~v151;
            uint64_t v153 = v152 >> 6;
            if (((-1LL << v152) & ~v148[(v152 >> 6) + 7]) != 0)
            {
              uint64_t v154 = __clz(__rbit64((-1LL << v152) & ~v148[(v152 >> 6) + 7])) | v152 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              os_log_type_t v155 = 0;
              unint64_t v156 = (unint64_t)(63 - v151) >> 6;
              do
              {
                if (++v153 == v156 && (v155 & 1) != 0) {
                  goto LABEL_222;
                }
                uint64_t v157 = v153 == v156;
                if (v153 == v156) {
                  uint64_t v153 = 0LL;
                }
                v155 |= v157;
                uint64_t v158 = *(void *)&v150[8 * v153];
              }

              while (v158 == -1);
              uint64_t v154 = __clz(__rbit64(~v158)) + (v153 << 6);
            }

            *(void *)&v150[(v154 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v154;
            *(void *)(v148[6] + 8 * v154) = v10;
            ++v148[2];
          }

          else
          {
          }

          BOOL v144 = __CocoaSet.Iterator.next()(v146);
        }

        while (v144);
        unint64_t v160 = v303;
        uint64_t v98 = &_swiftEmptySetSingleton;
        SEL v99 = v297;
        BOOL v97 = (uint64_t)v299;
      }

      else
      {
        unint64_t v160 = &_swiftEmptySetSingleton;
      }

      swift_release(v12);
    }

    else
    {
      uint64_t v159 = swift_bridgeObjectRetain(v97);
      unint64_t v160 = (id)sub_1001502FC(v159, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100150ADC);
    }

    sub_1000DCA18((uint64_t)v160);
    SEL v162 = v161;
    swift_release(v160);
    unint64_t v292 = sub_100161634(v162);
    swift_bridgeObjectRelease(v162);
    if (v99)
    {
      uint64_t v303 = (unint64_t *)&_swiftEmptySetSingleton;
      id v163 = v97 < 0 ? v97 : v97 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v97);
      unint64_t v12 = (char **)__CocoaSet.makeIterator()(v163);
      int64_t v164 = __CocoaSet.Iterator.next()(v12);
      if (v164)
      {
        id v165 = v164;
        id v166 = type metadata accessor for MachineMO();
        uint64_t v10 = 1LL;
        do
        {
          Class v300 = v165;
          swift_dynamicCast(&v301, &v300, (char *)&type metadata for Swift.AnyObject + 8, v166, 7LL);
          BOOL v168 = [v301 status];
          id v169 = v301;
          if (v168 == (id)3)
          {
            char v170 = v303;
            id v171 = v303[2];
            if (v303[3] <= v171)
            {
              sub_10014FFE4(v171 + 1, (uint64_t *)&unk_100256B90);
              char v170 = v303;
            }

            BOOL v167 = NSObject._rawHashValue(seed:)(v170[5]);
            id v172 = (char *)(v170 + 7);
            uint64_t v173 = -1LL << *((_BYTE *)v170 + 32);
            uint64_t v174 = v167 & ~v173;
            uint64_t v175 = v174 >> 6;
            if (((-1LL << v174) & ~v170[(v174 >> 6) + 7]) != 0)
            {
              uint64_t v176 = __clz(__rbit64((-1LL << v174) & ~v170[(v174 >> 6) + 7])) | v174 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              uint64_t v177 = 0;
              uint64_t v178 = (unint64_t)(63 - v173) >> 6;
              do
              {
                if (++v175 == v178 && (v177 & 1) != 0) {
                  goto LABEL_223;
                }
                os_log_type_t v179 = v175 == v178;
                if (v175 == v178) {
                  uint64_t v175 = 0LL;
                }
                v177 |= v179;
                unint64_t v180 = *(void *)&v172[8 * v175];
              }

              while (v180 == -1);
              uint64_t v176 = __clz(__rbit64(~v180)) + (v175 << 6);
            }

            *(void *)&v172[(v176 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v176;
            *(void *)(v170[6] + 8 * v176) = v169;
            ++v170[2];
          }

          else
          {
          }

          id v165 = __CocoaSet.Iterator.next()(v167);
        }

        while (v165);
        char v182 = v303;
        uint64_t v98 = &_swiftEmptySetSingleton;
        SEL v99 = v297;
        BOOL v97 = (uint64_t)v299;
      }

      else
      {
        char v182 = &_swiftEmptySetSingleton;
      }

      swift_release(v12);
    }

    else
    {
      unint64_t v181 = swift_bridgeObjectRetain(v97);
      char v182 = (id)sub_1001502FC(v181, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100150938);
    }

    sub_1000DCA18((uint64_t)v182);
    uint64_t v184 = v183;
    swift_release(v182);
    id v291 = sub_100161634(v184);
    swift_bridgeObjectRelease(v184);
    if (v99)
    {
      uint64_t v303 = (unint64_t *)&_swiftEmptySetSingleton;
      uint64_t v185 = v97 < 0 ? v97 : v97 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v97);
      uint64_t v186 = __CocoaSet.makeIterator()(v185);
      uint64_t v187 = __CocoaSet.Iterator.next()(v186);
      if (v187)
      {
        uint64_t v188 = v187;
        uint64_t v189 = type metadata accessor for MachineMO();
        uint64_t v10 = (uint64_t)&type metadata for Swift.AnyObject + 8;
        unint64_t v12 = &selRef_setAllSelves_;
        do
        {
          Class v300 = v188;
          swift_dynamicCast(&v301, &v300, (char *)&type metadata for Swift.AnyObject + 8, v189, 7LL);
          id v191 = [v301 status];
          uint64_t v192 = v301;
          if (v191 == (id)4)
          {
            uint64_t v193 = v303;
            uint64_t v194 = v303[2];
            if (v303[3] <= v194)
            {
              sub_10014FFE4(v194 + 1, (uint64_t *)&unk_100256B90);
              uint64_t v193 = v303;
            }

            unint64_t v190 = NSObject._rawHashValue(seed:)(v193[5]);
            unsigned int v195 = (char *)(v193 + 7);
            id v196 = -1LL << *((_BYTE *)v193 + 32);
            id v197 = v190 & ~v196;
            id v198 = v197 >> 6;
            if (((-1LL << v197) & ~v193[(v197 >> 6) + 7]) != 0)
            {
              id v199 = __clz(__rbit64((-1LL << v197) & ~v193[(v197 >> 6) + 7])) | v197 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              uint64_t v200 = 0;
              uint64_t v201 = (unint64_t)(63 - v196) >> 6;
              do
              {
                if (++v198 == v201 && (v200 & 1) != 0) {
                  goto LABEL_224;
                }
                id v202 = v198 == v201;
                if (v198 == v201) {
                  id v198 = 0LL;
                }
                v200 |= v202;
                id v203 = *(void *)&v195[8 * v198];
              }

              while (v203 == -1);
              id v199 = __clz(__rbit64(~v203)) + (v198 << 6);
            }

            *(void *)&v195[(v199 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v199;
            *(void *)(v193[6] + 8 * v199) = v192;
            ++v193[2];
          }

          else
          {
          }

          uint64_t v188 = __CocoaSet.Iterator.next()(v190);
        }

        while (v188);
        id v205 = v303;
        uint64_t v98 = &_swiftEmptySetSingleton;
        SEL v99 = v297;
        BOOL v97 = (uint64_t)v299;
      }

      else
      {
        id v205 = &_swiftEmptySetSingleton;
      }

      swift_release(v186);
    }

    else
    {
      uint64_t v204 = swift_bridgeObjectRetain(v97);
      id v205 = (id)sub_1001502FC(v204, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100150794);
    }

    sub_1000DCA18((uint64_t)v205);
    uint64_t v207 = v206;
    swift_release(v205);
    uint64_t v299 = (id)sub_100161634(v207);
    swift_bridgeObjectRelease(v207);
    if (!v99) {
      break;
    }
    uint64_t v303 = (unint64_t *)&_swiftEmptySetSingleton;
    if (v97 < 0) {
      uint64_t v208 = v97;
    }
    else {
      uint64_t v208 = v97 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v209 = __CocoaSet.makeIterator()(v208);
    id v210 = __CocoaSet.Iterator.next()(v209);
    if (!v210)
    {
LABEL_196:
      swift_release(v209);
      goto LABEL_198;
    }

    id v211 = v210;
    BOOL v212 = type metadata accessor for MachineMO();
    uint64_t v10 = (uint64_t)&type metadata for Swift.AnyObject + 8;
    unint64_t v12 = &selRef_setAllSelves_;
    while (1)
    {
      Class v300 = v211;
      swift_dynamicCast(&v301, &v300, (char *)&type metadata for Swift.AnyObject + 8, v212, 7LL);
      uint64_t v214 = [v301 status];
      uint64_t v215 = v301;
      if (!v214) {
        break;
      }

LABEL_180:
      id v211 = __CocoaSet.Iterator.next()(v213);
      if (!v211)
      {
        uint64_t v98 = v303;
        goto LABEL_196;
      }
    }

    Class v216 = v303;
    uint64_t v217 = v303[2];
    if (v303[3] <= v217)
    {
      sub_10014FFE4(v217 + 1, (uint64_t *)&unk_100256B90);
      Class v216 = v303;
    }

    BOOL v213 = NSObject._rawHashValue(seed:)(v216[5]);
    uint64_t v218 = (char *)(v216 + 7);
    uint64_t v219 = -1LL << *((_BYTE *)v216 + 32);
    uint64_t v220 = v213 & ~v219;
    uint64_t v221 = v220 >> 6;
    if (((-1LL << v220) & ~v216[(v220 >> 6) + 7]) != 0)
    {
      uint64_t v222 = __clz(__rbit64((-1LL << v220) & ~v216[(v220 >> 6) + 7])) | v220 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_194:
      *(void *)&v218[(v222 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v222;
      *(void *)(v216[6] + 8 * v222) = v215;
      ++v216[2];
      goto LABEL_180;
    }

    os_log_type_t v223 = 0;
    uint64_t v224 = (unint64_t)(63 - v219) >> 6;
    while (++v221 != v224 || (v223 & 1) == 0)
    {
      uint64_t v225 = v221 == v224;
      if (v221 == v224) {
        uint64_t v221 = 0LL;
      }
      v223 |= v225;
      id v226 = *(void *)&v218[8 * v221];
      if (v226 != -1)
      {
        uint64_t v222 = __clz(__rbit64(~v226)) + (v221 << 6);
        goto LABEL_194;
      }
    }

    BOOL v49 = (v59 - 1) & v59;
    BOOL v50 = __clz(__rbit64(v59)) + (v51 << 6);
    goto LABEL_41;
  }

  __break(1u);
LABEL_64:
  swift_once(&qword_100250ED8, sub_1001A5008);
LABEL_11:
  uint64_t v30 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v30, (uint64_t)qword_100257C18);
  uint64_t v31 = swift_bridgeObjectRetain_n(a2, 2LL);
  __int128 v32 = (os_log_s *)Logger.logObject.getter(v31);
  __int128 v33 = static os_log_type_t.info.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v104[0] = v35;
    *(_DWORD *)uint64_t v34 = 136446210;
    swift_bridgeObjectRetain(a2);
    uint64_t v103 = (void *)sub_10017C4C4(a1, a2, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "not enforcing idms list changes; allowing %{public}s",
      v34,
      0xCu);
    int64_t v36 = 1LL;
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    return 1LL;
  }

  return v36;
}

Swift::Int sub_100151470(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10015147C(a1, a2, a3, a4, (uint64_t *)&unk_100256B90);
}

Swift::Int sub_10015147C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v5);
    return (Swift::Int)v10;
  }

  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_100007578(a5);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v6);
  uint64_t v10 = (void *)result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0LL;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }

    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1001516D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      Swift::Int v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_100152310(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100151880(Swift::Int *a1, void *a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = *v4;
  if ((*v4 & 0xC000000000000001LL) != 0)
  {
    if (v10 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v4);
    id v12 = a2;
    uint64_t v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease(v10);

      uint64_t v40 = v13;
      uint64_t v14 = a3(0LL);
      swift_unknownObjectRetain(v13, v15);
      swift_dynamicCast(&v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
      *a1 = v41;
      swift_unknownObjectRelease(v13);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v28 = sub_100151F1C(v11, result + 1, a4, a3);
    Swift::Int v41 = v28;
    unint64_t v29 = *(void *)(v28 + 16);
    if (*(void *)(v28 + 24) <= v29)
    {
      uint64_t v35 = v29 + 1;
      id v36 = v12;
      sub_10014FFE4(v35, a4);
      uint64_t v30 = v41;
    }

    else
    {
      uint64_t v30 = v28;
      id v31 = v12;
    }

    sub_10015027C((uint64_t)v12, v30);
    uint64_t v37 = *v7;
    *uint64_t v7 = v30;
    swift_bridgeObjectRelease(v37);
    *a1 = (Swift::Int)v12;
  }

  else
  {
    Swift::Int v17 = *(void *)(v10 + 40);
    swift_bridgeObjectRetain(v10);
    Swift::Int v18 = NSObject._rawHashValue(seed:)(v17);
    uint64_t v19 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) != 0)
    {
      a3(0LL);
      id v21 = *(id *)(*(void *)(v10 + 48) + 8 * v20);
      char v22 = static NSObject.== infix(_:_:)(v21);

      if ((v22 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v10);
        unint64_t v26 = *(void **)(*(void *)(*v7 + 48) + 8 * v20);
        *a1 = (Swift::Int)v26;
        id v27 = v26;
        return 0LL;
      }

      uint64_t v23 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v23;
        if (((*(void *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
          break;
        }
        id v24 = *(id *)(*(void *)(v10 + 48) + 8 * v20);
        char v25 = static NSObject.== infix(_:_:)(v24);

        if ((v25 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    Swift::Int v41 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    id v33 = a2;
    sub_100152610((uint64_t)v33, v20, isUniquelyReferenced_nonNull_native, a4, a3);
    uint64_t v34 = *v7;
    *uint64_t v7 = v41;
    swift_bridgeObjectRelease(v34);
    *a1 = (Swift::Int)v33;
  }

  return 1LL;
}

uint64_t sub_100151B2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100152794(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease(v14);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100151C24(Swift::Int *a1, void *a2)
{
  return sub_100151880( a1,  a2,  (uint64_t (*)(void))type metadata accessor for MachineMO,  (uint64_t *)&unk_100256B90);
}

uint64_t sub_100151C38(Swift::Int *a1, void *a2)
{
  return sub_100151C54(a1, a2, &qword_100256C30, &OBJC_CLASS___TPVoucher_ptr, &qword_100256C38);
}

uint64_t sub_100151C54(Swift::Int *a1, void *a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  unint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v5);
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      uint64_t v43 = v15;
      uint64_t v16 = sub_100007620(0LL, a3, a4);
      swift_unknownObjectRetain(v15, v17);
      swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
      *a1 = v44;
      swift_unknownObjectRelease(v15);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v30 = sub_100152110(v13, result + 1, a5, a3, a4);
    Swift::Int v44 = v30;
    unint64_t v31 = *(void *)(v30 + 16);
    if (*(void *)(v30 + 24) <= v31)
    {
      uint64_t v37 = v31 + 1;
      id v38 = v14;
      sub_10014FFE4(v37, a5);
      uint64_t v32 = v44;
    }

    else
    {
      uint64_t v32 = v30;
      id v33 = v14;
    }

    sub_10015027C((uint64_t)v14, v32);
    uint64_t v39 = *v9;
    *unint64_t v9 = v32;
    swift_bridgeObjectRelease(v39);
    *a1 = (Swift::Int)v14;
  }

  else
  {
    Swift::Int v19 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    Swift::Int v20 = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v22 = v20 & ~v21;
    uint64_t v40 = a4;
    if (((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v22) & 1) != 0)
    {
      sub_100007620(0LL, a3, a4);
      id v23 = *(id *)(*(void *)(v12 + 48) + 8 * v22);
      char v24 = static NSObject.== infix(_:_:)();

      if ((v24 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        Swift::Int v28 = *(void **)(*(void *)(*v9 + 48) + 8 * v22);
        *a1 = (Swift::Int)v28;
        id v29 = v28;
        return 0LL;
      }

      uint64_t v25 = ~v21;
      while (1)
      {
        unint64_t v22 = (v22 + 1) & v25;
        if (((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v22) & 1) == 0) {
          break;
        }
        id v26 = *(id *)(*(void *)(v12 + 48) + 8 * v22);
        char v27 = static NSObject.== infix(_:_:)();

        if ((v27 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    Swift::Int v44 = *v9;
    *unint64_t v9 = 0x8000000000000000LL;
    id v35 = a2;
    sub_1001528B4((uint64_t)v35, v22, isUniquelyReferenced_nonNull_native, a5, a3, v40);
    uint64_t v36 = *v9;
    *unint64_t v9 = v44;
    swift_bridgeObjectRelease(v36);
    *a1 = (Swift::Int)v35;
  }

  return 1LL;
}

Swift::Int sub_100151F1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  if (a2)
  {
    sub_100007578(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v27 = v8;
    uint64_t v9 = __CocoaSet.makeIterator()(a1);
    uint64_t v10 = __CocoaSet.Iterator.next()(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = a4(0LL);
      do
      {
        uint64_t v25 = v11;
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v8 = v27;
        unint64_t v20 = *(void *)(v27 + 16);
        if (*(void *)(v27 + 24) <= v20)
        {
          sub_10014FFE4(v20 + 1, a3);
          uint64_t v8 = v27;
        }

        uint64_t v13 = v26;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
        uint64_t v15 = v8 + 56;
        uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
        unint64_t v17 = result & ~v16;
        unint64_t v18 = v17 >> 6;
        if (((-1LL << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6))) != 0)
        {
          unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v21 = 0;
          unint64_t v22 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v22 && (v21 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v23 = v18 == v22;
            if (v18 == v22) {
              unint64_t v18 = 0LL;
            }
            v21 |= v23;
            uint64_t v24 = *(void *)(v15 + 8 * v18);
          }

          while (v24 == -1);
          unint64_t v19 = __clz(__rbit64(~v24)) + (v18 << 6);
        }

        *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
        *(void *)(*(void *)(v8 + 48) + 8 * v19) = v13;
        ++*(void *)(v8 + 16);
        uint64_t v11 = __CocoaSet.Iterator.next()(result);
      }

      while (v11);
    }

    swift_release(v9);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v8;
}

Swift::Int sub_100152110(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5)
{
  if (a2)
  {
    sub_100007578(a3);
    uint64_t v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v29 = v10;
    uint64_t v11 = __CocoaSet.makeIterator()(a1);
    uint64_t v12 = __CocoaSet.Iterator.next()();
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = sub_100007620(0LL, a4, a5);
      do
      {
        uint64_t v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
        uint64_t v10 = v29;
        unint64_t v22 = *(void *)(v29 + 16);
        if (*(void *)(v29 + 24) <= v22)
        {
          sub_10014FFE4(v22 + 1, a3);
          uint64_t v10 = v29;
        }

        uint64_t v15 = v28;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
        uint64_t v17 = v10 + 56;
        uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
        unint64_t v19 = result & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v20 == v24;
            if (v20 == v24) {
              unint64_t v20 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v17 + 8 * v20);
          }

          while (v26 == -1);
          unint64_t v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }

        *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        *(void *)(*(void *)(v10 + 48) + 8 * v21) = v15;
        ++*(void *)(v10 + 16);
        uint64_t v13 = __CocoaSet.Iterator.next()();
      }

      while (v13);
    }

    swift_release(v11);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v10;
}

uint64_t sub_100152310(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10014F7B4(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_100152A44();
      goto LABEL_22;
    }

    sub_1001530F4(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_1001524A8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014FA90(v9);
  }

  else
  {
    if (v8 > v7)
    {
      Swift::Int result = (uint64_t)sub_100152BF4();
      goto LABEL_12;
    }

    sub_1001533A0(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = ~v11;
    do
    {
      sub_10000DE70(*(void *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      char v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      Swift::Int result = sub_10000DEAC((uint64_t)v20);
      if ((v13 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v12;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_100152610(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(void))
{
  unint64_t v7 = v5;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014FFE4(v12, a4);
  }

  else
  {
    if (v11 > v10)
    {
      sub_100152F54(a4);
      goto LABEL_14;
    }

    sub_100153890(v12, a4);
  }

  uint64_t v13 = *v5;
  Swift::Int v14 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v15 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v16 = a5(0LL);
    id v17 = *(id *)(*(void *)(v13 + 48) + 8 * a2);
    char v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v20 = *(id *)(*(void *)(v13 + 48) + 8 * a2);
        char v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_100152794(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014FD64(v8);
  }

  else
  {
    if (v7 > v6)
    {
      Swift::Int result = (uint64_t)sub_100152DC0();
      goto LABEL_14;
    }

    sub_100153630(v8);
  }

  uint64_t v9 = *v3;
  Swift::Int result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

void sub_1001528B4(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, void *a6)
{
  uint64_t v9 = v6;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014FFE4(v14, a4);
  }

  else
  {
    if (v13 > v12)
    {
      sub_100152F54(a4);
      goto LABEL_14;
    }

    sub_100153890(v14, a4);
  }

  uint64_t v15 = *v6;
  Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(*v6 + 40));
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = sub_100007620(0LL, a5, a6);
    id v19 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
    char v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }

    else
    {
      uint64_t v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
        char v23 = static NSObject.== infix(_:_:)();

        if ((v23 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_100152A44()
{
  uint64_t v1 = v0;
  sub_100007578(&qword_100256BA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_100152BF4()
{
  uint64_t v1 = v0;
  sub_100007578((uint64_t *)&unk_100256E80);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_100152DC0()
{
  uint64_t v1 = v0;
  sub_100007578(&qword_100256BF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

id sub_100152F54(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100007578(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_1001530F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100007578(&qword_100256BA0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  unint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1001533A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100007578((uint64_t *)&unk_100256E80);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v31 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v21 >= v11) {
      goto LABEL_36;
    }
    unint64_t v22 = *(void *)(v8 + 8 * v21);
    ++v14;
    if (!v22)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v22 = *(void *)(v8 + 8 * v14);
      if (!v22)
      {
        int64_t v14 = v21 + 2;
        if (v21 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v22 = *(void *)(v8 + 8 * v14);
        if (!v22) {
          break;
        }
      }
    }

uint64_t sub_100153630(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100007578(&qword_100256BF0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_100153890(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100007578(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    Swift::Int result = swift_release(v4);
LABEL_38:
    *uint64_t v3 = v7;
    return result;
  }

  unint64_t v31 = v3;
  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v9 = v4 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1LL << v8);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v13 = v6 + 56;
  Swift::Int result = swift_retain(v4);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v19 >= v12) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }

uint64_t sub_100153B04(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001738E0(&qword_100256D88, &qword_100256D80, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100007578(&qword_100256D80);
          uint64_t v13 = sub_100153D20(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void (*sub_100153D20( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100153DA0(v6, a2, a3);
  return sub_100153D74;
}

void sub_100153D74(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_100153DA0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100153E0C;
  }

  __break(1u);
  return result;
}

void sub_100153E0C(id *a1)
{
}

Swift::Int sub_100153E14(uint64_t a1)
{
  uint64_t v2 = __CocoaDictionary.count.getter(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100007578(&qword_100256DA8);
    id v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }

  else
  {
    id v4 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v40 = v4;
  uint64_t v5 = (_TtC18TrustedPeersHelper6Client *)__CocoaDictionary.makeIterator()(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1, v6);
  uint64_t v8 = __CocoaDictionary.Iterator.next()(v7);
  if (v8)
  {
    uint64_t v16 = (void *)v8;
    unint64_t v17 = v9;
    uint64_t v18 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    do
    {
      id v38 = v16;
      swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
      uint64_t v37 = v17;
      uint64_t v26 = sub_100007620(0LL, &qword_100256DB8, &OBJC_CLASS___TPPolicyDocument_ptr);
      swift_dynamicCast(&v38, &v37, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
      uint64_t v27 = v39;
      id v28 = [v38 protobuf];
      uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v31 = v30;

      id v4 = v40;
      unint64_t v32 = v40[2];
      if (v40[3] <= v32)
      {
        sub_10014B22C(v32 + 1, 1LL);
        id v4 = v40;
      }

      Swift::Int result = NSObject._rawHashValue(seed:)(v4[5]);
      unint64_t v20 = (char *)(v4 + 8);
      uint64_t v21 = -1LL << *((_BYTE *)v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~v4[(v22 >> 6) + 8]) != 0)
      {
        unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~v4[(v22 >> 6) + 8])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            return result;
          }

          BOOL v35 = v23 == v34;
          if (v23 == v34) {
            unint64_t v23 = 0LL;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)&v20[8 * v23];
        }

        while (v36 == -1);
        unint64_t v24 = __clz(__rbit64(~v36)) + (v23 << 6);
      }

      *(void *)&v20[(v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v24;
      *(void *)(v4[6] + 8 * v24) = v27;
      unint64_t v25 = (uint64_t *)(v4[7] + 16 * v24);
      uint64_t *v25 = v29;
      v25[1] = v31;
      ++v4[2];
      uint64_t v16 = (void *)__CocoaDictionary.Iterator.next()(result);
      unint64_t v17 = v9;
    }

    while (v16);
  }

  swift_release(v5, v9, v10, v11, v12, v13, v14, v15);
  return (Swift::Int)v4;
}

_OWORD *sub_100154098(uint64_t a1)
{
  Swift::Int result = (_OWORD *)static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = result;
  int64_t v4 = 0LL;
  uint64_t v33 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v28 = v6;
  int64_t v29 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v30 = result + 4;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v33 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    int64_t v19 = *(void **)(*(void *)(v33 + 56) + 8 * i);
    swift_bridgeObjectRetain(v18);
    id v20 = v19;
    id v21 = [v20 dictionaryRepresentation];
    if (v21)
    {
      unint64_t v22 = v21;
      uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v21,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    }

    else
    {
      uint64_t v23 = 0LL;
    }

    uint64_t v32 = sub_100007578((uint64_t *)&unk_1002570D0);

    *(void *)&__int128 v31 = v23;
    *(void *)((char *)v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    unint64_t v24 = (void *)(v3[6] + 16 * i);
    *unint64_t v24 = v17;
    v24[1] = v18;
    Swift::Int result = sub_100008570(&v31, (_OWORD *)(v3[7] + 32 * i));
    uint64_t v25 = v3[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    v3[2] = v27;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_27;
    }
    if (v13 >= v29) {
      return v3;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v29) {
        return v3;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v29) {
          return v3;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }

uint64_t sub_100154308(uint64_t a1)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  int64_t v3 = 0LL;
  uint64_t v32 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1LL << *(_BYTE *)(v5 - 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v28 = v5;
  int64_t v29 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v30 = (void *)result;
  uint64_t v31 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  int64_t v11 = v3;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    uint64_t v17 = *(void **)(*(void *)(v32 + 56) + 8 * i);
    id v18 = *(id *)(*(void *)(v32 + 48) + 8 * i);
    id v19 = v17;
    id v20 = [v19 protobuf];
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    uint64_t result = (uint64_t)v30;
    *(void *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    *(void *)(v30[6] + 8 * i) = v18;
    unint64_t v24 = (uint64_t *)(v30[7] + 16 * i);
    *unint64_t v24 = v21;
    v24[1] = v23;
    uint64_t v25 = v30[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v30[2] = v27;
    int64_t v3 = v11;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_24;
    }
    if (v13 >= v29) {
      return result;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v3 + 1;
    if (!v14)
    {
      int64_t v15 = v3 + 2;
      if (v3 + 2 >= v29) {
        return result;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v3 + 3;
        if (v3 + 3 >= v29) {
          return result;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }

uint64_t sub_100154534(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001AC990(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1001545AC(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1001545AC(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_157;
    }
    if (v3) {
      sub_100154FE4(0LL, v3, 1LL, a1);
    }
    return;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_165;
  }
  Swift::Int v141 = v4;
  Swift::Int v146 = v3;
  SEL v139 = a1;
  if (v3 < 2)
  {
    unint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v153 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v148 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_123:
      if (v14 >= 2)
      {
        uint64_t v132 = *v139;
        do
        {
          unint64_t v133 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_152;
          }
          if (!v132) {
            goto LABEL_164;
          }
          uint64_t v134 = *(void *)&v9[16 * v133 + 32];
          uint64_t v135 = *(void *)&v9[16 * v14 + 24];
          sub_1001551CC( (void **)(v132 + 8 * v134),  (id *)(v132 + 8LL * *(void *)&v9[16 * v14 + 16]),  v132 + 8 * v135,  v148);
          if (v1) {
            break;
          }
          if (v135 < v134) {
            goto LABEL_153;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
            unint64_t v9 = sub_1001AC2A8((uint64_t)v9);
          }
          if (v133 >= *((void *)v9 + 2)) {
            goto LABEL_154;
          }
          BOOL v136 = &v9[16 * v133 + 32];
          *(void *)BOOL v136 = v134;
          *((void *)v136 + 1) = v135;
          unint64_t v137 = *((void *)v9 + 2);
          if (v14 > v137) {
            goto LABEL_155;
          }
          memmove(&v9[16 * v14 + 16], &v9[16 * v14 + 32], 16 * (v137 - v14));
          *((void *)v9 + 2) = v137 - 1;
          unint64_t v14 = v137 - 1;
        }

        while (v137 > 2);
      }

LABEL_134:
      uint64_t v138 = swift_bridgeObjectRelease(v9);
      *(void *)((v153 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
      specialized Array._endMutation()(v138);
      swift_bridgeObjectRelease(v153);
      return;
    }
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v6;
    uint64_t v148 = (void **)((v8 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v153 = v8;
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *a1;
  uint64_t v140 = *a1 - 8;
  unint64_t v9 = (char *)_swiftEmptyArrayStorage;
  int64_t v12 = &selRef_setAllSelves_;
  Swift::Int v13 = v146;
  uint64_t v149 = *a1;
LABEL_15:
  Swift::Int v15 = v10 + 1;
  Swift::Int v145 = v10;
  if (v10 + 1 < v13)
  {
    Swift::Int v16 = v10;
    uint64_t v142 = v9;
    Swift::Int v17 = v10 + 1;
    id v18 = *(void **)(v11 + 8 * v16);
    id v19 = *(id *)(v11 + 8 * v15);
    id v20 = v18;
    id v21 = [v19 v12[64]];
    if (v21 == [v20 v12[64]])
    {
      id v22 = [v19 policyHash];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v25 = v24;

      id v26 = [v20 policyHash];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v28;

      if (v23 == v27 && v25 == v29)
      {
        uint64_t v31 = 0LL;
        uint64_t v29 = v25;
      }

      else
      {
        uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v29, 1LL);
      }

      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v29);

      Swift::Int v34 = v145 + 2;
      int64_t v12 = &selRef_setAllSelves_;
      if (v145 + 2 < v146)
      {
LABEL_26:
        Swift::Int v35 = v34;
        uint64_t v11 = v149;
        do
        {
          Swift::Int v34 = v35;
          id v38 = *(void **)(v11 + 8 * v17);
          id v39 = *(id *)(v11 + 8 * v35);
          id v40 = v38;
          id v41 = [v39 v12[64]];
          if (v41 == [v40 v12[64]])
          {
            uint64_t v42 = v31;
            Swift::Int v150 = v34;
            id v43 = [v39 policyHash];
            uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            uint64_t v46 = v45;

            id v47 = [v40 policyHash];
            uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
            uint64_t v50 = v49;

            if (v44 == v48 && v46 == v50)
            {

              swift_bridgeObjectRelease_n(v46, 2LL);
              int64_t v12 = &selRef_setAllSelves_;
              Swift::Int v34 = v150;
              uint64_t v31 = v42;
              if ((v42 & 1) != 0)
              {
                unint64_t v9 = v142;
                uint64_t v11 = v149;
                Swift::Int v10 = v145;
                goto LABEL_41;
              }
            }

            else
            {
              char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v48, v50, 1LL);

              swift_bridgeObjectRelease(v46);
              swift_bridgeObjectRelease(v50);
              uint64_t v31 = v42;
              char v53 = v42 ^ v52;
              int64_t v12 = &selRef_setAllSelves_;
              Swift::Int v34 = v150;
              if ((v53 & 1) != 0) {
                goto LABEL_38;
              }
            }
          }

          else
          {
            id v36 = [v39 v12[64]];
            id v37 = [v40 v12[64]];
          }

          Swift::Int v35 = v34 + 1;
          Swift::Int v17 = v34;
          uint64_t v11 = v149;
        }

        while (v34 + 1 < v146);
        ++v34;
        goto LABEL_40;
      }
    }

    else
    {
      id v32 = [v19 v12[64]];
      id v33 = [v20 v12[64]];

      uint64_t v31 = v32 < v33;
      Swift::Int v34 = v16 + 2;
      if (v34 < v146) {
        goto LABEL_26;
      }
    }

void sub_100154FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
    uint64_t v7 = &selRef_setAllSelves_;
    uint64_t v30 = *a4;
LABEL_6:
    uint64_t v8 = *(void **)(v5 + 8 * v4);
    uint64_t v9 = a1;
    uint64_t v29 = v6;
    uint64_t v31 = v4;
    while (1)
    {
      Swift::Int v10 = *(void **)v6;
      id v11 = v8;
      id v12 = v10;
      id v13 = [v11 v7[64]];
      if (v13 == [v12 v7[64]])
      {
        id v14 = [v11 policyHash];
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        uint64_t v17 = v16;

        id v18 = [v12 policyHash];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v21 = v20;

        if (v15 == v19 && v17 == v21)
        {

          swift_bridgeObjectRelease_n(v17, 2LL);
          uint64_t v4 = v31;
          uint64_t v5 = v30;
          uint64_t v7 = &selRef_setAllSelves_;
LABEL_5:
          ++v4;
          uint64_t v6 = v29 + 8;
          if (v4 == a2) {
            return;
          }
          goto LABEL_6;
        }

        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v21, 1LL);

        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v21);
        uint64_t v4 = v31;
        uint64_t v5 = v30;
        uint64_t v7 = &selRef_setAllSelves_;
        if ((v23 & 1) == 0) {
          goto LABEL_5;
        }
      }

      else
      {
        id v24 = [v11 v7[64]];
        id v25 = [v12 v7[64]];

        if (v24 >= v25) {
          goto LABEL_5;
        }
      }

      if (!v5) {
        break;
      }
      id v26 = *(void **)v6;
      uint64_t v8 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v8;
      *(void *)(v6 + 8) = v26;
      v6 -= 8LL;
      if (v4 == ++v9) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

uint64_t sub_1001551CC(void **__src, id *a2, unint64_t a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  uint64_t v12 = v11 >> 3;
  id v67 = __src;
  SEL v66 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_59;
    }
    if (__dst != a2 || &a2[v12] <= __dst) {
      memmove(__dst, a2, 8 * v12);
    }
    Swift::Int v34 = &v4[v12];
    uint64_t v65 = v34;
    id v67 = v5;
    if (v6 >= v5 || v10 < 8)
    {
LABEL_58:
      sub_1001AC158((void **)&v67, (const void **)&v66, &v65);
      return 1LL;
    }

    Swift::Int v35 = (void **)(a3 - 8);
    id v36 = &selRef_setAllSelves_;
    id v37 = v5;
    Swift::Int v56 = v6;
    BOOL v57 = v4;
    while (1)
    {
      uint64_t v62 = v34;
      Swift::Int v64 = v5;
      uint64_t v60 = v35 + 1;
      id v39 = *--v34;
      id v38 = v39;
      id v40 = *--v37;
      id v41 = v38;
      id v42 = v40;
      id v43 = [v41 v36[64]];
      if (v43 == [v42 v36[64]])
      {
        id v44 = [v41 policyHash];
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        uint64_t v58 = v46;

        id v47 = [v42 policyHash];
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
        uint64_t v50 = v49;

        if (v45 == v48 && v58 == v50)
        {

          swift_bridgeObjectRelease_n(v58, 2LL);
          uint64_t v6 = v56;
          uint64_t v4 = v57;
        }

        else
        {
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v58, v48, v50, 1LL);

          swift_bridgeObjectRelease(v58);
          swift_bridgeObjectRelease(v50);
          uint64_t v6 = v56;
          uint64_t v4 = v57;
          if ((v52 & 1) != 0) {
            goto LABEL_47;
          }
        }
      }

      else
      {
        id v53 = [v41 v36[64]];
        id v54 = [v42 v36[64]];

        if (v53 < v54)
        {
LABEL_47:
          Swift::Int v34 = v62;
          id v36 = &selRef_setAllSelves_;
          if (v60 != v64 || v35 >= v64) {
            *Swift::Int v35 = *v37;
          }
          id v67 = v37;
          goto LABEL_56;
        }
      }

      uint64_t v65 = v34;
      id v37 = v64;
      id v36 = &selRef_setAllSelves_;
      if (v60 < v62 || v35 >= v62 || v60 != v62) {
        *Swift::Int v35 = *v34;
      }
LABEL_56:
      if (v37 > v6)
      {
        --v35;
        uint64_t v5 = v37;
        if (v34 > v4) {
          continue;
        }
      }

      goto LABEL_58;
    }
  }

  if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst) {
      memmove(__dst, __src, 8 * v9);
    }
    id v13 = &v4[v9];
    uint64_t v65 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      id v14 = &selRef_setAllSelves_;
      Swift::Int v59 = v13;
      while (1)
      {
        uint64_t v15 = *v4;
        id v16 = *v5;
        id v17 = v15;
        id v18 = [v16 v14[64]];
        if (v18 == [v17 v14[64]])
        {
          id v63 = v5;
          uint64_t v19 = v6;
          uint64_t v20 = v4;
          id v21 = [v16 policyHash];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v24 = v23;

          id v25 = [v17 policyHash];
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          uint64_t v28 = v27;

          if (v22 == v26 && v24 == v28)
          {

            swift_bridgeObjectRelease_n(v24, 2LL);
            uint64_t v4 = v20;
            uint64_t v6 = v19;
            uint64_t v5 = v63;
            id v13 = v59;
            id v14 = &selRef_setAllSelves_;
          }

          else
          {
            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v28, 1LL);

            swift_bridgeObjectRelease(v24);
            swift_bridgeObjectRelease(v28);
            uint64_t v4 = v20;
            uint64_t v6 = v19;
            uint64_t v5 = v63;
            id v13 = v59;
            id v14 = &selRef_setAllSelves_;
            if ((v30 & 1) != 0) {
              goto LABEL_21;
            }
          }
        }

        else
        {
          id v31 = [v16 v14[64]];
          id v32 = [v17 v14[64]];

          if (v31 < v32)
          {
LABEL_21:
            id v33 = v5 + 1;
            if (v6 < v5 || v6 >= v33 || v6 != v5) {
              *uint64_t v6 = *v5;
            }
            goto LABEL_29;
          }
        }

        if (v6 != v4) {
          *uint64_t v6 = *v4;
        }
        SEL v66 = ++v4;
        id v33 = v5;
LABEL_29:
        ++v6;
        if (v4 < v13)
        {
          uint64_t v5 = v33;
        }

        id v67 = v6;
        goto LABEL_58;
      }
    }

    goto LABEL_58;
  }

uint64_t sub_1001556C4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_100155BC4(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

uint64_t sub_1001558A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  Swift::Int v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      id v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100152A44();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_100155F14(v8);
  uint64_t v16 = *v2;
  *uint64_t v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_100155A2C( uint64_t a1, const char *a2, void *a3, int64_t a4, void *a5, void *a6, BOOL a7, BOOL a8)
{
  uint64_t v9 = v8;
  swift_bridgeObjectRelease(*v9, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = __CocoaSet.count.getter(a1);
  uint64_t v14 = swift_unknownObjectRetain(a1, v13);
  Swift::Int v15 = sub_100151F1C( v14,  v12,  (uint64_t *)&unk_100256E90,  (uint64_t (*)(void))type metadata accessor for BottleMO);
  uint64_t v26 = (_TtC18TrustedPeersHelper6Client *)v15;
  Swift::Int v16 = *(void *)(v15 + 40);
  swift_retain(v15);
  Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
  uint64_t v18 = -1LL << *(_BYTE *)(v15 + 32);
  unint64_t v19 = v17 & ~v18;
  if (((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0)
  {
    type metadata accessor for BottleMO();
    id v20 = *(id *)(*(void *)(v15 + 48) + 8 * v19);
    char v21 = static NSObject.== infix(_:_:)(v20);

    if ((v21 & 1) != 0)
    {
LABEL_6:
      swift_release(v15);
      Swift::Int v15 = *(void *)(*(void *)(v15 + 48) + 8 * v19);
      sub_100155D74(v19);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *uint64_t v9 = v26;
        return v15;
      }

      __break(1u);
    }

    else
    {
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v15 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v15);
    __break(1u);
  }

  uint64_t result = swift_release(v15);
  __break(1u);
  return result;
}

uint64_t sub_100155BC4(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v8 = swift_unknownObjectRetain(a1, v7);
  Swift::Int v9 = sub_100152110(v8, v6, &qword_100256DD8, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
  Swift::Int v20 = v9;
  Swift::Int v10 = *(void *)(v9 + 40);
  swift_retain(v9);
  Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    id v14 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
    char v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
    {
LABEL_6:
      swift_release(v9);
      Swift::Int v9 = *(void *)(*(void *)(v9 + 48) + 8 * v13);
      sub_100155D74(v13);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *Swift::Int v3 = v20;
        return v9;
      }

      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
        char v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v9);
    __break(1u);
  }

  uint64_t result = swift_release(v9);
  __break(1u);
  return result;
}

unint64_t sub_100155D74(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            id v17 = (void *)(v16 + 8 * v2);
            char v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *id v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_100155F14(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          id v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

uint64_t sub_1001560D8(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v16 >= v7) {
      return swift_release(v2);
    }
    unint64_t v17 = *(void *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v7) {
        return swift_release(v2);
      }
      unint64_t v17 = *(void *)(v3 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v7) {
          return swift_release(v2);
        }
        unint64_t v17 = *(void *)(v3 + 8 * v8);
        if (!v17)
        {
          int64_t v8 = v16 + 3;
          if (v16 + 3 >= v7) {
            return swift_release(v2);
          }
          unint64_t v17 = *(void *)(v3 + 8 * v8);
          if (!v17) {
            break;
          }
        }
      }
    }

unint64_t *sub_10015626C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v42 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v40 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v41 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }

      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_49;
        }

        if (v12 >= v41) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v42 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v41) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v42 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v41) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v42 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v41) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v42 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v41)
                {
LABEL_47:
                  sub_100172694(a1);
                  return (unint64_t *)v2;
                }

                unint64_t v13 = *(void *)(v42 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1LL)) {
                      break;
                    }
                    if (v14 >= v41) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v42 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }

LABEL_49:
                  __break(1u);
                }

                int64_t v14 = v9 + 5;
              }
            }
          }
        }

Swift::Int sub_1001566D4(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(_BYTE *)(a2 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (1LL << v4) + 63;
  uint64_t v7 = v6 >> 6;
  size_t v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    Swift::Int v9 = sub_100156854((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v7, v3, a2);
    swift_release(a2);
  }

  else
  {
    unint64_t v10 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v10, v8);
    Swift::Int v9 = sub_100156854((unint64_t *)v10, v7, v3, a2);
    swift_release(a2);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v9;
}

Swift::Int sub_100156854(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v34 = *(void *)(a3 + 16);
  if (!v34)
  {
    uint64_t v28 = 0LL;
    goto LABEL_27;
  }

  uint64_t v36 = a4 + 56;
  uint64_t v33 = a3 + 32;
  swift_bridgeObjectRetain(a3);
  uint64_t v31 = 0LL;
  for (uint64_t i = 0LL; i != v34; ++i)
  {
    uint64_t v7 = (uint64_t *)(v33 + 16 * i);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v35);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v35, v9, v8);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(a4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = 1LL << v12;
    if (((1LL << v12) & *(void *)(v36 + 8 * (v12 >> 6))) == 0) {
      goto LABEL_3;
    }
    uint64_t v15 = *(void *)(a4 + 48);
    int64_t v16 = (void *)(v15 + 16 * v12);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v9 && v17 == v8;
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v9, v8, 0LL) & 1) == 0)
    {
      uint64_t v22 = ~v11;
      for (unint64_t j = v12 + 1; ; unint64_t j = v24 + 1)
      {
        unint64_t v24 = j & v22;
        BOOL v25 = (void *)(v15 + 16 * v24);
        uint64_t v26 = v25[1];
        BOOL v27 = *v25 == v9 && v26 == v8;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v9, v8, 0LL) & 1) != 0)
        {
          Swift::Int result = swift_bridgeObjectRelease(v8);
          unint64_t v13 = v24 >> 6;
          uint64_t v14 = 1LL << v24;
          goto LABEL_12;
        }
      }

LABEL_3:
      swift_bridgeObjectRelease(v8);
      continue;
    }

    Swift::Int result = swift_bridgeObjectRelease(v8);
LABEL_12:
    unint64_t v20 = a1[v13];
    a1[v13] = v14 | v20;
    if ((v14 & v20) == 0 && __OFADD__(v31++, 1LL))
    {
      __break(1u);
      return result;
    }
  }

  swift_bridgeObjectRelease(a3);
  uint64_t v5 = a2;
  uint64_t v28 = v31;
LABEL_27:
  swift_retain(a4);
  return sub_1001511DC(a1, v5, v28, a4);
}

        Swift::Int result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }

      Swift::Int result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_23:
      uint64_t v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    uint64_t v8 = v40 - 1;
    if (__OFSUB__(v40, 1LL))
    {
LABEL_47:
      __break(1u);
      return result;
    }

    if (v40 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

unint64_t *sub_100156A64( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  int64_t v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v43 = a3 + 56;
  while (2)
  {
    uint64_t v40 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }

        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_47;
        }

        int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }

            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v38 = v9 + 6;
                while (v14 != v38)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    int64_t v13 = v38 - 1;
                    goto LABEL_15;
                  }
                }

void sub_100156D58(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v3;
  unint64_t v8 = a1;
  uint64_t v9 = *v5;
  if ((*v5 & 0xC000000000000001LL) == 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    uint64_t v30 = *v5;
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if ((v8 & 0x8000000000000000LL) != 0 || 1LL << *(_BYTE *)(v30 + 32) <= (uint64_t)v8)
    {
      __break(1u);
    }

    else if (((*(void *)(v30 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v8) & 1) != 0)
    {
      if (*(_DWORD *)(v30 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(v8, a2) == *(_DWORD *)(v30 + 36))
      {
        uint64_t v31 = __CocoaSet.Index.element.getter(v8, a2);
        uint64_t v48 = v31;
        uint64_t v32 = type metadata accessor for BottleMO();
        swift_bridgeObjectRetain(v30);
        swift_unknownObjectRetain(v31, v33);
        swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v32, 7LL);
        char v4 = v49;
        swift_unknownObjectRelease(v31);
        Swift::Int v34 = NSObject._rawHashValue(seed:)(*(void *)(v30 + 40));
        uint64_t v35 = -1LL << *(_BYTE *)(v30 + 32);
        unint64_t v8 = v34 & ~v35;
        if (((*(void *)(v30 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
        {
          id v36 = *(id *)(*(void *)(v30 + 48) + 8 * v8);
          char v37 = static NSObject.== infix(_:_:)(v36);

          if ((v37 & 1) == 0)
          {
            uint64_t v38 = ~v35;
            do
            {
              unint64_t v8 = (v8 + 1) & v38;
              if (((*(void *)(v30 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
                goto LABEL_27;
              }
              id v39 = *(id *)(*(void *)(v30 + 48) + 8 * v8);
              char v40 = static NSObject.== infix(_:_:)(v39);
            }

            while ((v40 & 1) == 0);
          }

          swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v30, v41, v42, v43, v44, v45, v46, v47);
LABEL_20:
          uint64_t v49 = (void *)*v5;
          uint64_t *v5 = 0x8000000000000000LL;
          if (!isUniquelyReferenced_nonNull_native) {
            sub_100152F54((uint64_t *)&unk_100256E90);
          }
          sub_100155D74(v8);
          uint64_t v28 = (_TtC18TrustedPeersHelper6Client *)*v5;
          uint64_t *v5 = (uint64_t)v49;
          goto LABEL_23;
        }

void *sub_100157028(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    BOOL v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    Swift::Int result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t *sub_100157220(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v32 = result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v10 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
    Swift::Int result = Set.Iterator.init(_cocoa:)(v36, v8, v9, v10);
    uint64_t v4 = v36[0];
    uint64_t v11 = v36[1];
    uint64_t v12 = v36[2];
    int64_t v13 = v36[3];
    unint64_t v14 = v36[4];
    if (v6) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v15 = 0LL;
    goto LABEL_41;
  }

  int64_t v13 = 0LL;
  uint64_t v27 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v11 = a4 + 56;
  uint64_t v12 = ~v27;
  uint64_t v28 = -v27;
  if (v28 < 64) {
    uint64_t v29 = ~(-1LL << v28);
  }
  else {
    uint64_t v29 = -1LL;
  }
  unint64_t v14 = v29 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_39;
  }
LABEL_6:
  if (!a3)
  {
    uint64_t v15 = 0LL;
LABEL_41:
    uint64_t v30 = v32;
LABEL_44:
    *uint64_t v30 = v4;
    v30[1] = v11;
    v30[2] = v12;
    v30[3] = v13;
    v30[4] = v14;
    return (uint64_t *)v15;
  }

  if (a3 < 0) {
    goto LABEL_51;
  }
  uint64_t v15 = 0LL;
  int64_t v33 = (unint64_t)(v12 + 64) >> 6;
  uint64_t v31 = v12;
  while (1)
  {
    if (v4 < 0)
    {
      uint64_t v22 = __CocoaSet.Iterator.next()(result);
      if (!v22) {
        goto LABEL_43;
      }
      uint64_t v23 = v22;
      uint64_t v34 = v22;
      uint64_t v24 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
      swift_unknownObjectRetain(v23, v25);
      swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
      unint64_t v18 = v35;
      Swift::Int result = (uint64_t *)swift_unknownObjectRelease(v23);
      if (!v18) {
        goto LABEL_43;
      }
      goto LABEL_11;
    }

    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_10;
    }

    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v19 >= v33)
    {
      unint64_t v14 = 0LL;
      goto LABEL_43;
    }

    unint64_t v20 = *(void *)(v11 + 8 * v19);
    if (v20) {
      goto LABEL_26;
    }
    int64_t v21 = v13 + 2;
    if (v13 + 2 >= v33)
    {
      unint64_t v14 = 0LL;
      ++v13;
      goto LABEL_43;
    }

    unint64_t v20 = *(void *)(v11 + 8 * v21);
    if (!v20)
    {
      if (v13 + 3 >= v33) {
        goto LABEL_47;
      }
      unint64_t v20 = *(void *)(v11 + 8 * (v13 + 3));
      if (v20)
      {
        int64_t v19 = v13 + 3;
        goto LABEL_26;
      }

      int64_t v21 = v13 + 4;
      if (v13 + 4 >= v33)
      {
        unint64_t v14 = 0LL;
        v13 += 3LL;
        goto LABEL_43;
      }

      unint64_t v20 = *(void *)(v11 + 8 * v21);
      if (!v20)
      {
        int64_t v19 = v13 + 5;
        if (v13 + 5 >= v33)
        {
LABEL_47:
          unint64_t v14 = 0LL;
          int64_t v13 = v21;
          goto LABEL_43;
        }

        unint64_t v20 = *(void *)(v11 + 8 * v19);
        if (!v20)
        {
          int64_t v26 = v13 + 6;
          while (v33 != v26)
          {
            unint64_t v20 = *(void *)(v11 + 8 * v26++);
            if (v20)
            {
              int64_t v19 = v26 - 1;
              goto LABEL_26;
            }
          }

          unint64_t v14 = 0LL;
          int64_t v13 = v33 - 1;
          goto LABEL_43;
        }

        goto LABEL_26;
      }
    }

    int64_t v19 = v21;
LABEL_26:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v19 << 6);
    int64_t v13 = v19;
LABEL_10:
    Swift::Int result = (uint64_t *)*(id *)(*(void *)(v4 + 48) + 8 * v17);
    unint64_t v18 = result;
    if (!result) {
      goto LABEL_43;
    }
LABEL_11:
    ++v15;
    *v6++ = v18;
    if (v15 == a3)
    {
      uint64_t v15 = a3;
LABEL_43:
      uint64_t v12 = v31;
      uint64_t v30 = v32;
      goto LABEL_44;
    }
  }

  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_100157528(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    Swift::Int result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_100157724(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    uint64_t v2 = *(void *)(a1 + 64);
    uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
    uint64_t v4 = -1LL;
    if (v3 < 64) {
      uint64_t v4 = ~(-1LL << v3);
    }
    int64_t v20 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      unint64_t v5 = __clz(__rbit64(v4 & v2));
      uint64_t v6 = a2;
LABEL_20:
      uint64_t v10 = 16 * v5;
      uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + v10);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      int64_t v14 = (uint64_t *)(*(void *)(a1 + 56) + v10);
      uint64_t v16 = *v14;
      unint64_t v15 = v14[1];
      swift_bridgeObjectRetain(v12);
      sub_1000084E8(v16, v15);
      unint64_t v17 = sub_10000D1E8(v13, v12);
      LOBYTE(v13) = v18;
      swift_bridgeObjectRelease(v12);
      if ((v13 & 1) != 0) {
        __asm { BR              X8 }
      }

      sub_10000852C(v16, v15);
      return 0LL;
    }

    uint64_t v6 = a2;
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      unint64_t v7 = *(void *)(a1 + 72);
      uint64_t v8 = 1LL;
      if (v7) {
        goto LABEL_19;
      }
      uint64_t v8 = 2LL;
      unint64_t v7 = *(void *)(a1 + 80);
      if (v7) {
        goto LABEL_19;
      }
      uint64_t v8 = 3LL;
      unint64_t v7 = *(void *)(a1 + 88);
      if (v7)
      {
LABEL_19:
        unint64_t v5 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_20;
      }

      uint64_t v9 = 4LL;
      if (v20 > 4)
      {
        unint64_t v7 = *(void *)(a1 + 96);
        if (v7)
        {
          uint64_t v8 = 4LL;
          goto LABEL_19;
        }

        while (1)
        {
          uint64_t v8 = v9 + 1;
          if (__OFADD__(v9, 1LL))
          {
            __break(1u);
            JUMPOUT(0x1001580F4LL);
          }

          if (v8 >= v20) {
            break;
          }
          unint64_t v7 = *(void *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7) {
            goto LABEL_19;
          }
        }
      }
    }

    return 1LL;
  }

  return 0LL;
}

uint64_t sub_1001581B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, void), uint64_t a8, char *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v45 = a6;
  BOOL v46 = a7;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, v16);
  char v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v49[3] = a10;
  v49[4] = a11;
  int64_t v19 = sub_100176458(v49);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 16LL))(v19, a5, a10);
  uint64_t v20 = swift_allocObject(&unk_100239B58, 56LL, 7LL);
  sub_1000610A0((uint64_t)v49, v20 + 16);
  uint64_t v22 = *(void *)(v20 + 40);
  uint64_t v21 = *(void *)(v20 + 48);
  sub_100006248(v20 + 16, v22);
  uint64_t v23 = dispatch thunk of IteratorProtocol.next()(&v47, v22, v21);
  if ((v48 & 1) != 0)
  {
    v46(v45, 0LL);
  }

  else
  {
    uint64_t v41 = a8;
    __chkstk_darwin(v23, v24);
    v40[-6] = v25;
    v40[-5] = a9;
    uint64_t v26 = v43;
    v40[-4] = a3;
    v40[-3] = v26;
    id v42 = v18;
    uint64_t v27 = v44;
    v40[-2] = v44;
    v40[-1] = a4;
    uint64_t v28 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
    static Message.with(_:)(sub_100173954, &v40[-8], updated, v28);
    uint64_t v29 = *(void *)&a9[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v30 = *(void *)&a9[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    v40[1] = sub_1000084C4(&a9[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v29);
    uint64_t v31 = (void *)swift_allocObject(&unk_100239C20, 88LL, 7LL);
    uint64_t v32 = v46;
    v31[2] = a9;
    v31[3] = v32;
    uint64_t v33 = v41;
    uint64_t v34 = v45;
    v31[4] = v41;
    v31[5] = v34;
    v31[6] = v26;
    v31[7] = v27;
    v31[8] = a3;
    v31[9] = a4;
    v31[10] = v20;
    uint64_t v35 = *(void *)(v30 + 16);
    uint64_t v36 = v34;
    BOOL v46 = *(void (**)(uint64_t, void))(v35 + 32);
    char v37 = a9;
    swift_retain(v33);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_retain(v20);
    uint64_t v38 = (uint64_t)v42;
    ((void (*)(char *, uint64_t (*)(), void *, uint64_t, uint64_t))v46)( v42,  sub_10017396C,  v31,  v29,  v35);
    swift_release(v31);
    sub_1000415CC(v38, type metadata accessor for UpdateTrustRequest);
  }

  swift_release(v20);
  return sub_100007600(v49);
}

id sub_100158440()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = 0LL;
  id v2 = [v0 initForReadingFromData:isa error:&v8];

  id v3 = v8;
  if (v2)
  {
    id v4 = v8;
  }

  else
  {
    id v5 = v8;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v6);
  }

  return v2;
}

void sub_1001584FC(uint64_t a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = type metadata accessor for BottleMO();
    uint64_t v7 = sub_1000077B8( &qword_100251690,  (uint64_t (*)(uint64_t))type metadata accessor for BottleMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    id v8 = Set.Iterator.init(_cocoa:)(v53, v5, v6, v7);
    uint64_t v3 = v53[0];
    uint64_t v49 = v53[1];
    uint64_t v9 = v53[2];
    int64_t v10 = v53[3];
    unint64_t v11 = v53[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v49 = a1 + 56;
    uint64_t v13 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & *(void *)(a1 + 56);
    id v8 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v9 = v13;
    int64_t v10 = 0LL;
  }

  uint64_t v47 = v9;
  int64_t v48 = (unint64_t)(v9 + 64) >> 6;
  while (v3 < 0)
  {
    uint64_t v26 = __CocoaSet.Iterator.next()(v8);
    if (!v26) {
      goto LABEL_40;
    }
    uint64_t v27 = v26;
    uint64_t v52 = v26;
    uint64_t v28 = type metadata accessor for BottleMO();
    swift_unknownObjectRetain(v27, v29);
    swift_dynamicCast(&v54, &v52, (char *)&type metadata for Swift.AnyObject + 8, v28, 7LL);
    id v30 = v54;
    swift_unknownObjectRelease(v27);
    uint64_t v24 = v11;
    if (!v30) {
      goto LABEL_40;
    }
LABEL_36:
    id v35 = objc_msgSend(v30, "peerID", v47);
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      id v39 = v38;

      if (v37 == a2 && v39 == a3)
      {
        swift_bridgeObjectRelease(a3, v40, v41, v42, v43, v44, v45, v46);
LABEL_40:
        sub_100172694(v3);
        return;
      }

      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, a2, a3, 0LL);
      swift_bridgeObjectRelease(v39, v17, v18, v19, v20, v21, v22, v23);
      if ((v16 & 1) != 0) {
        goto LABEL_40;
      }
    }

    unint64_t v11 = v24;
  }

  if (v11)
  {
    uint64_t v24 = (v11 - 1) & v11;
    unint64_t v25 = __clz(__rbit64(v11)) | (v10 << 6);
LABEL_35:
    id v30 = *(id *)(*(void *)(v3 + 48) + 8 * v25);
    if (!v30) {
      goto LABEL_40;
    }
    goto LABEL_36;
  }

  int64_t v31 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v31 >= v48) {
      goto LABEL_40;
    }
    int64_t v32 = v10;
    unint64_t v33 = *(void *)(v49 + 8 * v31);
    ++v10;
    if (!v33)
    {
      int64_t v10 = v31 + 1;
      if (v31 + 1 >= v48) {
        goto LABEL_40;
      }
      unint64_t v33 = *(void *)(v49 + 8 * v10);
      if (!v33)
      {
        int64_t v10 = v31 + 2;
        if (v31 + 2 >= v48) {
          goto LABEL_40;
        }
        unint64_t v33 = *(void *)(v49 + 8 * v10);
        if (!v33)
        {
          int64_t v10 = v31 + 3;
          if (v31 + 3 >= v48) {
            goto LABEL_40;
          }
          unint64_t v33 = *(void *)(v49 + 8 * v10);
          if (!v33)
          {
            int64_t v10 = v31 + 4;
            if (v31 + 4 >= v48) {
              goto LABEL_40;
            }
            unint64_t v33 = *(void *)(v49 + 8 * v10);
            if (!v33)
            {
              uint64_t v34 = v32 + 6;
              while (v48 != v34)
              {
                unint64_t v33 = *(void *)(v49 + 8 * v34++);
                if (v33)
                {
                  int64_t v10 = v34 - 1;
                  goto LABEL_34;
                }
              }

              goto LABEL_40;
            }
          }
        }
      }
    }

void sub_100158854(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    uint64_t v5 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v6 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v33, v4, v5, v6);
    uint64_t v2 = v33[0];
    uint64_t v30 = v33[1];
    uint64_t v8 = v33[2];
    uint64_t v9 = v33[3];
    unint64_t v10 = v33[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v30 = a1 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v10 = v14 & *(void *)(a1 + 56);
    uint64_t v7 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = v12;
    uint64_t v9 = 0LL;
  }

  int64_t v29 = (unint64_t)(v8 + 64) >> 6;
  if ((v2 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v15 = __CocoaSet.Iterator.next()(v7);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v32 = v15;
    uint64_t v17 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    swift_unknownObjectRetain(v16, v18);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
    id v19 = v34;
    swift_unknownObjectRelease(v16);
    uint64_t v20 = v9;
    uint64_t v21 = v10;
    while (v19)
    {
      id v26 = [v19 versionNumber];
      id v27 = [a2 version];
      id v28 = [v27 versionNumber];

      if (v26 == v28) {
        break;
      }

      uint64_t v9 = v20;
      unint64_t v10 = v21;
      if (v2 < 0) {
        goto LABEL_11;
      }
LABEL_14:
      if (v10)
      {
        uint64_t v21 = (v10 - 1) & v10;
        unint64_t v22 = __clz(__rbit64(v10)) | (v9 << 6);
        uint64_t v20 = v9;
      }

      else
      {
        int64_t v23 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          return;
        }

        if (v23 >= v29) {
          break;
        }
        unint64_t v24 = *(void *)(v30 + 8 * v23);
        uint64_t v20 = v9 + 1;
        if (!v24)
        {
          uint64_t v20 = v9 + 2;
          if (v9 + 2 >= v29) {
            break;
          }
          unint64_t v24 = *(void *)(v30 + 8 * v20);
          if (!v24)
          {
            uint64_t v20 = v9 + 3;
            if (v9 + 3 >= v29) {
              break;
            }
            unint64_t v24 = *(void *)(v30 + 8 * v20);
            if (!v24)
            {
              uint64_t v20 = v9 + 4;
              if (v9 + 4 >= v29) {
                break;
              }
              unint64_t v24 = *(void *)(v30 + 8 * v20);
              if (!v24)
              {
                uint64_t v20 = v9 + 5;
                if (v9 + 5 >= v29) {
                  break;
                }
                unint64_t v24 = *(void *)(v30 + 8 * v20);
                if (!v24)
                {
                  uint64_t v25 = v9 + 6;
                  while (v29 != v25)
                  {
                    unint64_t v24 = *(void *)(v30 + 8 * v25++);
                    if (v24)
                    {
                      uint64_t v20 = v25 - 1;
                      goto LABEL_31;
                    }
                  }

                  break;
                }
              }
            }
          }
        }

void *sub_100158B94(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v23 = v3;
      unint64_t v4 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_9:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1LL)) {
          goto LABEL_21;
        }
        id v8 = [v5 beneficiaryID];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        uint64_t v11 = v10;

        id v12 = [a2 peerID];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v15 = v14;

        if (v9 == v13 && v11 == v15)
        {
          uint64_t v18 = swift_bridgeObjectRelease_n(v11, 2LL);
LABEL_17:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
          uint64_t v19 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
          uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v6);
          specialized ContiguousArray._endMutation()(v20);
          goto LABEL_5;
        }

        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v13, v15, 0LL);
        swift_bridgeObjectRelease(v11);
        uint64_t v18 = swift_bridgeObjectRelease(v15);
        if ((v17 & 1) != 0) {
          goto LABEL_17;
        }

LABEL_5:
        ++v4;
        if (v7 == v23) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      if (a1 < 0) {
        uint64_t v22 = a1;
      }
      else {
        uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (!v3) {
        return _swiftEmptyArrayStorage;
      }
    }

    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100158D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
LABEL_9:
        unint64_t v7 = v6;
        unint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_16;
        }
        if (!a2) {
          goto LABEL_4;
        }
        id v9 = [v6 tlk];
        id v10 = [v9 zoneID];

        id v11 = [v10 zoneName];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;

        LOBYTE(v11) = sub_10003B7F0(v12, (uint64_t)v14, a2);
        swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
        if ((v11 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
          uint64_t v23 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
          uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v7);
          specialized ContiguousArray._endMutation()(v24);
        }

        else
        {
LABEL_4:
        }

        ++v5;
        if (v8 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      if (a1 < 0) {
        uint64_t v26 = a1;
      }
      else {
        uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v26);
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    id v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

_TtC18TrustedPeersHelper6Client *sub_100158F50( _TtC18TrustedPeersHelper6Client *a1, const char *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9 = *(void *)a1->endpoint;
  if (v9)
  {
    unint64_t v10 = 0LL;
    uint64_t v36 = *(void *)a1->endpoint;
    uint64_t v37 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
    uint64_t v34 = v9 - 1;
    id v11 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    do
    {
      id v35 = v11;
      uint64_t v12 = (unint64_t *)&a1[1]._TtCs12_SwiftObject_opaque[16 * v10 + 8];
      unint64_t v13 = v10;
      while (1)
      {
        uint64_t v15 = *(v12 - 1);
        unint64_t v14 = *v12;
        id v16 = *(id *)&a2[v37];
        sub_1000084E8(v15, v14);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v39 = 0LL;
        unsigned int v18 = [v16 hasPotentiallyTrustedPeerWithSigningKey:isa error:&v39];

        if (v39)
        {
          swift_willThrow(v39);
          sub_10000852C(v15, v14);
          id v11 = v35;
          swift_release(v35, v26, v27, v28, v29, v30, v31, v32);
          goto LABEL_18;
        }

        if (v18) {
          break;
        }
        ++v13;
        sub_10000852C(v15, v14);
        v12 += 2;
        if (v36 == v13)
        {
          id v11 = v35;
          goto LABEL_18;
        }
      }

      id v19 = v35;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
      char v40 = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10014E764(0, *(void *)v35->endpoint + 1LL, (void *)1, a4, a5, a6, a7, a8);
        id v19 = v40;
      }

      unint64_t v22 = *(void *)v19->endpoint;
      unint64_t v21 = *(void *)v19->containerMap;
      uint64_t v23 = v19;
      if (v22 >= v21 >> 1)
      {
        sub_10014E764(v21 > 1, v22 + 1, (void *)1, a4, a5, a6, a7, a8);
        uint64_t v23 = v40;
      }

      unint64_t v10 = v13 + 1;
      *(void *)v23->endpoint = v22 + 1;
      uint64_t v24 = &v23->_TtCs12_SwiftObject_opaque[16 * v22];
      *((void *)v24 + 4) = v15;
      *((void *)v24 + 5) = v14;
      BOOL v25 = v34 == v13;
      id v11 = v23;
    }

    while (!v25);
  }

  else
  {
    id v11 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

void *sub_100159170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    Swift::Int result = _swiftEmptyArrayStorage;
    if (!v8) {
      break;
    }
    id v30 = _swiftEmptyArrayStorage;
    Swift::Int result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v8);
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t v10 = 0LL;
    while (v8 != v10)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      }
      else {
        id v11 = *(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      id v28 = v11;
      sub_1000DFEE8(&v28, a2, a3, a4, &v27, &v29);

      if (v5) {
        return (void *)swift_release(v30);
      }
      ++v10;
      uint64_t v14 = v29;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v15 = v30[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      if (v8 == v10) {
        return v30;
      }
    }

    __break(1u);
LABEL_16:
    if (a1 < 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v18, v19, v20, v21, v22, v23, v24);
  }

  return result;
}

void *sub_1001592E0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v49 = a3;
  uint64_t v50 = a4;
  id v48 = a2;
  uint64_t v7 = type metadata accessor for TLKShare(0LL);
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (unint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
    if (!v11) {
      break;
    }
    id v53 = _swiftEmptyArrayStorage;
    sub_10014E6E0(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0) {
      __break(1u);
    }
    uint64_t v12 = v53;
    unint64_t v45 = a1 & 0xC000000000000001LL;
    uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___CKKSTLKShare);
    uint64_t v43 = (_TtC18TrustedPeersHelper6Client *)a1;
    id v44 = v13;
    uint64_t v14 = 0LL;
    uint64_t v41 = v11;
    int64_t v42 = (char *)v10;
    while (v11 != v14)
    {
      uint64_t v51 = v5;
      if (v45) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, a1);
      }
      else {
        id v15 = *(id *)(a1 + 8 * v14 + 32);
      }
      uint64_t v16 = v15;
      id v17 = objc_msgSend(v48, "tlk", v41);
      id v18 = [v16 permanentInfo];
      id v52 = 0LL;
      id v19 = v49;
      id v20 = [v44 share:v17 as:v19 to:v18 epoch:v50 poisoned:0 error:&v52];
      id v21 = v52;
      if (!v20)
      {
        id v30 = v52;
        _convertNSErrorToError(_:)(v21);

        swift_willThrow(v31);
        swift_release(v12);

        return v12;
      }

      id v22 = v20;
      id v23 = v52;

      __chkstk_darwin(v24, v25);
      *(&v41 - 2) = (uint64_t)v22;
      uint64_t v26 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
      uint64_t v27 = (uint64_t)v42;
      uint64_t v28 = v51;
      static Message.with(_:)(sub_100176B54, &v41 - 4, v47, v26);
      uint64_t v5 = v28;

      id v53 = v12;
      unint64_t v10 = v12[2];
      unint64_t v29 = v12[3];
      if (v10 >= v29 >> 1)
      {
        sub_10014E6E0(v29 > 1, v10 + 1, 1);
        uint64_t v5 = v28;
        uint64_t v12 = v53;
      }

      ++v14;
      v12[2] = v10 + 1;
      sub_100041608( v27,  (uint64_t)v12 + ((*(unsigned __int8 *)(v46 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))
      + *(void *)(v46 + 72) * v10,
        type metadata accessor for TLKShare);
      uint64_t v11 = v41;
      a1 = (uint64_t)v43;
      if (v41 == v14) {
        return v12;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v33 = a1;
    }
    else {
      uint64_t v33 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a1, v34, v35, v36, v37, v38, v39, v40);
  }

  return v12;
}

uint64_t sub_100159634(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  uint64_t v69 = v9;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v63 - v15;
  uint64_t v17 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  Swift::Int v64 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v65 = (char *)&v63 - v24;
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v63 - v26;
  *(_BYTE *)(v4 + 40) = 0;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v67 = a2;
  *(void *)(v4 + 32) = a3;
  *(uint64_t *)((char *)&v63 - v26) = 1800LL;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( (char *)&v63 - v26,  enum case for DispatchTimeInterval.seconds(_:),  v17);
  uint64_t v28 = a1;
  uint64_t v66 = a3;
  uint64_t v29 = swift_bridgeObjectRetain(a3);
  static DispatchTime.now()(v29);
  DispatchTime.advanced(by:)(v27);
  uint64_t v30 = v68;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v69 + 8);
  v31(v13, v68);
  LOBYTE(v13) = OS_dispatch_semaphore.wait(timeout:)(v16);
  v31(v16, v30);
  if ((v13 & 1) != 0)
  {
    int64_t v36 = v28;
    uint64_t v37 = v18;
    uint64_t v38 = v17;
    BOOL v39 = v65;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v40, (uint64_t)qword_1002567D0);
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v41(v39, v27, v17);
    int64_t v42 = v36;
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v69 = swift_slowAlloc(64LL, -1LL);
      uint64_t v72 = v69;
      *(_DWORD *)uint64_t v45 = 136446466;
      uint64_t v46 = v64;
      v41(v64, v39, v38);
      uint64_t v47 = String.init<A>(describing:)(v46, v38);
      unint64_t v49 = v48;
      uint64_t v70 = sub_10017C4C4(v47, v48, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v49);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);
      *(_WORD *)(v45 + 12) = 2082;
      uint64_t v50 = *(void *)&v42[OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore + 8];
      uint64_t v70 = *(void *)&v42[OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore];
      uint64_t v71 = v50;
      swift_bridgeObjectRetain(v50);
      uint64_t v51 = sub_100007578((uint64_t *)&unk_100256C60);
      uint64_t v52 = String.init<A>(describing:)(&v70, v51);
      unint64_t v54 = v53;
      uint64_t v70 = sub_10017C4C4(v52, v53, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v45 + 14, v45 + 22);

      swift_bridgeObjectRelease(v54);
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Timeout after %{public}s waiting for semaphore (held by %{public}s)",  (uint8_t *)v45,  0x16u);
      uint64_t v55 = v69;
      swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v39, v38);
    }

    NSString v56 = String._bridgeToObjectiveC()();
    NSString v57 = String._bridgeToObjectiveC()();
    uint64_t v58 = *(void *)&v42[OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore + 8];
    if (v58) {
      unint64_t v59 = *(void *)&v42[OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore + 8];
    }
    else {
      unint64_t v59 = 0xE000000000000000LL;
    }
    uint64_t v60 = (void *)objc_opt_self(&OBJC_CLASS___SecABC);
    swift_bridgeObjectRetain(v58);
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v59);
    NSString v62 = String._bridgeToObjectiveC()();
    [v60 triggerAutoBugCaptureWithType:v56 subType:v57 subtypeContext:v61 domain:v62 events:0 payload:0 detectedProcess:0];

    _exit(1);
  }

  id v32 = &v28[OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore];
  uint64_t v33 = *(void *)&v28[OBJC_IVAR____TtC18TrustedPeersHelper9Container_operationWithSemaphore + 8];
  uint64_t v34 = v66;
  *(void *)id v32 = v67;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
  return v4;
}

uint64_t sub_100159B44(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v14);
  uint64_t v67 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (void *)swift_allocObject(&unk_100238DC0, 56LL, 7LL);
  uint64_t v64 = a3;
  uint64_t v65 = a6;
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  uint64_t v17 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  uint64_t v69 = v17;
  *(void *)(v17 + 16) = a1;
  uint64_t v18 = (uint64_t *)(v17 + 16);
  uint64_t v19 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  swift_retain(a4);
  id v63 = a5;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a1);
  unint64_t v20 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v68 = v19;
  *(void *)(v19 + 16) = v20;
  uint64_t v21 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v22 = (void *)swift_allocObject(&unk_100238DE8, 40LL, 7LL);
  _OWORD v22[2] = v18;
  v22[3] = a2;
  v22[4] = v19 + 16;
  uint64_t v23 = swift_allocObject(&unk_100238E10, 32LL, 7LL);
  *(void *)(v23 + 16) = sub_100176F48;
  *(void *)(v23 + 24) = v22;
  aBlock[4] = sub_100176BD4;
  uint64_t v71 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_100238E28;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v71;
  uint64_t v26 = a2;
  swift_retain(v23);
  swift_release(v25);
  [v21 performBlockAndWait:v24];
  _Block_release(v24);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v23, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t result = swift_release(v23);
  if ((v21 & 1) == 0)
  {
    uint64_t v29 = *v18;
    if ((*v18 & 0xC000000000000001LL) != 0)
    {
      if (v29 < 0) {
        uint64_t v30 = *v18;
      }
      else {
        uint64_t v30 = v29 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v18);
      uint64_t v31 = __CocoaSet.count.getter(v30);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v29, v32, v33, v34, v35, v36, v37, v38);
      if (v31) {
        goto LABEL_7;
      }
    }

    else if (*(void *)(v29 + 16))
    {
LABEL_7:
      __chkstk_darwin(result, v28);
      *(&v63 - 2) = v18;
      uint64_t v39 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
      uint64_t v65 = v22;
      uint64_t v40 = (uint64_t)v67;
      static Message.with(_:)(sub_100176B2C, &v63 - 4, PolicyDocumentsRequest, v39);
      uint64_t v41 = *(void *)&v26[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v42 = *(void *)&v26[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v26[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v41);
      uint64_t v43 = (void *)swift_allocObject(&unk_100238E60, 56LL, 7LL);
      v43[2] = v26;
      v43[3] = sub_1001729F8;
      uint64_t v45 = v68;
      uint64_t v44 = v69;
      v43[4] = v16;
      v43[5] = v44;
      v43[6] = v45;
      uint64_t v46 = *(void *)(v42 + 16);
      uint64_t v47 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v46 + 80);
      unint64_t v48 = v26;
      swift_retain(v16);
      swift_retain(v44);
      swift_retain(v45);
      v47(v40, sub_100171830, v43, v41, v46);
      swift_release(v43);
      sub_1000415CC(v40, type metadata accessor for FetchPolicyDocumentsRequest);
      swift_release(v16);
      swift_release(v65);
      swift_release(v44);
      uint64_t v49 = v45;
      return swift_release(v49);
    }

    uint64_t v50 = v68;
    uint64_t v51 = *(_TtC18TrustedPeersHelper6Client **)(v68 + 16);
    uint64_t v52 = (void *)swift_allocObject(&unk_100238E88, 64LL, 7LL);
    unint64_t v54 = v63;
    uint64_t v53 = v64;
    v52[2] = 0LL;
    v52[3] = v53;
    v52[4] = a4;
    v52[5] = v54;
    v52[6] = v65;
    v52[7] = a7;
    uint64_t v55 = swift_allocObject(&unk_100238EB0, 32LL, 7LL);
    *(void *)(v55 + 16) = sub_1000449DC;
    *(void *)(v55 + 24) = v52;
    swift_retain(a4);
    v54;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(v51);
    swift_retain(v52);
    sub_10011AAE4(0LL, 0LL, 0LL, 0LL, 0LL, (uint64_t)sub_100044A2C, v55);
    swift_release(v16);
    swift_release(v22);
    swift_release(v69);
    swift_release(v50);
    swift_bridgeObjectRelease(v51, v56, v57, v58, v59, v60, v61, v62);
    swift_release(v52);
    uint64_t v49 = v55;
    return swift_release(v49);
  }

  __break(1u);
  return result;
}

uint64_t sub_100159FC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_10015A0B0(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    uint64_t v41 = (_TtC18TrustedPeersHelper6Client *)v2;
    unint64_t v11 = v2 & 0xC000000000000001LL;
    uint64_t v12 = 4LL;
    uint64_t v13 = &selRef_aessivkey;
    uint64_t v14 = &selRef_aessivkey;
    while (1)
    {
      id v15 = v11 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v2) : *(id *)(v2 + 8 * v12);
      uint64_t v16 = v15;
      uint64_t v17 = v12 - 3;
      if (__OFADD__(v12 - 4, 1LL)) {
        break;
      }
      if ([v15 v13[138]])
      {
      }

      else
      {
        uint64_t v18 = v3;
        unint64_t v19 = v11;
        unint64_t v20 = v13;
        id v21 = [v16 v14[278]];
        id v22 = [v21 zoneID];

        id v23 = [v22 zoneName];
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        uint64_t v26 = v25;

        LOBYTE(v23) = sub_10003B7F0(v24, (uint64_t)v26, a2);
        swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
        if ((v23 & 1) == 0)
        {

          uint64_t v13 = v20;
          unint64_t v11 = v19;
          uint64_t v3 = v18;
          uint64_t v2 = (uint64_t)v41;
LABEL_17:
          uint64_t v14 = &selRef_aessivkey;
          goto LABEL_5;
        }

        uint64_t v14 = &selRef_aessivkey;
        id v34 = [v16 tlk];

        uint64_t v13 = v20;
        unint64_t v11 = v19;
        uint64_t v3 = v18;
        uint64_t v2 = (uint64_t)v41;
        if (v34)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
          unint64_t v37 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v36 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v37 >= v36 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
          }
          uint64_t v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
          specialized Array._endMutation()(v38);
          goto LABEL_17;
        }
      }

uint64_t sub_10015A30C(uint64_t a1, uint64_t a2)
{
  unint64_t v28 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v25 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  uint64_t v7 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  int64_t v26 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_19;
    }

    if (__OFADD__(v8++, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v26) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v25 + 8 * v8);
    if (!v12) {
      break;
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_19:
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 16 * v10 + 8);
    id v15 = *(void **)(a2 + v7);
    swift_bridgeObjectRetain(v14);
    id v16 = v15;
    NSString v17 = String._bridgeToObjectiveC()();
    id v27 = 0LL;
    id v18 = [v16 peerWithID:v17 error:&v27];

    if (v27)
    {
      v27;

      swift_willThrow(v23);
      swift_release(a1);
      swift_bridgeObjectRelease(v14);
      return swift_bridgeObjectRelease(v28);
    }

    uint64_t v19 = swift_bridgeObjectRelease(v14);
    if (v18)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      unint64_t v21 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v20 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v21 >= v20 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
      }
      uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
      specialized Array._endMutation()(v22);
    }
  }

  int64_t v13 = v8 + 1;
  if (v8 + 1 >= v26) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v13);
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v8 + 2;
  if (v8 + 2 >= v26) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v13);
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v8 + 3;
  if (v8 + 3 >= v26) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v13);
  if (v12)
  {
LABEL_17:
    int64_t v8 = v13;
    goto LABEL_18;
  }

  int64_t v13 = v8 + 4;
  if (v8 + 4 < v26)
  {
    unint64_t v12 = *(void *)(v25 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1LL)) {
          break;
        }
        if (v8 >= v26) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v25 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_18;
        }
      }

uint64_t sub_10015A5D8( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v17);
  char v79 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = (void *)swift_allocObject(&unk_100238BE0, 72LL, 7LL);
  uint64_t v74 = a3;
  uint64_t v75 = a6;
  v19[2] = a3;
  v19[3] = a4;
  v19[4] = a5;
  v19[5] = a6;
  v19[6] = a7;
  v19[7] = a8;
  uint64_t v76 = a8;
  v19[8] = a9;
  uint64_t v20 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  uint64_t v80 = v20;
  *(void *)(v20 + 16) = a1;
  unint64_t v21 = (uint64_t *)(v20 + 16);
  uint64_t v22 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  swift_retain(a4);
  uint64_t v73 = a5;
  uint64_t v77 = a7;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a1);
  unint64_t v23 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v81 = v22;
  *(void *)(v22 + 16) = v23;
  uint64_t v24 = v22 + 16;
  uint64_t v25 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  int64_t v26 = (void *)swift_allocObject(&unk_100238C08, 40LL, 7LL);
  _OWORD v26[2] = v21;
  v26[3] = a2;
  v26[4] = v24;
  uint64_t v27 = swift_allocObject(&unk_100238C30, 32LL, 7LL);
  *(void *)(v27 + 16) = sub_100176F48;
  *(void *)(v27 + 24) = v26;
  id v86 = sub_100176BD4;
  uint64_t v87 = v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v83 = 1107296256LL;
  unint64_t v84 = sub_1000DC9F8;
  int64_t v85 = &unk_100238C48;
  unint64_t v28 = _Block_copy(&aBlock);
  uint64_t v29 = v87;
  id v30 = a2;
  swift_retain(v27);
  swift_release(v29);
  [v25 performBlockAndWait:v28];
  _Block_release(v28);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation(v27, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t result = swift_release(v27);
  if ((v25 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v33 = *v21;
  if ((*v21 & 0xC000000000000001LL) != 0)
  {
    if (v33 < 0) {
      uint64_t v34 = *v21;
    }
    else {
      uint64_t v34 = v33 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v21);
    uint64_t v35 = __CocoaSet.count.getter(v34);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v33, v36, v37, v38, v39, v40, v41, v42);
    if (v35) {
      goto LABEL_7;
    }
  }

  else if (*(void *)(v33 + 16))
  {
LABEL_7:
    __chkstk_darwin(result, v32);
    *(&v73 - 2) = (char *)v21;
    uint64_t v43 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
    uint64_t v77 = v26;
    uint64_t v44 = (uint64_t)v79;
    static Message.with(_:)(sub_100176B2C, &v73 - 4, PolicyDocumentsRequest, v43);
    uint64_t v45 = *(void *)&v30[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v46 = *(void *)&v30[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&v30[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v45);
    uint64_t v47 = (void *)swift_allocObject(&unk_100238C80, 56LL, 7LL);
    v47[2] = v30;
    v47[3] = sub_10017282C;
    uint64_t v49 = v80;
    uint64_t v48 = v81;
    v47[4] = v19;
    v47[5] = v49;
    v47[6] = v48;
    uint64_t v50 = *(void *)(v46 + 16);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v50 + 80);
    uint64_t v52 = v30;
    swift_retain(v19);
    swift_retain(v49);
    swift_retain(v48);
    v51(v44, sub_100171830, v47, v45, v50);
    swift_release(v47);
    sub_1000415CC(v44, type metadata accessor for FetchPolicyDocumentsRequest);
    swift_release(v19);
    swift_release(v77);
    swift_release(v49);
    return swift_release(v48);
  }

  uint64_t v53 = v73;
  unint64_t v54 = *(char **)&v73[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  PolicyDocumentsuint64_t Request = *(void *)(v81 + 16);
  char v79 = v54;
  uint64_t v55 = (void *)swift_allocObject(&unk_100238CA8, 72LL, 7LL);
  uint64_t v56 = v74;
  v55[2] = v53;
  v55[3] = v56;
  uint64_t v57 = v75;
  v55[4] = a4;
  v55[5] = v57;
  uint64_t v58 = v76;
  id v59 = v77;
  v55[6] = v77;
  void v55[7] = v58;
  v55[8] = a9;
  uint64_t v60 = swift_allocObject(&unk_100238CD0, 32LL, 7LL);
  *(void *)(v60 + 16) = sub_10004CF04;
  *(void *)(v60 + 24) = v55;
  id v86 = sub_100176BD4;
  uint64_t v87 = v60;
  aBlock = _NSConcreteStackBlock;
  uint64_t v83 = 1107296256LL;
  unint64_t v84 = sub_1000DC9F8;
  int64_t v85 = &unk_100238CE8;
  BOOL v61 = _Block_copy(&aBlock);
  uint64_t v62 = v87;
  swift_retain(a4);
  id v63 = v53;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(a9);
  uint64_t v64 = (_TtC18TrustedPeersHelper6Client *)PolicyDocumentsRequest;
  swift_bridgeObjectRetain(PolicyDocumentsRequest);
  swift_retain(v60);
  swift_release(v62);
  [v79 performBlockAndWait:v61];
  _Block_release(v61);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v60, "", 120LL, 44LL, 41LL, 1LL);
  swift_release(v19);
  swift_release(v26);
  swift_release(v80);
  swift_release(v81);
  swift_bridgeObjectRelease(v64, v66, v67, v68, v69, v70, v71, v72);
  swift_release(v55);
  uint64_t result = swift_release(v60);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    goto LABEL_12;
  }
  return result;
}

Swift::Int sub_10015AB0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100007578(&qword_100256BA0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      unint64_t v6 = (uint64_t *)(v32 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = (_TtC18TrustedPeersHelper6Client *)v6[1];
      Hasher.init(_seed:)(v33);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v33, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v16 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)(v5 + 8 * (v17 >> 6));
      uint64_t v20 = 1LL << v17;
      if (((1LL << v17) & v19) != 0)
      {
        uint64_t v21 = *(void *)(v3 + 48);
        uint64_t v22 = (void *)(v21 + 16 * v17);
        unint64_t v23 = (const char *)v22[1];
        BOOL v24 = *v22 == v8 && v23 == (const char *)v7;
        if (v24 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7, v23, v10, v11, v12, v13, v14, v15);
          goto LABEL_4;
        }

        uint64_t v25 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v25;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v5 + 8 * (v17 >> 6));
          uint64_t v20 = 1LL << v17;
          if ((v19 & (1LL << v17)) == 0) {
            break;
          }
          int64_t v26 = (void *)(v21 + 16 * v17);
          unint64_t v23 = (const char *)v26[1];
          if (*v26 != v8 || v23 != (const char *)v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v26, v23, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v18) = v20 | v19;
      unint64_t v28 = (void *)(*(void *)(v3 + 48) + 16 * v17);
      *unint64_t v28 = v8;
      v28[1] = v7;
      uint64_t v29 = *(void *)(v3 + 16);
      BOOL v30 = __OFADD__(v29, 1LL);
      uint64_t v31 = v29 + 1;
      if (v30)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v31;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10015ACAC(uint64_t a1, char *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v13);
  id v69 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v15 = (void *)swift_allocObject(&unk_100238AA0, 48LL, 7LL);
  int64_t v68 = a3;
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  void v15[5] = a6;
  uint64_t v16 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  uint64_t v70 = v16;
  *(void *)(v16 + 16) = a1;
  unint64_t v17 = (uint64_t *)(v16 + 16);
  uint64_t v18 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  swift_retain(a4);
  id v67 = a5;
  id v66 = a6;
  swift_bridgeObjectRetain(a1);
  unint64_t v19 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v71 = v18;
  *(void *)(v18 + 16) = v19;
  uint64_t v20 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v21 = (void *)swift_allocObject(&unk_100238AC8, 40LL, 7LL);
  v21[2] = v17;
  v21[3] = a2;
  v21[4] = v18 + 16;
  uint64_t v22 = swift_allocObject(&unk_100238AF0, 32LL, 7LL);
  *(void *)(v22 + 16) = sub_100176F48;
  *(void *)(v22 + 24) = v21;
  uint64_t v76 = sub_100176BD4;
  uint64_t v77 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v73 = 1107296256LL;
  uint64_t v74 = sub_1000DC9F8;
  uint64_t v75 = &unk_100238B08;
  unint64_t v23 = _Block_copy(&aBlock);
  uint64_t v24 = v77;
  uint64_t v25 = a2;
  swift_retain(v22);
  swift_release(v24);
  [v20 performBlockAndWait:v23];
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v22, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t result = swift_release(v22);
  if ((v23 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v28 = *v17;
  if ((*v17 & 0xC000000000000001LL) != 0)
  {
    if (v28 < 0) {
      uint64_t v29 = *v17;
    }
    else {
      uint64_t v29 = v28 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v17);
    uint64_t v30 = __CocoaSet.count.getter(v29);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v28, v31, v32, v33, v34, v35, v36, v37);
    if (v30) {
      goto LABEL_7;
    }
  }

  else if (*(void *)(v28 + 16))
  {
LABEL_7:
    __chkstk_darwin(result, v27);
    *(&v65 - 2) = (uint64_t)v17;
    uint64_t v38 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
    int64_t v68 = v21;
    uint64_t v39 = (uint64_t)v69;
    static Message.with(_:)(sub_100176B2C, &v65 - 4, PolicyDocumentsRequest, v38);
    uint64_t v40 = *(void *)&v25[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v41 = *(void *)&v25[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&v25[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v40);
    BOOL v42 = (void *)swift_allocObject(&unk_100238B40, 56LL, 7LL);
    uint64_t v42[2] = v25;
    v42[3] = sub_1001727A4;
    uint64_t v44 = v70;
    uint64_t v43 = v71;
    v42[4] = v15;
    v42[5] = v44;
    v42[6] = v43;
    uint64_t v45 = *(void *)(v41 + 16);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v45 + 80);
    uint64_t v47 = v25;
    swift_retain(v15);
    swift_retain(v44);
    swift_retain(v43);
    v46(v39, sub_100171830, v42, v40, v45);
    swift_release(v42);
    sub_1000415CC(v39, type metadata accessor for FetchPolicyDocumentsRequest);
    swift_release(v15);
    swift_release(v68);
    swift_release(v44);
    return swift_release(v43);
  }

  uint64_t v48 = *(_TtC18TrustedPeersHelper6Client **)(v71 + 16);
  uint64_t v49 = v67;
  id v69 = *(char **)&v67[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v50 = (void *)swift_allocObject(&unk_100238B68, 48LL, 7LL);
  uint64_t v51 = v68;
  v50[2] = v49;
  v50[3] = v51;
  uint64_t v52 = v66;
  v50[4] = a4;
  v50[5] = v52;
  uint64_t v53 = swift_allocObject(&unk_100238B90, 32LL, 7LL);
  *(void *)(v53 + 16) = sub_10004CE48;
  *(void *)(v53 + 24) = v50;
  uint64_t v76 = sub_100176BD4;
  uint64_t v77 = v53;
  aBlock = _NSConcreteStackBlock;
  uint64_t v73 = 1107296256LL;
  uint64_t v74 = sub_1000DC9F8;
  uint64_t v75 = &unk_100238BA8;
  unint64_t v54 = _Block_copy(&aBlock);
  uint64_t v55 = v77;
  swift_retain(a4);
  id v56 = v49;
  id v57 = v52;
  swift_bridgeObjectRetain(v48);
  swift_retain(v53);
  swift_release(v55);
  [v69 performBlockAndWait:v54];
  _Block_release(v54);
  LOBYTE(v54) = swift_isEscapingClosureAtFileLocation(v53, "", 120LL, 194LL, 41LL, 1LL);
  swift_release(v15);
  swift_release(v21);
  swift_release(v70);
  swift_release(v71);
  swift_bridgeObjectRelease(v48, v58, v59, v60, v61, v62, v63, v64);
  swift_release(v50);
  uint64_t result = swift_release(v53);
  return result;
}

uint64_t sub_10015B1A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10015B294(uint64_t a1, void *a2, _TtC18TrustedPeersHelper6Client **a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  int64_t v29 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v12 = 0LL;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v20 = *v18;
    unint64_t v19 = (_TtC18TrustedPeersHelper6Client *)v18[1];
    swift_bridgeObjectRetain(v19);
    uint64_t v4 = objc_autoreleasePoolPush();
    sub_1000E20E4(a2, v20, v19, a3);
    if (v5) {
      break;
    }
    uint64_t v5 = 0LL;
    objc_autoreleasePoolPop(v4);
    swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }

    if (v12 >= v29) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v28 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v29) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v28 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v12 + 2;
        if (v12 + 2 >= v29) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v28 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v12 + 3;
          if (v12 + 3 >= v29) {
            goto LABEL_25;
          }
          unint64_t v16 = *(void *)(v28 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v12 + 4;
            if (v12 + 4 >= v29)
            {
LABEL_25:
              swift_release(a1);
              return;
            }

            unint64_t v16 = *(void *)(v28 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_27;
                }
                if (v12 >= v29) {
                  goto LABEL_25;
                }
                unint64_t v16 = *(void *)(v28 + 8 * v12);
                ++v17;
                if (v16) {
                  goto LABEL_17;
                }
              }
            }
          }
        }
      }

      int64_t v12 = v17;
    }

void sub_10015B480(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = v4;
  uint64_t v22 = a1 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 56);
  int64_t v23 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    unint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = *v19;
    unint64_t v20 = v19[1];
    swift_bridgeObjectRetain(v20);
    uint64_t v5 = objc_autoreleasePoolPush();
    sub_1000EEA18(a2, v21, v20, a3, a4);
    if (v6) {
      break;
    }
    uint64_t v6 = 0LL;
    objc_autoreleasePoolPop(v5);
    swift_bridgeObjectRelease(v20);
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v13++, 1LL))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }

    if (v13 >= v23) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v22 + 8 * v13);
    if (!v17)
    {
      int64_t v18 = v13 + 1;
      if (v13 + 1 >= v23) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v22 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v13 + 2;
        if (v13 + 2 >= v23) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v22 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v13 + 3;
          if (v13 + 3 >= v23) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v22 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v13 + 4;
            if (v13 + 4 >= v23)
            {
LABEL_25:
              swift_release(a1);
              return;
            }

            unint64_t v17 = *(void *)(v22 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_27;
                }
                if (v13 >= v23) {
                  goto LABEL_25;
                }
                unint64_t v17 = *(void *)(v22 + 8 * v13);
                ++v18;
                if (v17) {
                  goto LABEL_17;
                }
              }
            }
          }
        }
      }

      int64_t v13 = v18;
    }

void sub_10015B674(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = type metadata accessor for CustodianRecoveryKeyMO();
    uint64_t v7 = sub_1000077B8( &qword_100256B88,  (uint64_t (*)(uint64_t))type metadata accessor for CustodianRecoveryKeyMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v49, v5, v6, v7);
    uint64_t v3 = v49[0];
    uint64_t v45 = v49[1];
    uint64_t v10 = v49[2];
    uint64_t v9 = v49[3];
    unint64_t v11 = v49[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v45 = a1 + 56;
    uint64_t v10 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v9 = 0LL;
  }

  int64_t v44 = (unint64_t)(v10 + 64) >> 6;
  BOOL v15 = &selRef_setAllSelves_;
  uint64_t v43 = v3;
  while (1)
  {
    uint64_t v16 = v9;
    if (v3 < 0)
    {
      uint64_t v19 = __CocoaSet.Iterator.next()(v8);
      if (!v19) {
        goto LABEL_42;
      }
      uint64_t v20 = v19;
      uint64_t v48 = v19;
      uint64_t v21 = type metadata accessor for CustodianRecoveryKeyMO();
      swift_unknownObjectRetain(v20, v22);
      swift_dynamicCast(&v50, &v48, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
      id v23 = v50;
      swift_unknownObjectRelease(v20);
      if (!v23) {
        goto LABEL_42;
      }
      goto LABEL_36;
    }

    if (!v11) {
      break;
    }
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v18 = v17 | (v9 << 6);
LABEL_35:
    id v23 = *(id *)(*(void *)(v3 + 48) + 8 * v18);
    if (!v23) {
      goto LABEL_42;
    }
LABEL_36:
    id v27 = [v23 v15[151]];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v31 = v30;

      id v32 = [v23 crkInfoSig];
      if (!v32)
      {
        sub_10000852C(v29, v31);
        goto LABEL_12;
      }

      int64_t v33 = v32;
      unint64_t v46 = v11;
      uint64_t v47 = v9;
      uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
      unint64_t v36 = v35;

      id v37 = a2;
      sub_1000084E8(v29, v31);
      sub_1000084E8(v34, v36);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v39 = Data._bridgeToObjectiveC()().super.isa;
      id v40 =  [(id)objc_opt_self(TPCustodianRecoveryKey) custodianRecoveryKeyWithData:isa sig:v39 keyFactory:v37];

      sub_10000852C(v34, v36);
      sub_10000852C(v29, v31);

      if (v40)
      {
        [a3 registerCustodianRecoveryKey:v40];
        sub_10000852C(v29, v31);
        sub_10000852C(v34, v36);

        id v23 = v40;
      }

      else
      {
        sub_10000852C(v29, v31);
        sub_10000852C(v34, v36);
      }

      uint64_t v3 = v43;
      BOOL v15 = &selRef_setAllSelves_;
      unint64_t v11 = v46;
      uint64_t v9 = v47;
    }

    else
    {
LABEL_12:
    }
  }

  int64_t v24 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v24 >= v44) {
      goto LABEL_42;
    }
    unint64_t v25 = *(void *)(v45 + 8 * v24);
    ++v9;
    if (!v25)
    {
      uint64_t v9 = v16 + 2;
      if (v16 + 2 >= v44) {
        goto LABEL_42;
      }
      unint64_t v25 = *(void *)(v45 + 8 * v9);
      if (!v25)
      {
        uint64_t v9 = v16 + 3;
        if (v16 + 3 >= v44) {
          goto LABEL_42;
        }
        unint64_t v25 = *(void *)(v45 + 8 * v9);
        if (!v25)
        {
          uint64_t v9 = v16 + 4;
          if (v16 + 4 >= v44) {
            goto LABEL_42;
          }
          unint64_t v25 = *(void *)(v45 + 8 * v9);
          if (!v25)
          {
            uint64_t v9 = v16 + 5;
            if (v16 + 5 >= v44) {
              goto LABEL_42;
            }
            unint64_t v25 = *(void *)(v45 + 8 * v9);
            if (!v25)
            {
              uint64_t v26 = v16 + 6;
              while (v44 != v26)
              {
                unint64_t v25 = *(void *)(v45 + 8 * v26++);
                if (v25)
                {
                  uint64_t v9 = v26 - 1;
                  goto LABEL_34;
                }
              }

unint64_t sub_10015BAA0(unint64_t result)
{
  if (result >= 7)
  {
    uint64_t v11 = v2;
    uint64_t v12 = v1;
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    uint64_t v9 = 0LL;
    unint64_t v10 = 0xE000000000000000LL;
    unint64_t v5 = result;
    _StringGuts.grow(_:)(24LL);
    v6._object = (void *)0x80000001001FA300LL;
    v6._countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v6);
    unint64_t v8 = v5;
    type metadata accessor for CuttlefishResetReason(0LL);
    _print_unlocked<A, B>(_:_:)( &v8,  &v9,  v7,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v9,  v10,  "TrustedPeersHelper/Container.swift",  34LL,  2LL,  60LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_10015BB64( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char *isEscapingClosureAtFileLocation, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20, unint64_t a21, uint64_t a22, unint64_t a23)
{
  uint64_t v26 = a22;
  id v66 = a12;
  if (!a1)
  {
    uint64_t v56 = a2;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v33, (uint64_t)qword_1002567D0);
    swift_errorRetain(v56);
    uint64_t v34 = swift_errorRetain(v56);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v38 = static os_log_type_t.error.getter(v55, v35, v36, v37);
    if (os_log_type_enabled(v55, v38))
    {
      BOOL v64 = isEscapingClosureAtFileLocation;
      uint64_t v62 = a7;
      Class v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v40;
      *(_DWORD *)Class v39 = 136446210;
      uint64_t v69 = v56;
      swift_errorRetain(v56);
      uint64_t v41 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v42 = String.init<A>(describing:)(&v69, v41);
      int64_t v44 = (_TtC18TrustedPeersHelper6Client *)v43;
      uint64_t v69 = sub_10017C4C4(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v39 + 4, v39 + 12);
      uint64_t v45 = v44;
      char isEscapingClosureAtFileLocation = v64;
      swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v38, "Unable to load encryption key: %{public}s", v39, 0xCu);
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      uint64_t v53 = v39;
      a7 = v62;
      swift_slowDealloc(v53, -1LL, -1LL);
LABEL_10:

      return sub_1000FD308( 0LL,  v56,  a6,  a7,  isEscapingClosureAtFileLocation,  a9,  a10,  a11,  (uint64_t)v66,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  v26,  a23);
    }

uint64_t sub_10015C0E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, _TtC18TrustedPeersHelper6Client *a9, void *a10, _TtC18TrustedPeersHelper6Client *a11, void *a12, _TtC18TrustedPeersHelper6Client *a13, void *a14, _TtC18TrustedPeersHelper6Client *a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20, unint64_t a21, uint64_t a22, unint64_t a23)
{
  id v25 = a8;
  swift_bridgeObjectRetain(a9);
  id v26 = a10;
  swift_bridgeObjectRetain(a11);
  swift_bridgeObjectRetain(a13);
  id v27 = a14;
  id v358 = (id)objc_opt_self(&OBJC_CLASS____SFKeychainManager);
  swift_bridgeObjectRetain(a15);
  swift_retain_n(a7, 2LL);
  id v28 = v25;
  swift_bridgeObjectRetain_n(a9, 2LL);
  id v29 = v26;
  swift_bridgeObjectRetain_n(a11, 2LL);
  swift_bridgeObjectRetain_n(a13, 2LL);
  id v30 = v27;
  id v31 = v28;
  id v368 = v29;
  id v371 = v30;
  sub_1000084E8(a16, a17);
  sub_1000084E8(a18, a19);
  sub_1000084E8(a20, a21);
  sub_1000084E8(a22, a23);
  swift_bridgeObjectRetain(a15);
  sub_1000084E8(a16, a17);
  sub_1000084E8(a18, a19);
  sub_1000084E8(a20, a21);
  sub_1000084E8(a22, a23);
  swift_bridgeObjectRetain(a15);
  sub_1000084E8(a16, a17);
  sub_1000084E8(a18, a19);
  sub_1000084E8(a20, a21);
  sub_1000084E8(a22, a23);
  swift_retain(a7);
  id v353 = v31;
  swift_bridgeObjectRetain(a9);
  id v366 = v368;
  swift_bridgeObjectRetain(a11);
  swift_bridgeObjectRetain(a13);
  id v369 = v371;
  swift_bridgeObjectRetain(a15);
  sub_1000084E8(a16, a17);
  sub_1000084E8(a18, a19);
  sub_1000084E8(a20, a21);
  sub_1000084E8(a22, a23);
  swift_retain(a7);
  id v372 = v353;
  swift_bridgeObjectRetain(a9);
  id v367 = v366;
  swift_bridgeObjectRetain(a11);
  swift_bridgeObjectRetain(a13);
  id v32 = v369;
  swift_bridgeObjectRetain(a15);
  sub_1000084E8(a16, a17);
  sub_1000084E8(a18, a19);
  sub_1000084E8(a20, a21);
  sub_1000084E8(a22, a23);
  id v33 = [v358 defaultManager];
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [v33 identityForIdentifier:v34];

  uint64_t v370 = v32;
  if (!v35)
  {
    swift_retain(a7);
    BOOL v360 = (char *)v372;
    swift_bridgeObjectRetain(a9);
    id v355 = v367;
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a13);
    id v364 = v32;
    swift_bridgeObjectRetain(a15);
    sub_1000084E8(a16, a17);
    sub_1000084E8(a18, a19);
    sub_1000084E8(a20, a21);
    sub_1000084E8(a22, a23);
    sub_10015BB64( 0LL,  0LL,  a3,  a4,  a5,  a6,  a7,  v360,  (uint64_t)a9,  v355,  (uint64_t)a11,  a12,  (uint64_t)a13,  v364,  (uint64_t)a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23);
    sub_10000852C(a22, a23);
    sub_10000852C(a20, a21);
    uint64_t v55 = v32;
    sub_10000852C(a18, a19);
    sub_10000852C(a16, a17);

    swift_release_n(a7, 2LL);
    swift_bridgeObjectRelease(a9, v79, v80, v81, v82, v83, v84, v85);

    swift_bridgeObjectRelease(a11, v86, v87, v88, v89, v90, v91, v92);
    swift_bridgeObjectRelease(a13, v93, v94, v95, v96, v97, v98, v99);

    uint64_t v63 = a15;
    swift_bridgeObjectRelease(a15, v100, v101, v102, v103, v104, v105, v106);
    id v47 = a11;
    Class v39 = a9;
    uint64_t v37 = a16;
    int64_t v78 = v367;
    uint64_t v38 = a18;
    goto LABEL_18;
  }

  id v36 = [v35 resultType];
  if (!v36)
  {
    id v107 = v35;
    id v108 = [v107 value];
    if (v108)
    {
      uint64_t v109 = v108;
      id v110 = [v108 keyPair];

      if (v110)
      {
        uint64_t v111 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
        uint64_t v112 = swift_dynamicCastObjCClass(v110, v111);
        if (v112)
        {
          unint64_t v113 = a19;
          uint64_t v114 = a16;
          BOOL v115 = a9;
          uint64_t v116 = v367;
          BOOL v361 = (void *)v112;
LABEL_17:
          unint64_t v177 = v113;
          swift_retain(a7);
          uint64_t v344 = (char *)v372;
          swift_bridgeObjectRetain(v115);
          id v365 = v116;
          swift_bridgeObjectRetain(a11);
          swift_bridgeObjectRetain(a13);
          id v348 = v32;
          swift_bridgeObjectRetain(a15);
          sub_1000084E8(v114, a17);
          sub_1000084E8(a18, v177);
          sub_1000084E8(a20, a21);
          sub_1000084E8(a22, a23);
          sub_10015BB64( v361,  0LL,  a3,  a4,  a5,  a6,  a7,  v344,  (uint64_t)a9,  v365,  (uint64_t)a11,  a12,  (uint64_t)a13,  v348,  (uint64_t)a15,  v114,  a17,  a18,  v177,  a20,  a21,  a22,  a23);
          uint64_t v38 = a18;
          sub_10000852C(a22, a23);
          sub_10000852C(a20, a21);
          sub_10000852C(a18, a19);
          uint64_t v178 = v114;
          sub_10000852C(v114, a17);

          Class v39 = a9;
          swift_release_n(a7, 2LL);

          swift_bridgeObjectRelease(a9, v179, v180, v181, v182, v183, v184, v185);
          id v47 = a11;
          swift_bridgeObjectRelease(a11, v186, v187, v188, v189, v190, v191, v192);
          uint64_t v55 = v32;
          swift_bridgeObjectRelease(a13, v193, v194, v195, v196, v197, v198, v199);

          uint64_t v63 = a15;
          swift_bridgeObjectRelease(a15, v200, v201, v202, v203, v204, v205, v206);

          int64_t v78 = v367;
          uint64_t v37 = v178;
          goto LABEL_18;
        }
      }

      BOOL v361 = 0LL;
      unint64_t v113 = a19;
      uint64_t v114 = a16;
      BOOL v115 = a9;
      uint64_t v116 = v367;
      goto LABEL_17;
    }

    BOOL v361 = 0LL;
    unint64_t v113 = a19;
    BOOL v115 = a9;
    uint64_t v116 = v367;
    uint64_t v114 = a16;
    goto LABEL_17;
  }

  if (v36 == (id)1)
  {
    unint64_t v117 = sub_100043F74();
    uint64_t v362 = swift_allocError(&type metadata for ContainerError, v117, 0LL, 0LL);
    *(_OWORD *)uint64_t v118 = xmmword_1001E67D0;
    *(_BYTE *)(v118 + 16) = 13;
    swift_retain(a7);
    os_log_type_t v346 = (char *)v372;
    swift_bridgeObjectRetain(a9);
    id v356 = v367;
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a13);
    id v342 = v32;
    swift_bridgeObjectRetain(a15);
    sub_1000084E8(a16, a17);
    sub_1000084E8(a18, a19);
    sub_1000084E8(a20, a21);
    sub_1000084E8(a22, a23);
    sub_10015BB64( 0LL,  v362,  a3,  a4,  a5,  a6,  a7,  v346,  (uint64_t)a9,  v356,  (uint64_t)a11,  a12,  (uint64_t)a13,  v342,  (uint64_t)a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23);
    uint64_t v38 = a18;
    sub_10000852C(a22, a23);
    uint64_t v37 = a16;
    uint64_t v55 = v370;
    sub_10000852C(a20, a21);
    sub_10000852C(a18, a19);
    sub_10000852C(a16, a17);

    swift_release(a7);
    swift_bridgeObjectRelease(a9, v119, v120, v121, v122, v123, v124, v125);

    id v47 = a11;
    swift_bridgeObjectRelease(a11, v126, v127, v128, v129, v130, v131, v132);
    swift_bridgeObjectRelease(a13, v133, v134, v135, v136, v137, v138, v139);

    Class v39 = a9;
    uint64_t v63 = a15;
    swift_bridgeObjectRelease(a15, v140, v141, v142, v143, v144, v145, v146);
    swift_errorRelease();

    swift_release(a7);
    int64_t v78 = v367;
  }

  else
  {
    if (v36 == (id)2)
    {
      id v341 = [v35 error];
      swift_retain(a7);
      unint64_t v354 = (char *)v372;
      swift_bridgeObjectRetain(a9);
      id v359 = v367;
      swift_bridgeObjectRetain(a11);
      swift_bridgeObjectRetain(a13);
      id v345 = v32;
      swift_bridgeObjectRetain(a15);
      uint64_t v37 = a16;
      sub_1000084E8(a16, a17);
      sub_1000084E8(a18, a19);
      sub_1000084E8(a20, a21);
      sub_1000084E8(a22, a23);
      sub_10015BB64( 0LL,  (uint64_t)v341,  a3,  a4,  a5,  a6,  a7,  v354,  (uint64_t)a9,  v359,  (uint64_t)a11,  a12,  (uint64_t)a13,  v345,  (uint64_t)a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23);
      uint64_t v38 = a18;
      sub_10000852C(a22, a23);
      sub_10000852C(a20, a21);
      sub_10000852C(a18, a19);
      sub_10000852C(a16, a17);

      Class v39 = a9;
      swift_release_n(a7, 2LL);

      swift_bridgeObjectRelease(a9, v40, v41, v42, v43, v44, v45, v46);
      id v47 = a11;
      swift_bridgeObjectRelease(a11, v48, v49, v50, v51, v52, v53, v54);
      uint64_t v55 = v370;
      swift_bridgeObjectRelease(a13, v56, v57, v58, v59, v60, v61, v62);

      uint64_t v63 = a15;
      swift_bridgeObjectRelease(a15, v64, v65, v66, v67, v68, v69, v70);
    }

    else
    {
      unint64_t v147 = sub_100043F74();
      uint64_t v363 = swift_allocError(&type metadata for ContainerError, v147, 0LL, 0LL);
      *(_OWORD *)uint64_t v148 = xmmword_1001E67E0;
      *(_BYTE *)(v148 + 16) = 13;
      swift_retain(a7);
      BOOL v347 = (char *)v372;
      swift_bridgeObjectRetain(a9);
      id v357 = v367;
      swift_bridgeObjectRetain(a11);
      swift_bridgeObjectRetain(a13);
      id v343 = v32;
      swift_bridgeObjectRetain(a15);
      sub_1000084E8(a16, a17);
      sub_1000084E8(a18, a19);
      sub_1000084E8(a20, a21);
      sub_1000084E8(a22, a23);
      sub_10015BB64( 0LL,  v363,  a3,  a4,  a5,  a6,  a7,  v347,  (uint64_t)a9,  v357,  (uint64_t)a11,  a12,  (uint64_t)a13,  v343,  (uint64_t)a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23);
      uint64_t v38 = a18;
      sub_10000852C(a22, a23);
      uint64_t v37 = a16;
      sub_10000852C(a20, a21);
      sub_10000852C(a18, a19);
      sub_10000852C(a16, a17);

      swift_release(a7);
      swift_bridgeObjectRelease(a9, v149, v150, v151, v152, v153, v154, v155);

      id v47 = a11;
      swift_bridgeObjectRelease(a11, v156, v157, v158, v159, v160, v161, v162);
      uint64_t v55 = v370;
      swift_bridgeObjectRelease(a13, v163, v164, v165, v166, v167, v168, v169);

      Class v39 = a9;
      swift_bridgeObjectRelease(a15, v170, v171, v172, v173, v174, v175, v176);
      swift_errorRelease();

      swift_release(a7);
      uint64_t v63 = a15;
    }

    int64_t v78 = v367;
  }

uint64_t sub_10015D07C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v15 = a11;
  if (!a1)
  {
    uint64_t v45 = a2;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v22, (uint64_t)qword_1002567D0);
    swift_errorRetain(v45);
    uint64_t v23 = swift_errorRetain(v45);
    id v44 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v27 = static os_log_type_t.error.getter(v44, v24, v25, v26);
    if (os_log_type_enabled(v44, v27))
    {
      uint64_t v52 = a7;
      id v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v29;
      *(_DWORD *)id v28 = 136446210;
      uint64_t v57 = v45;
      swift_errorRetain(v45);
      uint64_t v30 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v31 = String.init<A>(describing:)(&v57, v30);
      id v33 = (_TtC18TrustedPeersHelper6Client *)v32;
      uint64_t v57 = sub_10017C4C4(v31, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v28 + 4, v28 + 12);
      NSString v34 = v33;
      a7 = v52;
      swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v27, "Unable to load encryption key: %{public}s", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      int64_t v42 = v28;
      uint64_t v15 = a11;
      swift_slowDealloc(v42, -1LL, -1LL);
LABEL_10:

      return sub_100136FD4(0LL, v45, a6, a7, a8, a9, a10, v15, a12, a13);
    }

uint64_t sub_10015D4A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, _TtC18TrustedPeersHelper6Client *a10, _TtC18TrustedPeersHelper6Client *a11, _TtC18TrustedPeersHelper6Client *a12, void *a13)
{
  id v15 = a8;
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a11);
  swift_bridgeObjectRetain(a12);
  id v16 = a13;
  unint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS____SFKeychainManager);
  swift_retain_n(a7, 4LL);
  id v18 = v15;
  swift_bridgeObjectRetain_n(a10, 4LL);
  swift_bridgeObjectRetain_n(a11, 4LL);
  swift_bridgeObjectRetain_n(a12, 4LL);
  id v19 = v16;
  id v20 = v18;
  id v21 = v19;
  id v22 = v20;
  id v23 = v21;
  id v24 = v22;
  id v25 = v23;
  id v26 = [v17 defaultManager];
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v26 identityForIdentifier:v27];

  if (!v28)
  {
    swift_retain(a7);
    id v53 = (char *)v24;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a12);
    id v54 = v25;
    sub_10015D07C(0LL, 0LL, a3, a4, a5, a6, a7, v53, a9, (uint64_t)a10, (uint64_t)a11, (uint64_t)a12, v54);

    swift_release_n(a7, 2LL);
    swift_bridgeObjectRelease(a10, v55, v56, v57, v58, v59, v60, v61);
    swift_bridgeObjectRelease(a11, v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRelease(a12, v69, v70, v71, v72, v73, v74, v75);
LABEL_16:

    goto LABEL_17;
  }

  id v29 = [v28 resultType];
  if (!v29)
  {
    id v76 = v28;
    id v77 = [v76 value];
    id v54 = v77;
    BOOL v132 = v76;
    if (v77)
    {
      id v78 = [v77 keyPair];

      if (v78)
      {
        uint64_t v79 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
        id v54 = (id)swift_dynamicCastObjCClass(v78, v79);
        if (!v54) {
      }
        }

      else
      {
        id v54 = 0LL;
      }
    }

    swift_retain(a7);
    id v107 = (char *)v24;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a12);
    id v108 = v25;
    sub_10015D07C(v54, 0LL, a3, a4, a5, a6, a7, v107, a9, (uint64_t)a10, (uint64_t)a11, (uint64_t)a12, v108);

    swift_release_n(a7, 2LL);
    swift_bridgeObjectRelease(a10, v109, v110, v111, v112, v113, v114, v115);
    swift_bridgeObjectRelease(a11, v116, v117, v118, v119, v120, v121, v122);
    swift_bridgeObjectRelease(a12, v123, v124, v125, v126, v127, v128, v129);

    goto LABEL_16;
  }

  if (v29 == (id)1)
  {
    unint64_t v80 = sub_100043F74();
    uint64_t v82 = swift_allocError(&type metadata for ContainerError, v80, 0LL, 0LL);
    __int128 v83 = xmmword_1001E67D0;
LABEL_13:
    *(_OWORD *)uint64_t v81 = v83;
    *(_BYTE *)(v81 + 16) = 13;
    swift_retain(a7);
    BOOL v85 = (char *)v24;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a12);
    id v133 = v25;
    sub_10015D07C(0LL, v82, a3, a4, a5, a6, a7, v85, a9, (uint64_t)a10, (uint64_t)a11, (uint64_t)a12, v133);

    swift_release(a7);
    swift_bridgeObjectRelease(a10, v86, v87, v88, v89, v90, v91, v92);
    swift_bridgeObjectRelease(a11, v93, v94, v95, v96, v97, v98, v99);
    swift_bridgeObjectRelease(a12, v100, v101, v102, v103, v104, v105, v106);

    swift_errorRelease();
    swift_release(a7);
    goto LABEL_17;
  }

  if (v29 != (id)2)
  {
    unint64_t v84 = sub_100043F74();
    uint64_t v82 = swift_allocError(&type metadata for ContainerError, v84, 0LL, 0LL);
    __int128 v83 = xmmword_1001E67E0;
    goto LABEL_13;
  }

  id v30 = [v28 error];
  swift_retain(a7);
  uint64_t v31 = (char *)v24;
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a11);
  swift_bridgeObjectRetain(a12);
  id v131 = v25;
  sub_10015D07C(0LL, (uint64_t)v30, a3, a4, a5, a6, a7, v31, a9, (uint64_t)a10, (uint64_t)a11, (uint64_t)a12, v131);

  swift_release_n(a7, 2LL);
  swift_bridgeObjectRelease(a10, v32, v33, v34, v35, v36, v37, v38);
  swift_bridgeObjectRelease(a11, v39, v40, v41, v42, v43, v44, v45);
  swift_bridgeObjectRelease(a12, v46, v47, v48, v49, v50, v51, v52);

LABEL_17:
  swift_release_n(a7, 4LL);

  swift_bridgeObjectRelease_n(a12, 5LL);
  swift_bridgeObjectRelease_n(a11, 5LL);
  return swift_bridgeObjectRelease_n(a10, 5LL);
}

void sub_10015D9FC( uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v27 = [(id)objc_opt_self(_SFKeychainManager) defaultManager];
  NSString v12 = String._bridgeToObjectiveC()();
  id v26 = [v27 identityForIdentifier:v12];

  if (!v26)
  {
    sub_1000DFAF4(0LL, 0LL, a3, a4, a5, a6, a7);
    id v15 = v27;
LABEL_14:

    return;
  }

  id v13 = [v26 resultType];
  if (!v13)
  {
    id v16 = v26;
    id v17 = [v16 value];
    if (v17)
    {
      id v18 = v17;
      id v19 = [v17 keyPair];

      if (!v19)
      {
LABEL_11:
        id v17 = 0LL;
        goto LABEL_12;
      }

      uint64_t v20 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
      id v17 = (id)swift_dynamicCastObjCClass(v19, v20);
      if (!v17)
      {

        goto LABEL_11;
      }
    }

uint64_t sub_10015DC90( void *a1, uint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, uint64_t a5, uint64_t a6, void *a7, _TtC18TrustedPeersHelper6Client *a8, void *a9, _TtC18TrustedPeersHelper6Client *a10, void *a11, _TtC18TrustedPeersHelper6Client *a12, void *a13, _TtC18TrustedPeersHelper6Client *a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20, uint64_t a21, unint64_t a22)
{
  if (a1)
  {
    v145[0] = 0x6974707972636E65LL;
    v145[1] = 0xEF2079656B2D6E6FLL;
    swift_bridgeObjectRetain(a14);
    swift_retain(a6);
    id v140 = a7;
    swift_bridgeObjectRetain(a8);
    id v132 = a9;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    id v130 = a13;
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    sub_1000084E8(a21, a22);
    v25._countAndFlagsBits = a3;
    v25._object = a4;
    String.append(_:)(v25);
    uint64_t v26 = a19;
    swift_retain(a6);
    id v134 = v140;
    swift_bridgeObjectRetain(a8);
    id v141 = v132;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    id v133 = v130;
    swift_bridgeObjectRetain(a14);
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    sub_1000084E8(a21, a22);
    swift_bridgeObjectRetain(a4);
    id v27 = a1;
    sub_10015C0E8( 0x6974707972636E65LL,  0xEF2079656B2D6E6FLL,  a3,  (uint64_t)a4,  v27,  a5,  a6,  v134,  a8,  v141,  a10,  a11,  a12,  v133,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
    sub_10000852C(a21, a22);
    sub_10000852C(a19, a20);
    sub_10000852C(a17, a18);
    uint64_t v28 = a15;
    unint64_t v29 = a16;
    sub_10000852C(a15, a16);

    swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0xEF2079656B2D6E6FLL,  v30,  v31,  v32,  v33,  v34,  v35,  v36);
    BOOL v37 = a14;
    swift_bridgeObjectRelease(a4, v38, v39, v40, v41, v42, v43, v44);
    BOOL v45 = a9;
    swift_release_n(a6, 2LL);

    unint64_t v46 = a20;
    swift_bridgeObjectRelease(a8, v47, v48, v49, v50, v51, v52, v53);

    swift_bridgeObjectRelease(a10, v54, v55, v56, v57, v58, v59, v60);
    BOOL v61 = a12;
    swift_bridgeObjectRelease(a12, v62, v63, v64, v65, v66, v67, v68);

    swift_bridgeObjectRelease(a14, v69, v70, v71, v72, v73, v74, v75);
    __int128 v83 = a10;
  }

  else
  {
    swift_bridgeObjectRetain(a14);
    swift_retain(a6);
    BOOL v138 = a7;
    swift_bridgeObjectRetain(a8);
    id v136 = a9;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    id v135 = a13;
    unint64_t v29 = a16;
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    sub_1000084E8(a21, a22);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v84 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v84, (uint64_t)qword_1002567D0);
    uint64_t v85 = a2;
    swift_errorRetain(a2);
    uint64_t v86 = swift_errorRetain(a2);
    id v87 = (os_log_s *)Logger.logObject.getter(v86);
    os_log_type_t v91 = static os_log_type_t.error.getter(v87, v88, v89, v90);
    uint64_t v92 = a6;
    if (os_log_type_enabled(v87, v91))
    {
      SEL v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v94 = swift_slowAlloc(32LL, -1LL);
      v145[0] = v94;
      *(_DWORD *)SEL v93 = 136446210;
      uint64_t v146 = a2;
      swift_errorRetain(a2);
      uint64_t v95 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v96 = String.init<A>(describing:)(&v146, v95);
      BOOL v98 = (_TtC18TrustedPeersHelper6Client *)v97;
      uint64_t v146 = sub_10017C4C4(v96, v97, v145);
      unint64_t v29 = a16;
      uint64_t v85 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v93 + 4, v93 + 12);
      swift_bridgeObjectRelease(v98, v99, v100, v101, v102, v103, v104, v105);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v91, "Unable to load signing key: %{public}s", v93, 0xCu);
      swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v46 = a20;
    uint64_t v26 = a19;
    uint64_t v28 = a15;
    BOOL v37 = a14;
    BOOL v61 = a12;
    uint64_t v106 = v92;
    uint64_t v107 = v92;
    __int128 v83 = a10;
    sub_1000FD308( 0LL,  v85,  a5,  v107,  v138,  (uint64_t)a8,  v136,  (uint64_t)a10,  (uint64_t)a11,  (uint64_t)a12,  v135,  (uint64_t)a14,  a15,  v29,  a17,  a18,  a19,  a20,  a21,  a22);

    swift_release(v106);
    BOOL v45 = a9;
  }

  swift_bridgeObjectRelease(v37, v76, v77, v78, v79, v80, v81, v82);

  swift_bridgeObjectRelease(v61, v108, v109, v110, v111, v112, v113, v114);
  swift_bridgeObjectRelease(v83, v115, v116, v117, v118, v119, v120, v121);

  swift_bridgeObjectRelease(a8, v122, v123, v124, v125, v126, v127, v128);
  sub_10000852C(v28, v29);
  sub_10000852C(a17, a18);
  sub_10000852C(v26, v46);
  return sub_10000852C(a21, a22);
}

uint64_t sub_10015E294( uint64_t a1, uint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, uint64_t a5, uint64_t a6, void *a7, _TtC18TrustedPeersHelper6Client *a8, void *a9, _TtC18TrustedPeersHelper6Client *a10, void *a11, _TtC18TrustedPeersHelper6Client *a12, void *a13, _TtC18TrustedPeersHelper6Client *a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20, uint64_t a21, unint64_t a22)
{
  id v25 = a7;
  swift_bridgeObjectRetain(a8);
  id v26 = a9;
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a12);
  id v27 = a13;
  id v350 = (id)objc_opt_self(&OBJC_CLASS____SFKeychainManager);
  swift_bridgeObjectRetain(a14);
  swift_retain_n(a6, 2LL);
  id v28 = v25;
  swift_bridgeObjectRetain_n(a8, 2LL);
  id v29 = v26;
  swift_bridgeObjectRetain_n(a10, 2LL);
  swift_bridgeObjectRetain_n(a12, 2LL);
  id v30 = v27;
  id v359 = v28;
  id v362 = v29;
  id v365 = v30;
  sub_1000084E8(a15, a16);
  sub_1000084E8(a17, a18);
  sub_1000084E8(a19, a20);
  sub_1000084E8(a21, a22);
  swift_bridgeObjectRetain(a14);
  sub_1000084E8(a15, a16);
  sub_1000084E8(a17, a18);
  sub_1000084E8(a19, a20);
  sub_1000084E8(a21, a22);
  swift_bridgeObjectRetain(a14);
  sub_1000084E8(a15, a16);
  sub_1000084E8(a17, a18);
  sub_1000084E8(a19, a20);
  sub_1000084E8(a21, a22);
  swift_retain(a6);
  id v360 = v359;
  swift_bridgeObjectRetain(a8);
  id v345 = v362;
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a12);
  id v363 = v365;
  swift_bridgeObjectRetain(a14);
  sub_1000084E8(a15, a16);
  sub_1000084E8(a17, a18);
  sub_1000084E8(a19, a20);
  sub_1000084E8(a21, a22);
  swift_retain(a6);
  id v361 = v360;
  swift_bridgeObjectRetain(a8);
  id v366 = v345;
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a12);
  id v364 = v363;
  swift_bridgeObjectRetain(a14);
  sub_1000084E8(a15, a16);
  sub_1000084E8(a17, a18);
  sub_1000084E8(a19, a20);
  sub_1000084E8(a21, a22);
  id v31 = [v350 defaultManager];
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v31 identityForIdentifier:v32];

  if (!v33)
  {
    swift_retain(a6);
    id v347 = v361;
    swift_bridgeObjectRetain(a8);
    id v357 = v366;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    id v352 = v364;
    swift_bridgeObjectRetain(a14);
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    sub_1000084E8(a21, a22);
    sub_10015DC90( 0LL,  0LL,  a3,  a4,  a5,  a6,  v347,  a8,  v357,  a10,  a11,  a12,  v352,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
    sub_10000852C(a21, a22);
    sub_10000852C(a19, a20);
    sub_10000852C(a17, a18);
    unint64_t v38 = a16;
    sub_10000852C(a15, a16);

    swift_release_n(a6, 2LL);
    BOOL v36 = a8;
    swift_bridgeObjectRelease(a8, v75, v76, v77, v78, v79, v80, v81);

    swift_bridgeObjectRelease(a10, v82, v83, v84, v85, v86, v87, v88);
    swift_bridgeObjectRelease(a12, v89, v90, v91, v92, v93, v94, v95);

    BOOL v60 = a14;
    swift_bridgeObjectRelease(a14, v96, v97, v98, v99, v100, v101, v102);
    uint64_t v37 = a17;
    goto LABEL_18;
  }

  id v356 = v33;
  id v34 = [v33 resultType];
  BOOL v35 = a8;
  if (!v34)
  {
    id v103 = v33;
    id v104 = [v103 value];
    if (v104)
    {
      BOOL v105 = v104;
      id v106 = [v104 keyPair];

      if (v106)
      {
        uint64_t v107 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
        uint64_t v108 = swift_dynamicCastObjCClass(v106, v107);
        if (v108)
        {
          unint64_t v109 = a18;
          BOOL v35 = a8;
          uint64_t v110 = a17;
          id v353 = (void *)v108;
LABEL_17:
          swift_retain(a6);
          id v337 = v361;
          swift_bridgeObjectRetain(v35);
          id v358 = v366;
          swift_bridgeObjectRetain(a10);
          swift_bridgeObjectRetain(a12);
          id v341 = v364;
          swift_bridgeObjectRetain(a14);
          sub_1000084E8(a15, a16);
          sub_1000084E8(v110, v109);
          sub_1000084E8(a19, a20);
          sub_1000084E8(a21, a22);
          sub_10015DC90( v353,  0LL,  a3,  a4,  a5,  a6,  v337,  a8,  v358,  a10,  a11,  a12,  v341,  a14,  a15,  a16,  v110,  v109,  a19,  a20,  a21,  a22);
          sub_10000852C(a21, a22);
          sub_10000852C(a19, a20);
          uint64_t v171 = v110;
          sub_10000852C(v110, a18);
          unint64_t v38 = a16;
          sub_10000852C(a15, a16);

          swift_release_n(a6, 2LL);
          BOOL v36 = a8;
          swift_bridgeObjectRelease(a8, v172, v173, v174, v175, v176, v177, v178);

          swift_bridgeObjectRelease(a10, v179, v180, v181, v182, v183, v184, v185);
          swift_bridgeObjectRelease(a12, v186, v187, v188, v189, v190, v191, v192);

          BOOL v60 = a14;
          swift_bridgeObjectRelease(a14, v193, v194, v195, v196, v197, v198, v199);

          uint64_t v37 = v171;
          goto LABEL_18;
        }
      }

      id v353 = 0LL;
      unint64_t v109 = a18;
      BOOL v35 = a8;
    }

    else
    {
      id v353 = 0LL;
      unint64_t v109 = a18;
    }

    uint64_t v110 = a17;
    goto LABEL_17;
  }

  if (v34 == (id)1)
  {
    unint64_t v111 = sub_100043F74();
    uint64_t v354 = swift_allocError(&type metadata for ContainerError, v111, 0LL, 0LL);
    *(_OWORD *)uint64_t v112 = xmmword_1001E67D0;
    *(_BYTE *)(v112 + 16) = 13;
    swift_retain(a6);
    id v339 = v361;
    swift_bridgeObjectRetain(a8);
    id v348 = v366;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    id v335 = v364;
    swift_bridgeObjectRetain(a14);
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    sub_1000084E8(a21, a22);
    BOOL v36 = a8;
    sub_10015DC90( 0LL,  v354,  a3,  a4,  a5,  a6,  v339,  a8,  v348,  a10,  a11,  a12,  v335,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
    sub_10000852C(a21, a22);
    uint64_t v37 = a17;
    unint64_t v38 = a16;
    sub_10000852C(a19, a20);
    sub_10000852C(a17, a18);
    sub_10000852C(a15, a16);

    swift_release(a6);
    swift_bridgeObjectRelease(a8, v113, v114, v115, v116, v117, v118, v119);

    swift_bridgeObjectRelease(a10, v120, v121, v122, v123, v124, v125, v126);
    swift_bridgeObjectRelease(a12, v127, v128, v129, v130, v131, v132, v133);

    BOOL v60 = a14;
    swift_bridgeObjectRelease(a14, v134, v135, v136, v137, v138, v139, v140);
    swift_errorRelease();

    swift_release(a6);
  }

  else if (v34 == (id)2)
  {
    id v334 = [v33 error];
    swift_retain(a6);
    id v346 = v361;
    swift_bridgeObjectRetain(a8);
    id v351 = v366;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    id v338 = v364;
    swift_bridgeObjectRetain(a14);
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    sub_1000084E8(a21, a22);
    BOOL v36 = a8;
    sub_10015DC90( 0LL,  (uint64_t)v334,  a3,  a4,  a5,  a6,  v346,  a8,  v351,  a10,  a11,  a12,  v338,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
    sub_10000852C(a21, a22);
    uint64_t v37 = a17;
    unint64_t v38 = a16;
    sub_10000852C(a19, a20);
    sub_10000852C(a17, a18);
    sub_10000852C(a15, a16);

    swift_release_n(a6, 2LL);
    swift_bridgeObjectRelease(a8, v39, v40, v41, v42, v43, v44, v45);

    swift_bridgeObjectRelease(a10, v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(a12, v53, v54, v55, v56, v57, v58, v59);

    BOOL v60 = a14;
    swift_bridgeObjectRelease(a14, v61, v62, v63, v64, v65, v66, v67);
  }

  else
  {
    unint64_t v141 = sub_100043F74();
    uint64_t v355 = swift_allocError(&type metadata for ContainerError, v141, 0LL, 0LL);
    *(_OWORD *)uint64_t v142 = xmmword_1001E67E0;
    *(_BYTE *)(v142 + 16) = 13;
    swift_retain(a6);
    id v340 = v361;
    swift_bridgeObjectRetain(a8);
    id v349 = v366;
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    id v336 = v364;
    swift_bridgeObjectRetain(a14);
    sub_1000084E8(a15, a16);
    sub_1000084E8(a17, a18);
    sub_1000084E8(a19, a20);
    sub_1000084E8(a21, a22);
    sub_10015DC90( 0LL,  v355,  a3,  a4,  a5,  a6,  v340,  a8,  v349,  a10,  a11,  a12,  v336,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
    sub_10000852C(a21, a22);
    uint64_t v37 = a17;
    unint64_t v38 = a16;
    BOOL v36 = a8;
    sub_10000852C(a19, a20);
    sub_10000852C(a17, a18);
    sub_10000852C(a15, a16);

    swift_release(a6);
    swift_bridgeObjectRelease(a8, v143, v144, v145, v146, v147, v148, v149);

    swift_bridgeObjectRelease(a10, v150, v151, v152, v153, v154, v155, v156);
    swift_bridgeObjectRelease(a12, v157, v158, v159, v160, v161, v162, v163);

    BOOL v60 = a14;
    swift_bridgeObjectRelease(a14, v164, v165, v166, v167, v168, v169, v170);
    swift_errorRelease();

    swift_release(a6);
  }

void sub_10015F1A0( void *a1, uint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, _TtC18TrustedPeersHelper6Client *a9, _TtC18TrustedPeersHelper6Client *a10, _TtC18TrustedPeersHelper6Client *a11, void *a12)
{
  id v14 = a12;
  if (a1)
  {
    v108[0] = 0x6974707972636E65LL;
    v108[1] = 0xEF2079656B2D6E6FLL;
    swift_retain(a6);
    id v18 = a7;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    id v19 = a12;
    v20._countAndFlagsBits = a3;
    v20._object = a4;
    String.append(_:)(v20);
    swift_retain(a6);
    id v21 = v18;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    id v22 = v19;
    id v14 = a12;
    id v23 = v22;
    swift_bridgeObjectRetain(a4);
    id v24 = a1;
    sub_10015D4A8(0x6974707972636E65LL, 0xEF2079656B2D6E6FLL, a3, (uint64_t)a4, v24, a5, a6, v21, a8, a9, a10, a11, v23);

    swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0xEF2079656B2D6E6FLL,  v25,  v26,  v27,  v28,  v29,  v30,  v31);
    swift_bridgeObjectRelease(a4, v32, v33, v34, v35, v36, v37, v38);
    swift_release_n(a6, 2LL);

    swift_bridgeObjectRelease(a9, v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(a10, v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(a11, v53, v54, v55, v56, v57, v58, v59);
  }

  else
  {
    uint64_t v61 = qword_100250EB8;
    swift_retain(a6);
    id v62 = a7;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    id v105 = a12;
    if (v61 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v63 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v63, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v64 = swift_errorRetain(a2);
    id v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v69 = static os_log_type_t.error.getter(v65, v66, v67, v68);
    if (os_log_type_enabled(v65, v69))
    {
      int64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v104 = swift_slowAlloc(32LL, -1LL);
      v108[0] = v104;
      *(_DWORD *)int64_t v70 = 136446210;
      uint64_t v109 = a2;
      swift_errorRetain(a2);
      uint64_t v71 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v72 = String.init<A>(describing:)(&v109, v71);
      BOOL v74 = (_TtC18TrustedPeersHelper6Client *)v73;
      uint64_t v109 = sub_10017C4C4(v72, v73, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v70 + 4, v70 + 12);
      SEL v75 = v74;
      id v14 = a12;
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v69, "Unable to load signing key: %{public}s", v70, 0xCu);
      swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1LL, -1LL);
      swift_slowDealloc(v70, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100136FD4(0LL, a2, a5, a6, v62, a8, (uint64_t)a9, (uint64_t)a10, (uint64_t)a11, v105);
    swift_release(a6);
  }

  swift_bridgeObjectRelease(a11, v83, v84, v85, v86, v87, v88, v89);
  swift_bridgeObjectRelease(a10, v90, v91, v92, v93, v94, v95, v96);
  swift_bridgeObjectRelease(a9, v97, v98, v99, v100, v101, v102, v103);
}

uint64_t sub_10015F574( uint64_t a1, uint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, _TtC18TrustedPeersHelper6Client *a9, _TtC18TrustedPeersHelper6Client *a10, _TtC18TrustedPeersHelper6Client *a11, void *a12)
{
  id v14 = a7;
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a11);
  id v15 = a12;
  id v16 = (void *)objc_opt_self(&OBJC_CLASS____SFKeychainManager);
  swift_retain_n(a6, 4LL);
  id v17 = v14;
  swift_bridgeObjectRetain_n(a9, 4LL);
  swift_bridgeObjectRetain_n(a10, 4LL);
  swift_bridgeObjectRetain_n(a11, 4LL);
  id v18 = v15;
  id v19 = v17;
  id v20 = v18;
  id v21 = v19;
  id v22 = v20;
  id v23 = v21;
  id v24 = v22;
  id v25 = [v16 defaultManager];
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v25 identityForIdentifier:v26];

  if (!v27)
  {
    swift_retain(a6);
    id v52 = v23;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    id v53 = v24;
    sub_10015F1A0(0LL, 0LL, a3, a4, a5, a6, v52, a8, a9, a10, a11, v53);

    swift_release_n(a6, 2LL);
    swift_bridgeObjectRelease(a9, v54, v55, v56, v57, v58, v59, v60);
    swift_bridgeObjectRelease(a10, v61, v62, v63, v64, v65, v66, v67);
    swift_bridgeObjectRelease(a11, v68, v69, v70, v71, v72, v73, v74);
LABEL_16:

    goto LABEL_17;
  }

  id v28 = [v27 resultType];
  if (!v28)
  {
    id v75 = v27;
    id v76 = [v75 value];
    id v53 = v76;
    id v131 = v75;
    if (v76)
    {
      id v77 = [v76 keyPair];

      if (v77)
      {
        uint64_t v78 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
        id v53 = (id)swift_dynamicCastObjCClass(v77, v78);
        if (!v53) {
      }
        }

      else
      {
        id v53 = 0LL;
      }
    }

    swift_retain(a6);
    id v106 = v23;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    id v107 = v24;
    sub_10015F1A0(v53, 0LL, a3, a4, a5, a6, v106, a8, a9, a10, a11, v107);

    swift_release_n(a6, 2LL);
    swift_bridgeObjectRelease(a9, v108, v109, v110, v111, v112, v113, v114);
    swift_bridgeObjectRelease(a10, v115, v116, v117, v118, v119, v120, v121);
    swift_bridgeObjectRelease(a11, v122, v123, v124, v125, v126, v127, v128);

    goto LABEL_16;
  }

  if (v28 == (id)1)
  {
    unint64_t v79 = sub_100043F74();
    uint64_t v81 = swift_allocError(&type metadata for ContainerError, v79, 0LL, 0LL);
    __int128 v82 = xmmword_1001E67D0;
LABEL_13:
    *(_OWORD *)uint64_t v80 = v82;
    *(_BYTE *)(v80 + 16) = 13;
    swift_retain(a6);
    id v84 = v23;
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    id v132 = v24;
    sub_10015F1A0(0LL, v81, a3, a4, a5, a6, v84, a8, a9, a10, a11, v132);

    swift_release(a6);
    swift_bridgeObjectRelease(a9, v85, v86, v87, v88, v89, v90, v91);
    swift_bridgeObjectRelease(a10, v92, v93, v94, v95, v96, v97, v98);
    swift_bridgeObjectRelease(a11, v99, v100, v101, v102, v103, v104, v105);

    swift_errorRelease();
    swift_release(a6);
    goto LABEL_17;
  }

  if (v28 != (id)2)
  {
    unint64_t v83 = sub_100043F74();
    uint64_t v81 = swift_allocError(&type metadata for ContainerError, v83, 0LL, 0LL);
    __int128 v82 = xmmword_1001E67E0;
    goto LABEL_13;
  }

  id v29 = [v27 error];
  swift_retain(a6);
  id v30 = v23;
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a11);
  id v130 = v24;
  sub_10015F1A0(0LL, (uint64_t)v29, a3, a4, a5, a6, v30, a8, a9, a10, a11, v130);

  swift_release_n(a6, 2LL);
  swift_bridgeObjectRelease(a9, v31, v32, v33, v34, v35, v36, v37);
  swift_bridgeObjectRelease(a10, v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(a11, v45, v46, v47, v48, v49, v50, v51);

LABEL_17:
  swift_release_n(a6, 4LL);

  swift_bridgeObjectRelease_n(a11, 5LL);
  swift_bridgeObjectRelease_n(a10, 5LL);
  return swift_bridgeObjectRelease_n(a9, 5LL);
}

void sub_10015FAA0( uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, void *a6)
{
  id v25 = [(id)objc_opt_self(_SFKeychainManager) defaultManager];
  NSString v10 = String._bridgeToObjectiveC()();
  id v24 = [v25 identityForIdentifier:v10];

  if (!v24)
  {
    v27._countAndFlagsBits = a5;
    v27._object = a6;
    sub_1000DF85C(0LL, 0LL, a3, a4, v27);
    id v13 = v25;
LABEL_14:

    return;
  }

  id v11 = [v24 resultType];
  if (!v11)
  {
    id v14 = v24;
    id v15 = [v14 value];
    if (v15)
    {
      id v16 = v15;
      id v17 = [v15 keyPair];

      if (!v17)
      {
LABEL_11:
        id v15 = 0LL;
        goto LABEL_12;
      }

      uint64_t v18 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
      id v15 = (id)swift_dynamicCastObjCClass(v17, v18);
      if (!v15)
      {

        goto LABEL_11;
      }
    }

void sub_10015FD20( uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4, char *a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  id v36 = [(id)objc_opt_self(_SFKeychainManager) defaultManager];
  NSString v16 = String._bridgeToObjectiveC()();
  id v35 = [v36 identityForIdentifier:v16];

  if (!v35)
  {
    sub_10010248C(0LL, 0LL, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
    unint64_t v19 = v36;
LABEL_14:

    return;
  }

  id v17 = [v35 resultType];
  if (!v17)
  {
    id v20 = v35;
    id v21 = [v20 value];
    if (v21)
    {
      __int128 v22 = v21;
      id v23 = [v21 keyPair];

      if (!v23)
      {
LABEL_11:
        id v21 = 0LL;
        goto LABEL_12;
      }

      uint64_t v24 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
      id v21 = (id)swift_dynamicCastObjCClass(v23, v24);
      if (!v21)
      {

        goto LABEL_11;
      }
    }

void sub_100160060( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void))
{
  id v30 = [(id)objc_opt_self(_SFKeychainManager) defaultManager];
  NSString v15 = String._bridgeToObjectiveC()();
  id v29 = [v30 identityForIdentifier:v15];

  if (!v29)
  {
    ((void (*)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a9)( 0LL,  0LL,  a3,  a4,  a5,  a6,  a7,  a8);
    id v18 = v30;
LABEL_14:

    return;
  }

  id v16 = [v29 resultType];
  if (!v16)
  {
    id v19 = v29;
    id v20 = [v19 value];
    if (v20)
    {
      id v21 = v20;
      id v22 = [v20 keyPair];

      if (!v22)
      {
LABEL_11:
        id v20 = 0LL;
        goto LABEL_12;
      }

      uint64_t v23 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
      id v20 = (id)swift_dynamicCastObjCClass(v22, v23);
      if (!v20)
      {

        goto LABEL_11;
      }
    }

uint64_t sub_100160318( uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t isEscapingClosureAtFileLocation, void *a6, void *a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  id v16 = a11;
  if (!a1) {
    goto LABEL_7;
  }
  uint64_t v17 = a1;
  id v39 = a11;
  swift_errorRetain(a1);
  if (qword_100250EB8 != -1) {
    goto LABEL_9;
  }
  while (1)
  {
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v18, (uint64_t)qword_1002567D0);
    swift_errorRetain(v17);
    uint64_t v19 = swift_errorRetain(v17);
    id v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      BOOL v37 = a3;
      id v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v17;
      aBlock[0] = v36;
      *(_DWORD *)id v22 = 136446210;
      buf = v22;
      swift_errorRetain(v17);
      uint64_t v23 = sub_100007578(&qword_100251D70);
      uint64_t v24 = String.init<A>(describing:)(&v41, v23);
      unint64_t v26 = v25;
      uint64_t v41 = sub_10017C4C4(v24, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, aBlock, v22 + 4, v22 + 12);
      a3 = v37;
      swift_bridgeObjectRelease(v26);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "updateTrustIfNeeded: error fetching all requested policies (continuing anyway): %{public}s",  buf,  0xCu);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(buf, -1LL, -1LL);

      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }

    id v16 = v39;
LABEL_7:
    id v39 = *(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v27 = swift_allocObject(&unk_100239860, 192LL, 7LL);
    *(void *)(v27 + 16) = a2;
    *(void *)(v27 + 24) = a3;
    *(void *)(v27 + 32) = a4;
    *(void *)(v27 + 40) = isEscapingClosureAtFileLocation;
    a3 = a6;
    sub_1000B669C((uint64_t)a6, v27 + 48, &qword_100256E00);
    uint64_t v17 = a4;
    a4 = (uint64_t)a7;
    *(void *)(v27 + 152) = a7;
    *(void *)(v27 + 160) = a8;
    *(void *)(v27 + 168) = a9;
    *(_BYTE *)(v27 + 176) = a10 & 1;
    *(void *)(v27 + 184) = v16;
    a8 = swift_allocObject(&unk_100239888, 32LL, 7LL);
    *(void *)(a8 + 16) = sub_1001735D0;
    *(void *)(a8 + 24) = v27;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v43 = a8;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_1002398A0;
    unint64_t v28 = _Block_copy(aBlock);
    id v29 = a2;
    a2 = (char *)v43;
    id v30 = v29;
    swift_bridgeObjectRetain(v17);
    id v31 = (id)isEscapingClosureAtFileLocation;
    sub_100173474( a6,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
    id v32 = v16;
    swift_retain(a8);
    id v33 = a7;
    swift_retain(a9);
    swift_release(a2);
    [v39 performBlockAndWait:v28];
    _Block_release(v28);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a8, "", 108LL, 6842LL, 45LL, 1LL);
    swift_release(v27);
    uint64_t result = swift_release(a8);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_9:
    swift_once(&qword_100250EB8, sub_1000DD078);
  }

  return result;
}

uint64_t sub_1001606B8( uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, void *a12)
{
  id v81 = a6;
  id v82 = a8;
  uint64_t v83 = a1;
  id v84 = a2;
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v17);
  uint64_t v78 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = swift_allocObject(&unk_1002396F8, 192LL, 7LL);
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  uint64_t v74 = a4;
  *(void *)(v19 + 32) = a5;
  *(void *)(v19 + 40) = a6;
  sub_1000B669C((uint64_t)a7, v19 + 48, &qword_100256E00);
  id v20 = v82;
  *(void *)(v19 + 152) = v82;
  *(void *)(v19 + 160) = a9;
  uint64_t v75 = a9;
  *(void *)(v19 + 168) = a10;
  int v72 = a11;
  *(_BYTE *)(v19 + 176) = a11;
  uint64_t v79 = v19;
  *(void *)(v19 + 184) = a12;
  uint64_t v21 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  uint64_t v80 = v21;
  uint64_t v22 = v83;
  *(void *)(v21 + 16) = v83;
  uint64_t v23 = (uint64_t *)(v21 + 16);
  uint64_t v24 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  id v71 = a3;
  uint64_t v76 = a5;
  swift_bridgeObjectRetain(a5);
  id v70 = v81;
  id v81 = a7;
  sub_100173474( a7,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
  id v73 = a12;
  swift_bridgeObjectRetain(v22);
  id v25 = v20;
  unint64_t v26 = v23;
  id v82 = v25;
  uint64_t v83 = a10;
  swift_retain(a10);
  uint64_t v27 = v24;
  *(void *)(v24 + 16) = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = v24 + 16;
  id v29 = v84;
  id v30 = *(void **)&v84[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  id v31 = (char *)swift_allocObject(&unk_100239720, 40LL, 7LL);
  *((void *)v31 + 2) = v26;
  *((void *)v31 + 3) = v29;
  id v32 = v29;
  *((void *)v31 + 4) = v28;
  uint64_t v33 = swift_allocObject(&unk_100239748, 32LL, 7LL);
  *(void *)(v33 + 16) = sub_100176F48;
  *(void *)(v33 + 24) = v31;
  id v89 = sub_100176BD4;
  uint64_t v90 = v33;
  aBlock = _NSConcreteStackBlock;
  uint64_t v86 = 1107296256LL;
  int64_t v87 = sub_1000DC9F8;
  id v88 = &unk_100239760;
  id v34 = _Block_copy(&aBlock);
  uint64_t v35 = v90;
  uint64_t v36 = v32;
  swift_retain(v33);
  swift_release(v35);
  [v30 performBlockAndWait:v34];
  _Block_release(v34);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v33, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t result = swift_release(v33);
  if ((v35 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v39 = *v26;
  if ((*v26 & 0xC000000000000001LL) != 0)
  {
    if (v39 < 0) {
      uint64_t v40 = *v26;
    }
    else {
      uint64_t v40 = v39 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v26);
    uint64_t v41 = __CocoaSet.count.getter(v40);
    uint64_t result = swift_bridgeObjectRelease(v39);
    if (v41) {
      goto LABEL_7;
    }
  }

  else if (*(void *)(v39 + 16))
  {
LABEL_7:
    __chkstk_darwin(result, v38);
    *(&v69 - 2) = (uint64_t)v26;
    uint64_t v42 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
    id v84 = v31;
    uint64_t v43 = (uint64_t)v78;
    static Message.with(_:)(sub_100176B2C, &v69 - 4, PolicyDocumentsRequest, v42);
    uint64_t v44 = *(void *)&v36[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v45 = *(void *)&v36[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&v36[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v44);
    id v46 = (void *)swift_allocObject(&unk_100239798, 56LL, 7LL);
    v46[2] = v36;
    v46[3] = sub_100173568;
    uint64_t v47 = v79;
    uint64_t v48 = v80;
    v46[4] = v79;
    void v46[5] = v48;
    v46[6] = v27;
    uint64_t v49 = *(void *)(v45 + 16);
    BOOL v50 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v49 + 80);
    BOOL v51 = v36;
    swift_retain(v47);
    swift_retain(v48);
    swift_retain(v27);
    v50(v43, sub_100171830, v46, v44, v49);
    swift_release(v46);
    sub_1000415CC(v43, type metadata accessor for FetchPolicyDocumentsRequest);
    swift_release(v47);
    swift_release(v84);
    swift_release(v48);
    return swift_release(v27);
  }

  char v52 = v72 & 1;
  uint64_t v69 = v27;
  uint64_t v78 = *(char **)(v27 + 16);
  id v53 = v71;
  id v84 = *(char **)&v71[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v54 = swift_allocObject(&unk_1002397C0, 192LL, 7LL);
  uint64_t v55 = v74;
  *(void *)(v54 + 16) = v53;
  *(void *)(v54 + 24) = v55;
  uint64_t v56 = v76;
  id v57 = v70;
  *(void *)(v54 + 32) = v76;
  *(void *)(v54 + 40) = v57;
  id v58 = v81;
  sub_1000B669C((uint64_t)v81, v54 + 48, &qword_100256E00);
  BOOL v60 = v82;
  uint64_t v59 = v83;
  uint64_t v61 = v75;
  *(void *)(v54 + 152) = v82;
  *(void *)(v54 + 160) = v61;
  *(void *)(v54 + 168) = v59;
  *(_BYTE *)(v54 + 176) = v52;
  *(void *)(v54 + 184) = a12;
  uint64_t v62 = swift_allocObject(&unk_1002397E8, 32LL, 7LL);
  *(void *)(v62 + 16) = sub_1001735D0;
  *(void *)(v62 + 24) = v54;
  id v89 = sub_100176BD4;
  uint64_t v90 = v62;
  aBlock = _NSConcreteStackBlock;
  uint64_t v86 = 1107296256LL;
  int64_t v87 = sub_1000DC9F8;
  id v88 = &unk_100239800;
  int64_t v63 = _Block_copy(&aBlock);
  PolicyDocumentsuint64_t Request = v90;
  id v64 = v53;
  swift_bridgeObjectRetain(v56);
  id v65 = v57;
  sub_100173474( v58,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100171BB4);
  id v66 = v60;
  swift_retain(v59);
  id v67 = v73;
  SEL v68 = v78;
  swift_bridgeObjectRetain(v78);
  swift_retain(v62);
  swift_release(PolicyDocumentsRequest);
  [v84 performBlockAndWait:v63];
  _Block_release(v63);
  LOBYTE(v63) = swift_isEscapingClosureAtFileLocation(v62, "", 108LL, 6842LL, 45LL, 1LL);
  swift_release(v79);
  swift_release(v31);
  swift_release(v80);
  swift_release(v69);
  swift_bridgeObjectRelease(v68);
  swift_release(v54);
  uint64_t result = swift_release(v62);
  return result;
}

void sub_100160CC4( uint64_t a1, uint64_t a2, void (*a3)(void, void, void), uint64_t a4, char a5, char *a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v30 = [(id)objc_opt_self(_SFKeychainManager) defaultManager];
  NSString v15 = String._bridgeToObjectiveC()();
  id v29 = [v30 identityForIdentifier:v15];

  if (!v29)
  {
    sub_100139CFC(0LL, 0LL, a3, a4, a5 & 1, a6, a7, a8, a9);
    uint64_t v18 = v30;
LABEL_14:

    return;
  }

  id v16 = [v29 resultType];
  if (!v16)
  {
    id v19 = v29;
    id v20 = [v19 value];
    if (v20)
    {
      uint64_t v21 = v20;
      id v22 = [v20 keyPair];

      if (!v22)
      {
LABEL_11:
        id v20 = 0LL;
        goto LABEL_12;
      }

      uint64_t v23 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
      id v20 = (id)swift_dynamicCastObjCClass(v22, v23);
      if (!v20)
      {

        goto LABEL_11;
      }
    }

void sub_100160F8C( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char *a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v30 = [(id)objc_opt_self(_SFKeychainManager) defaultManager];
  NSString v15 = String._bridgeToObjectiveC()();
  id v29 = [v30 identityForIdentifier:v15];

  if (!v29)
  {
    sub_100144DEC(0LL, 0LL, a3, a4, a5, a6, a7, a8, a9);
    uint64_t v18 = v30;
LABEL_14:

    return;
  }

  id v16 = [v29 resultType];
  if (!v16)
  {
    id v19 = v29;
    id v20 = [v19 value];
    if (v20)
    {
      uint64_t v21 = v20;
      id v22 = [v20 keyPair];

      if (!v22)
      {
LABEL_11:
        id v20 = 0LL;
        goto LABEL_12;
      }

      uint64_t v23 = objc_opt_self(&OBJC_CLASS____SFECKeyPair);
      id v20 = (id)swift_dynamicCastObjCClass(v22, v23);
      if (!v20)
      {

        goto LABEL_11;
      }
    }

uint64_t sub_100161254(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for TLKShare(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10016136C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100007578(&qword_100251D70);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100161474(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
  uint64_t v5 = sub_100171984( (unint64_t *)&qword_100256DE0,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr);
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v15 = result;
  if (v2)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v7) {
      return v15;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return v15;
    }
  }

  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v7; ++i)
      {
        uint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_100151C54( (Swift::Int *)&v14,  v10,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr,  &qword_100256DD8);
      }
    }

    else
    {
      unint64_t v11 = (void **)(a1 + 32);
      do
      {
        uint64_t v12 = *v11++;
        sub_100151C54( (Swift::Int *)&v14,  v12,  (unint64_t *)&qword_100256DB0,  &OBJC_CLASS___TPPolicyVersion_ptr,  &qword_100256DD8);

        --v7;
      }

      while (v7);
    }

    return v15;
  }

  __break(1u);
  return result;
}

uint64_t sub_100161634(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1001516D4(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

uint64_t sub_1001616C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 initWithEntityName:v10];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v12 = sub_100007578(&qword_100251578);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1001DE420;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000FC24();
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  *(void *)(v13 + 96) = type metadata accessor for ContainerMO();
  *(void *)(v13 + 104) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v13 + 72) = a2;
  swift_bridgeObjectRetain(a4);
  id v14 = a2;
  uint64_t v15 = (void *)NSPredicate.init(format:_:)(0xD00000000000001FLL, 0x80000001001F9490LL, v13);
  [v11 setPredicate:v15];

  [v11 setFetchLimit:1];
  uint64_t v16 = type metadata accessor for PeerMO();
  uint64_t result = NSManagedObjectContext.fetch<A>(_:)(v11, v16);
  if (v4)
  {

    return a1;
  }

  uint64_t v18 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v20 = result;
    }
    else {
      uint64_t v20 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    a1 = _CocoaArrayWrapper.endIndex.getter(v20);
    uint64_t result = swift_bridgeObjectRelease(v18);
    if (!a1) {
      goto LABEL_9;
    }
  }

  else
  {
    a1 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!a1)
    {
LABEL_9:
      swift_bridgeObjectRelease(v18);

      return a1;
    }
  }

  if ((v18 & 0xC000000000000001LL) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v18);
    goto LABEL_8;
  }

  if (*(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v19 = *(id *)(v18 + 32);
LABEL_8:
    a1 = (uint64_t)v19;
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

id sub_1001618F4(void *a1)
{
  id v2 = [a1 peerID];
  if (!v2)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_100006BAC(v21, (uint64_t)qword_1002567D0);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "DBAdapter PeerMO has no ID?", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v6 = v5;

  id v7 = [a1 stableInfo];
  if (!v7)
  {
LABEL_12:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v26, (uint64_t)qword_1002567D0);
    uint64_t v27 = swift_bridgeObjectRetain(v6);
    unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = v31;
      *(_DWORD *)id v30 = 136446210;
      swift_bridgeObjectRetain(v6);
      uint64_t v38 = sub_10017C4C4(v4, v6, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(v6, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "DBAdapter peer %{public}s has no/incomplete stable info/sig",  v30,  0xCu);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      return 0LL;
    }

LABEL_21:
    swift_bridgeObjectRelease_n(v6, 2LL);
    return 0LL;
  }

  uint64_t v8 = v7;
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v11 = v10;

  id v12 = [a1 stableInfoSig];
  if (!v12)
  {
    sub_10000852C(v9, v11);
    goto LABEL_12;
  }

  uint64_t v13 = v12;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v16 = v15;

  id v17 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  sub_1000084E8(v9, v11);
  sub_1000084E8(v14, v16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v19 = Data._bridgeToObjectiveC()().super.isa;
  id v20 = [v17 initWithData:isa sig:v19];
  sub_10000852C(v14, v16);
  sub_10000852C(v9, v11);

  if (!v20)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v32, (uint64_t)qword_1002567D0);
    uint64_t v33 = swift_bridgeObjectRetain(v6);
    unint64_t v28 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = v37;
      *(_DWORD *)uint64_t v35 = 136446210;
      swift_bridgeObjectRetain(v6);
      uint64_t v38 = sub_10017C4C4(v4, v6, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease_n(v6, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v34,  "DBAdapter peer %{public}s has unparseable stable info/sig",  v35,  0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      sub_10000852C(v14, v16);
      sub_10000852C(v9, v11);
      return 0LL;
    }

    sub_10000852C(v9, v11);
    sub_10000852C(v14, v16);
    goto LABEL_21;
  }

  sub_10000852C(v14, v16);
  sub_10000852C(v9, v11);
  swift_bridgeObjectRelease(v6);
  return v20;
}

    swift_bridgeObjectRelease_n(v6, 2LL);
    return 0LL;
  }

  uint64_t v8 = v7;
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v11 = v10;

  id v12 = [a1 dynamicInfoSig];
  if (!v12)
  {
    sub_10000852C(v9, v11);
    goto LABEL_12;
  }

  uint64_t v13 = v12;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v16 = v15;

  sub_1000084E8(v9, v11);
  sub_1000084E8(v14, v16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v18 = Data._bridgeToObjectiveC()().super.isa;
  Class v19 = [(id)objc_opt_self(TPPeerDynamicInfo) dynamicInfoWithData:isa sig:v18];
  sub_10000852C(v14, v16);
  sub_10000852C(v9, v11);

  if (!v19)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v31, (uint64_t)qword_1002567D0);
    uint64_t v32 = swift_bridgeObjectRetain(v6);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v32);
    uint64_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v33))
    {
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = v36;
      *(_DWORD *)os_log_type_t v34 = 136446210;
      swift_bridgeObjectRetain(v6);
      uint64_t v37 = sub_10017C4C4(v4, v6, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(v6, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v33,  "DBAdapter peer %{public}s has unparseable dynamic info/sig",  v34,  0xCu);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);

      sub_10000852C(v14, v16);
      sub_10000852C(v9, v11);
      return 0LL;
    }

    sub_10000852C(v9, v11);
    sub_10000852C(v14, v16);
    goto LABEL_21;
  }

  sub_10000852C(v14, v16);
  sub_10000852C(v9, v11);
  swift_bridgeObjectRelease(v6);
  return v19;
}

  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v5);
  sub_100041590((uint64_t)&v27, &qword_100251EA0);
  return v30;
}

      __break(1u);
      return result;
    }

  return v28;
}

id sub_100161E0C(void *a1)
{
  id v2 = [a1 peerID];
  if (!v2)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_100006BAC(v20, (uint64_t)qword_1002567D0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "DBAdapter PeerMO has no ID?", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v6 = v5;

  id v7 = [a1 dynamicInfo];
  if (!v7)
  {
LABEL_12:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v25, (uint64_t)qword_1002567D0);
    uint64_t v26 = swift_bridgeObjectRetain(v6);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = v30;
      *(_DWORD *)os_log_type_t v29 = 136446210;
      swift_bridgeObjectRetain(v6);
      uint64_t v37 = sub_10017C4C4(v4, v6, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(v6, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "DBAdapter peer %{public}s has no/incomplete dynamic info/sig",  v29,  0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      return 0LL;
    }

void *sub_100162324(void *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithEntityName:v6];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v8 = sub_100007578(&qword_100251578);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1001DE710;
  *(void *)(v9 + 56) = type metadata accessor for ContainerMO();
  *(void *)(v9 + 64) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v9 + 32) = a1;
  id v10 = a1;
  unint64_t v11 = (void *)NSPredicate.init(format:_:)(0x656E6961746E6F63LL, 0xEF4025203D3D2072LL, v9);
  [v7 setPredicate:v11];

  uint64_t v12 = sub_100007578(&qword_100256C28);
  uint64_t v13 = swift_allocObject(v12, 64LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1001DE710;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 32) = 0x49656E696863616DLL;
  *(void *)(v13 + 40) = 0xE900000000000044LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  [v7 setPropertiesToFetch:isa];

  [v7 setFetchBatchSize:25];
  uint64_t v20 = &_swiftEmptySetSingleton;
  Class v18 = &v20;
  uint64_t v19 = a2;
  sub_1000DE3C4( v7,  (void (*)(void *, _BYTE *))sub_100176BD8,  0LL,  (void (*)(uint64_t))sub_100165FF0,  (uint64_t)v17,  (uint64_t (*)(void))type metadata accessor for MachineMO);

  unint64_t v15 = v20;
  if (v2) {
    swift_bridgeObjectRelease(v20);
  }
  return v15;
}

Swift::Int sub_100162564(void *a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  uint64_t v5 = v4;
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 initWithEntityName:v10];

  sub_100007620(0LL, (unint64_t *)&qword_100256B70, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v12 = sub_100007578(&qword_100251578);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1001DE420;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000FC24();
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  *(void *)(v13 + 96) = type metadata accessor for ContainerMO();
  *(void *)(v13 + 104) = sub_1000077B8( &qword_100256BA8,  (uint64_t (*)(uint64_t))type metadata accessor for ContainerMO,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v13 + 72) = a1;
  swift_bridgeObjectRetain(a4);
  id v14 = a1;
  unint64_t v15 = (void *)NSPredicate.init(format:_:)(0xD000000000000022LL, 0x80000001001F9460LL, v13);
  [v11 setPredicate:v15];

  [v11 setReturnsObjectsAsFaults:1];
  uint64_t v16 = sub_100007578(&qword_1002515D8);
  id v17 = (void *)swift_allocObject(v16, 40LL, 7LL);
  *((_OWORD *)v17 + 1) = xmmword_1001E67F0;
  id v18 = objc_allocWithZone(&OBJC_CLASS___NSSortDescriptor);
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v18 initWithKey:v19 ascending:0];

  v17[4] = v20;
  BOOL v60 = (os_log_s *)v17;
  specialized Array._endMutation()(v21);
  sub_100007620(0LL, &qword_100256C20, &OBJC_CLASS___NSSortDescriptor_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  [v11 setSortDescriptors:isa];

  uint64_t v23 = type metadata accessor for MachineMO();
  Swift::Int result = NSManagedObjectContext.fetch<A>(_:)(v11, v23);
  if (v4)
  {
    if (qword_100250EB8 == -1)
    {
LABEL_3:
      uint64_t v25 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v25, (uint64_t)qword_1002567D0);
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(v5);
      swift_bridgeObjectRetain(a4);
      uint64_t v26 = swift_errorRetain(v5);
      uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v31 = static os_log_type_t.error.getter(v27, v28, v29, v30);
      if (os_log_type_enabled(v27, v31))
      {
        uint64_t v32 = swift_slowAlloc(22LL, -1LL);
        os_log_type_t v33 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
        BOOL v60 = v33;
        *(_DWORD *)uint64_t v32 = 136315394;
        swift_bridgeObjectRetain(a4);
        uint64_t v58 = sub_10017C4C4(a3, a4, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v32 + 4, v32 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v32 + 12) = 2082;
        uint64_t v58 = v5;
        swift_errorRetain(v5);
        uint64_t v34 = sub_100007578(&qword_100251D70);
        uint64_t v35 = String.init<A>(describing:)(&v58, v34);
        unint64_t v37 = v36;
        uint64_t v58 = sub_10017C4C4(v35, v36, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v32 + 14, v32 + 22);
        swift_bridgeObjectRelease(v37);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v27,  v31,  "Failed to fetch most recent machine object id for %s: %{public}s",  (uint8_t *)v32,  0x16u);
        swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1LL, -1LL);
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(a4, 2LL);
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_willThrow(v43);
      return (Swift::Int)v27;
    }

LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  a3 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (a3 >= 1) {
    a4 = 1LL;
  }
  else {
    a4 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }
LABEL_10:
  if ((v38 & 0xC000000000000001LL) != 0 && (unint64_t)a3 >= 2)
  {
    Swift::Int result = a4;
    do
    {
      Swift::Int v40 = result + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(result);
      Swift::Int result = v40;
    }

    while (a3 != v40);
  }

  if (v39)
  {
    if (v38 < 0) {
      uint64_t v44 = v38;
    }
    else {
      uint64_t v44 = v38 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v38);
    uint64_t v41 = _CocoaArrayWrapper.subscript.getter(a4, a3, v44);
    uint64_t v42 = v45;
    a4 = v46;
    unint64_t v48 = v47;
    Swift::Int result = swift_bridgeObjectRelease_n(v38, 2LL);
    a3 = v48 >> 1;
  }

  else
  {
    uint64_t v41 = v38 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v42 = (v38 & 0xFFFFFFFFFFFFFF8LL) + 32;
  }

  uint64_t v49 = a3 - a4;
  if (!__OFSUB__(a3, a4))
  {
    if (!v49)
    {
      swift_unknownObjectRelease(v41);

      return (Swift::Int)_swiftEmptyArrayStorage;
    }

    BOOL v60 = (os_log_s *)_swiftEmptyArrayStorage;
    Swift::Int result = specialized ContiguousArray.reserveCapacity(_:)(a3 - a4);
    if ((v49 & 0x8000000000000000LL) == 0)
    {
      if (a4 <= a3) {
        uint64_t v50 = a3;
      }
      else {
        uint64_t v50 = a4;
      }
      uint64_t v51 = v50 - a4;
      char v52 = (void **)(v42 + 8 * a4);
      while (v51)
      {
        id v53 = *v52++;
        a4 = (int64_t)[v53 objectID];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(a4);
        a3 = *((void *)v60 + 2);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a3);
        uint64_t v54 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(a3, a4);
        specialized ContiguousArray._endMutation()(v54);
        --v51;
        if (!--v49)
        {
          uint64_t v27 = v60;
          swift_unknownObjectRelease(v41);

          return (Swift::Int)v27;
        }
      }

      __break(1u);
      goto LABEL_35;
    }

    goto LABEL_48;
  }

              sub_100172694(v2);
              return;
            }
          }
        }
      }
    }

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_153;
      }
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111)) {
          goto LABEL_155;
        }
        if (v13 + v111 >= v3) {
          unint64_t v36 = v3;
        }
        else {
          unint64_t v36 = v13 + v111;
        }
        if (v36 < v13) {
          goto LABEL_156;
        }
        if (v9 != v36)
        {
          unint64_t v37 = (void *)(v10 + 16 * v9);
          do
          {
            uint64_t v38 = (uint64_t *)(v10 + 16 * v9);
            unint64_t v39 = *v38;
            Swift::Int v40 = v38[1];
            uint64_t v41 = v13;
            uint64_t v42 = v37;
            do
            {
              uint64_t v43 = *(v42 - 2);
              uint64_t v44 = *(v42 - 1);
              uint64_t v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1LL) & 1) == 0) {
                break;
              }
              if (!v10) {
                goto LABEL_158;
              }
              unint64_t v39 = *v42;
              Swift::Int v40 = v42[1];
              *(_OWORD *)uint64_t v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }

            while (v9 != v41);
            ++v9;
            v37 += 2;
          }

          while (v9 != v36);
          id v9 = v36;
        }
      }
    }

    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      id v11 = sub_1001AC060(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    unint64_t v47 = *((void *)v11 + 2);
    int64_t v46 = *((void *)v11 + 3);
    uint64_t v12 = v47 + 1;
    if (v47 >= v46 >> 1) {
      id v11 = sub_1001AC060((char *)(v46 > 1), v47 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v48 = v11 + 32;
    uint64_t v49 = &v11[16 * v47 + 32];
    *(void *)uint64_t v49 = v13;
    *((void *)v49 + 1) = v9;
    if (v47) {
      break;
    }
    uint64_t v12 = 1LL;
LABEL_15:
    uint64_t v3 = v112;
    if (v9 >= v112)
    {
      uint64_t v8 = v110;
      goto LABEL_120;
    }
  }

  BOOL v113 = v9;
  while (1)
  {
    uint64_t v50 = v12 - 1;
    if (v12 >= 4)
    {
      uint64_t v55 = &v48[16 * v12];
      uint64_t v56 = *((void *)v55 - 8);
      uint64_t v57 = *((void *)v55 - 7);
      uint64_t v61 = __OFSUB__(v57, v56);
      uint64_t v58 = v57 - v56;
      if (v61) {
        goto LABEL_137;
      }
      BOOL v60 = *((void *)v55 - 6);
      uint64_t v59 = *((void *)v55 - 5);
      uint64_t v61 = __OFSUB__(v59, v60);
      id v53 = v59 - v60;
      uint64_t v54 = v61;
      if (v61) {
        goto LABEL_138;
      }
      uint64_t v62 = v12 - 2;
      int64_t v63 = &v48[16 * v12 - 32];
      id v65 = *(void *)v63;
      id v64 = *((void *)v63 + 1);
      uint64_t v61 = __OFSUB__(v64, v65);
      id v66 = v64 - v65;
      if (v61) {
        goto LABEL_140;
      }
      uint64_t v61 = __OFADD__(v53, v66);
      id v67 = v53 + v66;
      if (v61) {
        goto LABEL_143;
      }
      if (v67 >= v58)
      {
        SEL v85 = &v48[16 * v50];
        int64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        uint64_t v61 = __OFSUB__(v86, v87);
        id v88 = v86 - v87;
        if (v61) {
          goto LABEL_147;
        }
        uint64_t v78 = v53 < v88;
        goto LABEL_105;
      }
    }

    else
    {
      if (v12 != 3)
      {
        uint64_t v79 = *((void *)v11 + 4);
        uint64_t v80 = *((void *)v11 + 5);
        uint64_t v61 = __OFSUB__(v80, v79);
        int v72 = v80 - v79;
        id v73 = v61;
        goto LABEL_99;
      }

      char v52 = *((void *)v11 + 4);
      uint64_t v51 = *((void *)v11 + 5);
      uint64_t v61 = __OFSUB__(v51, v52);
      id v53 = v51 - v52;
      uint64_t v54 = v61;
    }

    if ((v54 & 1) != 0) {
      goto LABEL_139;
    }
    uint64_t v62 = v12 - 2;
    SEL v68 = &v48[16 * v12 - 32];
    id v70 = *(void *)v68;
    uint64_t v69 = *((void *)v68 + 1);
    id v71 = __OFSUB__(v69, v70);
    int v72 = v69 - v70;
    id v73 = v71;
    if (v71) {
      goto LABEL_142;
    }
    uint64_t v74 = &v48[16 * v50];
    uint64_t v76 = *(void *)v74;
    uint64_t v75 = *((void *)v74 + 1);
    uint64_t v61 = __OFSUB__(v75, v76);
    id v77 = v75 - v76;
    if (v61) {
      goto LABEL_145;
    }
    if (__OFADD__(v72, v77)) {
      goto LABEL_146;
    }
    if (v72 + v77 >= v53)
    {
      uint64_t v78 = v53 < v77;
LABEL_105:
      if (v78) {
        uint64_t v50 = v62;
      }
      goto LABEL_107;
    }

void sub_100162BE4(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v3 = a1;
  uint64_t v4 = sub_100162324(a1, a2);
  SEL v85 = v2;
  uint64_t v5 = v4;
  int64_t v6 = 0LL;
  uint64_t v7 = v4[7];
  int64_t v87 = (char *)(v4 + 7);
  uint64_t v8 = 1LL << *((_BYTE *)v4 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v88 = (unint64_t)(v8 + 63) >> 6;
  id v89 = v4;
  uint64_t v86 = v3;
  if ((v9 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v6++, 1LL))
  {
    __break(1u);
    swift_once(&qword_100250EB8, sub_1000DD078);
    uint64_t v62 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v62, (uint64_t)qword_1002567D0);
    swift_errorRetain(v5);
    uint64_t v63 = swift_errorRetain(v5);
    id v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v68 = static os_log_type_t.error.getter(v64, v65, v66, v67);
    if (os_log_type_enabled(v64, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v70 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v69 = 138543362;
      swift_errorRetain(v5);
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(void *)&__int128 v92 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v69 + 4, v69 + 12);
      *id v70 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v64,  v68,  "onqueueRemoveDuplicateMachineIDs error removing duplicate machineIDs: %{public}@",  v69,  0xCu);
      uint64_t v72 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v70, 1LL, v72);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);

      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }

    goto LABEL_53;
  }

  if (v6 >= v88) {
    goto LABEL_52;
  }
  unint64_t v14 = *(void *)&v87[8 * v6];
  if (v14)
  {
LABEL_17:
    unint64_t v10 = (v14 - 1) & v14;
    for (unint64_t i = __clz(__rbit64(v14)) + (v6 << 6); ; unint64_t i = v11 | (v6 << 6))
    {
      uint64_t v16 = (uint64_t *)(v5[6] + 16 * i);
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      swift_bridgeObjectRetain(v18);
      Swift::Int v19 = sub_100162564(v3, (uint64_t)v2, v17, v18);
      Swift::Int v20 = v19;
      if ((unint64_t)v19 >> 62)
      {
        if (v19 < 0) {
          uint64_t v60 = v19;
        }
        else {
          uint64_t v60 = v19 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v19);
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(v20);
        if (!v61)
        {
LABEL_5:
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v20);
          uint64_t v5 = v89;
          if (!v10) {
            goto LABEL_7;
          }
          goto LABEL_6;
        }
      }

      else if (!*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        goto LABEL_5;
      }

      id v21 = objc_allocWithZone(&OBJC_CLASS___NSBatchDeleteRequest);
      sub_100007620(0LL, &qword_100256C00, &OBJC_CLASS___NSManagedObjectID_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v20);
      id v23 = [v21 initWithObjectIDs:isa];

      [v23 setResultType:1];
      *(void *)&__int128 v92 = 0LL;
      id v24 = [v2 executeRequest:v23 error:&v92];
      uint64_t v25 = v92;
      if (v24)
      {
        uint64_t v26 = v24;
        id v27 = (id)v92;
        swift_bridgeObjectRelease(v18);
        uint64_t v28 = objc_opt_self(&OBJC_CLASS___NSBatchDeleteResult);
        uint64_t v29 = (void *)swift_dynamicCastObjCClass(v26, v28);
        if (!v29)
        {

          __int128 v92 = 0u;
          __int128 v93 = 0u;
LABEL_40:

          sub_100041590((uint64_t)&v92, &qword_100251EA0);
          goto LABEL_42;
        }

        uint64_t v30 = v29;
        id v31 = [v29 result];
        if (v31)
        {
          id v32 = v31;
          _bridgeAnyObjectToAny(_:)(v91, v31);
          swift_unknownObjectRelease(v32);
        }

        else
        {
          memset(v91, 0, sizeof(v91));
        }

        sub_1000B669C((uint64_t)v91, (uint64_t)&v92, &qword_100251EA0);
        if (!*((void *)&v93 + 1))
        {

          goto LABEL_40;
        }

        uint64_t v48 = sub_100007578(&qword_100256C08);
        if ((swift_dynamicCast(v91, &v92, (char *)&type metadata for Any + 8, v48, 6LL) & 1) != 0)
        {
          uint64_t v49 = *(void *)&v91[0];
          id v84 = (id)objc_opt_self(&OBJC_CLASS___NSManagedObjectContext);
          uint64_t v50 = sub_100007578(&qword_100256C10);
          uint64_t inited = swift_initStackObject(v50, v90);
          *(_OWORD *)(inited + 16) = xmmword_1001DE710;
          *(void *)&__int128 v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDeletedObjectsKey);
          *((void *)&v92 + 1) = v52;
          AnyHashable.init<A>(_:)(&v92, &type metadata for String, &protocol witness table for String);
          *(void *)(inited + 96) = v48;
          *(void *)(inited + 72) = v49;
          unint64_t v53 = sub_10000BE44(inited);
          Class v54 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v53);
          uint64_t v55 = sub_100007578(&qword_1002515D8);
          uint64_t v56 = swift_allocObject(v55, 40LL, 7LL);
          *(_OWORD *)(v56 + 16) = xmmword_1001E67F0;
          *(void *)(v56 + 32) = v85;
          *(void *)&__int128 v92 = v56;
          specialized Array._endMutation()(v56);
          uint64_t v57 = v92;
          sub_100007620(0LL, &qword_100256C18, &OBJC_CLASS___NSManagedObjectContext_ptr);
          id v58 = v85;
          Class v59 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v57);
          [v84 mergeChangesFromRemoteContextSave:v54 intoContexts:v59];

          uint64_t v2 = v85;
        }

        else
        {
        }
      }

      else
      {
        id v33 = (id)v92;
        uint64_t v34 = _convertNSErrorToError(_:)(v25);

        swift_willThrow(v35);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v36 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v36, (uint64_t)qword_1002567D0);
        swift_errorRetain(v34);
        swift_bridgeObjectRetain(v18);
        uint64_t v37 = swift_errorRetain(v34);
        uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
        os_log_type_t v42 = static os_log_type_t.error.getter(v38, v39, v40, v41);
        if (os_log_type_enabled(v38, v42))
        {
          uint64_t v43 = swift_slowAlloc(22LL, -1LL);
          uint64_t v44 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          uint64_t v45 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v92 = v45;
          *(_DWORD *)uint64_t v43 = 136315394;
          swift_bridgeObjectRetain(v18);
          *(void *)(v43 + 4) = sub_10017C4C4(v17, v18, (uint64_t *)&v92);
          swift_bridgeObjectRelease_n(v18, 3LL);
          *(_WORD *)(v43 + 12) = 2114;
          swift_errorRetain(v34);
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError(v34);
          *(void *)(v43 + 14) = v46;
          *uint64_t v44 = v46;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v42,  "onqueueRemoveDuplicateMachineIDs error removing duplicate machineIDs for %s: %{public}@",  (uint8_t *)v43,  0x16u);
          uint64_t v47 = sub_100007578(&qword_100250F90);
          swift_arrayDestroy(v44, 1LL, v47);
          swift_slowDealloc(v44, -1LL, -1LL);
          swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1LL, -1LL);
          swift_slowDealloc(v43, -1LL, -1LL);

          swift_errorRelease();
        }

        else
        {
          swift_errorRelease();
          swift_bridgeObjectRelease_n(v18, 2LL);
          swift_errorRelease();
          swift_errorRelease();
        }

        uint64_t v2 = v85;
      }

char **sub_100163650(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Container.DBAdapter();
  uint64_t v9 = (void *)swift_allocObject(v8, 48LL, 7LL);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  id v299 = a1;
  uint64_t v10 = a2;
  sub_10004C798(a3, a4);
  sub_10003C1D0(0LL, 0xF000000000000000LL);
  id v11 = [objc_allocWithZone((Class)type metadata accessor for PolicyRedactionCrypter()) init];
  uint64_t v12 = (char **)[objc_allocWithZone(TPModel) initWithDecrypter:v11 dbAdapter:v9];

  [v12 setSuppressInitialInfoLogging:1];
  id v13 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  id v14 = [(id)v10 custodianRecoveryKeys];
  if (v14)
  {
    int64_t v15 = v14;
    BOOL v303 = 0LL;
    uint64_t v16 = type metadata accessor for CustodianRecoveryKeyMO();
    uint64_t v17 = sub_1000077B8( &qword_100256B88,  (uint64_t (*)(uint64_t))type metadata accessor for CustodianRecoveryKeyMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    static Set._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v303, v16, v17);

    uint64_t v18 = (uint64_t)v303;
    if (v303)
    {
      id v19 = v13;
      Swift::Int v20 = v12;
      sub_10015B674(v18, v19, v20);
      swift_bridgeObjectRelease(v18);
    }
  }

  BOOL v303 = 0LL;
  id v21 = (unint64_t *)[v12 peerCountWithError:&v303];
  p_vtable = &OBJC_CLASS___VoucherMO.vtable;
  id v294 = v13;
  if (v303)
  {
    id v23 = v303;
    swift_willThrow(v23);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v24, (uint64_t)qword_1002567D0);
    uint64_t v25 = v23;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v30 = static os_log_type_t.error.getter(v26, v27, v28, v29);
    if (os_log_type_enabled(v26, v30))
    {
      id v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v32 = (unint64_t **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v31 = 138543362;
      id v33 = v25;
      uint64_t v34 = (unint64_t *)_swift_stdlib_bridgeErrorToNSError(v33);
      BOOL v303 = v34;
      p_vtable = (void **)(&OBJC_CLASS___VoucherMO + 24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v31 + 4, v31 + 12);
      *id v32 = v34;

      _os_log_impl((void *)&_mh_execute_header, v26, v30, "loadModel error getting peerCount: %{public}@", v31, 0xCu);
      uint64_t v35 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v32, 1LL, v35);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      uint64_t v26 = (os_log_s *)v25;
    }
  }

  else
  {
    uint64_t v36 = v21;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    uint64_t v38 = sub_100006BAC(v37, (uint64_t)qword_1002567D0);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v40 = 134217984;
      BOOL v303 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v40 + 4, v40 + 12);
      _os_log_impl((void *)&_mh_execute_header, v26, v39, "loadModel: loaded %lu peers", v40, 0xCu);
      swift_slowDealloc(v40, -1LL, -1LL);
    }
  }

  BOOL v303 = 0LL;
  uint64_t v41 = (unint64_t *)[v12 voucherCountWithError:&v303];
  if (v303)
  {
    os_log_type_t v42 = v303;
    swift_willThrow(v42);
    uint64_t v43 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v43, (uint64_t)qword_1002567D0);
    uint64_t v44 = v42;
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v49 = static os_log_type_t.error.getter(v45, v46, v47, v48);
    if (os_log_type_enabled(v45, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = (unint64_t **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v50 = 138543362;
      uint64_t v52 = v44;
      unint64_t v53 = (unint64_t *)_swift_stdlib_bridgeErrorToNSError(v52);
      BOOL v303 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v50 + 4, v50 + 12);
      *uint64_t v51 = v53;

      _os_log_impl((void *)&_mh_execute_header, v45, v49, "loadModel error getting voucherCount: %{public}@", v50, 0xCu);
      uint64_t v54 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v51, 1LL, v54);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {

      uint64_t v45 = (os_log_s *)v44;
    }
  }

  else
  {
    uint64_t v55 = v41;
    uint64_t v56 = type metadata accessor for Logger(0LL);
    uint64_t v57 = sub_100006BAC(v56, (uint64_t)qword_1002567D0);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v58))
    {
      Class v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)Class v59 = 134217984;
      BOOL v303 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v59 + 4, v59 + 12);
      _os_log_impl((void *)&_mh_execute_header, v45, v58, "loadModel: loaded %lu vouchers", v59, 0xCu);
      swift_slowDealloc(v59, -1LL, -1LL);
    }
  }

  while (1)
  {
    uint64_t v60 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v60, (uint64_t)qword_1002567D0);
    uint64_t v61 = v12;
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.info.getter();
    id v295 = v61;
    if (os_log_type_enabled(v62, v63))
    {
      id v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)id v64 = 134217984;
      id v65 = [v61 allCustodianRecoveryKeys];
      uint64_t v66 = sub_100007620(0LL, &qword_100256B80, &OBJC_CLASS___TPCustodianRecoveryKey_ptr);
      uint64_t v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v66);

      if ((unint64_t)v67 >> 62)
      {
        if (v67 < 0) {
          uint64_t v290 = v67;
        }
        else {
          uint64_t v290 = v67 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v67);
        os_log_type_t v68 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter(v290);

        swift_bridgeObjectRelease(v67);
      }

      else
      {
        os_log_type_t v68 = *(unint64_t **)((v67 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      swift_bridgeObjectRelease(v67);
      BOOL v303 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v64 + 4, v64 + 12);

      _os_log_impl((void *)&_mh_execute_header, v62, v63, "loadModel: loaded %ld CRKs", v64, 0xCu);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    else
    {

      uint64_t v62 = (os_log_s *)v61;
    }

    id v69 = [(id)v10 recoveryKeySigningSPKI];
    if (v69)
    {
      id v70 = v69;
      uint64_t v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
      unint64_t v73 = v72;

      id v74 = [(id)v10 recoveryKeyEncryptionSPKI];
      if (v74)
      {
        uint64_t v75 = v74;
        uint64_t v76 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v74);
        unint64_t v78 = v77;

        id v79 = objc_allocWithZone(&OBJC_CLASS___TPRecoveryKeyPair);
        sub_1000084E8(v71, v73);
        sub_1000084E8(v76, v78);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v81 = Data._bridgeToObjectiveC()().super.isa;
        id v82 = [v79 initWithSigningKeyData:isa encryptionKeyData:v81];
        sub_10000852C(v76, v78);
        sub_10000852C(v71, v73);

        [v61 setRecoveryKeys:v82];
        sub_10000852C(v76, v78);
        sub_10000852C(v71, v73);
        goto LABEL_40;
      }

      sub_10000852C(v71, v73);
    }

    id v83 = sub_1000E2F8C();
    if (v83)
    {
      id v84 = v83;
      id v85 = [v83 recoverySigningPublicKey];
      if (v85)
      {
        uint64_t v86 = v85;
        uint64_t v87 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
        unint64_t v89 = v88;

        id v90 = [v84 recoveryEncryptionPublicKey];
        if (v90)
        {
          BOOL v91 = v90;
          static Data._unconditionallyBridgeFromObjectiveC(_:)(v90);

          __asm { BR              X10 }
        }

        sub_10000852C(v87, v89);
      }
    }

LABEL_225:
    __break(1u);
LABEL_226:
    swift_once(&qword_100250EB8, sub_1000DD078);
  }

  id v98 = (id)sub_1001502FC(v97, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1001505F4);
LABEL_198:
  sub_1000DCA18((uint64_t)v98);
  uint64_t v228 = v227;
  swift_release(v98);
  uint64_t v229 = sub_100161634(v228);
  swift_bridgeObjectRelease(v228);
  uint64_t v230 = swift_bridgeObjectRetain_n(v296, 2LL);
  id v231 = (os_log_s *)Logger.logObject.getter(v230);
  os_log_type_t v232 = static os_log_type_t.info.getter();
  uint64_t v298 = v229;
  if (os_log_type_enabled(v231, v232))
  {
    BOOL v233 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v234 = (unint64_t *)swift_slowAlloc(32LL, -1LL);
    BOOL v303 = v234;
    *(_DWORD *)BOOL v233 = 136446210;
    uint64_t v235 = swift_bridgeObjectRetain(v296);
    uint64_t v236 = Set.description.getter(v235, &type metadata for String, &protocol witness table for String);
    unint64_t v238 = v237;
    swift_bridgeObjectRelease(v296);
    id v301 = (id)sub_10017C4C4(v236, v238, (uint64_t *)&v303);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, &v302, v233 + 4, v233 + 12);
    swift_bridgeObjectRelease_n(v296, 2LL);
    swift_bridgeObjectRelease(v238);
    _os_log_impl((void *)&_mh_execute_header, v231, v232, "loadModel: allowedMachineIDs: %{public}s", v233, 0xCu);
    swift_arrayDestroy(v234, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v234, -1LL, -1LL);
    swift_slowDealloc(v233, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v296, 2LL);
  }

  uint64_t v239 = swift_bridgeObjectRetain(v293);
  BOOL v240 = (os_log_s *)Logger.logObject.getter(v239);
  os_log_type_t v241 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v240, v241))
  {
    SEL v242 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v243 = (unint64_t *)swift_slowAlloc(32LL, -1LL);
    BOOL v303 = v243;
    *(_DWORD *)SEL v242 = 136446210;
    uint64_t v244 = swift_bridgeObjectRetain(v293);
    uint64_t v245 = Set.description.getter(v244, &type metadata for String, &protocol witness table for String);
    unint64_t v247 = v246;
    swift_bridgeObjectRelease(v293);
    id v301 = (id)sub_10017C4C4(v245, v247, (uint64_t *)&v303);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, &v302, v242 + 4, v242 + 12);
    swift_bridgeObjectRelease_n(v293, 2LL);
    swift_bridgeObjectRelease(v247);
    _os_log_impl((void *)&_mh_execute_header, v240, v241, "loadModel: disallowedMachineIDs: %{public}s", v242, 0xCu);
    swift_arrayDestroy(v243, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v243, -1LL, -1LL);
    swift_slowDealloc(v242, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v293, 2LL);
  }

  uint64_t v248 = swift_bridgeObjectRetain(v292);
  SEL v249 = (os_log_s *)Logger.logObject.getter(v248);
  os_log_type_t v250 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v249, v250))
  {
    int64_t v251 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v252 = (unint64_t *)swift_slowAlloc(32LL, -1LL);
    BOOL v303 = v252;
    *(_DWORD *)int64_t v251 = 136446210;
    uint64_t v253 = swift_bridgeObjectRetain(v292);
    uint64_t v254 = Set.description.getter(v253, &type metadata for String, &protocol witness table for String);
    unint64_t v256 = v255;
    swift_bridgeObjectRelease(v292);
    id v301 = (id)sub_10017C4C4(v254, v256, (uint64_t *)&v303);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, &v302, v251 + 4, v251 + 12);
    swift_bridgeObjectRelease_n(v292, 2LL);
    swift_bridgeObjectRelease(v256);
    _os_log_impl((void *)&_mh_execute_header, v249, v250, "loadModel: ghostedMachineIDs: %{public}s", v251, 0xCu);
    swift_arrayDestroy(v252, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v252, -1LL, -1LL);
    swift_slowDealloc(v251, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v292, 2LL);
  }

  uint64_t v257 = swift_bridgeObjectRetain(v291);
  int64_t v258 = (os_log_s *)Logger.logObject.getter(v257);
  os_log_type_t v259 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v258, v259))
  {
    id v260 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v261 = (unint64_t *)swift_slowAlloc(32LL, -1LL);
    BOOL v303 = v261;
    *(_DWORD *)id v260 = 136446210;
    uint64_t v262 = swift_bridgeObjectRetain(v291);
    uint64_t v263 = Set.description.getter(v262, &type metadata for String, &protocol witness table for String);
    unint64_t v265 = v264;
    swift_bridgeObjectRelease(v291);
    id v301 = (id)sub_10017C4C4(v263, v265, (uint64_t *)&v303);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, &v302, v260 + 4, v260 + 12);
    swift_bridgeObjectRelease_n(v291, 2LL);
    swift_bridgeObjectRelease(v265);
    _os_log_impl((void *)&_mh_execute_header, v258, v259, "loadModel: evictedMachineIDs: %{public}s", v260, 0xCu);
    swift_arrayDestroy(v261, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v261, -1LL, -1LL);
    swift_slowDealloc(v260, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v291, 2LL);
  }

  uint64_t v266 = swift_bridgeObjectRetain(v299);
  id v267 = (os_log_s *)Logger.logObject.getter(v266);
  os_log_type_t v268 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v267, v268))
  {
    BOOL v269 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    SEL v270 = (unint64_t *)swift_slowAlloc(32LL, -1LL);
    BOOL v303 = v270;
    *(_DWORD *)BOOL v269 = 136446210;
    uint64_t v271 = swift_bridgeObjectRetain(v299);
    uint64_t v272 = Set.description.getter(v271, &type metadata for String, &protocol witness table for String);
    unint64_t v274 = v273;
    swift_bridgeObjectRelease(v299);
    id v301 = (id)sub_10017C4C4(v272, v274, (uint64_t *)&v303);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, &v302, v269 + 4, v269 + 12);
    swift_bridgeObjectRelease_n(v299, 2LL);
    swift_bridgeObjectRelease(v274);
    _os_log_impl((void *)&_mh_execute_header, v267, v268, "loadModel: unknownReasonMachineIDs: %{public}s", v269, 0xCu);
    swift_arrayDestroy(v270, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v270, -1LL, -1LL);
    swift_slowDealloc(v269, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v299, 2LL);
  }

  uint64_t v275 = swift_bridgeObjectRetain(v298);
  BOOL v276 = (os_log_s *)Logger.logObject.getter(v275);
  os_log_type_t v277 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v276, v277))
  {
    id v278 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int64_t v279 = (unint64_t *)swift_slowAlloc(32LL, -1LL);
    BOOL v303 = v279;
    *(_DWORD *)id v278 = 136446210;
    uint64_t v280 = swift_bridgeObjectRetain(v298);
    uint64_t v281 = Set.description.getter(v280, &type metadata for String, &protocol witness table for String);
    unint64_t v283 = v282;
    swift_bridgeObjectRelease(v298);
    id v301 = (id)sub_10017C4C4(v281, v283, (uint64_t *)&v303);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, &v302, v278 + 4, v278 + 12);
    swift_bridgeObjectRelease_n(v298, 2LL);
    swift_bridgeObjectRelease(v283);
    _os_log_impl((void *)&_mh_execute_header, v276, v277, "loadModel: unknownMachineIDs: %{public}s", v278, 0xCu);
    swift_arrayDestroy(v279, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v279, -1LL, -1LL);
    swift_slowDealloc(v278, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v298, 2LL);
  }

  uint64_t v284 = *(void *)(v296 + 16);
  uint64_t v285 = swift_bridgeObjectRelease(v296);
  if (!v284)
  {
    int64_t v286 = (os_log_s *)Logger.logObject.getter(v285);
    os_log_type_t v287 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v286, v287))
    {
      id v288 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v288 = 0;
      _os_log_impl((void *)&_mh_execute_header, v286, v287, "loadModel: no allowedMachineIDs?", v288, 2u);
      swift_slowDealloc(v288, -1LL, -1LL);
    }
  }

  [v295 setSuppressInitialInfoLogging:0];
  return v295;
}

void sub_100165834(void *a1, void *a2)
{
  id v4 = [a1 egoPeerID];
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = v4;
  id v6 = [a1 egoPeerStableInfo];
  if (!v6)
  {

LABEL_13:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    uint64_t v38 = sub_100006BAC(v37, (uint64_t)qword_1002567D0);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v42 = static os_log_type_t.error.getter(oslog, v39, v40, v41);
    if (os_log_type_enabled(oslog, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v42,  "ensureEgoConsistency failed to find ego peer information",  v43,  2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    goto LABEL_17;
  }

  uint64_t v7 = v6;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v10 = v9;

  id v11 = [a1 egoPeerStableInfoSig];
  if (!v11)
  {

    sub_10000852C(v8, v10);
    goto LABEL_13;
  }

  uint64_t v12 = v11;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v15 = v14;

  id v16 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  sub_1000084E8(v8, v10);
  sub_1000084E8(v13, v15);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v18 = Data._bridgeToObjectiveC()().super.isa;
  id v19 = [v16 initWithData:isa sig:v18];
  sub_10000852C(v13, v15);
  sub_10000852C(v8, v10);

  if (!v19)
  {

    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    uint64_t v45 = sub_100006BAC(v44, (uint64_t)qword_1002567D0);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v49 = static os_log_type_t.error.getter(oslog, v46, v47, v48);
    if (os_log_type_enabled(oslog, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v49,  "ensureEgoConsistency failed to create TPPeerStableInfo from container",  v50,  2u);
      swift_slowDealloc(v50, -1LL, -1LL);

      sub_10000852C(v13, v15);
      sub_10000852C(v8, v10);
      return;
    }

    sub_10000852C(v8, v10);
    sub_10000852C(v13, v15);
LABEL_17:

    return;
  }

  id v74 = 0LL;
  id v20 = [a2 getStableInfoForPeerWithID:v5 error:&v74];

  if (v74)
  {
    id v21 = v74;

    swift_willThrow(v22);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v23, (uint64_t)qword_1002567D0);
    id v24 = v21;
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v29 = static os_log_type_t.error.getter(v25, v26, v27, v28);
    if (os_log_type_enabled(v25, v29))
    {
      unint64_t v72 = v19;
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)os_log_type_t v30 = 138543362;
      id v32 = v24;
      unint64_t v71 = v15;
      id v33 = (void *)_swift_stdlib_bridgeErrorToNSError(v32);
      id v74 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v30 + 4, v30 + 12);
      *id v31 = v33;

      _os_log_impl( (void *)&_mh_execute_header,  v25,  v29,  "ensureEgoConsistency failed to create TPPeerStableInfo from model: %{public}@",  v30,  0xCu);
      uint64_t v34 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v31, 1LL, v34);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      uint64_t v35 = v13;
      unint64_t v36 = v71;
LABEL_10:
      sub_10000852C(v35, v36);
      sub_10000852C(v8, v10);
      return;
    }

    sub_10000852C(v8, v10);
    sub_10000852C(v13, v15);

LABEL_26:
    return;
  }

  if (!v20)
  {
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v63 = type metadata accessor for Logger(0LL);
    uint64_t v64 = sub_100006BAC(v63, (uint64_t)qword_1002567D0);
    id v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v69 = static os_log_type_t.error.getter(v65, v66, v67, v68);
    if (os_log_type_enabled(v65, v69))
    {
      id v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v70 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v69,  "ensureEgoConsistency failed to create TPPeerStableInfo from model",  v70,  2u);
      swift_slowDealloc(v70, -1LL, -1LL);

      uint64_t v35 = v13;
      unint64_t v36 = v15;
      goto LABEL_10;
    }

    sub_10000852C(v8, v10);
    sub_10000852C(v13, v15);

    goto LABEL_26;
  }

  id v51 = v20;
  id v52 = [v51 clock];
  if ([v19 clock] >= v52)
  {

    sub_10000852C(v8, v10);
    sub_10000852C(v13, v15);
  }

  else
  {
    id v53 = [v51 data];
    uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
    unint64_t v56 = v55;

    Class v57 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v54, v56);
    [a1 setEgoPeerStableInfo:v57];

    id v58 = [v51 sig];
    uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
    unint64_t v61 = v60;

    Class v62 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v59, v61);
    [a1 setEgoPeerStableInfoSig:v62];

    sub_10000852C(v8, v10);
    sub_10000852C(v13, v15);
  }

id sub_100165FD4(void *a1, uint64_t a2)
{
  return sub_1000E9D94(a1, a2, *(void **)(v2 + 16), *(uint64_t **)(v2 + 24));
}

id sub_100165FF0(uint64_t a1)
{
  return sub_1000E5720(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t sub_100166008(void *a1)
{
  unint64_t v2 = sub_10000C360((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v48 = v2;
  id v3 = [a1 bottleID];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_10014C780(v5, v7, 0x4449656C74746F62LL, 0xE800000000000000LL, isUniquelyReferenced_nonNull_native);
    unint64_t v9 = 0x8000000000000000LL;
    unint64_t v48 = v2;
  }

  else
  {
    sub_10000CEE8(0x4449656C74746F62LL, 0xE800000000000000LL);
    unint64_t v9 = v10;
  }

  swift_bridgeObjectRelease(v9);
  id v11 = [a1 peerID];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    char v16 = swift_isUniquelyReferenced_nonNull_native(v48);
    sub_10014C780(v13, v15, 0x444972656570LL, 0xE600000000000000LL, v16);
    unint64_t v17 = 0x8000000000000000LL;
  }

  else
  {
    sub_10000CEE8(0x444972656570LL, 0xE600000000000000LL);
    unint64_t v17 = v18;
  }

  swift_bridgeObjectRelease(v17);
  id v19 = [a1 escrowedSigningSPKI];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v23 = v22;

    Swift::String v24 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v21, v23);
    char v25 = swift_isUniquelyReferenced_nonNull_native(v48);
    sub_10014C780(v24._countAndFlagsBits, (uint64_t)v24._object, 0x53676E696E676973LL, 0xEB00000000494B50LL, v25);
    unint64_t v26 = 0x8000000000000000LL;
  }

  else
  {
    sub_10000CEE8(0x53676E696E676973LL, 0xEB00000000494B50LL);
    unint64_t v26 = v27;
  }

  swift_bridgeObjectRelease(v26);
  id v28 = [a1 signatureUsingPeerKey];
  if (v28)
  {
    os_log_type_t v29 = v28;
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
    unint64_t v32 = v31;

    Swift::String v33 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v30, v32);
    char v34 = swift_isUniquelyReferenced_nonNull_native(v48);
    sub_10014C780(v33._countAndFlagsBits, (uint64_t)v33._object, 0xD000000000000015LL, 0x80000001001FA600LL, v34);
    unint64_t v35 = 0x8000000000000000LL;
  }

  else
  {
    sub_10000CEE8(0xD000000000000015LL, 0x80000001001FA600LL);
    unint64_t v35 = v36;
  }

  swift_bridgeObjectRelease(v35);
  id v37 = [a1 signatureUsingEscrowKey];
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
    unint64_t v41 = v40;

    Swift::String v42 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v39, v41);
    char v43 = swift_isUniquelyReferenced_nonNull_native(v48);
    sub_10014C780(v42._countAndFlagsBits, (uint64_t)v42._object, 0xD000000000000012LL, 0x80000001001FA620LL, v43);
    uint64_t v44 = v48;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_10000CEE8(0xD000000000000012LL, 0x80000001001FA620LL);
    swift_bridgeObjectRelease(v45);
    uint64_t v44 = v48;
  }

  unint64_t v46 = sub_100177088(v44);
  swift_bridgeObjectRelease(v44);
  return v46;
}

uint64_t sub_100166400(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(&OBJC_CLASS___NSKeyedUnarchiver);
  sub_1000084E8(a1, a2);
  id v6 = sub_100158440();
  uint64_t result = sub_10000852C(a1, a2);
  if (!v2)
  {
    uint64_t v8 = sub_100007578(&qword_1002511B0);
    uint64_t v9 = swift_allocObject(v8, 56LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_1001DE9D0;
    *(void *)(v9 + 32) = sub_100007620(0LL, (unint64_t *)&unk_100256CC0, &OBJC_CLASS___NSDictionary_ptr);
    *(void *)(v9 + 40) = sub_100007620(0LL, &qword_1002511C0, &OBJC_CLASS___NSString_ptr);
    *(void *)(v9 + 48) = sub_100007620(0LL, &qword_100256CA8, &OBJC_CLASS___TPPBPeerStableInfoSetting_ptr);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSKeyedArchiveRootObjectKey);
    uint64_t v12 = v11;
    NSCoder.decodeObject(of:forKey:)(v9, v10, v11);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v12);

    if (v16)
    {
      uint64_t v13 = sub_100007578((uint64_t *)&unk_100256CD0);
      else {
        return 0LL;
      }
    }

    else
    {
      sub_100041590((uint64_t)v15, &qword_100251EA0);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100166590(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100007578(&qword_1002570A8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_100166698(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v3);
    uint64_t v5 = type metadata accessor for VoucherMO();
    uint64_t v6 = sub_1000077B8( &qword_100256F88,  (uint64_t (*)(uint64_t))type metadata accessor for VoucherMO,  (uint64_t)&protocol conformance descriptor for NSObject);
    unint64_t v7 = Set.Iterator.init(_cocoa:)(v48, v4, v5, v6);
    uint64_t v2 = v48[0];
    uint64_t v44 = v48[1];
    uint64_t v8 = v48[2];
    uint64_t v9 = v48[3];
    unint64_t v10 = v48[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v44 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    unint64_t v7 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v9 = 0LL;
  }

  int64_t v43 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v45 = v2;
  while (1)
  {
    uint64_t v14 = v9;
    if ((v2 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v17 = __CocoaSet.Iterator.next()(v7);
    if (!v17) {
      goto LABEL_46;
    }
    uint64_t v18 = v17;
    uint64_t v47 = v17;
    uint64_t v19 = type metadata accessor for VoucherMO();
    swift_unknownObjectRetain(v18, v20);
    swift_dynamicCast(&v49, &v47, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
    id v21 = v49;
    swift_unknownObjectRelease(v18);
    if (!v21) {
      goto LABEL_46;
    }
LABEL_36:
    id v25 = [v21 voucherInfo];
    if (v25)
    {
      unint64_t v26 = v25;
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
      unint64_t v29 = v28;
    }

    else
    {
      uint64_t v27 = 0LL;
      unint64_t v29 = 0xF000000000000000LL;
    }

    id v30 = [a2 data];
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
    unint64_t v33 = v32;

    if (v29 >> 60 == 15)
    {
LABEL_11:
      sub_10003C1D0(v27, v29);
      sub_10003C1D0(v31, v33);
      goto LABEL_12;
    }

    sub_1000084E8(v27, v29);
    sub_100041318(v27, v29);
    char v35 = v34;
    sub_10000852C(v31, v33);
    sub_10003C1D0(v27, v29);
    sub_10003C1D0(v27, v29);
    if ((v35 & 1) != 0)
    {
      id v36 = [v21 voucherInfoSig];
      if (v36)
      {
        id v37 = v36;
        uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
        unint64_t v29 = v38;
      }

      else
      {
        uint64_t v27 = 0LL;
        unint64_t v29 = 0xF000000000000000LL;
      }

      id v39 = [a2 sig];
      uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
      unint64_t v33 = v40;

      if (v29 >> 60 == 15) {
        goto LABEL_11;
      }
      sub_1000084E8(v27, v29);
      sub_100041318(v27, v29);
      char v42 = v41;
      sub_10000852C(v31, v33);
      sub_10003C1D0(v27, v29);
      sub_10003C1D0(v27, v29);

      uint64_t v2 = v45;
      if ((v42 & 1) != 0) {
        goto LABEL_46;
      }
    }

    else
    {
LABEL_12:

      uint64_t v2 = v45;
    }
  }

  if (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v9 << 6);
LABEL_35:
    id v21 = *(id *)(*(void *)(v2 + 48) + 8 * v16);
    if (!v21) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }

  int64_t v22 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v22 >= v43) {
      goto LABEL_46;
    }
    unint64_t v23 = *(void *)(v44 + 8 * v22);
    ++v9;
    if (!v23)
    {
      uint64_t v9 = v14 + 2;
      if (v14 + 2 >= v43) {
        goto LABEL_46;
      }
      unint64_t v23 = *(void *)(v44 + 8 * v9);
      if (!v23)
      {
        uint64_t v9 = v14 + 3;
        if (v14 + 3 >= v43) {
          goto LABEL_46;
        }
        unint64_t v23 = *(void *)(v44 + 8 * v9);
        if (!v23)
        {
          uint64_t v9 = v14 + 4;
          if (v14 + 4 >= v43) {
            goto LABEL_46;
          }
          unint64_t v23 = *(void *)(v44 + 8 * v9);
          if (!v23)
          {
            uint64_t v9 = v14 + 5;
            if (v14 + 5 >= v43) {
              goto LABEL_46;
            }
            unint64_t v23 = *(void *)(v44 + 8 * v9);
            if (!v23)
            {
              uint64_t v24 = v14 + 6;
              while (v43 != v24)
              {
                unint64_t v23 = *(void *)(v44 + 8 * v24++);
                if (v23)
                {
                  uint64_t v9 = v24 - 1;
                  goto LABEL_34;
                }
              }

id sub_100166B10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    id v3 = [objc_allocWithZone(_SFECKeySpecifier) initWithCurve:4];
    id v4 = [objc_allocWithZone(_SFECKeyPair) initRandomKeyPairWithSpecifier:v3];
    if (v4)
    {
      id v2 = v4;
    }

    else
    {
      unint64_t v11 = sub_100043F74();
      uint64_t v12 = swift_allocError(&type metadata for ContainerError, v11, 0LL, 0LL);
      *(void *)uint64_t v13 = 0LL;
      *(void *)(v13 + 8) = 0LL;
      *(_BYTE *)(v13 + 16) = 13;
      swift_willThrow(v12);
    }
  }

  else
  {
    unint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___TPHObjectiveC);
    sub_1000084E8(a1, a2);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v16 = 0LL;
    id v2 = [v7 fetchKeyPairWithPrivateKeyPersistentRef:isa error:&v16];

    id v9 = v16;
    if (v2)
    {
      id v10 = v16;
    }

    else
    {
      id v2 = v16;
      _convertNSErrorToError(_:)(v9);

      swift_willThrow(v14);
    }

    sub_10003C1D0(a1, a2);
  }

  return v2;
}

id sub_100166CB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v24 = 0LL;
  id v17 =  [(id)swift_getObjCClassFromMetadata(v9) permanentInfoWithMachineID:v15 modelID:v16 epoch:a5 signingKeyPair:a6 encryptionKeyPair:a7 creationTime:a8 peerIDHashAlgo:a9 error:&v24];

  id v18 = v24;
  if (v17)
  {
    id v19 = v24;
  }

  else
  {
    id v20 = v24;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow(v21);
  }

  return v17;
}

uint64_t sub_100166DF0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))
{
  if (a12) {
    os_log_type_t v18 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v18 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v19 = v18;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v20, (uint64_t)qword_1002567D0);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a12);
  swift_bridgeObjectRetain(a2);
  uint64_t v21 = swift_errorRetain(a12);
  int64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  if (os_log_type_enabled(v22, v19))
  {
    uint64_t v58 = a8;
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    unint64_t v66 = a2;
    uint64_t v67 = v24;
    *(_DWORD *)uint64_t v23 = 136446466;
    uint64_t v25 = a1;
    uint64_t v65 = a1;
    swift_bridgeObjectRetain(a2);
    uint64_t v26 = sub_100007578((uint64_t *)&unk_100256C60);
    uint64_t v27 = String.init<A>(describing:)(&v65, v26);
    unint64_t v29 = (_TtC18TrustedPeersHelper6Client *)v28;
    uint64_t v65 = sub_10017C4C4(v27, v28, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    *(_WORD *)(v23 + 12) = 2082;
    id v37 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a12)
    {
      uint64_t v65 = 0x203A726F727265LL;
      unint64_t v66 = 0xE700000000000000LL;
      uint64_t v64 = a12;
      swift_errorRetain(a12);
      swift_errorRetain(a12);
      uint64_t v38 = sub_100007578(&qword_100251D70);
      v39._countAndFlagsBits = String.init<A>(describing:)(&v64, v38);
      object = (_TtC18TrustedPeersHelper6Client *)v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(object, v41, v42, v43, v44, v45, v46, v47);
      swift_errorRelease();
      uint64_t v48 = v65;
      id v37 = (_TtC18TrustedPeersHelper6Client *)v66;
    }

    else
    {
      uint64_t v48 = 0x73736563637573LL;
    }

    uint64_t v65 = sub_10017C4C4(v48, (unint64_t)v37, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v37, v49, v50, v51, v52, v53, v54, v55);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v19,  "prepare complete peerID: %{public}s %{public}s",  (uint8_t *)v23,  0x16u);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    a8 = v58;
  }

  else
  {
    uint64_t v25 = a1;
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD0000000000000F2LL, 0x80000001001F9C70LL);
  sub_10017CB04( 0x65726170657250LL,  0xE700000000000000LL,  *(void *)(a14 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name),  *(void **)(a14 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name + 8),  *(void *)(a14 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name + 16),  *(void **)(a14 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name + 24),  a12);
  if (a12)
  {
    swift_getErrorValue(a12, v69, v68);
    id v56 = sub_100177B68(v68[1], v68[2]);
  }

  else
  {
    id v56 = 0LL;
  }

  a15(v25, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v56);
  return swift_errorRelease();
}

uint64_t sub_100167198( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6, void *a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, void *a21, void (*a22)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id), uint64_t a23)
{
  uint64_t v27 = (void *)swift_allocObject(&unk_100239338, 48LL, 7LL);
  v27[2] = a20;
  v27[3] = a21;
  v27[4] = a22;
  v27[5] = a23;
  unint64_t v28 = (void *)swift_allocObject(&unk_100239360, 40LL, 7LL);
  unint64_t v29 = v28;
  v28[2] = a19;
  v28[3] = sub_100176BEC;
  v28[4] = v27;
  if (a1 && !a2)
  {
    uint64_t v75 = v28;
    swift_retain(a20);
    id v55 = a21;
    swift_retain(a23);
    swift_retain(a19);
    swift_retain(v27);
    id v56 = a1;
    id v57 = v56;
    if (a4)
    {
      id v58 = [v56 version];
      uint64_t v59 = *(void **)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride];
      *(void *)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_policyVersionOverride] = v58;
    }

    unint64_t v78 = *(void **)&a5[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v60 = swift_allocObject(&unk_100239388, 152LL, 7LL);
    *(_DWORD *)(v60 + 16) = a6;
    *(void *)(v60 + 24) = a7;
    *(void *)(v60 + 32) = v57;
    *(void *)(v60 + 40) = a8;
    *(void *)(v60 + 48) = a9;
    *(void *)(v60 + 56) = a10;
    *(void *)(v60 + 64) = a11;
    *(void *)(v60 + 72) = a12;
    *(void *)(v60 + 80) = a13;
    *(void *)(v60 + 88) = a14;
    *(void *)(v60 + 96) = a15;
    *(void *)(v60 + 104) = a16;
    *(void *)(v60 + 112) = a17;
    *(void *)(v60 + 120) = a5;
    *(void *)(v60 + 128) = a18;
    *(void *)(v60 + 136) = sub_100176CA4;
    *(void *)(v60 + 144) = v75;
    unint64_t v72 = v57;
    uint64_t v61 = swift_allocObject(&unk_1002393B0, 32LL, 7LL);
    *(void *)(v61 + 16) = sub_1001730B8;
    *(void *)(v61 + 24) = v60;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v80 = v61;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_1002393C8;
    Class v62 = _Block_copy(aBlock);
    uint64_t v70 = v80;
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a16);
    uint64_t v63 = a5;
    swift_retain(v75);
    id v64 = a18;
    id v65 = a17;
    id v66 = a7;
    swift_retain(v61);
    id v67 = v72;
    id v68 = a8;
    swift_bridgeObjectRetain(a9);
    id v69 = a10;
    swift_bridgeObjectRetain(a12);
    swift_release(v70);
    [v78 performBlockAndWait:v62];

    _Block_release(v62);
    LOBYTE(v62) = swift_isEscapingClosureAtFileLocation(v61, "", 108LL, 2681LL, 45LL, 1LL);
    swift_release(v27);
    swift_release(a19);
    swift_release(v75);
    swift_release(v60);
    uint64_t result = swift_release(v61);
  }

  else
  {
    uint64_t v30 = qword_100250EB8;
    swift_retain(a20);
    id v31 = a21;
    swift_retain(a23);
    swift_retain(a19);
    swift_retain(v27);
    if (v30 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v32, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v33 = swift_errorRetain(a2);
    id v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.info.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      id v74 = v29;
      BOOL v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v37;
      *(_DWORD *)BOOL v36 = 136446210;
      uint64_t v81 = a2;
      swift_errorRetain(a2);
      uint64_t v38 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v39 = String.init<A>(describing:)(&v81, v38);
      SEL v41 = (_TtC18TrustedPeersHelper6Client *)v40;
      uint64_t v81 = sub_10017C4C4(v39, v40, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unable to fetch policy: %{public}s", v36, 0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      SEL v49 = v36;
      unint64_t v29 = v74;
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (a3)
    {
      uint64_t v50 = a3;
    }

    else
    {
      unint64_t v51 = sub_100043F74();
      uint64_t v50 = swift_allocError(&type metadata for ContainerError, v51, 0LL, 0LL);
      *(_OWORD *)uint64_t v52 = xmmword_1001E6800;
      *(_BYTE *)(v52 + 16) = 13;
    }

    swift_retain(a20);
    id v53 = v31;
    swift_retain(a23);
    swift_errorRetain(a3);
    sub_100166DF0( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  v50,  a19,  (uint64_t)v53,  a22);
    swift_release(a20);

    swift_release(a23);
    swift_errorRelease();
    swift_release(v27);
    swift_release(a19);
    return swift_release(v29);
  }

  return result;
}

void sub_100167770( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char *a6, int a7, void *a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, uint64_t a21, void *a22, void (*a23)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id), uint64_t a24)
{
  uint64_t v24 = a6;
  uint64_t v27 = a24;
  uint64_t v29 = a21;
  unint64_t v28 = a22;
  uint64_t v30 = a20;
  if (a2)
  {
    swift_retain_n(a21, 3LL);
    id v31 = a22;
    swift_retain_n(a24, 3LL);
    id v32 = v31;
    swift_retain(a20);
    sub_100167198( 0LL,  a2,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  v32,  a23,  a24);
    swift_release(a21);
    swift_release(a20);
  }

  else
  {
    if (a1)
    {
      swift_retain_n(a21, 3LL);
      id v34 = a22;
      swift_retain_n(a24, 3LL);
      swift_retain_n(a20, 3LL);
      id v35 = v34;
      BOOL v36 = v24;
      id v37 = a3;
      uint64_t v38 = sub_1000DC7D8(v37, a1);

      uint64_t v24 = v36;
      if (v38)
      {
        id v39 = v38;
        swift_retain(a21);
        id v40 = v35;
        swift_retain(a24);
        swift_retain(a20);
        sub_100167198( v38,  0LL,  a4,  a5,  v24,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  v40,  a23,  a24);
        swift_release_n(a20, 4LL);

        swift_release_n(a21, 2LL);
        swift_release(a24);
        unint64_t v28 = a22;
        goto LABEL_13;
      }
    }

    else
    {
      swift_retain_n(a21, 3LL);
      id v41 = a22;
      swift_retain_n(a24, 3LL);
      swift_retain_n(a20, 3LL);
      id v42 = v41;
    }

    id v68 = v24;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v43 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v43, (uint64_t)qword_1002567D0);
    uint64_t v44 = swift_bridgeObjectRetain_n(a1, 2LL);
    id v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.info.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      BOOL v47 = a3;
      BOOL v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t v73 = a1;
      v74[0] = v49;
      *(_DWORD *)BOOL v48 = 136446210;
      swift_bridgeObjectRetain(a1);
      uint64_t v50 = sub_100007578((uint64_t *)&unk_100256ED0);
      uint64_t v51 = String.init<A>(describing:)(&v73, v50);
      id v53 = (_TtC18TrustedPeersHelper6Client *)v52;
      uint64_t v73 = sub_10017C4C4(v51, v52, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      BOOL v54 = v53;
      a3 = v47;
      uint64_t v27 = a24;
      uint64_t v30 = a20;
      uint64_t v29 = a21;
      swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
      _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "fetchPolicyDocument: didn't return policy of version: %{public}s",  v48,  0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    id v62 = [a3 versionNumber];
    unint64_t v63 = sub_100043F74();
    uint64_t v64 = swift_allocError(&type metadata for ContainerError, v63, 0LL, 0LL);
    *(void *)uint64_t v65 = v62;
    *(void *)(v65 + 8) = 0LL;
    *(_BYTE *)(v65 + 16) = 1;
    swift_retain(v29);
    unint64_t v28 = a22;
    id v66 = a22;
    swift_retain(v27);
    swift_retain(v30);
    sub_100167198( 0LL,  v64,  a4,  a5,  v68,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  v30,  v29,  v66,  a23,  v27);
    swift_release(v29);

    swift_release(v27);
    swift_errorRelease();
    swift_release(v29);
    swift_release_n(v30, 4LL);
  }

uint64_t sub_100167D04( void *a1, char *a2, void *a3, uint64_t a4, void *a5, void *a6, int a7, void *a8, void *a9, _TtC18TrustedPeersHelper6Client *a10, void *a11, uint64_t a12, _TtC18TrustedPeersHelper6Client *a13, uint64_t a14, _TtC18TrustedPeersHelper6Client *a15, uint64_t a16, _TtC18TrustedPeersHelper6Client *a17, void *a18, void *a19, uint64_t a20, uint64_t a21, void *a22, void (*a23)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id), uint64_t a24)
{
  id v156 = a6;
  id v157 = a8;
  int v148 = a7;
  id v158 = a5;
  uint64_t v153 = a4;
  id v138 = a3;
  uint64_t v140 = a2;
  id v139 = a1;
  uint64_t v151 = a24;
  uint64_t v144 = a16;
  SEL v150 = a15;
  uint64_t v145 = a14;
  char v155 = a13;
  Swift::Int v146 = a11;
  uint64_t v143 = a10;
  id v147 = a9;
  uint64_t v159 = a20;
  id v154 = a19;
  unint64_t v149 = a17;
  id v137 = a18;
  uint64_t v152 = a21;
  id v141 = a22;
  PolicyDocumentsuint64_t Request = (char *)type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v24);
  unint64_t v133 = (_TtC18TrustedPeersHelper6Client *)((char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = (void *)swift_allocObject(&unk_1002391F8, 48LL, 7LL);
  _OWORD v26[2] = a21;
  v26[3] = a22;
  uint64_t v130 = a23;
  v26[4] = a23;
  v26[5] = a24;
  uint64_t v27 = (void *)swift_allocObject(&unk_100239220, 40LL, 7LL);
  v27[2] = a20;
  v27[3] = sub_100172F0C;
  v27[4] = v26;
  uint64_t v28 = swift_allocObject(&unk_100239248, 160LL, 7LL);
  *(void *)(v28 + 16) = sub_100172F4C;
  *(void *)(v28 + 24) = v27;
  uint64_t v29 = v153;
  id v30 = v158;
  *(void *)(v28 + 32) = v153;
  *(void *)(v28 + 40) = v30;
  *(void *)(v28 + 48) = v156;
  *(_DWORD *)(v28 + 56) = v148;
  *(void *)(v28 + 64) = v157;
  *(void *)(v28 + 72) = a9;
  *(void *)(v28 + 80) = a10;
  *(void *)(v28 + 88) = a11;
  uint64_t v131 = a12;
  id v31 = v155;
  *(void *)(v28 + 96) = a12;
  *(void *)(v28 + 104) = v31;
  id v32 = v149;
  uint64_t v33 = v150;
  *(void *)(v28 + 112) = v145;
  *(void *)(v28 + 120) = v33;
  *(void *)(v28 + 128) = v144;
  *(void *)(v28 + 136) = v32;
  id v34 = v137;
  id v35 = v154;
  *(void *)(v28 + 144) = v137;
  *(void *)(v28 + 152) = v35;
  BOOL v36 = (void *)swift_allocObject(&unk_100239270, 40LL, 7LL);
  v36[2] = sub_10017300C;
  v36[3] = v28;
  unint64_t v135 = v36;
  id v37 = v138;
  v36[4] = v138;
  uint64_t v38 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  char v134 = (void *)v38;
  id v39 = v139;
  *(void *)(v38 + 16) = v139;
  id v40 = (uint64_t *)(v38 + 16);
  uint64_t v142 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  swift_retain(v152);
  id v128 = v141;
  swift_retain(v151);
  swift_retain(v159);
  id v141 = v26;
  swift_retain(v26);
  BOOL v136 = v27;
  swift_retain(v27);
  uint64_t v41 = v29;
  id v42 = v40;
  swift_errorRetain(v41);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  id v137 = v34;
  id v129 = v154;
  swift_retain(v28);
  id v154 = v37;
  swift_bridgeObjectRetain(v39);
  id v139 = v158;
  id v156 = v156;
  id v138 = v157;
  id v127 = v147;
  swift_bridgeObjectRetain(v143);
  id v126 = v146;
  uint64_t v43 = v155;
  swift_bridgeObjectRetain(v155);
  unint64_t v44 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  id v45 = (void *)v142;
  *(void *)(v142 + 16) = v44;
  os_log_type_t v46 = v140;
  BOOL v47 = *(void **)&v140[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  BOOL v48 = (void *)swift_allocObject(&unk_100239298, 40LL, 7LL);
  v48[2] = v40;
  v48[3] = v46;
  v48[4] = v45 + 2;
  uint64_t v49 = swift_allocObject(&unk_1002392C0, 32LL, 7LL);
  *(void *)(v49 + 16) = sub_100176F48;
  *(void *)(v49 + 24) = v48;
  id v157 = v48;
  aBlock[4] = sub_100176BD4;
  uint64_t v161 = v49;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_1002392D8;
  uint64_t v50 = _Block_copy(aBlock);
  uint64_t v51 = v161;
  unint64_t v52 = v46;
  swift_retain(v49);
  swift_release(v51);
  [v47 performBlockAndWait:v50];
  _Block_release(v50);
  LOBYTE(v47) = swift_isEscapingClosureAtFileLocation(v49, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t result = swift_release(v49);
  if ((v47 & 1) == 0)
  {
    uint64_t v55 = *v42;
    if ((*v42 & 0xC000000000000001LL) != 0)
    {
      if (v55 < 0) {
        uint64_t v56 = *v42;
      }
      else {
        uint64_t v56 = v55 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v42);
      uint64_t v57 = __CocoaSet.count.getter(v56);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v55, v58, v59, v60, v61, v62, v63, v64);
      if (v57) {
        goto LABEL_7;
      }
    }

    else if (*(void *)(v55 + 16))
    {
LABEL_7:
      __chkstk_darwin(result, v54);
      v124[2] = v42;
      uint64_t v65 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
      id v66 = v133;
      static Message.with(_:)(sub_100176B2C, v124, PolicyDocumentsRequest, v65);
      uint64_t v67 = *(void *)&v52[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v68 = *(void *)&v52[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v52[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v67);
      id v69 = (void *)swift_allocObject(&unk_100239310, 56LL, 7LL);
      v69[2] = v52;
      v69[3] = sub_100176F64;
      uint64_t v70 = v135;
      unint64_t v71 = v52;
      unint64_t v72 = v134;
      v69[4] = v135;
      v69[5] = v72;
      v69[6] = v45;
      uint64_t v73 = *(void *)(v68 + 16);
      id v74 = *(void (**)(_TtC18TrustedPeersHelper6Client *, uint64_t (*)(), void *, uint64_t, uint64_t))(v73 + 80);
      id v75 = v71;
      swift_retain(v70);
      swift_retain(v72);
      swift_retain(v45);
      v74(v66, sub_100171830, v69, v67, v73);
      swift_release(v69);
      sub_1000415CC((uint64_t)v66, type metadata accessor for FetchPolicyDocumentsRequest);
      swift_release(v141);
      swift_release(v159);
      swift_release(v136);
      swift_release(v28);
      uint64_t v76 = v70;
      id v77 = v157;
LABEL_10:
      swift_release(v76);
      swift_release(v77);
      swift_release(v72);
      return swift_release(v45);
    }

    unint64_t v133 = (_TtC18TrustedPeersHelper6Client *)v45[2];
    swift_retain(v152);
    uint64_t v140 = (char *)v128;
    uint64_t v78 = v151;
    swift_retain(v151);
    swift_retain(v159);
    swift_retain(v141);
    uint64_t v76 = v136;
    swift_retain(v136);
    swift_errorRetain(v153);
    id v139 = v139;
    PolicyDocumentsuint64_t Request = (char *)v156;
    id v128 = v138;
    id v156 = v127;
    id v79 = v143;
    swift_bridgeObjectRetain(v143);
    id v138 = v126;
    swift_bridgeObjectRetain(v43);
    uint64_t v80 = v150;
    swift_bridgeObjectRetain(v150);
    uint64_t v81 = v149;
    swift_bridgeObjectRetain(v149);
    id v82 = v137;
    id v127 = v82;
    id v83 = v129;
    id v137 = v83;
    uint64_t v84 = swift_bridgeObjectRetain(v133);
    uint64_t v125 = v78;
    uint64_t v85 = v152;
    uint64_t v123 = v82;
    uint64_t v86 = PolicyDocumentsRequest;
    uint64_t v87 = v128;
    sub_100167770( v84,  0LL,  v154,  v153,  (uint64_t)v158,  PolicyDocumentsRequest,  v148,  v128,  v147,  (uint64_t)v79,  v146,  v131,  (uint64_t)v43,  v145,  (uint64_t)v80,  v144,  (uint64_t)v81,  v123,  v83,  v159,  v152,  v140,  v130,  v125);

    swift_bridgeObjectRelease(v79, v88, v89, v90, v91, v92, v93, v94);
    swift_bridgeObjectRelease(v43, v95, v96, v97, v98, v99, v100, v101);
    swift_bridgeObjectRelease(v80, v102, v103, v104, v105, v106, v107, v108);
    swift_bridgeObjectRelease(v81, v109, v110, v111, v112, v113, v114, v115);

    swift_release(v85);
    swift_release(v151);
    swift_errorRelease();
    swift_release(v159);
    unint64_t v72 = v141;
    swift_release(v28);
    swift_release(v135);
    swift_release(v157);
    swift_release(v134);
    swift_release(v142);
    swift_bridgeObjectRelease(v133, v116, v117, v118, v119, v120, v121, v122);
    id v77 = v76;
    id v45 = v72;
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

void sub_100168600( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *aBlock)
{
  uint64_t v21 = _Block_copy(aBlock);
  if (a12) {
    os_log_type_t v25 = static os_log_type_t.error.getter(v21, v22, v23, v24);
  }
  else {
    os_log_type_t v25 = static os_log_type_t.info.getter(v21);
  }
  os_log_type_t v26 = v25;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v27, (uint64_t)qword_1002567D0);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a12);
  swift_bridgeObjectRetain(a2);
  uint64_t v28 = swift_errorRetain(a12);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  if (os_log_type_enabled(v29, v26))
  {
    uint64_t v62 = a5;
    unint64_t v63 = a6;
    unint64_t v64 = a8;
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    unint64_t v70 = a2;
    v71[0] = v31;
    *(_DWORD *)uint64_t v30 = 136446466;
    uint64_t v69 = a1;
    swift_bridgeObjectRetain(a2);
    uint64_t v32 = sub_100007578((uint64_t *)&unk_100256C60);
    uint64_t v33 = String.init<A>(describing:)(&v69, v32);
    id v35 = (_TtC18TrustedPeersHelper6Client *)v34;
    uint64_t v69 = sub_10017C4C4(v33, v34, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
    *(_WORD *)(v30 + 12) = 2082;
    uint64_t v43 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a12)
    {
      uint64_t v69 = 0x203A726F727265LL;
      unint64_t v70 = 0xE700000000000000LL;
      uint64_t v68 = a12;
      swift_errorRetain(a12);
      swift_errorRetain(a12);
      uint64_t v44 = sub_100007578(&qword_100251D70);
      v45._countAndFlagsBits = String.init<A>(describing:)(&v68, v44);
      object = (_TtC18TrustedPeersHelper6Client *)v45._object;
      String.append(_:)(v45);
      swift_bridgeObjectRelease(object, v47, v48, v49, v50, v51, v52, v53);
      swift_errorRelease();
      uint64_t v54 = v69;
      uint64_t v43 = (_TtC18TrustedPeersHelper6Client *)v70;
    }

    else
    {
      uint64_t v54 = 0x73736563637573LL;
    }

    uint64_t v69 = sub_10017C4C4(v54, (unint64_t)v43, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease(v43, v55, v56, v57, v58, v59, v60, v61);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v26,  "prepare complete peerID: %{public}s %{public}s",  (uint8_t *)v30,  0x16u);
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    a8 = v64;
    a5 = v62;
    a6 = v63;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD0000000000000F2LL, 0x80000001001F9C70LL);
  _Block_copy(aBlock);
  sub_10017D014(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)a15, (uint64_t)aBlock);
  _Block_release(aBlock);

  swift_release(a14);
  _Block_release(aBlock);
}

uint64_t sub_100168998( char a1, uint64_t a2, void *a3, void *a4, int a5, void *a6, void *a7, _TtC18TrustedPeersHelper6Client *a8, void *a9, uint64_t a10, _TtC18TrustedPeersHelper6Client *a11, uint64_t a12, _TtC18TrustedPeersHelper6Client *a13, uint64_t a14, _TtC18TrustedPeersHelper6Client *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20, void *a21)
{
  os_log_type_t v26 = a20;
  uint64_t v27 = a18;
  uint64_t v28 = a19;
  uint64_t v29 = swift_allocObject(&unk_1002391D0, 24LL, 7LL);
  *(void *)(v29 + 16) = a21;
  uint64_t v161 = v29;
  if ((a1 & 1) != 0)
  {
    if (a3)
    {
      swift_retain_n(a19, 2LL);
      id v30 = a20;
      swift_retain_n(v29, 2LL);
      swift_retain_n(a18, 2LL);
      id v31 = v30;
      _Block_copy(a21);
      id v32 = a3;
    }

    else
    {
      swift_retain_n(a19, 2LL);
      id v61 = a20;
      swift_retain_n(v29, 2LL);
      swift_retain_n(a18, 2LL);
      id v62 = v61;
      _Block_copy(a21);
      if (qword_100250BA8 != -1) {
        swift_once(&qword_100250BA8, sub_10000FFC0);
      }
      id v32 = (id)qword_100258260;
    }

    id v154 = a3;
    uint64_t v63 = sub_100007578(&qword_1002515D8);
    uint64_t inited = swift_initStackObject(v63, v162);
    *(_OWORD *)(inited + 16) = xmmword_1001E67F0;
    *(void *)(inited + 32) = v32;
    v164[0] = inited;
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a15);
    id v150 = a16;
    id v148 = a17;
    id v65 = a3;
    id v66 = a4;
    id v67 = a6;
    id v68 = a7;
    swift_bridgeObjectRetain(a8);
    id v69 = a9;
    uint64_t v70 = swift_bridgeObjectRetain(a11);
    specialized Array._endMutation()(v70);
    unint64_t v71 = (_TtC18TrustedPeersHelper6Client *)v164[0];
    id v72 = v65;
    swift_errorRetain(a2);
    id v158 = v72;
    id v156 = (char *)v66;
    id v155 = v67;
    id v153 = v68;
    swift_bridgeObjectRetain(a8);
    id v152 = v69;
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a15);
    id v146 = v150;
    id v147 = v148;
    id v73 = v32;
    unint64_t v149 = (_TtC18TrustedPeersHelper6Client *)sub_100161474((uint64_t)v71);
    swift_bridgeObjectRelease(v71, v74, v75, v76, v77, v78, v79, v80);
    swift_retain(a19);
    id v151 = a20;
    swift_retain(v161);
    swift_retain(a18);
    id v81 = v73;
    sub_100167D04( v149,  v156,  v81,  a2,  v154,  v156,  a5,  v155,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  v146,  v147,  a18,  a19,  v151,  (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))sub_100172ED4,  v161);

    swift_bridgeObjectRelease(a8, v82, v83, v84, v85, v86, v87, v88);
    swift_bridgeObjectRelease(a11, v89, v90, v91, v92, v93, v94, v95);
    swift_bridgeObjectRelease(a13, v96, v97, v98, v99, v100, v101, v102);
    swift_bridgeObjectRelease(a15, v103, v104, v105, v106, v107, v108, v109);

    swift_release(a19);
    uint64_t v57 = v161;
    swift_release(v161);
    swift_errorRelease();
    swift_bridgeObjectRelease(v149, v110, v111, v112, v113, v114, v115, v116);

    swift_errorRelease();
    swift_release_n(a18, 2LL);

    swift_bridgeObjectRelease(a15, v117, v118, v119, v120, v121, v122, v123);
    swift_bridgeObjectRelease(a13, v124, v125, v126, v127, v128, v129, v130);
    swift_bridgeObjectRelease(a11, v131, v132, v133, v134, v135, v136, v137);

    swift_bridgeObjectRelease(a8, v138, v139, v140, v141, v142, v143, v144);
    uint64_t v27 = a18;
    uint64_t v28 = a19;
    os_log_type_t v26 = a20;
  }

  else
  {
    swift_retain_n(a19, 2LL);
    id v33 = a20;
    swift_retain_n(v29, 2LL);
    swift_retain_n(a18, 2LL);
    id v34 = v33;
    _Block_copy(a21);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v35, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v36 = swift_errorRetain(a2);
    id v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v41 = static os_log_type_t.error.getter(v37, v38, v39, v40);
    if (os_log_type_enabled(v37, v41))
    {
      BOOL v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v163 = a2;
      v164[0] = v43;
      *(_DWORD *)BOOL v42 = 136446210;
      swift_errorRetain(a2);
      uint64_t v44 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v45 = String.init<A>(describing:)(&v163, v44);
      SEL v47 = (_TtC18TrustedPeersHelper6Client *)v46;
      uint64_t v163 = sub_10017C4C4(v45, v46, v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v41, "Unable to save encryption key: %{public}s", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v55 = v43;
      os_log_type_t v26 = a20;
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v56 = a2;
    uint64_t v57 = v161;
    if (!a2)
    {
      unint64_t v58 = sub_100043F74();
      uint64_t v56 = swift_allocError(&type metadata for ContainerError, v58, 0LL, 0LL);
      *(_OWORD *)uint64_t v59 = xmmword_1001E6810;
      *(_BYTE *)(v59 + 16) = 13;
    }

    swift_retain(a19);
    id v60 = v34;
    swift_retain(v161);
    _Block_copy(a21);
    swift_errorRetain(a2);
    sub_100168600( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  v56,  a18,  a19,  v60,  a21);
    _Block_release(a21);
    swift_release(v161);
    swift_errorRelease();
    swift_release_n(a18, 2LL);
  }

  swift_release_n(v57, 3LL);

  swift_release_n(v28, 3LL);
  return swift_release(v27);
}

void sub_1001690F0( char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, int a8, void *a9, void *a10, _TtC18TrustedPeersHelper6Client *a11, void *a12, uint64_t a13, _TtC18TrustedPeersHelper6Client *a14, uint64_t a15, _TtC18TrustedPeersHelper6Client *a16, uint64_t a17, _TtC18TrustedPeersHelper6Client *a18, void *a19, void *a20, uint64_t a21, uint64_t a22, void *a23, void *a24)
{
  uint64_t v25 = a21;
  uint64_t v24 = a22;
  if ((a1 & 1) != 0)
  {
    *(void *)&__int128 v128 = 0x6974707972636E65LL;
    *((void *)&v128 + 1) = 0xEF2079656B2D6E6FLL;
    _Block_copy(a24);
    swift_retain(a22);
    id v28 = a23;
    _Block_copy(a24);
    swift_retain(a22);
    id v29 = v28;
    swift_retain(a21);
    _Block_copy(a24);
    swift_retain(a22);
    id v115 = v29;
    swift_retain(a21);
    v30._countAndFlagsBits = a4;
    v30._object = a5;
    String.append(_:)(v30);
    id v31 = (void *)objc_opt_self(&OBJC_CLASS____SFKeychainManager);
    swift_bridgeObjectRetain(a16);
    swift_bridgeObjectRetain(a18);
    id v125 = a20;
    id v124 = a19;
    id v126 = a9;
    id v117 = a6;
    id v116 = a7;
    id v119 = a10;
    swift_bridgeObjectRetain(a11);
    id v118 = a12;
    swift_bridgeObjectRetain(a14);
    id v32 = [v31 defaultManager];
    id v33 = [objc_allocWithZone(_SFIdentity) initWithKeyPair:a3];
    SFAccessibilityMakeWithMode(&v128, 1LL);
    __int128 v122 = v128;
    uint64_t v34 = v129;
    id v35 = objc_allocWithZone(&OBJC_CLASS____SFAccessPolicy);
    __int128 v128 = v122;
    uint64_t v129 = v34;
    id v36 = [v35 initWithAccessibility:&v128 sharingPolicy:0];
    NSString v37 = String._bridgeToObjectiveC()();
    [v36 setAccessGroup:v37];

    NSString v38 = String._bridgeToObjectiveC()();
    *(void *)&__int128 v128 = 0LL;
    LOBYTE(v37) = [v32 setIdentity:v33 forIdentifier:v38 accessPolicy:v36 error:&v128];

    uint64_t v39 = (void *)v128;
    if ((v37 & 1) != 0)
    {
      _Block_copy(a24);
      uint64_t v40 = a22;
      swift_retain(a22);
      id v41 = v115;
      uint64_t v42 = a21;
      swift_retain(a21);
      id v43 = v39;
      uint64_t v44 = a16;
      uint64_t v45 = a14;
      sub_100168998( 1,  0LL,  a6,  v116,  a8,  v126,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  v124,  v125,  a21,  a22,  v41,  a24);
      _Block_release(a24);
    }

    else
    {
      id v71 = (id)v128;
      uint64_t v72 = _convertNSErrorToError(_:)(v39);

      swift_willThrow(v73);
      _Block_copy(a24);
      uint64_t v40 = a22;
      swift_retain(a22);
      id v74 = v115;
      uint64_t v42 = a21;
      swift_retain(a21);
      swift_errorRetain(v72);
      id v114 = v74;
      uint64_t v44 = a16;
      uint64_t v45 = a14;
      sub_100168998( 0,  v72,  a6,  v116,  a8,  v126,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  v124,  v125,  a21,  a22,  v114,  a24);
      _Block_release(a24);

      swift_errorRelease();
      swift_errorRelease();
      id v33 = v116;
      id v36 = v117;
    }

    uint64_t v25 = v42;
    uint64_t v24 = v40;

    swift_release_n(v25, 2LL);
    swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)0xEF2079656B2D6E6FLL,  v75,  v76,  v77,  v78,  v79,  v80,  v81);

    swift_bridgeObjectRelease(a18, v82, v83, v84, v85, v86, v87, v88);
    swift_bridgeObjectRelease(v44, v89, v90, v91, v92, v93, v94, v95);
    swift_bridgeObjectRelease(v45, v96, v97, v98, v99, v100, v101, v102);

    swift_bridgeObjectRelease(a11, v103, v104, v105, v106, v107, v108, v109);
  }

  else
  {
    _Block_copy(a24);
    swift_retain(a22);
    id v47 = a23;
    _Block_copy(a24);
    swift_retain(a22);
    id v48 = v47;
    swift_retain(a21);
    _Block_copy(a24);
    uint64_t v49 = qword_100250EB8;
    swift_retain(a22);
    id v50 = v48;
    swift_retain(a21);
    if (v49 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v51 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v51, (uint64_t)qword_1002567D0);
    swift_errorRetain(a2);
    uint64_t v52 = swift_errorRetain(a2);
    BOOL v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v57 = static os_log_type_t.error.getter(v53, v54, v55, v56);
    if (os_log_type_enabled(v53, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v128 = v59;
      *(_DWORD *)unint64_t v58 = 136446210;
      uint64_t v130 = a2;
      swift_errorRetain(a2);
      uint64_t v60 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v61 = String.init<A>(describing:)(&v130, v60);
      uint64_t v63 = (_TtC18TrustedPeersHelper6Client *)v62;
      uint64_t v130 = sub_10017C4C4(v61, v62, (uint64_t *)&v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v57, "Unable to save signing key: %{public}s", v58, 0xCu);
      swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v110 = a2;
    if (!a2)
    {
      unint64_t v111 = sub_100043F74();
      uint64_t v110 = swift_allocError(&type metadata for ContainerError, v111, 0LL, 0LL);
      *(_OWORD *)uint64_t v112 = xmmword_1001E6810;
      *(_BYTE *)(v112 + 16) = 13;
    }

    _Block_copy(a24);
    swift_retain(a22);
    id v113 = v50;
    swift_errorRetain(a2);
    sub_100168600( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  v110,  a21,  a22,  v113,  a24);
    _Block_release(a24);
    swift_errorRelease();
    swift_release_n(a21, 2LL);
  }

  swift_release_n(v24, 4LL);
  swift_release(v25);
  _Block_release(a24);
  _Block_release(a24);
  _Block_release(a24);
}

void sub_1001698D8( _TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, _TtC18TrustedPeersHelper6Client *a3, _TtC18TrustedPeersHelper6Client *a4, _TtC18TrustedPeersHelper6Client *a5, _TtC18TrustedPeersHelper6Client *a6, void *a7, _TtC18TrustedPeersHelper6Client *a8, uint64_t a9, _TtC18TrustedPeersHelper6Client *a10, uint64_t a11, _TtC18TrustedPeersHelper6Client *a12, uint64_t a13, _TtC18TrustedPeersHelper6Client *a14, void *a15, _TtC18TrustedPeersHelper6Client *a16, int a17, void *a18, void *a19, uint64_t a20, unint64_t a21, uint64_t a22, unint64_t a23, void *a24, uint64_t a25, void *a26, void *a27)
{
  BOOL v261 = a2;
  uint64_t v262 = a8;
  os_log_type_t v259 = a7;
  id v260 = a4;
  unint64_t v255 = a5;
  unint64_t v256 = a6;
  uint64_t v257 = a3;
  int64_t v258 = a1;
  uint64_t v27 = (void *)type metadata accessor for Date(0LL);
  uint64_t v28 = *(v27 - 1);
  __chkstk_darwin(v27, v29);
  id v31 = (_TtC18TrustedPeersHelper6Client *)((char *)&v229 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  _Block_copy(a27);
  uint64_t v32 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v32, 41LL, 7LL);
  swift_retain(a25);
  id v33 = a26;
  _Block_copy(a27);
  swift_retain(a25);
  id v34 = v33;
  _Block_copy(a27);
  swift_retain(a25);
  id v35 = v34;
  _Block_copy(a27);
  swift_retain(a25);
  id v36 = v35;
  _Block_copy(a27);
  uint64_t v263 = a25;
  swift_retain(a25);
  id v37 = v36;
  id v38 = a24;
  uint64_t v39 = sub_100159634(v38, 0xD0000000000000F2LL, 0x80000001001F9C70LL);

  uint64_t v264 = v39;
  swift_retain_n(v39, 4LL);
  id v40 = sub_100166B10(a20, a21);
  id v254 = v37;
  id v41 = v40;
  id v42 = sub_100166B10(a22, a23);
  id v251 = (id)sub_100007620(0LL, &qword_100256EC8, &OBJC_CLASS___TPPeerPermanentInfo_ptr);
  id v43 = v42;
  id v252 = (_TtC18TrustedPeersHelper6Client *)v41;
  id v253 = v43;
  swift_bridgeObjectRetain(v261);
  uint64_t v44 = swift_bridgeObjectRetain(v262);
  uint64_t v45 = Date.init()(v44);
  double v46 = Date.timeIntervalSince1970.getter(v45);
  (*(void (**)(_TtC18TrustedPeersHelper6Client *, void *))(v28 + 8))(v31, v27);
  double v47 = v46 * 1000.0;
  if ((~COERCE__INT64(v46 * 1000.0) & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  id v31 = v260;
  if (v47 <= -1.0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    swift_once(&qword_100250EB8, sub_1000DD078);
    uint64_t v63 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v63, (uint64_t)qword_1002567D0);
    swift_errorRetain(0LL);
    uint64_t v64 = swift_errorRetain(0LL);
    id v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v69 = static os_log_type_t.error.getter(v65, v66, v67, v68);
    if (os_log_type_enabled(v65, v69))
    {
      uint64_t v257 = v31;
      BOOL v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v71 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v267 = v71;
      *(_DWORD *)BOOL v70 = 136446210;
      uint64_t v265 = 0LL;
      swift_errorRetain(0LL);
      uint64_t v72 = sub_100007578(&qword_100251D70);
      uint64_t v73 = String.init<A>(describing:)(&v265, v72);
      SEL v75 = (_TtC18TrustedPeersHelper6Client *)v74;
      uint64_t v265 = sub_10017C4C4(v73, v74, (uint64_t *)&v267);
      id v76 = v257;
      uint64_t v27 = v259;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, v266, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease(v75, v77, v78, v79, v80, v81, v82, v83);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v69, "bottle creation failed: %{public}s", v70, 0xCu);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      int64_t v84 = v70;
      id v31 = v76;
      swift_slowDealloc(v84, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v86 = v263;
    uint64_t v85 = v264;
    _Block_copy(a27);
    swift_retain(v86);
    id v87 = v254;
    id v88 = v254;
    swift_errorRetain(0LL);
    sub_100168600( 0LL,  0LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL,  0LL,  0LL,  v85,  v86,  v88,  a27);
    _Block_release(a27);

    swift_errorRelease();
    swift_release_n(v85, 4LL);
    swift_errorRelease();

    swift_release(v85);
    swift_release(v86);

    goto LABEL_5;
  }

  id v48 = v252;
  if (v47 >= 1.84467441e19) {
    goto LABEL_19;
  }
  uint64_t v49 = v253;
  id v50 = sub_100166CB4( (uint64_t)v258,  (uint64_t)v261,  (uint64_t)v259,  (uint64_t)v262,  1LL,  (uint64_t)v252,  (uint64_t)v253,  (unint64_t)v47,  1LL);

  os_log_type_t v259 = v50;
  id v51 = [v259 peerID];
  uint64_t v52 = (_TtC18TrustedPeersHelper6Client *)static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  BOOL v53 = v48;
  uint64_t v55 = v54;

  id v56 = objc_allocWithZone((Class)type metadata accessor for BottledPeer());
  os_log_type_t v57 = v53;
  unint64_t v58 = v49;
  swift_bridgeObjectRetain(v55);
  uint64_t v59 = v256;
  swift_bridgeObjectRetain(v256);
  swift_bridgeObjectRetain(v31);
  int64_t v258 = v52;
  BOOL v261 = v55;
  uint64_t v262 = v57;
  id v260 = (_TtC18TrustedPeersHelper6Client *)sub_1001B7DB8( (uint64_t)v52,  v55,  (uint64_t)v255,  v59,  v57,  v58,  (uint64_t)v257,  v31);
  uint64_t v60 = *(void *)&v260->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_secret];
  unint64_t v61 = *(void *)&v260->_TtCs12_SwiftObject_opaque[OBJC_IVAR____TtC18TrustedPeersHelper11BottledPeer_secret + 8];
  unint64_t v62 = v260;
  sub_1000084E8(v60, v61);
  sub_1000DEAA8(v60, v61, (uint64_t)v258, (uint64_t)v261);
  SEL v249 = v62;
  uint64_t v257 = v58;
  id v253 = a18;
  int v244 = a17;
  uint64_t v238 = a13;
  uint64_t v239 = a11;
  id v260 = a10;
  uint64_t v240 = a9;
  sub_10000852C(v60, v61);
  strcpy((char *)&v267, "signing-key ");
  BYTE13(v267) = 0;
  HIWORD(v267) = -5120;
  v89._countAndFlagsBits = (uint64_t)v258;
  v89._object = v261;
  String.append(_:)(v89);
  id v90 = (_TtC18TrustedPeersHelper6Client *)*((void *)&v267 + 1);
  unint64_t v247 = (_TtC18TrustedPeersHelper6Client *)v267;
  uint64_t v91 = objc_opt_self(&OBJC_CLASS____SFKeychainManager);
  unint64_t v256 = a12;
  id v92 = (void *)v91;
  swift_bridgeObjectRetain(a12);
  unint64_t v255 = a14;
  swift_bridgeObjectRetain(a14);
  id v93 = v38;
  BOOL v94 = v262;
  SEL v242 = a15;
  id v251 = a15;
  id v243 = a19;
  id v95 = a19;
  uint64_t v262 = a16;
  swift_bridgeObjectRetain(a16);
  id v250 = v253;
  swift_bridgeObjectRetain(v260);
  *(void *)&__int128 v237 = v92;
  id v96 = [v92 defaultManager];
  id v97 = objc_allocWithZone(&OBJC_CLASS____SFIdentity);
  id v252 = v94;
  id v98 = [v97 initWithKeyPair:v94];
  SFAccessibilityMakeWithMode(&v267, 1LL);
  __int128 v246 = v267;
  uint64_t v99 = v268;
  id v100 = objc_allocWithZone(&OBJC_CLASS____SFAccessPolicy);
  BOOL v101 = v261;
  __int128 v267 = v246;
  uint64_t v268 = v99;
  id v102 = [v100 initWithAccessibility:&v267 sharingPolicy:0];
  unint64_t v236 = 0x80000001001F9B40LL;
  NSString v103 = String._bridgeToObjectiveC()();
  [v102 setAccessGroup:v103];

  unint64_t v247 = v90;
  NSString v104 = String._bridgeToObjectiveC()();
  *(void *)&__int128 v267 = 0LL;
  *(void *)&__int128 v246 = v96;
  id v241 = v98;
  LOBYTE(v96) = [v96 setIdentity:v98 forIdentifier:v104 accessPolicy:v102 error:&v267];

  int64_t v105 = (void *)v267;
  uint64_t v245 = v93;
  id v248 = v95;
  if ((v96 & 1) != 0)
  {
    id v232 = v102;
    *(void *)&__int128 v267 = 0x6974707972636E65LL;
    *((void *)&v267 + 1) = 0xEF2079656B2D6E6FLL;
    v106._countAndFlagsBits = (uint64_t)v258;
    v106._object = v101;
    String.append(_:)(v106);
    id v107 = (_TtC18TrustedPeersHelper6Client *)*((void *)&v267 + 1);
    id v231 = v93;
    BOOL v108 = v252;
    int64_t v258 = v259;
    uint64_t v235 = v249;
    id v230 = v251;
    id v234 = v95;
    swift_bridgeObjectRetain(v262);
    id v233 = v250;
    swift_bridgeObjectRetain(v260);
    swift_bridgeObjectRetain(v256);
    swift_bridgeObjectRetain(v255);
    id v109 = v105;
    id v110 = [(id)v237 defaultManager];
    id v111 = objc_allocWithZone(&OBJC_CLASS____SFIdentity);
    id v112 = [v111 initWithKeyPair:v257];
    SFAccessibilityMakeWithMode(&v267, 1LL);
    __int128 v237 = v267;
    uint64_t v113 = v268;
    id v114 = objc_allocWithZone(&OBJC_CLASS____SFAccessPolicy);
    __int128 v267 = v237;
    uint64_t v268 = v113;
    id v115 = [v114 initWithAccessibility:&v267 sharingPolicy:0];
    NSString v116 = String._bridgeToObjectiveC()();
    [v115 setAccessGroup:v116];

    NSString v117 = String._bridgeToObjectiveC()();
    *(void *)&__int128 v267 = 0LL;
    unsigned __int8 v118 = [v110 setIdentity:v112 forIdentifier:v117 accessPolicy:v115 error:&v267];

    id v119 = (void *)v267;
    if ((v118 & 1) != 0)
    {
      _Block_copy(a27);
      uint64_t v86 = v263;
      swift_retain(v263);
      id v120 = v254;
      uint64_t v121 = v264;
      swift_retain(v264);
      id v122 = v119;
      uint64_t v225 = v121;
      BOOL v123 = v108;
      id v124 = v231;
      sub_100168998( 1,  0LL,  v242,  v231,  v244,  v258,  v243,  v262,  v253,  v240,  v260,  v239,  v256,  v238,  v255,  v108,  v235,  v225,  v86,  v120,  a27);
      _Block_release(a27);
    }

    else
    {
      SEL v138 = v107;
      id v139 = (id)v267;
      uint64_t v140 = _convertNSErrorToError(_:)(v119);

      id v107 = v138;
      swift_willThrow(v141);
      _Block_copy(a27);
      uint64_t v86 = v263;
      swift_retain(v263);
      id v142 = v254;
      uint64_t v143 = v264;
      swift_retain(v264);
      swift_errorRetain(v140);
      uint64_t v227 = v142;
      uint64_t v226 = v143;
      BOOL v123 = v108;
      id v144 = v231;
      sub_100168998( 0,  v140,  v242,  v231,  v244,  v258,  v243,  v262,  v253,  v240,  v260,  v239,  v256,  v238,  v255,  v108,  v235,  v226,  v86,  v227,  a27);
      _Block_release(a27);

      swift_errorRelease();
      swift_errorRelease();
      id v112 = v144;
      id v115 = v230;
    }

    uint64_t v145 = (void *)v246;
    id v146 = v241;
    id v147 = v232;

    int64_t v133 = v257;
    swift_bridgeObjectRelease(v107, v148, v149, v150, v151, v152, v153, v154);

    swift_bridgeObjectRelease(v255, v155, v156, v157, v158, v159, v160, v161);
    swift_bridgeObjectRelease(v256, v162, v163, v164, v165, v166, v167, v168);
    swift_bridgeObjectRelease(v260, v169, v170, v171, v172, v173, v174, v175);

    swift_bridgeObjectRelease(v262, v176, v177, v178, v179, v180, v181, v182);
    id v87 = v254;
    id v132 = v259;
    BOOL v137 = v261;
    uint64_t v131 = v249;
    id v135 = v245;
    BOOL v136 = v252;
    uint64_t v130 = v264;
  }

  else
  {
    id v125 = (id)v267;
    uint64_t v126 = _convertNSErrorToError(_:)(v105);

    swift_willThrow(v127);
    _Block_copy(a27);
    uint64_t v86 = v263;
    swift_retain(v263);
    id v87 = v254;
    id v128 = v254;
    uint64_t v129 = v101;
    uint64_t v130 = v264;
    swift_retain(v264);
    swift_errorRetain(v126);
    uint64_t v228 = v128;
    uint64_t v131 = v249;
    id v132 = v259;
    int64_t v133 = v257;
    id v134 = v129;
    id v135 = v245;
    sub_1001690F0( 0,  v126,  (uint64_t)v257,  (uint64_t)v258,  v134,  v242,  v245,  v244,  v259,  v243,  v262,  v253,  v240,  v260,  v239,  v256,  v238,  v255,  v252,  v249,  v130,  v86,  v228,  a27);
    _Block_release(a27);

    BOOL v136 = v252;
    swift_errorRelease();
    swift_errorRelease();
    int64_t v258 = v133;
    BOOL v137 = v261;
  }

  swift_release(v86);
  swift_release_n(v130, 5LL);
  swift_bridgeObjectRelease(v247, v183, v184, v185, v186, v187, v188, v189);

  swift_bridgeObjectRelease(v255, v190, v191, v192, v193, v194, v195, v196);
  swift_bridgeObjectRelease(v256, v197, v198, v199, v200, v201, v202, v203);
  swift_bridgeObjectRelease(v260, v204, v205, v206, v207, v208, v209, v210);

  swift_bridgeObjectRelease(v262, v211, v212, v213, v214, v215, v216, v217);
  swift_bridgeObjectRelease(v137, v218, v219, v220, v221, v222, v223, v224);
LABEL_5:

  swift_release_n(v86, 5LL);
  _Block_release(a27);
  _Block_release(a27);
  _Block_release(a27);
  _Block_release(a27);
  _Block_release(a27);
}

void sub_10016A974(uint64_t a1, char *a2, void (*a3)(void), uint64_t a4, void *a5)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)swift_allocObject(&unk_100239068, 40LL, 7LL);
  os_log_type_t v57 = a3;
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  uint64_t v14 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  uint64_t v60 = v14;
  *(void *)(v14 + 16) = a1;
  NSString v15 = (uint64_t *)(v14 + 16);
  uint64_t v16 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  swift_retain(a4);
  id v56 = a5;
  swift_bridgeObjectRetain(a1);
  unint64_t v17 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v59 = v16;
  *(void *)(v16 + 16) = v17;
  os_log_type_t v18 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  os_log_type_t v19 = (void *)swift_allocObject(&unk_100239090, 40LL, 7LL);
  v19[2] = v15;
  v19[3] = a2;
  v19[4] = v16 + 16;
  uint64_t v20 = swift_allocObject(&unk_1002390B8, 32LL, 7LL);
  *(void *)(v20 + 16) = sub_100176F48;
  *(void *)(v20 + 24) = v19;
  aBlock[4] = sub_100176BD4;
  uint64_t v62 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_1002390D0;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = v62;
  uint64_t v23 = a2;
  swift_retain(v20);
  swift_release(v22);
  [v18 performBlockAndWait:v21];
  _Block_release(v21);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v20, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t v24 = swift_release(v20);
  if ((v22 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v26 = *v15;
    if ((*v15 & 0xC000000000000001LL) != 0)
    {
      if (v26 < 0) {
        uint64_t v27 = *v15;
      }
      else {
        uint64_t v27 = v26 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v15);
      uint64_t v28 = __CocoaSet.count.getter(v27);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v26, v29, v30, v31, v32, v33, v34, v35);
      if (v28) {
        goto LABEL_7;
      }
    }

    else if (*(void *)(v26 + 16))
    {
LABEL_7:
      __chkstk_darwin(v24, v25);
      *(&v56 - 2) = v15;
      uint64_t v36 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
      static Message.with(_:)(sub_100176B2C, &v56 - 4, PolicyDocumentsRequest, v36);
      uint64_t v38 = *(void *)&v23[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v37 = *(void *)&v23[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v23[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v38);
      uint64_t v39 = (void *)swift_allocObject(&unk_100239108, 56LL, 7LL);
      _OWORD v39[2] = v23;
      v39[3] = sub_100172D5C;
      uint64_t v40 = v60;
      v39[4] = v13;
      v39[5] = v40;
      id v41 = v23;
      uint64_t v42 = v59;
      v39[6] = v59;
      uint64_t v43 = *(void *)(v37 + 16);
      uint64_t v44 = *(void (**)(char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v43 + 80);
      uint64_t v45 = v41;
      swift_retain(v13);
      swift_retain(v40);
      swift_retain(v42);
      v44(v12, sub_100171830, v39, v38, v43);
      swift_release(v39);
      sub_1000415CC((uint64_t)v12, type metadata accessor for FetchPolicyDocumentsRequest);
      swift_release(v13);
      swift_release(v19);
      swift_release(v40);
      swift_release(v42);
      return;
    }

    uint64_t v46 = v59;
    double v47 = *(_TtC18TrustedPeersHelper6Client **)(v59 + 16);
    uint64_t v48 = swift_bridgeObjectRetain(v47);
    sub_10011FE14(v48, 0LL, v57, a4, v56);
    swift_release(v13);
    swift_release(v19);
    swift_release(v60);
    swift_release(v46);
    swift_bridgeObjectRelease(v47, v49, v50, v51, v52, v53, v54, v55);
  }

id sub_10016AD4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, char a20)
{
  if (a4)
  {
    v34.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    v34.super.Class isa = 0LL;
  }

  if (a10)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a10);
    unint64_t v22 = a17;
    if (a12)
    {
LABEL_6:
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a12);
      goto LABEL_9;
    }
  }

  else
  {
    NSString v21 = 0LL;
    unint64_t v22 = a17;
    if (a12) {
      goto LABEL_6;
    }
  }

  NSString v23 = 0LL;
LABEL_9:
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a14);
  if (v22 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10003C1D0(a16, v22);
  }

  if (a19 >> 60 == 15)
  {
    Class v26 = 0LL;
  }

  else
  {
    Class v26 = Data._bridgeToObjectiveC()().super.isa;
    sub_10003C1D0(a18, a19);
  }

  id v43 = 0LL;
  LOBYTE(v33) = a20 & 1;
  id v27 = [v40 initWithClock:a1 frozenPolicyVersion:a2 flexiblePolicyVersion:a3 policySecrets:v34.super.isa syncUserControllableViews:a5 secureElementI dentity:a6 walrusSetting:a7 webAccess:a8 deviceName:v21 serialNumber:v23 osVersion:v24 signingKeyPair:a15 recoverySigningPubKey:isa recover yEncryptionPubKey:v26 isInheritedAccount:v33 error:&v43];

  id v28 = v43;
  if (v27)
  {
    id v29 = v43;
  }

  else
  {
    id v30 = v43;
    _convertNSErrorToError(_:)(v28);

    swift_willThrow(v31);
  }

  return v27;
}

void sub_10016AF9C( _TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, char *a4, void (*a5)(void, void, void *, void, uint64_t), uint64_t a6)
{
  uint64_t v12 = swift_allocObject(&unk_100238ED8, 32LL, 7LL);
  *(void *)(v12 + 16) = a5;
  *(void *)(v12 + 24) = a6;
  uint64_t v13 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  uint64_t v14 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO];
  swift_retain(a6);
  id v15 = [v14 egoPeerID];
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v16 = v15;
  BOOL v181 = a1;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  os_log_type_t v19 = v18;

  id v20 = [*(id *)&a4[v13] egoPeerPermanentInfo];
  if (!v20)
  {
LABEL_13:
    swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
LABEL_14:
    unint64_t v110 = sub_100043F74();
    uint64_t v111 = swift_allocError(&type metadata for ContainerError, v110, 0LL, 0LL);
    *(_OWORD *)uint64_t v112 = xmmword_1001DE890;
    *(_BYTE *)(v112 + 16) = 13;
    a5(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v111);
    swift_errorRelease();
    swift_release(v12);
    return;
  }

  id v28 = v20;
  int64_t v178 = a2;
  id v179 = (void *)v17;
  uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  unint64_t v31 = v30;

  id v32 = [*(id *)&a4[v13] egoPeerPermanentInfoSig];
  if (!v32)
  {
LABEL_12:
    sub_10000852C(v29, v31);
    goto LABEL_13;
  }

  uint64_t v33 = v32;
  uint64_t v174 = a3;
  uint64_t v180 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
  unint64_t v35 = v34;

  id v36 = [*(id *)&a4[v13] egoPeerStableInfo];
  if (!v36)
  {
LABEL_11:
    sub_10000852C(v180, v35);
    goto LABEL_12;
  }

  uint64_t v37 = v36;
  uint64_t v176 = v12;
  id v177 = v19;
  uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
  unint64_t v40 = v39;

  id v41 = [*(id *)&a4[v13] egoPeerStableInfoSig];
  if (!v41)
  {
    sub_10000852C(v38, v40);
    uint64_t v12 = v176;
    os_log_type_t v19 = v177;
    goto LABEL_11;
  }

  uint64_t v42 = v41;
  id v165 = a5;
  uint64_t v170 = v38;
  unint64_t v175 = v40;
  uint64_t v172 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
  unint64_t v173 = v43;

  id v171 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  swift_bridgeObjectRetain(v177);
  sub_1000084E8(v29, v31);
  sub_1000084E8(v180, v35);
  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v177, v45, v46, v47, v48, v49, v50, v51);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v53 = Data._bridgeToObjectiveC()().super.isa;
  id v54 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v44 data:isa sig:v53 keyFactory:v171];
  unint64_t v169 = v35;
  sub_10000852C(v180, v35);
  unint64_t v168 = v31;
  sub_10000852C(v29, v31);

  if (v54)
  {
    id v163 = v54;
    uint64_t v164 = v29;
    id v62 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
    sub_1000084E8(v170, v40);
    sub_1000084E8(v172, v173);
    Class v63 = Data._bridgeToObjectiveC()().super.isa;
    Class v64 = Data._bridgeToObjectiveC()().super.isa;
    id v65 = [v62 initWithData:v63 sig:v64];
    sub_10000852C(v172, v173);
    sub_10000852C(v170, v40);

    uint64_t v73 = v176;
    unint64_t v74 = v165;
    if (v65)
    {
      SEL v162 = v65;
      id v75 = [v163 machineID];
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
      id v78 = v77;

      LOBYTE(v75) = sub_1001A372C(v76, (unint64_t)v78);
      swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
      if ((v75 & 1) != 0)
      {
        strcpy((char *)v183, "signing-key ");
        BYTE5(v183[1]) = 0;
        HIWORD(v183[1]) = -5120;
        swift_bridgeObjectRetain(v177);
        sub_1000084E8(v29, v168);
        sub_1000084E8(v180, v35);
        sub_1000084E8(v170, v40);
        sub_1000084E8(v172, v173);
        swift_bridgeObjectRetain(v174);
        swift_retain(v176);
        id v93 = a4;
        swift_bridgeObjectRetain(v181);
        id v166 = v163;
        swift_bridgeObjectRetain(v178);
        id v160 = v65;
        v94._countAndFlagsBits = (uint64_t)v179;
        v94._object = v177;
        String.append(_:)(v94);
        swift_bridgeObjectRetain(v177);
        sub_1000084E8(v29, v168);
        sub_1000084E8(v180, v35);
        sub_1000084E8(v170, v175);
        sub_1000084E8(v172, v173);
        swift_retain(v176);
        id v159 = v93;
        swift_bridgeObjectRetain(v181);
        id v167 = v166;
        swift_bridgeObjectRetain(v178);
        id v161 = v160;
        id v95 = (_TtC18TrustedPeersHelper6Client *)swift_bridgeObjectRetain(v174);
        sub_10015E294( v183[0],  v183[1],  (uint64_t)v179,  v177,  (uint64_t)sub_10014E170,  v176,  v159,  v181,  v167,  v178,  v179,  v177,  v161,  v95,  v29,  v168,  v180,  v35,  v170,  v175,  v172,  v173);
        sub_10000852C(v172, v173);
        sub_10000852C(v170, v175);
        sub_10000852C(v180, v35);
        sub_10000852C(v29, v168);
        swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v183[1], v96, v97, v98, v99, v100, v101, v102);
        swift_bridgeObjectRelease_n(v177, 2LL);
        swift_release_n(v176, 2LL);

        swift_bridgeObjectRelease_n(v181, 2LL);
        swift_bridgeObjectRelease_n(v178, 2LL);

        swift_bridgeObjectRelease_n(v174, 2LL);
        sub_10000852C(v29, v168);
        sub_10000852C(v180, v35);
        sub_10000852C(v170, v175);
        sub_10000852C(v172, v173);

        sub_10000852C(v172, v173);
        sub_10000852C(v170, v175);
        sub_10000852C(v180, v35);
        sub_10000852C(v29, v168);
        swift_release(v176);
        swift_bridgeObjectRelease(v177, v103, v104, v105, v106, v107, v108, v109);
      }

      else
      {
        swift_bridgeObjectRelease(v177, v86, v87, v88, v89, v90, v91, v92);
        if (qword_100250EB8 != -1) {
          swift_once(&qword_100250EB8, sub_1000DD078);
        }
        uint64_t v125 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v125, (uint64_t)qword_1002567D0);
        id v126 = v163;
        uint64_t v127 = (os_log_s *)Logger.logObject.getter(v126);
        os_log_type_t v128 = static os_log_type_t.info.getter(v127);
        BOOL v182 = v126;
        if (os_log_type_enabled(v127, v128))
        {
          uint64_t v129 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v183[0] = swift_slowAlloc(32LL, -1LL);
          uint64_t v130 = v183[0];
          *(_DWORD *)uint64_t v129 = 136446210;
          uint64_t v131 = v126;
          id v132 = [v126 machineID];
          uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
          id v135 = v134;

          uint64_t v184 = sub_10017C4C4(v133, (unint64_t)v135, v183);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, &v185, v129 + 4, v129 + 12);

          BOOL v136 = &selRef_setAllSelves_;
          swift_bridgeObjectRelease(v135, v137, v138, v139, v140, v141, v142, v143);
          _os_log_impl( (void *)&_mh_execute_header,  v127,  v128,  "establish: self machineID %{public}s not on list",  v129,  0xCu);
          swift_arrayDestroy(v130, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v144 = v130;
          unint64_t v74 = v165;
          swift_slowDealloc(v144, -1LL, -1LL);
          swift_slowDealloc(v129, -1LL, -1LL);

          uint64_t v145 = v180;
          id v146 = v171;
        }

        else
        {

          uint64_t v145 = v180;
          id v146 = v171;
          BOOL v136 = &selRef_setAllSelves_;
        }

        id v147 = objc_allocWithZone(&OBJC_CLASS___SecTapToRadar);
        NSString v148 = String._bridgeToObjectiveC()();
        NSString v149 = String._bridgeToObjectiveC()();
        NSString v150 = String._bridgeToObjectiveC()();
        id v151 = [v147 initTapToRadar:v148 description:v149 radar:v150];

        [v151 trigger];
        id v152 = [v182 v136[155]];
        uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
        uint64_t v155 = v154;

        unint64_t v156 = sub_100043F74();
        uint64_t v157 = swift_allocError(&type metadata for ContainerError, v156, 0LL, 0LL);
        *(void *)uint64_t v158 = v153;
        *(void *)(v158 + 8) = v155;
        *(_BYTE *)(v158 + 16) = 2;
        v74(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v157);
        swift_errorRelease();

        sub_10000852C(v172, v173);
        sub_10000852C(v170, v175);
        sub_10000852C(v145, v169);
        sub_10000852C(v164, v168);
        swift_release(v176);
      }
    }

    else
    {
      swift_bridgeObjectRelease(v177, v66, v67, v68, v69, v70, v71, v72);
      if (qword_100250EB8 != -1) {
        swift_once(&qword_100250EB8, sub_1000DD078);
      }
      uint64_t v116 = type metadata accessor for Logger(0LL);
      uint64_t v117 = sub_100006BAC(v116, (uint64_t)qword_1002567D0);
      unsigned __int8 v118 = (os_log_s *)Logger.logObject.getter(v117);
      os_log_type_t v119 = static os_log_type_t.info.getter(v118);
      if (os_log_type_enabled(v118, v119))
      {
        id v120 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v120 = 0;
        _os_log_impl((void *)&_mh_execute_header, v118, v119, "cannot create TPPeerStableInfo", v120, 2u);
        uint64_t v121 = v120;
        uint64_t v73 = v176;
        swift_slowDealloc(v121, -1LL, -1LL);
      }

      unint64_t v122 = sub_100043F74();
      uint64_t v123 = swift_allocError(&type metadata for ContainerError, v122, 0LL, 0LL);
      *(_OWORD *)uint64_t v124 = xmmword_1001DEA00;
      *(_BYTE *)(v124 + 16) = 13;
      v165(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v123);
      swift_errorRelease();

      sub_10000852C(v172, v173);
      sub_10000852C(v170, v40);
      sub_10000852C(v180, v35);
      sub_10000852C(v29, v168);
      swift_release(v73);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v177, v55, v56, v57, v58, v59, v60, v61);
    unint64_t v113 = sub_100043F74();
    uint64_t v114 = swift_allocError(&type metadata for ContainerError, v113, 0LL, 0LL);
    *(_OWORD *)uint64_t v115 = xmmword_1001DE880;
    *(_BYTE *)(v115 + 16) = 13;
    v165(0LL, 0LL, _swiftEmptyArrayStorage, 0LL, v114);
    swift_errorRelease();

    sub_10000852C(v172, v173);
    sub_10000852C(v170, v40);
    sub_10000852C(v180, v35);
    sub_10000852C(v29, v31);
    swift_release(v176);
  }

void *sub_10016BC04(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v30 = _swiftEmptyArrayStorage;
  NSSet.makeIterator()(v7);

  uint64_t v10 = sub_1000077B8( (unint64_t *)&unk_100256F90,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator,  (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(&v27, v5, v10);
  if (v28)
  {
    while (1)
    {
      sub_100008570(&v27, v29);
      sub_100061664((uint64_t)v29, (uint64_t)&v27);
      uint64_t v11 = type metadata accessor for BottleMO();
      id v12 = v26;
      id v13 = [v26 peerID];
      if (!v13)
      {

        sub_100007600(&v27);
LABEL_16:
        sub_100008570(v29, &v27);
        id v20 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        {
          sub_10014E6C4(0, v20[2] + 1LL, 1);
          id v20 = v30;
        }

        unint64_t v22 = v20[2];
        unint64_t v21 = v20[3];
        if (v22 >= v21 >> 1)
        {
          sub_10014E6C4(v21 > 1, v22 + 1, 1);
          id v20 = v30;
        }

        v20[2] = v22 + 1;
        sub_100008570(&v27, &v20[4 * v22 + 4]);
        goto LABEL_6;
      }

      uint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v17 = v16;

      if (v15 == v25 && v17 == a3) {
        break;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v25, a3, 0LL);
      swift_bridgeObjectRelease(v17);

      sub_100007600(&v27);
      if ((v19 & 1) == 0) {
        goto LABEL_16;
      }
LABEL_5:
      sub_100007600(v29);
LABEL_6:
      dispatch thunk of IteratorProtocol.next()(&v27, v5, v10);
      if (!v28) {
        goto LABEL_21;
      }
    }

    swift_bridgeObjectRelease(a3);

LABEL_4:
    sub_100007600(&v27);
    goto LABEL_5;
  }

void sub_10016BE98( _TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, char *a3, void (*a4)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, id, uint64_t), uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = (void *)swift_allocObject(&unk_10023AA58, 72LL, 7LL);
  uint64_t v130 = a4;
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v16[6] = a8;
  v16[7] = a9;
  v16[8] = a10;
  uint64_t v17 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  os_log_type_t v18 = *(void **)&a3[OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO];
  swift_retain(a5);
  int v19 = a6;
  id v20 = a7;
  id v129 = a8;
  swift_bridgeObjectRetain(a10);
  id v21 = [v18 egoPeerID];
  if (v21)
  {
    unint64_t v22 = v21;
    id v126 = v20;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v25 = v24;

    id v26 = [*(id *)&a3[v17] egoPeerPermanentInfo];
    if (v26)
    {
      unint64_t v34 = v26;
      uint64_t v124 = v23;
      uint64_t v125 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
      unint64_t v36 = v35;

      id v37 = [*(id *)&a3[v17] egoPeerPermanentInfoSig];
      if (v37)
      {
        uint64_t v38 = v37;
        int v118 = a5;
        int v117 = v19;
        unint64_t v39 = v25;
        uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
        unint64_t v42 = v41;

        id v43 = objc_allocWithZone(&OBJC_CLASS___TPECPublicKeyFactory);
        swift_bridgeObjectRetain(v39);
        sub_1000084E8(v125, v36);
        sub_1000084E8(v40, v42);
        id v44 = [v43 init];
        NSString v119 = String._bridgeToObjectiveC()();
        uint64_t v123 = v39;
        swift_bridgeObjectRelease(v39, v45, v46, v47, v48, v49, v50, v51);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v53 = Data._bridgeToObjectiveC()().super.isa;
        id v54 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v119 data:isa sig:v53 keyFactory:v44];

        uint64_t v120 = v40;
        unint64_t v121 = v42;
        sub_10000852C(v40, v42);
        unint64_t v122 = v36;
        sub_10000852C(v125, v36);

        if (v54)
        {
          strcpy((char *)v131, "signing-key ");
          BYTE5(v131[1]) = 0;
          HIWORD(v131[1]) = -5120;
          swift_bridgeObjectRetain(v123);
          swift_retain(v16);
          id v62 = a3;
          swift_bridgeObjectRetain(a1);
          swift_bridgeObjectRetain(a2);
          id v63 = v54;
          v64._countAndFlagsBits = v124;
          v64._object = v123;
          String.append(_:)(v64);
          swift_bridgeObjectRetain(v123);
          swift_retain(v16);
          id v65 = v62;
          swift_bridgeObjectRetain(a1);
          swift_bridgeObjectRetain(a2);
          id v66 = v63;
          sub_10015F574( v131[0],  v131[1],  v124,  v123,  (uint64_t)sub_100175F9C,  (uint64_t)v16,  v65,  v124,  v123,  a1,  a2,  v66);
          swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v131[1], v67, v68, v69, v70, v71, v72, v73);
          swift_bridgeObjectRelease_n(v123, 2LL);
          swift_release_n(v16, 2LL);

          swift_bridgeObjectRelease_n(a1, 2LL);
          swift_bridgeObjectRelease_n(a2, 2LL);

          sub_10000852C(v40, v42);
          sub_10000852C(v125, v36);
          swift_release(v16);
          swift_bridgeObjectRelease(v123, v74, v75, v76, v77, v78, v79, v80);
        }

        else
        {
          swift_bridgeObjectRelease(v123, v55, v56, v57, v58, v59, v60, v61);
          uint64_t v89 = a10;
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          uint64_t v90 = type metadata accessor for Logger(0LL);
          sub_100006BAC(v90, (uint64_t)qword_1002567D0);
          uint64_t v91 = swift_bridgeObjectRetain_n(a1, 2LL);
          BOOL v92 = (os_log_s *)Logger.logObject.getter(v91);
          os_log_type_t v93 = static os_log_type_t.info.getter(v92);
          if (os_log_type_enabled(v92, v93))
          {
            Swift::String v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            v131[0] = swift_slowAlloc(32LL, -1LL);
            a5 = v131[0];
            *(_DWORD *)Swift::String v94 = 136446210;
            uint64_t v95 = sub_100007620(0LL, &qword_100256FC0, off_10022CE98);
            uint64_t v96 = swift_bridgeObjectRetain(a1);
            uint64_t v97 = Array.description.getter(v96, v95);
            id v99 = (_TtC18TrustedPeersHelper6Client *)v98;
            swift_bridgeObjectRelease(a1, v98, v100, v101, v102, v103, v104, v105);
            uint64_t v132 = sub_10017C4C4(v97, (unint64_t)v99, v131);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v94 + 4, v94 + 12);
            swift_bridgeObjectRelease_n(a1, 2LL);
            swift_bridgeObjectRelease(v99, v106, v107, v108, v109, v110, v111, v112);
            _os_log_impl((void *)&_mh_execute_header, v92, v93, "Couldn't parse self identity: %{public}s", v94, 0xCu);
            swift_arrayDestroy(a5, 1LL, (char *)&type metadata for Any + 8);
            uint64_t v113 = a5;
            LODWORD(a5) = v118;
            uint64_t v89 = a10;
            swift_slowDealloc(v113, -1LL, -1LL);
            swift_slowDealloc(v94, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(a1, 2LL);
          }

          unint64_t v114 = sub_100043F74();
          uint64_t v115 = swift_allocError(&type metadata for ContainerError, v114, 0LL, 0LL);
          *(_OWORD *)uint64_t v116 = xmmword_1001DE880;
          *(_BYTE *)(v116 + 16) = 13;
          sub_1000FC2FC(0LL, v115, v130, a5, v117, v126, v129, a9, v89);
          swift_errorRelease();
          sub_10000852C(v120, v121);
          sub_10000852C(v125, v122);
          swift_release(v16);
        }

        return;
      }

      sub_10000852C(v125, v36);
    }

    swift_bridgeObjectRelease(v25, v27, v28, v29, v30, v31, v32, v33);
    id v20 = v126;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v81 = type metadata accessor for Logger(0LL);
  uint64_t v82 = sub_100006BAC(v81, (uint64_t)qword_1002567D0);
  id v83 = (os_log_s *)Logger.logObject.getter(v82);
  os_log_type_t v84 = static os_log_type_t.info.getter(v83);
  if (os_log_type_enabled(v83, v84))
  {
    BOOL v85 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v85 = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Have no self identity, can't make tlk shares", v85, 2u);
    swift_slowDealloc(v85, -1LL, -1LL);
  }

  unint64_t v86 = sub_100043F74();
  uint64_t v87 = swift_allocError(&type metadata for ContainerError, v86, 0LL, 0LL);
  *(_OWORD *)uint64_t v88 = xmmword_1001DE890;
  *(_BYTE *)(v88 + 16) = 13;
  sub_1000FC2FC(0LL, v87, v130, a5, v19, v20, v129, a9, a10);
  swift_errorRelease();
  swift_release(v16);
}

void sub_10016C5E0( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _TtC18TrustedPeersHelper6Client *a5)
{
  uint64_t v42 = a2;
  uint64_t v44 = 0LL;
  int64_t v7 = 0LL;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v8 = a3 + 56;
  uint64_t v9 = v10;
  uint64_t v11 = 1LL << *(_BYTE *)(v8 - 24);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v9;
  uint64_t v45 = v8;
  int64_t v46 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v15 = v14 | (v7 << 6);
LABEL_21:
    id v19 = *(id *)(*(void *)(a3 + 48) + 8 * v15);
    id v20 = objc_msgSend(v19, "peerID", v42);
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v24 = v23;

      if (v22 == a4 && v24 == a5)
      {

        swift_bridgeObjectRelease(a5, v34, v35, v36, v37, v38, v39, v40);
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        if (__OFADD__(v44++, 1LL))
        {
          __break(1u);
LABEL_32:
          swift_retain(a3);
          sub_10015147C(a1, v42, v44, a3, (uint64_t *)&unk_100256E90);
          return;
        }
      }

      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, a4, a5, 0LL);

        swift_bridgeObjectRelease(v24, v27, v28, v29, v30, v31, v32, v33);
        if ((v26 & 1) != 0) {
          goto LABEL_29;
        }
      }
    }

    else
    {
    }
  }

  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_34;
  }

  if (v16 >= v46) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v45 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 1;
  if (v16 + 1 >= v46) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v45 + 8 * v7);
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 2;
  if (v16 + 2 >= v46) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v45 + 8 * v7);
  if (v17)
  {
LABEL_20:
    unint64_t v13 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_21;
  }

  int64_t v18 = v16 + 3;
  if (v18 >= v46) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v45 + 8 * v18);
  if (v17)
  {
    int64_t v7 = v18;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v7 >= v46) {
      goto LABEL_32;
    }
    unint64_t v17 = *(void *)(v45 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }

uint64_t sub_10016C82C(uint64_t a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3)
{
  char v7 = *(_BYTE *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1LL << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2LL);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v12);
    bzero((char *)&v33 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    swift_bridgeObjectRetain(a3);
    sub_10016C5E0((unint64_t *)((char *)&v33 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v9, a1, a2, a3);
    uint64_t v14 = v13;
    swift_release(a1);
    swift_bridgeObjectRelease(a3, v15, v16, v17, v18, v19, v20, v21);
    if (v3) {
      swift_willThrow(v22);
    }
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  else
  {
    uint64_t v23 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v23, v10);
    swift_bridgeObjectRetain(a3);
    sub_10016C5E0((unint64_t *)v23, v9, a1, a2, a3);
    uint64_t v14 = v24;
    swift_release(a1);
    swift_bridgeObjectRelease(a3, v25, v26, v27, v28, v29, v30, v31);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  return v14;
}

Swift::Int sub_10016C9FC(uint64_t a1, uint64_t a2, _TtC18TrustedPeersHelper6Client *a3)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return sub_10016C82C(a1, a2, a3);
  }
  uint64_t v5 = &_swiftEmptySetSingleton;
  id v54 = &_swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a3);
  uint64_t v7 = __CocoaSet.makeIterator()(v6);
  uint64_t v8 = __CocoaSet.Iterator.next()(v7);
  if (v8)
  {
    uint64_t v16 = v8;
    uint64_t v17 = type metadata accessor for BottleMO();
    while (1)
    {
      uint64_t v52 = v16;
      swift_dynamicCast(&v53, &v52, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
      id v19 = [v53 peerID];
      if (v19)
      {
        BOOL v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v23 = v22;

        if (v21 == a2 && v23 == a3)
        {
          swift_bridgeObjectRelease(a3, v24, v25, v26, v27, v28, v29, v30);
LABEL_17:
          id v40 = v53;
          unint64_t v41 = v54;
          unint64_t v42 = v54[2];
          if (v54[3] <= v42)
          {
            sub_10014FFE4(v42 + 1, (uint64_t *)&unk_100256E90);
            unint64_t v41 = v54;
          }

          Swift::Int result = NSObject._rawHashValue(seed:)(v41[5]);
          id v43 = v41 + 7;
          uint64_t v44 = -1LL << *((_BYTE *)v41 + 32);
          unint64_t v45 = result & ~v44;
          unint64_t v46 = v45 >> 6;
          if (((-1LL << v45) & ~v41[(v45 >> 6) + 7]) != 0)
          {
            unint64_t v47 = __clz(__rbit64((-1LL << v45) & ~v41[(v45 >> 6) + 7])) | v45 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v48 = 0;
            unint64_t v49 = (unint64_t)(63 - v44) >> 6;
            do
            {
              if (++v46 == v49 && (v48 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              BOOL v50 = v46 == v49;
              if (v46 == v49) {
                unint64_t v46 = 0LL;
              }
              v48 |= v50;
              uint64_t v51 = v43[v46];
            }

            while (v51 == -1);
            unint64_t v47 = __clz(__rbit64(~v51)) + (v46 << 6);
          }

          *(void *)((char *)v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v47;
          *(void *)(v41[6] + 8 * v47) = v40;
          ++v41[2];
          goto LABEL_8;
        }

        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, a2, a3, 0LL);
        swift_bridgeObjectRelease(v23, v33, v34, v35, v36, v37, v38, v39);
        if ((v32 & 1) != 0) {
          goto LABEL_17;
        }
      }

LABEL_8:
      uint64_t v16 = __CocoaSet.Iterator.next()(result);
      if (!v16)
      {
        uint64_t v5 = v54;
        break;
      }
    }
  }

  swift_bridgeObjectRelease(a3, v9, v10, v11, v12, v13, v14, v15);
  swift_release(v7);
  return (Swift::Int)v5;
}

uint64_t sub_10016CC84( uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void, unint64_t, void, unint64_t, uint64_t), uint64_t a5, char *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  id v19 = a3;
  if (!a1)
  {
    [(id)objc_opt_self(SecurityAnalyticsReporterRTC) sendMetricWithEvent:a3 success:1 error:0];
    id v57 = *(id *)&a6[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    id v19 = (void *)swift_allocObject(&unk_10023A698, 144LL, 7LL);
    v19[2] = a6;
    v19[3] = a7;
    v19[4] = a8;
    v19[5] = a9;
    v19[6] = a10;
    v19[7] = a11;
    v19[8] = a4;
    v19[9] = a5;
    v19[10] = a12;
    v19[11] = a13;
    v19[12] = a14;
    v19[13] = a15;
    v19[14] = a16;
    v19[15] = a17;
    v19[16] = a18;
    v19[17] = a19;
    uint64_t v46 = swift_allocObject(&unk_10023A6C0, 32LL, 7LL);
    *(void *)(v46 + 16) = sub_1001753C4;
    *(void *)(v46 + 24) = v19;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v62 = v46;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023A6D8;
    uint64_t v24 = _Block_copy(aBlock);
    uint64_t v21 = v62;
    swift_bridgeObjectRetain(a19);
    swift_retain(v46);
    unint64_t v47 = a6;
    id v48 = a7;
    id v49 = a8;
    swift_bridgeObjectRetain(a10);
    id v50 = a11;
    swift_retain(a5);
    swift_bridgeObjectRetain(a12);
    id v51 = a13;
    swift_bridgeObjectRetain(a15);
    swift_bridgeObjectRetain(a17);
    swift_release(v21);
    [v57 performBlockAndWait:v24];
    _Block_release(v24);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v46, "", 108LL, 4378LL, 45LL, 1LL);
    swift_release(v19);
    uint64_t result = swift_release(v46);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v21 = a1;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v22, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v23 = swift_errorRetain(a2);
  uint64_t v24 = (void *)Logger.logObject.getter(v23);
  os_log_type_t v28 = static os_log_type_t.error.getter(v24, v25, v26, v27);
  if (!os_log_type_enabled((os_log_t)v24, v28))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  BOOL v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v30 = swift_slowAlloc(32LL, -1LL);
  uint64_t v60 = a2;
  aBlock[0] = v30;
  *(_DWORD *)BOOL v29 = 136446210;
  swift_errorRetain(a2);
  uint64_t v31 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v32 = String.init<A>(describing:)(&v60, v31);
  id v34 = (_TtC18TrustedPeersHelper6Client *)v33;
  uint64_t v60 = sub_10017C4C4(v32, v33, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v29 + 4, v29 + 12);
  swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v24, v28, "Unknown policy for beneficiary: %{public}s", v29, 0xCu);
  swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v30, -1LL, -1LL);
  swift_slowDealloc(v29, -1LL, -1LL);
LABEL_9:

  id v54 = (void *)objc_opt_self(&OBJC_CLASS___SecurityAnalyticsReporterRTC);
  BOOL v55 = (void *)_convertErrorToNSError(_:)(v21);
  [v54 sendMetricWithEvent:v19 success:0 error:v55];

  return a4(0LL, 0xF000000000000000LL, 0LL, 0xF000000000000000LL, v21);
}

void sub_10016D0C8( void *a1, char *a2, uint64_t a3, void *a4, uint64_t (*a5)(void, unint64_t, void, unint64_t, uint64_t), uint64_t a6, char *a7, void *a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, _TtC18TrustedPeersHelper6Client **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v100 = a6;
  int64_t v101 = a8;
  uint64_t v90 = a7;
  BOOL v92 = a1;
  os_log_type_t v93 = a2;
  uint64_t v96 = a20;
  uint64_t v97 = a19;
  uint64_t v98 = a13;
  uint64_t v99 = a3;
  id v102 = a14;
  id v103 = (void *)a18;
  uint64_t v94 = a11;
  uint64_t v95 = a16;
  id v89 = a12;
  uint64_t v91 = a9;
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v24);
  uint64_t v87 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = (void *)swift_allocObject(&unk_10023A5D0, 160LL, 7LL);
  _OWORD v26[2] = a3;
  v26[3] = a4;
  BOOL v85 = a5;
  v26[4] = a5;
  uint64_t v28 = v100;
  uint64_t v27 = v101;
  v26[5] = v100;
  v26[6] = a7;
  v26[7] = v27;
  v26[8] = a9;
  uint64_t v82 = a10;
  uint64_t v29 = v94;
  v26[9] = a10;
  v26[10] = v29;
  uint64_t v30 = v89;
  v26[11] = v89;
  v26[12] = a13;
  v26[13] = v102;
  v26[14] = a15;
  uint64_t v84 = a15;
  uint64_t v31 = v95;
  v26[15] = v95;
  v26[16] = a17;
  uint64_t v83 = a17;
  uint64_t v33 = v96;
  uint64_t v32 = v97;
  v26[17] = v103;
  v26[18] = v32;
  v26[19] = v33;
  uint64_t v34 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  uint64_t v88 = v34;
  SEL v35 = v92;
  *(void *)(v34 + 16) = v92;
  id v36 = (uint64_t *)(v34 + 16);
  int64_t v37 = (_TtC18TrustedPeersHelper6Client **)swift_allocObject(&unk_100238348, 24LL, 7LL);
  swift_errorRetain(v99);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v35);
  BOOL v92 = a4;
  swift_retain(v28);
  uint64_t v90 = v90;
  int64_t v101 = v101;
  uint64_t v38 = v31;
  id v39 = v36;
  uint64_t v91 = v91;
  swift_bridgeObjectRetain(v29);
  id v89 = v30;
  swift_bridgeObjectRetain(v98);
  uint64_t v81 = v102;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v103);
  unint64_t v40 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  id v102 = v37;
  v37[2] = (_TtC18TrustedPeersHelper6Client *)v40;
  BOOL v41 = v93;
  unint64_t v42 = *(void **)&v93[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  id v43 = (void *)swift_allocObject(&unk_10023A5F8, 40LL, 7LL);
  v43[2] = v39;
  v43[3] = v41;
  v43[4] = v37 + 2;
  uint64_t v44 = swift_allocObject(&unk_10023A620, 32LL, 7LL);
  *(void *)(v44 + 16) = sub_100176F48;
  *(void *)(v44 + 24) = v43;
  aBlock[4] = sub_100176BD4;
  uint64_t v105 = v44;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_10023A638;
  unint64_t v45 = _Block_copy(aBlock);
  uint64_t v46 = v105;
  unint64_t v47 = v41;
  swift_retain(v44);
  swift_release(v46);
  [v42 performBlockAndWait:v45];
  _Block_release(v45);
  LOBYTE(v42) = swift_isEscapingClosureAtFileLocation(v44, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t v48 = swift_release(v44);
  if ((v42 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v50 = *v39;
    if ((*v39 & 0xC000000000000001LL) != 0)
    {
      if (v50 < 0) {
        uint64_t v51 = *v39;
      }
      else {
        uint64_t v51 = v50 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v39);
      uint64_t v52 = __CocoaSet.count.getter(v51);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v50, v53, v54, v55, v56, v57, v58, v59);
      if (v52) {
        goto LABEL_7;
      }
    }

    else if (*(void *)(v50 + 16))
    {
LABEL_7:
      __chkstk_darwin(v48, v49);
      id v103 = v43;
      v79[2] = v39;
      uint64_t v60 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
      uint64_t v61 = (uint64_t)v87;
      static Message.with(_:)(sub_100176B2C, v79, PolicyDocumentsRequest, v60);
      uint64_t v62 = *(void *)&v47[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v63 = *(void *)&v47[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v47[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v62);
      Swift::String v64 = (void *)swift_allocObject(&unk_10023A670, 56LL, 7LL);
      v64[2] = v47;
      v64[3] = sub_1001752CC;
      uint64_t v65 = v88;
      v64[4] = v26;
      uint64_t v64[5] = v65;
      id v66 = v102;
      v64[6] = v102;
      uint64_t v67 = *(void *)(v63 + 16);
      id v68 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v67 + 80);
      int64_t v69 = v47;
      swift_retain(v26);
      swift_retain(v65);
      swift_retain(v66);
      v68(v61, sub_100171830, v64, v62, v67);
      swift_release(v64);
      sub_1000415CC(v61, type metadata accessor for FetchPolicyDocumentsRequest);
      swift_release(v26);
      swift_release(v103);
      swift_release(v65);
      swift_release(v66);
      return;
    }

    id v70 = v102;
    id v71 = v102[2];
    swift_bridgeObjectRetain(v71);
    sub_10016CC84( 0LL,  v99,  v92,  v85,  v100,  v90,  v101,  v91,  v82,  v94,  v89,  v98,  v81,  v84,  v95,  v83,  (uint64_t)v103,  v97,  v96);
    swift_release(v26);
    swift_release(v43);
    swift_release(v88);
    swift_release(v70);
    swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
  }

uint64_t sub_10016D668(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_10016D758( uint64_t a1, uint64_t a2, int a3, _TtC18TrustedPeersHelper6Client *a4, id a5, void *a6, void (*a7)(id, id, id))
{
  p_vtable = &OBJC_CLASS___VoucherMO.vtable;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v13, (uint64_t)qword_1002567D0);
    swift_errorRetain(a1);
    uint64_t v14 = swift_errorRetain(a1);
    BOOL v15 = (void *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.info.getter(v15);
    if (!os_log_type_enabled((os_log_t)v15, v16))
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      if (a4) {
        goto LABEL_7;
      }
      goto LABEL_9;
    }

    int v96 = a3;
    uint64_t v98 = a2;
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v97 = a5;
    id v18 = (void *)swift_slowAlloc(32LL, -1LL);
    id v103 = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v101 = a1;
    swift_errorRetain(a1);
    uint64_t v19 = sub_100007578(&qword_100251D70);
    uint64_t v20 = String.init<A>(describing:)(&v101, v19);
    uint64_t v22 = (_TtC18TrustedPeersHelper6Client *)v21;
    uint64_t v101 = sub_10017C4C4(v20, v21, (uint64_t *)&v103);
    p_vtable = (void **)(&OBJC_CLASS___VoucherMO + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v17 + 4, v17 + 12);
    uint64_t v23 = v22;
    a3 = v96;
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  v16,  "join: error fetching all requested policies (continuing anyway): %{public}s",  v17,  0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v31 = v18;
    a5 = v97;
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v32 = v17;
    a2 = v98;
    swift_slowDealloc(v32, -1LL, -1LL);

    swift_errorRelease();
  }

  if (a4)
  {
LABEL_7:
    uint64_t v33 = a4;
    goto LABEL_10;
  }

void sub_10016DDEC( uint64_t a1, char *a2, void *a3, uint64_t a4, _TtC18TrustedPeersHelper6Client *a5, void *a6, void *a7, void (*a8)(id, id, id), uint64_t a9)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v17);
  uint64_t v145 = (char *)&v140 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = swift_allocObject(&unk_100238488, 72LL, 7LL);
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  uint64_t v142 = a4;
  *(void *)(v19 + 32) = a5;
  *(void *)(v19 + 40) = a6;
  *(void *)(v19 + 48) = a7;
  *(void *)(v19 + 56) = a8;
  uint64_t v144 = a8;
  *(void *)(v19 + 64) = a9;
  uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238320, 24LL, 7LL);
  NSString v148 = v20;
  *(void *)v20->endpoint = a1;
  endpoint = (uint64_t *)v20->endpoint;
  uint64_t v22 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  BOOL v143 = a5;
  swift_bridgeObjectRetain(a5);
  id v23 = a6;
  id v141 = a7;
  swift_retain(a9);
  swift_bridgeObjectRetain(a1);
  id v140 = a3;
  unint64_t v24 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v147 = v22;
  *(void *)(v22 + 16) = v24;
  id v25 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v26 = swift_allocObject(&unk_1002384B0, 40LL, 7LL);
  *(void *)(v26 + 16) = endpoint;
  *(void *)(v26 + 24) = a2;
  *(void *)(v26 + 32) = v22 + 16;
  id v27 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002384D8, 32LL, 7LL);
  *(void *)v27->endpoint = sub_100176F48;
  *(void *)v27->containerMap = v26;
  aBlock[4] = sub_100176BD4;
  NSString v150 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_1002384F0;
  id v28 = _Block_copy(aBlock);
  BOOL v29 = v150;
  BOOL v30 = a2;
  swift_retain(v27);
  swift_release(v29, v31, v32, v33, v34, v35, v36, v37);
  [v25 performBlockAndWait:v28];
  _Block_release(v28);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation(v27, "", 108LL, 5200LL, 33LL, 1LL);
  swift_release(v27, v38, v39, v40, v41, v42, v43, v44);
  if ((v25 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v47 = *endpoint;
    if ((*endpoint & 0xC000000000000001LL) != 0)
    {
      if (v47 < 0) {
        uint64_t v48 = *endpoint;
      }
      else {
        uint64_t v48 = v47 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*endpoint);
      uint64_t v49 = __CocoaSet.count.getter(v48);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v47, v50, v51, v52, v53, v54, v55, v56);
      if (v49) {
        goto LABEL_7;
      }
    }

    else if (*(void *)(v47 + 16))
    {
LABEL_7:
      __chkstk_darwin(v45, v46);
      *(&v140 - 2) = endpoint;
      uint64_t v57 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
      uint64_t v58 = (uint64_t)v145;
      static Message.with(_:)(sub_100176B2C, &v140 - 4, PolicyDocumentsRequest, v57);
      uint64_t v59 = *(void *)&v30[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v60 = *(void *)&v30[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v30[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v59);
      uint64_t v61 = swift_allocObject(&unk_100238528, 56LL, 7LL);
      *(void *)(v61 + 16) = v30;
      *(void *)(v61 + 24) = sub_100171A20;
      uint64_t v62 = v148;
      *(void *)(v61 + 32) = v19;
      *(void *)(v61 + 40) = v62;
      uint64_t v63 = v30;
      uint64_t v64 = (_TtC18TrustedPeersHelper6Client *)v147;
      *(void *)(v61 + 48) = v147;
      uint64_t v65 = *(void *)(v60 + 16);
      uint64_t v66 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v65 + 80);
      os_log_type_t v67 = v63;
      swift_retain(v19);
      swift_retain(v62);
      swift_retain(v64);
      v66(v58, sub_100171830, v61, v59, v65);
      swift_release((_TtC18TrustedPeersHelper6Client *)v61, v68, v69, v70, v71, v72, v73, v74);
      sub_1000415CC(v58, type metadata accessor for FetchPolicyDocumentsRequest);
      swift_release((_TtC18TrustedPeersHelper6Client *)v19, v75, v76, v77, v78, v79, v80, v81);
      swift_release((_TtC18TrustedPeersHelper6Client *)v26, v82, v83, v84, v85, v86, v87, v88);
      swift_release(v62, v89, v90, v91, v92, v93, v94, v95);
      swift_release(v64, v96, v97, v98, v99, v100, v101, v102);
      return;
    }

    id v103 = (_TtC18TrustedPeersHelper6Client *)v147;
    BOOL v104 = *(_TtC18TrustedPeersHelper6Client **)(v147 + 16);
    swift_bridgeObjectRetain(v104);
    sub_10016D758(0LL, (uint64_t)v140, v142, v143, v23, v141, v144);
    swift_release((_TtC18TrustedPeersHelper6Client *)v19, v105, v106, v107, v108, v109, v110, v111);
    swift_release((_TtC18TrustedPeersHelper6Client *)v26, v112, v113, v114, v115, v116, v117, v118);
    swift_release(v148, v119, v120, v121, v122, v123, v124, v125);
    swift_release(v103, v126, v127, v128, v129, v130, v131, v132);
    swift_bridgeObjectRelease(v104, v133, v134, v135, v136, v137, v138, v139);
  }

uint64_t sub_10016E208( uint64_t a1, uint64_t a2, char *a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t isEscapingClosureAtFileLocation, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v20 = a6;
  uint64_t v22 = a3;
  char v23 = a19;
  if (!a1)
  {
    [(id)objc_opt_self(SecurityAnalyticsReporterRTC) sendMetricWithEvent:a2 success:1 error:0];
    goto LABEL_8;
  }

  uint64_t v27 = a1;
  uint64_t v55 = a2;
  LOBYTE(v59) = a19;
  swift_errorRetain(a1);
  if (qword_100250EB8 != -1) {
    goto LABEL_10;
  }
  while (1)
  {
    uint64_t v57 = isEscapingClosureAtFileLocation;
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v28, (uint64_t)qword_1002567D0);
    swift_errorRetain(v27);
    uint64_t v29 = swift_errorRetain(v27);
    BOOL v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v53 = a11;
      id v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v54 = a12;
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v33;
      *(_DWORD *)id v32 = 136446210;
      uint64_t v65 = v27;
      swift_errorRetain(v27);
      uint64_t v34 = sub_100007578(&qword_100251D70);
      uint64_t v35 = String.init<A>(describing:)(&v65, v34);
      id v37 = (_TtC18TrustedPeersHelper6Client *)v36;
      uint64_t v65 = sub_10017C4C4(v35, v36, aBlock);
      uint64_t v22 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, aBlock, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "join: error fetching all requested policies (continuing anyway): %{public}s",  v32,  0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v45 = v33;
      unint64_t v20 = a6;
      a12 = v54;
      swift_slowDealloc(v45, -1LL, -1LL);
      uint64_t v46 = v32;
      a11 = v53;
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    char v23 = (char)v59;
    uint64_t v47 = (void *)objc_opt_self(&OBJC_CLASS___SecurityAnalyticsReporterRTC);
    uint64_t v48 = (void *)_convertErrorToNSError(_:)(v27);
    [v47 sendMetricWithEvent:v55 success:0 error:v48];

    swift_errorRelease();
    char isEscapingClosureAtFileLocation = v57;
LABEL_8:
    uint64_t v56 = a10;
    id v59 = *(id *)&v22[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v49 = swift_allocObject(&unk_10023A058, 145LL, 7LL);
    *(void *)(v49 + 16) = a4;
    uint64_t v58 = a4;
    a4 = a5;
    *(void *)(v49 + 24) = a5;
    *(void *)(v49 + 32) = v20;
    unint64_t v20 = a7;
    *(void *)(v49 + 40) = a7;
    *(void *)(v49 + 48) = isEscapingClosureAtFileLocation;
    *(void *)(v49 + 56) = a9;
    *(void *)(v49 + 64) = v22;
    *(void *)(v49 + 72) = a10;
    *(void *)(v49 + 80) = a11;
    uint64_t v27 = a11;
    a11 = a12;
    *(void *)(v49 + 88) = a12;
    *(void *)(v49 + 96) = a13;
    uint64_t v22 = a14;
    *(void *)(v49 + 104) = a14;
    *(void *)(v49 + 112) = a15;
    *(void *)(v49 + 120) = a16;
    *(void *)(v49 + 128) = a17;
    a12 = a18;
    *(void *)(v49 + 136) = a18;
    *(_BYTE *)(v49 + 144) = v23 & 1;
    a10 = swift_allocObject(&unk_10023A080, 32LL, 7LL);
    *(void *)(a10 + 16) = sub_100174254;
    *(void *)(a10 + 24) = v49;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v67 = a10;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023A098;
    SEL v50 = _Block_copy(aBlock);
    a17 = v67;
    sub_1000084E8(v58, a5);
    sub_1000084E8(a6, a7);
    swift_bridgeObjectRetain(a18);
    swift_retain(a10);
    swift_retain(a9);
    id v51 = a3;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a16);
    swift_release(a17);
    [v59 performBlockAndWait:v50];
    _Block_release(v50);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a10, "", 108LL, 5510LL, 41LL, 1LL);
    swift_release(v49);
    uint64_t result = swift_release(a10);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_once(&qword_100250EB8, sub_1000DD078);
  }

  return result;
}

void sub_10016E690( uint64_t a1, char *a2, void *a3, void *a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20)
{
  unint64_t v102 = a8;
  unint64_t v103 = a6;
  BOOL v104 = (void *)a7;
  unint64_t v101 = a5;
  uint64_t v91 = a1;
  id v92 = a2;
  int v93 = a20;
  uint64_t v94 = a19;
  uint64_t v95 = a18;
  uint64_t v90 = a17;
  uint64_t v96 = a16;
  uint64_t v97 = a13;
  uint64_t v98 = a12;
  uint64_t v99 = a11;
  uint64_t v100 = a10;
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v23);
  id v88 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = swift_allocObject(&unk_100239F90, 153LL, 7LL);
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  unint64_t v26 = v103;
  *(void *)(v25 + 32) = a5;
  *(void *)(v25 + 40) = v26;
  unint64_t v27 = v102;
  *(void *)(v25 + 48) = v104;
  *(void *)(v25 + 56) = v27;
  uint64_t v86 = a9;
  *(void *)(v25 + 64) = a9;
  *(void *)(v25 + 72) = a10;
  uint64_t v28 = v99;
  *(void *)(v25 + 80) = v99;
  *(void *)(v25 + 88) = a12;
  *(void *)(v25 + 96) = a13;
  *(void *)(v25 + 104) = a14;
  uint64_t v85 = a14;
  uint64_t v29 = v96;
  *(void *)(v25 + 112) = a15;
  *(void *)(v25 + 120) = v29;
  uint64_t v30 = v90;
  uint64_t v32 = v94;
  uint64_t v31 = v95;
  *(void *)(v25 + 128) = v90;
  *(void *)(v25 + 136) = v31;
  *(void *)(v25 + 144) = v32;
  *(_BYTE *)(v25 + 152) = v93;
  uint64_t v33 = swift_allocObject(&unk_100238320, 24LL, 7LL);
  uint64_t v89 = v33;
  uint64_t v34 = v91;
  *(void *)(v33 + 16) = v91;
  uint64_t v35 = (uint64_t *)(v33 + 16);
  uint64_t v36 = swift_allocObject(&unk_100238348, 24LL, 7LL);
  id v83 = a3;
  SEL v82 = a4;
  sub_1000084E8(v101, v103);
  sub_1000084E8((uint64_t)v104, v102);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_retain(v100);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v97);
  id v84 = a15;
  swift_bridgeObjectRetain(a15);
  uint64_t v37 = v30;
  swift_bridgeObjectRetain(v30);
  unint64_t v38 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v91 = v36;
  *(void *)(v36 + 16) = v38;
  uint64_t v39 = v36 + 16;
  int64_t v40 = v92;
  id v41 = *(void **)&v92[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  id v42 = (void *)swift_allocObject(&unk_100239FB8, 40LL, 7LL);
  uint64_t v42[2] = v35;
  v42[3] = v40;
  v42[4] = v39;
  uint64_t v43 = swift_allocObject(&unk_100239FE0, 32LL, 7LL);
  *(void *)(v43 + 16) = sub_100176F48;
  *(void *)(v43 + 24) = v42;
  aBlock[4] = sub_100176BD4;
  uint64_t v106 = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_100239FF8;
  BOOL v44 = _Block_copy(aBlock);
  uint64_t v45 = v106;
  uint64_t v46 = v40;
  swift_retain(v43);
  swift_release(v45);
  [v41 performBlockAndWait:v44];
  _Block_release(v44);
  LOBYTE(v40) = swift_isEscapingClosureAtFileLocation(v43, "", 108LL, 5200LL, 33LL, 1LL);
  uint64_t v47 = swift_release(v43);
  if ((v40 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v49 = *v35;
    if ((*v35 & 0xC000000000000001LL) != 0)
    {
      if (v49 < 0) {
        uint64_t v50 = *v35;
      }
      else {
        uint64_t v50 = v49 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v35);
      uint64_t v51 = __CocoaSet.count.getter(v50);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v49, v52, v53, v54, v55, v56, v57, v58);
      if (v51) {
        goto LABEL_7;
      }
    }

    else if (*(void *)(v49 + 16))
    {
LABEL_7:
      __chkstk_darwin(v47, v48);
      v80[2] = v35;
      uint64_t v59 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
      uint64_t v60 = (uint64_t)v88;
      static Message.with(_:)(sub_100176B2C, v80, PolicyDocumentsRequest, v59);
      uint64_t v61 = v46;
      uint64_t v62 = &v46[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish];
      uint64_t v63 = *(void *)&v46[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v64 = *(void *)&v46[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(v62, v63);
      uint64_t v65 = (void *)swift_allocObject(&unk_10023A030, 56LL, 7LL);
      v65[2] = v61;
      v65[3] = sub_100174174;
      uint64_t v66 = v89;
      v65[4] = v25;
      v65[5] = v66;
      BOOL v104 = v42;
      uint64_t v67 = v91;
      v65[6] = v91;
      uint64_t v68 = *(void *)(v64 + 16);
      id v69 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v68 + 80);
      id v70 = v61;
      swift_retain(v25);
      swift_retain(v66);
      swift_retain(v67);
      v69(v60, sub_100171830, v65, v63, v68);
      swift_release(v65);
      sub_1000415CC(v60, type metadata accessor for FetchPolicyDocumentsRequest);
      swift_release(v25);
      swift_release(v104);
      swift_release(v66);
      swift_release(v67);
      return;
    }

    uint64_t v71 = v91;
    id v72 = *(_TtC18TrustedPeersHelper6Client **)(v91 + 16);
    swift_bridgeObjectRetain(v72);
    sub_10016E208( 0LL,  (uint64_t)v83,  v82,  v101,  v103,  (uint64_t)v104,  v102,  v86,  v100,  v99,  v98,  v97,  v85,  v84,  v96,  v37,  v95,  v94,  v93 & 1);
    swift_release(v25);
    swift_release(v42);
    swift_release(v89);
    swift_release(v71);
    swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
  }

void sub_10016EC10(void *a1, char *a2, uint64_t isEscapingClosureAtFileLocation, BOOL a4, uint64_t a5)
{
  if (!a1) {
    goto LABEL_6;
  }
  unint64_t v9 = a1;
  swift_errorRetain(a1);
  if (qword_100250EB8 != -1) {
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v10, (uint64_t)qword_1002567D0);
    swift_errorRetain(v9);
    uint64_t v11 = swift_errorRetain(v9);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v59 = (void *)isEscapingClosureAtFileLocation;
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      BOOL v62 = a4;
      id v65 = v9;
      uint64_t v16 = v15;
      aBlock[0] = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_errorRetain(v9);
      uint64_t v17 = sub_100007578(&qword_100251D70);
      uint64_t v18 = String.init<A>(describing:)(&v65, v17);
      unint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
      id v65 = (id)sub_10017C4C4(v18, v19, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, aBlock, v14 + 4, v14 + 12);
      unint64_t v21 = v20;
      char isEscapingClosureAtFileLocation = (uint64_t)v59;
      swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "preflightPreapprovedJoin: error fetching all requested policies (continuing anyway): %{public}s",  v14,  0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v29 = v16;
      a4 = v62;
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }

void sub_10016EF24( uint64_t a1, char *a2, void *a3, _TtC18TrustedPeersHelper6Client *a4, uint64_t a5, uint64_t a6)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v12);
  uint64_t v164 = (char *)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100238820, 48LL, 7LL);
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  SEL v162 = a4;
  *(void *)(v14 + 32) = a5;
  *(void *)(v14 + 40) = a6;
  uint64_t v15 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238320, 24LL, 7LL);
  id v165 = v15;
  *(void *)v15->endpoint = a1;
  endpoint = (uint64_t *)v15->endpoint;
  uint64_t v17 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238348, 24LL, 7LL);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a1);
  id v161 = a3;
  swift_retain(a5);
  unint64_t v18 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  id v166 = v17;
  *(void *)v17->endpoint = v18;
  unint64_t v19 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v20 = swift_allocObject(&unk_100238848, 40LL, 7LL);
  *(void *)(v20 + 16) = endpoint;
  *(void *)(v20 + 24) = a2;
  *(void *)(v20 + 32) = v17->endpoint;
  unint64_t v21 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238870, 32LL, 7LL);
  *(void *)v21->endpoint = sub_100176F48;
  *(void *)v21->containerMap = v20;
  id v171 = sub_100176BD4;
  uint64_t v172 = v21;
  aBlock = _NSConcreteStackBlock;
  uint64_t v168 = 1107296256LL;
  unint64_t v169 = sub_1000DC9F8;
  uint64_t v170 = &unk_100238888;
  SEL v22 = _Block_copy(&aBlock);
  id v23 = v172;
  int64_t v24 = a2;
  swift_retain(v21);
  swift_release(v23, v25, v26, v27, v28, v29, v30, v31);
  [v19 performBlockAndWait:v22];
  _Block_release(v22);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v21, "", 108LL, 5200LL, 33LL, 1LL);
  swift_release(v21, v32, v33, v34, v35, v36, v37, v38);
  if ((v19 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }

  uint64_t v41 = *endpoint;
  if ((*endpoint & 0xC000000000000001LL) != 0)
  {
    if (v41 < 0) {
      uint64_t v42 = *endpoint;
    }
    else {
      uint64_t v42 = v41 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*endpoint);
    uint64_t v43 = __CocoaSet.count.getter(v42);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v41, v44, v45, v46, v47, v48, v49, v50);
    if (v43) {
      goto LABEL_7;
    }
  }

  else if (*(void *)(v41 + 16))
  {
LABEL_7:
    __chkstk_darwin(v39, v40);
    *(&v160 - 2) = (uint64_t)endpoint;
    uint64_t v51 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
    SEL v162 = (_TtC18TrustedPeersHelper6Client *)v20;
    uint64_t v52 = (uint64_t)v164;
    static Message.with(_:)(sub_100176B2C, &v160 - 4, PolicyDocumentsRequest, v51);
    uint64_t v53 = *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v54 = *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v53);
    uint64_t v55 = swift_allocObject(&unk_1002388C0, 56LL, 7LL);
    *(void *)(v55 + 16) = v24;
    *(void *)(v55 + 24) = sub_100172548;
    id v56 = v165;
    id v57 = v166;
    *(void *)(v55 + 32) = v14;
    *(void *)(v55 + 40) = v56;
    *(void *)(v55 + 48) = v57;
    uint64_t v58 = *(void *)(v54 + 16);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v58 + 80);
    id v60 = v24;
    swift_retain(v14);
    swift_retain(v56);
    swift_retain(v57);
    v59(v52, sub_100171830, v55, v53, v58);
    swift_release((_TtC18TrustedPeersHelper6Client *)v55, v61, v62, v63, v64, v65, v66, v67);
    sub_1000415CC(v52, type metadata accessor for FetchPolicyDocumentsRequest);
    swift_release((_TtC18TrustedPeersHelper6Client *)v14, v68, v69, v70, v71, v72, v73, v74);
    swift_release(v162, v75, v76, v77, v78, v79, v80, v81);
    swift_release(v56, v82, v83, v84, v85, v86, v87, v88);
    swift_release(v57, v89, v90, v91, v92, v93, v94, v95);
    return;
  }

  uint64_t v96 = *(_TtC18TrustedPeersHelper6Client **)v166->endpoint;
  uint64_t v97 = v161;
  uint64_t v164 = *(char **)&v161[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v98 = swift_allocObject(&unk_1002388E8, 48LL, 7LL);
  uint64_t v99 = v162;
  *(void *)(v98 + 16) = v97;
  *(void *)(v98 + 24) = v99;
  *(void *)(v98 + 32) = a5;
  *(void *)(v98 + 40) = a6;
  uint64_t v100 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238910, 32LL, 7LL);
  *(void *)v100->endpoint = sub_100172578;
  *(void *)v100->containerMap = v98;
  id v171 = sub_100176BD4;
  uint64_t v172 = v100;
  aBlock = _NSConcreteStackBlock;
  uint64_t v168 = 1107296256LL;
  unint64_t v169 = sub_1000DC9F8;
  uint64_t v170 = &unk_100238928;
  unint64_t v101 = _Block_copy(&aBlock);
  unint64_t v102 = v172;
  id v103 = v97;
  swift_retain(a5);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(v96);
  swift_retain(v100);
  swift_release(v102, v104, v105, v106, v107, v108, v109, v110);
  [v164 performBlockAndWait:v101];
  _Block_release(v101);
  LOBYTE(v101) = swift_isEscapingClosureAtFileLocation(v100, "", 108LL, 6054LL, 41LL, 1LL);
  swift_release((_TtC18TrustedPeersHelper6Client *)v14, v111, v112, v113, v114, v115, v116, v117);
  swift_release((_TtC18TrustedPeersHelper6Client *)v20, v118, v119, v120, v121, v122, v123, v124);
  swift_release(v165, v125, v126, v127, v128, v129, v130, v131);
  swift_release(v166, v132, v133, v134, v135, v136, v137, v138);
  swift_bridgeObjectRelease(v96, v139, v140, v141, v142, v143, v144, v145);
  swift_release((_TtC18TrustedPeersHelper6Client *)v98, v146, v147, v148, v149, v150, v151, v152);
  swift_release(v100, v153, v154, v155, v156, v157, v158, v159);
}

void sub_10016F414( uint64_t a1, char *a2, _TtC18TrustedPeersHelper6Client *a3, uint64_t (*a4)(void, void), _TtC18TrustedPeersHelper6Client *a5)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, v10);
  unint64_t v173 = (char *)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_allocObject(&unk_1002382D0, 40LL, 7LL);
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  unint64_t v169 = a4;
  *(void *)(v12 + 32) = a5;
  uint64_t v13 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_1002382F8, 32LL, 7LL);
  *(void *)v13->endpoint = sub_100171788;
  *(void *)v13->containerMap = v12;
  uint64_t v14 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238320, 24LL, 7LL);
  unint64_t v175 = v14;
  *(void *)v14->endpoint = a1;
  endpoint = (uint64_t *)v14->endpoint;
  uint64_t v16 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238348, 24LL, 7LL);
  uint64_t v170 = a3;
  swift_retain(a3);
  id v171 = a5;
  swift_retain(a5);
  swift_retain(v12);
  swift_bridgeObjectRetain(a1);
  unint64_t v17 = sub_10000BF84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v174 = v16;
  *(void *)v16->endpoint = v17;
  unint64_t v18 = (_TtC18TrustedPeersHelper6Client **)v16->endpoint;
  unint64_t v19 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v20 = swift_allocObject(&unk_100238370, 40LL, 7LL);
  *(void *)(v20 + 16) = endpoint;
  *(void *)(v20 + 24) = a2;
  *(void *)(v20 + 32) = v18;
  unint64_t v21 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238398, 32LL, 7LL);
  *(void *)v21->endpoint = sub_1001717F0;
  *(void *)v21->containerMap = v20;
  aBlock[4] = sub_100176BD4;
  id v177 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_1002383B0;
  SEL v22 = _Block_copy(aBlock);
  id v23 = v177;
  int64_t v24 = a2;
  swift_retain(v21);
  swift_release(v23, v25, v26, v27, v28, v29, v30, v31);
  [v19 performBlockAndWait:v22];
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v21, "", 108LL, 5200LL, 33LL, 1LL);
  swift_release(v21, v32, v33, v34, v35, v36, v37, v38);
  if ((v22 & 1) == 0)
  {
    uint64_t v41 = *endpoint;
    if ((*endpoint & 0xC000000000000001LL) != 0)
    {
      if (v41 < 0) {
        uint64_t v42 = *endpoint;
      }
      else {
        uint64_t v42 = v41 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*endpoint);
      uint64_t v43 = __CocoaSet.count.getter(v42);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v41, v44, v45, v46, v47, v48, v49, v50);
      if (v43) {
        goto LABEL_7;
      }
    }

    else if (*(void *)(v41 + 16))
    {
LABEL_7:
      __chkstk_darwin(v39, v40);
      *(&v169 - 2) = (uint64_t (*)(void, void))endpoint;
      uint64_t v51 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
      id v171 = (_TtC18TrustedPeersHelper6Client *)v20;
      uint64_t v52 = (uint64_t)v173;
      static Message.with(_:)(sub_10017180C, &v169 - 4, PolicyDocumentsRequest, v51);
      uint64_t v53 = *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v54 = *(void *)&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v24[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v53);
      uint64_t v55 = swift_allocObject(&unk_1002383E8, 56LL, 7LL);
      *(void *)(v55 + 16) = v24;
      *(void *)(v55 + 24) = sub_1001717C4;
      id v56 = v175;
      *(void *)(v55 + 32) = v13;
      *(void *)(v55 + 40) = v56;
      id v57 = v24;
      uint64_t v58 = v13;
      uint64_t v59 = v174;
      *(void *)(v55 + 48) = v174;
      uint64_t v60 = *(void *)(v54 + 16);
      SEL v61 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v60 + 80);
      id v62 = v57;
      swift_retain(v58);
      swift_retain(v56);
      swift_retain(v59);
      v61(v52, sub_100171830, v55, v53, v60);
      swift_release((_TtC18TrustedPeersHelper6Client *)v55, v63, v64, v65, v66, v67, v68, v69);
      sub_1000415CC(v52, type metadata accessor for FetchPolicyDocumentsRequest);
      swift_release((_TtC18TrustedPeersHelper6Client *)v12, v70, v71, v72, v73, v74, v75, v76);
      swift_release(v58, v77, v78, v79, v80, v81, v82, v83);
      swift_release(v171, v84, v85, v86, v87, v88, v89, v90);
      swift_release(v56, v91, v92, v93, v94, v95, v96, v97);
      id v105 = v59;
LABEL_15:
      swift_release(v105, v98, v99, v100, v101, v102, v103, v104);
      return;
    }

    uint64_t v106 = (uint64_t)*v18;
    if (((unint64_t)*v18 & 0xC000000000000001LL) != 0)
    {
      if (v106 < 0) {
        uint64_t v107 = (uint64_t)*v18;
      }
      else {
        uint64_t v107 = v106 & 0xFFFFFFFFFFFFFF8LL;
      }
      id v108 = v170;
      swift_retain(v170);
      id v109 = v171;
      swift_retain(v171);
      swift_bridgeObjectRetain(v106);
      Swift::Int v110 = sub_100153E14(v107);
    }

    else
    {
      id v108 = v170;
      swift_retain(v170);
      id v109 = v171;
      swift_retain(v171);
      uint64_t v168 = swift_bridgeObjectRetain(v106);
      Swift::Int v110 = sub_100154308(v168);
    }

    SEL v111 = (_TtC18TrustedPeersHelper6Client *)v110;
    sub_100135B78( v110,  0LL,  (uint64_t)v108,  v169,  (uint64_t)v109,  "fetchPolicyDocuments complete: %{public}s",  0xD000000000000025LL,  0x80000001001F9750LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v12, v112, v113, v114, v115, v116, v117, v118);
    swift_release(v13, v119, v120, v121, v122, v123, v124, v125);
    swift_release((_TtC18TrustedPeersHelper6Client *)v20, v126, v127, v128, v129, v130, v131, v132);
    swift_release(v175, v133, v134, v135, v136, v137, v138, v139);
    swift_release(v174, v140, v141, v142, v143, v144, v145, v146);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v106, v147, v148, v149, v150, v151, v152, v153);
    swift_release(v108, v154, v155, v156, v157, v158, v159, v160);
    swift_release(v109, v161, v162, v163, v164, v165, v166, v167);
    id v105 = v111;
    goto LABEL_15;
  }

  __break(1u);
}

void sub_10016F8E4(objc_class *a1, uint64_t a2, int a3, void *aBlock)
{
  uint64_t v7 = _Block_copy(aBlock);
  if (a2) {
    os_log_type_t v11 = static os_log_type_t.error.getter(v7, v8, v9, v10);
  }
  else {
    os_log_type_t v11 = static os_log_type_t.info.getter(v7);
  }
  os_log_type_t v12 = v11;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v13, (uint64_t)qword_1002567D0);
  swift_errorRetain(a2);
  uint64_t v14 = swift_errorRetain(a2);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  if (os_log_type_enabled(v15, v12))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    unint64_t v18 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a2)
    {
      uint64_t v38 = 0x203A726F727265LL;
      unint64_t v39 = 0xE700000000000000LL;
      uint64_t v37 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v19 = sub_100007578(&qword_100251D70);
      v20._countAndFlagsBits = String.init<A>(describing:)(&v37, v19);
      object = (_TtC18TrustedPeersHelper6Client *)v20._object;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(object, v22, v23, v24, v25, v26, v27, v28);
      swift_errorRelease();
      uint64_t v29 = v38;
      unint64_t v18 = (_TtC18TrustedPeersHelper6Client *)v39;
    }

    else
    {
      uint64_t v29 = 0x73736563637573LL;
    }

    uint64_t v38 = sub_10017C4C4(v29, (unint64_t)v18, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v18, v30, v31, v32, v33, v34, v35, v36);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v12, "fetchAccountSettings complete: %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD000000000000027LL, 0x80000001001F9590LL);
  _Block_copy(aBlock);
  sub_10017D1E8(a1, a2, (uint64_t)aBlock);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_10016FB60(char a1, void *a2, void *a3)
{
  unint64_t v6 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237DD0, 24LL, 7LL);
  *(void *)v6->endpoint = a3;
  uint64_t v7 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237DF8, 32LL, 7LL);
  *(void *)v7->endpoint = sub_1001711D4;
  *(void *)v7->containerMap = v6;
  uint64_t v8 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v8, 41LL, 7LL);
  _Block_copy(a3);
  swift_retain(v6);
  _Block_copy(a3);
  swift_retain(v6);
  uint64_t v9 = a2;
  uint64_t v10 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v9, 0xD000000000000027LL, 0x80000001001F9590LL);

  uint64_t v11 = swift_allocObject(&unk_100237E20, 40LL, 7LL);
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = sub_1001711DC;
  *(void *)(v11 + 32) = v7;
  if ((a1 & 1) != 0)
  {
    uint64_t v12 = swift_allocObject(&unk_100237EE8, 40LL, 7LL);
    *(void *)(v12 + 16) = sub_1001711E8;
    *(void *)(v12 + 24) = v11;
    *(void *)(v12 + 32) = v9;
    uint64_t v13 = v9;
    swift_retain(v7);
    swift_retain(v10);
    swift_retain(v11);
    sub_100137F18(0, (uint64_t)sub_100176C04, v12);
    swift_release_n(v6, 2LL);
    swift_release(v7, v14, v15, v16, v17, v18, v19, v20);
    swift_release((_TtC18TrustedPeersHelper6Client *)v12, v21, v22, v23, v24, v25, v26, v27);
    swift_release((_TtC18TrustedPeersHelper6Client *)v11, v28, v29, v30, v31, v32, v33, v34);
    swift_release(v10, v35, v36, v37, v38, v39, v40, v41);
    _Block_release(a3);
    return;
  }

  uint64_t v175 = 0LL;
  uint64_t v176 = 0LL;
  uint64_t v42 = *(void **)&v9[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v43 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237E48, 40LL, 7LL);
  *(void *)v43->endpoint = v9;
  *(void *)v43->containerMap = &v176;
  *(void *)v43[1]._TtCs12_SwiftObject_opaque = &v175;
  SEL v44 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237E70, 32LL, 7LL);
  *(void *)v44->endpoint = sub_100171248;
  *(void *)v44->containerMap = v43;
  uint64_t v172 = v43;
  aBlock[4] = sub_100176BD4;
  uint64_t v174 = v44;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC9F8;
  aBlock[3] = &unk_100237E88;
  id v45 = _Block_copy(aBlock);
  int64_t v46 = v174;
  id v171 = v9;
  swift_retain(v7);
  swift_retain(v10);
  swift_retain(v44);
  swift_release(v46, v47, v48, v49, v50, v51, v52, v53);
  [v42 performBlockAndWait:v45];
  _Block_release(v45);
  LOBYTE(v45) = swift_isEscapingClosureAtFileLocation(v44, "", 108LL, 5934LL, 37LL, 1LL);
  swift_release(v44, v54, v55, v56, v57, v58, v59, v60);
  if ((v45 & 1) == 0)
  {
    uint64_t v61 = v175;
    if (v175)
    {
      swift_errorRetain(v175);
      _Block_copy(a3);
      swift_retain(v6);
      swift_errorRetain(v61);
      sub_10016F8E4(0LL, v61, (int)v10, a3);
      _Block_release(a3);
      swift_release((_TtC18TrustedPeersHelper6Client *)v11, v62, v63, v64, v65, v66, v67, v68);
      swift_release(v10, v69, v70, v71, v72, v73, v74, v75);
      swift_release(v6, v76, v77, v78, v79, v80, v81, v82);
      swift_errorRelease();
      swift_errorRelease();
    }

    else
    {
      id v83 = v176;
      if (!v176)
      {
        uint64_t v134 = swift_allocObject(&unk_100237EC0, 40LL, 7LL);
        *(void *)(v134 + 16) = sub_1001711E8;
        *(void *)(v134 + 24) = v11;
        *(void *)(v134 + 32) = v171;
        id v135 = v171;
        swift_retain(v11);
        sub_100137D5C((uint64_t)sub_100171268, v134);
        swift_release_n(v6, 2LL);
        swift_release(v7, v136, v137, v138, v139, v140, v141, v142);
        swift_release(v172, v143, v144, v145, v146, v147, v148, v149);
        swift_release((_TtC18TrustedPeersHelper6Client *)v134, v150, v151, v152, v153, v154, v155, v156);
        swift_release((_TtC18TrustedPeersHelper6Client *)v11, v157, v158, v159, v160, v161, v162, v163);
        swift_release(v10, v164, v165, v166, v167, v168, v169, v170);
        goto LABEL_9;
      }

      _Block_copy(a3);
      swift_bridgeObjectRetain(v83);
      swift_retain(v6);
      sub_10016F8E4(v83, 0LL, (int)v10, a3);
      _Block_release(a3);
      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v83, v84, v85, v86, v87, v88, v89, v90);
      swift_release((_TtC18TrustedPeersHelper6Client *)v11, v91, v92, v93, v94, v95, v96, v97);
      swift_release(v10, v98, v99, v100, v101, v102, v103, v104);
      swift_release(v6, v105, v106, v107, v108, v109, v110, v111);
    }

    swift_errorRelease();
    SEL v112 = (_TtC18TrustedPeersHelper6Client *)v176;
    swift_release_n(v6, 2LL);
    swift_release(v7, v113, v114, v115, v116, v117, v118, v119);
    swift_release(v172, v120, v121, v122, v123, v124, v125, v126);
    swift_bridgeObjectRelease(v112, v127, v128, v129, v130, v131, v132, v133);
LABEL_9:
    _Block_release(a3);
    return;
  }

  __break(1u);
}

uint64_t sub_10016FFD0(void *a1, void *a2)
{
  if (!a2) {
    return 1LL;
  }
  id v3 = a2;
  id v4 = [a1 includedPeerIDs];
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  &protocol witness table for String);

  id v6 = [v3 includedPeerIDs];
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for String,  &protocol witness table for String);

  LOBYTE(v6) = sub_100149218(v5, v7);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  id v8 = [a1 excludedPeerIDs];
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v8,  &type metadata for String,  &protocol witness table for String);

  id v10 = [v3 excludedPeerIDs];
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for String,  &protocol witness table for String);

  LOBYTE(v10) = sub_100149218(v9, v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v11);
  if ((v10 & 1) != 0)
  {
    id v12 = [a1 preapprovals];
    uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for String,  &protocol witness table for String);

    id v14 = [v3 preapprovals];
    uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for String,  &protocol witness table for String);

    LOBYTE(v14) = sub_100149218(v13, v15);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);

    char v16 = v14 ^ 1;
  }

  else
  {
LABEL_5:

    char v16 = 1;
  }

  return v16 & 1;
}

void sub_1001701D8(void *a1, int a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  if (a1) {
    os_log_type_t v9 = static os_log_type_t.error.getter(v5, v6, v7, v8);
  }
  else {
    os_log_type_t v9 = static os_log_type_t.debug.getter(v5);
  }
  os_log_type_t v10 = v9;
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v11, (uint64_t)qword_1002567D0);
  swift_errorRetain(a1);
  uint64_t v12 = swift_errorRetain(a1);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v10))
  {
    id v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = v15;
    *(_DWORD *)id v14 = 136446210;
    char v16 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a1)
    {
      uint64_t v39 = 0x203A726F727265LL;
      unint64_t v40 = 0xE700000000000000LL;
      id v38 = a1;
      swift_errorRetain(a1);
      swift_errorRetain(a1);
      uint64_t v17 = sub_100007578(&qword_100251D70);
      v18._countAndFlagsBits = String.init<A>(describing:)(&v38, v17);
      object = (_TtC18TrustedPeersHelper6Client *)v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object, v20, v21, v22, v23, v24, v25, v26);
      swift_errorRelease();
      uint64_t v27 = v39;
      char v16 = (_TtC18TrustedPeersHelper6Client *)v40;
    }

    else
    {
      uint64_t v27 = 0x73736563637573LL;
    }

    uint64_t v39 = sub_10017C4C4(v27, (unint64_t)v16, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v16, v28, v29, v30, v31, v32, v33, v34);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v10, "testSemaphore complete: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD000000000000019LL, 0x80000001001F9510LL);
  if (a1)
  {
    swift_getErrorValue(a1, v43, v42);
    uint64_t v35 = v42[1];
    uint64_t v36 = v42[2];
    _Block_copy(aBlock);
    id v37 = sub_100177B68(v35, v36);
    a1 = (void *)_convertErrorToNSError(_:)(v37);
  }

  else
  {
    _Block_copy(aBlock);
  }

  (*((void (**)(void *, void *))aBlock + 2))(aBlock, a1);

  swift_errorRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_1001704A0( uint64_t a1, void (*a2)(void, void), void *a3, void (**a4)(void, void))
{
  id v147 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v141 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v140 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  id v139 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v146 = type metadata accessor for DispatchTime(0LL);
  uint64_t v138 = *(void *)(v146 - 8);
  uint64_t v15 = __chkstk_darwin(v146, v14);
  id v137 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v17);
  id v145 = (char *)&v130 - v18;
  uint64_t v136 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v19 = *(void *)(v136 - 8);
  __chkstk_darwin(v136, v20);
  int64_t v22 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v143 = *(void *)(v23 - 8);
  uint64_t v144 = v23;
  __chkstk_darwin(v23, v24);
  id v142 = (uint64_t *)((char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = swift_allocObject(&unk_100237AB0, 24LL, 7LL);
  *(void *)(v26 + 16) = a4;
  uint64_t v27 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100237AD8, 32LL, 7LL);
  *(void *)v27->endpoint = sub_100170F14;
  *(void *)v27->containerMap = v26;
  _Block_copy(a4);
  swift_retain(v26);
  _Block_copy(a4);
  swift_retain(v26);
  _Block_copy(a4);
  swift_retain(v26);
  _Block_copy(a4);
  uint64_t v28 = swift_retain(v26);
  if (!SecIsInternalRelease(v28))
  {
    unint64_t v49 = sub_100043F74();
    uint64_t v50 = swift_allocError(&type metadata for ContainerError, v49, 0LL, 0LL);
    *(_OWORD *)uint64_t v51 = xmmword_1001E6970;
    *(_BYTE *)(v51 + 16) = 13;
    swift_getErrorValue(v50, v156, v155);
    uint64_t v52 = v155[1];
    uint64_t v53 = v155[2];
    _Block_copy(a4);
    id v54 = sub_100177B68(v52, v53);
    id v55 = (void *)_convertErrorToNSError(_:)(v54);
    ((void (**)(void, void *))a4)[2](a4, v55);

    swift_errorRelease();
    _Block_release(a4);
    swift_errorRelease();
    swift_release_n(v26, 4LL);
    id v48 = v27;
    goto LABEL_7;
  }

  uint64_t v135 = v19;
  uint64_t v132 = v8;
  uint64_t v133 = v11;
  uint64_t v134 = v7;
  uint64_t v29 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v29, 41LL, 7LL);
  id v30 = a3;
  id v31 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v30, 0xD000000000000019LL, 0x80000001001F9510LL);

  uint64_t v32 = swift_allocObject(&unk_100237B00, 40LL, 7LL);
  *(void *)(v32 + 16) = v31;
  *(void *)(v32 + 24) = sub_100170F1C;
  *(void *)(v32 + 32) = v27;
  BOOL v33 = v147;
  if (a1 == 0x796C7065726F6ELL && v147 == (void (*)(void, void))0xE700000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x796C7065726F6ELL, 0xE700000000000000LL, a1, v147, 0LL) & 1) != 0)
  {
    swift_release_n(v26, 4LL);
    id v48 = (_TtC18TrustedPeersHelper6Client *)v32;
LABEL_7:
    swift_release(v48, v41, v42, v43, v44, v45, v46, v47);
    goto LABEL_8;
  }

  if (a1 == 110 && v33 == (void (*)(void, void))0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(110LL, 0xE100000000000000LL, a1, v33, 0LL) & 1) != 0)
  {
    swift_release((_TtC18TrustedPeersHelper6Client *)v32, v34, v35, v36, v37, v38, v39, v40);
    swift_release_n(v26, 4LL);
    goto LABEL_8;
  }

  id v131 = v31;
  if (a1 == 0x6863746170736964LL && v33 == (void (*)(void, void))0xE800000000000000LL
    || ((char v96 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6863746170736964LL, 0xE800000000000000LL, a1, v33, 0LL),
         a1 == 100)
      ? (BOOL v97 = v33 == (void (*)(void, void))0xE100000000000000LL)
      : (BOOL v97 = 0),
        !v97 ? (char v98 = 0) : (char v98 = 1),
        (v96 & 1) != 0
     || (v98 & 1) != 0
     || (_stringCompareWithSmolCheck(_:_:expecting:)(100LL, 0xE100000000000000LL, a1, v33, 0LL) & 1) != 0))
  {
    id v56 = v142;
    void *v142 = 1LL;
    (*(void (**)(void *, void, uint64_t))(v143 + 104))( v56,  enum case for DispatchTimeInterval.seconds(_:),  v144);
    sub_100007620(0LL, &qword_100250FF8, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v57 = v135;
    uint64_t v58 = v136;
    (*(void (**)(char *, void, uint64_t))(v135 + 104))( v22,  enum case for DispatchQoS.QoSClass.userInitiated(_:),  v136);
    swift_retain(v27);
    swift_retain(v31);
    uint64_t v130 = static OS_dispatch_queue.global(qos:)(v22);
    uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v22, v58);
    id v60 = v137;
    static DispatchTime.now()(v59);
    DispatchTime.advanced(by:)(v56);
    id v147 = *(void (**)(void, void))(v138 + 8);
    v147(v60, v146);
    uint64_t v61 = swift_allocObject(&unk_100237B78, 32LL, 7LL);
    *(void *)(v61 + 16) = sub_100170F28;
    *(void *)(v61 + 24) = v32;
    id v153 = sub_100170F6C;
    uint64_t v154 = v61;
    aBlock = _NSConcreteStackBlock;
    uint64_t v150 = 1107296256LL;
    SEL v62 = &unk_100237B90;
LABEL_16:
    id v151 = sub_100058388;
    id v152 = v62;
    id v63 = _Block_copy(&aBlock);
    uint64_t v64 = swift_retain(v32);
    id v65 = v139;
    static DispatchQoS.unspecified.getter(v64);
    id v148 = _swiftEmptyArrayStorage;
    uint64_t v66 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v67 = sub_100007578(&qword_100251850);
    uint64_t v68 = sub_1001738E0(&qword_100251858, &qword_100251850, (uint64_t)&protocol conformance descriptor for [A]);
    SEL v69 = v141;
    uint64_t v70 = v67;
    uint64_t v71 = v134;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v148, v70, v68, v134, v66);
    id v72 = v145;
    id v73 = (void *)v130;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v145, v65, v69, v63);
    _Block_release(v63);
    swift_release(v131, v74, v75, v76, v77, v78, v79, v80);
    swift_release((_TtC18TrustedPeersHelper6Client *)v32, v81, v82, v83, v84, v85, v86, v87);

    (*(void (**)(char *, uint64_t))(v132 + 8))(v69, v71);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v65, v133);
    v147(v72, v146);
    (*(void (**)(void *, uint64_t))(v143 + 8))(v142, v144);
    id v88 = (_TtC18TrustedPeersHelper6Client *)v154;
    swift_release_n(v26, 4LL);
    swift_release(v27, v89, v90, v91, v92, v93, v94, v95);
    id v48 = v88;
    goto LABEL_7;
  }

  id v99 = v31;
  uint64_t v100 = v135;
  if (a1 == 0xD000000000000010LL && v33 == (void (*)(void, void))0x80000001001F9530LL
    || ((char v106 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001001F9530LL, a1, v33, 0LL),
         a1 == 43)
      ? (BOOL v107 = v33 == (void (*)(void, void))0xE100000000000000LL)
      : (BOOL v107 = 0),
        !v107 ? (char v108 = 0) : (char v108 = 1),
        (v106 & 1) != 0
     || (v108 & 1) != 0
     || (_stringCompareWithSmolCheck(_:_:expecting:)(43LL, 0xE100000000000000LL, a1, v33, 0LL) & 1) != 0
     || a1 == 28260 && v33 == (void (*)(void, void))0xE200000000000000LL
     || (_stringCompareWithSmolCheck(_:_:expecting:)(28260LL, 0xE200000000000000LL, a1, v33, 0LL) & 1) != 0
     || a1 == 7220580 && v33 == (void (*)(void, void))0xE300000000000000LL
     || (_stringCompareWithSmolCheck(_:_:expecting:)(7220580LL, 0xE300000000000000LL, a1, v33, 0LL) & 1) != 0))
  {
    id v101 = v142;
    void *v142 = 1LL;
    (*(void (**)(void *, void, uint64_t))(v143 + 104))( v101,  enum case for DispatchTimeInterval.seconds(_:),  v144);
    sub_100007620(0LL, &qword_100250FF8, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v102 = v136;
    (*(void (**)(char *, void, uint64_t))(v100 + 104))( v22,  enum case for DispatchQoS.QoSClass.userInitiated(_:),  v136);
    swift_retain(v27);
    swift_retain(v99);
    uint64_t v130 = static OS_dispatch_queue.global(qos:)(v22);
    uint64_t v103 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v22, v102);
    id v104 = v137;
    static DispatchTime.now()(v103);
    DispatchTime.advanced(by:)(v101);
    id v147 = *(void (**)(void, void))(v138 + 8);
    v147(v104, v146);
    uint64_t v105 = swift_allocObject(&unk_100237B28, 32LL, 7LL);
    *(void *)(v105 + 16) = sub_100170F28;
    *(void *)(v105 + 24) = v32;
    id v153 = ResetReason.rawValue.getter;
    uint64_t v154 = v105;
    aBlock = _NSConcreteStackBlock;
    uint64_t v150 = 1107296256LL;
    SEL v62 = &unk_100237B40;
    goto LABEL_16;
  }

  if (a1 == 0x722D656C62756F64LL && v147 == (void (*)(void, void))0xEE00657361656C65LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x722D656C62756F64LL, 0xEE00657361656C65LL, a1, v147, 0LL) & 1) != 0)
  {
    _Block_copy(a4);
    swift_retain(v26);
    swift_retain(v27);
    swift_retain(v99);
    sub_1001701D8(0LL, (int)v99, a4);
  }

  else
  {
    _Block_copy(a4);
    swift_retain(v26);
    swift_retain(v27);
    swift_retain(v99);
  }

  sub_1001701D8(0LL, (int)v99, a4);
  _Block_release(a4);
  swift_release(v27, v109, v110, v111, v112, v113, v114, v115);
  swift_release((_TtC18TrustedPeersHelper6Client *)v32, v116, v117, v118, v119, v120, v121, v122);
  swift_release(v99, v123, v124, v125, v126, v127, v128, v129);
  swift_release_n(v26, 5LL);
LABEL_8:
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
}

uint64_t sub_100170EF0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100170F14(uint64_t a1)
{
}

uint64_t sub_100170F1C(uint64_t a1)
{
  return sub_10017BF10(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100170F28(uint64_t a1)
{
  return sub_100146B88( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(void))(v1 + 24),  *(void *)(v1 + 32),  (uint64_t (*)(void))&static os_log_type_t.debug.getter,  "testSemaphore complete: %{public}s",  0xD000000000000019LL,  0x80000001001F9510LL);
}

uint64_t sub_100170F6C()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0LL);
}

void sub_100170F94()
{
}

uint64_t sub_100170FA0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100170FB0()
{
  swift_errorRelease(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100171004()
{
  return sub_100176034((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_100145140);
}

uint64_t sub_100171010()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100171020(uint64_t a1)
{
}

void sub_100171044(uint64_t a1)
{
}

uint64_t sub_100171050()
{
  uint64_t v1 = type metadata accessor for RemoveRecoveryKeyResponse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v0 + v4, v6);
  uint64_t v8 = (void *)(v0 + v4 + *(int *)(v1 + 20));
  uint64_t v9 = type metadata accessor for Changes(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    swift_bridgeObjectRelease(v8[1]);
    swift_bridgeObjectRelease(v8[2]);
    sub_10000852C(v8[3], v8[4]);
    sub_10000852C(v8[5], v8[6]);
    v7((uint64_t)v8 + *(int *)(v9 + 36), v6);
  }

  unint64_t v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = v10 + 16;
  swift_release(*(void *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_100171160()
{
  return sub_100171700( type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t (*)(void, void, unint64_t, void, void))sub_100146360);
}

uint64_t sub_100171174()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100171188(int16x8_t a1)
{
  a1.i64[0] = 0x4000200010000LL;
  sub_100143224( *(void *)(v1 + 16),  *(void (**)(void, void))(v1 + 24),  a1,  *(void *)(v1 + 32),  (SEL *)&selRef_isRecoveryKeyEnrolledWithError_,  "recoveryKey is enrolled %{BOOL,public}d",  "Error determining whether Recovery Key is enrolled: %{public}@");
}

uint64_t sub_1001711C4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001711D4(objc_class *a1, uint64_t a2)
{
}

uint64_t sub_1001711DC(uint64_t a1, uint64_t a2)
{
  return sub_100196FFC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001711E8(uint64_t a1, uint64_t a2)
{
  return sub_100135B78( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32),  "fetchAccountSettings complete: %{public}s",  0xD000000000000027LL,  0x80000001001F9590LL);
}

uint64_t sub_100171224()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100171248()
{
}

uint64_t sub_100171254()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100171268(void *a1)
{
}

void sub_10017127C()
{
}

uint64_t sub_100171288()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171298()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1001712BC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10011AA04();
  uint64_t v2 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  [*(id *)(v1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO) setAccountSettings:0];
  return [*(id *)(v1 + v2) setAccountSettingsDate:0];
}

uint64_t sub_100171308()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

int *sub_100171318(int *result)
{
  if (*(_BYTE *)(v1 + 16)) {
    int v2 = 17;
  }
  else {
    int v2 = 16;
  }
  if (*(_BYTE *)(v1 + 17)) {
    int v3 = 2;
  }
  else {
    int v3 = 0;
  }
  *uint64_t result = v3 | v2;
  return result;
}

uint64_t sub_100171344()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100171380(uint64_t a1)
{
  return sub_100172B94( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100107C38);
}

uint64_t sub_100171390()
{
  return sub_10004CF10((uint64_t (*)(void, void, void, void, void, void, void))sub_1001155AC);
}

uint64_t sub_10017139C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001713AC(uint64_t *a1)
{
  return sub_10013C7F0(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)sub_1001713FC);
}

uint64_t sub_1001713D4(uint64_t a1)
{
  return sub_100115D08(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001713E0()
{
  return sub_10013D1C0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1001713FC(uint64_t *a1)
{
  return sub_100114DB0(a1, *(void *)(v1 + 16));
}

uint64_t sub_100171414()
{
  return sub_1001727D8((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100171420()
{
}

uint64_t sub_10017142C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017143C()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100171480()
{
  return sub_1001728F8((uint64_t (*)(void, void, void, void, void, void, void, void))sub_10010121C);
}

uint64_t sub_10017148C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017149C()
{
  sub_10000852C(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10000852C(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_release(*(void *)(v0 + 120));
  return swift_deallocObject(v0, 128LL, 7LL);
}

uint64_t sub_100171500()
{
  return sub_100102828( *(void *)(v0 + 16),  *(void **)(v0 + 24),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 32),  *(void **)(v0 + 40),  *(char **)(v0 + 48),  *(void **)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void **)(v0 + 96),  *(void **)(v0 + 104),  *(void (**)(void, _TtC18TrustedPeersHelper6Client *))(v0 + 112),  *(void **)(v0 + 120));
}

uint64_t sub_10017153C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10017154C(uint64_t a1)
{
}

uint64_t sub_100171584()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001715B8(uint64_t a1)
{
}

uint64_t sub_1001715C4()
{
  uint64_t v1 = type metadata accessor for SetRecoveryKeyResponse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v6 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  uint64_t v9 = (void *)(v0 + v4 + *(int *)(v1 + 24));
  uint64_t v10 = type metadata accessor for Changes(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
  {
    swift_bridgeObjectRelease(v9[1]);
    swift_bridgeObjectRelease(v9[2]);
    sub_10000852C(v9[3], v9[4]);
    sub_10000852C(v9[5], v9[6]);
    v8((uint64_t)v9 + *(int *)(v10 + 36), v7);
  }

  unint64_t v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = v11 + 16;
  swift_release(*(void *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v12, v3 | 7);
}

uint64_t sub_1001716EC()
{
  return sub_100171700( type metadata accessor for SetRecoveryKeyResponse,  (uint64_t (*)(void, void, unint64_t, void, void))sub_100103664);
}

uint64_t sub_100171700( uint64_t (*a1)(void), uint64_t (*a2)(void, void, unint64_t, void, void))
{
  uint64_t v3 = *(void *)(a1(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (void *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return a2(*(void *)(v2 + 16), *(void *)(v2 + 24), v2 + v4, *v5, v5[1]);
}

uint64_t sub_10017175C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10017176C(uint64_t a1)
{
}

uint64_t sub_100171788(uint64_t a1, uint64_t a2)
{
  return sub_100135B78( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32),  "fetchPolicyDocuments complete: %{public}s",  0xD000000000000025LL,  0x80000001001F9750LL);
}

void sub_1001717C4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001717CC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001717F0()
{
  return sub_1001200B0(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(Swift::Int **)(v0 + 32));
}

uint64_t sub_1001717FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017180C(void *a1)
{
  return sub_1001205D4(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_100171824()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_100171834()
{
  uint64_t PolicyDocumentsResponse = type metadata accessor for FetchPolicyDocumentsResponse(0LL);
  uint64_t v2 = *(void *)(PolicyDocumentsResponse - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (((((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v9 = v8 + *(int *)(PolicyDocumentsResponse + 20);
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  swift_release(*(void *)(v0 + v6 + 8));

  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_100171900()
{
  uint64_t v1 = *(void *)(type metadata accessor for FetchPolicyDocumentsResponse(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100120E34( (uint64_t *)(v0 + v2),  *(void (**)(void, void))(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void **)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(uint64_t **)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(char **)(v0 + ((((((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100171968()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171978(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100171984(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100007620(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001719C4(void *a1)
{
  return sub_100120940(a1, *(id *)(v1 + 16));
}

uint64_t sub_1001719DC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100171A20(int a1, uint64_t a2)
{
}

uint64_t sub_100171A38()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171A48()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_100171A54(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  swift_bridgeObjectRelease(a1);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100171A84()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));

  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100171AC8()
{
  return sub_10004CF10((uint64_t (*)(void, void, void, void, void, void, void))sub_1001346E8);
}

uint64_t sub_100171AD4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171AE4(uint64_t a1)
{
  return sub_10013526C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100171B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100135538(a1, a2, a3, *(uint64_t (**)(void, void))(v3 + 16));
}

uint64_t sub_100171B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(a1, a3);
}

uint64_t sub_100171B34()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    swift_bridgeObjectRelease(*(void *)(v0 + 104));
  }

  return swift_deallocObject(v0, 145LL, 7LL);
}

uint64_t sub_100171BA0(uint64_t a1)
{
  return sub_10013970C( a1,  *(void (**)(void, void, uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  (void *)(v1 + 40),  *(_BYTE *)(v1 + 144));
}

id sub_100171BB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  if (a2 != 1)
  {
    id v16 = a13;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a9);
    id v17 = a11;
    return a12;
  }

  return result;
}

uint64_t sub_100171C38()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100171C7C()
{
}

uint64_t sub_100171C8C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171C9C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  sub_10000852C(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10000852C(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10000852C(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10000852C(*(void *)(v0 + 144), *(void *)(v0 + 152));
  return swift_deallocObject(v0, 160LL, 7LL);
}

uint64_t sub_100171D18(uint64_t a1, uint64_t a2)
{
  return sub_100175E28( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1001304F0);
}

uint64_t sub_100171D24()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));

  swift_release(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  sub_10000852C(*(void *)(v0 + 104), *(void *)(v0 + 112));
  sub_10000852C(*(void *)(v0 + 120), *(void *)(v0 + 128));
  sub_10000852C(*(void *)(v0 + 136), *(void *)(v0 + 144));
  sub_10000852C(*(void *)(v0 + 152), *(void *)(v0 + 160));
  return swift_deallocObject(v0, 168LL, 7LL);
}

uint64_t sub_100171DA8()
{
  return sub_100172C30((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100130CCC);
}

uint64_t sub_100171DB4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171DC4(uint64_t a1)
{
  return sub_100132E70( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 48),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t sub_100171DE8()
{
  uint64_t v1 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  uint64_t v6 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 16));
  uint64_t v7 = v0 + v4 + v1[6];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v0 + v4 + v1[7];
  uint64_t v11 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    sub_10000852C(*(void *)v10, *(void *)(v10 + 8));
    sub_10000852C(*(void *)(v10 + 16), *(void *)(v10 + 24));
    v9(v10 + *(int *)(v11 + 24), v8);
  }

  uint64_t v12 = v6 + v1[8];
  uint64_t v13 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    sub_10000852C(*(void *)v12, *(void *)(v12 + 8));
    sub_10000852C(*(void *)(v12 + 16), *(void *)(v12 + 24));
    v9(v12 + *(int *)(v13 + 24), v8);
  }

  uint64_t v14 = v6 + v1[9];
  uint64_t v15 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    sub_10000852C(*(void *)v14, *(void *)(v14 + 8));
    sub_10000852C(*(void *)(v14 + 16), *(void *)(v14 + 24));
    v9(v14 + *(int *)(v15 + 24), v8);
  }

  uint64_t v16 = v6 + v1[10];
  uint64_t v17 = type metadata accessor for SignedRecoveryVoucher(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v16, 1LL, v17))
  {
    sub_10000852C(*(void *)v16, *(void *)(v16 + 8));
    sub_10000852C(*(void *)(v16 + 16), *(void *)(v16 + 24));
    v9(v16 + *(int *)(v17 + 24), v8);
  }

  uint64_t v18 = v6 + v1[11];
  uint64_t v19 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v18, 1LL, v19))
  {
    sub_10000852C(*(void *)v18, *(void *)(v18 + 8));
    sub_10000852C(*(void *)(v18 + 16), *(void *)(v18 + 24));
    v9(v18 + *(int *)(v19 + 24), v8);
  }

  unint64_t v20 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8LL;

  swift_release(*(void *)(v0 + v22 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v23 + 8));
  return swift_deallocObject(v0, v23 + 16, v3 | 7);
}

void sub_100172074(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Peer(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1001331BC( a1,  *(char **)(v1 + 16),  v1 + v4,  *(void **)(v1 + v5),  *(void **)(v1 + v6),  *(void (**)(void, void, void *, void, _TtC18TrustedPeersHelper6Client *))(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100172104()
{
  uint64_t v1 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v35 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v35 + 24) & ~v35;
  unint64_t v32 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v4 = type metadata accessor for JoinWithVoucherResponse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v33 = v4;
  uint64_t v34 = *(void *)(v5 + 64);

  uint64_t v7 = v0 + v3;
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 16));
  uint64_t v8 = v0 + v3 + v1[6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  uint64_t v11 = v7 + v1[7];
  uint64_t v12 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12))
  {
    sub_10000852C(*(void *)v11, *(void *)(v11 + 8));
    sub_10000852C(*(void *)(v11 + 16), *(void *)(v11 + 24));
    v10(v11 + *(int *)(v12 + 24), v9);
  }

  unint64_t v13 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = v7 + v1[8];
  uint64_t v15 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    sub_10000852C(*(void *)v14, *(void *)(v14 + 8));
    sub_10000852C(*(void *)(v14 + 16), *(void *)(v14 + 24));
    v10(v14 + *(int *)(v15 + 24), v9);
  }

  uint64_t v16 = v6;
  uint64_t v17 = v6 + v13;
  uint64_t v18 = v7 + v1[9];
  uint64_t v19 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v18, 1LL, v19))
  {
    sub_10000852C(*(void *)v18, *(void *)(v18 + 8));
    sub_10000852C(*(void *)(v18 + 16), *(void *)(v18 + 24));
    v10(v18 + *(int *)(v19 + 24), v9);
  }

  uint64_t v20 = v17 + 8;
  uint64_t v21 = v7 + v1[10];
  uint64_t v22 = type metadata accessor for SignedRecoveryVoucher(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL))(v21, 1LL, v22))
  {
    sub_10000852C(*(void *)v21, *(void *)(v21 + 8));
    sub_10000852C(*(void *)(v21 + 16), *(void *)(v21 + 24));
    v10(v21 + *(int *)(v22 + 24), v9);
  }

  uint64_t v23 = v20 & ~v16;
  uint64_t v24 = v16;
  uint64_t v25 = v7 + v1[11];
  uint64_t v26 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48LL))(v25, 1LL, v26))
  {
    sub_10000852C(*(void *)v25, *(void *)(v25 + 8));
    sub_10000852C(*(void *)(v25 + 16), *(void *)(v25 + 24));
    v10(v25 + *(int *)(v26 + 24), v9);
  }

  swift_bridgeObjectRelease(*(void *)(v0 + v23));
  v10(v0 + v23 + *(int *)(v33 + 20), v9);
  uint64_t v27 = (void *)(v0 + v23 + *(int *)(v33 + 24));
  uint64_t v28 = type metadata accessor for Changes(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v27, 1LL, v28))
  {
    swift_bridgeObjectRelease(v27[1]);
    swift_bridgeObjectRelease(v27[2]);
    sub_10000852C(v27[3], v27[4]);
    sub_10000852C(v27[5], v27[6]);
    v10((uint64_t)v27 + *(int *)(v28 + 36), v9);
  }

  unint64_t v29 = (v34 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + v29 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v30 + 8));
  return swift_deallocObject(v0, v30 + 16, v35 | v24 | 7);
}

void sub_100172460()
{
  uint64_t v1 = *(void *)(type metadata accessor for Peer(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(type metadata accessor for JoinWithVoucherResponse(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1001336E8( *(void *)(v0 + 16),  v0 + v2,  *(void **)(v0 + v3),  *(void **)(v0 + v4),  (_TtC18TrustedPeersHelper6Client **)(v0 + v6),  *(void (**)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, id, void))(v0 + v7),  *(void *)(v0 + v7 + 8),  *(void *)(v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100172518()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100172528(uint64_t *a1@<X8>)
{
}

void sub_100172548(uint64_t a1, void *a2)
{
}

uint64_t sub_100172558()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172568()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

void sub_100172578()
{
}

uint64_t sub_100172584()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172598()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001725CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001725DC()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100172628(uint64_t a1, uint64_t a2)
{
  return sub_100173880( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void))sub_1001117C8);
}

uint64_t sub_100172634()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100172688(uint64_t a1, uint64_t a2)
{
  return sub_1001765C8( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void))sub_100111AD0);
}

uint64_t sub_100172694(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10017269C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1001726E8(uint64_t a1, uint64_t a2)
{
  return sub_100175FA8( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))sub_10010F3C4);
}

uint64_t sub_1001726F4()
{
  return sub_100172E74((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100172700(void *a1, uint64_t a2)
{
}

uint64_t sub_100172710()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100172764(uint64_t a1, uint64_t a2)
{
  return sub_100172988( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void))sub_10010B760);
}

uint64_t sub_100172770()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001727A4(uint64_t a1, void *a2)
{
  return sub_100049208(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1001727B0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001727C0()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_1001727CC()
{
  return sub_1001727D8((void (*)(void))&_swift_release);
}

uint64_t sub_1001727D8(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));
  return swift_deallocObject(v1, 48LL, 7LL);
}

uint64_t sub_100172818()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017282C(uint64_t a1, uint64_t a2)
{
  return sub_100175FA8( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))sub_100046C54);
}

uint64_t sub_100172838()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172848()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_100172854()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100172890()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001728A0()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1001728EC()
{
  return sub_1001728F8((uint64_t (*)(void, void, void, void, void, void, void, void))sub_100109974);
}

uint64_t sub_1001728F8( uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_100172910()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172920()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));

  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10017297C(uint64_t a1, uint64_t a2)
{
  return sub_100172988( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void))sub_10010A638);
}

uint64_t sub_100172988( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], v3[10], v3[11]);
}

uint64_t sub_1001729C4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001729F8(uint64_t a1, uint64_t a2)
{
  return sub_100042F2C( a1,  a2,  *(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(void **)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48));
}

uint64_t sub_100172A08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172A18()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_100172A24()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100172A64()
{
  return sub_100172C30((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000FD72C);
}

uint64_t sub_100172A70()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172A80(uint64_t a1)
{
  return sub_10004580C(a1, *(void **)(v1 + 16));
}

void sub_100172A98(uint64_t a1)
{
}

uint64_t sub_100172AB4()
{
  swift_release(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100172B10(unsigned int (*a1)(uint64_t, uint64_t, uint64_t))
{
  return sub_1000FFD5C( a1,  *(_TtC18TrustedPeersHelper6Client **)(v1 + 16),  *(uint8_t **)(v1 + 24),  *(void **)(v1 + 32),  *(void **)(v1 + 40),  *(void (**)(uint64_t, uint64_t, _TtC18TrustedPeersHelper6Client *, void *, uint64_t))(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 88));
}

uint64_t sub_100172B4C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100172B88(uint64_t a1)
{
  return sub_100172B94( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100100D94);
}

uint64_t sub_100172B94( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100172BAC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));

  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  sub_10000852C(*(void *)(v0 + 104), *(void *)(v0 + 112));
  sub_10000852C(*(void *)(v0 + 120), *(void *)(v0 + 128));
  sub_10000852C(*(void *)(v0 + 136), *(void *)(v0 + 144));
  sub_10000852C(*(void *)(v0 + 152), *(void *)(v0 + 160));
  return swift_deallocObject(v0, 168LL, 7LL);
}

uint64_t sub_100172C30( uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1( v1[2],  v1[3],  v1[4],  v1[5],  v1[6],  v1[7],  v1[8],  v1[9],  v1[10],  v1[11],  v1[12],  v1[13],  v1[14],  v1[15],  v1[16],  v1[17],  v1[18],  v1[19],  v1[20]);
}

uint64_t sub_100172C80()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172C90()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  swift_bridgeObjectRelease(*(void *)(v0 + 128));

  swift_release(*(void *)(v0 + 144));
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t sub_100172D0C(void *a1, uint64_t a2)
{
  return sub_1000F8344( a1,  a2,  *(void (**)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(char **)(v2 + 48),  *(_DWORD *)(v2 + 56),  *(void **)(v2 + 64),  *(void *)(v2 + 72),  *(void **)(v2 + 80),  *(void *)(v2 + 88),  *(void *)(v2 + 96),  *(void *)(v2 + 104),  *(void *)(v2 + 112),  *(void *)(v2 + 120),  *(void *)(v2 + 128),  *(void **)(v2 + 136),  *(void *)(v2 + 144));
}

void sub_100172D5C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100172D68()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172D78()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_100172D84()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));

  swift_release(*(void *)(v0 + 128));
  swift_release(*(void *)(v0 + 136));
  return swift_deallocObject(v0, 144LL, 7LL);
}

void sub_100172DF8()
{
}

uint64_t sub_100172E40()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100172E50(uint64_t *a1)
{
  return sub_1000F9C44(a1, v1);
}

uint64_t sub_100172E68()
{
  return sub_100172E74((void (*)(void))&_swift_release);
}

uint64_t sub_100172E74(void (*a1)(void))
{
  a1(*(void *)(v1 + 56));
  return swift_deallocObject(v1, 64LL, 7LL);
}

uint64_t sub_100172EC4(uint64_t a1)
{
  return sub_1000F9CB0( a1,  *(void **)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

__n128 sub_100172ED4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  return result;
}

uint64_t sub_100172F0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1001789E8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  *(void *)(v12 + 16),  *(void *)(v12 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v12 + 32));
}

uint64_t sub_100172F4C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1000F42A4( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  *(void *)(v12 + 16),  *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24));
}

uint64_t sub_100172F88()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_bridgeObjectRelease(*(void *)(v0 + 136));

  return swift_deallocObject(v0, 160LL, 7LL);
}

uint64_t sub_10017300C(void *a1, uint64_t a2)
{
  return sub_1000F4604( a1,  a2,  *(void (**)(void, void, void, void, void, void, void, void, void, void, void, void))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(char **)(v2 + 48),  *(_DWORD *)(v2 + 56),  *(void **)(v2 + 64),  *(void **)(v2 + 72),  *(void *)(v2 + 80),  *(void **)(v2 + 88),  *(void *)(v2 + 96),  *(void *)(v2 + 104),  *(void *)(v2 + 112),  *(void *)(v2 + 120),  *(void *)(v2 + 128),  *(void *)(v2 + 136),  *(void **)(v2 + 144),  *(void **)(v2 + 152));
}

uint64_t sub_10017305C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017306C()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_10017307C()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001730BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001730D0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));

  swift_release(*(void *)(v0 + 144));
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t sub_10017314C()
{
  return sub_1000F4AA4( *(unsigned int *)(v0 + 16),  *(void **)(v0 + 24),  *(void **)(v0 + 32),  *(void **)(v0 + 40),  *(void *)(v0 + 48),  *(void **)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(void **)(v0 + 112),  *(void *)(v0 + 120),  *(void *)(v0 + 128),  *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, id, uint64_t))(v0 + 136));
}

uint64_t sub_100173194()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001731A4(_BYTE *a1)
{
  return sub_1000F3CB0(a1, v1[16], v1[17], v1[18]);
}

uint64_t sub_1001731C4(uint64_t a1)
{
  return sub_1000F3E68(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_1001731D0(void *a1)
{
}

void sub_1001731E0()
{
}

uint64_t sub_100173208()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100173218(void *a1, _BYTE *a2)
{
}

uint64_t sub_100173230(void *a1)
{
  return sub_1000E6AA4(a1, *(void **)(v1 + 16));
}

uint64_t sub_100173238(uint64_t a1)
{
  return sub_1000E6B3C(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_100173250(uint64_t a1)
{
  return sub_1001BB3D4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100173258(void *a1)
{
  return sub_1001BE1C4(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_100173270(void *a1, _BYTE *a2)
{
}

uint64_t sub_10017328C(uint64_t a1)
{
  return sub_1000E55BC(a1, v1);
}

uint64_t sub_1001732A4(unint64_t a1)
{
  return sub_1000E4330(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001732BC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_1001732D4(_TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3)
{
}

void sub_1001732E0(uint64_t a1)
{
}

uint64_t sub_1001732F8(uint64_t *a1)
{
  return sub_100173378(a1);
}

uint64_t sub_10017330C(uint64_t a1)
{
  return sub_1001488BC(a1, *(void (**)(void *, void *, uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100173318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001473C0( a1,  a2,  a3,  *(void *)(v3 + 16),  *(uint64_t (**)(void, void, void))(v3 + 24),  *(void *)(v3 + 32),  "fetchCurrentItem complete: %{public}s",  0xD00000000000001ELL,  0x80000001001F9F20LL);
}

uint64_t sub_100173360(uint64_t *a1)
{
  return sub_100147630(a1, *(id *)(v1 + 16));
}

uint64_t sub_100173378(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain(v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a1 = v3;
  return result;
}

uint64_t sub_1001733C0(uint64_t a1)
{
  return sub_1001476D8( a1,  *(void (**)(_TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, uint64_t))(v1 + 16),  *(void *)(v1 + 24));
}

void sub_1001733C8(uint64_t a1)
{
}

uint64_t sub_1001733E4()
{
  swift_release(*(void *)(v0 + 32));
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
    swift_bridgeObjectRelease(*(void *)(v0 + 88));
    swift_bridgeObjectRelease(*(void *)(v0 + 112));
  }

  return swift_deallocObject(v0, 152LL, 7LL);
}

void sub_100173450()
{
}

uint64_t sub_100173464()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_100173474( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void sub_1001734C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a9);
  }

void sub_100173548(uint64_t *a1@<X8>)
{
}

uint64_t sub_100173568(uint64_t a1, uint64_t a2)
{
  return sub_100160318( a2,  *(char **)(v2 + 16),  *(void **)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (void *)(v2 + 48),  *(void **)(v2 + 152),  *(void *)(v2 + 160),  *(void *)(v2 + 168),  *(_BYTE *)(v2 + 176),  *(void **)(v2 + 184));
}

uint64_t sub_1001735B0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001735C0()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_1001735D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001735E4(uint64_t *a1)
{
  return sub_10013C7F0(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)sub_100176B40);
}

uint64_t sub_10017360C()
{
  swift_release(*(void *)(v0 + 32));
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    swift_bridgeObjectRelease(*(void *)(v0 + 104));
  }

  return swift_deallocObject(v0, 145LL, 7LL);
}

uint64_t sub_100173678(uint64_t a1)
{
  return sub_10013CA40( a1,  *(void **)(v1 + 16),  *(void (**)(void, void, uint64_t))(v1 + 24),  *(void *)(v1 + 32),  (void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 144));
}

uint64_t sub_100173690()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
    swift_bridgeObjectRelease(*(void *)(v0 + 88));
    swift_bridgeObjectRelease(*(void *)(v0 + 112));
  }

  swift_release(*(void *)(v0 + 168));
  return swift_deallocObject(v0, 192LL, 7LL);
}

void sub_10017371C()
{
}

uint64_t sub_10017375C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017376C(uint64_t a1)
{
  return sub_1001388B4(a1, *(_BYTE *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10017378C(uint64_t a1)
{
  return sub_10013893C( a1,  *(char **)(v1 + 16),  *(unsigned __int8 *)(v1 + 24),  *(void (**)(void))(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_1001737A0()
{
  return sub_1001394FC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001737AC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001737BC()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001737E8()
{
}

uint64_t sub_1001737F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017380C()
{
  return sub_100137EA8(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100173818()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100173828()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));

  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100173874(uint64_t a1, uint64_t a2)
{
  return sub_100173880( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void))sub_100136FD4);
}

uint64_t sub_100173880( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], v3[9]);
}

uint64_t sub_1001738B8()
{
  return sub_100176034((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10013732C);
}

uint64_t sub_1001738C4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001738D4(uint64_t a1, char a2)
{
  return sub_100137B88(a1, a2 & 1, *(void (**)(void, uint64_t))(v2 + 16));
}

uint64_t sub_1001738E0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000076A4(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100173920()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100173930()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100173954(uint64_t *a1)
{
  return sub_100173B84(a1);
}

uint64_t sub_100173970()
{
  uint64_t updated = type metadata accessor for UpdateTrustResponse(0LL);
  uint64_t v2 = *(void *)(updated - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v6 = v0 + v4 + *(int *)(updated + 20);
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  uint64_t v9 = (void *)(v0 + v4 + *(int *)(updated + 24));
  uint64_t v10 = type metadata accessor for Changes(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
  {
    swift_bridgeObjectRelease(v9[1]);
    swift_bridgeObjectRelease(v9[2]);
    sub_10000852C(v9[3], v9[4]);
    sub_10000852C(v9[5], v9[6]);
    v8((uint64_t)v9 + *(int *)(v10 + 36), v7);
  }

  unint64_t v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + v11 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v12));
  swift_bridgeObjectRelease(*(void *)(v0 + v13 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v14));
  swift_bridgeObjectRelease(*(void *)(v0 + v15));
  return swift_deallocObject(v0, ((v15 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_100173ADC()
{
  uint64_t v1 = *(void *)(type metadata accessor for UpdateTrustResponse(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10013641C( *(char **)(v0 + 16),  (uint64_t *)(v0 + v2),  *(void (**)(uint64_t, void))(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void *)(v0 + v4),  *(void *)(v0 + v5),  *(void *)(v0 + v5 + 8),  *(void *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100173B74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100173B84(uint64_t *a1)
{
  return sub_100135DE4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_100173BA8()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100173BFC(uint64_t a1)
{
  return sub_1001360CC( a1,  *(char **)(v1 + 16),  *(void (**)(uint64_t, uint64_t))(v1 + 24),  *(void (**)(uint64_t, uint64_t))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80));
}

uint64_t sub_100173C30(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_bridgeObjectRetain(a1);
  }
}

uint64_t sub_100173C40(uint64_t a1, uint64_t a2)
{
  return sub_100135B78( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32),  "updateTLKs complete: %{public}s",  0xD000000000000025LL,  0x80000001001F9FF0LL);
}

uint64_t sub_100173C7C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100173CB8()
{
}

uint64_t sub_100173CE4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100173CF4(uint64_t a1, uint64_t a2)
{
  return sub_10012C588(a1, a2, *(uint64_t (**)(void, void))(v2 + 16), *(void *)(v2 + 24));
}

void sub_100173D00(uint64_t a1)
{
}

void sub_100173D10(int16x8_t a1)
{
  a1.i64[0] = 0x4000000010000LL;
  sub_100143224( *(void *)(v1 + 16),  *(void (**)(void, void))(v1 + 24),  a1,  *(void *)(v1 + 32),  (SEL *)&selRef_doesOctagonContainDistrustedRecoveryKeysWithError_,  "distrusted recovery keys exist: %{BOOL}d",  "error determining whether octagon contains distrusted RKs: %{public}@");
}

uint64_t sub_100173D4C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100173D5C(void *a1, uint64_t a2)
{
  return sub_10012BF14(a1, a2, *(uint64_t (**)(void, void))(v2 + 16), *(void *)(v2 + 24));
}

void sub_100173D68(uint64_t a1)
{
}

void sub_100173D78()
{
}

uint64_t sub_100173D84()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100173D98(uint64_t a1, uint64_t a2)
{
  return sub_100135B78( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32),  "health check complete: %{public}s",  0xD00000000000005DLL,  0x80000001001FA020LL);
}

uint64_t sub_100173DD4()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 89LL, 7LL);
}

uint64_t sub_100173E18()
{
  return sub_10012AB2C( *(void *)(v0 + 16),  *(void (**)(void, void))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(unsigned __int8 *)(v0 + 72),  *(void *)(v0 + 80),  *(_BYTE *)(v0 + 88));
}

uint64_t sub_100173E58()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100173E68(void *a1)
{
  return sub_10012AEF4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100173E84(uint64_t a1)
{
  return sub_10012AF84( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32),  *(void *)(v1 + 40),  *(_BYTE *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_100173EAC(uint64_t a1)
{
  return sub_10012B0B8(a1, *(void (**)(id, void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100173EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10012F210( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(uint64_t (**)(void, void, void, void, void))(v5 + 24),  *(void *)(v5 + 32),  "join complete: %{public}s",  0xD000000000000074LL,  0x80000001001FA080LL);
}

void sub_100173F04()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v0 = (void (*)(void))off_100268598;
  uint64_t v7 = off_100268598;
  if (!off_100268598)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1001769F8;
    v3[3] = &unk_100236E50;
    v3[4] = &v4;
    sub_1001769F8(v3);
    uint64_t v0 = (void (*)(void))v5[3];
  }

  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    v0();
  }

  else
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "_Bool soft_MetricsOverrideTestsAreEnabled(void)"));
    objc_msgSend( v1,  "handleFailureInFunction:file:lineNumber:description:",  v2,  @"TrustedPeersHelper-Bridging-Header.h",  90,  @"%s",  dlerror());

    __break(1u);
  }

void sub_100174000( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100174018()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));

  sub_10000852C(*(void *)(v0 + 104), *(void *)(v0 + 112));
  sub_10000852C(*(void *)(v0 + 120), *(void *)(v0 + 128));
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  return swift_deallocObject(v0, 160LL, 7LL);
}

void sub_10017408C(uint64_t a1)
{
}

void sub_1001740E4(uint64_t *a1@<X8>)
{
}

uint64_t sub_100174100()
{
  sub_10000852C(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10000852C(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  swift_bridgeObjectRelease(*(void *)(v0 + 128));
  swift_bridgeObjectRelease(*(void *)(v0 + 144));
  return swift_deallocObject(v0, 153LL, 7LL);
}

uint64_t sub_100174174(uint64_t a1, uint64_t a2)
{
  return sub_10016E208( a2,  *(void *)(v2 + 16),  *(char **)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 64),  *(void *)(v2 + 72),  *(void *)(v2 + 80),  *(void *)(v2 + 88),  *(void *)(v2 + 96),  *(void *)(v2 + 104),  *(char **)(v2 + 112),  *(void *)(v2 + 120),  *(void *)(v2 + 128),  *(void *)(v2 + 136),  *(void *)(v2 + 144),  *(_BYTE *)(v2 + 152));
}

uint64_t sub_1001741CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001741DC()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_1001741E8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  return swift_deallocObject(v0, 145LL, 7LL);
}

void sub_100174254()
{
}

uint64_t sub_1001742A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001742B0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));

  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  sub_10000852C(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10000852C(*(void *)(v0 + 128), *(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  swift_bridgeObjectRelease(*(void *)(v0 + 168));
  swift_bridgeObjectRelease(*(void *)(v0 + 184));
  return swift_deallocObject(v0, 193LL, 7LL);
}

uint64_t sub_100174344(void *a1, uint64_t a2)
{
  return sub_100126268( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(char **)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void **)(v2 + 56),  *(void **)(v2 + 64),  *(void **)(v2 + 72),  *(void *)(v2 + 80),  *(void **)(v2 + 88),  *(void *)(v2 + 96),  *(void *)(v2 + 104),  *(void *)(v2 + 112),  *(void *)(v2 + 120),  *(void *)(v2 + 128),  *(void *)(v2 + 136),  *(void *)(v2 + 144),  *(void *)(v2 + 152),  *(void *)(v2 + 160),  *(void *)(v2 + 168),  *(void *)(v2 + 176),  *(void *)(v2 + 184),  *(_BYTE *)(v2 + 192));
}

uint64_t sub_10017439C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));

  swift_release(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  sub_10000852C(*(void *)(v0 + 120), *(void *)(v0 + 128));
  sub_10000852C(*(void *)(v0 + 136), *(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 160));
  swift_bridgeObjectRelease(*(void *)(v0 + 176));
  swift_bridgeObjectRelease(*(void *)(v0 + 192));
  return swift_deallocObject(v0, 201LL, 7LL);
}

uint64_t sub_100174438()
{
  return sub_1001266F4( *(char **)(v0 + 16),  *(void *)(v0 + 24),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 32),  *(uint64_t **)(v0 + 40),  *(void **)(v0 + 48),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 56),  *(void **)(v0 + 64),  *(uint8_t **)(v0 + 72),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 80),  *(void (**)(void, void, void *, void, void))(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 112),  *(void *)(v0 + 120),  *(void *)(v0 + 128),  *(void *)(v0 + 136),  *(char **)(v0 + 144),  *(uint8_t **)(v0 + 152),  *(void **)(v0 + 160),  *(void *)(v0 + 168),  *(void **)(v0 + 176),  *(void *)(v0 + 184),  *(void **)(v0 + 192),  *(_BYTE *)(v0 + 200));
}

uint64_t sub_100174494()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001744A4(uint64_t a1)
{
  return sub_100129188(a1, *(id *)(v1 + 16));
}

uint64_t sub_1001744BC(uint64_t a1)
{
  return sub_100129230( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 48),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72));
}

uint64_t sub_1001744EC()
{
  uint64_t v1 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 65) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  uint64_t v6 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 16));
  uint64_t v7 = v0 + v4 + v1[6];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v0 + v4 + v1[7];
  uint64_t v11 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    sub_10000852C(*(void *)v10, *(void *)(v10 + 8));
    sub_10000852C(*(void *)(v10 + 16), *(void *)(v10 + 24));
    v9(v10 + *(int *)(v11 + 24), v8);
  }

  uint64_t v12 = v6 + v1[8];
  uint64_t v13 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    sub_10000852C(*(void *)v12, *(void *)(v12 + 8));
    sub_10000852C(*(void *)(v12 + 16), *(void *)(v12 + 24));
    v9(v12 + *(int *)(v13 + 24), v8);
  }

  uint64_t v14 = v6 + v1[9];
  uint64_t v15 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    sub_10000852C(*(void *)v14, *(void *)(v14 + 8));
    sub_10000852C(*(void *)(v14 + 16), *(void *)(v14 + 24));
    v9(v14 + *(int *)(v15 + 24), v8);
  }

  uint64_t v16 = v6 + v1[10];
  uint64_t v17 = type metadata accessor for SignedRecoveryVoucher(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v16, 1LL, v17))
  {
    sub_10000852C(*(void *)v16, *(void *)(v16 + 8));
    sub_10000852C(*(void *)(v16 + 16), *(void *)(v16 + 24));
    v9(v16 + *(int *)(v17 + 24), v8);
  }

  uint64_t v18 = v6 + v1[11];
  uint64_t v19 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v18, 1LL, v19))
  {
    sub_10000852C(*(void *)v18, *(void *)(v18 + 8));
    sub_10000852C(*(void *)(v18 + 16), *(void *)(v18 + 24));
    v9(v18 + *(int *)(v19 + 24), v8);
  }

  unint64_t v20 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8LL;

  swift_release(*(void *)(v0 + v22 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v23 + 8));
  return swift_deallocObject(v0, v23 + 16, v3 | 7);
}

uint64_t sub_100174790(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Peer(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 65LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1001295E0( a1,  *(char **)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(unsigned __int8 *)(v1 + 64),  v1 + v4,  *(void **)(v1 + v5),  *(void **)(v1 + v6),  *(void (**)(void, void, void *, void, void *))(v1 + v7),  *(void *)(v1 + v7 + 8),  *(void *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100174838()
{
  uint64_t v1 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v35 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v35 + 72) & ~v35;
  unint64_t v32 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v4 = type metadata accessor for JoinWithVoucherResponse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v33 = v4;
  uint64_t v34 = *(void *)(v5 + 64);

  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  uint64_t v7 = v0 + v3;
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 16));
  uint64_t v8 = v0 + v3 + v1[6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  uint64_t v11 = v7 + v1[7];
  uint64_t v12 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12))
  {
    sub_10000852C(*(void *)v11, *(void *)(v11 + 8));
    sub_10000852C(*(void *)(v11 + 16), *(void *)(v11 + 24));
    v10(v11 + *(int *)(v12 + 24), v9);
  }

  unint64_t v13 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = v7 + v1[8];
  uint64_t v15 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    sub_10000852C(*(void *)v14, *(void *)(v14 + 8));
    sub_10000852C(*(void *)(v14 + 16), *(void *)(v14 + 24));
    v10(v14 + *(int *)(v15 + 24), v9);
  }

  uint64_t v16 = v6;
  uint64_t v17 = v6 + v13;
  uint64_t v18 = v7 + v1[9];
  uint64_t v19 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v18, 1LL, v19))
  {
    sub_10000852C(*(void *)v18, *(void *)(v18 + 8));
    sub_10000852C(*(void *)(v18 + 16), *(void *)(v18 + 24));
    v10(v18 + *(int *)(v19 + 24), v9);
  }

  uint64_t v20 = v17 + 8;
  uint64_t v21 = v7 + v1[10];
  uint64_t v22 = type metadata accessor for SignedRecoveryVoucher(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL))(v21, 1LL, v22))
  {
    sub_10000852C(*(void *)v21, *(void *)(v21 + 8));
    sub_10000852C(*(void *)(v21 + 16), *(void *)(v21 + 24));
    v10(v21 + *(int *)(v22 + 24), v9);
  }

  uint64_t v23 = v20 & ~v16;
  uint64_t v24 = v16;
  uint64_t v25 = v7 + v1[11];
  uint64_t v26 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48LL))(v25, 1LL, v26))
  {
    sub_10000852C(*(void *)v25, *(void *)(v25 + 8));
    sub_10000852C(*(void *)(v25 + 16), *(void *)(v25 + 24));
    v10(v25 + *(int *)(v26 + 24), v9);
  }

  swift_bridgeObjectRelease(*(void *)(v0 + v23));
  v10(v0 + v23 + *(int *)(v33 + 20), v9);
  uint64_t v27 = (void *)(v0 + v23 + *(int *)(v33 + 24));
  uint64_t v28 = type metadata accessor for Changes(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v27, 1LL, v28))
  {
    swift_bridgeObjectRelease(v27[1]);
    swift_bridgeObjectRelease(v27[2]);
    sub_10000852C(v27[3], v27[4]);
    sub_10000852C(v27[5], v27[6]);
    v10((uint64_t)v27 + *(int *)(v28 + 36), v9);
  }

  unint64_t v29 = (v34 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + v29 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v30 + 8));
  return swift_deallocObject(v0, v30 + 16, v35 | v24 | 7);
}

void sub_100174BAC()
{
  uint64_t v1 = *(void *)(type metadata accessor for Peer(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(type metadata accessor for JoinWithVoucherResponse(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100129B88( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void **)(v0 + 40),  *(void *)(v0 + 48),  *(unsigned __int8 *)(v0 + 56),  *(void *)(v0 + 64),  v0 + v2,  *(void **)(v0 + v3),  *(void **)(v0 + v4),  (_TtC18TrustedPeersHelper6Client **)(v0 + v6),  *(void (**)(uint64_t, _OWORD *, _TtC18TrustedPeersHelper6Client *, id, void))(v0 + v7),  *(void *)(v0 + v7 + 8),  *(void *)(v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(_OWORD **)(v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100174C80()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100174C90(void *a1)
{
}

void sub_100174CB4(void *a1@<X8>)
{
}

uint64_t sub_100174CCC(uint64_t a1)
{
  return sub_10011CCC4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100174CEC(uint64_t a1)
{
  return sub_10011CF94( a1,  *(void (**)(uint64_t, _TtC18TrustedPeersHelper6Client *, uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32));
}

void sub_100174CF8(_TtC18TrustedPeersHelper6Client **a1@<X8>)
{
}

uint64_t sub_100174D10(void *a1)
{
  return sub_10011CF04(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void sub_100174D30()
{
}

uint64_t sub_100174D40()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100174D50(_TtC18TrustedPeersHelper6Client **a1)
{
  return sub_10011BBF4(a1);
}

_TtC18TrustedPeersHelper6Client *sub_100174D58@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_10011C408( *(uint64_t (**)(_TtC18TrustedPeersHelper6Client **))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(_BYTE *)(v1 + 40));
  if (!v2)
  {
    *(void *)a1 = result;
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v5 & 1;
  }

  return result;
}

uint64_t sub_100174D94(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_100174DA4()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100174DD0()
{
  return sub_10011B4F4( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  *(void (**)(uint64_t, uint64_t, void))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_100174DE0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

BOOL sub_100174DF0(uint64_t *a1)
{
  return sub_10011B6C8(a1);
}

_TtC18TrustedPeersHelper6Client *sub_100174DF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_10011BDA4( *(uint64_t (**)(_TtC18TrustedPeersHelper6Client **))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(_BYTE *)(v1 + 40));
  if (!v2)
  {
    *(void *)a1 = result;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
    *(_BYTE *)(a1 + 16) = v6 & 1;
  }

  return result;
}

void sub_100174E38(uint64_t a1, char a2)
{
}

uint64_t sub_100174E4C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10011DFAC( a1,  a2,  a3 & 1,  *(void (**)(uint64_t, void))(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32));
}

void sub_100174E5C(uint64_t a1@<X8>)
{
}

uint64_t sub_100174E84()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100174EC0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10011ACCC( a1,  a2,  a3 & 1,  *(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56),  *(void *)(v3 + 64));
}

uint64_t sub_100174EF8(uint64_t a1)
{
  return sub_100146B88( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(void))(v1 + 24),  *(void *)(v1 + 32),  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "removeEscrowCache complete %{public}s",  0xD000000000000019LL,  0x80000001001FA100LL);
}

uint64_t sub_100174F40()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 24);
  sub_10011AA04();
  return v1(0LL);
}

uint64_t sub_100174F7C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100174F8C(id *a1)
{
  return sub_10011A65C(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100174FA8(id *a1)
{
  return sub_100119854(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100174FC4(id *a1)
{
  return sub_1001194B4(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100174FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001172B8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 24),  *(void *)(v7 + 32),  "fetchEscrowContents complete: %{public}s",  0xD00000000000001BLL,  0x80000001001FA140LL);
}

void sub_100175038()
{
}

uint64_t sub_100175044()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100175058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10012F210( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(uint64_t (**)(void, void, void, void, void))(v5 + 24),  *(void *)(v5 + 32),  "vouch complete: %{public}s",  0xD000000000000083LL,  0x80000001001FA160LL);
}

uint64_t sub_1001750A4()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  sub_10000852C(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_10000852C(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_10000852C(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_10000852C(*(void *)(v0 + 104), *(void *)(v0 + 112));
  swift_bridgeObjectRelease(*(void *)(v0 + 128));
  swift_bridgeObjectRelease(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 160));
  swift_bridgeObjectRelease(*(void *)(v0 + 176));
  return swift_deallocObject(v0, 184LL, 7LL);
}

void sub_100175118()
{
}

uint64_t sub_100175174()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100175184()
{
  swift_release(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));

  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 144));

  return swift_deallocObject(v0, 160LL, 7LL);
}

void sub_1001751F8(void *a1, uint64_t a2)
{
}

uint64_t sub_100175248()
{
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));

  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  return swift_deallocObject(v0, 160LL, 7LL);
}

uint64_t sub_1001752CC(uint64_t a1, uint64_t a2)
{
  return sub_10016CC84( a2,  *(void *)(v2 + 16),  *(void **)(v2 + 24),  *(uint64_t (**)(void, unint64_t, void, unint64_t, uint64_t))(v2 + 32),  *(void *)(v2 + 40),  *(char **)(v2 + 48),  *(void **)(v2 + 56),  *(void **)(v2 + 64),  *(void *)(v2 + 72),  *(void *)(v2 + 80),  *(void **)(v2 + 88),  *(void *)(v2 + 96),  *(void **)(v2 + 104),  *(void *)(v2 + 112),  *(void *)(v2 + 120),  *(void *)(v2 + 128),  *(void *)(v2 + 136),  *(void *)(v2 + 144),  *(void *)(v2 + 152));
}

uint64_t sub_100175324()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100175334()
{
  return sub_100175EF4((void (*)(void))&_swift_release);
}

uint64_t sub_100175340(uint64_t a1)
{
  return sub_1001209C4( a1,  *(char **)(v1 + 16),  *(void (**)(void, uint64_t))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100175350()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));

  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  return swift_deallocObject(v0, 144LL, 7LL);
}

uint64_t sub_1001753C4()
{
  return sub_100113338( *(void *)(v0 + 16),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void (**)(void, unint64_t, void, unint64_t, uint64_t))(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(id *)(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void *)(v0 + 120),  *(void *)(v0 + 128),  *(void *)(v0 + 136));
}

uint64_t sub_100175408()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017541C(uint64_t a1)
{
  return sub_10011423C( a1,  *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32));
}

uint64_t sub_100175428(void *a1)
{
  return sub_100197F94(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t sub_100175468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001473C0( a1,  a2,  a3,  *(void *)(v3 + 16),  *(uint64_t (**)(void, void, void))(v3 + 24),  *(void *)(v3 + 32),  "createCustodianRecoveryKey complete: %{public}s",  0xD000000000000046LL,  0x80000001001FA1F0LL);
}

uint64_t sub_1001754B0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (((v8 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v9));
  return swift_deallocObject(v0, v9 + 8, v5);
}

void sub_10017558C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100104060( *(char **)(v0 + 16),  v0 + v2,  *(void (**)(void, void, uint64_t))(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void *)(v0 + v4),  *(void *)(v0 + v4 + 8),  *(void *)(v0 + v5),  *(_TtC18TrustedPeersHelper6Client **)(v0 + v5 + 8),  *(_DWORD *)(v0 + ((v5 + 19) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v5 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100175620()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100175630()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 88) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 24));

  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, (v7 + 19) & 0xFFFFFFFFFFFFFFF8LL | 4, v5);
}

void sub_100175710(void *a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 88LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100105530( a1,  a2,  *(void (**)(void, void, unint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(char **)(v2 + 32),  *(void *)(v2 + 40),  *(void **)(v2 + 48),  *(void **)(v2 + 56),  *(void *)(v2 + 64),  *(void *)(v2 + 72),  *(void *)(v2 + 80),  v2 + v6,  *(void *)(v2 + v7),  *(void *)(v2 + v7 + 8),  *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(_DWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 19) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1001757C4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;

  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));

  swift_release(*(void *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, (v7 + 19) & 0xFFFFFFFFFFFFFFF8LL | 4, v5);
}

uint64_t sub_1001758AC()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 96LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1001059B4( *(char **)(v0 + 16),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 24),  *(void **)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void **)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void (**)(void, void, uint64_t))(v0 + 80),  *(void *)(v0 + 88),  v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void *)(v0 + v4),  *(void *)(v0 + v4 + 8),  *(_DWORD *)(v0 + ((v4 + 19) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100175940()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100175950(uint64_t a1)
{
}

uint64_t sub_100175980()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (((v8 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v8 + 8));
  swift_release(*(void *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v5);
}

void sub_100175A5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10010670C( a1,  *(char **)(v1 + 16),  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + v6),  *(void *)(v1 + v6 + 8),  *(void *)(v1 + v7),  *(void *)(v1 + v7 + 8),  *(_DWORD *)(v1 + ((v7 + 19) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(void, void, _TtC18TrustedPeersHelper6Client *))(v1 + ((((v7 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((((v7 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100175B00()
{
  uint64_t v1 = type metadata accessor for AddCustodianRecoveryKeyResponse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v19 = *(void *)(v2 + 64);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v20 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = *(void *)(v5 + 64);

  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = (void *)(v0 + v4 + *(int *)(v1 + 24));
  uint64_t v11 = type metadata accessor for Changes(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    swift_bridgeObjectRelease(v10[1]);
    swift_bridgeObjectRelease(v10[2]);
    sub_10000852C(v10[3], v10[4]);
    sub_10000852C(v10[5], v10[6]);
    v9((uint64_t)v10 + *(int *)(v11 + 36), v8);
  }

  uint64_t v12 = (v4 + v19 + v6) & ~v6;
  unint64_t v13 = (v18 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v16 = (((v15 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v12, v20);
  swift_release(*(void *)(v0 + v13));
  swift_bridgeObjectRelease(*(void *)(v0 + v14 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v15 + 8));
  swift_release(*(void *)(v0 + v16 + 8));
  return swift_deallocObject(v0, v16 + 16, v3 | v6 | 7);
}

void sub_100175CAC()
{
  uint64_t v1 = *(void *)(type metadata accessor for AddCustodianRecoveryKeyResponse(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100106C54( *(void *)(v0 + 16),  (_TtC18TrustedPeersHelper6Client **)(v0 + v2),  v0 + v5,  *(void *)(v0 + v6),  *(void *)(v0 + v7),  *(_TtC18TrustedPeersHelper6Client **)(v0 + v7 + 8),  *(void *)(v0 + v8),  *(_TtC18TrustedPeersHelper6Client **)(v0 + v8 + 8),  *(_DWORD *)(v0 + ((v8 + 19) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(_TtC18TrustedPeersHelper6Client *, id, void))(v0 + ((((v8 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v8 + 19) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100175D74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100175D84(void *a1)
{
  return sub_100106608(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100175DA0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));

  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  sub_10000852C(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10000852C(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10000852C(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10000852C(*(void *)(v0 + 144), *(void *)(v0 + 152));
  return swift_deallocObject(v0, 160LL, 7LL);
}

uint64_t sub_100175E1C(uint64_t a1, uint64_t a2)
{
  return sub_100175E28( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000FD308);
}

uint64_t sub_100175E28( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a3( a1,  a2,  v3[2],  v3[3],  v3[4],  v3[5],  v3[6],  v3[7],  v3[8],  v3[9],  v3[10],  v3[11],  v3[12],  v3[13],  v3[14],  v3[15],  v3[16],  v3[17],  v3[18],  v3[19]);
}

uint64_t sub_100175E74()
{
  return sub_100175EF4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100175E80()
{
  return sub_100044B00((uint64_t (*)(void, void, void, void, void))sub_1000FB138);
}

uint64_t sub_100175E8C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100175E9C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100175ED8(void *a1)
{
  return sub_1000FB3CC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(char **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100175EE8()
{
  return sub_100175EF4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100175EF4(void (*a1)(void))
{
  swift_release(*(void *)(v1 + 32));
  a1(*(void *)(v1 + 40));
  a1(*(void *)(v1 + 48));
  return swift_deallocObject(v1, 56LL, 7LL);
}

uint64_t sub_100175F3C()
{
  return sub_100044B00((uint64_t (*)(void, void, void, void, void))sub_1000FB6E8);
}

uint64_t sub_100175F48()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100175F58()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100175F9C(uint64_t a1, uint64_t a2)
{
  return sub_100175FA8( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))sub_1000FC2FC);
}

uint64_t sub_100175FA8( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8]);
}

uint64_t sub_100175FE0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));

  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100176034( uint64_t (*a1)(void, void, void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10]);
}

uint64_t sub_10017606C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017607C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001760A0(uint64_t a1, uint64_t a2)
{
  return sub_1000FA634(a1, a2, *(uint64_t (**)(void, void))(v2 + 16), *(void *)(v2 + 24));
}

void sub_1001760AC()
{
}

uint64_t sub_1001760B8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001760CC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001760F8(uint64_t a1)
{
  return sub_100146B88( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(void))(v1 + 24),  *(void *)(v1 + 32),  (uint64_t (*)(void))&static os_log_type_t.info.getter,  "reset complete %{public}s",  0xD000000000000082LL,  0x80000001001FA240LL);
}

uint64_t sub_10017613C()
{
  swift_release(*(void *)(v0 + 96));
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_100176178()
{
  return sub_1000F2FB4( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(_BYTE *)(v0 + 56),  *(void *)(v0 + 64),  *(unsigned __int8 *)(v0 + 72),  *(char **)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96));
}

uint64_t sub_1001761BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001761CC(uint64_t a1)
{
  return sub_1000F3148( a1,  *(void *)(v1 + 16),  *(_BYTE *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(unsigned __int8 *)(v1 + 64),  *(void *)(v1 + 72),  *(_BYTE *)(v1 + 80));
}

uint64_t sub_100176210(uint64_t a1)
{
  return sub_1000F32FC(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10017621C()
{
  uint64_t v1 = type metadata accessor for ResetResponse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v0 + v4, v6);
  unint64_t v8 = (void *)(v0 + v4 + *(int *)(v1 + 20));
  uint64_t v9 = type metadata accessor for Changes(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    swift_bridgeObjectRelease(v8[1]);
    swift_bridgeObjectRelease(v8[2]);
    sub_10000852C(v8[3], v8[4]);
    sub_10000852C(v8[5], v8[6]);
    v7((uint64_t)v8 + *(int *)(v9 + 36), v6);
  }

  unint64_t v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = v10 + 16;
  swift_release(*(void *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_100176324()
{
  uint64_t v1 = *(void *)(type metadata accessor for ResetResponse(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000F3720( *(void *)(v0 + 16),  v0 + v2,  *(uint64_t (**)(void))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10017636C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

_DWORD *sub_10017637C(_DWORD *result)
{
  *uint64_t result = **(_DWORD **)(v1 + 16);
  return result;
}

uint64_t sub_10017638C(uint64_t a1, uint64_t a2)
{
  return sub_1000F2188( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  "trustedDeviceNamesByPeerID complete: %{public}s");
}

void sub_1001763B0()
{
}

uint64_t sub_1001763BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001763D0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001763FC()
{
  return sub_1000F1F80( *(void (**)(uint64_t, uint64_t, void))(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

uint64_t sub_100176408()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100176418(uint64_t a1, uint64_t a2)
{
  return sub_1000F2188( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  "dump complete: %{public}s");
}

uint64_t sub_10017643C()
{
  return sub_1000EF660(*(char **)(v0 + 16), *(void (**)(void, void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100176448()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_100176458(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_100176494()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001764B8()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001764E4(void *a1, uint64_t a2)
{
  return sub_1000F1B10(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001764EC(void *a1, uint64_t a2)
{
  return sub_1000F1CCC(a1, a2, v2);
}

uint64_t sub_1001764F4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ECF74(a1, a2, a3, *(uint64_t (**)(void, void, void))(v3 + 16));
}

uint64_t sub_100176500()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10017652C()
{
}

uint64_t sub_100176538()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100176548()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100176558()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100176568()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_1001765BC(uint64_t a1, uint64_t a2)
{
  return sub_1001765C8( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void))sub_1000EBC48);
}

uint64_t sub_1001765C8( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], v3[10]);
}

unint64_t sub_100176604()
{
  unint64_t result = qword_100257110;
  if (!qword_100257110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ContainerError,  &type metadata for ContainerError);
    atomic_store(result, (unint64_t *)&qword_100257110);
  }

  return result;
}

void destroy for StableChanges(uint64_t a1)
{
}

uint64_t initializeWithCopy for StableChanges(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  unint64_t v7 = *(void **)(a2 + 80);
  unint64_t v8 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v8;
  uint64_t v9 = *(void **)(a2 + 96);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  id v10 = v7;
  id v11 = v8;
  id v12 = v9;
  return a1;
}

uint64_t assignWithCopy for StableChanges(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v10;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  int v13 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v13;
  unint64_t v14 = *(void **)(a1 + 80);
  unint64_t v15 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v15;
  id v16 = v15;

  uint64_t v17 = *(void **)(a1 + 88);
  uint64_t v18 = *(void **)(a2 + 88);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v18;
  id v19 = v18;

  uint64_t v20 = *(void **)(a1 + 96);
  uint64_t v21 = *(void **)(a2 + 96);
  *(void *)(a1 + 96) = v21;
  id v22 = v21;

  return a1;
}

__n128 initializeWithTake for StableChanges(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t assignWithTake for StableChanges(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);

  uint64_t v11 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  uint64_t v12 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  return a1;
}

uint64_t getEnumTagSinglePayload for StableChanges(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StableChanges(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StableChanges()
{
  return &type metadata for StableChanges;
}

void *sub_1001769F8(void *a1)
{
  uint64_t v5 = 0LL;
  if (!qword_1002685A0)
  {
    __int128 v6 = off_10023B0D8;
    uint64_t v7 = 0LL;
    qword_1002685A0 = _sl_dlopen(&v6, &v5);
  }

  __int128 v2 = (void *)qword_1002685A0;
  if (!qword_1002685A0)
  {
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *KeychainCircleLibrary(void)"));
    objc_msgSend( a1,  "handleFailureInFunction:file:lineNumber:description:",  v2,  @"TrustedPeersHelper-Bridging-Header.h",  87,  @"%s",  v5);

    __break(1u);
    goto LABEL_7;
  }

  unint64_t v3 = v5;
  if (v5) {
LABEL_7:
  }
    free(v3);
  __n128 result = dlsym(v2, "MetricsOverrideTestsAreEnabled");
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = result;
  off_100268598 = *(_UNKNOWN **)(*(void *)(a1[4] + 8LL) + 24LL);
  return result;
}

uint64_t sub_100176B2C(void *a1)
{
  return sub_10017180C(a1);
}

uint64_t sub_100176B40(uint64_t *a1)
{
  return sub_1001713FC(a1);
}

void sub_100176B54(uint64_t a1)
{
}

uint64_t sub_100176B68(uint64_t a1)
{
  return sub_100172A80(a1);
}

void sub_100176B7C(uint64_t a1)
{
}

uint64_t sub_100176B90(uint64_t *a1)
{
  return sub_100173360(a1);
}

uint64_t sub_100176BA4(id *a1)
{
  return sub_100174FA8(a1) & 1;
}

uint64_t sub_100176BBC(id *a1)
{
  return sub_100174FC4(a1) & 1;
}

uint64_t sub_100176BD8()
{
  return ResetReason.rawValue.getter();
}

uint64_t sub_100176BEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_100172F0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_100176CA4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_100172F4C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_100176DF4(void *a1)
{
  return sub_100173E68(a1);
}

uint64_t sub_100176F50()
{
  return sub_1001713E0();
}

void *sub_100176F68(malloc_zone_t *a1, size_t a2)
{
  if (a1) {
    return malloc_zone_malloc(a1, a2);
  }
  __n128 result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000013LL,  0x80000001001FA710LL,  "TrustedPeersHelper/MallocZone.swift",  35LL,  2LL,  14LL,  0,  v2,  v3);
  __break(1u);
  return result;
}

void *sub_100176FC8(malloc_zone_t *a1, void *a2, size_t a3)
{
  if (a1) {
    return malloc_zone_realloc(a1, a2, a3);
  }
  __n128 result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000013LL,  0x80000001001FA710LL,  "TrustedPeersHelper/MallocZone.swift",  35LL,  2LL,  22LL,  0,  v3,  v4);
  __break(1u);
  return result;
}

void sub_100177028(malloc_zone_t *a1, void *a2)
{
  if (a1)
  {
    malloc_zone_free(a1, a2);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000013LL,  0x80000001001FA710LL,  "TrustedPeersHelper/MallocZone.swift",  35LL,  2LL,  30LL,  0,  v2,  v3);
    __break(1u);
  }

unint64_t sub_100177088(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100007578(&qword_100251530);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v41 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v40 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = &v47;
  uint64_t v8 = &v49;
  unint64_t result = swift_bridgeObjectRetain(v1);
  int64_t i = 0LL;
  uint64_t v11 = (char *)&type metadata for Any + 8;
  uint64_t v12 = &type metadata for String;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v21 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v21 >= v40) {
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v41 + 8 * v21);
  int64_t v23 = i + 1;
  if (!v22)
  {
    int64_t v23 = i + 2;
    if (i + 2 >= v40) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v41 + 8 * v23);
    if (!v22)
    {
      int64_t v23 = i + 3;
      if (i + 3 >= v40) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v41 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = i + 4;
        if (i + 4 >= v40) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v41 + 8 * v23);
        if (!v22)
        {
          int64_t v24 = i + 5;
          if (i + 5 < v40)
          {
            unint64_t v22 = *(void *)(v41 + 8 * v24);
            if (v22)
            {
              int64_t v23 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v23 = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                goto LABEL_36;
              }
              if (v23 >= v40) {
                break;
              }
              unint64_t v22 = *(void *)(v41 + 8 * v23);
              ++v24;
              if (v22) {
                goto LABEL_26;
              }
            }
          }

uint64_t sub_1001773F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100007578(&qword_100251540);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v31) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v31) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v31) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v31) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

unint64_t sub_1001777AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100007578(&qword_100251530);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v28 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v12 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v12 >= v27) {
    goto LABEL_32;
  }
  unint64_t v13 = *(void *)(v28 + 8 * v12);
  int64_t v14 = i + 1;
  if (!v13)
  {
    int64_t v14 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v28 + 8 * v14);
    if (!v13)
    {
      int64_t v14 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v28 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v28 + 8 * v14);
        if (!v13)
        {
          int64_t v15 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v13 = *(void *)(v28 + 8 * v15);
            if (v13)
            {
              int64_t v14 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v14 = v15 + 1;
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_36;
              }
              if (v14 >= v27) {
                break;
              }
              unint64_t v13 = *(void *)(v28 + 8 * v14);
              ++v15;
              if (v13) {
                goto LABEL_26;
              }
            }
          }

uint64_t sub_100177AF8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v0, qword_100257120);
  sub_100006BAC(v0, (uint64_t)qword_100257120);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x80000001001E7520LL,  0x746E65696C63LL,  0xE600000000000000LL);
}

id sub_100177B68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = __chkstk_darwin(a1, a2);
  int64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  int64_t v12 = (char *)&v35 - v11;
  unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13((char *)&v35 - v11, v3, a1);
  uint64_t v14 = _getErrorEmbeddedNSError<A>(_:)(v12, a1, a2);
  if (v14)
  {
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a1);
  }

  else
  {
    uint64_t v15 = swift_allocError(a1, a2, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v16, v12, a1);
  }

  uint64_t v17 = (void *)_convertErrorToNSError(_:)(v15);
  swift_errorRelease();
  id v18 = [v17 domain];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
  if (v19 == v22 && v21 == v23)
  {
    swift_bridgeObjectRelease_n(v21, 2LL);
    goto LABEL_12;
  }

  uint64_t v25 = v23;
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0LL);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v25);
  if ((v26 & 1) != 0)
  {
LABEL_12:
    id v29 = sub_100177DE0();
    goto LABEL_13;
  }

  v13(v9, v3, a1);
  uint64_t v27 = _getErrorEmbeddedNSError<A>(_:)(v9, a1, a2);
  if (v27)
  {
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  }

  else
  {
    uint64_t v28 = swift_allocError(a1, a2, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v31, v9, a1);
  }

  uint64_t v32 = (void *)_convertErrorToNSError(_:)(v28);
  swift_errorRelease();
  id v29 = (id)CKXPCSuitableError(v32);

  if (!v29)
  {
    unint64_t v33 = sub_100043F74();
    id v29 = (id)swift_allocError(&type metadata for ContainerError, v33, 0LL, 0LL);
    *(_OWORD *)uint64_t v34 = xmmword_1001E6980;
    *(_BYTE *)(v34 + 16) = 13;
  }

id sub_100177DE0()
{
  uint64_t v1 = v0;
  id v2 = [v0 userInfo];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16) || (unint64_t v7 = sub_10000D1E8(v4, v5), (v8 & 1) == 0))
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v3);
    goto LABEL_8;
  }

  sub_100061664(*(void *)(v3 + 56) + 32 * v7, (uint64_t)&v26);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v27 + 1))
  {
LABEL_8:
    sub_100041590((uint64_t)&v26, &qword_100251EA0);
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    uint64_t v25 = 0LL;
    goto LABEL_9;
  }

  if ((swift_dynamicCast(&v23, &v26, (char *)&type metadata for Any + 8, &type metadata for AnyHashable, 6LL) & 1) != 0)
  {
    if (*((void *)&v24 + 1))
    {
      __int128 v26 = v23;
      __int128 v27 = v24;
      uint64_t v28 = v25;
      uint64_t v9 = sub_100007578(&qword_1002573F8);
      uint64_t inited = swift_initStackObject(v9, v22);
      *(_OWORD *)(inited + 16) = xmmword_1001DE710;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(void *)(inited + 40) = v11;
      sub_10000DE70((uint64_t)&v26, inited + 48);
      unint64_t v12 = sub_10000C5AC(inited);
      sub_10000DEAC((uint64_t)&v26);
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v25 = 0LL;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
  }

void sub_1001780E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0LL;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  NSString v6 = String._bridgeToObjectiveC()();
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

void sub_100178178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    v5.super.Class isa = 0LL;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

void sub_100178214(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  Class isa = a2;
  if (a2)
  {
    sub_100007620(0LL, &qword_100257100, &off_10022D0E8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, uint64_t, Class))(a4 + 16))(a4, a1, isa);
}

void sub_1001783CC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1001784BC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, id))
{
  if (a2)
  {
    swift_getErrorValue(a2, v11, v10);
    id v8 = sub_100177B68(v10[1], v10[2]);
  }

  else
  {
    id v8 = 0LL;
  }

  a5(a1 & 1, v8);
  return swift_errorRelease();
}

void sub_10017888C(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

void sub_1001788FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    v5.super.Class isa = 0LL;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  v5.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

void sub_100178990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1001789E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))
{
  if (a12)
  {
    swift_getErrorValue(a12, v26, v25);
    id v19 = sub_100177B68(v25[1], v25[2]);
  }

  else
  {
    id v19 = 0LL;
  }

  a15(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v19);
  return swift_errorRelease();
}

void sub_100178DE0( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2) {
    NSString v16 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v16 = 0LL;
  }
  if (a4 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a6 >> 60 == 15) {
    Class v18 = 0LL;
  }
  else {
    Class v18 = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a8 >> 60 == 15) {
    Class v19 = 0LL;
  }
  else {
    Class v19 = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a10 >> 60 != 15)
  {
    Class v20 = Data._bridgeToObjectiveC()().super.isa;
    if (a12) {
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v21 = 0LL;
    goto LABEL_18;
  }

  Class v20 = 0LL;
  if (!a12) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v21 = _convertErrorToNSError(_:)(a12);
LABEL_18:
  id v22 = (id)v21;
  (*(void (**)(uint64_t, NSString, Class, Class, Class, Class, uint64_t))(a13 + 16))( a13,  v16,  isa,  v18,  v19,  v20,  a11);
}

uint64_t sub_100178F44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))
{
  if (a15)
  {
    swift_getErrorValue(a15, v29, v28);
    id v19 = sub_100177B68(v28[1], v28[2]);
  }

  else
  {
    id v19 = 0LL;
  }

  a18(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, v19);
  return swift_errorRelease();
}

void sub_1001792C4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, void *a13, objc_class *a14, uint64_t a15, uint64_t a16)
{
  NSString v20 = a13;
  Class v19 = a14;
  if (a2) {
    NSString v21 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v21 = 0LL;
  }
  uint64_t v28 = v21;
  if (a4 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a6 >> 60 == 15) {
    Class v23 = 0LL;
  }
  else {
    Class v23 = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a8 >> 60 == 15) {
    Class v24 = 0LL;
  }
  else {
    Class v24 = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a10 >> 60 != 15)
  {
    Class v25 = Data._bridgeToObjectiveC()().super.isa;
    if (!a13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  Class v25 = 0LL;
  if (a13) {
LABEL_17:
  }
    NSString v20 = String._bridgeToObjectiveC()();
LABEL_18:
  if (a14)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    Class v19 = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a15) {
    uint64_t v26 = _convertErrorToNSError(_:)(a15);
  }
  else {
    uint64_t v26 = 0LL;
  }
  id v27 = (id)v26;
  (*(void (**)(uint64_t, void *, Class, Class, Class, Class, uint64_t, NSString, Class, uint64_t))(a16 + 16))( a16,  v28,  isa,  v23,  v24,  v25,  a11,  v20,  v19,  v26);
}

uint64_t sub_100179484( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, id))
{
  if (a5)
  {
    swift_getErrorValue(a5, v17, v16);
    id v14 = sub_100177B68(v16[1], v16[2]);
  }

  else
  {
    id v14 = 0LL;
  }

  a8(a1, a2, a3, a4, v14);
  return swift_errorRelease();
}

void sub_100179570(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Class isa = a3;
  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  NSString v10 = 0LL;
  if (a3)
  {
LABEL_3:
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

uint64_t sub_100179634( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, id))
{
  if (a5)
  {
    swift_getErrorValue(a5, v17, v16);
    id v14 = sub_100177B68(v16[1], v16[2]);
  }

  else
  {
    id v14 = 0LL;
  }

  a8(a1, a2, a3, a4, v14);
  return swift_errorRelease();
}

void sub_100179988(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a4 >> 60 != 15)
  {
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    if (a5) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v11 = 0LL;
    goto LABEL_9;
  }

  Class v10 = 0LL;
  if (!a5) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v11 = _convertErrorToNSError(_:)(a5);
LABEL_9:
  id v12 = (id)v11;
  (*(void (**)(uint64_t, Class, Class))(a6 + 16))(a6, isa, v10);
}

uint64_t sub_100179A44( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, void, id))
{
  if (a5)
  {
    swift_getErrorValue(a5, v17, v16);
    id v14 = sub_100177B68(v16[1], v16[2]);
  }

  else
  {
    id v14 = 0LL;
  }

  a8(a1, a2, a3, a4 & 1, v14);
  return swift_errorRelease();
}

void sub_100179B2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    NSString v10 = 0LL;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v11 = 0LL;
    goto LABEL_6;
  }

  NSString v10 = String._bridgeToObjectiveC()();
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v11 = _convertErrorToNSError(_:)(a5);
LABEL_6:
  id v12 = (id)v11;
  (*(void (**)(uint64_t, NSString, uint64_t, void))(a6 + 16))(a6, v10, a3, a4 & 1);
}

void sub_100179D1C( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, Class a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a4 >> 60 != 15)
  {
    Class v14 = Data._bridgeToObjectiveC()().super.isa;
    if (!a5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  Class v14 = 0LL;
  if (a5)
  {
LABEL_8:
    sub_100007620(0LL, &qword_100257410, &off_10022CEA8);
    a5 = Array._bridgeToObjectiveC()().super.isa;
  }

void sub_100179E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    NSString v8 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v9 = 0LL;
    goto LABEL_6;
  }

  NSString v8 = String._bridgeToObjectiveC()();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v9 = _convertErrorToNSError(_:)(a4);
LABEL_6:
  id v10 = (id)v9;
  (*(void (**)(uint64_t, NSString, uint64_t))(a5 + 16))(a5, v8, a3);
}

uint64_t sub_100179EB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, id), uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a4)
  {
    swift_getErrorValue(a4, v18, v17);
    id v15 = sub_100177B68(v17[1], v17[2]);
  }

  else
  {
    id v15 = 0LL;
  }

  a7(a1, a2, a3, v15);
  return swift_errorRelease();
}

void sub_10017A04C( uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, void *aBlock, void (*a7)(void *, id, _TtC18TrustedPeersHelper6Client *, uint64_t, void *))
{
  id v12 = _Block_copy(aBlock);
  uint64_t v13 = sub_100007620(0LL, &qword_100257410, &off_10022CEA8);
  Class v14 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a5, v13);
  _Block_copy(v12);
  id v15 = a3;
  id v16 = a4;
  swift_retain(a1);
  a7(a3, v16, v14, a1, v12);
  _Block_release(v12);
  _Block_release(v12);

  swift_release(a1);
  swift_bridgeObjectRelease(v14, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_10017A120( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id), uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a7)
  {
    swift_getErrorValue(a7, v23, v22);
    id v20 = sub_100177B68(v22[1], v22[2]);
  }

  else
  {
    id v20 = 0LL;
  }

  a10(a1, a2, a3, a4, a5, a6, v20);
  return swift_errorRelease();
}

uint64_t sub_10017A5E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, id))
{
  if (a5)
  {
    swift_getErrorValue(a5, v14, v13);
    id v11 = sub_100177B68(v13[1], v13[2]);
  }

  else
  {
    id v11 = 0LL;
  }

  a6(a1, a2, a3, a4, v11);
  return swift_errorRelease();
}

void sub_10017A694( uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, _TtC18TrustedPeersHelper6Client *a6, void *aBlock, void (*a8)(void *, _TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, uint64_t, void *))
{
  Class v14 = _Block_copy(aBlock);
  uint64_t v15 = sub_100007620(0LL, &qword_100256FC0, off_10022CE98);
  id v16 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v15);
  uint64_t v17 = sub_100007620(0LL, &qword_100257410, &off_10022CEA8);
  id v18 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a5, v17);
  if (a6) {
    a6 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)( a6,  &type metadata for Data);
  }
  _Block_copy(v14);
  swift_retain(a1);
  id v19 = a3;
  a8(a3, v16, v18, a6, a1, v14);
  _Block_release(v14);
  _Block_release(v14);

  swift_release(a1);
  swift_bridgeObjectRelease(v16, v20, v21, v22, v23, v24, v25, v26);
  swift_bridgeObjectRelease(v18, v27, v28, v29, v30, v31, v32, v33);
  swift_bridgeObjectRelease(a6, v34, v35, v36, v37, v38, v39, v40);
}

void sub_10017A990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v7 = _convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v7 = 0LL;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a1, a2);
}

void sub_10017AB84(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_10017AC3C( uint64_t a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(void *, uint64_t, uint64_t, void *))
{
  id v10 = _Block_copy(aBlock);
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)( a4,  &type metadata for String,  &protocol witness table for String);
  _Block_copy(v10);
  id v12 = a3;
  swift_retain(a1);
  a6(a3, v11, a1, v10);
  _Block_release(v10);
  _Block_release(v10);

  swift_release(a1);
  return swift_bridgeObjectRelease(v11);
}

void sub_10017ADDC(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  Class isa = a2;
  if (a1)
  {
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  v7.super.Class isa = 0LL;
  if (a2) {
LABEL_3:
  }
    Class isa = Array._bridgeToObjectiveC()().super.isa;
LABEL_4:
  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, v7.super.isa, isa);
}

void sub_10017AF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    v5.super.Class isa = 0LL;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_10017AF84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))
{
  if (a7)
  {
    swift_getErrorValue(a7, v18, v17);
    id v15 = sub_100177B68(v17[1], v17[2]);
  }

  else
  {
    id v15 = 0LL;
  }

  a8(a1, a2, a3, a4, a5, a6, v15);
  return swift_errorRelease();
}

void sub_10017B048( uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  NSString v11 = a4;
  if (a2 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  Class isa = 0LL;
  if (a4) {
LABEL_5:
  }
    NSString v11 = String._bridgeToObjectiveC()();
LABEL_6:
  if (a6 >> 60 != 15)
  {
    Class v13 = Data._bridgeToObjectiveC()().super.isa;
    if (a7) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v14 = 0LL;
    goto LABEL_11;
  }

  Class v13 = 0LL;
  if (!a7) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v14 = _convertErrorToNSError(_:)(a7);
LABEL_11:
  id v15 = (id)v14;
  (*(void (**)(uint64_t, Class, NSString, Class))(a8 + 16))(a8, isa, v11, v13);
}

uint64_t sub_10017B134(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, id))
{
  if (a3)
  {
    swift_getErrorValue(a3, v10, v9);
    id v7 = sub_100177B68(v9[1], v9[2]);
  }

  else
  {
    id v7 = 0LL;
  }

  a4(a1, a2, v7);
  return swift_errorRelease();
}

void sub_10017B33C(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    sub_10004CE64();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_10017B4C8( uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *aBlock, unint64_t *a8, void *a9, void (*a10)(void *, uint64_t, _TtC18TrustedPeersHelper6Client *, uint64_t, _TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, uint64_t, void *))
{
  id v16 = _Block_copy(aBlock);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  id v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5);
  int64_t v22 = v21;
  uint64_t v23 = sub_100007620(0LL, a8, a9);
  id v24 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a6, v23);
  _Block_copy(v16);
  id v25 = a3;
  swift_retain(a1);
  a10(a3, v17, v19, v20, v22, v24, a1, v16);
  _Block_release(v16);
  _Block_release(v16);

  swift_release(a1);
  swift_bridgeObjectRelease(v19, v26, v27, v28, v29, v30, v31, v32);
  swift_bridgeObjectRelease(v22, v33, v34, v35, v36, v37, v38, v39);
  swift_bridgeObjectRelease(v24, v40, v41, v42, v43, v44, v45, v46);
}

uint64_t sub_10017B5E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, id), uint64_t a7, uint64_t a8, unint64_t a9)
{
  if (a3)
  {
    swift_getErrorValue(a3, v16, v15);
    id v13 = sub_100177B68(v15[1], v15[2]);
  }

  else
  {
    id v13 = 0LL;
  }

  a6(a1, a2, v13);
  return swift_errorRelease();
}

void sub_10017B81C(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void *a6)
{
  Class isa = a1;
  if (a1)
  {
    sub_100007620(0LL, a5, a6);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a3) {
    uint64_t v10 = _convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v10 = 0LL;
  }
  id v11 = (id)v10;
  (*(void (**)(uint64_t, Class, uint64_t))(a4 + 16))(a4, isa, a2);
}

uint64_t sub_10017B8B0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id), uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a1)
  {
    swift_getErrorValue(a1, v12, v11);
    id v9 = sub_100177B68(v11[1], v11[2]);
  }

  else
  {
    id v9 = 0LL;
  }

  a4(v9);
  return swift_errorRelease();
}

uint64_t sub_10017B95C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, id), uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2)
  {
    swift_getErrorValue(a2, v14, v13);
    id v11 = sub_100177B68(v13[1], v13[2]);
  }

  else
  {
    id v11 = 0LL;
  }

  a5(a1, v11);
  return swift_errorRelease();
}

uint64_t sub_10017BA14( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, void (*a6)(void *, char *, uint64_t, void *))
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
  _Block_copy(v15);
  id v16 = a3;
  swift_retain(a1);
  a6(a3, v14, a1, v15);
  _Block_release(v15);
  _Block_release(v15);

  swift_release(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_10017BC34(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  Class isa = 0LL;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

void sub_10017BE48(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_100007620(0LL, &qword_100256CA8, &OBJC_CLASS___TPPBPeerStableInfoSetting_ptr);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_10017BF14(uint64_t a1, void (*a2)(id))
{
  if (a1)
  {
    swift_getErrorValue(a1, v6, v5);
    id v3 = sub_100177B68(v5[1], v5[2]);
  }

  else
  {
    id v3 = 0LL;
  }

  a2(v3);
  return swift_errorRelease();
}

uint64_t sub_10017BF8C( uint64_t a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(void *, uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v13 = v12;
  _Block_copy(v10);
  id v14 = a3;
  swift_retain(a1);
  a6(a3, v11, v13, a1, v10);
  _Block_release(v10);
  _Block_release(v10);

  swift_release(a1);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_10017C044( uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, void *aBlock, void (*a7)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5);
  uint64_t v18 = v17;
  _Block_copy(v12);
  id v19 = a3;
  swift_retain(a1);
  a7(a3, v13, v15, v16, v18, a1, v12);
  _Block_release(v12);
  _Block_release(v12);

  swift_release(a1);
  swift_bridgeObjectRelease(v15);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_10017C120(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, id))
{
  if (a2)
  {
    swift_getErrorValue(a2, v8, v7);
    id v5 = sub_100177B68(v7[1], v7[2]);
  }

  else
  {
    id v5 = 0LL;
  }

  a3(a1, v5);
  return swift_errorRelease();
}

uint64_t sub_10017C1B0(char a1, uint64_t a2, void (*a3)(void, id))
{
  if (a2)
  {
    swift_getErrorValue(a2, v8, v7);
    id v5 = sub_100177B68(v7[1], v7[2]);
  }

  else
  {
    id v5 = 0LL;
  }

  a3(a1 & 1, v5);
  return swift_errorRelease();
}

uint64_t sub_10017C240( uint64_t a1, int a2, void *a3, void *aBlock, void (*a5)(void *, uint64_t, void *))
{
  id v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  swift_retain(a1);
  a5(a3, a1, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_release(a1);
}

void sub_10017C2F4( _TtC18TrustedPeersHelper6Client *a1, int a2, void *a3, uint64_t a4, void *aBlock, unint64_t *a6, void *a7, void (*a8)(void *, _TtC18TrustedPeersHelper6Client *, _TtC18TrustedPeersHelper6Client *, void *))
{
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = sub_100007620(0LL, a6, a7);
  uint64_t v16 = (_TtC18TrustedPeersHelper6Client *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v15);
  _Block_copy(v14);
  id v17 = a3;
  swift_retain(a1);
  a8(a3, v16, a1, v14);
  _Block_release(v14);
  _Block_release(v14);

  swift_release(a1, v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(v16, v25, v26, v27, v28, v29, v30, v31);
}

void sub_10017C3B4(objc_class *a1, Class a2, uint64_t a3, uint64_t a4, unint64_t *a5, void *a6)
{
  Class isa = a1;
  if (a1)
  {
    sub_100007620(0LL, a5, a6);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a2)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
    a2 = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a3) {
    uint64_t v10 = _convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v10 = 0LL;
  }
  id v11 = (id)v10;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, isa, a2);
}

uint64_t sub_10017C478()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for Client()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper6Client);
}

uint64_t sub_10017C4C4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10017C594(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100061664((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100061664((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100007600(v12);
  return v7;
}

uint64_t sub_10017C594(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_10017C74C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10017C7E0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_10017C9B8(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10017C9B8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10017C7E0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      id v5 = sub_10017C954(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_10017C954(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100007578(&qword_1002573E8);
  id v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  void v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10017C9B8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100007578(&qword_1002573E8);
    id v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

void sub_10017CB04(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (a7)
  {
    swift_errorRetain(a7);
    if (qword_100250ED0 != -1) {
      swift_once(&qword_100250ED0, sub_100177AF8);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v13, (uint64_t)qword_100257120);
    swift_errorRetain(a7);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_errorRetain(a7);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v14 = swift_bridgeObjectRetain(a6);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v18 = static os_log_type_t.error.getter(oslog, v15, v16, v17);
    if (os_log_type_enabled(oslog, v18))
    {
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = swift_slowAlloc(96LL, -1LL);
      uint64_t v40 = v20;
      *(_DWORD *)uint64_t v19 = 136446722;
      swift_bridgeObjectRetain(a2);
      uint64_t v39 = sub_10017C4C4(a1, a2, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v21 = sub_1000E2CA0(a3, a4, a5, a6);
      unint64_t v23 = v22;
      uint64_t v39 = sub_10017C4C4(v21, v22, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 22) = 2082;
      uint64_t v39 = a7;
      swift_errorRetain(a7);
      uint64_t v24 = sub_100007578(&qword_100251D70);
      uint64_t v25 = String.init<A>(describing:)(&v39, v24);
      unint64_t v27 = v26;
      uint64_t v39 = sub_10017C4C4(v25, v26, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 24, v19 + 32);
      swift_bridgeObjectRelease(v27);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v18,  "%{public}s errored for %{public}s: %{public}s",  (uint8_t *)v19,  0x20u);
      swift_arrayDestroy(v20, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_errorRelease();
      swift_errorRelease();
    }
  }

  else
  {
    if (qword_100250ED0 != -1) {
      swift_once(&qword_100250ED0, sub_100177AF8);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v28, (uint64_t)qword_100257120);
    swift_bridgeObjectRetain_n(a2, 2LL);
    swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v29 = swift_bridgeObjectRetain_n(a6, 2LL);
    BOOL v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v33 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v33;
      *(_DWORD *)uint64_t v32 = 136446466;
      swift_bridgeObjectRetain(a2);
      uint64_t v39 = sub_10017C4C4(a1, a2, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      *(_WORD *)(v32 + 12) = 2082;
      uint64_t v34 = sub_1000E2CA0(a3, a4, a5, a6);
      unint64_t v36 = v35;
      uint64_t v39 = sub_10017C4C4(v34, v35, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s finished for %{public}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
    }
  }

uint64_t sub_10017D014( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18 = a12;
  sub_10017CB04( 0x65726170657250LL,  0xE700000000000000LL,  *(void *)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name),  *(void **)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name + 8),  *(void *)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name + 16),  *(void **)(a13 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_name + 24),  a12);
  if (a12)
  {
    swift_getErrorValue(a12, v27, v26);
    uint64_t v18 = (uint64_t)sub_100177B68(v26[1], v26[2]);
  }

  if (a2) {
    NSString v19 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v19 = 0LL;
  }
  if (a4 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a6 >> 60 == 15) {
    Class v21 = 0LL;
  }
  else {
    Class v21 = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a8 >> 60 == 15) {
    Class v22 = 0LL;
  }
  else {
    Class v22 = Data._bridgeToObjectiveC()().super.isa;
  }
  if (a10 >> 60 != 15)
  {
    Class v23 = Data._bridgeToObjectiveC()().super.isa;
    if (v18) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v24 = 0LL;
    goto LABEL_20;
  }

  Class v23 = 0LL;
  if (!v18) {
    goto LABEL_19;
  }
LABEL_17:
  uint64_t v24 = (void *)_convertErrorToNSError(_:)(v18);
LABEL_20:
  (*(void (**)(uint64_t, NSString, Class, Class, Class, Class, uint64_t, void *))(a14 + 16))( a14,  v19,  isa,  v21,  v22,  v23,  a11,  v24);

  return swift_errorRelease();
}

uint64_t sub_10017D1E8(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a2)
  {
    swift_getErrorValue(a2, v9, v8);
    id v5 = sub_100177B68(v8[1], v8[2]);
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  id v5 = 0LL;
  if (a1)
  {
LABEL_3:
    sub_100007620(0LL, &qword_100256CA8, &OBJC_CLASS___TPPBPeerStableInfoSetting_ptr);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }

uint64_t sub_10017D2C4(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  id v65 = a3;
  uint64_t v66 = swift_allocObject(&unk_10023D258, 24LL, 7LL);
  *(void *)(v66 + 16) = v65;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v64 = v7;
  int64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v67 = (uint64_t)a1;
    uint64_t v68 = (void *)v12;
    *(_DWORD *)id v11 = 136446210;
    id v63 = v11 + 4;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v67, v14);
    unint64_t v17 = v16;
    uint64_t v67 = sub_10017C4C4(v15, v16, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Dumping for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      id v62 = v8;
      id v63 = (uint8_t *)a1;
      uint64_t v18 = *(void *)(a2 + 24);
      id v19 = v8;
      id v20 = objc_msgSend(v19, "cloudkitContainerName", v62, a1, v64);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v23 = v22;

      id v24 = [v19 octagonContextID];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      __chkstk_darwin(v28, v29);
      v61[2] = v18;
      void v61[3] = v21;
      v61[4] = v23;
      v61[5] = v25;
      v61[6] = v27;
      v61[7] = v19;
      uint64_t v30 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v68, sub_100195820, v61, v30);

      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v23);
      id v55 = v68;
      id v56 = (void *)swift_allocObject(&unk_10023D280, 48LL, 7LL);
      v56[2] = a2;
      v56[3] = v55;
      uint64_t v57 = v66;
      v56[4] = sub_100196D28;
      v56[5] = v57;
      swift_retain(a2);
      id v58 = v55;
      swift_retain(v57);
      sub_1000EF4E0((uint64_t)sub_100196DC0, (uint64_t)v56);
      swift_release(v57);

      uint64_t v59 = v56;
      return swift_release(v59);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v31 = sub_100043F74();
  uint64_t v32 = swift_allocError(&type metadata for ContainerError, v31, 0LL, 0LL);
  *(_OWORD *)uint64_t v33 = xmmword_1001E6990;
  *(_BYTE *)(v33 + 16) = 13;
  swift_willThrow(v32);
  id v34 = v8;
  swift_errorRetain(v32);
  id v35 = v34;
  uint64_t v36 = swift_errorRetain(v32);
  id v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v41 = static os_log_type_t.error.getter(v37, v38, v39, v40);
  if (os_log_type_enabled(v37, v41))
  {
    uint64_t v42 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = swift_slowAlloc(64LL, -1LL);
    uint64_t v67 = (uint64_t)a1;
    uint64_t v68 = (void *)v43;
    *(_DWORD *)uint64_t v42 = 136446466;
    id v44 = v35;
    uint64_t v45 = sub_100007578(&qword_1002573E0);
    uint64_t v46 = String.init<A>(describing:)(&v67, v45);
    unint64_t v48 = v47;
    uint64_t v67 = sub_10017C4C4(v46, v47, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 4, v42 + 12);

    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v42 + 12) = 2082;
    uint64_t v67 = v32;
    swift_errorRetain(v32);
    uint64_t v49 = sub_100007578(&qword_100251D70);
    uint64_t v50 = String.init<A>(describing:)(&v67, v49);
    unint64_t v52 = v51;
    uint64_t v67 = sub_10017C4C4(v50, v51, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease(v52);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v41,  "Dumping failed for %{public}s: %{public}s",  (uint8_t *)v42,  0x16u);
    swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v32, v70, v69);
  id v53 = sub_100177B68(v69[1], v69[2]);
  id v54 = (void *)_convertErrorToNSError(_:)(v53);
  v65[2](v65, 0LL, v54);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v59 = (void *)v66;
  return swift_release(v59);
}

uint64_t sub_10017D864(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  id v65 = a3;
  uint64_t v66 = swift_allocObject(&unk_10023D208, 24LL, 7LL);
  *(void *)(v66 + 16) = v65;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v64 = v7;
  int64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v67 = (uint64_t)a1;
    uint64_t v68 = (void *)v12;
    *(_DWORD *)id v11 = 136446210;
    id v63 = v11 + 4;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v67, v14);
    unint64_t v17 = v16;
    uint64_t v67 = sub_10017C4C4(v15, v16, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "honorIDMSListChanges for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      id v62 = v8;
      id v63 = (uint8_t *)a1;
      uint64_t v18 = *(void *)(a2 + 24);
      id v19 = v8;
      id v20 = objc_msgSend(v19, "cloudkitContainerName", v62, a1, v64);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v23 = v22;

      id v24 = [v19 octagonContextID];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      __chkstk_darwin(v28, v29);
      v61[2] = v18;
      void v61[3] = v21;
      v61[4] = v23;
      v61[5] = v25;
      v61[6] = v27;
      v61[7] = v19;
      uint64_t v30 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v68, sub_100195820, v61, v30);

      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v23);
      id v55 = v68;
      id v56 = (void *)swift_allocObject(&unk_10023D230, 48LL, 7LL);
      v56[2] = a2;
      v56[3] = v55;
      uint64_t v57 = v66;
      v56[4] = sub_100197004;
      v56[5] = v57;
      swift_retain(a2);
      id v58 = v55;
      swift_retain(v57);
      sub_1000F1E34((uint64_t)sub_100196CE8, (uint64_t)v56);
      swift_release(v57);

      uint64_t v59 = v56;
      return swift_release(v59);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v31 = sub_100043F74();
  uint64_t v32 = swift_allocError(&type metadata for ContainerError, v31, 0LL, 0LL);
  *(_OWORD *)uint64_t v33 = xmmword_1001E6990;
  *(_BYTE *)(v33 + 16) = 13;
  swift_willThrow(v32);
  id v34 = v8;
  swift_errorRetain(v32);
  id v35 = v34;
  uint64_t v36 = swift_errorRetain(v32);
  id v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v41 = static os_log_type_t.error.getter(v37, v38, v39, v40);
  if (os_log_type_enabled(v37, v41))
  {
    uint64_t v42 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = swift_slowAlloc(64LL, -1LL);
    uint64_t v67 = (uint64_t)a1;
    uint64_t v68 = (void *)v43;
    *(_DWORD *)uint64_t v42 = 136446466;
    id v44 = v35;
    uint64_t v45 = sub_100007578(&qword_1002573E0);
    uint64_t v46 = String.init<A>(describing:)(&v67, v45);
    unint64_t v48 = v47;
    uint64_t v67 = sub_10017C4C4(v46, v47, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 4, v42 + 12);

    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v42 + 12) = 2082;
    uint64_t v67 = v32;
    swift_errorRetain(v32);
    uint64_t v49 = sub_100007578(&qword_100251D70);
    uint64_t v50 = String.init<A>(describing:)(&v67, v49);
    unint64_t v52 = v51;
    uint64_t v67 = sub_10017C4C4(v50, v51, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease(v52);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v41,  "honorIDMSListChanges failed for %{public}s: %{public}s",  (uint8_t *)v42,  0x16u);
    swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v32, v70, v69);
  id v53 = sub_100177B68(v69[1], v69[2]);
  id v54 = (void *)_convertErrorToNSError(_:)(v53);
  v65[2](v65, 0LL, v54);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v59 = (void *)v66;
  return swift_release(v59);
}

uint64_t sub_10017DE04( void *a1, uint64_t a2, uint64_t a3, void *a4, void (**a5)(const void *, void, void *))
{
  uint64_t v66 = a3;
  uint64_t v67 = a2;
  SEL v69 = a5;
  uint64_t v70 = swift_allocObject(&unk_10023D1B8, 24LL, 7LL);
  *(void *)(v70 + 16) = v69;
  _Block_copy(a5);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_100257120);
  id v10 = a1;
  uint64_t v68 = v9;
  id v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    id v65 = a4;
    id v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v71 = (uint64_t)a1;
    id v72 = (void *)v14;
    *(_DWORD *)id v13 = 136446210;
    id v15 = v10;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    uint64_t v17 = String.init<A>(describing:)(&v71, v16);
    unint64_t v19 = v18;
    uint64_t v71 = sub_10017C4C4(v17, v18, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v13 + 4, v13 + 12);

    a4 = v65;
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Finding bottleID for %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      v64[8] = v10;
      id v65 = a1;
      uint64_t v20 = a4[3];
      id v21 = v10;
      id v22 = objc_msgSend(v21, "cloudkitContainerName", v10, a1);
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v25 = v24;

      id v26 = [v21 octagonContextID];
      uint64_t v27 = a4;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v30 = v29;

      __chkstk_darwin(v31, v32);
      v64[2] = v20;
      v64[3] = v23;
      v64[4] = v25;
      uint64_t v64[5] = v28;
      v64[6] = v30;
      v64[7] = v21;
      uint64_t v33 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v72, sub_100195820, v64, v33);

      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v25);
      id v58 = v72;
      uint64_t v59 = (void *)swift_allocObject(&unk_10023D1E0, 48LL, 7LL);
      v59[2] = v27;
      v59[3] = v58;
      uint64_t v60 = v70;
      v59[4] = sub_100196C88;
      v59[5] = v60;
      swift_retain(v27);
      id v61 = v58;
      swift_retain(v60);
      sub_1000434E4(v67, v66, (uint64_t)sub_100196C9C, (uint64_t)v59);
      swift_release(v60);

      id v62 = v59;
      return swift_release(v62);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v34 = sub_100043F74();
  uint64_t v35 = swift_allocError(&type metadata for ContainerError, v34, 0LL, 0LL);
  *(_OWORD *)uint64_t v36 = xmmword_1001E6990;
  *(_BYTE *)(v36 + 16) = 13;
  swift_willThrow(v35);
  id v37 = v10;
  swift_errorRetain(v35);
  id v38 = v37;
  uint64_t v39 = swift_errorRetain(v35);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v44 = static os_log_type_t.error.getter(v40, v41, v42, v43);
  if (os_log_type_enabled(v40, v44))
  {
    uint64_t v45 = swift_slowAlloc(22LL, -1LL);
    uint64_t v46 = swift_slowAlloc(64LL, -1LL);
    uint64_t v71 = (uint64_t)a1;
    id v72 = (void *)v46;
    *(_DWORD *)uint64_t v45 = 136446466;
    id v47 = v38;
    uint64_t v48 = sub_100007578(&qword_1002573E0);
    uint64_t v49 = String.init<A>(describing:)(&v71, v48);
    unint64_t v51 = v50;
    uint64_t v71 = sub_10017C4C4(v49, v50, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v45 + 4, v45 + 12);

    swift_bridgeObjectRelease(v51);
    *(_WORD *)(v45 + 12) = 2082;
    uint64_t v71 = v35;
    swift_errorRetain(v35);
    uint64_t v52 = sub_100007578(&qword_100251D70);
    uint64_t v53 = String.init<A>(describing:)(&v71, v52);
    unint64_t v55 = v54;
    uint64_t v71 = sub_10017C4C4(v53, v54, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease(v55);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v44,  "Finding bottleID failed for %{public}s: %{public}s",  (uint8_t *)v45,  0x16u);
    swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v35, v74, v73);
  id v56 = sub_100177B68(v73[1], v73[2]);
  uint64_t v57 = (void *)_convertErrorToNSError(_:)(v56);
  v69[2](v69, 0LL, v57);

  swift_errorRelease();
  swift_errorRelease();
  id v62 = (void *)v70;
  return swift_release(v62);
}

uint64_t sub_10017E3B4(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  id v65 = a3;
  uint64_t v66 = swift_allocObject(&unk_10023D168, 24LL, 7LL);
  *(void *)(v66 + 16) = v65;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v64 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v67 = (uint64_t)a1;
    uint64_t v68 = (void *)v12;
    *(_DWORD *)id v11 = 136446210;
    id v63 = v11 + 4;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v67, v14);
    unint64_t v17 = v16;
    uint64_t v67 = sub_10017C4C4(v15, v16, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Finding deviceNames for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      id v62 = v8;
      id v63 = (uint8_t *)a1;
      uint64_t v18 = *(void *)(a2 + 24);
      id v19 = v8;
      id v20 = objc_msgSend(v19, "cloudkitContainerName", v62, a1, v64);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v23 = v22;

      id v24 = [v19 octagonContextID];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      __chkstk_darwin(v28, v29);
      v61[2] = v18;
      void v61[3] = v21;
      v61[4] = v23;
      v61[5] = v25;
      v61[6] = v27;
      v61[7] = v19;
      uint64_t v30 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v68, sub_100195820, v61, v30);

      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v23);
      unint64_t v55 = v68;
      id v56 = (void *)swift_allocObject(&unk_10023D190, 48LL, 7LL);
      v56[2] = a2;
      v56[3] = v55;
      uint64_t v57 = v66;
      v56[4] = sub_100196C1C;
      v56[5] = v57;
      swift_retain(a2);
      id v58 = v55;
      swift_retain(v57);
      sub_1000F2008((uint64_t)sub_100196C54, (uint64_t)v56);
      swift_release(v57);

      uint64_t v59 = v56;
      return swift_release(v59);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v31 = sub_100043F74();
  uint64_t v32 = swift_allocError(&type metadata for ContainerError, v31, 0LL, 0LL);
  *(_OWORD *)uint64_t v33 = xmmword_1001E6990;
  *(_BYTE *)(v33 + 16) = 13;
  swift_willThrow(v32);
  id v34 = v8;
  swift_errorRetain(v32);
  id v35 = v34;
  uint64_t v36 = swift_errorRetain(v32);
  id v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v41 = static os_log_type_t.error.getter(v37, v38, v39, v40);
  if (os_log_type_enabled(v37, v41))
  {
    uint64_t v42 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = swift_slowAlloc(64LL, -1LL);
    uint64_t v67 = (uint64_t)a1;
    uint64_t v68 = (void *)v43;
    *(_DWORD *)uint64_t v42 = 136446466;
    id v44 = v35;
    uint64_t v45 = sub_100007578(&qword_1002573E0);
    uint64_t v46 = String.init<A>(describing:)(&v67, v45);
    unint64_t v48 = v47;
    uint64_t v67 = sub_10017C4C4(v46, v47, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 4, v42 + 12);

    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v42 + 12) = 2082;
    uint64_t v67 = v32;
    swift_errorRetain(v32);
    uint64_t v49 = sub_100007578(&qword_100251D70);
    uint64_t v50 = String.init<A>(describing:)(&v67, v49);
    unint64_t v52 = v51;
    uint64_t v67 = sub_10017C4C4(v50, v51, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease(v52);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v41,  "Finding deviceNames failed for %{public}s: %{public}s",  (uint8_t *)v42,  0x16u);
    swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v32, v70, v69);
  id v53 = sub_100177B68(v69[1], v69[2]);
  unint64_t v54 = (void *)_convertErrorToNSError(_:)(v53);
  v65[2](v65, 0LL, v54);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v59 = (void *)v66;
  return swift_release(v59);
}

uint64_t sub_10017E954(void *a1, uint64_t a2, void (**a3)(const void *, id, void *))
{
  uint64_t v6 = swift_allocObject(&unk_10023D078, 24LL, 7LL);
  uint64_t v7 = v6;
  *(void *)(v6 + 16) = a3;
  id v72 = a3;
  if (a1)
  {
    uint64_t v71 = v6;
    uint64_t v8 = *(void *)(a2 + 24);
    _Block_copy(a3);
    id v9 = a1;
    id v10 = [v9 cloudkitContainerName];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    id v14 = [v9 octagonContextID];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    __chkstk_darwin(v18, v19);
    v68[2] = v8;
    void v68[3] = v11;
    v68[4] = v13;
    v68[5] = v15;
    uint64_t v69 = v17;
    id v70 = v9;
    uint64_t v20 = type metadata accessor for Container();
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v68, v20);

    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v13);
    id v53 = (void *)aBlock[0];
    uint64_t v54 = swift_allocObject(&unk_10023D0A0, 32LL, 7LL);
    uint64_t v55 = v71;
    *(void *)(v54 + 16) = sub_100195EEC;
    *(void *)(v54 + 24) = v55;
    uint64_t v56 = type metadata accessor for Container.SemaphoreWrapper();
    swift_allocObject(v56, 41LL, 7LL);
    swift_retain(v55);
    uint64_t v57 = v53;
    uint64_t v58 = sub_100159634(v57, 0xD000000000000013LL, 0x80000001001F9DF0LL);

    uint64_t v59 = (void *)swift_allocObject(&unk_10023D0C8, 40LL, 7LL);
    v59[2] = v58;
    v59[3] = sub_100196FF4;
    v59[4] = v54;
    uint64_t v60 = *(void **)&v57[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    id v61 = (void *)swift_allocObject(&unk_10023D0F0, 40LL, 7LL);
    v61[2] = v57;
    void v61[3] = sub_100196BF0;
    v61[4] = v59;
    uint64_t v62 = swift_allocObject(&unk_10023D118, 32LL, 7LL);
    *(void *)(v62 + 16) = sub_100196C00;
    *(void *)(v62 + 24) = v61;
    aBlock[4] = (uint64_t)sub_100044B24;
    uint64_t v74 = v62;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_10023D130;
    id v63 = _Block_copy(aBlock);
    uint64_t v64 = v74;
    id v65 = v57;
    swift_retain(v58);
    swift_retain(v54);
    swift_retain(v59);
    swift_retain(v62);
    swift_release(v64);
    [v60 performBlockAndWait:v63];
    swift_release(v59);
    swift_release(v58);
    _Block_release(v63);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v62, "", 108LL, 2004LL, 33LL, 1LL);
    swift_release(v55);

    swift_release(v54);
    swift_release(v61);
    uint64_t result = swift_release(v62);
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      __break(1u);
    }
  }

  else
  {
    unint64_t v21 = sub_100043F74();
    uint64_t v22 = swift_allocError(&type metadata for ContainerError, v21, 0LL, 0LL);
    *(_OWORD *)uint64_t v23 = xmmword_1001E6990;
    *(_BYTE *)(v23 + 16) = 13;
    id v24 = _Block_copy(a3);
    swift_willThrow(v24);
    if (qword_100250ED0 != -1) {
      swift_once(&qword_100250ED0, sub_100177AF8);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v25, (uint64_t)qword_100257120);
    id v26 = 0LL;
    swift_errorRetain(v22);
    id v27 = v26;
    uint64_t v28 = swift_errorRetain(v22);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v33 = static os_log_type_t.error.getter(v29, v30, v31, v32);
    if (os_log_type_enabled(v29, v33))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v35;
      *(_DWORD *)uint64_t v34 = 136446466;
      uint64_t v75 = 0LL;
      id v36 = v27;
      uint64_t v37 = sub_100007578(&qword_1002573E0);
      uint64_t v38 = String.init<A>(describing:)(&v75, v37);
      unint64_t v40 = v39;
      uint64_t v75 = sub_10017C4C4(v38, v39, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v34 + 4, v34 + 12);

      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v34 + 12) = 2082;
      uint64_t v75 = v22;
      swift_errorRetain(v22);
      uint64_t v41 = sub_100007578(&qword_100251D70);
      uint64_t v42 = String.init<A>(describing:)(&v75, v41);
      unint64_t v44 = v43;
      uint64_t v75 = sub_10017C4C4(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease(v44);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v33,  "Trust status failed for %{public}s: %{public}s",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v45 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v46 = sub_10000C480((uint64_t)_swiftEmptyArrayStorage);
    id v47 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperEgoPeerStatus);
    sub_100007620(0LL, &qword_100256EF8, &OBJC_CLASS___NSNumber_ptr);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45);
    Class v49 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v46);
    LOBYTE(v69) = 0;
    id v50 = [v47 initWithEgoPeerID:0 egoPeerMachineID:0 status:32 viablePeerCountsByModelID:isa peerCountsByMachineID:v49 isExcluded:0 isLocked:v69];

    swift_getErrorValue(v22, v77, v76);
    id v51 = sub_100177B68(v76[1], v76[2]);
    unint64_t v52 = (void *)_convertErrorToNSError(_:)(v51);
    v72[2](v72, v50, v52);

    swift_errorRelease();
    swift_errorRelease();
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_10017F028(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v60 = a2;
  uint64_t v63 = swift_allocObject(&unk_10023D028, 24LL, 7LL);
  *(void *)(v63 + 16) = a3;
  id v61 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v62 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = (uint64_t)a1;
    id v65 = (void *)v10;
    *(_DWORD *)id v9 = 136446210;
    uint64_t v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v64, v13);
    unint64_t v16 = v15;
    uint64_t v64 = sub_10017C4C4(v14, v15, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v62;
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetch Trust State for %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11)
    {
LABEL_5:
      v59[8] = a1;
      uint64_t v17 = *(void *)(v60 + 24);
      id v18 = v6;
      id v19 = objc_msgSend(v18, "cloudkitContainerName", a1);
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v22 = v21;

      id v23 = [v18 octagonContextID];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v26 = v25;

      __chkstk_darwin(v27, v28);
      v59[2] = v17;
      v59[3] = v20;
      v59[4] = v22;
      v59[5] = v24;
      v59[6] = v26;
      v59[7] = v18;
      uint64_t v29 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v65, sub_100195820, v59, v29);

      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v22);
      uint64_t v54 = v65;
      uint64_t v55 = swift_allocObject(&unk_10023D050, 32LL, 7LL);
      uint64_t v56 = v63;
      *(void *)(v55 + 16) = sub_100196BCC;
      *(void *)(v55 + 24) = v56;
      swift_retain(v56);
      sub_1000ECDF4((uint64_t)sub_100196BD4, v55);
      swift_release(v56);

      uint64_t v57 = v55;
      return swift_release(v57);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v30 = sub_100043F74();
  uint64_t v31 = swift_allocError(&type metadata for ContainerError, v30, 0LL, 0LL);
  *(_OWORD *)uint64_t v32 = xmmword_1001E6990;
  *(_BYTE *)(v32 + 16) = 13;
  swift_willThrow(v31);
  id v33 = v6;
  swift_errorRetain(v31);
  id v34 = v33;
  uint64_t v35 = swift_errorRetain(v31);
  id v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v40 = static os_log_type_t.error.getter(v36, v37, v38, v39);
  if (os_log_type_enabled(v36, v40))
  {
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = swift_slowAlloc(64LL, -1LL);
    uint64_t v64 = (uint64_t)a1;
    id v65 = (void *)v42;
    *(_DWORD *)uint64_t v41 = 136446466;
    id v43 = v34;
    uint64_t v44 = sub_100007578(&qword_1002573E0);
    uint64_t v45 = String.init<A>(describing:)(&v64, v44);
    unint64_t v47 = v46;
    uint64_t v64 = sub_10017C4C4(v45, v46, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v41 + 4, v41 + 12);

    swift_bridgeObjectRelease(v47);
    *(_WORD *)(v41 + 12) = 2082;
    uint64_t v64 = v31;
    swift_errorRetain(v31);
    uint64_t v48 = sub_100007578(&qword_100251D70);
    uint64_t v49 = String.init<A>(describing:)(&v64, v48);
    unint64_t v51 = v50;
    uint64_t v64 = sub_10017C4C4(v49, v50, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease(v51);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v40,  "Fetch Trust State failed for %{public}s: %{public}s",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v31, v67, v66);
  id v52 = sub_100177B68(v66[1], v66[2]);
  id v53 = (void *)_convertErrorToNSError(_:)(v52);
  (*((void (**)(const void *, void, void, void *))v61 + 2))(v61, 0LL, 0LL, v53);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v57 = v63;
  return swift_release(v57);
}

uint64_t sub_10017F5D8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, void (**a13)(const void *, void *))
{
  int v80 = a8;
  int v78 = a7;
  uint64_t v76 = a6;
  uint64_t v77 = a2;
  uint64_t v81 = a4;
  uint64_t v82 = a5;
  uint64_t v79 = a3;
  id v84 = a13;
  uint64_t v85 = swift_allocObject(&unk_10023CFD8, 24LL, 7LL);
  *(void *)(v85 + 16) = a13;
  _Block_copy(a13);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100006BAC(v14, (uint64_t)qword_100257120);
  id v16 = a1;
  uint64_t v83 = v15;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v86 = (uint64_t)a1;
    id v87 = (void *)v20;
    *(_DWORD *)id v19 = 136446210;
    uint64_t v21 = a1;
    id v22 = v16;
    uint64_t v23 = sub_100007578(&qword_1002573E0);
    uint64_t v24 = String.init<A>(describing:)(&v86, v23);
    id v25 = v16;
    unint64_t v27 = v26;
    uint64_t v86 = sub_10017C4C4(v24, v26, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v19 + 4, v19 + 12);

    a1 = v21;
    unint64_t v28 = v27;
    id v16 = v25;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Resetting for %{public}s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    if (v21)
    {
LABEL_5:
      uint64_t v74 = a12;
      uint64_t v75 = a1;
      uint64_t v29 = *(void *)(a12 + 24);
      id v30 = v16;
      id v31 = [v30 cloudkitContainerName];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v34 = v33;

      id v35 = [v30 octagonContextID];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v38 = v37;

      __chkstk_darwin(v39, v40);
      v73[2] = v29;
      void v73[3] = v32;
      v73[4] = v34;
      v73[5] = v36;
      v73[6] = v38;
      v73[7] = v30;
      uint64_t v41 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v87, sub_100195820, v73, v41);

      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v34);
      uint64_t v66 = v87;
      uint64_t v67 = (void *)swift_allocObject(&unk_10023D000, 48LL, 7LL);
      uint64_t v68 = v74;
      v67[2] = v74;
      v67[3] = v66;
      uint64_t v69 = v85;
      v67[4] = sub_100196E00;
      v67[5] = v69;
      swift_retain(v68);
      id v70 = v66;
      swift_retain(v69);
      sub_1000F2CE8( v77,  v79,  v81,  v82,  v76,  v78 & 1,  v80 & 1,  a9 & 1,  a10 & 1,  a11,  (uint64_t)sub_100196B98,  (uint64_t)v67);
      swift_release(v69);

      uint64_t v71 = v67;
      return swift_release(v71);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v42 = sub_100043F74();
  uint64_t v43 = swift_allocError(&type metadata for ContainerError, v42, 0LL, 0LL);
  *(_OWORD *)uint64_t v44 = xmmword_1001E6990;
  *(_BYTE *)(v44 + 16) = 13;
  swift_willThrow(v43);
  id v45 = v16;
  swift_errorRetain(v43);
  id v46 = v45;
  uint64_t v47 = swift_errorRetain(v43);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
  if (os_log_type_enabled(v48, v52))
  {
    uint64_t v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = swift_slowAlloc(64LL, -1LL);
    uint64_t v86 = (uint64_t)a1;
    id v87 = (void *)v54;
    *(_DWORD *)uint64_t v53 = 136446466;
    id v55 = v46;
    uint64_t v56 = sub_100007578(&qword_1002573E0);
    uint64_t v57 = String.init<A>(describing:)(&v86, v56);
    unint64_t v59 = v58;
    uint64_t v86 = sub_10017C4C4(v57, v58, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v53 + 4, v53 + 12);

    swift_bridgeObjectRelease(v59);
    *(_WORD *)(v53 + 12) = 2082;
    uint64_t v86 = v43;
    swift_errorRetain(v43);
    uint64_t v60 = sub_100007578(&qword_100251D70);
    uint64_t v61 = String.init<A>(describing:)(&v86, v60);
    unint64_t v63 = v62;
    uint64_t v86 = sub_10017C4C4(v61, v62, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease(v63);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v52,  "Resetting failed for %{public}s: %{public}s",  (uint8_t *)v53,  0x16u);
    swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v43, v89, v88);
  id v64 = sub_100177B68(v88[1], v88[2]);
  id v65 = (void *)_convertErrorToNSError(_:)(v64);
  v84[2](v84, v65);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v71 = (void *)v85;
  return swift_release(v71);
}

uint64_t sub_10017FBDC( void *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, void (**a6)(const void *, void *))
{
  id v119 = (id)__PAIR64__(a4, a3);
  HIDWORD(v11_Block_object_dispose(va, 8) = a2;
  id v121 = a6;
  uint64_t v122 = swift_allocObject(&unk_10023CEE8, 24LL, 7LL);
  *(void *)(v122 + 16) = v121;
  _Block_copy(a6);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100006BAC(v9, (uint64_t)qword_100257120);
  id v11 = a1;
  uint64_t v120 = v10;
  id v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  id v123 = v11;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v126 = (uint64_t)a1;
    id v16 = v123;
    uint64_t v17 = sub_100007578(&qword_1002573E0);
    uint64_t v18 = String.init<A>(describing:)(&v126, v17);
    uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v126 = sub_10017C4C4(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v14 + 4, v14 + 12);

    id v11 = v123;
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27, v117, SBYTE1(v117), v118, v119);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "performCKServerUnreadableDataRemoval for %{public}s",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      BOOL v117 = (BOOL)a1;
      unint64_t v28 = *(void **)(a5 + 24);
      id v29 = v11;
      id v30 = objc_msgSend(v29, "cloudkitContainerName", a1);
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v33 = v32;

      id v34 = [v29 octagonContextID];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      __chkstk_darwin(v38, v39);
      id v111 = v28;
      uint64_t v112 = v31;
      id v113 = v33;
      uint64_t v114 = v35;
      id v115 = v37;
      id v116 = v29;
      uint64_t v40 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, &v108, v40);

      swift_bridgeObjectRelease(v37, v79, v80, v81, v82, v83, v84, v85, v108, v109, v110, v111);
      swift_bridgeObjectRelease(v33, v86, v87, v88, v89, v90, v91, v92, v108, v109, v110, v111);
      id v93 = (void *)aBlock[0];
      id v94 = (void *)swift_allocObject(&unk_10023CF10, 48LL, 7LL);
      v94[2] = a5;
      v94[3] = v93;
      uint64_t v95 = v122;
      v94[4] = sub_100196E00;
      v94[5] = v95;
      uint64_t v96 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v96, 41LL, 7LL);
      swift_retain(a5);
      BOOL v97 = v93;
      swift_retain(v95);
      uint64_t v98 = sub_100159634(v97, 0xD000000000000055LL, 0x80000001001F9D90LL);
      id v99 = (void *)swift_allocObject(&unk_10023CF38, 40LL, 7LL);
      v99[2] = v98;
      v99[3] = sub_100196AF4;
      v99[4] = v94;
      uint64_t v100 = *(void **)&v97[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v101 = swift_allocObject(&unk_10023CF60, 48LL, 7LL);
      *(_BYTE *)(v101 + 16) = BYTE4(v118) & 1;
      *(_BYTE *)(v101 + 17) = v119 & 1;
      *(_BYTE *)(v101 + 1_Block_object_dispose(va, 8) = BYTE4(v119) & 1;
      *(void *)(v101 + 24) = v97;
      *(void *)(v101 + 32) = sub_100196B2C;
      *(void *)(v101 + 40) = v99;
      uint64_t v102 = swift_allocObject(&unk_10023CF88, 32LL, 7LL);
      *(void *)(v102 + 16) = sub_100196B64;
      *(void *)(v102 + 24) = v101;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v125 = v102;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023CFA0;
      uint64_t v103 = _Block_copy(aBlock);
      uint64_t v104 = v125;
      uint64_t v105 = v97;
      swift_retain(v98);
      swift_retain(v94);
      swift_retain(v99);
      swift_retain(v102);
      swift_release(v104);
      [v100 performBlockAndWait:v103];
      swift_release(v99);
      swift_release(v98);
      _Block_release(v103);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v102, "", 108LL, 2399LL, 33LL, 1LL);
      swift_release(v95);

      swift_release(v94);
      swift_release(v101);
      uint64_t result = swift_release(v102);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v41 = sub_100043F74();
  uint64_t v42 = swift_allocError(&type metadata for ContainerError, v41, 0LL, 0LL);
  *(_OWORD *)uint64_t v43 = xmmword_1001E6990;
  *(_BYTE *)(v43 + 16) = 13;
  swift_willThrow(v42);
  id v44 = v11;
  swift_errorRetain(v42);
  id v45 = v44;
  uint64_t v46 = swift_errorRetain(v42);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v51 = static os_log_type_t.error.getter(v47, v48, v49, v50);
  if (os_log_type_enabled(v47, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v53;
    *(_DWORD *)uint64_t v52 = 136446466;
    uint64_t v126 = (uint64_t)a1;
    id v54 = v45;
    uint64_t v55 = sub_100007578(&qword_1002573E0);
    uint64_t v56 = String.init<A>(describing:)(&v126, v55);
    unint64_t v58 = (_TtC18TrustedPeersHelper6Client *)v57;
    uint64_t v126 = sub_10017C4C4(v56, v57, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v52 + 4, v52 + 12);

    swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65, v117, SBYTE1(v117), v118, v119);
    *(_WORD *)(v52 + 12) = 2082;
    uint64_t v126 = v42;
    swift_errorRetain(v42);
    uint64_t v66 = sub_100007578(&qword_100251D70);
    uint64_t v67 = String.init<A>(describing:)(&v126, v66);
    uint64_t v69 = (_TtC18TrustedPeersHelper6Client *)v68;
    uint64_t v126 = sub_10017C4C4(v67, v68, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76, v117, SBYTE1(v117), v118, v119);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v51,  "performCKServerUnreadableDataRemoval failed for %{public}s: %{public}s",  (uint8_t *)v52,  0x16u);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v42, v128, v127);
  id v77 = sub_100177B68(v127[1], v127[2]);
  int v78 = (void *)_convertErrorToNSError(_:)(v77);
  v121[2](v121, v78);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v122);
}

uint64_t sub_10018034C(void *a1, uint64_t a2, void (**a3)(const void *, void *))
{
  id v119 = a3;
  uint64_t v120 = swift_allocObject(&unk_10023CDF8, 24LL, 7LL);
  *(void *)(v120 + 16) = v119;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v118 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v12;
    *(_DWORD *)id v11 = 136446210;
    uint64_t v123 = (uint64_t)a1;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v123, v14);
    uint64_t v17 = (_TtC18TrustedPeersHelper6Client *)v16;
    uint64_t v123 = sub_10017C4C4(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24, v114, v115, v116, v11 + 4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Performing local reset for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      int64_t v116 = (int64_t)v8;
      id v117 = a1;
      id v25 = *(void **)(a2 + 24);
      id v26 = v8;
      id v27 = [v26 cloudkitContainerName];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      id v30 = v29;

      id v31 = [v26 octagonContextID];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v34 = v33;

      __chkstk_darwin(v35, v36);
      id v108 = v25;
      uint64_t v109 = v28;
      int64_t v110 = v30;
      uint64_t v111 = v32;
      uint64_t v112 = v34;
      id v113 = v26;
      uint64_t v37 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, &v105, v37);

      swift_bridgeObjectRelease(v34, v76, v77, v78, v79, v80, v81, v82, v105, v106, v107, v108);
      swift_bridgeObjectRelease(v30, v83, v84, v85, v86, v87, v88, v89, v105, v106, v107, v108);
      id v90 = (void *)aBlock[0];
      BOOL v91 = (void *)swift_allocObject(&unk_10023CE20, 48LL, 7LL);
      _OWORD v91[2] = a2;
      v91[3] = v90;
      uint64_t v92 = v120;
      v91[4] = sub_100196E00;
      v91[5] = v92;
      uint64_t v93 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v93, 41LL, 7LL);
      swift_retain(a2);
      id v94 = v90;
      swift_retain(v92);
      uint64_t v95 = sub_100159634(v94, 0xD000000000000012LL, 0x80000001001F9D70LL);
      uint64_t v96 = (void *)swift_allocObject(&unk_10023CE48, 40LL, 7LL);
      v96[2] = v95;
      v96[3] = sub_100196A80;
      v96[4] = v91;
      BOOL v97 = *(void **)&v94[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v98 = (void *)swift_allocObject(&unk_10023CE70, 40LL, 7LL);
      v98[2] = v94;
      v98[3] = sub_100196ABC;
      v98[4] = v96;
      uint64_t v99 = swift_allocObject(&unk_10023CE98, 32LL, 7LL);
      *(void *)(v99 + 16) = sub_100196ACC;
      *(void *)(v99 + 24) = v98;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v122 = v99;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023CEB0;
      uint64_t v100 = _Block_copy(aBlock);
      uint64_t v101 = v122;
      uint64_t v102 = v94;
      swift_retain(v95);
      swift_retain(v91);
      swift_retain(v96);
      swift_retain(v99);
      swift_release(v101);
      [v97 performBlockAndWait:v100];
      swift_release(v96);
      swift_release(v95);
      _Block_release(v100);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v99, "", 108LL, 2568LL, 33LL, 1LL);
      swift_release(v92);

      swift_release(v91);
      swift_release(v98);
      uint64_t result = swift_release(v99);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v38 = sub_100043F74();
  uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
  *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
  *(_BYTE *)(v40 + 16) = 13;
  swift_willThrow(v39);
  id v41 = v8;
  swift_errorRetain(v39);
  id v42 = v41;
  uint64_t v43 = swift_errorRetain(v39);
  id v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
  if (os_log_type_enabled(v44, v48))
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v50;
    *(_DWORD *)uint64_t v49 = 136446466;
    uint64_t v123 = (uint64_t)a1;
    id v51 = v42;
    uint64_t v52 = sub_100007578(&qword_1002573E0);
    uint64_t v53 = String.init<A>(describing:)(&v123, v52);
    uint64_t v55 = (_TtC18TrustedPeersHelper6Client *)v54;
    uint64_t v123 = sub_10017C4C4(v53, v54, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62, v114, v115, v116, v117);
    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v123 = v39;
    swift_errorRetain(v39);
    uint64_t v63 = sub_100007578(&qword_100251D70);
    uint64_t v64 = String.init<A>(describing:)(&v123, v63);
    uint64_t v66 = (_TtC18TrustedPeersHelper6Client *)v65;
    uint64_t v123 = sub_10017C4C4(v64, v65, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73, v114, v115, v116, v117);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v48,  "Local reset failed for %{public}s: %{public}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v39, v125, v124);
  id v74 = sub_100177B68(v124[1], v124[2]);
  BOOL v75 = (void *)_convertErrorToNSError(_:)(v74);
  v119[2](v119, v75);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v120);
}

uint64_t sub_100180A84( id a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)(const void *, void, void *))
{
  uint64_t v144 = a7;
  uint64_t v145 = a8;
  int v140 = a6;
  uint64_t v142 = a4;
  uint64_t v143 = a5;
  uint64_t v141 = a3;
  id v147 = a20;
  uint64_t v148 = swift_allocObject(&unk_10023CDA8, 24LL, 7LL);
  *(void *)(v148 + 16) = a20;
  _Block_copy(a20);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100006BAC(v22, (uint64_t)qword_100257120);
  id v24 = a1;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v25 = v24;
  uint64_t v146 = v23;
  id v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.info.getter(v26);
  id v139 = a2;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    uint64_t v149 = (uint64_t)a1;
    uint64_t v150 = (void *)v29;
    *(_DWORD *)uint64_t v28 = 136446466;
    id v138 = v25;
    id v30 = v25;
    uint64_t v31 = sub_100007578(&qword_1002573E0);
    uint64_t v32 = String.init<A>(describing:)(&v149, v31);
    id v34 = (_TtC18TrustedPeersHelper6Client *)v33;
    uint64_t v149 = sub_10017C4C4(v32, v33, (uint64_t *)&v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v28 + 4, v28 + 12);

    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v42 = swift_bridgeObjectRetain(a2);
    uint64_t v43 = Set.description.getter(v42, &type metadata for String, &protocol witness table for String);
    uint64_t v45 = (_TtC18TrustedPeersHelper6Client *)v44;
    swift_bridgeObjectRelease(a2, v44, v46, v47, v48, v49, v50, v51);
    uint64_t v52 = v43;
    id v25 = v138;
    uint64_t v149 = sub_10017C4C4(v52, (unint64_t)v45, (uint64_t *)&v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v45, v53, v54, v55, v56, v57, v58, v59);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Setting allowed machineIDs for %{public}s to %{public}s",  (uint8_t *)v28,  0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      uint64_t v137 = a19;
      id v138 = a1;
      uint64_t v60 = *(void *)(a19 + 24);
      id v61 = v25;
      id v62 = [v61 cloudkitContainerName];
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      unint64_t v65 = v64;

      id v66 = [v61 octagonContextID];
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      int64_t v69 = v68;

      __chkstk_darwin(v70, v71);
      void v134[2] = v60;
      v134[3] = v63;
      v134[4] = v65;
      v134[5] = v67;
      v134[6] = v69;
      v134[7] = v61;
      uint64_t v72 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v150, sub_100195820, v134, v72);
      id v138 = (id)a14;
      uint64_t v135 = a12;
      uint64_t v136 = a13;
      uint64_t v146 = a15;
      id v147 = (void (**)(const void *, void, void *))a9;

      swift_bridgeObjectRelease(v69, v113, v114, v115, v116, v117, v118, v119);
      swift_bridgeObjectRelease(v65, v120, v121, v122, v123, v124, v125, v126);
      id v127 = v150;
      id v128 = (void *)swift_allocObject(&unk_10023CDD0, 48LL, 7LL);
      uint64_t v129 = v137;
      v128[2] = v137;
      v128[3] = v127;
      uint64_t v130 = v148;
      v128[4] = sub_100196DF0;
      v128[5] = v130;
      swift_retain(v129);
      id v131 = v127;
      swift_retain(v130);
      sub_1001AE5CC( v139,  v141,  v142,  v143,  v140 & 1,  v144,  v145,  (uint64_t)v147,  a10,  a11,  v135,  v136,  (uint64_t)v138,  v146,  a16,  a17,  a18,  (uint64_t)sub_100196A68,  (uint64_t)v128);
      swift_release(v130);

      uint64_t v132 = v128;
      return swift_release(v132);
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v73 = sub_100043F74();
  uint64_t v74 = swift_allocError(&type metadata for ContainerError, v73, 0LL, 0LL);
  *(_OWORD *)uint64_t v75 = xmmword_1001E6990;
  *(_BYTE *)(v75 + 16) = 13;
  swift_willThrow(v74);
  id v76 = v25;
  swift_errorRetain(v74);
  id v77 = v76;
  uint64_t v78 = swift_errorRetain(v74);
  id v79 = (os_log_s *)Logger.logObject.getter(v78);
  os_log_type_t v83 = static os_log_type_t.error.getter(v79, v80, v81, v82);
  if (os_log_type_enabled(v79, v83))
  {
    uint64_t v84 = swift_slowAlloc(22LL, -1LL);
    uint64_t v85 = swift_slowAlloc(64LL, -1LL);
    uint64_t v86 = (uint64_t)a1;
    uint64_t v87 = v85;
    uint64_t v149 = v86;
    uint64_t v150 = (void *)v85;
    *(_DWORD *)uint64_t v84 = 136446466;
    id v88 = v77;
    uint64_t v89 = sub_100007578(&qword_1002573E0);
    uint64_t v90 = String.init<A>(describing:)(&v149, v89);
    uint64_t v92 = (_TtC18TrustedPeersHelper6Client *)v91;
    uint64_t v149 = sub_10017C4C4(v90, v91, (uint64_t *)&v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v84 + 4, v84 + 12);

    swift_bridgeObjectRelease(v92, v93, v94, v95, v96, v97, v98, v99);
    *(_WORD *)(v84 + 12) = 2082;
    uint64_t v149 = v74;
    swift_errorRetain(v74);
    uint64_t v100 = sub_100007578(&qword_100251D70);
    uint64_t v101 = String.init<A>(describing:)(&v149, v100);
    uint64_t v103 = (_TtC18TrustedPeersHelper6Client *)v102;
    uint64_t v149 = sub_10017C4C4(v101, v102, (uint64_t *)&v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v84 + 14, v84 + 22);
    swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v79,  v83,  "Setting allowed machineIDs failed for %{public}s: %{public}s",  (uint8_t *)v84,  0x16u);
    swift_arrayDestroy(v87, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1LL, -1LL);
    swift_slowDealloc(v84, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v74, v152, v151);
  id v111 = sub_100177B68(v151[1], v151[2]);
  uint64_t v112 = (void *)_convertErrorToNSError(_:)(v111);
  v147[2](v147, 0LL, v112);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v132 = (void *)v148;
  return swift_release(v132);
}

uint64_t sub_100181150(void *a1, uint64_t a2, void (**a3)(const void *, void *))
{
  id v108 = a3;
  uint64_t v109 = swift_allocObject(&unk_10023CCB8, 24LL, 7LL);
  *(void *)(v109 + 16) = v108;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v107 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v12;
    *(_DWORD *)id v11 = 136446210;
    int64_t v106 = v11 + 4;
    uint64_t v112 = (uint64_t)a1;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v112, v14);
    uint64_t v17 = (_TtC18TrustedPeersHelper6Client *)v16;
    uint64_t v112 = sub_10017C4C4(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Marking MID list as expired for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v105[9] = v8;
      int64_t v106 = (uint8_t *)a1;
      uint64_t v25 = *(void *)(a2 + 24);
      id v26 = v8;
      id v27 = [v26 cloudkitContainerName];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      id v30 = v29;

      id v31 = [v26 octagonContextID];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v34 = v33;

      __chkstk_darwin(v35, v36);
      v105[2] = v25;
      v105[3] = v28;
      v105[4] = v30;
      v105[5] = v32;
      v105[6] = v34;
      v105[7] = v26;
      uint64_t v37 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v105, v37);

      swift_bridgeObjectRelease(v34, v76, v77, v78, v79, v80, v81, v82);
      swift_bridgeObjectRelease(v30, v83, v84, v85, v86, v87, v88, v89);
      uint64_t v90 = (void *)aBlock[0];
      unint64_t v91 = (void *)swift_allocObject(&unk_10023CCE0, 48LL, 7LL);
      _OWORD v91[2] = a2;
      v91[3] = v90;
      uint64_t v92 = v109;
      v91[4] = sub_100196E00;
      v91[5] = v92;
      uint64_t v93 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v93, 41LL, 7LL);
      swift_retain(a2);
      id v94 = v90;
      swift_retain(v92);
      uint64_t v95 = sub_100159634(v94, 0xD000000000000028LL, 0x80000001001FAE30LL);
      id v96 = (void *)swift_allocObject(&unk_10023CD08, 40LL, 7LL);
      v96[2] = v95;
      v96[3] = sub_1001969F8;
      v96[4] = v91;
      id v97 = *(void **)&v94[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      BOOL v98 = (void *)swift_allocObject(&unk_10023CD30, 40LL, 7LL);
      v98[2] = v94;
      v98[3] = sub_100196A30;
      v98[4] = v96;
      uint64_t v99 = swift_allocObject(&unk_10023CD58, 32LL, 7LL);
      *(void *)(v99 + 16) = sub_100196A40;
      *(void *)(v99 + 24) = v98;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v111 = v99;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023CD70;
      uint64_t v100 = _Block_copy(aBlock);
      uint64_t v101 = v111;
      unint64_t v102 = v94;
      swift_retain(v95);
      swift_retain(v91);
      swift_retain(v96);
      swift_retain(v99);
      swift_release(v101);
      [v97 performBlockAndWait:v100];
      swift_release(v96);
      swift_release(v95);
      _Block_release(v100);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v99, "", 119LL, 220LL, 33LL, 1LL);
      swift_release(v92);

      swift_release(v91);
      swift_release(v98);
      uint64_t result = swift_release(v99);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v38 = sub_100043F74();
  uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
  *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
  *(_BYTE *)(v40 + 16) = 13;
  swift_willThrow(v39);
  id v41 = v8;
  swift_errorRetain(v39);
  id v42 = v41;
  uint64_t v43 = swift_errorRetain(v39);
  id v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
  if (os_log_type_enabled(v44, v48))
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v50;
    *(_DWORD *)uint64_t v49 = 136446466;
    uint64_t v112 = (uint64_t)a1;
    id v51 = v42;
    uint64_t v52 = sub_100007578(&qword_1002573E0);
    uint64_t v53 = String.init<A>(describing:)(&v112, v52);
    int64_t v55 = (_TtC18TrustedPeersHelper6Client *)v54;
    uint64_t v112 = sub_10017C4C4(v53, v54, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v112 = v39;
    swift_errorRetain(v39);
    uint64_t v63 = sub_100007578(&qword_100251D70);
    uint64_t v64 = String.init<A>(describing:)(&v112, v63);
    id v66 = (_TtC18TrustedPeersHelper6Client *)v65;
    uint64_t v112 = sub_10017C4C4(v64, v65, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v48,  "Marking MID list as expired failed for %{public}s: %{public}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v39, v114, v113);
  id v74 = sub_100177B68(v113[1], v113[2]);
  uint64_t v75 = (void *)_convertErrorToNSError(_:)(v74);
  v108[2](v108, v75);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v109);
}

uint64_t sub_100181888(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  uint64_t v100 = a3;
  uint64_t v101 = swift_allocObject(&unk_10023CC68, 24LL, 7LL);
  *(void *)(v101 + 16) = v100;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v99 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v102 = (uint64_t)a1;
    uint64_t v103 = (void *)v12;
    *(_DWORD *)id v11 = 136446210;
    BOOL v98 = v11 + 4;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v102, v14);
    uint64_t v17 = (_TtC18TrustedPeersHelper6Client *)v16;
    uint64_t v102 = sub_10017C4C4(v15, v16, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Fetching allowed machineIDs for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      id v97 = v8;
      BOOL v98 = (uint8_t *)a1;
      uint64_t v25 = *(void *)(a2 + 24);
      id v26 = v8;
      id v27 = objc_msgSend(v26, "cloudkitContainerName", v97, a1, v99);
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      id v30 = v29;

      id v31 = [v26 octagonContextID];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v34 = v33;

      __chkstk_darwin(v35, v36);
      v96[2] = v25;
      v96[3] = v28;
      v96[4] = v30;
      v96[5] = v32;
      v96[6] = v34;
      v96[7] = v26;
      uint64_t v37 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v103, sub_100195820, v96, v37);

      swift_bridgeObjectRelease(v34, v76, v77, v78, v79, v80, v81, v82);
      swift_bridgeObjectRelease(v30, v83, v84, v85, v86, v87, v88, v89);
      uint64_t v90 = v103;
      unint64_t v91 = (void *)swift_allocObject(&unk_10023CC90, 48LL, 7LL);
      _OWORD v91[2] = a2;
      v91[3] = v90;
      uint64_t v92 = v101;
      v91[4] = sub_1001969A4;
      v91[5] = v92;
      swift_retain(a2);
      id v93 = v90;
      swift_retain(v92);
      sub_1001A4D7C((uint64_t)sub_1001969B8, (uint64_t)v91);
      swift_release(v92);

      id v94 = v91;
      return swift_release(v94);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v38 = sub_100043F74();
  uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
  *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
  *(_BYTE *)(v40 + 16) = 13;
  swift_willThrow(v39);
  id v41 = v8;
  swift_errorRetain(v39);
  id v42 = v41;
  uint64_t v43 = swift_errorRetain(v39);
  id v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
  if (os_log_type_enabled(v44, v48))
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(64LL, -1LL);
    uint64_t v102 = (uint64_t)a1;
    uint64_t v103 = (void *)v50;
    *(_DWORD *)uint64_t v49 = 136446466;
    id v51 = v42;
    uint64_t v52 = sub_100007578(&qword_1002573E0);
    uint64_t v53 = String.init<A>(describing:)(&v102, v52);
    int64_t v55 = (_TtC18TrustedPeersHelper6Client *)v54;
    uint64_t v102 = sub_10017C4C4(v53, v54, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v102 = v39;
    swift_errorRetain(v39);
    uint64_t v63 = sub_100007578(&qword_100251D70);
    uint64_t v64 = String.init<A>(describing:)(&v102, v63);
    id v66 = (_TtC18TrustedPeersHelper6Client *)v65;
    uint64_t v102 = sub_10017C4C4(v64, v65, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v48,  "Fetching allowed machineIDs failed for %{public}s: %{public}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v39, v105, v104);
  id v74 = sub_100177B68(v104[1], v104[2]);
  uint64_t v75 = (void *)_convertErrorToNSError(_:)(v74);
  v100[2](v100, 0LL, v75);

  swift_errorRelease();
  swift_errorRelease();
  id v94 = (void *)v101;
  return swift_release(v94);
}

uint64_t sub_100181E28(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  uint64_t v95 = a2;
  uint64_t v98 = swift_allocObject(&unk_10023CC18, 24LL, 7LL);
  *(void *)(v98 + 16) = a3;
  id v96 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v97 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v99 = (uint64_t)a1;
    uint64_t v100 = (void *)v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    id v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v99, v13);
    unint64_t v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v99 = sub_10017C4C4(v14, v15, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v97;
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "retrieving epoch for %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11)
    {
LABEL_5:
      v94[8] = a1;
      uint64_t v24 = *(void *)(v95 + 24);
      id v25 = v6;
      id v26 = objc_msgSend(v25, "cloudkitContainerName", a1);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v28;

      id v30 = [v25 octagonContextID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      unint64_t v33 = v32;

      __chkstk_darwin(v34, v35);
      v94[2] = v24;
      v94[3] = v27;
      v94[4] = v29;
      v94[5] = v31;
      v94[6] = v33;
      v94[7] = v25;
      uint64_t v36 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v100, sub_100195820, v94, v36);

      swift_bridgeObjectRelease(v33, v75, v76, v77, v78, v79, v80, v81);
      swift_bridgeObjectRelease(v29, v82, v83, v84, v85, v86, v87, v88);
      BOOL v89 = v100;
      uint64_t v90 = swift_allocObject(&unk_10023CC40, 32LL, 7LL);
      uint64_t v91 = v98;
      *(void *)(v90 + 16) = sub_100196DF4;
      *(void *)(v90 + 24) = v91;
      swift_retain(v91);
      sub_1000FA4B4((uint64_t)sub_100196FF4, v90);
      swift_release(v91);

      uint64_t v92 = v90;
      return swift_release(v92);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v37 = sub_100043F74();
  uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
  *(_OWORD *)uint64_t v39 = xmmword_1001E6990;
  *(_BYTE *)(v39 + 16) = 13;
  swift_willThrow(v38);
  id v40 = v6;
  swift_errorRetain(v38);
  id v41 = v40;
  uint64_t v42 = swift_errorRetain(v38);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v99 = (uint64_t)a1;
    uint64_t v100 = (void *)v49;
    *(_DWORD *)uint64_t v48 = 136446466;
    id v50 = v41;
    uint64_t v51 = sub_100007578(&qword_1002573E0);
    uint64_t v52 = String.init<A>(describing:)(&v99, v51);
    unint64_t v54 = (_TtC18TrustedPeersHelper6Client *)v53;
    uint64_t v99 = sub_10017C4C4(v52, v53, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v99 = v38;
    swift_errorRetain(v38);
    uint64_t v62 = sub_100007578(&qword_100251D70);
    uint64_t v63 = String.init<A>(describing:)(&v99, v62);
    unint64_t v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v99 = sub_10017C4C4(v63, v64, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "Epoch retrieval failed for %{public}s: %{public}s",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v38, v102, v101);
  id v73 = sub_100177B68(v101[1], v101[2]);
  id v74 = (void *)_convertErrorToNSError(_:)(v73);
  v96[2](v96, 0LL, v74);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v92 = v98;
  return swift_release(v92);
}

void sub_1001823D4( _TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, _TtC18TrustedPeersHelper6Client *a3, _TtC18TrustedPeersHelper6Client *a4, _TtC18TrustedPeersHelper6Client *a5, _TtC18TrustedPeersHelper6Client *a6, _TtC18TrustedPeersHelper6Client *a7, void *a8, _TtC18TrustedPeersHelper6Client *a9, uint64_t a10, _TtC18TrustedPeersHelper6Client *a11, uint64_t a12, _TtC18TrustedPeersHelper6Client *a13, uint64_t a14, _TtC18TrustedPeersHelper6Client *a15, void *a16, _TtC18TrustedPeersHelper6Client *a17, int a18, void *a19, void *a20, uint64_t a21, unint64_t a22, uint64_t a23, unint64_t a24, uint64_t a25, void *aBlock)
{
  uint64_t v135 = a7;
  uint64_t v136 = a8;
  uint64_t v133 = a5;
  uint64_t v134 = a6;
  id v131 = a3;
  uint64_t v132 = a4;
  uint64_t v130 = a2;
  _Block_copy(aBlock);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = (_TtC18TrustedPeersHelper6Client *)sub_100006BAC(v27, (uint64_t)qword_100257120);
  uint64_t v29 = a1;
  id v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.info.getter(v30);
  uint64_t v137 = aBlock;
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v138 = (uint64_t)a1;
    id v139 = (void *)v33;
    *(_DWORD *)uint64_t v32 = 136446210;
    uint64_t v129 = v28;
    uint64_t v34 = a1;
    uint64_t v35 = v29;
    uint64_t v36 = sub_100007578(&qword_1002573E0);
    uint64_t v37 = String.init<A>(describing:)(&v138, v36);
    uint64_t v38 = v29;
    id v40 = (_TtC18TrustedPeersHelper6Client *)v39;
    uint64_t v138 = sub_10017C4C4(v37, v39, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v32 + 4, v32 + 12);

    a1 = v34;
    id v41 = v40;
    uint64_t v29 = v38;
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Preparing new identity for %{public}s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);

    if (v34)
    {
LABEL_5:
      id v128 = v29;
      uint64_t v129 = a1;
      uint64_t v127 = a25;
      uint64_t v49 = *(void *)(a25 + 24);
      id v50 = v29;
      id v51 = -[Client cloudkitContainerName](v50, "cloudkitContainerName");
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      unint64_t v54 = v53;

      id v55 = -[Client octagonContextID](v50, "octagonContextID");
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      id v58 = v57;

      __chkstk_darwin(v59, v60);
      v118[2] = v49;
      v118[3] = v52;
      v118[4] = v54;
      v118[5] = v56;
      v118[6] = v58;
      v118[7] = v50;
      uint64_t v61 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v139, sub_100195820, v118, v61);
      LODWORD(v12_Block_object_dispose(va, 8) = a18;
      BOOL v125 = a16;
      BOOL v126 = a17;
      id v124 = a15;
      uint64_t v123 = a14;
      int64_t v122 = a13;
      uint64_t v121 = a12;
      SEL v120 = a11;
      uint64_t v129 = a9;
      uint64_t v119 = a10;

      swift_bridgeObjectRelease(v58, v100, v101, v102, v103, v104, v105, v106);
      swift_bridgeObjectRelease(v54, v107, v108, v109, v110, v111, v112, v113);
      id v114 = v139;
      int64_t v115 = v137;
      _Block_copy(v137);
      uint64_t v116 = v127;
      swift_retain(v127);
      id v117 = v114;
      sub_1001698D8( v130,  v131,  v132,  v133,  v134,  v135,  v136,  v129,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  (int)v128,  a19,  a20,  a21,  a22,  a23,  a24,  v117,  v116,  v117,  v115);
      _Block_release(v115);

      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v62 = sub_100043F74();
  uint64_t v63 = swift_allocError(&type metadata for ContainerError, v62, 0LL, 0LL);
  *(_OWORD *)uint64_t v64 = xmmword_1001E6990;
  *(_BYTE *)(v64 + 16) = 13;
  swift_willThrow(v63);
  unint64_t v65 = v29;
  swift_errorRetain(v63);
  SEL v66 = v65;
  uint64_t v67 = swift_errorRetain(v63);
  int64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
  os_log_type_t v72 = static os_log_type_t.error.getter(v68, v69, v70, v71);
  if (os_log_type_enabled(v68, v72))
  {
    uint64_t v73 = swift_slowAlloc(22LL, -1LL);
    uint64_t v74 = swift_slowAlloc(64LL, -1LL);
    uint64_t v138 = (uint64_t)a1;
    id v139 = (void *)v74;
    *(_DWORD *)uint64_t v73 = 136446466;
    SEL v75 = v66;
    uint64_t v76 = sub_100007578(&qword_1002573E0);
    uint64_t v77 = String.init<A>(describing:)(&v138, v76);
    id v79 = (_TtC18TrustedPeersHelper6Client *)v78;
    uint64_t v138 = sub_10017C4C4(v77, v78, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v73 + 4, v73 + 12);

    swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
    *(_WORD *)(v73 + 12) = 2082;
    uint64_t v138 = v63;
    swift_errorRetain(v63);
    uint64_t v87 = sub_100007578(&qword_100251D70);
    uint64_t v88 = String.init<A>(describing:)(&v138, v87);
    uint64_t v90 = (_TtC18TrustedPeersHelper6Client *)v89;
    uint64_t v138 = sub_10017C4C4(v88, v89, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v73 + 14, v73 + 22);
    swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v68,  v72,  "Prepare failed for %{public}s: %{public}s",  (uint8_t *)v73,  0x16u);
    swift_arrayDestroy(v74, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  int64_t v115 = v137;
  swift_getErrorValue(v63, v141, v140);
  id v98 = sub_100177B68(v140[1], v140[2]);
  uint64_t v99 = (void *)_convertErrorToNSError(_:)(v98);
  (*((void (**)(void *, void, void, void, void, void, void, void *))v115 + 2))( v115,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v99);

  swift_errorRelease();
  swift_errorRelease();
LABEL_11:
  _Block_release(v115);
}

uint64_t sub_100182A60( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, const void *a11, void *a12, uint64_t a13, int a14, void *a15, void *a16, uint64_t a17, const void *a18)
{
  uint64_t v139 = a6;
  uint64_t v140 = a8;
  uint64_t v142 = a5;
  uint64_t v143 = a7;
  uint64_t v137 = a2;
  uint64_t v138 = a4;
  uint64_t v141 = a3;
  uint64_t v145 = a18;
  uint64_t v146 = swift_allocObject(&unk_10023CB78, 24LL, 7LL);
  *(void *)(v146 + 16) = a18;
  _Block_copy(a18);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_100006BAC(v19, (uint64_t)qword_100257120);
  id v21 = a1;
  uint64_t v144 = v20;
  BOOL v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v147 = (uint64_t)a1;
    uint64_t v148 = (void *)v25;
    *(_DWORD *)uint64_t v24 = 136446210;
    id v26 = v21;
    uint64_t v27 = sub_100007578(&qword_1002573E0);
    uint64_t v28 = String.init<A>(describing:)(&v147, v27);
    id v29 = v21;
    os_log_type_t v31 = (_TtC18TrustedPeersHelper6Client *)v30;
    uint64_t v147 = sub_10017C4C4(v28, v30, (uint64_t *)&v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v24 + 4, v24 + 12);

    uint64_t v32 = v31;
    id v21 = v29;
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Preparing new identity for inheritance peer %{public}s",  v24,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      uint64_t v135 = a17;
      uint64_t v136 = a1;
      uint64_t v40 = *(void *)(a17 + 24);
      id v41 = v21;
      id v42 = [v41 cloudkitContainerName];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      id v45 = v44;

      id v46 = [v41 octagonContextID];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v49 = v48;

      __chkstk_darwin(v50, v51);
      v129[2] = v40;
      v129[3] = v43;
      v129[4] = v45;
      v129[5] = v47;
      v129[6] = v49;
      v129[7] = v41;
      uint64_t v52 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v148, sub_100195820, v129, v52);
      id v130 = a16;
      id v131 = a15;
      int v134 = a14;
      uint64_t v133 = a13;
      uint64_t v132 = a12;
      uint64_t v144 = a10;
      uint64_t v145 = a11;
      uint64_t v136 = a9;

      swift_bridgeObjectRelease(v49, v91, v92, v93, v94, v95, v96, v97);
      swift_bridgeObjectRelease(v45, v98, v99, v100, v101, v102, v103, v104);
      BOOL v105 = v148;
      BOOL v106 = (void *)swift_allocObject(&unk_10023CBA0, 48LL, 7LL);
      uint64_t v107 = v135;
      v106[2] = v135;
      v106[3] = v105;
      uint64_t v108 = v146;
      v106[4] = sub_100196808;
      v106[5] = v108;
      uint64_t v109 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v109, 41LL, 7LL);
      swift_retain(v107);
      id v110 = v105;
      swift_retain(v108);
      uint64_t v111 = sub_100159634(v110, 0xD0000000000000FDLL, 0x80000001001F9B70LL);
      uint64_t v135 = v111;
      BOOL v112 = (void *)swift_allocObject(&unk_10023CBC8, 40LL, 7LL);
      v112[2] = v111;
      v112[3] = sub_10019684C;
      v112[4] = v106;
      uint64_t v113 = swift_allocObject(&unk_10023CBF0, 160LL, 7LL);
      *(void *)(v113 + 16) = sub_100196894;
      *(void *)(v113 + 24) = v112;
      *(void *)(v113 + 32) = a16;
      *(void *)(v113 + 40) = v110;
      uint64_t v115 = v141;
      uint64_t v114 = v142;
      *(void *)(v113 + 4_Block_object_dispose(va, 8) = v137;
      *(void *)(v113 + 56) = v115;
      *(void *)(v113 + 64) = v138;
      *(void *)(v113 + 72) = v114;
      uint64_t v116 = v132;
      *(void *)(v113 + 80) = v132;
      *(_DWORD *)(v113 + 8_Block_object_dispose(va, 8) = v134;
      uint64_t v117 = v133;
      *(void *)(v113 + 96) = v133;
      *(void *)(v113 + 104) = a15;
      uint64_t v118 = v143;
      *(void *)(v113 + 112) = v139;
      *(void *)(v113 + 120) = v118;
      *(void *)(v113 + 12_Block_object_dispose(va, 8) = v140;
      uint64_t v119 = v136;
      uint64_t v120 = v144;
      uint64_t v121 = v145;
      *(void *)(v113 + 136) = v136;
      *(void *)(v113 + 144) = v120;
      *(void *)(v113 + 152) = v121;
      swift_bridgeObjectRetain(v119);
      swift_bridgeObjectRetain(v121);
      id v122 = v110;
      uint64_t v123 = v135;
      swift_retain(v135);
      swift_retain(v106);
      swift_retain(v112);
      id v124 = v130;
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRetain(v114);
      id v125 = v116;
      swift_bridgeObjectRetain(v117);
      id v126 = v131;
      swift_bridgeObjectRetain(v118);
      sub_100137D5C((uint64_t)sub_10019694C, v113);
      swift_release(v146);

      swift_release(v106);
      swift_release(v123);
      swift_release(v112);
      uint64_t v127 = v113;
      return swift_release(v127);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v53 = sub_100043F74();
  uint64_t v54 = swift_allocError(&type metadata for ContainerError, v53, 0LL, 0LL);
  *(_OWORD *)uint64_t v55 = xmmword_1001E6990;
  *(_BYTE *)(v55 + 16) = 13;
  swift_willThrow(v54);
  id v56 = v21;
  swift_errorRetain(v54);
  id v57 = v56;
  uint64_t v58 = swift_errorRetain(v54);
  uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v63 = static os_log_type_t.error.getter(v59, v60, v61, v62);
  if (os_log_type_enabled(v59, v63))
  {
    uint64_t v64 = swift_slowAlloc(22LL, -1LL);
    uint64_t v65 = swift_slowAlloc(64LL, -1LL);
    uint64_t v147 = (uint64_t)a1;
    uint64_t v148 = (void *)v65;
    *(_DWORD *)uint64_t v64 = 136446466;
    id v66 = v57;
    uint64_t v67 = sub_100007578(&qword_1002573E0);
    uint64_t v68 = String.init<A>(describing:)(&v147, v67);
    uint64_t v70 = (_TtC18TrustedPeersHelper6Client *)v69;
    uint64_t v147 = sub_10017C4C4(v68, v69, (uint64_t *)&v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v64 + 4, v64 + 12);

    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    *(_WORD *)(v64 + 12) = 2082;
    uint64_t v147 = v54;
    swift_errorRetain(v54);
    uint64_t v78 = sub_100007578(&qword_100251D70);
    uint64_t v79 = String.init<A>(describing:)(&v147, v78);
    id v81 = (_TtC18TrustedPeersHelper6Client *)v80;
    uint64_t v147 = sub_10017C4C4(v79, v80, (uint64_t *)&v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v64 + 14, v64 + 22);
    swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v59,  v63,  "prepareInheritancePeer failed for %{public}s: %{public}s",  (uint8_t *)v64,  0x16u);
    swift_arrayDestroy(v65, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v54, v150, v149);
  id v89 = sub_100177B68(v149[1], v149[2]);
  uint64_t v90 = (void *)_convertErrorToNSError(_:)(v89);
  (*((void (**)(const void *, void, void, void, void, void, void, void, void, void *))v145 + 2))( v145,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v90);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v127 = v146;
  return swift_release(v127);
}

uint64_t sub_1001831EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v112 = a4;
  uint64_t v113 = a2;
  uint64_t v114 = a3;
  uint64_t v116 = a6;
  uint64_t v117 = swift_allocObject(&unk_10023CA88, 24LL, 7LL);
  *(void *)(v117 + 16) = v116;
  _Block_copy(a6);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100006BAC(v9, (uint64_t)qword_100257120);
  id v11 = a1;
  uint64_t v115 = v10;
  id v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  id v118 = v11;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v121 = (uint64_t)a1;
    id v16 = v118;
    uint64_t v17 = sub_100007578(&qword_1002573E0);
    uint64_t v18 = String.init<A>(describing:)(&v121, v17);
    uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v121 = sub_10017C4C4(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v14 + 4, v14 + 12);

    id v11 = v118;
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Establishing %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v111[9] = a1;
      uint64_t v28 = *(void *)(a5 + 24);
      id v29 = v11;
      id v30 = [v29 cloudkitContainerName];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      SEL v33 = v32;

      id v34 = [v29 octagonContextID];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      id v37 = v36;

      __chkstk_darwin(v38, v39);
      v111[2] = v28;
      v111[3] = v31;
      v111[4] = v33;
      v111[5] = v35;
      v111[6] = v37;
      v111[7] = v29;
      uint64_t v40 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v111, v40);

      swift_bridgeObjectRelease(v37, v79, v80, v81, v82, v83, v84, v85);
      swift_bridgeObjectRelease(v33, v86, v87, v88, v89, v90, v91, v92);
      int64_t v93 = (void *)aBlock[0];
      id v94 = (void *)swift_allocObject(&unk_10023CAB0, 48LL, 7LL);
      v94[2] = a5;
      v94[3] = v93;
      uint64_t v95 = v117;
      v94[4] = sub_100196FF8;
      v94[5] = v95;
      uint64_t v96 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v96, 41LL, 7LL);
      swift_retain(a5);
      BOOL v97 = v93;
      swift_retain(v95);
      uint64_t v98 = sub_100159634(v97, 0xD000000000000034LL, 0x80000001001F9B00LL);
      uint64_t v116 = (const void *)v98;
      id v99 = (void *)swift_allocObject(&unk_10023CAD8, 40LL, 7LL);
      v99[2] = v98;
      v99[3] = sub_10019675C;
      v99[4] = v94;
      id v118 = *(id *)&v97[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      int64_t v100 = (void *)swift_allocObject(&unk_10023CB00, 64LL, 7LL);
      uint64_t v102 = v113;
      uint64_t v101 = v114;
      v100[2] = v97;
      v100[3] = v102;
      uint64_t v103 = v112;
      v100[4] = v101;
      v100[5] = v103;
      v100[6] = sub_100196788;
      v100[7] = v99;
      uint64_t v104 = swift_allocObject(&unk_10023CB28, 32LL, 7LL);
      *(void *)(v104 + 16) = sub_1001967D8;
      *(void *)(v104 + 24) = v100;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v120 = v104;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023CB40;
      BOOL v105 = _Block_copy(aBlock);
      uint64_t v106 = v120;
      swift_bridgeObjectRetain(v103);
      swift_retain(v99);
      swift_retain(v104);
      uint64_t v107 = v97;
      uint64_t v108 = v116;
      swift_retain(v116);
      swift_retain(v94);
      swift_bridgeObjectRetain(v102);
      swift_bridgeObjectRetain(v101);
      swift_release(v106);
      [v118 performBlockAndWait:v105];
      swift_release(v99);
      swift_release(v108);
      _Block_release(v105);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v104, "", 108LL, 3016LL, 33LL, 1LL);
      swift_release(v117);

      swift_release(v94);
      swift_release(v100);
      uint64_t result = swift_release(v104);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v41 = sub_100043F74();
  uint64_t v42 = swift_allocError(&type metadata for ContainerError, v41, 0LL, 0LL);
  *(_OWORD *)uint64_t v43 = xmmword_1001E6990;
  *(_BYTE *)(v43 + 16) = 13;
  swift_willThrow(v42);
  id v44 = v11;
  swift_errorRetain(v42);
  id v45 = v44;
  uint64_t v46 = swift_errorRetain(v42);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v51 = static os_log_type_t.error.getter(v47, v48, v49, v50);
  if (os_log_type_enabled(v47, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v53;
    *(_DWORD *)uint64_t v52 = 136446466;
    uint64_t v121 = (uint64_t)a1;
    id v54 = v45;
    uint64_t v55 = sub_100007578(&qword_1002573E0);
    uint64_t v56 = String.init<A>(describing:)(&v121, v55);
    uint64_t v58 = (_TtC18TrustedPeersHelper6Client *)v57;
    uint64_t v121 = sub_10017C4C4(v56, v57, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v52 + 4, v52 + 12);

    swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
    *(_WORD *)(v52 + 12) = 2082;
    uint64_t v121 = v42;
    swift_errorRetain(v42);
    uint64_t v66 = sub_100007578(&qword_100251D70);
    uint64_t v67 = String.init<A>(describing:)(&v121, v66);
    unint64_t v69 = (_TtC18TrustedPeersHelper6Client *)v68;
    uint64_t v121 = sub_10017C4C4(v67, v68, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v51,  "Establishing failed for %{public}s: %{public}s",  (uint8_t *)v52,  0x16u);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v42, v123, v122);
  id v77 = sub_100177B68(v122[1], v122[2]);
  uint64_t v78 = (void *)_convertErrorToNSError(_:)(v77);
  (*((void (**)(const void *, void, void, void, void *))v116 + 2))(v116, 0LL, 0LL, 0LL, v78);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v117);
}

uint64_t sub_100183974( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, void *a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, const void *a19)
{
  unint64_t v133 = a7;
  uint64_t v134 = a8;
  unint64_t v131 = a5;
  uint64_t v132 = a6;
  uint64_t v129 = a3;
  uint64_t v130 = a4;
  uint64_t v128 = a2;
  uint64_t v135 = a19;
  uint64_t v136 = swift_allocObject(&unk_10023CA38, 24LL, 7LL);
  *(void *)(v136 + 16) = a19;
  _Block_copy(a19);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v20, (uint64_t)qword_100257120);
  id v21 = a1;
  id v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.info.getter(v22);
  id v137 = v21;
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v138 = (uint64_t)a1;
    uint64_t v139 = (void *)v25;
    *(_DWORD *)id v24 = 136446210;
    id v26 = v21;
    uint64_t v27 = sub_100007578(&qword_1002573E0);
    uint64_t v28 = String.init<A>(describing:)(&v138, v27);
    id v29 = a1;
    uint64_t v31 = (_TtC18TrustedPeersHelper6Client *)v30;
    uint64_t v138 = sub_10017C4C4(v28, v30, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v24 + 4, v24 + 12);

    id v21 = v137;
    uint64_t v32 = v31;
    a1 = v29;
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Vouching %{public}s", v24, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);

    if (v29)
    {
LABEL_5:
      uint64_t v126 = a18;
      unint64_t v127 = (unint64_t)a1;
      uint64_t v40 = *(void *)(a18 + 24);
      id v41 = v21;
      id v42 = [v41 cloudkitContainerName];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      id v45 = v44;

      id v46 = [v41 octagonContextID];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v49 = v48;

      __chkstk_darwin(v50, v51);
      v123[2] = v40;
      v123[3] = v43;
      v123[4] = v45;
      v123[5] = v47;
      v123[6] = v49;
      v123[7] = v41;
      uint64_t v52 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v139, sub_100195820, v123, v52);
      uint64_t v135 = (const void *)a12;
      unint64_t v127 = a11;
      id v137 = a9;
      uint64_t v124 = a16;
      uint64_t v125 = a10;

      swift_bridgeObjectRelease(v49, v91, v92, v93, v94, v95, v96, v97);
      swift_bridgeObjectRelease(v45, v98, v99, v100, v101, v102, v103, v104);
      BOOL v105 = v139;
      id v106 = [v41 altDSID];
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
      uint64_t v109 = v108;

      id v110 = (void *)swift_allocObject(&unk_10023CA60, 48LL, 7LL);
      uint64_t v111 = v126;
      v110[2] = v126;
      v110[3] = v105;
      uint64_t v112 = v136;
      void v110[4] = sub_100196714;
      v110[5] = v112;
      swift_retain(v111);
      id v113 = v105;
      swift_retain(v112);
      sub_1001120D4( v128,  v129,  v130,  v131,  v132,  v133,  v134,  (unint64_t)v137,  v125,  v127,  (uint64_t)v135,  v107,  (uint64_t)v109,  a13,  a14,  a15,  v124,  a17 & 1,  (uint64_t)sub_100196728,  (uint64_t)v110);
      swift_release(v112);

      swift_bridgeObjectRelease(v109, v114, v115, v116, v117, v118, v119, v120);
      uint64_t v121 = v110;
      return swift_release(v121);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v53 = sub_100043F74();
  uint64_t v54 = swift_allocError(&type metadata for ContainerError, v53, 0LL, 0LL);
  *(_OWORD *)uint64_t v55 = xmmword_1001E6990;
  *(_BYTE *)(v55 + 16) = 13;
  swift_willThrow(v54);
  id v56 = v137;
  swift_errorRetain(v54);
  id v57 = v56;
  uint64_t v58 = swift_errorRetain(v54);
  SEL v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v63 = static os_log_type_t.error.getter(v59, v60, v61, v62);
  if (os_log_type_enabled(v59, v63))
  {
    uint64_t v64 = swift_slowAlloc(22LL, -1LL);
    uint64_t v65 = swift_slowAlloc(64LL, -1LL);
    uint64_t v138 = (uint64_t)a1;
    uint64_t v139 = (void *)v65;
    *(_DWORD *)uint64_t v64 = 136446466;
    id v66 = v57;
    uint64_t v67 = sub_100007578(&qword_1002573E0);
    uint64_t v68 = String.init<A>(describing:)(&v138, v67);
    SEL v70 = (_TtC18TrustedPeersHelper6Client *)v69;
    uint64_t v138 = sub_10017C4C4(v68, v69, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v64 + 4, v64 + 12);

    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    *(_WORD *)(v64 + 12) = 2082;
    uint64_t v138 = v54;
    swift_errorRetain(v54);
    uint64_t v78 = sub_100007578(&qword_100251D70);
    uint64_t v79 = String.init<A>(describing:)(&v138, v78);
    int64_t v81 = (_TtC18TrustedPeersHelper6Client *)v80;
    uint64_t v138 = sub_10017C4C4(v79, v80, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v64 + 14, v64 + 22);
    swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v59,  v63,  "Vouching failed for %{public}s: %{public}s",  (uint8_t *)v64,  0x16u);
    swift_arrayDestroy(v65, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v54, v141, v140);
  id v89 = sub_100177B68(v140[1], v140[2]);
  id v90 = (void *)_convertErrorToNSError(_:)(v89);
  (*((void (**)(const void *, void, void, void *))v135 + 2))(v135, 0LL, 0LL, v90);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v121 = (void *)v136;
  return swift_release(v121);
}

uint64_t sub_100183FF0(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v112 = a2;
  uint64_t v113 = a3;
  id v115 = a5;
  uint64_t v116 = swift_allocObject(&unk_10023C948, 24LL, 7LL);
  *(void *)(v116 + 16) = v115;
  _Block_copy(a5);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_100257120);
  id v10 = a1;
  uint64_t v114 = v9;
  id v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v111 = a4;
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v14;
    *(_DWORD *)os_log_type_t v13 = 136446210;
    uint64_t v119 = (uint64_t)a1;
    id v15 = v10;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    uint64_t v17 = String.init<A>(describing:)(&v119, v16);
    id v18 = v10;
    uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v119 = sub_10017C4C4(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v13 + 4, v13 + 12);

    id v21 = v20;
    id v10 = v18;
    swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Preflight Vouch With Bottle %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    a4 = v111;
    swift_slowDealloc(v13, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v110[8] = v10;
      uint64_t v111 = a1;
      uint64_t v29 = a4[3];
      id v30 = v10;
      id v31 = objc_msgSend(v30, "cloudkitContainerName", v10, a1);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v34 = v33;

      id v35 = [v30 octagonContextID];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      BOOL v38 = v37;

      __chkstk_darwin(v39, v40);
      v110[2] = v29;
      v110[3] = v32;
      void v110[4] = v34;
      v110[5] = v36;
      v110[6] = v38;
      v110[7] = v30;
      uint64_t v41 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v110, v41);

      swift_bridgeObjectRelease(v38, v80, v81, v82, v83, v84, v85, v86);
      swift_bridgeObjectRelease(v34, v87, v88, v89, v90, v91, v92, v93);
      id v94 = (void *)aBlock[0];
      id v95 = (void *)swift_allocObject(&unk_10023C970, 48LL, 7LL);
      v95[2] = a4;
      v95[3] = v94;
      uint64_t v96 = v116;
      v95[4] = sub_100196664;
      void v95[5] = v96;
      uint64_t v97 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v97, 41LL, 7LL);
      swift_retain(a4);
      SEL v98 = v94;
      swift_retain(v96);
      uint64_t v99 = sub_100159634(v98, 0xD000000000000029LL, 0x80000001001F6310LL);
      int64_t v100 = (void *)swift_allocObject(&unk_10023C998, 40LL, 7LL);
      v100[2] = v99;
      v100[3] = sub_100196678;
      v100[4] = v95;
      id v115 = *(id *)&v98[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      id v101 = (void *)swift_allocObject(&unk_10023C9C0, 56LL, 7LL);
      uint64_t v102 = v112;
      uint64_t v103 = v113;
      v101[2] = v98;
      void v101[3] = v102;
      v101[4] = v103;
      v101[5] = sub_1001966A4;
      v101[6] = v100;
      uint64_t v104 = swift_allocObject(&unk_10023C9E8, 32LL, 7LL);
      *(void *)(v104 + 16) = sub_1001966F8;
      *(void *)(v104 + 24) = v101;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v118 = v104;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023CA00;
      BOOL v105 = _Block_copy(aBlock);
      uint64_t v106 = v118;
      uint64_t v107 = v98;
      swift_retain(v99);
      swift_retain(v95);
      swift_bridgeObjectRetain(v103);
      swift_retain(v100);
      swift_retain(v104);
      swift_release(v106);
      [v115 performBlockAndWait:v105];
      swift_release(v100);
      swift_release(v99);
      _Block_release(v105);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v104, "", 121LL, 30LL, 33LL, 1LL);
      swift_release(v96);

      swift_release(v95);
      swift_release(v101);
      uint64_t result = swift_release(v104);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v42 = sub_100043F74();
  uint64_t v43 = swift_allocError(&type metadata for ContainerError, v42, 0LL, 0LL);
  *(_OWORD *)uint64_t v44 = xmmword_1001E6990;
  *(_BYTE *)(v44 + 16) = 13;
  swift_willThrow(v43);
  id v45 = v10;
  swift_errorRetain(v43);
  id v46 = v45;
  uint64_t v47 = swift_errorRetain(v43);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
  if (os_log_type_enabled(v48, v52))
  {
    uint64_t v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v54;
    *(_DWORD *)uint64_t v53 = 136446466;
    uint64_t v119 = (uint64_t)a1;
    id v55 = v46;
    uint64_t v56 = sub_100007578(&qword_1002573E0);
    uint64_t v57 = String.init<A>(describing:)(&v119, v56);
    SEL v59 = (_TtC18TrustedPeersHelper6Client *)v58;
    uint64_t v119 = sub_10017C4C4(v57, v58, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v53 + 4, v53 + 12);

    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    *(_WORD *)(v53 + 12) = 2082;
    uint64_t v119 = v43;
    swift_errorRetain(v43);
    uint64_t v67 = sub_100007578(&qword_100251D70);
    uint64_t v68 = String.init<A>(describing:)(&v119, v67);
    SEL v70 = (_TtC18TrustedPeersHelper6Client *)v69;
    uint64_t v119 = sub_10017C4C4(v68, v69, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v52,  "Preflighting Vouch With Bottle failed for %{public}s: %{public}s",  (uint8_t *)v53,  0x16u);
    swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v43, v121, v120);
  id v78 = sub_100177B68(v120[1], v120[2]);
  uint64_t v79 = (void *)_convertErrorToNSError(_:)(v78);
  (*((void (**)(id, void, void, void, void *))v115 + 2))(v115, 0LL, 0LL, 0LL, v79);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v116);
}

uint64_t sub_100184758( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v125 = a7;
  uint64_t v126 = a8;
  uint64_t v121 = a6;
  uint64_t v122 = a3;
  uint64_t v123 = a4;
  unint64_t v124 = a5;
  uint64_t v120 = a2;
  id v128 = a10;
  uint64_t v129 = swift_allocObject(&unk_10023C858, 24LL, 7LL);
  *(void *)(v129 + 16) = a10;
  _Block_copy(a10);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  os_log_type_t v12 = (char *)sub_100006BAC(v11, (uint64_t)qword_100257120);
  id v13 = a1;
  unint64_t v127 = v12;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v132 = (uint64_t)a1;
    id v18 = a1;
    id v19 = v13;
    uint64_t v20 = sub_100007578(&qword_1002573E0);
    uint64_t v21 = String.init<A>(describing:)(&v132, v20);
    id v23 = (_TtC18TrustedPeersHelper6Client *)v22;
    uint64_t v132 = sub_10017C4C4(v21, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v16 + 4, v16 + 12);

    a1 = v18;
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Vouching With Bottle %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    if (v18) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      uint64_t v119 = (uint64_t)a1;
      uint64_t v118 = a9;
      uint64_t v31 = *(void *)(a9 + 24);
      id v32 = v13;
      id v33 = [v32 cloudkitContainerName];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v36 = v35;

      id v37 = [v32 octagonContextID];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      uint64_t v40 = v39;

      __chkstk_darwin(v41, v42);
      v117[2] = v31;
      v117[3] = v34;
      v117[4] = v36;
      v117[5] = v38;
      v117[6] = v40;
      v117[7] = v32;
      uint64_t v43 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v117, v43);

      swift_bridgeObjectRelease(v40, v82, v83, v84, v85, v86, v87, v88);
      swift_bridgeObjectRelease(v36, v89, v90, v91, v92, v93, v94, v95);
      uint64_t v96 = (void *)aBlock[0];
      uint64_t v97 = (void *)swift_allocObject(&unk_10023C880, 48LL, 7LL);
      uint64_t v98 = v118;
      void v97[2] = v118;
      v97[3] = v96;
      uint64_t v99 = v129;
      v97[4] = sub_100196DFC;
      v97[5] = v99;
      uint64_t v100 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v100, 41LL, 7LL);
      swift_retain(v98);
      id v101 = v96;
      swift_retain(v99);
      uint64_t v102 = sub_100159634(v101, 0xD00000000000003DLL, 0x80000001001F9AC0LL);
      uint64_t v119 = v102;
      uint64_t v103 = (void *)swift_allocObject(&unk_10023C8A8, 40LL, 7LL);
      v103[2] = v102;
      v103[3] = sub_10019655C;
      v103[4] = v97;
      id v128 = *(id *)&v101[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v104 = (void *)swift_allocObject(&unk_10023C8D0, 96LL, 7LL);
      uint64_t v105 = v120;
      v104[2] = v101;
      void v104[3] = v105;
      uint64_t v106 = v122;
      uint64_t v107 = v123;
      v104[4] = v122;
      v104[5] = sub_1001965AC;
      v104[6] = v103;
      v104[7] = v107;
      unint64_t v108 = v124;
      uint64_t v109 = v125;
      uint64_t v110 = v121;
      v104[8] = v124;
      v104[9] = v110;
      uint64_t v111 = v126;
      v104[10] = v109;
      v104[11] = v111;
      uint64_t v112 = swift_allocObject(&unk_10023C8F8, 32LL, 7LL);
      *(void *)(v112 + 16) = sub_100196620;
      *(void *)(v112 + 24) = v104;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v131 = v112;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023C910;
      uint64_t v113 = _Block_copy(aBlock);
      uint64_t v121 = v131;
      unint64_t v127 = v101;
      uint64_t v114 = v119;
      swift_retain(v119);
      swift_retain(v97);
      swift_bridgeObjectRetain(v106);
      swift_retain(v103);
      sub_1000084E8(v107, v108);
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRetain(v126);
      swift_retain(v112);
      swift_release(v121);
      [v128 performBlockAndWait:v113];
      swift_release(v103);
      swift_release(v114);
      _Block_release(v113);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v112, "", 108LL, 3682LL, 33LL, 1LL);
      swift_release(v129);

      swift_release(v97);
      swift_release(v104);
      uint64_t result = swift_release(v112);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v44 = sub_100043F74();
  uint64_t v45 = swift_allocError(&type metadata for ContainerError, v44, 0LL, 0LL);
  *(_OWORD *)uint64_t v46 = xmmword_1001E6990;
  *(_BYTE *)(v46 + 16) = 13;
  swift_willThrow(v45);
  id v47 = v13;
  swift_errorRetain(v45);
  id v48 = v47;
  uint64_t v49 = swift_errorRetain(v45);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v54 = static os_log_type_t.error.getter(v50, v51, v52, v53);
  if (os_log_type_enabled(v50, v54))
  {
    uint64_t v55 = swift_slowAlloc(22LL, -1LL);
    uint64_t v56 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v56;
    *(_DWORD *)uint64_t v55 = 136446466;
    uint64_t v132 = (uint64_t)a1;
    id v57 = v48;
    uint64_t v58 = sub_100007578(&qword_1002573E0);
    uint64_t v59 = String.init<A>(describing:)(&v132, v58);
    id v61 = (_TtC18TrustedPeersHelper6Client *)v60;
    uint64_t v132 = sub_10017C4C4(v59, v60, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v55 + 4, v55 + 12);

    swift_bridgeObjectRelease(v61, v62, v63, v64, v65, v66, v67, v68);
    *(_WORD *)(v55 + 12) = 2082;
    uint64_t v132 = v45;
    swift_errorRetain(v45);
    uint64_t v69 = sub_100007578(&qword_100251D70);
    uint64_t v70 = String.init<A>(describing:)(&v132, v69);
    id v72 = (_TtC18TrustedPeersHelper6Client *)v71;
    uint64_t v132 = sub_10017C4C4(v70, v71, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v50,  v54,  "Vouching with Bottle failed for %{public}s: %{public}s",  (uint8_t *)v55,  0x16u);
    swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v45, v134, v133);
  id v80 = sub_100177B68(v133[1], v133[2]);
  id v81 = (void *)_convertErrorToNSError(_:)(v80);
  (*((void (**)(id, void, void, void, void, void *))v128 + 2))(v128, 0LL, 0LL, 0LL, 0LL, v81);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v129);
}

uint64_t sub_100184F44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  uint64_t v116 = a3;
  uint64_t v117 = a5;
  uint64_t v114 = a2;
  uint64_t v115 = a4;
  uint64_t v119 = a7;
  uint64_t v120 = swift_allocObject(&unk_10023C7B8, 24LL, 7LL);
  *(void *)(v120 + 16) = v119;
  _Block_copy(a7);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100006BAC(v10, (uint64_t)qword_100257120);
  id v12 = a1;
  uint64_t v118 = v11;
  id v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v121 = (uint64_t)a1;
    uint64_t v122 = (void *)v16;
    *(_DWORD *)os_log_type_t v15 = 136446210;
    uint64_t v113 = v15 + 4;
    id v17 = v12;
    uint64_t v18 = sub_100007578(&qword_1002573E0);
    uint64_t v19 = String.init<A>(describing:)(&v121, v18);
    uint64_t v20 = a6;
    uint64_t v21 = a1;
    id v23 = (_TtC18TrustedPeersHelper6Client *)v22;
    uint64_t v121 = sub_10017C4C4(v19, v22, (uint64_t *)&v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v15 + 4, v15 + 12);

    SEL v24 = v23;
    a1 = v21;
    a6 = v20;
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Preflight Vouch With RecoveryKey %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      v112[8] = v12;
      uint64_t v113 = (uint8_t *)a1;
      uint64_t v32 = *(void *)(a6 + 24);
      id v33 = v12;
      id v34 = objc_msgSend(v33, "cloudkitContainerName", v12, a1);
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      id v37 = v36;

      id v38 = [v33 octagonContextID];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      __chkstk_darwin(v42, v43);
      v112[2] = v32;
      v112[3] = v35;
      v112[4] = v37;
      v112[5] = v39;
      v112[6] = v41;
      v112[7] = v33;
      uint64_t v44 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v122, sub_100195820, v112, v44);

      swift_bridgeObjectRelease(v41, v83, v84, v85, v86, v87, v88, v89);
      swift_bridgeObjectRelease(v37, v90, v91, v92, v93, v94, v95, v96);
      uint64_t v97 = v122;
      uint64_t v98 = (void *)swift_allocObject(&unk_10023C7E0, 48LL, 7LL);
      v98[2] = a6;
      v98[3] = v97;
      uint64_t v99 = v120;
      v98[4] = sub_100196E04;
      v98[5] = v99;
      uint64_t v100 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v100, 41LL, 7LL);
      id v101 = v97;
      swift_retain(a6);
      swift_retain(v99);
      uint64_t v102 = sub_100159634(v101, 0xD000000000000036LL, 0x80000001001F6630LL);

      uint64_t v103 = (void *)swift_allocObject(&unk_10023C808, 40LL, 7LL);
      v103[2] = v102;
      v103[3] = sub_1001964D8;
      v103[4] = v98;
      uint64_t v104 = (void *)swift_allocObject(&unk_10023C830, 72LL, 7LL);
      v104[2] = sub_10019651C;
      void v104[3] = v103;
      uint64_t v105 = v114;
      v104[4] = v101;
      v104[5] = v105;
      uint64_t v106 = v115;
      uint64_t v107 = v116;
      v104[6] = v116;
      v104[7] = v106;
      uint64_t v108 = v117;
      v104[8] = v117;
      id v109 = v101;
      swift_retain(v102);
      swift_retain(v98);
      swift_retain(v103);
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRetain(v108);
      sub_100137F18(0, (uint64_t)sub_10019652C, (uint64_t)v104);
      swift_release(v99);

      swift_release(v98);
      swift_release(v102);
      swift_release(v103);
      uint64_t v110 = v104;
      return swift_release(v110);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v45 = sub_100043F74();
  uint64_t v46 = swift_allocError(&type metadata for ContainerError, v45, 0LL, 0LL);
  *(_OWORD *)uint64_t v47 = xmmword_1001E6990;
  *(_BYTE *)(v47 + 16) = 13;
  swift_willThrow(v46);
  id v48 = v12;
  swift_errorRetain(v46);
  id v49 = v48;
  uint64_t v50 = swift_errorRetain(v46);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v55 = static os_log_type_t.error.getter(v51, v52, v53, v54);
  if (os_log_type_enabled(v51, v55))
  {
    uint64_t v56 = swift_slowAlloc(22LL, -1LL);
    uint64_t v57 = swift_slowAlloc(64LL, -1LL);
    uint64_t v121 = (uint64_t)a1;
    uint64_t v122 = (void *)v57;
    *(_DWORD *)uint64_t v56 = 136446466;
    id v58 = v49;
    uint64_t v59 = sub_100007578(&qword_1002573E0);
    uint64_t v60 = String.init<A>(describing:)(&v121, v59);
    SEL v62 = (_TtC18TrustedPeersHelper6Client *)v61;
    uint64_t v121 = sub_10017C4C4(v60, v61, (uint64_t *)&v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v56 + 4, v56 + 12);

    swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
    *(_WORD *)(v56 + 12) = 2082;
    uint64_t v121 = v46;
    swift_errorRetain(v46);
    uint64_t v70 = sub_100007578(&qword_100251D70);
    uint64_t v71 = String.init<A>(describing:)(&v121, v70);
    SEL v73 = (_TtC18TrustedPeersHelper6Client *)v72;
    uint64_t v121 = sub_10017C4C4(v71, v72, (uint64_t *)&v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v56 + 14, v56 + 22);
    swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v51,  v55,  "Preflighting Vouch With RecoveryKey failed for %{public}s: %{public}s",  (uint8_t *)v56,  0x16u);
    swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v46, v124, v123);
  id v81 = sub_100177B68(v123[1], v123[2]);
  SEL v82 = (void *)_convertErrorToNSError(_:)(v81);
  (*((void (**)(const void *, void, void, void *))v119 + 2))(v119, 0LL, 0LL, v82);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v110 = (void *)v120;
  return swift_release(v110);
}

uint64_t sub_1001855F4(void *a1, void *a2, uint64_t a3, const void *a4)
{
  uint64_t v108 = a2;
  uint64_t v110 = a4;
  uint64_t v111 = swift_allocObject(&unk_10023C718, 24LL, 7LL);
  *(void *)(v111 + 16) = v110;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100006BAC(v7, (uint64_t)qword_100257120);
  id v9 = a1;
  uint64_t v109 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    uint64_t v113 = (void *)v13;
    *(_DWORD *)id v12 = 136446210;
    uint64_t v107 = v12 + 4;
    id v14 = v9;
    uint64_t v15 = sub_100007578(&qword_1002573E0);
    uint64_t v16 = String.init<A>(describing:)(&v112, v15);
    id v17 = v9;
    uint64_t v19 = (_TtC18TrustedPeersHelper6Client *)v18;
    uint64_t v112 = sub_10017C4C4(v16, v18, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v12 + 4, v12 + 12);

    uint64_t v20 = v19;
    id v9 = v17;
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Preflight Vouch With CustodianRecoveryKey %{public}s",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      v106[9] = v9;
      uint64_t v107 = (uint8_t *)a1;
      uint64_t v28 = *(void *)(a3 + 24);
      id v29 = v9;
      id v30 = [v29 cloudkitContainerName];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      id v33 = v32;

      id v34 = [v29 octagonContextID];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      id v37 = v36;

      __chkstk_darwin(v38, v39);
      v106[2] = v28;
      v106[3] = v31;
      v106[4] = v33;
      v106[5] = v35;
      v106[6] = v37;
      v106[7] = v29;
      uint64_t v40 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v113, sub_100195820, v106, v40);

      swift_bridgeObjectRelease(v37, v79, v80, v81, v82, v83, v84, v85);
      swift_bridgeObjectRelease(v33, v86, v87, v88, v89, v90, v91, v92);
      id v93 = v113;
      id v94 = (void *)swift_allocObject(&unk_10023C740, 48LL, 7LL);
      v94[2] = a3;
      v94[3] = v93;
      uint64_t v95 = v111;
      v94[4] = sub_100196428;
      v94[5] = v95;
      uint64_t v96 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v96, 41LL, 7LL);
      id v97 = v93;
      swift_retain(a3);
      swift_retain(v95);
      uint64_t v98 = sub_100159634(v97, 0xD000000000000032LL, 0x80000001001F65F0LL);

      uint64_t v99 = (void *)swift_allocObject(&unk_10023C768, 40LL, 7LL);
      v99[2] = v98;
      v99[3] = sub_10019643C;
      v99[4] = v94;
      uint64_t v100 = (void *)swift_allocObject(&unk_10023C790, 48LL, 7LL);
      v100[2] = sub_100196480;
      v100[3] = v99;
      id v101 = v108;
      v100[4] = v97;
      v100[5] = v101;
      id v102 = v97;
      swift_retain(v98);
      swift_retain(v94);
      swift_retain(v99);
      id v103 = v101;
      sub_100137D5C((uint64_t)sub_1001964C0, (uint64_t)v100);
      swift_release(v95);

      swift_release(v94);
      swift_release(v98);
      swift_release(v99);
      uint64_t v104 = v100;
      return swift_release(v104);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v41 = sub_100043F74();
  uint64_t v42 = swift_allocError(&type metadata for ContainerError, v41, 0LL, 0LL);
  *(_OWORD *)uint64_t v43 = xmmword_1001E6990;
  *(_BYTE *)(v43 + 16) = 13;
  swift_willThrow(v42);
  id v44 = v9;
  swift_errorRetain(v42);
  id v45 = v44;
  uint64_t v46 = swift_errorRetain(v42);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v51 = static os_log_type_t.error.getter(v47, v48, v49, v50);
  if (os_log_type_enabled(v47, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    uint64_t v113 = (void *)v53;
    *(_DWORD *)uint64_t v52 = 136446466;
    id v54 = v45;
    uint64_t v55 = sub_100007578(&qword_1002573E0);
    uint64_t v56 = String.init<A>(describing:)(&v112, v55);
    id v58 = (_TtC18TrustedPeersHelper6Client *)v57;
    uint64_t v112 = sub_10017C4C4(v56, v57, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v52 + 4, v52 + 12);

    swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
    *(_WORD *)(v52 + 12) = 2082;
    uint64_t v112 = v42;
    swift_errorRetain(v42);
    uint64_t v66 = sub_100007578(&qword_100251D70);
    uint64_t v67 = String.init<A>(describing:)(&v112, v66);
    BOOL v69 = (_TtC18TrustedPeersHelper6Client *)v68;
    uint64_t v112 = sub_10017C4C4(v67, v68, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v51,  "Preflighting Vouch With CustodianRecoveryKey failed for %{public}s: %{public}s",  (uint8_t *)v52,  0x16u);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v42, v115, v114);
  id v77 = sub_100177B68(v114[1], v114[2]);
  id v78 = (void *)_convertErrorToNSError(_:)(v77);
  (*((void (**)(const void *, void, void, void *))v110 + 2))(v110, 0LL, 0LL, v78);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v104 = (void *)v111;
  return swift_release(v104);
}

uint64_t sub_100185C78( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v118 = a5;
  uint64_t v119 = a6;
  uint64_t v116 = a4;
  uint64_t v117 = a3;
  uint64_t v115 = a2;
  uint64_t v121 = a8;
  uint64_t v122 = swift_allocObject(&unk_10023C628, 24LL, 7LL);
  *(void *)(v122 + 16) = v121;
  _Block_copy(a8);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_100006BAC(v11, (uint64_t)qword_100257120);
  id v13 = a1;
  uint64_t v120 = v12;
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  id v123 = v13;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v126 = (uint64_t)a1;
    id v18 = v123;
    uint64_t v19 = sub_100007578(&qword_1002573E0);
    uint64_t v20 = String.init<A>(describing:)(&v126, v19);
    id v22 = (_TtC18TrustedPeersHelper6Client *)v21;
    uint64_t v126 = sub_10017C4C4(v20, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v16 + 4, v16 + 12);

    id v13 = v123;
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Vouching With Recovery Key %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v114[9] = a1;
      uint64_t v30 = *(void *)(a7 + 24);
      id v31 = v13;
      id v32 = [v31 cloudkitContainerName];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v35 = v34;

      id v36 = [v31 octagonContextID];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v39 = v38;

      __chkstk_darwin(v40, v41);
      v114[2] = v30;
      void v114[3] = v33;
      v114[4] = v35;
      v114[5] = v37;
      v114[6] = v39;
      v114[7] = v31;
      uint64_t v42 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v114, v42);

      swift_bridgeObjectRelease(v39, v81, v82, v83, v84, v85, v86, v87);
      swift_bridgeObjectRelease(v35, v88, v89, v90, v91, v92, v93, v94);
      uint64_t v95 = (void *)aBlock[0];
      uint64_t v96 = (void *)swift_allocObject(&unk_10023C650, 48LL, 7LL);
      v96[2] = a7;
      v96[3] = v95;
      uint64_t v97 = v122;
      v96[4] = sub_100196DFC;
      v96[5] = v97;
      uint64_t v98 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v98, 41LL, 7LL);
      swift_retain(a7);
      uint64_t v99 = v95;
      swift_retain(v97);
      uint64_t v100 = sub_100159634(v99, 0xD000000000000037LL, 0x80000001001F9A80LL);
      uint64_t v120 = v100;
      id v101 = (void *)swift_allocObject(&unk_10023C678, 40LL, 7LL);
      v101[2] = v100;
      void v101[3] = sub_100196348;
      v101[4] = v96;
      id v123 = *(id *)&v99[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      id v102 = (void *)swift_allocObject(&unk_10023C6A0, 80LL, 7LL);
      v102[2] = v99;
      v102[3] = sub_100196398;
      uint64_t v103 = v115;
      v102[4] = v101;
      v102[5] = v103;
      uint64_t v104 = v116;
      uint64_t v105 = v117;
      v102[6] = v117;
      v102[7] = v104;
      uint64_t v107 = v118;
      uint64_t v106 = v119;
      v102[8] = v118;
      v102[9] = v106;
      uint64_t v108 = swift_allocObject(&unk_10023C6C8, 32LL, 7LL);
      *(void *)(v108 + 16) = sub_100196404;
      *(void *)(v108 + 24) = v102;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v125 = v108;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023C6E0;
      uint64_t v109 = _Block_copy(aBlock);
      uint64_t v110 = v125;
      uint64_t v121 = v99;
      uint64_t v111 = v120;
      swift_retain(v120);
      swift_retain(v96);
      swift_retain(v101);
      swift_bridgeObjectRetain(v105);
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRetain(v106);
      swift_retain(v108);
      swift_release(v110);
      [v123 performBlockAndWait:v109];
      swift_release(v101);
      swift_release(v111);
      _Block_release(v109);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v108, "", 108LL, 3838LL, 33LL, 1LL);
      swift_release(v122);

      swift_release(v96);
      swift_release(v102);
      uint64_t result = swift_release(v108);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v43 = sub_100043F74();
  uint64_t v44 = swift_allocError(&type metadata for ContainerError, v43, 0LL, 0LL);
  *(_OWORD *)uint64_t v45 = xmmword_1001E6990;
  *(_BYTE *)(v45 + 16) = 13;
  swift_willThrow(v44);
  id v46 = v13;
  swift_errorRetain(v44);
  id v47 = v46;
  uint64_t v48 = swift_errorRetain(v44);
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v53 = static os_log_type_t.error.getter(v49, v50, v51, v52);
  if (os_log_type_enabled(v49, v53))
  {
    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    uint64_t v55 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v55;
    *(_DWORD *)uint64_t v54 = 136446466;
    uint64_t v126 = (uint64_t)a1;
    id v56 = v47;
    uint64_t v57 = sub_100007578(&qword_1002573E0);
    uint64_t v58 = String.init<A>(describing:)(&v126, v57);
    id v60 = (_TtC18TrustedPeersHelper6Client *)v59;
    uint64_t v126 = sub_10017C4C4(v58, v59, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v54 + 4, v54 + 12);

    swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
    *(_WORD *)(v54 + 12) = 2082;
    uint64_t v126 = v44;
    swift_errorRetain(v44);
    uint64_t v68 = sub_100007578(&qword_100251D70);
    uint64_t v69 = String.init<A>(describing:)(&v126, v68);
    id v71 = (_TtC18TrustedPeersHelper6Client *)v70;
    uint64_t v126 = sub_10017C4C4(v69, v70, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v49,  v53,  "Vouching with Recovery Key failed for %{public}s: %{public}s",  (uint8_t *)v54,  0x16u);
    swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v44, v128, v127);
  id v79 = sub_100177B68(v127[1], v127[2]);
  id v80 = (void *)_convertErrorToNSError(_:)(v79);
  (*((void (**)(char *, void, void, void, void, void *))v121 + 2))(v121, 0LL, 0LL, 0LL, 0LL, v80);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v122);
}

uint64_t sub_10018641C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v113 = a2;
  uint64_t v114 = a3;
  id v116 = a5;
  uint64_t v117 = swift_allocObject(&unk_10023C538, 24LL, 7LL);
  *(void *)(v117 + 16) = v116;
  _Block_copy(a5);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_100257120);
  id v10 = a1;
  uint64_t v115 = v9;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v14;
    *(_DWORD *)id v13 = 136446210;
    uint64_t v112 = v13 + 4;
    uint64_t v120 = (uint64_t)a1;
    id v15 = v10;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    uint64_t v17 = String.init<A>(describing:)(&v120, v16);
    id v18 = v10;
    uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v120 = sub_10017C4C4(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v13 + 4, v13 + 12);

    unint64_t v21 = v20;
    id v10 = v18;
    swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Recovering TLKShares for Inheritor %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v111[8] = v10;
      uint64_t v112 = (uint8_t *)a1;
      uint64_t v29 = *(void *)(a4 + 24);
      id v30 = v10;
      id v31 = objc_msgSend(v30, "cloudkitContainerName", v10, a1);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v34 = v33;

      id v35 = [v30 octagonContextID];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v38 = v37;

      __chkstk_darwin(v39, v40);
      v111[2] = v29;
      v111[3] = v32;
      v111[4] = v34;
      v111[5] = v36;
      v111[6] = v38;
      v111[7] = v30;
      uint64_t v41 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v111, v41);

      swift_bridgeObjectRelease(v38, v80, v81, v82, v83, v84, v85, v86);
      swift_bridgeObjectRelease(v34, v87, v88, v89, v90, v91, v92, v93);
      BOOL v94 = (void *)aBlock[0];
      uint64_t v95 = (void *)swift_allocObject(&unk_10023C560, 48LL, 7LL);
      v95[2] = a4;
      v95[3] = v94;
      uint64_t v96 = v117;
      v95[4] = sub_10019625C;
      void v95[5] = v96;
      uint64_t v97 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v97, 41LL, 7LL);
      swift_retain(a4);
      uint64_t v98 = v94;
      swift_retain(v96);
      uint64_t v99 = sub_100159634(v98, 0xD000000000000032LL, 0x80000001001F9A40LL);
      uint64_t v100 = (void *)swift_allocObject(&unk_10023C588, 40LL, 7LL);
      v100[2] = v99;
      v100[3] = sub_100196290;
      v100[4] = v95;
      id v116 = *(id *)&v98[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      id v101 = (void *)swift_allocObject(&unk_10023C5B0, 56LL, 7LL);
      v101[2] = v98;
      void v101[3] = sub_1001962D4;
      uint64_t v103 = v113;
      uint64_t v102 = v114;
      v101[4] = v100;
      v101[5] = v103;
      v101[6] = v102;
      uint64_t v104 = swift_allocObject(&unk_10023C5D8, 32LL, 7LL);
      *(void *)(v104 + 16) = sub_100196320;
      *(void *)(v104 + 24) = v101;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v119 = v104;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023C5F0;
      uint64_t v105 = _Block_copy(aBlock);
      uint64_t v106 = v119;
      uint64_t v107 = v98;
      swift_retain(v99);
      swift_retain(v95);
      swift_retain(v100);
      id v108 = v103;
      swift_bridgeObjectRetain(v102);
      swift_retain(v104);
      swift_release(v106);
      [v116 performBlockAndWait:v105];
      swift_release(v100);
      swift_release(v99);
      _Block_release(v105);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v104, "", 108LL, 3966LL, 33LL, 1LL);
      swift_release(v117);

      swift_release(v95);
      swift_release(v101);
      uint64_t result = swift_release(v104);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v42 = sub_100043F74();
  uint64_t v43 = swift_allocError(&type metadata for ContainerError, v42, 0LL, 0LL);
  *(_OWORD *)uint64_t v44 = xmmword_1001E6990;
  *(_BYTE *)(v44 + 16) = 13;
  swift_willThrow(v43);
  id v45 = v10;
  swift_errorRetain(v43);
  id v46 = v45;
  uint64_t v47 = swift_errorRetain(v43);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
  if (os_log_type_enabled(v48, v52))
  {
    uint64_t v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v54;
    *(_DWORD *)uint64_t v53 = 136446466;
    uint64_t v120 = (uint64_t)a1;
    id v55 = v46;
    uint64_t v56 = sub_100007578(&qword_1002573E0);
    uint64_t v57 = String.init<A>(describing:)(&v120, v56);
    unint64_t v59 = (_TtC18TrustedPeersHelper6Client *)v58;
    uint64_t v120 = sub_10017C4C4(v57, v58, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v53 + 4, v53 + 12);

    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    *(_WORD *)(v53 + 12) = 2082;
    uint64_t v120 = v43;
    swift_errorRetain(v43);
    uint64_t v67 = sub_100007578(&qword_100251D70);
    uint64_t v68 = String.init<A>(describing:)(&v120, v67);
    unint64_t v70 = (_TtC18TrustedPeersHelper6Client *)v69;
    uint64_t v120 = sub_10017C4C4(v68, v69, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v52,  "Recovering TLKShares for Inheritor failed for %{public}s: %{public}s",  (uint8_t *)v53,  0x16u);
    swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v43, v122, v121);
  id v78 = sub_100177B68(v121[1], v121[2]);
  id v79 = (void *)_convertErrorToNSError(_:)(v78);
  (*((void (**)(id, void, void, void *))v116 + 2))(v116, 0LL, 0LL, v79);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v117);
}

uint64_t sub_100186B80(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v113 = a2;
  uint64_t v114 = a3;
  id v116 = a5;
  uint64_t v117 = swift_allocObject(&unk_10023C448, 24LL, 7LL);
  *(void *)(v117 + 16) = v116;
  _Block_copy(a5);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_100257120);
  id v10 = a1;
  uint64_t v115 = v9;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v14;
    *(_DWORD *)id v13 = 136446210;
    uint64_t v112 = v13 + 4;
    uint64_t v120 = (uint64_t)a1;
    id v15 = v10;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    uint64_t v17 = String.init<A>(describing:)(&v120, v16);
    id v18 = v10;
    uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v120 = sub_10017C4C4(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v13 + 4, v13 + 12);

    unint64_t v21 = v20;
    id v10 = v18;
    swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Vouching With Custodian Recovery Key %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v111[8] = v10;
      uint64_t v112 = (uint8_t *)a1;
      uint64_t v29 = *(void *)(a4 + 24);
      id v30 = v10;
      id v31 = objc_msgSend(v30, "cloudkitContainerName", v10, a1);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v34 = v33;

      id v35 = [v30 octagonContextID];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v38 = v37;

      __chkstk_darwin(v39, v40);
      v111[2] = v29;
      v111[3] = v32;
      v111[4] = v34;
      v111[5] = v36;
      v111[6] = v38;
      v111[7] = v30;
      uint64_t v41 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v111, v41);

      swift_bridgeObjectRelease(v38, v80, v81, v82, v83, v84, v85, v86);
      swift_bridgeObjectRelease(v34, v87, v88, v89, v90, v91, v92, v93);
      BOOL v94 = (void *)aBlock[0];
      uint64_t v95 = (void *)swift_allocObject(&unk_10023C470, 48LL, 7LL);
      v95[2] = a4;
      v95[3] = v94;
      uint64_t v96 = v117;
      v95[4] = sub_100196DFC;
      void v95[5] = v96;
      uint64_t v97 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v97, 41LL, 7LL);
      swift_retain(a4);
      uint64_t v98 = v94;
      swift_retain(v96);
      uint64_t v99 = sub_100159634(v98, 0xD000000000000033LL, 0x80000001001F9A00LL);
      uint64_t v100 = (void *)swift_allocObject(&unk_10023C498, 40LL, 7LL);
      v100[2] = v99;
      v100[3] = sub_1001961C4;
      v100[4] = v95;
      id v116 = *(id *)&v98[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      id v101 = (void *)swift_allocObject(&unk_10023C4C0, 56LL, 7LL);
      v101[2] = v98;
      void v101[3] = sub_100196214;
      uint64_t v103 = v113;
      uint64_t v102 = v114;
      v101[4] = v100;
      v101[5] = v103;
      v101[6] = v102;
      uint64_t v104 = swift_allocObject(&unk_10023C4E8, 32LL, 7LL);
      *(void *)(v104 + 16) = sub_100196240;
      *(void *)(v104 + 24) = v101;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v119 = v104;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023C500;
      uint64_t v105 = _Block_copy(aBlock);
      uint64_t v106 = v119;
      uint64_t v107 = v98;
      swift_retain(v99);
      swift_retain(v95);
      swift_retain(v100);
      id v108 = v103;
      swift_bridgeObjectRetain(v102);
      swift_retain(v104);
      swift_release(v106);
      [v116 performBlockAndWait:v105];
      swift_release(v100);
      swift_release(v99);
      _Block_release(v105);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v104, "", 108LL, 4086LL, 33LL, 1LL);
      swift_release(v117);

      swift_release(v95);
      swift_release(v101);
      uint64_t result = swift_release(v104);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v42 = sub_100043F74();
  uint64_t v43 = swift_allocError(&type metadata for ContainerError, v42, 0LL, 0LL);
  *(_OWORD *)uint64_t v44 = xmmword_1001E6990;
  *(_BYTE *)(v44 + 16) = 13;
  swift_willThrow(v43);
  id v45 = v10;
  swift_errorRetain(v43);
  id v46 = v45;
  uint64_t v47 = swift_errorRetain(v43);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
  if (os_log_type_enabled(v48, v52))
  {
    uint64_t v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v54;
    *(_DWORD *)uint64_t v53 = 136446466;
    uint64_t v120 = (uint64_t)a1;
    id v55 = v46;
    uint64_t v56 = sub_100007578(&qword_1002573E0);
    uint64_t v57 = String.init<A>(describing:)(&v120, v56);
    unint64_t v59 = (_TtC18TrustedPeersHelper6Client *)v58;
    uint64_t v120 = sub_10017C4C4(v57, v58, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v53 + 4, v53 + 12);

    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    *(_WORD *)(v53 + 12) = 2082;
    uint64_t v120 = v43;
    swift_errorRetain(v43);
    uint64_t v67 = sub_100007578(&qword_100251D70);
    uint64_t v68 = String.init<A>(describing:)(&v120, v67);
    unint64_t v70 = (_TtC18TrustedPeersHelper6Client *)v69;
    uint64_t v120 = sub_10017C4C4(v68, v69, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v52,  "Vouching with Custodian Recovery Key failed for %{public}s: %{public}s",  (uint8_t *)v53,  0x16u);
    swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v43, v122, v121);
  id v78 = sub_100177B68(v121[1], v121[2]);
  id v79 = (void *)_convertErrorToNSError(_:)(v78);
  (*((void (**)(id, void, void, void, void, void *))v116 + 2))(v116, 0LL, 0LL, 0LL, 0LL, v79);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v117);
}

uint64_t sub_1001872EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v115 = a3;
  uint64_t v116 = a4;
  uint64_t v114 = a2;
  id v118 = a6;
  uint64_t v119 = swift_allocObject(&unk_10023C358, 24LL, 7LL);
  *(void *)(v119 + 16) = v118;
  _Block_copy(a6);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100006BAC(v9, (uint64_t)qword_100257120);
  id v11 = a1;
  uint64_t v117 = v10;
  os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v113 = a5;
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v122 = (uint64_t)a1;
    id v16 = v11;
    uint64_t v17 = sub_100007578(&qword_1002573E0);
    uint64_t v18 = String.init<A>(describing:)(&v122, v17);
    uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v122 = sub_10017C4C4(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Vouching With Reroll %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    BOOL v28 = v14;
    a5 = v113;
    swift_slowDealloc(v28, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      void v112[9] = v11;
      uint64_t v113 = a1;
      uint64_t v29 = a5[3];
      id v30 = v11;
      id v31 = [v30 cloudkitContainerName];
      uint64_t v32 = a5;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v35 = v34;

      id v36 = [v30 octagonContextID];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v39 = v38;

      __chkstk_darwin(v40, v41);
      v112[2] = v29;
      v112[3] = v33;
      v112[4] = v35;
      v112[5] = v37;
      v112[6] = v39;
      v112[7] = v30;
      uint64_t v42 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v112, v42);

      swift_bridgeObjectRelease(v39, v81, v82, v83, v84, v85, v86, v87);
      swift_bridgeObjectRelease(v35, v88, v89, v90, v91, v92, v93, v94);
      uint64_t v95 = (void *)aBlock[0];
      uint64_t v96 = (void *)swift_allocObject(&unk_10023C380, 48LL, 7LL);
      v96[2] = v32;
      v96[3] = v95;
      uint64_t v97 = v119;
      v96[4] = sub_1001960D4;
      v96[5] = v97;
      uint64_t v98 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v98, 41LL, 7LL);
      swift_retain(v32);
      uint64_t v99 = v95;
      swift_retain(v97);
      uint64_t v100 = sub_100159634(v99, 0xD00000000000002BLL, 0x80000001001F99D0LL);
      id v101 = (void *)swift_allocObject(&unk_10023C3A8, 40LL, 7LL);
      v101[2] = v100;
      void v101[3] = sub_1001960E8;
      v101[4] = v96;
      id v118 = *(id *)&v99[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v102 = (void *)swift_allocObject(&unk_10023C3D0, 64LL, 7LL);
      v102[2] = v99;
      v102[3] = sub_100196138;
      uint64_t v103 = v114;
      uint64_t v104 = v115;
      v102[4] = v101;
      v102[5] = v103;
      uint64_t v105 = v116;
      v102[6] = v104;
      v102[7] = v105;
      uint64_t v106 = swift_allocObject(&unk_10023C3F8, 32LL, 7LL);
      *(void *)(v106 + 16) = sub_10019619C;
      *(void *)(v106 + 24) = v102;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v121 = v106;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023C410;
      uint64_t v107 = _Block_copy(aBlock);
      uint64_t v108 = v121;
      uint64_t v109 = v99;
      swift_retain(v100);
      swift_retain(v96);
      swift_retain(v101);
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRetain(v105);
      swift_retain(v106);
      swift_release(v108);
      [v118 performBlockAndWait:v107];
      swift_release(v101);
      swift_release(v100);
      _Block_release(v107);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v106, "", 108LL, 4228LL, 33LL, 1LL);
      swift_release(v119);

      swift_release(v96);
      swift_release(v102);
      uint64_t result = swift_release(v106);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return result;
    }
  }

  unint64_t v43 = sub_100043F74();
  uint64_t v44 = swift_allocError(&type metadata for ContainerError, v43, 0LL, 0LL);
  *(_OWORD *)uint64_t v45 = xmmword_1001E6990;
  *(_BYTE *)(v45 + 16) = 13;
  swift_willThrow(v44);
  id v46 = v11;
  swift_errorRetain(v44);
  id v47 = v46;
  uint64_t v48 = swift_errorRetain(v44);
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v53 = static os_log_type_t.error.getter(v49, v50, v51, v52);
  if (os_log_type_enabled(v49, v53))
  {
    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    uint64_t v55 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v55;
    *(_DWORD *)uint64_t v54 = 136446466;
    uint64_t v122 = (uint64_t)a1;
    id v56 = v47;
    uint64_t v57 = sub_100007578(&qword_1002573E0);
    uint64_t v58 = String.init<A>(describing:)(&v122, v57);
    SEL v60 = (_TtC18TrustedPeersHelper6Client *)v59;
    uint64_t v122 = sub_10017C4C4(v58, v59, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v54 + 4, v54 + 12);

    swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
    *(_WORD *)(v54 + 12) = 2082;
    uint64_t v122 = v44;
    swift_errorRetain(v44);
    uint64_t v68 = sub_100007578(&qword_100251D70);
    uint64_t v69 = String.init<A>(describing:)(&v122, v68);
    SEL v71 = (_TtC18TrustedPeersHelper6Client *)v70;
    uint64_t v122 = sub_10017C4C4(v69, v70, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v49,  v53,  "Vouching with Reroll failed for %{public}s: %{public}s",  (uint8_t *)v54,  0x16u);
    swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v44, v124, v123);
  id v79 = sub_100177B68(v123[1], v123[2]);
  SEL v80 = (void *)_convertErrorToNSError(_:)(v79);
  (*((void (**)(id, void, void, void, void, void *))v118 + 2))(v118, 0LL, 0LL, 0LL, 0LL, v80);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release(v119);
}

uint64_t sub_100187A64( uint8_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, const void *a15)
{
  uint64_t v124 = a7;
  uint64_t v125 = a8;
  unint64_t v122 = a5;
  uint64_t v123 = a6;
  unint64_t v120 = a3;
  uint64_t v121 = a4;
  uint64_t v119 = a2;
  uint64_t v126 = a15;
  uint64_t v127 = swift_allocObject(&unk_10023C308, 24LL, 7LL);
  *(void *)(v127 + 16) = a15;
  _Block_copy(a15);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v16, (uint64_t)qword_100257120);
  uint64_t v17 = a1;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v128 = (uint64_t)a1;
    uint64_t v129 = (void *)v21;
    *(_DWORD *)uint64_t v20 = 136446210;
    id v118 = v20 + 4;
    id v22 = v17;
    uint64_t v23 = sub_100007578(&qword_1002573E0);
    uint64_t v24 = String.init<A>(describing:)(&v128, v23);
    id v25 = v17;
    BOOL v27 = (_TtC18TrustedPeersHelper6Client *)v26;
    uint64_t v128 = sub_10017C4C4(v24, v26, (uint64_t *)&v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v20 + 4, v20 + 12);

    BOOL v28 = v27;
    uint64_t v17 = v25;
    swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Joining %{public}s", v20, 0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      void v117[9] = v17;
      id v118 = a1;
      uint64_t v36 = *(void *)(a14 + 24);
      uint64_t v37 = v17;
      id v38 = -[uint8_t cloudkitContainerName](v37, "cloudkitContainerName");
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      id v42 = -[uint8_t octagonContextID](v37, "octagonContextID");
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v45 = v44;

      __chkstk_darwin(v46, v47);
      v117[2] = v36;
      v117[3] = v39;
      v117[4] = v41;
      v117[5] = v43;
      v117[6] = v45;
      v117[7] = v37;
      uint64_t v48 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v129, sub_100195820, v117, v48);
      uint64_t v126 = (const void *)a12;
      id v118 = (uint8_t *)a9;

      swift_bridgeObjectRelease(v45, v87, v88, v89, v90, v91, v92, v93);
      swift_bridgeObjectRelease(v41, v94, v95, v96, v97, v98, v99, v100);
      id v101 = v129;
      id v102 = -[uint8_t altDSID](v37, "altDSID");
      uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
      uint64_t v105 = v104;

      uint64_t v106 = swift_allocObject(&unk_10023C330, 32LL, 7LL);
      uint64_t v107 = v127;
      *(void *)(v106 + 16) = sub_100196FF8;
      *(void *)(v106 + 24) = v107;
      swift_retain(v107);
      sub_100124A10( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v103,  (uint64_t)v105,  (uint64_t)v118,  a10,  a11,  (uint64_t)v126,  a13 & 1,  (uint64_t)sub_100196FA8,  v106);
      swift_release(v107);

      swift_bridgeObjectRelease(v105, v108, v109, v110, v111, v112, v113, v114);
      uint64_t v115 = v106;
      return swift_release(v115);
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v49 = sub_100043F74();
  uint64_t v50 = swift_allocError(&type metadata for ContainerError, v49, 0LL, 0LL);
  *(_OWORD *)uint64_t v51 = xmmword_1001E6990;
  *(_BYTE *)(v51 + 16) = 13;
  swift_willThrow(v50);
  uint64_t v52 = v17;
  swift_errorRetain(v50);
  os_log_type_t v53 = v52;
  uint64_t v54 = swift_errorRetain(v50);
  uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v59 = static os_log_type_t.error.getter(v55, v56, v57, v58);
  if (os_log_type_enabled(v55, v59))
  {
    uint64_t v60 = swift_slowAlloc(22LL, -1LL);
    uint64_t v61 = swift_slowAlloc(64LL, -1LL);
    uint64_t v128 = (uint64_t)a1;
    uint64_t v129 = (void *)v61;
    *(_DWORD *)uint64_t v60 = 136446466;
    id v62 = v53;
    uint64_t v63 = sub_100007578(&qword_1002573E0);
    uint64_t v64 = String.init<A>(describing:)(&v128, v63);
    BOOL v66 = (_TtC18TrustedPeersHelper6Client *)v65;
    uint64_t v128 = sub_10017C4C4(v64, v65, (uint64_t *)&v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v60 + 4, v60 + 12);

    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    *(_WORD *)(v60 + 12) = 2082;
    uint64_t v128 = v50;
    swift_errorRetain(v50);
    uint64_t v74 = sub_100007578(&qword_100251D70);
    uint64_t v75 = String.init<A>(describing:)(&v128, v74);
    BOOL v77 = (_TtC18TrustedPeersHelper6Client *)v76;
    uint64_t v128 = sub_10017C4C4(v75, v76, (uint64_t *)&v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v60 + 14, v60 + 22);
    swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v55,  v59,  "Joining failed for %{public}s: %{public}s",  (uint8_t *)v60,  0x16u);
    swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v50, v131, v130);
  id v85 = sub_100177B68(v130[1], v130[2]);
  BOOL v86 = (void *)_convertErrorToNSError(_:)(v85);
  (*((void (**)(const void *, void, void, void, void *))v126 + 2))(v126, 0LL, 0LL, 0LL, v86);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v115 = v127;
  return swift_release(v115);
}

void sub_100188090(void *a1, uint64_t a2, uint64_t a3, void (**a4)(const void *, void, void *))
{
  uint64_t v138 = a2;
  uint64_t v139 = a3;
  uint64_t v141 = a4;
  uint64_t v142 = swift_allocObject(&unk_10023C268, 24LL, 7LL);
  *(void *)(v142 + 16) = v141;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v140 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v143 = (uint64_t)a1;
    uint64_t v144 = (void *)v12;
    *(_DWORD *)id v11 = 136446210;
    os_log_type_t v13 = a1;
    id v14 = v8;
    uint64_t v15 = sub_100007578(&qword_1002573E0);
    uint64_t v16 = String.init<A>(describing:)(&v143, v15);
    uint64_t v18 = (_TtC18TrustedPeersHelper6Client *)v17;
    uint64_t v143 = sub_10017C4C4(v16, v17, (uint64_t *)&v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v11 + 4, v11 + 12);

    a1 = v13;
    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Attempting to preflight a preapproved join for %{public}s",  v11,  0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (v13)
    {
LABEL_5:
      v137[9] = a1;
      uint64_t v26 = *(void *)(v139 + 24);
      id v27 = v8;
      id v28 = [v27 cloudkitContainerName];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      int64_t v31 = v30;

      id v32 = [v27 octagonContextID];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      BOOL v35 = v34;

      __chkstk_darwin(v36, v37);
      v137[2] = v26;
      v137[3] = v29;
      v137[4] = v31;
      v137[5] = v33;
      v137[6] = v35;
      v137[7] = v27;
      uint64_t v38 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v144, sub_100195820, v137, v38);

      swift_bridgeObjectRelease(v35, v77, v78, v79, v80, v81, v82, v83);
      swift_bridgeObjectRelease(v31, v84, v85, v86, v87, v88, v89, v90);
      id v91 = v144;
      BOOL v92 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C290, 32LL, 7LL);
      BOOL v93 = (_TtC18TrustedPeersHelper6Client *)v142;
      *(void *)v92->endpoint = sub_100196DF0;
      *(void *)v92->containerMap = v93;
      uint64_t v94 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v94, 41LL, 7LL);
      swift_retain(v93);
      id v95 = v91;
      int64_t v96 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v95, 0xD000000000000030LL, 0x80000001001F9990LL);

      uint64_t v97 = swift_allocObject(&unk_10023C2B8, 40LL, 7LL);
      *(void *)(v97 + 16) = v96;
      *(void *)(v97 + 24) = sub_100196FF0;
      *(void *)(v97 + 32) = v92;
      id v98 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C2E0, 48LL, 7LL);
      *(void *)v98->endpoint = sub_100196088;
      *(void *)v98->containerMap = v97;
      *(void *)v98[1]._TtCs12_SwiftObject_opaque = v95;
      uint64_t v99 = v138;
      *(void *)&v98[1]._TtCs12_SwiftObject_opaque[8] = v138;
      swift_bridgeObjectRetain(v99);
      id v100 = v95;
      swift_retain(v96);
      swift_retain(v92);
      swift_retain(v97);
      sub_100137F18(0, (uint64_t)sub_1001960C8, (uint64_t)v98);
      swift_release(v93, v101, v102, v103, v104, v105, v106, v107);

      swift_release(v92, v108, v109, v110, v111, v112, v113, v114);
      swift_release(v96, v115, v116, v117, v118, v119, v120, v121);
      swift_release((_TtC18TrustedPeersHelper6Client *)v97, v122, v123, v124, v125, v126, v127, v128);
      uint64_t v136 = v98;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v39 = sub_100043F74();
  uint64_t v40 = swift_allocError(&type metadata for ContainerError, v39, 0LL, 0LL);
  *(_OWORD *)uint64_t v41 = xmmword_1001E6990;
  *(_BYTE *)(v41 + 16) = 13;
  swift_willThrow(v40);
  id v42 = v8;
  swift_errorRetain(v40);
  id v43 = v42;
  uint64_t v44 = swift_errorRetain(v40);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v49 = static os_log_type_t.error.getter(v45, v46, v47, v48);
  if (os_log_type_enabled(v45, v49))
  {
    uint64_t v50 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = swift_slowAlloc(64LL, -1LL);
    uint64_t v143 = (uint64_t)a1;
    uint64_t v144 = (void *)v51;
    *(_DWORD *)uint64_t v50 = 136446466;
    id v52 = v43;
    uint64_t v53 = sub_100007578(&qword_1002573E0);
    uint64_t v54 = String.init<A>(describing:)(&v143, v53);
    uint64_t v56 = (_TtC18TrustedPeersHelper6Client *)v55;
    uint64_t v143 = sub_10017C4C4(v54, v55, (uint64_t *)&v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v50 + 4, v50 + 12);

    swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
    *(_WORD *)(v50 + 12) = 2082;
    uint64_t v143 = v40;
    swift_errorRetain(v40);
    uint64_t v64 = sub_100007578(&qword_100251D70);
    uint64_t v65 = String.init<A>(describing:)(&v143, v64);
    SEL v67 = (_TtC18TrustedPeersHelper6Client *)v66;
    uint64_t v143 = sub_10017C4C4(v65, v66, (uint64_t *)&v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v49,  "preflightPreapprovedJoin failed for %{public}s: %{public}s",  (uint8_t *)v50,  0x16u);
    swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v40, v146, v145);
  id v75 = sub_100177B68(v145[1], v145[2]);
  unint64_t v76 = (void *)_convertErrorToNSError(_:)(v75);
  v141[2](v141, 0LL, v76);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v136 = (_TtC18TrustedPeersHelper6Client *)v142;
LABEL_11:
  swift_release(v136, v129, v130, v131, v132, v133, v134, v135);
}

void sub_100188708(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v143 = a3;
  uint64_t v144 = a5;
  uint64_t v141 = a4;
  uint64_t v142 = a2;
  uint64_t v147 = swift_allocObject(&unk_10023C1C8, 24LL, 7LL);
  *(void *)(v147 + 16) = a6;
  uint64_t v145 = a6;
  _Block_copy(a6);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v8, (uint64_t)qword_100257120);
  id v9 = a1;
  os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  id v146 = v9;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v148 = (uint64_t)a1;
    uint64_t v149 = (void *)v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    id v14 = a1;
    id v15 = v9;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    uint64_t v17 = String.init<A>(describing:)(&v148, v16);
    SEL v19 = (_TtC18TrustedPeersHelper6Client *)v18;
    uint64_t v148 = sub_10017C4C4(v17, v18, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v12 + 4, v12 + 12);

    a1 = v14;
    id v9 = v146;
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempting a preapproved join for %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    if (v14)
    {
LABEL_5:
      v140[9] = a1;
      uint64_t v27 = *(void *)(v144 + 24);
      id v28 = v9;
      id v29 = [v28 cloudkitContainerName];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      id v32 = v31;

      id v33 = [v28 octagonContextID];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v36 = v35;

      __chkstk_darwin(v37, v38);
      v140[2] = v27;
      void v140[3] = v30;
      v140[4] = v32;
      v140[5] = v34;
      v140[6] = v36;
      v140[7] = v28;
      uint64_t v39 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v149, sub_100195820, v140, v39);

      swift_bridgeObjectRelease(v36, v78, v79, v80, v81, v82, v83, v84);
      swift_bridgeObjectRelease(v32, v85, v86, v87, v88, v89, v90, v91);
      BOOL v92 = v149;
      BOOL v93 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C1F0, 32LL, 7LL);
      uint64_t v94 = (_TtC18TrustedPeersHelper6Client *)v147;
      *(void *)v93->endpoint = sub_100196000;
      *(void *)v93->containerMap = v94;
      uint64_t v95 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v95, 41LL, 7LL);
      swift_retain(v94);
      id v96 = v92;
      uint64_t v97 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v96, 0xD00000000000003ALL, 0x80000001001F9950LL);

      uint64_t v98 = swift_allocObject(&unk_10023C218, 40LL, 7LL);
      *(void *)(v98 + 16) = v97;
      *(void *)(v98 + 24) = sub_100196008;
      *(void *)(v98 + 32) = v93;
      uint64_t v99 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C240, 64LL, 7LL);
      *(void *)v99->endpoint = sub_100196024;
      *(void *)v99->containerMap = v98;
      uint64_t v101 = v142;
      uint64_t v100 = v143;
      *(void *)v99[1]._TtCs12_SwiftObject_opaque = v96;
      *(void *)&v99[1]._TtCs12_SwiftObject_opaque[8] = v101;
      *(void *)v99[1].endpoint = v100;
      uint64_t v102 = v141;
      *(void *)v99[1].containerMap = v141;
      swift_bridgeObjectRetain(v102);
      id v103 = v96;
      swift_retain(v97);
      swift_retain(v93);
      swift_retain(v98);
      swift_bridgeObjectRetain(v101);
      swift_bridgeObjectRetain(v100);
      sub_100137D5C((uint64_t)sub_100196074, (uint64_t)v99);
      swift_release(v94, v104, v105, v106, v107, v108, v109, v110);

      swift_release(v93, v111, v112, v113, v114, v115, v116, v117);
      swift_release(v97, v118, v119, v120, v121, v122, v123, v124);
      swift_release((_TtC18TrustedPeersHelper6Client *)v98, v125, v126, v127, v128, v129, v130, v131);
      uint64_t v139 = v99;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v40 = sub_100043F74();
  uint64_t v41 = swift_allocError(&type metadata for ContainerError, v40, 0LL, 0LL);
  *(_OWORD *)uint64_t v42 = xmmword_1001E6990;
  *(_BYTE *)(v42 + 16) = 13;
  swift_willThrow(v41);
  id v43 = v9;
  swift_errorRetain(v41);
  id v44 = v43;
  uint64_t v45 = swift_errorRetain(v41);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v50 = static os_log_type_t.error.getter(v46, v47, v48, v49);
  if (os_log_type_enabled(v46, v50))
  {
    uint64_t v51 = swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    uint64_t v148 = (uint64_t)a1;
    uint64_t v149 = (void *)v52;
    *(_DWORD *)uint64_t v51 = 136446466;
    id v53 = v44;
    uint64_t v54 = sub_100007578(&qword_1002573E0);
    uint64_t v55 = String.init<A>(describing:)(&v148, v54);
    SEL v57 = (_TtC18TrustedPeersHelper6Client *)v56;
    uint64_t v148 = sub_10017C4C4(v55, v56, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v51 + 4, v51 + 12);

    swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    *(_WORD *)(v51 + 12) = 2082;
    uint64_t v148 = v41;
    swift_errorRetain(v41);
    uint64_t v65 = sub_100007578(&qword_100251D70);
    uint64_t v66 = String.init<A>(describing:)(&v148, v65);
    SEL v68 = (_TtC18TrustedPeersHelper6Client *)v67;
    uint64_t v148 = sub_10017C4C4(v66, v67, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v51 + 14, v51 + 22);
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v50,  "attemptPreapprovedJoin failed for %{public}s: %{public}s",  (uint8_t *)v51,  0x16u);
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v41, v151, v150);
  id v76 = sub_100177B68(v150[1], v150[2]);
  SEL v77 = (void *)_convertErrorToNSError(_:)(v76);
  (*((void (**)(const void *, void, void, void, void *))v145 + 2))(v145, 0LL, 0LL, 0LL, v77);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v139 = (_TtC18TrustedPeersHelper6Client *)v147;
LABEL_11:
  swift_release(v139, v132, v133, v134, v135, v136, v137, v138);
}

void sub_100188DB0( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16)
{
  uint64_t v181 = a8;
  id v179 = a7;
  uint64_t v182 = a6;
  uint64_t v178 = a5;
  uint64_t v183 = a4;
  uint64_t v177 = a3;
  int v180 = a2;
  uint64_t v184 = (uint64_t)a16;
  uint64_t v185 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C128, 24LL, 7LL);
  *(void *)v185->endpoint = a16;
  _Block_copy(a16);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v17, (uint64_t)qword_100257120);
  id v18 = a1;
  SEL v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    v189[0] = v22;
    *(_DWORD *)id v21 = 136446210;
    uint64_t v176 = (uint64_t)(v21 + 4);
    uint64_t v186 = (uint64_t)a1;
    id v23 = v18;
    uint64_t v24 = sub_100007578(&qword_1002573E0);
    uint64_t v25 = String.init<A>(describing:)(&v186, v24);
    id v26 = v18;
    id v28 = (_TtC18TrustedPeersHelper6Client *)v27;
    uint64_t v186 = sub_10017C4C4(v25, v27, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v21 + 4, v21 + 12);

    id v29 = v28;
    id v18 = v26;
    swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Updating %{public}s", v21, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
LABEL_7:
    unint64_t v50 = sub_100043F74();
    uint64_t v51 = swift_allocError(&type metadata for ContainerError, v50, 0LL, 0LL);
    *(_OWORD *)uint64_t v52 = xmmword_1001E6990;
    *(_BYTE *)(v52 + 16) = 13;
    swift_willThrow(v51);
    goto LABEL_8;
  }

  if (!a1) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v176 = (uint64_t)a1;
  uint64_t v37 = *(void *)(a15 + 24);
  uint64_t v175 = (uint64_t)v18;
  id v38 = v18;
  id v39 = [v38 cloudkitContainerName];
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  uint64_t v42 = v41;

  id v43 = [v38 octagonContextID];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  uint64_t v46 = v45;

  __chkstk_darwin(v47, v48);
  v172[2] = v37;
  v172[3] = v40;
  v172[4] = v42;
  v172[5] = v44;
  v172[6] = v46;
  v172[7] = v38;
  uint64_t v49 = type metadata accessor for Container();
  OS_dispatch_queue.sync<A>(execute:)(v189, sub_100195820, v172, v49);

  swift_bridgeObjectRelease(v46, v96, v97, v98, v99, v100, v101, v102);
  swift_bridgeObjectRelease(v42, v103, v104, v105, v106, v107, v108, v109);
  id v110 = (void *)v189[0];
  if (!a11)
  {
    uint64_t v113 = 0LL;
    goto LABEL_17;
  }

  unsigned int v111 = [a11 intValue];
  uint64_t v112 = v111 - 1;
  if (v112 < 3)
  {
    uint64_t v113 = v112 + 1;
LABEL_17:
    uint64_t v175 = a14;
    uint64_t v184 = a13;
    uint64_t v176 = a12;
    if (a9) {
      id v114 = [a9 unsignedLongLongValue];
    }
    else {
      id v114 = 0LL;
    }
    SEL v118 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C150, 32LL, 7LL);
    id v119 = v185;
    *(void *)v118->endpoint = sub_100195D9C;
    *(void *)v118->containerMap = v119;
    uint64_t v120 = type metadata accessor for Container.SemaphoreWrapper();
    swift_allocObject(v120, 41LL, 7LL);
    swift_retain(v119);
    id v121 = v110;
    uint64_t v122 = sub_100159634(v121, 0xD0000000000000A1LL, 0x80000001001F9880LL);
    uint64_t v174 = (_TtC18TrustedPeersHelper6Client *)v122;

    uint64_t v123 = swift_allocObject(&unk_10023C178, 40LL, 7LL);
    *(void *)(v123 + 16) = v122;
    *(void *)(v123 + 24) = sub_100196FA4;
    *(void *)(v123 + 32) = v118;
    unint64_t v124 = v113 | ((unint64_t)(a11 == 0LL) << 32);
    uint64_t v125 = v183;
    v189[0] = v177;
    v189[1] = v183;
    uint64_t v126 = v182;
    uint64_t v189[2] = v178;
    v189[3] = v182;
    uint64_t v127 = v181;
    v189[4] = (uint64_t)v179;
    v189[5] = v181;
    v189[6] = (uint64_t)v114;
    v189[7] = a9 == 0LL;
    uint64_t v173 = a10;
    v189[8] = a10;
    v189[9] = v124;
    id v128 = (void *)v176;
    id v129 = (void *)v184;
    v189[10] = v176;
    v189[11] = v184;
    id v130 = (void *)v175;
    v189[12] = v175;
    uint64_t v131 = swift_allocObject(&unk_10023C1A0, 145LL, 7LL);
    *(void *)(v131 + 16) = sub_100195F40;
    *(void *)(v131 + 24) = v123;
    *(void *)(v131 + 32) = v121;
    sub_100195FB8((uint64_t)v189, v131 + 40);
    *(_BYTE *)(v131 + 144) = 0;
    id v132 = v130;
    id v179 = v121;
    swift_bridgeObjectRetain_n(v125, 3LL);
    swift_bridgeObjectRetain_n(v126, 3LL);
    swift_bridgeObjectRetain_n(v127, 3LL);
    uint64_t v133 = v173;
    swift_bridgeObjectRetain_n(v173, 3LL);
    id v134 = v128;
    id v135 = v129;
    id v136 = v132;
    id v137 = v174;
    swift_retain(v174);
    swift_retain(v118);
    id v138 = v134;
    id v139 = v135;
    id v140 = v136;
    swift_retain(v123);
    id v141 = v138;
    id v142 = v139;
    uint64_t v143 = v179;
    sub_100137F18(v180 & 1, (uint64_t)sub_100171BA0, v131);
    swift_release(v185, v144, v145, v146, v147, v148, v149, v150);
    swift_release(v118, v151, v152, v153, v154, v155, v156, v157);

    swift_release(v137, v158, v159, v160, v161, v162, v163, v164);
    swift_release((_TtC18TrustedPeersHelper6Client *)v123, v165, v166, v167, v168, v169, v170, v171);

    swift_bridgeObjectRelease_n(v133, 2LL);
    swift_bridgeObjectRelease_n(v181, 2LL);
    swift_bridgeObjectRelease_n(v182, 2LL);
    swift_bridgeObjectRelease_n(v183, 2LL);
    uint64_t v95 = (_TtC18TrustedPeersHelper6Client *)v131;
    goto LABEL_12;
  }

  uint64_t v115 = v111;
  unint64_t v116 = sub_100043F74();
  uint64_t v51 = swift_allocError(&type metadata for ContainerError, v116, 0LL, 0LL);
  *(void *)uint64_t v117 = v115;
  *(void *)(v117 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v117 + 16) = 7;
  swift_willThrow(v51);

  a1 = (void *)v176;
  id v18 = (id)v175;
LABEL_8:
  id v53 = v18;
  swift_errorRetain(v51);
  id v54 = v53;
  uint64_t v55 = swift_errorRetain(v51);
  unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
  os_log_type_t v60 = static os_log_type_t.error.getter(v56, v57, v58, v59);
  if (os_log_type_enabled(v56, v60))
  {
    uint64_t v61 = swift_slowAlloc(22LL, -1LL);
    uint64_t v62 = swift_slowAlloc(64LL, -1LL);
    v189[0] = v62;
    *(_DWORD *)uint64_t v61 = 136446466;
    uint64_t v186 = (uint64_t)a1;
    id v63 = v54;
    uint64_t v64 = sub_100007578(&qword_1002573E0);
    uint64_t v65 = String.init<A>(describing:)(&v186, v64);
    unint64_t v67 = (_TtC18TrustedPeersHelper6Client *)v66;
    uint64_t v186 = sub_10017C4C4(v65, v66, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v61 + 4, v61 + 12);

    swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
    *(_WORD *)(v61 + 12) = 2082;
    uint64_t v186 = v51;
    swift_errorRetain(v51);
    uint64_t v75 = sub_100007578(&qword_100251D70);
    uint64_t v76 = String.init<A>(describing:)(&v186, v75);
    SEL v78 = (_TtC18TrustedPeersHelper6Client *)v77;
    uint64_t v186 = sub_10017C4C4(v76, v77, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v61 + 14, v61 + 22);
    swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v56,  v60,  "update failed for %{public}s: %{public}s",  (uint8_t *)v61,  0x16u);
    swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v61, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v51, v188, v187);
  id v86 = sub_100177B68(v187[1], v187[2]);
  int64_t v87 = (void *)_convertErrorToNSError(_:)(v86);
  (*(void (**)(uint64_t, void, void, void *))(v184 + 16))(v184, 0LL, 0LL, v87);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v95 = v185;
LABEL_12:
  swift_release(v95, v88, v89, v90, v91, v92, v93, v94);
}

void sub_1001896B0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v164 = a2;
  uint64_t v165 = a3;
  id v167 = a4;
  id v168 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C038, 24LL, 7LL);
  *(void *)v168->endpoint = v167;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v166 = v7;
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v12;
    *(_DWORD *)os_log_type_t v11 = 136446210;
    uint64_t v171 = (uint64_t)a1;
    id v13 = v8;
    id v14 = v8;
    id v15 = a1;
    id v16 = v13;
    uint64_t v17 = sub_100007578(&qword_1002573E0);
    uint64_t v18 = String.init<A>(describing:)(&v171, v17);
    os_log_type_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v171 = sub_10017C4C4(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v11 + 4, v11 + 12);

    a1 = v15;
    id v8 = v14;
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "setPreapprovedKeys %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v163[8] = a1;
      uint64_t v28 = *(void *)(v165 + 24);
      id v29 = v8;
      id v30 = objc_msgSend(v29, "cloudkitContainerName", a1);
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      id v33 = v32;

      id v34 = [v29 octagonContextID];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      __chkstk_darwin(v38, v39);
      v163[2] = v28;
      v163[3] = v31;
      v163[4] = v33;
      v163[5] = v35;
      v163[6] = v37;
      v163[7] = v29;
      uint64_t v40 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v163, v40);

      swift_bridgeObjectRelease(v37, v86, v87, v88, v89, v90, v91, v92);
      swift_bridgeObjectRelease(v33, v93, v94, v95, v96, v97, v98, v99);
      id v100 = (void *)aBlock[0];
      BOOL v101 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C060, 32LL, 7LL);
      BOOL v102 = v168;
      *(void *)v101->endpoint = sub_100195EEC;
      *(void *)v101->containerMap = v102;
      uint64_t v103 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v103, 41LL, 7LL);
      swift_retain(v102);
      id v104 = v100;
      int64_t v105 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v104, 0xD00000000000001BLL, 0x80000001001F9860LL);

      uint64_t v106 = swift_allocObject(&unk_10023C088, 40LL, 7LL);
      *(void *)(v106 + 16) = v105;
      *(void *)(v106 + 24) = sub_100196FF4;
      *(void *)(v106 + 32) = v101;
      id v167 = *(id *)&v104[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v107 = swift_allocObject(&unk_10023C0B0, 48LL, 7LL);
      uint64_t v108 = v164;
      *(void *)(v107 + 16) = v164;
      *(void *)(v107 + 24) = v104;
      *(void *)(v107 + 32) = sub_100195F08;
      *(void *)(v107 + 40) = v106;
      BOOL v109 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023C0D8, 32LL, 7LL);
      *(void *)v109->endpoint = sub_100195F20;
      *(void *)v109->containerMap = v107;
      aBlock[4] = (uint64_t)sub_100044B24;
      id v170 = v109;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023C0F0;
      id v110 = _Block_copy(aBlock);
      unsigned int v111 = v170;
      uint64_t v112 = v104;
      swift_retain(v105);
      swift_retain(v101);
      swift_bridgeObjectRetain(v108);
      swift_retain(v106);
      swift_retain(v109);
      swift_release(v111, v113, v114, v115, v116, v117, v118, v119);
      [v167 performBlockAndWait:v110];
      swift_release((_TtC18TrustedPeersHelper6Client *)v106, v120, v121, v122, v123, v124, v125, v126);
      swift_release(v105, v127, v128, v129, v130, v131, v132, v133);
      _Block_release(v110);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v109, "", 108LL, 6353LL, 33LL, 1LL);
      swift_release(v102, v135, v136, v137, v138, v139, v140, v141);

      swift_release(v101, v142, v143, v144, v145, v146, v147, v148);
      swift_release((_TtC18TrustedPeersHelper6Client *)v107, v149, v150, v151, v152, v153, v154, v155);
      swift_release(v109, v156, v157, v158, v159, v160, v161, v162);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return;
    }
  }

  unint64_t v41 = sub_100043F74();
  uint64_t v42 = swift_allocError(&type metadata for ContainerError, v41, 0LL, 0LL);
  *(_OWORD *)uint64_t v43 = xmmword_1001E6990;
  *(_BYTE *)(v43 + 16) = 13;
  swift_willThrow(v42);
  id v44 = v8;
  swift_errorRetain(v42);
  id v45 = v44;
  uint64_t v46 = swift_errorRetain(v42);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v51 = static os_log_type_t.error.getter(v47, v48, v49, v50);
  if (os_log_type_enabled(v47, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v53;
    *(_DWORD *)uint64_t v52 = 136446466;
    uint64_t v171 = (uint64_t)a1;
    id v54 = v45;
    uint64_t v55 = sub_100007578(&qword_1002573E0);
    uint64_t v56 = String.init<A>(describing:)(&v171, v55);
    uint64_t v58 = (_TtC18TrustedPeersHelper6Client *)v57;
    uint64_t v171 = sub_10017C4C4(v56, v57, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v52 + 4, v52 + 12);

    swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
    *(_WORD *)(v52 + 12) = 2082;
    uint64_t v171 = v42;
    swift_errorRetain(v42);
    uint64_t v66 = sub_100007578(&qword_100251D70);
    uint64_t v67 = String.init<A>(describing:)(&v171, v66);
    id v69 = (_TtC18TrustedPeersHelper6Client *)v68;
    uint64_t v171 = sub_10017C4C4(v67, v68, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v51,  "setPreapprovedKeys failed for %{public}s: %{public}s",  (uint8_t *)v52,  0x16u);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v42, v173, v172);
  id v77 = sub_100177B68(v172[1], v172[2]);
  SEL v78 = (void *)_convertErrorToNSError(_:)(v77);
  (*((void (**)(id, void, void *))v167 + 2))(v167, 0LL, v78);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v168, v79, v80, v81, v82, v83, v84, v85);
}

void sub_100189E00( void *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, uint64_t a4, void (**a5)(const void *, void, void *))
{
  uint64_t v112 = a2;
  uint64_t v113 = a4;
  uint64_t v111 = a3;
  id v115 = a5;
  uint64_t v116 = swift_allocObject(&unk_10023BFE8, 24LL, 7LL);
  *(void *)(v116 + 16) = v115;
  _Block_copy(a5);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100006BAC(v7, (uint64_t)qword_100257120);
  id v9 = a1;
  uint64_t v114 = v8;
  os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v117 = (uint64_t)a1;
    id v118 = (void *)v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    id v14 = a1;
    id v15 = v9;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    uint64_t v17 = String.init<A>(describing:)(&v117, v16);
    unint64_t v19 = (_TtC18TrustedPeersHelper6Client *)v18;
    uint64_t v117 = sub_10017C4C4(v17, v18, (uint64_t *)&v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v12 + 4, v12 + 12);

    a1 = v14;
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Updating TLKs for %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    if (v14)
    {
LABEL_5:
      v110[8] = a1;
      uint64_t v27 = *(void *)(v113 + 24);
      id v28 = v9;
      id v29 = objc_msgSend(v28, "cloudkitContainerName", a1);
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      int64_t v32 = v31;

      id v33 = [v28 octagonContextID];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      BOOL v36 = v35;

      __chkstk_darwin(v37, v38);
      v110[2] = v27;
      v110[3] = v30;
      void v110[4] = v32;
      v110[5] = v34;
      v110[6] = v36;
      v110[7] = v28;
      uint64_t v39 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v118, sub_100195820, v110, v39);

      swift_bridgeObjectRelease(v36, v78, v79, v80, v81, v82, v83, v84);
      swift_bridgeObjectRelease(v32, v85, v86, v87, v88, v89, v90, v91);
      BOOL v92 = v118;
      uint64_t v93 = swift_allocObject(&unk_10023C010, 32LL, 7LL);
      id v94 = (_TtC18TrustedPeersHelper6Client *)v116;
      *(void *)(v93 + 16) = sub_100196DF8;
      *(void *)(v93 + 24) = v94;
      swift_retain(v94);
      sub_1001357D4(v112, v111, (uint64_t)sub_100196FF4, v93);
      swift_release(v94, v95, v96, v97, v98, v99, v100, v101);

      BOOL v109 = (_TtC18TrustedPeersHelper6Client *)v93;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v40 = sub_100043F74();
  uint64_t v41 = swift_allocError(&type metadata for ContainerError, v40, 0LL, 0LL);
  *(_OWORD *)uint64_t v42 = xmmword_1001E6990;
  *(_BYTE *)(v42 + 16) = 13;
  swift_willThrow(v41);
  id v43 = v9;
  swift_errorRetain(v41);
  id v44 = v43;
  uint64_t v45 = swift_errorRetain(v41);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v50 = static os_log_type_t.error.getter(v46, v47, v48, v49);
  if (os_log_type_enabled(v46, v50))
  {
    uint64_t v51 = swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    uint64_t v117 = (uint64_t)a1;
    id v118 = (void *)v52;
    *(_DWORD *)uint64_t v51 = 136446466;
    id v53 = v44;
    uint64_t v54 = sub_100007578(&qword_1002573E0);
    uint64_t v55 = String.init<A>(describing:)(&v117, v54);
    unint64_t v57 = (_TtC18TrustedPeersHelper6Client *)v56;
    uint64_t v117 = sub_10017C4C4(v55, v56, (uint64_t *)&v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v51 + 4, v51 + 12);

    swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    *(_WORD *)(v51 + 12) = 2082;
    uint64_t v117 = v41;
    swift_errorRetain(v41);
    uint64_t v65 = sub_100007578(&qword_100251D70);
    uint64_t v66 = String.init<A>(describing:)(&v117, v65);
    unint64_t v68 = (_TtC18TrustedPeersHelper6Client *)v67;
    uint64_t v117 = sub_10017C4C4(v66, v67, (uint64_t *)&v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v51 + 14, v51 + 22);
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v50,  "updateTLKs failed for %{public}s: %{public}s",  (uint8_t *)v51,  0x16u);
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v41, v120, v119);
  id v76 = sub_100177B68(v119[1], v119[2]);
  id v77 = (void *)_convertErrorToNSError(_:)(v76);
  v115[2](v115, 0LL, v77);

  swift_errorRelease();
  swift_errorRelease();
  BOOL v109 = (_TtC18TrustedPeersHelper6Client *)v116;
LABEL_11:
  swift_release(v109, v102, v103, v104, v105, v106, v107, v108);
}

void sub_10018A3A4(void *a1, uint64_t a2, void (**a3)(const void *, void *))
{
  uint64_t v160 = a2;
  id v163 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BEF8, 24LL, 7LL);
  *(void *)v163->endpoint = a3;
  id v161 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v162 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v10;
    *(_DWORD *)id v9 = 136446210;
    uint64_t v166 = (uint64_t)a1;
    os_log_type_t v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v166, v13);
    uint64_t v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v166 = sub_10017C4C4(v14, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v162;
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Departing %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v159[9] = a1;
      uint64_t v24 = *(void *)(v160 + 24);
      id v25 = v6;
      id v26 = [v25 cloudkitContainerName];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      id v29 = v28;

      id v30 = [v25 octagonContextID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      id v33 = v32;

      __chkstk_darwin(v34, v35);
      v159[2] = v24;
      v159[3] = v27;
      v159[4] = v29;
      v159[5] = v31;
      v159[6] = v33;
      v159[7] = v25;
      uint64_t v36 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v159, v36);

      swift_bridgeObjectRelease(v33, v82, v83, v84, v85, v86, v87, v88);
      swift_bridgeObjectRelease(v29, v89, v90, v91, v92, v93, v94, v95);
      id v96 = (void *)aBlock[0];
      id v97 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BF20, 32LL, 7LL);
      id v98 = v163;
      *(void *)v97->endpoint = sub_100196E00;
      *(void *)v97->containerMap = v98;
      uint64_t v99 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v99, 41LL, 7LL);
      swift_retain(v98);
      id v100 = v96;
      id v101 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v100, 0xD00000000000001FLL, 0x80000001001F9840LL);

      uint64_t v102 = swift_allocObject(&unk_10023BF48, 40LL, 7LL);
      *(void *)(v102 + 16) = v101;
      *(void *)(v102 + 24) = sub_100197000;
      *(void *)(v102 + 32) = v97;
      uint64_t v103 = *(void **)&v100[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v104 = swift_allocObject(&unk_10023BF70, 40LL, 7LL);
      *(void *)(v104 + 16) = v100;
      *(void *)(v104 + 24) = sub_100195EC0;
      *(void *)(v104 + 32) = v102;
      int64_t v105 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BF98, 32LL, 7LL);
      *(void *)v105->endpoint = sub_100195ED0;
      *(void *)v105->containerMap = v104;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v165 = v105;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023BFB0;
      uint64_t v106 = _Block_copy(aBlock);
      uint64_t v107 = v165;
      uint64_t v108 = v100;
      swift_retain(v101);
      swift_retain(v97);
      swift_retain(v102);
      swift_retain(v105);
      swift_release(v107, v109, v110, v111, v112, v113, v114, v115);
      [v103 performBlockAndWait:v106];
      swift_release((_TtC18TrustedPeersHelper6Client *)v102, v116, v117, v118, v119, v120, v121, v122);
      swift_release(v101, v123, v124, v125, v126, v127, v128, v129);
      _Block_release(v106);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v105, "", 108LL, 4461LL, 33LL, 1LL);
      swift_release(v98, v131, v132, v133, v134, v135, v136, v137);

      swift_release(v97, v138, v139, v140, v141, v142, v143, v144);
      swift_release((_TtC18TrustedPeersHelper6Client *)v104, v145, v146, v147, v148, v149, v150, v151);
      swift_release(v105, v152, v153, v154, v155, v156, v157, v158);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return;
    }
  }

  unint64_t v37 = sub_100043F74();
  uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
  *(_OWORD *)uint64_t v39 = xmmword_1001E6990;
  *(_BYTE *)(v39 + 16) = 13;
  swift_willThrow(v38);
  id v40 = v6;
  swift_errorRetain(v38);
  id v41 = v40;
  uint64_t v42 = swift_errorRetain(v38);
  id v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v49;
    *(_DWORD *)uint64_t v48 = 136446466;
    uint64_t v166 = (uint64_t)a1;
    id v50 = v41;
    uint64_t v51 = sub_100007578(&qword_1002573E0);
    uint64_t v52 = String.init<A>(describing:)(&v166, v51);
    uint64_t v54 = (_TtC18TrustedPeersHelper6Client *)v53;
    uint64_t v166 = sub_10017C4C4(v52, v53, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v166 = v38;
    swift_errorRetain(v38);
    uint64_t v62 = sub_100007578(&qword_100251D70);
    uint64_t v63 = String.init<A>(describing:)(&v166, v62);
    uint64_t v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v166 = sub_10017C4C4(v63, v64, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "departByDistrustingSelf failed for %{public}s: %{public}s",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v38, v168, v167);
  id v73 = sub_100177B68(v167[1], v167[2]);
  BOOL v74 = (void *)_convertErrorToNSError(_:)(v73);
  v161[2](v161, v74);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v163, v75, v76, v77, v78, v79, v80, v81);
}

void sub_10018AAF0( void *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, void (**a4)(const void *, void *))
{
  uint64_t v181 = a3;
  uint64_t v185 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BE08, 24LL, 7LL);
  *(void *)v185->endpoint = a4;
  uint64_t v183 = a4;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100006BAC(v7, (uint64_t)qword_100257120);
  id v9 = a1;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v10 = v9;
  uint64_t v182 = v8;
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  id v184 = a1;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v15 = swift_bridgeObjectRetain(a2);
    uint64_t v16 = Set.description.getter(v15, &type metadata for String, &protocol witness table for String);
    id v18 = (_TtC18TrustedPeersHelper6Client *)v17;
    swift_bridgeObjectRelease(a2, v17, v19, v20, v21, v22, v23, v24);
    uint64_t v188 = sub_10017C4C4(v16, (unint64_t)v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v18, v25, v26, v27, v28, v29, v30, v31);
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v188 = (uint64_t)a1;
    id v32 = v10;
    uint64_t v33 = sub_100007578(&qword_1002573E0);
    uint64_t v34 = String.init<A>(describing:)(&v188, v33);
    uint64_t v36 = (_TtC18TrustedPeersHelper6Client *)v35;
    uint64_t v188 = sub_10017C4C4(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v13 + 14, v13 + 22);

    swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Distrusting %{public}s in %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    if (v184) {
      goto LABEL_5;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    if (a1)
    {
LABEL_5:
      int v180 = a2;
      uint64_t v44 = *(void *)(v181 + 24);
      id v45 = v10;
      id v46 = [v45 cloudkitContainerName];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v49 = v48;

      id v50 = [v45 octagonContextID];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      unint64_t v53 = v52;

      __chkstk_darwin(v54, v55);
      v179[2] = v44;
      v179[3] = v47;
      v179[4] = v49;
      v179[5] = v51;
      v179[6] = v53;
      v179[7] = v45;
      uint64_t v56 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v179, v56);

      swift_bridgeObjectRelease(v53, v102, v103, v104, v105, v106, v107, v108);
      swift_bridgeObjectRelease(v49, v109, v110, v111, v112, v113, v114, v115);
      SEL v116 = (void *)aBlock[0];
      id v117 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BE30, 32LL, 7LL);
      id v118 = v185;
      *(void *)v117->endpoint = sub_100196E00;
      *(void *)v117->containerMap = v118;
      uint64_t v119 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v119, 41LL, 7LL);
      swift_retain(v118);
      id v120 = v116;
      id v121 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v120, 0xD000000000000018LL, 0x80000001001F9820LL);

      uint64_t v122 = swift_allocObject(&unk_10023BE58, 40LL, 7LL);
      *(void *)(v122 + 16) = v121;
      *(void *)(v122 + 24) = sub_100197000;
      *(void *)(v122 + 32) = v117;
      id v184 = *(id *)&v120[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v123 = swift_allocObject(&unk_10023BE80, 48LL, 7LL);
      *(void *)(v123 + 16) = v120;
      *(void *)(v123 + 24) = sub_100195E90;
      id v124 = v180;
      *(void *)(v123 + 32) = v122;
      *(void *)(v123 + 40) = v124;
      id v125 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BEA8, 32LL, 7LL);
      *(void *)v125->endpoint = sub_100195EA0;
      *(void *)v125->containerMap = v123;
      aBlock[4] = (uint64_t)sub_100044B24;
      id v187 = v125;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023BEC0;
      id v126 = _Block_copy(aBlock);
      id v127 = v187;
      swift_bridgeObjectRetain(v124);
      id v128 = v120;
      swift_retain(v121);
      swift_retain(v117);
      swift_retain(v122);
      swift_retain(v125);
      swift_release(v127, v129, v130, v131, v132, v133, v134, v135);
      [v184 performBlockAndWait:v126];
      swift_release((_TtC18TrustedPeersHelper6Client *)v122, v136, v137, v138, v139, v140, v141, v142);
      swift_release(v121, v143, v144, v145, v146, v147, v148, v149);
      _Block_release(v126);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v125, "", 108LL, 4482LL, 33LL, 1LL);
      swift_release(v118, v151, v152, v153, v154, v155, v156, v157);

      swift_release(v117, v158, v159, v160, v161, v162, v163, v164);
      swift_release((_TtC18TrustedPeersHelper6Client *)v123, v165, v166, v167, v168, v169, v170, v171);
      swift_release(v125, v172, v173, v174, v175, v176, v177, v178);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return;
    }
  }

  unint64_t v57 = sub_100043F74();
  uint64_t v58 = swift_allocError(&type metadata for ContainerError, v57, 0LL, 0LL);
  *(_OWORD *)uint64_t v59 = xmmword_1001E6990;
  *(_BYTE *)(v59 + 16) = 13;
  swift_willThrow(v58);
  id v60 = v10;
  swift_errorRetain(v58);
  id v61 = v60;
  uint64_t v62 = swift_errorRetain(v58);
  uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v67 = static os_log_type_t.error.getter(v63, v64, v65, v66);
  if (os_log_type_enabled(v63, v67))
  {
    uint64_t v68 = swift_slowAlloc(22LL, -1LL);
    uint64_t v69 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v69;
    *(_DWORD *)uint64_t v68 = 136446466;
    uint64_t v188 = (uint64_t)v184;
    id v70 = v61;
    uint64_t v71 = sub_100007578(&qword_1002573E0);
    uint64_t v72 = String.init<A>(describing:)(&v188, v71);
    BOOL v74 = (_TtC18TrustedPeersHelper6Client *)v73;
    uint64_t v188 = sub_10017C4C4(v72, v73, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v68 + 4, v68 + 12);

    swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
    *(_WORD *)(v68 + 12) = 2082;
    uint64_t v188 = v58;
    swift_errorRetain(v58);
    uint64_t v82 = sub_100007578(&qword_100251D70);
    uint64_t v83 = String.init<A>(describing:)(&v188, v82);
    id v85 = (_TtC18TrustedPeersHelper6Client *)v84;
    uint64_t v188 = sub_10017C4C4(v83, v84, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v68 + 14, v68 + 22);
    swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v63,  v67,  "distrustPeerIDs failed for %{public}s: %{public}s",  (uint8_t *)v68,  0x16u);
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v68, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v58, v190, v189);
  id v93 = sub_100177B68(v189[1], v189[2]);
  BOOL v94 = (void *)_convertErrorToNSError(_:)(v93);
  v183[2](v183, v94);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v185, v95, v96, v97, v98, v99, v100, v101);
}

void sub_10018B2C8( void *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, void (**a4)(const void *, void *))
{
  uint64_t v173 = a3;
  id v177 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BD18, 24LL, 7LL);
  *(void *)v177->endpoint = a4;
  id v175 = a4;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100006BAC(v7, (uint64_t)qword_100257120);
  id v9 = a1;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v10 = v9;
  uint64_t v174 = v8;
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  id v176 = a1;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v15 = swift_bridgeObjectRetain(a2);
    uint64_t v16 = Set.description.getter(v15, &type metadata for String, &protocol witness table for String);
    id v18 = (_TtC18TrustedPeersHelper6Client *)v17;
    swift_bridgeObjectRelease(a2, v17, v19, v20, v21, v22, v23, v24);
    uint64_t v180 = sub_10017C4C4(v16, (unint64_t)v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, v181, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v18, v25, v26, v27, v28, v29, v30, v31);
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v180 = (uint64_t)a1;
    id v32 = v10;
    uint64_t v33 = sub_100007578(&qword_1002573E0);
    uint64_t v34 = String.init<A>(describing:)(&v180, v33);
    uint64_t v36 = (_TtC18TrustedPeersHelper6Client *)v35;
    uint64_t v180 = sub_10017C4C4(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, v181, v13 + 14, v13 + 22);

    swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Dropping %{public}s in %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    if (v176) {
      goto LABEL_5;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    if (a1)
    {
LABEL_5:
      SEL v172 = a2;
      uint64_t v44 = *(void *)(v173 + 24);
      id v45 = v10;
      id v46 = [v45 cloudkitContainerName];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v49 = v48;

      id v50 = [v45 octagonContextID];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      unint64_t v53 = v52;

      __chkstk_darwin(v54, v55);
      v171[2] = v44;
      v171[3] = v47;
      v171[4] = v49;
      v171[5] = v51;
      v171[6] = v53;
      v171[7] = v45;
      uint64_t v56 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v171, v56);

      swift_bridgeObjectRelease(v53, v94, v95, v96, v97, v98, v99, v100);
      swift_bridgeObjectRelease(v49, v101, v102, v103, v104, v105, v106, v107);
      BOOL v108 = (void *)aBlock[0];
      SEL v109 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BD40, 32LL, 7LL);
      id v110 = v177;
      *(void *)v109->endpoint = sub_100196E00;
      *(void *)v109->containerMap = v110;
      uint64_t v111 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v111, 41LL, 7LL);
      swift_retain(v110);
      id v112 = v108;
      id v113 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v112, 0xD000000000000014LL, 0x80000001001F9800LL);

      uint64_t v114 = swift_allocObject(&unk_10023BD68, 40LL, 7LL);
      *(void *)(v114 + 16) = v113;
      *(void *)(v114 + 24) = sub_100195E44;
      *(void *)(v114 + 32) = v109;
      id v176 = *(id *)&v112[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v115 = swift_allocObject(&unk_10023BD90, 48LL, 7LL);
      *(void *)(v115 + 16) = v112;
      *(void *)(v115 + 24) = sub_100195E60;
      SEL v116 = v172;
      *(void *)(v115 + 32) = v114;
      *(void *)(v115 + 40) = v116;
      id v117 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BDB8, 32LL, 7LL);
      *(void *)v117->endpoint = sub_100195E70;
      *(void *)v117->containerMap = v115;
      aBlock[4] = (uint64_t)sub_100044B24;
      id v179 = v117;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023BDD0;
      id v118 = _Block_copy(aBlock);
      uint64_t v119 = v179;
      swift_bridgeObjectRetain(v116);
      id v120 = v112;
      swift_retain(v113);
      swift_retain(v109);
      swift_retain(v114);
      swift_retain(v117);
      swift_release(v119, v121, v122, v123, v124, v125, v126, v127);
      [v176 performBlockAndWait:v118];
      swift_release((_TtC18TrustedPeersHelper6Client *)v114, v128, v129, v130, v131, v132, v133, v134);
      swift_release(v113, v135, v136, v137, v138, v139, v140, v141);
      _Block_release(v118);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v117, "", 108LL, 4580LL, 33LL, 1LL);
      swift_release(v110, v143, v144, v145, v146, v147, v148, v149);

      swift_release(v109, v150, v151, v152, v153, v154, v155, v156);
      swift_release((_TtC18TrustedPeersHelper6Client *)v115, v157, v158, v159, v160, v161, v162, v163);
      swift_release(v117, v164, v165, v166, v167, v168, v169, v170);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return;
    }
  }

  unint64_t v57 = sub_100043F74();
  uint64_t v58 = swift_allocError(&type metadata for ContainerError, v57, 0LL, 0LL);
  *(_OWORD *)uint64_t v59 = xmmword_1001E6990;
  *(_BYTE *)(v59 + 16) = 13;
  swift_willThrow(v58);
  id v60 = v10;
  swift_errorRetain(v58);
  id v61 = v60;
  uint64_t v62 = swift_errorRetain(v58);
  uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v67 = static os_log_type_t.error.getter(v63, v64, v65, v66);
  if (os_log_type_enabled(v63, v67))
  {
    uint64_t v68 = swift_slowAlloc(22LL, -1LL);
    uint64_t v69 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v70;
    *(_DWORD *)uint64_t v68 = 136446466;
    uint64_t v180 = (uint64_t)v176;
    id v71 = v61;
    uint64_t v72 = sub_100007578(&qword_1002573E0);
    uint64_t v73 = String.init<A>(describing:)(&v180, v72);
    SEL v75 = (_TtC18TrustedPeersHelper6Client *)v74;
    uint64_t v180 = sub_10017C4C4(v73, v74, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, v181, v68 + 4, v68 + 12);

    swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
    *(_WORD *)(v68 + 12) = 2114;
    swift_errorRetain(v58);
    uint64_t v83 = _swift_stdlib_bridgeErrorToNSError(v58);
    uint64_t v180 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, v181, v68 + 14, v68 + 22);
    *uint64_t v69 = v83;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v63,  v67,  "dropPeerIDs failed for %{public}s: %{public}@",  (uint8_t *)v68,  0x16u);
    uint64_t v84 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v69, 1LL, v84);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v68, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v58, v182, v181);
  id v85 = sub_100177B68(v181[1], v181[2]);
  SEL v86 = (void *)_convertErrorToNSError(_:)(v85);
  v175[2](v175, v86);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v177, v87, v88, v89, v90, v91, v92, v93);
}

void sub_10018BABC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  uint64_t v136 = a5;
  uint64_t v137 = a7;
  uint64_t v133 = a6;
  uint64_t v134 = a3;
  uint64_t v135 = a4;
  uint64_t v138 = a2;
  id v140 = a8;
  uint64_t v141 = swift_allocObject(&unk_10023BCA0, 24LL, 7LL);
  *(void *)(v141 + 16) = v140;
  _Block_copy(a8);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100006BAC(v10, (uint64_t)qword_100257120);
  id v12 = a1;
  uint64_t v139 = v11;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v142 = (uint64_t)a1;
    SEL v143 = (void *)v16;
    *(_DWORD *)uint64_t v15 = 136446466;
    id v17 = v12;
    uint64_t v18 = sub_100007578(&qword_1002573E0);
    uint64_t v19 = String.init<A>(describing:)(&v142, v18);
    int64_t v20 = a1;
    id v22 = (_TtC18TrustedPeersHelper6Client *)v21;
    uint64_t v142 = sub_10017C4C4(v19, v21, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v15 + 4, v15 + 12);

    BOOL v23 = v22;
    a1 = v20;
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
    *(_WORD *)(v15 + 12) = 2050;
    uint64_t v142 = v138;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v15 + 14, v15 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "fetchViableBottles in %{public}s from source (%{public}ld)",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    if (v20)
    {
LABEL_5:
      v132[9] = a1;
      uint64_t v31 = *(void *)(v137 + 24);
      id v32 = v12;
      id v33 = [v32 cloudkitContainerName];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v36 = v35;

      id v37 = [v32 octagonContextID];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      id v40 = v39;

      __chkstk_darwin(v41, v42);
      v132[2] = v31;
      v132[3] = v34;
      v132[4] = v36;
      v132[5] = v38;
      v132[6] = v40;
      v132[7] = v32;
      uint64_t v43 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v143, sub_100195820, v132, v43);

      swift_bridgeObjectRelease(v40, v82, v83, v84, v85, v86, v87, v88);
      swift_bridgeObjectRelease(v36, v89, v90, v91, v92, v93, v94, v95);
      int64_t v96 = v143;
      id v97 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BCC8, 32LL, 7LL);
      id v98 = (_TtC18TrustedPeersHelper6Client *)v141;
      *(void *)v97->endpoint = sub_100195E28;
      *(void *)v97->containerMap = v98;
      uint64_t v99 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v99, 41LL, 7LL);
      swift_retain(v98);
      id v100 = v96;
      SEL v101 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v100, 0xD000000000000036LL, 0x80000001001F97C0LL);

      id v102 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BCF0, 40LL, 7LL);
      *(void *)v102->endpoint = v101;
      *(void *)v102->containerMap = sub_100196FA4;
      *(void *)v102[1]._TtCs12_SwiftObject_opaque = v97;
      swift_retain(v101);
      swift_retain(v97);
      sub_10011AAE4(v138, v134, v135, v136, v133, (uint64_t)sub_100195E34, (uint64_t)v102);
      swift_release(v98, v103, v104, v105, v106, v107, v108, v109);

      swift_release(v97, v110, v111, v112, v113, v114, v115, v116);
      swift_release(v101, v117, v118, v119, v120, v121, v122, v123);
      id v131 = v102;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v44 = sub_100043F74();
  uint64_t v45 = swift_allocError(&type metadata for ContainerError, v44, 0LL, 0LL);
  *(_OWORD *)uint64_t v46 = xmmword_1001E6990;
  *(_BYTE *)(v46 + 16) = 13;
  swift_willThrow(v45);
  id v47 = v12;
  swift_errorRetain(v45);
  id v48 = v47;
  uint64_t v49 = swift_errorRetain(v45);
  id v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v54 = static os_log_type_t.error.getter(v50, v51, v52, v53);
  if (os_log_type_enabled(v50, v54))
  {
    uint64_t v55 = swift_slowAlloc(22LL, -1LL);
    uint64_t v56 = swift_slowAlloc(64LL, -1LL);
    uint64_t v142 = (uint64_t)a1;
    SEL v143 = (void *)v56;
    *(_DWORD *)uint64_t v55 = 136446466;
    id v57 = v48;
    uint64_t v58 = sub_100007578(&qword_1002573E0);
    uint64_t v59 = String.init<A>(describing:)(&v142, v58);
    id v61 = (_TtC18TrustedPeersHelper6Client *)v60;
    uint64_t v142 = sub_10017C4C4(v59, v60, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v55 + 4, v55 + 12);

    swift_bridgeObjectRelease(v61, v62, v63, v64, v65, v66, v67, v68);
    *(_WORD *)(v55 + 12) = 2082;
    uint64_t v142 = v45;
    swift_errorRetain(v45);
    uint64_t v69 = sub_100007578(&qword_100251D70);
    uint64_t v70 = String.init<A>(describing:)(&v142, v69);
    uint64_t v72 = (_TtC18TrustedPeersHelper6Client *)v71;
    uint64_t v142 = sub_10017C4C4(v70, v71, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v50,  v54,  "fetchViableBottles failed for %{public}s: %{public}s",  (uint8_t *)v55,  0x16u);
    swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v45, v145, v144);
  id v80 = sub_100177B68(v144[1], v144[2]);
  BOOL v81 = (void *)_convertErrorToNSError(_:)(v80);
  (*((void (**)(const void *, void, void, void *))v140 + 2))(v140, 0LL, 0LL, v81);

  swift_errorRelease();
  swift_errorRelease();
  id v131 = (_TtC18TrustedPeersHelper6Client *)v141;
LABEL_11:
  swift_release(v131, v124, v125, v126, v127, v128, v129, v130);
}

void sub_10018C128(void *a1, uint64_t a2, uint64_t a3, void (**a4)(const void *, void, void *))
{
  uint64_t v95 = a2;
  int64_t v96 = a4;
  uint64_t v97 = swift_allocObject(&unk_10023BC28, 24LL, 7LL);
  *(void *)(v97 + 16) = v96;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v7, (uint64_t)qword_100257120);
  id v8 = a1;
  id v9 = (void *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (!os_log_type_enabled((os_log_t)v9, v10))
  {

    if (a1) {
      goto LABEL_5;
    }
LABEL_7:
    unint64_t v38 = sub_100043F74();
    uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
    *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
    *(_BYTE *)(v40 + 16) = 13;
    swift_willThrow(v39);
    swift_getErrorValue(v39, v101, v100);
    id v41 = sub_100177B68(v100[1], v100[2]);
    uint64_t v42 = (void *)_convertErrorToNSError(_:)(v41);
    v96[2](v96, 0LL, v42);

    swift_errorRelease();
    swift_errorRelease();
    id v92 = (_TtC18TrustedPeersHelper6Client *)v97;
    goto LABEL_8;
  }

  uint64_t v11 = swift_slowAlloc(22LL, -1LL);
  uint64_t v12 = swift_slowAlloc(32LL, -1LL);
  uint64_t v98 = (uint64_t)a1;
  uint64_t v99 = (void *)v12;
  *(_DWORD *)uint64_t v11 = 136446466;
  id v13 = v8;
  uint64_t v14 = sub_100007578(&qword_1002573E0);
  BOOL v94 = a1;
  uint64_t v15 = String.init<A>(describing:)(&v98, v14);
  id v17 = (_TtC18TrustedPeersHelper6Client *)v16;
  uint64_t v98 = sub_10017C4C4(v15, v16, (uint64_t *)&v99);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v11 + 4, v11 + 12);

  swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  *(_WORD *)(v11 + 12) = 2050;
  uint64_t v98 = v95;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v11 + 14, v11 + 22);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  v10,  "fetchViableEscrowRecords in %{public}s from source (%{public}ld)",  (uint8_t *)v11,  0x16u);
  swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v12, -1LL, -1LL);
  swift_slowDealloc(v11, -1LL, -1LL);

  if (!v94) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v25 = *(void *)(a3 + 24);
  id v26 = v8;
  id v27 = [v26 cloudkitContainerName];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  BOOL v30 = v29;

  id v31 = [v26 octagonContextID];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  __chkstk_darwin(v35, v36);
  v93[2] = v25;
  v93[3] = v28;
  v93[4] = v30;
  v93[5] = v32;
  v93[6] = v34;
  v93[7] = v26;
  uint64_t v37 = type metadata accessor for Container();
  OS_dispatch_queue.sync<A>(execute:)(&v99, sub_100195820, v93, v37);

  swift_bridgeObjectRelease(v34, v43, v44, v45, v46, v47, v48, v49);
  swift_bridgeObjectRelease(v30, v50, v51, v52, v53, v54, v55, v56);
  id v57 = v99;
  uint64_t v58 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BC50, 32LL, 7LL);
  uint64_t v59 = (_TtC18TrustedPeersHelper6Client *)v97;
  *(void *)v58->endpoint = sub_100195E0C;
  *(void *)v58->containerMap = v59;
  uint64_t v60 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v60, 41LL, 7LL);
  swift_retain(v59);
  id v61 = v57;
  SEL v62 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v61, 0xD00000000000001ELL, 0x80000001001FAC90LL);

  id v63 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BC78, 40LL, 7LL);
  *(void *)v63->endpoint = v62;
  *(void *)v63->containerMap = sub_100196FF4;
  *(void *)v63[1]._TtCs12_SwiftObject_opaque = v58;
  swift_retain(v62);
  swift_retain(v58);
  sub_10011AEC8(v95, (uint64_t)sub_100195E18, (uint64_t)v63);
  swift_release(v59, v64, v65, v66, v67, v68, v69, v70);

  swift_release(v58, v71, v72, v73, v74, v75, v76, v77);
  swift_release(v62, v78, v79, v80, v81, v82, v83, v84);
  id v92 = v63;
LABEL_8:
  swift_release(v92, v85, v86, v87, v88, v89, v90, v91);
}

void sub_10018C5A8(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v108 = a2;
  uint64_t v111 = swift_allocObject(&unk_10023BBD8, 24LL, 7LL);
  *(void *)(v111 + 16) = a3;
  id v109 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v110 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    id v113 = (void *)v10;
    *(_DWORD *)id v9 = 136446210;
    uint64_t v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v112, v13);
    unint64_t v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v112 = sub_10017C4C4(v14, v15, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v110;
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "fetchEscrowContents in %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11)
    {
LABEL_5:
      v107[8] = a1;
      uint64_t v24 = *(void *)(v108 + 24);
      id v25 = v6;
      id v26 = objc_msgSend(v25, "cloudkitContainerName", a1);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      BOOL v29 = v28;

      id v30 = [v25 octagonContextID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      id v33 = v32;

      __chkstk_darwin(v34, v35);
      v107[2] = v24;
      v107[3] = v27;
      v107[4] = v29;
      v107[5] = v31;
      v107[6] = v33;
      v107[7] = v25;
      uint64_t v36 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v113, sub_100195820, v107, v36);

      swift_bridgeObjectRelease(v33, v75, v76, v77, v78, v79, v80, v81);
      swift_bridgeObjectRelease(v29, v82, v83, v84, v85, v86, v87, v88);
      SEL v89 = v113;
      uint64_t v90 = swift_allocObject(&unk_10023BC00, 32LL, 7LL);
      int64_t v91 = (_TtC18TrustedPeersHelper6Client *)v111;
      *(void *)(v90 + 16) = sub_100195DE0;
      *(void *)(v90 + 24) = v91;
      swift_retain(v91);
      sub_100117034((uint64_t)sub_100195DE8, v90);
      swift_release(v91, v92, v93, v94, v95, v96, v97, v98);

      id v106 = (_TtC18TrustedPeersHelper6Client *)v90;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v37 = sub_100043F74();
  uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
  *(_OWORD *)uint64_t v39 = xmmword_1001E6990;
  *(_BYTE *)(v39 + 16) = 13;
  swift_willThrow(v38);
  id v40 = v6;
  swift_errorRetain(v38);
  id v41 = v40;
  uint64_t v42 = swift_errorRetain(v38);
  SEL v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    id v113 = (void *)v49;
    *(_DWORD *)uint64_t v48 = 136446466;
    id v50 = v41;
    uint64_t v51 = sub_100007578(&qword_1002573E0);
    uint64_t v52 = String.init<A>(describing:)(&v112, v51);
    id v54 = (_TtC18TrustedPeersHelper6Client *)v53;
    uint64_t v112 = sub_10017C4C4(v52, v53, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v112 = v38;
    swift_errorRetain(v38);
    uint64_t v62 = sub_100007578(&qword_100251D70);
    uint64_t v63 = String.init<A>(describing:)(&v112, v62);
    id v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v112 = sub_10017C4C4(v63, v64, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "fetchEscrowContents failed for %{public}s: %{public}s",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v38, v115, v114);
  id v73 = sub_100177B68(v114[1], v114[2]);
  id v74 = (void *)_convertErrorToNSError(_:)(v73);
  (*((void (**)(const void *, void, void, void, void *))v109 + 2))(v109, 0LL, 0LL, 0LL, v74);

  swift_errorRelease();
  swift_errorRelease();
  id v106 = (_TtC18TrustedPeersHelper6Client *)v111;
LABEL_11:
  swift_release(v106, v99, v100, v101, v102, v103, v104, v105);
}

void sub_10018CB5C(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, const void *a6)
{
  uint64_t v166 = a3;
  uint64_t v167 = a5;
  int v165 = a4;
  uint64_t v164 = a2;
  id v170 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BAE8, 24LL, 7LL);
  *(void *)v170->endpoint = a6;
  id v168 = a6;
  _Block_copy(a6);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v8, (uint64_t)qword_100257120);
  id v9 = a1;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  id v169 = v9;
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v13;
    *(_DWORD *)id v12 = 136446210;
    uint64_t v173 = (uint64_t)a1;
    uint64_t v14 = a1;
    id v15 = v9;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    uint64_t v17 = String.init<A>(describing:)(&v173, v16);
    int64_t v19 = (_TtC18TrustedPeersHelper6Client *)v18;
    uint64_t v173 = sub_10017C4C4(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v12 + 4, v12 + 12);

    a1 = v14;
    id v9 = v169;
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Fetching policy+views for %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    if (v14) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      void v163[9] = a1;
      uint64_t v27 = *(void *)(v167 + 24);
      id v28 = v9;
      id v29 = [v28 cloudkitContainerName];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v32 = v31;

      id v33 = [v28 octagonContextID];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v36 = v35;

      __chkstk_darwin(v37, v38);
      v163[2] = v27;
      v163[3] = v30;
      v163[4] = v32;
      v163[5] = v34;
      v163[6] = v36;
      v163[7] = v28;
      uint64_t v39 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, v163, v39);

      swift_bridgeObjectRelease(v36, v85, v86, v87, v88, v89, v90, v91);
      swift_bridgeObjectRelease(v32, v92, v93, v94, v95, v96, v97, v98);
      uint64_t v99 = (void *)aBlock[0];
      id v100 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BB10, 32LL, 7LL);
      SEL v101 = v170;
      *(void *)v100->endpoint = sub_100195D9C;
      *(void *)v100->containerMap = v101;
      uint64_t v102 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v102, 41LL, 7LL);
      swift_retain(v101);
      SEL v103 = v99;
      id v104 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v103, 0xD00000000000003DLL, 0x80000001001F9780LL);

      uint64_t v105 = swift_allocObject(&unk_10023BB38, 40LL, 7LL);
      *(void *)(v105 + 16) = v104;
      *(void *)(v105 + 24) = sub_100195834;
      *(void *)(v105 + 32) = v100;
      id v169 = *(id *)&v103[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v106 = swift_allocObject(&unk_10023BB60, 57LL, 7LL);
      uint64_t v107 = v164;
      *(void *)(v106 + 16) = v103;
      *(void *)(v106 + 24) = v107;
      uint64_t v108 = v166;
      *(void *)(v106 + 32) = v166;
      *(void *)(v106 + 40) = sub_100195DA8;
      *(void *)(v106 + 4_Block_object_dispose(va, 8) = v105;
      *(_BYTE *)(v106 + 56) = v165 & 1;
      id v109 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BB88, 32LL, 7LL);
      *(void *)v109->endpoint = sub_100195DBC;
      *(void *)v109->containerMap = v106;
      aBlock[4] = (uint64_t)sub_100044B24;
      SEL v172 = v109;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023BBA0;
      id v110 = _Block_copy(aBlock);
      uint64_t v111 = v172;
      swift_bridgeObjectRetain(v108);
      swift_retain(v105);
      swift_retain(v109);
      uint64_t v112 = v103;
      swift_retain(v104);
      swift_retain(v100);
      swift_release(v111, v113, v114, v115, v116, v117, v118, v119);
      [v169 performBlockAndWait:v110];
      swift_release((_TtC18TrustedPeersHelper6Client *)v105, v120, v121, v122, v123, v124, v125, v126);
      swift_release(v104, v127, v128, v129, v130, v131, v132, v133);
      _Block_release(v110);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v109, "", 108LL, 5043LL, 33LL, 1LL);
      swift_release(v101, v135, v136, v137, v138, v139, v140, v141);

      swift_release(v100, v142, v143, v144, v145, v146, v147, v148);
      swift_release((_TtC18TrustedPeersHelper6Client *)v106, v149, v150, v151, v152, v153, v154, v155);
      swift_release(v109, v156, v157, v158, v159, v160, v161, v162);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return;
    }
  }

  unint64_t v40 = sub_100043F74();
  uint64_t v41 = swift_allocError(&type metadata for ContainerError, v40, 0LL, 0LL);
  *(_OWORD *)uint64_t v42 = xmmword_1001E6990;
  *(_BYTE *)(v42 + 16) = 13;
  swift_willThrow(v41);
  id v43 = v9;
  swift_errorRetain(v41);
  id v44 = v43;
  uint64_t v45 = swift_errorRetain(v41);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v50 = static os_log_type_t.error.getter(v46, v47, v48, v49);
  if (os_log_type_enabled(v46, v50))
  {
    uint64_t v51 = swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v52;
    *(_DWORD *)uint64_t v51 = 136446466;
    uint64_t v173 = (uint64_t)a1;
    id v53 = v44;
    uint64_t v54 = sub_100007578(&qword_1002573E0);
    uint64_t v55 = String.init<A>(describing:)(&v173, v54);
    int64_t v57 = (_TtC18TrustedPeersHelper6Client *)v56;
    uint64_t v173 = sub_10017C4C4(v55, v56, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v51 + 4, v51 + 12);

    swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    *(_WORD *)(v51 + 12) = 2082;
    uint64_t v173 = v41;
    swift_errorRetain(v41);
    uint64_t v65 = sub_100007578(&qword_100251D70);
    uint64_t v66 = String.init<A>(describing:)(&v173, v65);
    int64_t v68 = (_TtC18TrustedPeersHelper6Client *)v67;
    uint64_t v173 = sub_10017C4C4(v66, v67, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v51 + 14, v51 + 22);
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v50,  "fetchCurrentPolicy failed for %{public}s: %{public}s",  (uint8_t *)v51,  0x16u);
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v41, v175, v174);
  id v76 = sub_100177B68(v174[1], v174[2]);
  int64_t v77 = (void *)_convertErrorToNSError(_:)(v76);
  (*((void (**)(const void *, void, void, void *))v168 + 2))(v168, 0LL, 0LL, v77);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v170, v78, v79, v80, v81, v82, v83, v84);
}

void sub_10018D2DC( void *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, void (**a4)(const void *, void, void *))
{
  uint64_t v134 = a3;
  id v136 = a4;
  id v137 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BA98, 24LL, 7LL);
  *(void *)v137->endpoint = v136;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100006BAC(v7, (uint64_t)qword_100257120);
  id v9 = a1;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v10 = v9;
  uint64_t v135 = v8;
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  id v132 = a2;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    uint64_t v138 = (uint64_t)a1;
    id v139 = (void *)v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    id v15 = v10;
    uint64_t v16 = sub_100007578(&qword_1002573E0);
    id v133 = v10;
    uint64_t v17 = String.init<A>(describing:)(&v138, v16);
    int64_t v19 = (_TtC18TrustedPeersHelper6Client *)v18;
    uint64_t v138 = sub_10017C4C4(v17, v18, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v13 + 4, v13 + 12);

    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v27 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    unint64_t v28 = sub_10004CE64();
    uint64_t v29 = swift_bridgeObjectRetain(a2);
    uint64_t v30 = Set.description.getter(v29, v27, v28);
    uint64_t v32 = (_TtC18TrustedPeersHelper6Client *)v31;
    swift_bridgeObjectRelease(a2, v31, v33, v34, v35, v36, v37, v38);
    uint64_t v138 = sub_10017C4C4(v30, (unint64_t)v32, (uint64_t *)&v139);
    id v10 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v32, v39, v40, v41, v42, v43, v44, v45);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Fetching policy documents %{public}s with versions: %{public}s",  (uint8_t *)v13,  0x16u);
    swift_arrayDestroy(v14, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    id v133 = a1;
    if (a1)
    {
LABEL_5:
      uint64_t v46 = *(void *)(v134 + 24);
      id v47 = v10;
      id v48 = [v47 cloudkitContainerName];
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      uint64_t v51 = v50;

      id v52 = [v47 octagonContextID];
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v55 = v54;

      __chkstk_darwin(v56, v57);
      uint64_t v131[2] = v46;
      v131[3] = v49;
      v131[4] = v51;
      v131[5] = v53;
      v131[6] = v55;
      v131[7] = v47;
      uint64_t v58 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v139, sub_100195820, v131, v58);

      swift_bridgeObjectRelease(v55, v104, v105, v106, v107, v108, v109, v110);
      swift_bridgeObjectRelease(v51, v111, v112, v113, v114, v115, v116, v117);
      id v118 = v139;
      id v119 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BAC0, 32LL, 7LL);
      SEL v120 = v137;
      *(void *)v119->endpoint = sub_100195D94;
      *(void *)v119->containerMap = v120;
      uint64_t v121 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v121, 41LL, 7LL);
      swift_retain(v120);
      id v122 = v118;
      id v123 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v122, 0xD000000000000025LL, 0x80000001001F9750LL);

      swift_retain(v123);
      swift_retain(v119);
      sub_10016F414((uint64_t)v132, (char *)v122, v123, (uint64_t (*)(void, void))sub_100196FF4, v119);
      swift_release(v120, v124, v125, v126, v127, v128, v129, v130);

      swift_release_n(v123, 2LL);
      swift_release_n(v119, 2LL);
      return;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    id v133 = a1;
    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v59 = sub_100043F74();
  uint64_t v60 = swift_allocError(&type metadata for ContainerError, v59, 0LL, 0LL);
  *(_OWORD *)uint64_t v61 = xmmword_1001E6990;
  *(_BYTE *)(v61 + 16) = 13;
  swift_willThrow(v60);
  id v62 = v10;
  swift_errorRetain(v60);
  id v63 = v62;
  uint64_t v64 = swift_errorRetain(v60);
  uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
  os_log_type_t v69 = static os_log_type_t.error.getter(v65, v66, v67, v68);
  if (os_log_type_enabled(v65, v69))
  {
    uint64_t v70 = swift_slowAlloc(22LL, -1LL);
    uint64_t v71 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v70 = 136446466;
    uint64_t v138 = (uint64_t)v133;
    id v139 = (void *)v71;
    id v72 = v63;
    uint64_t v73 = sub_100007578(&qword_1002573E0);
    uint64_t v74 = String.init<A>(describing:)(&v138, v73);
    id v76 = (_TtC18TrustedPeersHelper6Client *)v75;
    uint64_t v138 = sub_10017C4C4(v74, v75, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v70 + 4, v70 + 12);

    swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
    *(_WORD *)(v70 + 12) = 2082;
    uint64_t v138 = v60;
    swift_errorRetain(v60);
    uint64_t v84 = sub_100007578(&qword_100251D70);
    uint64_t v85 = String.init<A>(describing:)(&v138, v84);
    int64_t v87 = (_TtC18TrustedPeersHelper6Client *)v86;
    uint64_t v138 = sub_10017C4C4(v85, v86, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v70 + 14, v70 + 22);
    swift_bridgeObjectRelease(v87, v88, v89, v90, v91, v92, v93, v94);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v65,  v69,  "fetchPolicyDocuments failed for %{public}s: %{public}s",  (uint8_t *)v70,  0x16u);
    swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v60, v141, v140);
  id v95 = sub_100177B68(v140[1], v140[2]);
  id v96 = (void *)_convertErrorToNSError(_:)(v95);
  v136[2](v136, 0LL, v96);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v137, v97, v98, v99, v100, v101, v102, v103);
}

void sub_10018D998( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(const void *, void, void *))
{
  uint64_t v148 = a4;
  uint64_t v149 = a2;
  RecoverableTLKSharesuint64_t Request = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  __chkstk_darwin(RecoverableTLKSharesRequest, v8);
  id v147 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_allocObject(&unk_10023BA20, 24LL, 7LL);
  id v151 = a5;
  id v152 = (_TtC18TrustedPeersHelper6Client *)v10;
  *(void *)(v10 + 16) = a5;
  _Block_copy(a5);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_100006BAC(v11, (uint64_t)qword_100257120);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v13 = a1;
  uint64_t v150 = v12;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v17 = swift_slowAlloc(64LL, -1LL);
    uint64_t v155 = v17;
    *(_DWORD *)uint64_t v16 = 136446466;
    id v153 = a1;
    unint64_t v18 = v13;
    uint64_t v19 = sub_100007578(&qword_1002573E0);
    uint64_t v20 = String.init<A>(describing:)(&v153, v19);
    id v21 = v13;
    uint64_t v22 = a3;
    id v24 = (_TtC18TrustedPeersHelper6Client *)v23;
    id v153 = (char *)sub_10017C4C4(v20, v23, &v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v16 + 4, v16 + 12);

    BOOL v25 = v24;
    a3 = v22;
    uint64_t v13 = v21;
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
    *(_WORD *)(v16 + 12) = 2082;
    id v153 = (char *)v149;
    uint64_t v154 = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v33 = sub_100007578((uint64_t *)&unk_100256C60);
    uint64_t v34 = String.init<A>(describing:)(&v153, v33);
    id v36 = (_TtC18TrustedPeersHelper6Client *)v35;
    id v153 = (char *)sub_10017C4C4(v34, v35, &v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Fetching recoverable TLKShares %{public}s with peerID filter: %{public}s",  (uint8_t *)v16,  0x16u);
    swift_arrayDestroy(v17, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      uint64_t v144 = a3;
      id v145 = a1;
      uint64_t v44 = *(void *)(v148 + 24);
      BOOL v45 = v13;
      id v46 = [v45 cloudkitContainerName];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v49 = v48;

      id v50 = [v45 octagonContextID];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      uint64_t v53 = v52;

      __chkstk_darwin(v54, v55);
      *(&v143 - 6) = v44;
      *(&v143 - 5) = v47;
      *(&v143 - 4) = (uint64_t)v49;
      *(&v143 - 3) = v51;
      *(&v143 - 2) = (uint64_t)v53;
      *(&v143 - 1) = (uint64_t)v45;
      uint64_t v56 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v153, sub_100195820, &v143 - 8, v56);

      swift_bridgeObjectRelease(v53, v95, v96, v97, v98, v99, v100, v101);
      swift_bridgeObjectRelease(v49, v102, v103, v104, v105, v106, v107, v108);
      BOOL v109 = v153;
      uint64_t v110 = swift_allocObject(&unk_10023BA48, 32LL, 7LL);
      SEL v111 = v152;
      *(void *)(v110 + 16) = sub_100196DF8;
      *(void *)(v110 + 24) = v111;
      __chkstk_darwin(v110, v112);
      uint64_t v113 = v144;
      *(&v143 - 2) = v149;
      *(&v143 - 1) = v113;
      uint64_t v114 = sub_1000077B8( &qword_100252830,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
      swift_retain(v111);
      uint64_t v115 = (uint64_t)v147;
      static Message.with(_:)(sub_100195D74, &v143 - 4, RecoverableTLKSharesRequest, v114);
      uint64_t v116 = *(void *)&v109[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v117 = *(void *)&v109[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v109[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v116);
      id v118 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023BA70, 32LL, 7LL);
      *(void *)v118->endpoint = sub_100196FF4;
      *(void *)v118->containerMap = v110;
      uint64_t v119 = *(void *)(v117 + 16);
      SEL v120 = *(void (**)(void, void, void, void, void))(v119 + 72);
      swift_retain(v110);
      v120(v115, sub_100195D8C, v118, v116, v119);
      swift_release(v118, v121, v122, v123, v124, v125, v126, v127);
      sub_1000415CC(v115, type metadata accessor for FetchRecoverableTLKSharesRequest);
      swift_release(v111, v128, v129, v130, v131, v132, v133, v134);

      SEL v142 = (_TtC18TrustedPeersHelper6Client *)v110;
      goto LABEL_11;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v57 = sub_100043F74();
  uint64_t v58 = swift_allocError(&type metadata for ContainerError, v57, 0LL, 0LL);
  *(_OWORD *)uint64_t v59 = xmmword_1001E6990;
  *(_BYTE *)(v59 + 16) = 13;
  swift_willThrow(v58);
  uint64_t v60 = v13;
  swift_errorRetain(v58);
  uint64_t v61 = v60;
  uint64_t v62 = swift_errorRetain(v58);
  id v63 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v67 = static os_log_type_t.error.getter(v63, v64, v65, v66);
  if (os_log_type_enabled(v63, v67))
  {
    uint64_t v68 = swift_slowAlloc(22LL, -1LL);
    uint64_t v69 = swift_slowAlloc(64LL, -1LL);
    id v153 = (char *)v69;
    *(_DWORD *)uint64_t v68 = 136446466;
    uint64_t v155 = (uint64_t)a1;
    uint64_t v70 = v61;
    uint64_t v71 = sub_100007578(&qword_1002573E0);
    uint64_t v72 = String.init<A>(describing:)(&v155, v71);
    uint64_t v74 = (_TtC18TrustedPeersHelper6Client *)v73;
    uint64_t v155 = sub_10017C4C4(v72, v73, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v68 + 4, v68 + 12);

    swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
    *(_WORD *)(v68 + 12) = 2082;
    uint64_t v155 = v58;
    swift_errorRetain(v58);
    uint64_t v82 = sub_100007578(&qword_100251D70);
    uint64_t v83 = String.init<A>(describing:)(&v155, v82);
    uint64_t v85 = (_TtC18TrustedPeersHelper6Client *)v84;
    uint64_t v155 = sub_10017C4C4(v83, v84, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v68 + 14, v68 + 22);
    swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v63,  v67,  "fetchRecoverableTLKShares failed for %{public}s: %{public}s",  (uint8_t *)v68,  0x16u);
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v68, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v58, v157, v156);
  id v93 = sub_100177B68(v156[1], v156[2]);
  BOOL v94 = (void *)_convertErrorToNSError(_:)(v93);
  v151[2](v151, 0LL, v94);

  swift_errorRelease();
  swift_errorRelease();
  SEL v142 = v152;
LABEL_11:
  swift_release(v142, v135, v136, v137, v138, v139, v140, v141);
}

void sub_10018E0E4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void (**a8)(const void *, void, void *))
{
  uint64_t v157 = a5;
  uint64_t v158 = a6;
  uint64_t v155 = a4;
  uint64_t v156 = a3;
  uint64_t v154 = a2;
  uint64_t v11 = swift_allocObject(&unk_10023B980, 24LL, 7LL);
  *(void *)(v11 + 16) = a8;
  id v160 = a8;
  _Block_copy(a8);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v153 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_100006BAC(v153, (uint64_t)qword_100257120);
  id v13 = a1;
  uint64_t v159 = v12;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  id v161 = (_TtC18TrustedPeersHelper6Client *)v11;
  if (os_log_type_enabled(v14, v15))
  {
    id v152 = a7;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v162 = (uint64_t)a1;
    id v163 = (void *)v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    id v18 = v13;
    uint64_t v19 = sub_100007578(&qword_1002573E0);
    uint64_t v20 = String.init<A>(describing:)(&v162, v19);
    uint64_t v22 = (_TtC18TrustedPeersHelper6Client *)v21;
    uint64_t v162 = sub_10017C4C4(v20, v21, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v16 + 4, v16 + 12);

    a7 = v152;
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SetRecoveryKey for %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
LABEL_7:
    unint64_t v44 = sub_100043F74();
    uint64_t v45 = swift_allocError(&type metadata for ContainerError, v44, 0LL, 0LL);
    *(_OWORD *)uint64_t v46 = xmmword_1001E6990;
    *(_BYTE *)(v46 + 16) = 13;
    swift_willThrow(v45);
    id v47 = v13;
    swift_errorRetain(v45);
    id v48 = v47;
    uint64_t v49 = swift_errorRetain(v45);
    id v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v54 = static os_log_type_t.error.getter(v50, v51, v52, v53);
    if (os_log_type_enabled(v50, v54))
    {
      uint64_t v55 = swift_slowAlloc(22LL, -1LL);
      uint64_t v56 = swift_slowAlloc(64LL, -1LL);
      uint64_t v162 = (uint64_t)a1;
      id v163 = (void *)v56;
      *(_DWORD *)uint64_t v55 = 136446466;
      id v57 = v48;
      uint64_t v58 = sub_100007578(&qword_1002573E0);
      uint64_t v59 = String.init<A>(describing:)(&v162, v58);
      uint64_t v61 = (_TtC18TrustedPeersHelper6Client *)v60;
      uint64_t v162 = sub_10017C4C4(v59, v60, (uint64_t *)&v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v55 + 4, v55 + 12);

      swift_bridgeObjectRelease(v61, v62, v63, v64, v65, v66, v67, v68);
      *(_WORD *)(v55 + 12) = 2082;
      uint64_t v162 = v45;
      swift_errorRetain(v45);
      uint64_t v69 = sub_100007578(&qword_100251D70);
      uint64_t v70 = String.init<A>(describing:)(&v162, v69);
      uint64_t v72 = (_TtC18TrustedPeersHelper6Client *)v71;
      uint64_t v162 = sub_10017C4C4(v70, v71, (uint64_t *)&v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v54,  "SetRecoveryKey failed for %{public}s: %{public}s",  (uint8_t *)v55,  0x16u);
      swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    swift_getErrorValue(v45, v165, v164);
    id v80 = sub_100177B68(v164[1], v164[2]);
    BOOL v81 = (void *)_convertErrorToNSError(_:)(v80);
    v160[2](v160, 0LL, v81);

    swift_errorRelease();
    swift_errorRelease();
    id v89 = v161;
    goto LABEL_16;
  }

  if (!a1) {
    goto LABEL_7;
  }
LABEL_5:
  v151[8] = v13;
  id v152 = a1;
  uint64_t v30 = a7[3];
  id v31 = v13;
  id v32 = objc_msgSend(v31, "cloudkitContainerName", v13, a1);
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  unint64_t v35 = v34;

  id v36 = [v31 octagonContextID];
  SEL v37 = a7;
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  id v40 = v39;

  __chkstk_darwin(v41, v42);
  v151[2] = v30;
  void v151[3] = v33;
  v151[4] = v35;
  v151[5] = v38;
  v151[6] = v40;
  v151[7] = v31;
  uint64_t v43 = type metadata accessor for Container();
  OS_dispatch_queue.sync<A>(execute:)(&v163, sub_100195820, v151, v43);

  swift_bridgeObjectRelease(v40, v90, v91, v92, v93, v94, v95, v96);
  swift_bridgeObjectRelease(v35, v97, v98, v99, v100, v101, v102, v103);
  int64_t v104 = v163;
  uint64_t v105 = swift_allocObject(&unk_10023B9A8, 48LL, 7LL);
  *(void *)(v105 + 16) = v37;
  *(void *)(v105 + 24) = v104;
  id v106 = v161;
  *(void *)(v105 + 32) = sub_100195CA0;
  *(void *)(v105 + 40) = v106;
  uint64_t v107 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v107, 41LL, 7LL);
  id v108 = v104;
  swift_retain(v37);
  swift_retain(v106);
  BOOL v109 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v108, 0xD000000000000030LL, 0x80000001001F9710LL);

  uint64_t v110 = swift_allocObject(&unk_10023B9D0, 40LL, 7LL);
  *(void *)(v110 + 16) = v109;
  *(void *)(v110 + 24) = sub_100195CB4;
  *(void *)(v110 + 32) = v105;
  uint64_t v111 = qword_100250EB8;
  swift_retain(v109);
  swift_retain(v105);
  if (v111 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v112 = sub_100006BAC(v153, (uint64_t)qword_1002567D0);
  uint64_t v113 = (os_log_s *)Logger.logObject.getter(v112);
  os_log_type_t v114 = static os_log_type_t.info.getter(v113);
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v115 = 0;
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "beginning a setRecoveryKey", v115, 2u);
    swift_slowDealloc(v115, -1LL, -1LL);
  }

  uint64_t v116 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B9F8, 80LL, 7LL);
  *(void *)v116->endpoint = sub_100195CF4;
  *(void *)v116->containerMap = v110;
  uint64_t v117 = v154;
  *(void *)v116[1]._TtCs12_SwiftObject_opaque = v108;
  *(void *)&v116[1]._TtCs12_SwiftObject_opaque[8] = v117;
  uint64_t v118 = v155;
  uint64_t v119 = v156;
  *(void *)v116[1].endpoint = v156;
  *(void *)v116[1].containerMap = v118;
  uint64_t v121 = v157;
  uint64_t v120 = v158;
  *(void *)v116[2]._TtCs12_SwiftObject_opaque = v157;
  *(void *)&v116[2]._TtCs12_SwiftObject_opaque[8] = v120;
  id v122 = v108;
  swift_retain(v110);
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v120);
  sub_100137F18(0, (uint64_t)sub_100195D44, (uint64_t)v116);
  swift_release(v106, v123, v124, v125, v126, v127, v128, v129);

  swift_release((_TtC18TrustedPeersHelper6Client *)v105, v130, v131, v132, v133, v134, v135, v136);
  swift_release(v109, v137, v138, v139, v140, v141, v142, v143);
  swift_release((_TtC18TrustedPeersHelper6Client *)v110, v144, v145, v146, v147, v148, v149, v150);
  id v89 = v116;
LABEL_16:
  swift_release(v89, v82, v83, v84, v85, v86, v87, v88);
}

void sub_10018E84C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, const void *a10)
{
  uint64_t v126 = a6;
  uint64_t v127 = a7;
  uint64_t v124 = a4;
  uint64_t v125 = a5;
  uint64_t v122 = a2;
  uint64_t v123 = a3;
  id v129 = a10;
  uint64_t v130 = swift_allocObject(&unk_10023B930, 24LL, 7LL);
  *(void *)(v130 + 16) = a10;
  _Block_copy(a10);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_100006BAC(v12, (uint64_t)qword_100257120);
  id v14 = a1;
  uint64_t v128 = v13;
  os_log_type_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter(v15);
  id v131 = v14;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v132 = (uint64_t)a1;
    id v133 = (void *)v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    id v19 = v14;
    uint64_t v20 = sub_100007578(&qword_1002573E0);
    uint64_t v21 = String.init<A>(describing:)(&v132, v20);
    int v22 = a8;
    SEL v23 = a1;
    int64_t v25 = (_TtC18TrustedPeersHelper6Client *)v24;
    uint64_t v132 = sub_10017C4C4(v21, v24, (uint64_t *)&v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v17 + 4, v17 + 12);

    id v14 = v131;
    id v26 = v25;
    a1 = v23;
    a8 = v22;
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "CreateCustodianRecoveryKey for %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      uint64_t v120 = a9;
      uint64_t v121 = a1;
      uint64_t v34 = *(void *)(a9 + 24);
      id v35 = v14;
      id v36 = [v35 cloudkitContainerName];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      int64_t v39 = v38;

      id v40 = [v35 octagonContextID];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      uint64_t v43 = v42;

      __chkstk_darwin(v44, v45);
      v119[2] = v34;
      void v119[3] = v37;
      v119[4] = v39;
      v119[5] = v41;
      v119[6] = v43;
      v119[7] = v35;
      uint64_t v46 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v133, sub_100195820, v119, v46);

      swift_bridgeObjectRelease(v43, v85, v86, v87, v88, v89, v90, v91);
      swift_bridgeObjectRelease(v39, v92, v93, v94, v95, v96, v97, v98);
      int64_t v99 = v133;
      id v100 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B958, 48LL, 7LL);
      uint64_t v101 = v120;
      *(void *)v100->endpoint = v120;
      *(void *)v100->containerMap = v99;
      BOOL v102 = (_TtC18TrustedPeersHelper6Client *)v130;
      *(void *)v100[1]._TtCs12_SwiftObject_opaque = sub_100195C2C;
      *(void *)&v100[1]._TtCs12_SwiftObject_opaque[8] = v102;
      swift_retain(v101);
      id v103 = v99;
      swift_retain(v102);
      sub_100103CCC(v122, v123, v124, v125, v126, v127, a8, (uint64_t)sub_100195C60, (uint64_t)v100);
      swift_release(v102, v104, v105, v106, v107, v108, v109, v110);

      uint64_t v118 = v100;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v47 = sub_100043F74();
  uint64_t v48 = swift_allocError(&type metadata for ContainerError, v47, 0LL, 0LL);
  *(_OWORD *)uint64_t v49 = xmmword_1001E6990;
  *(_BYTE *)(v49 + 16) = 13;
  swift_willThrow(v48);
  id v50 = v131;
  swift_errorRetain(v48);
  id v51 = v50;
  uint64_t v52 = swift_errorRetain(v48);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v57 = static os_log_type_t.error.getter(v53, v54, v55, v56);
  if (os_log_type_enabled(v53, v57))
  {
    uint64_t v58 = swift_slowAlloc(22LL, -1LL);
    uint64_t v59 = swift_slowAlloc(64LL, -1LL);
    uint64_t v132 = (uint64_t)a1;
    id v133 = (void *)v59;
    *(_DWORD *)uint64_t v58 = 136446466;
    id v60 = v51;
    uint64_t v61 = sub_100007578(&qword_1002573E0);
    uint64_t v62 = String.init<A>(describing:)(&v132, v61);
    int64_t v64 = (_TtC18TrustedPeersHelper6Client *)v63;
    uint64_t v132 = sub_10017C4C4(v62, v63, (uint64_t *)&v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v58 + 4, v58 + 12);

    swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    *(_WORD *)(v58 + 12) = 2082;
    uint64_t v132 = v48;
    swift_errorRetain(v48);
    uint64_t v72 = sub_100007578(&qword_100251D70);
    uint64_t v73 = String.init<A>(describing:)(&v132, v72);
    int64_t v75 = (_TtC18TrustedPeersHelper6Client *)v74;
    uint64_t v132 = sub_10017C4C4(v73, v74, (uint64_t *)&v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v53,  v57,  "CreateCustodianRecoveryKey failed for %{public}s: %{public}s",  (uint8_t *)v58,  0x16u);
    swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v48, v135, v134);
  id v83 = sub_100177B68(v134[1], v134[2]);
  unint64_t v84 = (void *)_convertErrorToNSError(_:)(v83);
  (*((void (**)(const void *, void, void, void *))v129 + 2))(v129, 0LL, 0LL, v84);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v118 = (_TtC18TrustedPeersHelper6Client *)v130;
LABEL_11:
  swift_release(v118, v111, v112, v113, v114, v115, v116, v117);
}

void sub_10018EE2C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v177 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v179 = *(void *)(v7 - 8);
  uint64_t v180 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v176 = v9;
  id v178 = (char *)v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B840, 24LL, 7LL);
  id v183 = a4;
  id v184 = v10;
  *(void *)v10->endpoint = a4;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_100006BAC(v11, (uint64_t)qword_100257120);
  id v13 = a1;
  uint64_t v182 = v12;
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v181 = a3;
  if (v16)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v187 = (uint64_t)a1;
    id v19 = v13;
    uint64_t v20 = sub_100007578(&qword_1002573E0);
    uint64_t v21 = String.init<A>(describing:)(&v187, v20);
    id v22 = v13;
    SEL v23 = a1;
    int64_t v25 = (_TtC18TrustedPeersHelper6Client *)v24;
    uint64_t v187 = sub_10017C4C4(v21, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v17 + 4, v17 + 12);

    id v26 = v25;
    a1 = v23;
    id v13 = v22;
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RemoveCustodianRecoveryKey for %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v34 = v17;
    a3 = v181;
    swift_slowDealloc(v34, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      v175[1] = a1;
      uint64_t v35 = *(void *)(a3 + 24);
      id v36 = v13;
      id v37 = [v36 cloudkitContainerName];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      id v40 = v39;

      id v41 = [v36 octagonContextID];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      uint64_t v44 = v43;

      __chkstk_darwin(v45, v46);
      v175[-6] = v35;
      v175[-5] = v38;
      v175[-4] = v40;
      v175[-3] = v42;
      v175[-2] = v44;
      v175[-1] = v36;
      uint64_t v47 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, &v175[-8], v47);

      swift_bridgeObjectRelease(v44, v93, v94, v95, v96, v97, v98, v99);
      swift_bridgeObjectRelease(v40, v100, v101, v102, v103, v104, v105, v106);
      id v107 = (void *)aBlock[0];
      uint64_t v108 = swift_allocObject(&unk_10023B868, 48LL, 7LL);
      uint64_t v109 = v181;
      *(void *)(v108 + 16) = v181;
      *(void *)(v108 + 24) = v107;
      id v110 = v184;
      *(void *)(v108 + 32) = sub_100196E00;
      *(void *)(v108 + 40) = v110;
      uint64_t v111 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v111, 41LL, 7LL);
      swift_retain(v109);
      uint64_t v112 = v107;
      swift_retain(v110);
      uint64_t v113 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v112, 0xD000000000000027LL, 0x80000001001F9680LL);
      uint64_t v114 = swift_allocObject(&unk_10023B890, 40LL, 7LL);
      *(void *)(v114 + 16) = v113;
      *(void *)(v114 + 24) = sub_100195B28;
      *(void *)(v114 + 32) = v108;
      id v183 = *(id *)&v112[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v115 = v178;
      uint64_t v116 = v179;
      uint64_t v117 = v180;
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v178, v177, v180);
      uint64_t v118 = *(unsigned __int8 *)(v116 + 80);
      uint64_t v119 = (v118 + 40) & ~v118;
      uint64_t v120 = swift_allocObject(&unk_10023B8B8, v119 + v176, v118 | 7);
      *(void *)(v120 + 16) = v112;
      *(void *)(v120 + 24) = sub_100195B60;
      *(void *)(v120 + 32) = v114;
      (*(void (**)(uint64_t, char *, uint64_t))(v116 + 32))(v120 + v119, v115, v117);
      uint64_t v121 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B8E0, 32LL, 7LL);
      *(void *)v121->endpoint = sub_100195BE8;
      *(void *)v121->containerMap = v120;
      aBlock[4] = (uint64_t)sub_100044B24;
      uint64_t v186 = v121;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023B8F8;
      uint64_t v122 = _Block_copy(aBlock);
      uint64_t v123 = v186;
      uint64_t v124 = v112;
      swift_retain(v113);
      swift_retain(v108);
      swift_retain(v114);
      swift_retain(v121);
      swift_release(v123, v125, v126, v127, v128, v129, v130, v131);
      [v183 performBlockAndWait:v122];
      swift_release((_TtC18TrustedPeersHelper6Client *)v114, v132, v133, v134, v135, v136, v137, v138);
      swift_release(v113, v139, v140, v141, v142, v143, v144, v145);
      _Block_release(v122);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v121, "", 108LL, 3591LL, 33LL, 1LL);
      swift_release(v110, v147, v148, v149, v150, v151, v152, v153);

      swift_release((_TtC18TrustedPeersHelper6Client *)v108, v154, v155, v156, v157, v158, v159, v160);
      swift_release((_TtC18TrustedPeersHelper6Client *)v120, v161, v162, v163, v164, v165, v166, v167);
      swift_release(v121, v168, v169, v170, v171, v172, v173, v174);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return;
    }
  }

  unint64_t v48 = sub_100043F74();
  uint64_t v49 = swift_allocError(&type metadata for ContainerError, v48, 0LL, 0LL);
  *(_OWORD *)uint64_t v50 = xmmword_1001E6990;
  *(_BYTE *)(v50 + 16) = 13;
  swift_willThrow(v49);
  id v51 = v13;
  swift_errorRetain(v49);
  id v52 = v51;
  uint64_t v53 = swift_errorRetain(v49);
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v58 = static os_log_type_t.error.getter(v54, v55, v56, v57);
  if (os_log_type_enabled(v54, v58))
  {
    uint64_t v59 = swift_slowAlloc(22LL, -1LL);
    uint64_t v60 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v60;
    *(_DWORD *)uint64_t v59 = 136446466;
    uint64_t v187 = (uint64_t)a1;
    id v61 = v52;
    uint64_t v62 = sub_100007578(&qword_1002573E0);
    uint64_t v63 = String.init<A>(describing:)(&v187, v62);
    SEL v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v187 = sub_10017C4C4(v63, v64, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v59 + 4, v59 + 12);

    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    *(_WORD *)(v59 + 12) = 2082;
    uint64_t v187 = v49;
    swift_errorRetain(v49);
    uint64_t v73 = sub_100007578(&qword_100251D70);
    uint64_t v74 = String.init<A>(describing:)(&v187, v73);
    SEL v76 = (_TtC18TrustedPeersHelper6Client *)v75;
    uint64_t v187 = sub_10017C4C4(v74, v75, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v59 + 14, v59 + 22);
    swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v54,  v58,  "RemoveCustodianRecoveryKey failed for %{public}s: %{public}s",  (uint8_t *)v59,  0x16u);
    swift_arrayDestroy(v60, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v49, v189, v188);
  id v84 = sub_100177B68(v188[1], v188[2]);
  SEL v85 = (void *)_convertErrorToNSError(_:)(v84);
  (*((void (**)(id, void *))v183 + 2))(v183, v85);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v184, v86, v87, v88, v89, v90, v91, v92);
}

void sub_10018F60C(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v178 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v180 = *(void *)(v7 - 8);
  uint64_t v181 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v177 = v9;
  uint64_t v179 = (char *)v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B750, 24LL, 7LL);
  id v183 = a4;
  id v184 = v10;
  *(void *)v10->endpoint = a4;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_100006BAC(v11, (uint64_t)qword_100257120);
  id v13 = a1;
  uint64_t v182 = v12;
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    BOOL v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v17;
    *(_DWORD *)BOOL v16 = 136446210;
    uint64_t v187 = (uint64_t)a1;
    id v18 = v13;
    uint64_t v176 = a3;
    id v19 = a1;
    id v20 = v18;
    uint64_t v21 = sub_100007578(&qword_1002573E0);
    uint64_t v22 = String.init<A>(describing:)(&v187, v21);
    id v23 = v13;
    int64_t v25 = (_TtC18TrustedPeersHelper6Client *)v24;
    uint64_t v187 = sub_10017C4C4(v22, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v16 + 4, v16 + 12);

    a1 = v19;
    a3 = v176;
    id v26 = v25;
    id v13 = v23;
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "FindCustodianRecoveryKey for %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
  }

  else
  {

    if (a1)
    {
LABEL_5:
      uint64_t v176 = a1;
      uint64_t v34 = a3[3];
      v175[1] = v13;
      id v35 = v13;
      id v36 = [v35 cloudkitContainerName];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      int64_t v39 = v38;

      id v40 = [v35 octagonContextID];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      uint64_t v43 = v42;

      __chkstk_darwin(v44, v45);
      v175[-6] = v34;
      v175[-5] = v37;
      v175[-4] = v39;
      v175[-3] = v41;
      v175[-2] = v43;
      v175[-1] = v35;
      uint64_t v46 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100195820, &v175[-8], v46);

      swift_bridgeObjectRelease(v43, v92, v93, v94, v95, v96, v97, v98);
      swift_bridgeObjectRelease(v39, v99, v100, v101, v102, v103, v104, v105);
      BOOL v106 = (void *)aBlock[0];
      uint64_t v107 = swift_allocObject(&unk_10023B778, 48LL, 7LL);
      *(void *)(v107 + 16) = a3;
      *(void *)(v107 + 24) = v106;
      uint64_t v108 = v184;
      *(void *)(v107 + 32) = sub_100196DF4;
      *(void *)(v107 + 40) = v108;
      uint64_t v109 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v109, 41LL, 7LL);
      swift_retain(a3);
      id v110 = v106;
      swift_retain(v108);
      uint64_t v111 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v110, 0xD000000000000025LL, 0x80000001001F9650LL);
      uint64_t v112 = swift_allocObject(&unk_10023B7A0, 40LL, 7LL);
      *(void *)(v112 + 16) = v111;
      *(void *)(v112 + 24) = sub_1001959D4;
      *(void *)(v112 + 32) = v107;
      id v183 = *(id *)&v110[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
      uint64_t v114 = v179;
      uint64_t v113 = v180;
      uint64_t v115 = v181;
      (*(void (**)(char *, uint64_t, uint64_t))(v180 + 16))(v179, v178, v181);
      uint64_t v116 = *(unsigned __int8 *)(v113 + 80);
      uint64_t v117 = (v116 + 24) & ~v116;
      unint64_t v118 = (v177 + v117 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v119 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B7C8, v118 + 16, v116 | 7);
      *(void *)v119->endpoint = v110;
      (*(void (**)(unsigned __int8 *, char *, uint64_t))(v113 + 32))( &v119->_TtCs12_SwiftObject_opaque[v117],  v114,  v115);
      uint64_t v120 = (uint64_t (**)(uint64_t, uint64_t))&v119->_TtCs12_SwiftObject_opaque[v118];
      *uint64_t v120 = sub_100195A0C;
      v120[1] = (uint64_t (*)(uint64_t, uint64_t))v112;
      uint64_t v121 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B7F0, 32LL, 7LL);
      *(void *)v121->endpoint = sub_100195AAC;
      *(void *)v121->containerMap = v119;
      aBlock[4] = (uint64_t)sub_100044980;
      uint64_t v186 = v121;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000DC9F8;
      aBlock[3] = (uint64_t)&unk_10023B808;
      uint64_t v122 = _Block_copy(aBlock);
      uint64_t v123 = v186;
      uint64_t v124 = v110;
      swift_retain(v111);
      swift_retain(v107);
      swift_retain(v112);
      swift_retain(v121);
      swift_release(v123, v125, v126, v127, v128, v129, v130, v131);
      [v183 performBlockAndWait:v122];
      swift_release((_TtC18TrustedPeersHelper6Client *)v112, v132, v133, v134, v135, v136, v137, v138);
      swift_release(v111, v139, v140, v141, v142, v143, v144, v145);
      _Block_release(v122);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v121, "", 108LL, 3638LL, 33LL, 1LL);
      swift_release(v184, v147, v148, v149, v150, v151, v152, v153);

      swift_release((_TtC18TrustedPeersHelper6Client *)v107, v154, v155, v156, v157, v158, v159, v160);
      swift_release(v119, v161, v162, v163, v164, v165, v166, v167);
      swift_release(v121, v168, v169, v170, v171, v172, v173, v174);
      if ((isEscapingClosureAtFileLocation & 1) != 0) {
        __break(1u);
      }
      return;
    }
  }

  unint64_t v47 = sub_100043F74();
  uint64_t v48 = swift_allocError(&type metadata for ContainerError, v47, 0LL, 0LL);
  *(_OWORD *)uint64_t v49 = xmmword_1001E6990;
  *(_BYTE *)(v49 + 16) = 13;
  swift_willThrow(v48);
  id v50 = v13;
  swift_errorRetain(v48);
  id v51 = v50;
  uint64_t v52 = swift_errorRetain(v48);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v57 = static os_log_type_t.error.getter(v53, v54, v55, v56);
  if (os_log_type_enabled(v53, v57))
  {
    uint64_t v58 = swift_slowAlloc(22LL, -1LL);
    uint64_t v59 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v59;
    *(_DWORD *)uint64_t v58 = 136446466;
    uint64_t v187 = (uint64_t)a1;
    id v60 = v51;
    uint64_t v61 = sub_100007578(&qword_1002573E0);
    uint64_t v62 = String.init<A>(describing:)(&v187, v61);
    unint64_t v64 = (_TtC18TrustedPeersHelper6Client *)v63;
    uint64_t v187 = sub_10017C4C4(v62, v63, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v58 + 4, v58 + 12);

    swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    *(_WORD *)(v58 + 12) = 2082;
    uint64_t v187 = v48;
    swift_errorRetain(v48);
    uint64_t v72 = sub_100007578(&qword_100251D70);
    uint64_t v73 = String.init<A>(describing:)(&v187, v72);
    unint64_t v75 = (_TtC18TrustedPeersHelper6Client *)v74;
    uint64_t v187 = sub_10017C4C4(v73, v74, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v53,  v57,  "FindCustodianRecoveryKey failed for %{public}s: %{public}s",  (uint8_t *)v58,  0x16u);
    swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v48, v189, v188);
  id v83 = sub_100177B68(v188[1], v188[2]);
  id v84 = (void *)_convertErrorToNSError(_:)(v83);
  (*((void (**)(id, void, void *))v183 + 2))(v183, 0LL, v84);

  swift_errorRelease();
  swift_errorRelease();
  swift_release(v184, v85, v86, v87, v88, v89, v90, v91);
}

void sub_10018FE04( void *a1, int a2, int a3, _TtC18TrustedPeersHelper6Client *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(const void *, void, void *))
{
  uint64_t v121 = a7;
  uint64_t v122 = a8;
  uint64_t v119 = a5;
  uint64_t v120 = a6;
  unint64_t v118 = a4;
  uint64_t v124 = a10;
  uint64_t v125 = swift_allocObject(&unk_10023B700, 24LL, 7LL);
  *(void *)(v125 + 16) = a10;
  _Block_copy(a10);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_100006BAC(v13, (uint64_t)qword_100257120);
  id v15 = a1;
  uint64_t v123 = v14;
  BOOL v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  int v116 = a2;
  int v117 = a3;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(24LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    id v127 = (void *)v19;
    *(_DWORD *)uint64_t v18 = 67109634;
    LODWORD(v126) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 4, v18 + 4, v18 + 8);
    *(_WORD *)(v18 + _Block_object_dispose(va, 8) = 1024;
    LODWORD(v126) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 4, v18 + 10, v18 + 14);
    *(_WORD *)(v18 + 14) = 2082;
    uint64_t v126 = (uint64_t)a1;
    id v20 = v15;
    uint64_t v21 = sub_100007578(&qword_1002573E0);
    uint64_t v22 = String.init<A>(describing:)(&v126, v21);
    unint64_t v24 = (_TtC18TrustedPeersHelper6Client *)v23;
    uint64_t v126 = sub_10017C4C4(v22, v23, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v18 + 16, v18 + 24);

    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Health Check! requiring escrow check? %{BOOL}d, %{BOOL}d for %{public}s",  (uint8_t *)v18,  0x18u);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      v115[9] = a1;
      uint64_t v32 = *(void *)(a9 + 24);
      id v33 = v15;
      id v34 = [v33 cloudkitContainerName];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      id v38 = [v33 octagonContextID];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      __chkstk_darwin(v42, v43);
      v115[2] = v32;
      v115[3] = v35;
      v115[4] = v37;
      v115[5] = v39;
      v115[6] = v41;
      v115[7] = v33;
      uint64_t v44 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v127, sub_100195820, v115, v44);

      swift_bridgeObjectRelease(v41, v83, v84, v85, v86, v87, v88, v89);
      swift_bridgeObjectRelease(v37, v90, v91, v92, v93, v94, v95, v96);
      BOOL v97 = v127;
      uint64_t v98 = swift_allocObject(&unk_10023B728, 32LL, 7LL);
      SEL v99 = (_TtC18TrustedPeersHelper6Client *)v125;
      *(void *)(v98 + 16) = sub_100196DF4;
      *(void *)(v98 + 24) = v99;
      swift_retain(v99);
      sub_10012A700(v116 & 1, v117 & 1, v118, v119, v120, v121, v122, (uint64_t)sub_100196FF4, v98);
      swift_release(v99, v100, v101, v102, v103, v104, v105, v106);

      uint64_t v114 = (_TtC18TrustedPeersHelper6Client *)v98;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v45 = sub_100043F74();
  uint64_t v46 = swift_allocError(&type metadata for ContainerError, v45, 0LL, 0LL);
  *(_OWORD *)uint64_t v47 = xmmword_1001E6990;
  *(_BYTE *)(v47 + 16) = 13;
  swift_willThrow(v46);
  id v48 = v15;
  swift_errorRetain(v46);
  id v49 = v48;
  uint64_t v50 = swift_errorRetain(v46);
  id v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v55 = static os_log_type_t.error.getter(v51, v52, v53, v54);
  if (os_log_type_enabled(v51, v55))
  {
    uint64_t v56 = swift_slowAlloc(22LL, -1LL);
    uint64_t v57 = swift_slowAlloc(64LL, -1LL);
    uint64_t v126 = (uint64_t)a1;
    id v127 = (void *)v57;
    *(_DWORD *)uint64_t v56 = 136446466;
    id v58 = v49;
    uint64_t v59 = sub_100007578(&qword_1002573E0);
    uint64_t v60 = String.init<A>(describing:)(&v126, v59);
    uint64_t v62 = (_TtC18TrustedPeersHelper6Client *)v61;
    uint64_t v126 = sub_10017C4C4(v60, v61, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v56 + 4, v56 + 12);

    swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
    *(_WORD *)(v56 + 12) = 2082;
    uint64_t v126 = v46;
    swift_errorRetain(v46);
    uint64_t v70 = sub_100007578(&qword_100251D70);
    uint64_t v71 = String.init<A>(describing:)(&v126, v70);
    uint64_t v73 = (_TtC18TrustedPeersHelper6Client *)v72;
    uint64_t v126 = sub_10017C4C4(v71, v72, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v56 + 14, v56 + 22);
    swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v51,  v55,  "Health Check! failed for %{public}s: %{public}s",  (uint8_t *)v56,  0x16u);
    swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v46, v129, v128);
  id v81 = sub_100177B68(v128[1], v128[2]);
  BOOL v82 = (void *)_convertErrorToNSError(_:)(v81);
  v124[2](v124, 0LL, v82);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v114 = (_TtC18TrustedPeersHelper6Client *)v125;
LABEL_11:
  swift_release(v114, v107, v108, v109, v110, v111, v112, v113);
}

void sub_100190410(void *a1, void **a2, void (**a3)(const void *, void, void *))
{
  SEL v154 = a2;
  SupportAppInfouint64_t Request = type metadata accessor for GetSupportAppInfoRequest(0LL);
  __chkstk_darwin(SupportAppInfoRequest, v5);
  id v152 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v7, v8);
  id v153 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v10, v11);
  id v150 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v157 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B660, 24LL, 7LL);
  *(void *)v157->endpoint = a3;
  id v155 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v13, (uint64_t)qword_100257120);
  id v14 = a1;
  id v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter(v15);
  BOOL v17 = os_log_type_enabled(v15, v16);
  id v156 = v14;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v158 = (uint64_t)a1;
    id v159 = (void *)v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    id v20 = v14;
    uint64_t v21 = sub_100007578(&qword_1002573E0);
    uint64_t v22 = String.init<A>(describing:)(&v158, v21);
    unint64_t v24 = (_TtC18TrustedPeersHelper6Client *)v23;
    uint64_t v158 = sub_10017C4C4(v22, v23, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v18 + 4, v18 + 12);

    id v14 = v156;
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "getSupportAppInfo for %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      id v149 = a1;
      uint64_t v32 = v154[3];
      id v33 = v14;
      id v34 = [v33 cloudkitContainerName];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      id v38 = [v33 octagonContextID];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      __chkstk_darwin(v42, v43);
      *(&v149 - 6) = v32;
      *(&v149 - 5) = (void *)v35;
      *(&v149 - 4) = v37;
      *(&v149 - 3) = (void *)v39;
      *(&v149 - 2) = v41;
      *(&v149 - 1) = v33;
      uint64_t v44 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v159, sub_100195820, &v149 - 8, v44);

      swift_bridgeObjectRelease(v41, v83, v84, v85, v86, v87, v88, v89);
      swift_bridgeObjectRelease(v37, v90, v91, v92, v93, v94, v95, v96);
      BOOL v97 = v159;
      uint64_t v98 = swift_allocObject(&unk_10023B688, 32LL, 7LL);
      SEL v99 = v157;
      *(void *)(v98 + 16) = sub_100195988;
      *(void *)(v98 + 24) = v99;
      uint64_t v100 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v100, 41LL, 7LL);
      swift_retain(v99);
      id v101 = v97;
      id v102 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v101, 0xD000000000000019LL, 0x80000001001F9630LL);

      id v156 = v101;
      uint64_t v103 = swift_allocObject(&unk_10023B6B0, 40LL, 7LL);
      *(void *)(v103 + 16) = v102;
      *(void *)(v103 + 24) = sub_100196FA4;
      *(void *)(v103 + 32) = v98;
      id v104 = sub_1000084C4( &v101[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish],  *(void *)&v101[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24]);
      uint64_t v105 = type metadata accessor for Metrics(0LL);
      uint64_t v106 = (uint64_t)v150;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56LL))(v150, 1LL, 1LL, v105);
      uint64_t v107 = type metadata accessor for AccountInfo(0LL);
      uint64_t v108 = (uint64_t)v153;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56LL))(v153, 1LL, 1LL, v107);
      uint64_t v109 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B6D8, 32LL, 7LL);
      SEL v154 = &v149;
      *(void *)v109->endpoint = sub_100195994;
      *(void *)v109->containerMap = v103;
      id v155 = (void (**)(const void *, void, void *))*v104;
      __chkstk_darwin(v109, v110);
      *(&v149 - 4) = (void *)v106;
      *(&v149 - 3) = (void *)v108;
      *(&v149 - 2) = 0LL;
      *((_BYTE *)&v149 - _Block_object_dispose(va, 8) = 1;
      uint64_t v111 = sub_1000077B8( &qword_100252900,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
      swift_retain(v102);
      swift_retain(v98);
      swift_retain(v103);
      uint64_t v112 = (uint64_t)v152;
      static Message.with(_:)(sub_1001959A8, &v149 - 6, SupportAppInfoRequest, v111);
      RetryingCKCodeService.getSupportAppInfo(_:completion:)(v112, (uint64_t)sub_1001959A0, (uint64_t)v109);
      sub_1000415CC(v112, type metadata accessor for GetSupportAppInfoRequest);
      swift_release(v102, v113, v114, v115, v116, v117, v118, v119);
      swift_release((_TtC18TrustedPeersHelper6Client *)v103, v120, v121, v122, v123, v124, v125, v126);
      swift_release(v109, v127, v128, v129, v130, v131, v132, v133);
      sub_100041590(v108, &qword_100251F50);
      sub_100041590(v106, &qword_100257000);
      swift_release(v157, v134, v135, v136, v137, v138, v139, v140);

      id v148 = (_TtC18TrustedPeersHelper6Client *)v98;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v45 = sub_100043F74();
  uint64_t v46 = swift_allocError(&type metadata for ContainerError, v45, 0LL, 0LL);
  *(_OWORD *)uint64_t v47 = xmmword_1001E6990;
  *(_BYTE *)(v47 + 16) = 13;
  swift_willThrow(v46);
  id v48 = v14;
  swift_errorRetain(v46);
  id v49 = v48;
  uint64_t v50 = swift_errorRetain(v46);
  id v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v55 = static os_log_type_t.error.getter(v51, v52, v53, v54);
  if (os_log_type_enabled(v51, v55))
  {
    uint64_t v56 = swift_slowAlloc(22LL, -1LL);
    uint64_t v57 = swift_slowAlloc(64LL, -1LL);
    uint64_t v158 = (uint64_t)a1;
    id v159 = (void *)v57;
    *(_DWORD *)uint64_t v56 = 136446466;
    id v58 = v49;
    uint64_t v59 = sub_100007578(&qword_1002573E0);
    uint64_t v60 = String.init<A>(describing:)(&v158, v59);
    uint64_t v62 = (_TtC18TrustedPeersHelper6Client *)v61;
    uint64_t v158 = sub_10017C4C4(v60, v61, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v56 + 4, v56 + 12);

    swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
    *(_WORD *)(v56 + 12) = 2082;
    uint64_t v158 = v46;
    swift_errorRetain(v46);
    uint64_t v70 = sub_100007578(&qword_100251D70);
    uint64_t v71 = String.init<A>(describing:)(&v158, v70);
    uint64_t v73 = (_TtC18TrustedPeersHelper6Client *)v72;
    uint64_t v158 = sub_10017C4C4(v71, v72, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v56 + 14, v56 + 22);
    swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v51,  v55,  "getSupportInfo failed for %{public}s: %{public}s",  (uint8_t *)v56,  0x16u);
    swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v46, v161, v160);
  id v81 = sub_100177B68(v160[1], v160[2]);
  BOOL v82 = (void *)_convertErrorToNSError(_:)(v81);
  v155[2](v155, 0LL, v82);

  swift_errorRelease();
  swift_errorRelease();
  id v148 = v157;
LABEL_11:
  swift_release(v148, v141, v142, v143, v144, v145, v146, v147);
}

void sub_100190C4C(void *a1, uint64_t a2, void (**a3)(const void *, void *))
{
  uint64_t v108 = a2;
  uint64_t v111 = swift_allocObject(&unk_10023B610, 24LL, 7LL);
  *(void *)(v111 + 16) = a3;
  uint64_t v109 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v110 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    SEL v113 = (void *)v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v112, v13);
    os_log_type_t v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v112 = sub_10017C4C4(v14, v15, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v110;
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "removeEscrowCache for %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11)
    {
LABEL_5:
      v107[8] = a1;
      uint64_t v24 = *(void *)(v108 + 24);
      id v25 = v6;
      id v26 = objc_msgSend(v25, "cloudkitContainerName", a1);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      id v29 = v28;

      id v30 = [v25 octagonContextID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      id v33 = v32;

      __chkstk_darwin(v34, v35);
      v107[2] = v24;
      v107[3] = v27;
      v107[4] = v29;
      v107[5] = v31;
      v107[6] = v33;
      v107[7] = v25;
      uint64_t v36 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v113, sub_100195820, v107, v36);

      swift_bridgeObjectRelease(v33, v75, v76, v77, v78, v79, v80, v81);
      swift_bridgeObjectRelease(v29, v82, v83, v84, v85, v86, v87, v88);
      BOOL v89 = v113;
      uint64_t v90 = swift_allocObject(&unk_10023B638, 32LL, 7LL);
      id v91 = (_TtC18TrustedPeersHelper6Client *)v111;
      *(void *)(v90 + 16) = sub_100196E00;
      *(void *)(v90 + 24) = v91;
      swift_retain(v91);
      sub_10011A778((uint64_t)sub_100197000, v90);
      swift_release(v91, v92, v93, v94, v95, v96, v97, v98);

      uint64_t v106 = (_TtC18TrustedPeersHelper6Client *)v90;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v37 = sub_100043F74();
  uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
  *(_OWORD *)uint64_t v39 = xmmword_1001E6990;
  *(_BYTE *)(v39 + 16) = 13;
  swift_willThrow(v38);
  id v40 = v6;
  swift_errorRetain(v38);
  id v41 = v40;
  uint64_t v42 = swift_errorRetain(v38);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    SEL v113 = (void *)v49;
    *(_DWORD *)uint64_t v48 = 136446466;
    id v50 = v41;
    uint64_t v51 = sub_100007578(&qword_1002573E0);
    uint64_t v52 = String.init<A>(describing:)(&v112, v51);
    uint64_t v54 = (_TtC18TrustedPeersHelper6Client *)v53;
    uint64_t v112 = sub_10017C4C4(v52, v53, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v112 = v38;
    swift_errorRetain(v38);
    uint64_t v62 = sub_100007578(&qword_100251D70);
    uint64_t v63 = String.init<A>(describing:)(&v112, v62);
    int64_t v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v112 = sub_10017C4C4(v63, v64, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "removeEscrowCache failed for %{public}s: %{public}s",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v38, v115, v114);
  id v73 = sub_100177B68(v114[1], v114[2]);
  SEL v74 = (void *)_convertErrorToNSError(_:)(v73);
  v109[2](v109, v74);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v106 = (_TtC18TrustedPeersHelper6Client *)v111;
LABEL_11:
  swift_release(v106, v99, v100, v101, v102, v103, v104, v105);
}

void sub_1001911F4( void *a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(const void *, void *))
{
  int v160 = a7;
  int v161 = a8;
  int v159 = a6;
  id v157 = a4;
  uint64_t v158 = a5;
  id v155 = a2;
  id v156 = a3;
  uint64_t v162 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  __chkstk_darwin(v162, v11);
  id v163 = (char *)&v153 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B570, 24LL, 7LL);
  id v164 = a10;
  id v165 = v13;
  *(void *)v13->endpoint = a10;
  _Block_copy(a10);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v14, (uint64_t)qword_100257120);
  id v15 = a1;
  os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v166 = (uint64_t)a1;
    id v167 = (void *)v19;
    *(_DWORD *)id v18 = 136446210;
    SEL v154 = v18 + 4;
    id v20 = v15;
    uint64_t v21 = sub_100007578(&qword_1002573E0);
    uint64_t v22 = String.init<A>(describing:)(&v166, v21);
    id v23 = v15;
    id v25 = (_TtC18TrustedPeersHelper6Client *)v24;
    uint64_t v166 = sub_10017C4C4(v22, v24, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167, v154, v18 + 12);

    id v26 = v25;
    id v15 = v23;
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "resetAccountCDPContents for %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      id v153 = v15;
      SEL v154 = (uint8_t *)a1;
      uint64_t v34 = *(void **)(a9 + 24);
      id v35 = v15;
      id v36 = [v35 cloudkitContainerName];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v39 = v38;

      id v40 = [v35 octagonContextID];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      uint64_t v43 = v42;

      __chkstk_darwin(v44, v45);
      *(&v153 - 6) = v34;
      *(&v153 - 5) = (id)v37;
      *(&v153 - 4) = v39;
      *(&v153 - 3) = (id)v41;
      *(&v153 - 2) = v43;
      *(&v153 - 1) = v35;
      uint64_t v46 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v167, sub_100195820, &v153 - 8, v46);

      swift_bridgeObjectRelease(v43, v85, v86, v87, v88, v89, v90, v91);
      swift_bridgeObjectRelease(v39, v92, v93, v94, v95, v96, v97, v98);
      SEL v99 = v167;
      uint64_t v100 = swift_allocObject(&unk_10023B598, 32LL, 7LL);
      id v101 = v165;
      *(void *)(v100 + 16) = sub_100196E00;
      *(void *)(v100 + 24) = v101;
      uint64_t v102 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v102, 41LL, 7LL);
      swift_retain(v101);
      uint64_t v103 = v99;
      id v104 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v103, 0xD00000000000006BLL, 0x80000001001F95C0LL);

      uint64_t v105 = swift_allocObject(&unk_10023B5C0, 40LL, 7LL);
      *(void *)(v105 + 16) = v104;
      *(void *)(v105 + 24) = sub_100197000;
      *(void *)(v105 + 32) = v100;
      __chkstk_darwin(v105, v106);
      uint64_t v107 = v156;
      *(&v153 - 6) = v155;
      *(&v153 - 5) = v107;
      uint64_t v108 = v158;
      *(&v153 - 4) = v157;
      *(&v153 - 3) = v108;
      *((_BYTE *)&v153 - 16) = v159 & 1;
      *((_BYTE *)&v153 - 15) = v160 & 1;
      *((_BYTE *)&v153 - 14) = v161 & 1;
      uint64_t v109 = sub_1000077B8( &qword_100252930,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
      swift_retain(v104);
      swift_retain(v100);
      uint64_t v110 = (uint64_t)v163;
      static Message.with(_:)(sub_100195950, &v153 - 8, v162, v109);
      uint64_t v111 = *(void *)&v103[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v112 = *(void *)&v103[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v103[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v111);
      uint64_t v113 = swift_allocObject(&unk_10023B5E8, 40LL, 7LL);
      *(void *)(v113 + 16) = v103;
      *(void *)(v113 + 24) = sub_100195944;
      *(void *)(v113 + 32) = v105;
      uint64_t v114 = *(void *)(v112 + 16);
      id v115 = *(void (**)(uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v114 + 104);
      id v116 = v103;
      swift_retain(v105);
      v115(v110, sub_10019597C, v113, v111, v114);
      swift_release(v104, v117, v118, v119, v120, v121, v122, v123);
      swift_release((_TtC18TrustedPeersHelper6Client *)v105, v124, v125, v126, v127, v128, v129, v130);
      swift_release((_TtC18TrustedPeersHelper6Client *)v113, v131, v132, v133, v134, v135, v136, v137);
      sub_1000415CC(v110, type metadata accessor for ResetAccountCDPContentsRequest);
      swift_release(v165, v138, v139, v140, v141, v142, v143, v144);

      id v152 = (_TtC18TrustedPeersHelper6Client *)v100;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v47 = sub_100043F74();
  uint64_t v48 = swift_allocError(&type metadata for ContainerError, v47, 0LL, 0LL);
  *(_OWORD *)uint64_t v49 = xmmword_1001E6990;
  *(_BYTE *)(v49 + 16) = 13;
  swift_willThrow(v48);
  id v50 = v15;
  swift_errorRetain(v48);
  id v51 = v50;
  uint64_t v52 = swift_errorRetain(v48);
  unint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v57 = static os_log_type_t.error.getter(v53, v54, v55, v56);
  if (os_log_type_enabled(v53, v57))
  {
    uint64_t v58 = swift_slowAlloc(22LL, -1LL);
    uint64_t v59 = swift_slowAlloc(64LL, -1LL);
    uint64_t v166 = (uint64_t)a1;
    id v167 = (void *)v59;
    *(_DWORD *)uint64_t v58 = 136446466;
    id v60 = v51;
    uint64_t v61 = sub_100007578(&qword_1002573E0);
    uint64_t v62 = String.init<A>(describing:)(&v166, v61);
    unint64_t v64 = (_TtC18TrustedPeersHelper6Client *)v63;
    uint64_t v166 = sub_10017C4C4(v62, v63, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167, v58 + 4, v58 + 12);

    swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    *(_WORD *)(v58 + 12) = 2082;
    uint64_t v166 = v48;
    swift_errorRetain(v48);
    uint64_t v72 = sub_100007578(&qword_100251D70);
    uint64_t v73 = String.init<A>(describing:)(&v166, v72);
    SEL v75 = (_TtC18TrustedPeersHelper6Client *)v74;
    uint64_t v166 = sub_10017C4C4(v73, v74, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v53,  v57,  "resetAccountCDPContents failed for %{public}s: %{public}s",  (uint8_t *)v58,  0x16u);
    swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v48, v169, v168);
  id v83 = sub_100177B68(v168[1], v168[2]);
  int64_t v84 = (void *)_convertErrorToNSError(_:)(v83);
  v164[2](v164, v84);

  swift_errorRelease();
  swift_errorRelease();
  id v152 = v165;
LABEL_11:
  swift_release(v152, v145, v146, v147, v148, v149, v150, v151);
}

void sub_100191980(void *a1, int a2, uint64_t a3, void *aBlock)
{
  uint64_t v94 = a3;
  int v93 = a2;
  _Block_copy(aBlock);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v95 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  id v96 = aBlock;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v97 = (uint64_t)a1;
    BOOL v98 = (void *)v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v97, v14);
    os_log_type_t v17 = (_TtC18TrustedPeersHelper6Client *)v16;
    uint64_t v97 = sub_10017C4C4(v15, v16, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "fetchAccountSettings for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      v92[8] = a1;
      uint64_t v25 = *(void *)(v94 + 24);
      id v26 = v8;
      id v27 = objc_msgSend(v26, "cloudkitContainerName", a1);
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      id v30 = v29;

      id v31 = [v26 octagonContextID];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v34 = v33;

      __chkstk_darwin(v35, v36);
      v92[2] = v25;
      v92[3] = v28;
      v92[4] = v30;
      v92[5] = v32;
      v92[6] = v34;
      v92[7] = v26;
      uint64_t v37 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v98, sub_100195820, v92, v37);

      swift_bridgeObjectRelease(v34, v76, v77, v78, v79, v80, v81, v82);
      swift_bridgeObjectRelease(v30, v83, v84, v85, v86, v87, v88, v89);
      BOOL v90 = v98;
      BOOL v91 = v96;
      _Block_copy(v96);
      sub_10016FB60(v93 & 1, v90, v91);
      _Block_release(v91);

      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v38 = sub_100043F74();
  uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
  *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
  *(_BYTE *)(v40 + 16) = 13;
  swift_willThrow(v39);
  id v41 = v8;
  swift_errorRetain(v39);
  id v42 = v41;
  uint64_t v43 = swift_errorRetain(v39);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
  if (os_log_type_enabled(v44, v48))
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(64LL, -1LL);
    uint64_t v97 = (uint64_t)a1;
    BOOL v98 = (void *)v50;
    *(_DWORD *)uint64_t v49 = 136446466;
    id v51 = v42;
    uint64_t v52 = sub_100007578(&qword_1002573E0);
    uint64_t v53 = String.init<A>(describing:)(&v97, v52);
    uint64_t v55 = (_TtC18TrustedPeersHelper6Client *)v54;
    uint64_t v97 = sub_10017C4C4(v53, v54, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v97 = v39;
    swift_errorRetain(v39);
    uint64_t v63 = sub_100007578(&qword_100251D70);
    uint64_t v64 = String.init<A>(describing:)(&v97, v63);
    id v66 = (_TtC18TrustedPeersHelper6Client *)v65;
    uint64_t v97 = sub_10017C4C4(v64, v65, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v48,  "fetchAccountSettings failed for %{public}s: %{public}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  BOOL v91 = v96;
  swift_getErrorValue(v39, v100, v99);
  id v74 = sub_100177B68(v99[1], v99[2]);
  SEL v75 = (void *)_convertErrorToNSError(_:)(v74);
  (*((void (**)(void *, void, void *))v91 + 2))(v91, 0LL, v75);

  swift_errorRelease();
  swift_errorRelease();
LABEL_11:
  _Block_release(v91);
}

void sub_100191ED8(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  uint64_t v135 = a2;
  uint64_t v138 = swift_allocObject(&unk_10023B4D0, 24LL, 7LL);
  *(void *)(v138 + 16) = a3;
  id v136 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v137 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v139 = (uint64_t)a1;
    id v140 = (void *)v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v139, v13);
    unint64_t v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v139 = sub_10017C4C4(v14, v15, (uint64_t *)&v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v137;
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "isRecoveryKeySet for %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11)
    {
LABEL_5:
      void v134[8] = a1;
      uint64_t v24 = *(void *)(v135 + 24);
      id v25 = v6;
      id v26 = objc_msgSend(v25, "cloudkitContainerName", a1);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      int64_t v29 = v28;

      id v30 = [v25 octagonContextID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      BOOL v33 = v32;

      __chkstk_darwin(v34, v35);
      void v134[2] = v24;
      void v134[3] = v27;
      v134[4] = v29;
      v134[5] = v31;
      v134[6] = v33;
      v134[7] = v25;
      uint64_t v36 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v140, sub_100195820, v134, v36);

      swift_bridgeObjectRelease(v33, v75, v76, v77, v78, v79, v80, v81);
      swift_bridgeObjectRelease(v29, v82, v83, v84, v85, v86, v87, v88);
      BOOL v89 = v140;
      BOOL v90 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B4F8, 32LL, 7LL);
      BOOL v91 = (_TtC18TrustedPeersHelper6Client *)v138;
      *(void *)v90->endpoint = sub_100196DF0;
      *(void *)v90->containerMap = v91;
      uint64_t v92 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v92, 41LL, 7LL);
      swift_retain(v91);
      id v93 = v89;
      uint64_t v94 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v93, 0xD000000000000018LL, 0x80000001001F9570LL);

      uint64_t v95 = swift_allocObject(&unk_10023B520, 40LL, 7LL);
      *(void *)(v95 + 16) = v94;
      *(void *)(v95 + 24) = sub_100195908;
      *(void *)(v95 + 32) = v90;
      id v96 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B548, 40LL, 7LL);
      *(void *)v96->endpoint = sub_100195924;
      *(void *)v96->containerMap = v95;
      *(void *)v96[1]._TtCs12_SwiftObject_opaque = v93;
      id v97 = v93;
      swift_retain(v94);
      swift_retain(v90);
      swift_retain(v95);
      sub_100137F18(0, (uint64_t)sub_100195934, (uint64_t)v96);
      swift_release(v91, v98, v99, v100, v101, v102, v103, v104);

      swift_release(v90, v105, v106, v107, v108, v109, v110, v111);
      swift_release(v94, v112, v113, v114, v115, v116, v117, v118);
      swift_release((_TtC18TrustedPeersHelper6Client *)v95, v119, v120, v121, v122, v123, v124, v125);
      id v133 = v96;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v37 = sub_100043F74();
  uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
  *(_OWORD *)uint64_t v39 = xmmword_1001E6990;
  *(_BYTE *)(v39 + 16) = 13;
  swift_willThrow(v38);
  id v40 = v6;
  swift_errorRetain(v38);
  id v41 = v40;
  uint64_t v42 = swift_errorRetain(v38);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v139 = (uint64_t)a1;
    id v140 = (void *)v49;
    *(_DWORD *)uint64_t v48 = 136446466;
    id v50 = v41;
    uint64_t v51 = sub_100007578(&qword_1002573E0);
    uint64_t v52 = String.init<A>(describing:)(&v139, v51);
    unint64_t v54 = (_TtC18TrustedPeersHelper6Client *)v53;
    uint64_t v139 = sub_10017C4C4(v52, v53, (uint64_t *)&v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v139 = v38;
    swift_errorRetain(v38);
    uint64_t v62 = sub_100007578(&qword_100251D70);
    uint64_t v63 = String.init<A>(describing:)(&v139, v62);
    unint64_t v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v139 = sub_10017C4C4(v63, v64, (uint64_t *)&v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "isRecoveryKeySet failed for %{public}s: %{public}s",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v38, v142, v141);
  id v73 = sub_100177B68(v141[1], v141[2]);
  id v74 = (void *)_convertErrorToNSError(_:)(v73);
  v136[2](v136, 0LL, v74);

  swift_errorRelease();
  swift_errorRelease();
  id v133 = (_TtC18TrustedPeersHelper6Client *)v138;
LABEL_11:
  swift_release(v133, v126, v127, v128, v129, v130, v131, v132);
}

void sub_100192554(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  uint64_t v141 = a2;
  uint64_t v5 = swift_allocObject(&unk_10023B430, 24LL, 7LL);
  *(void *)(v5 + 16) = a3;
  id v143 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v142 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  id v144 = v8;
  id v145 = (_TtC18TrustedPeersHelper6Client *)v5;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v146 = (uint64_t)a1;
    SEL v147 = (void *)v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v146, v14);
    SEL v17 = (_TtC18TrustedPeersHelper6Client *)v16;
    uint64_t v146 = sub_10017C4C4(v15, v16, (uint64_t *)&v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v11 + 4, v11 + 12);

    id v8 = v144;
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "removeRecoveryKey for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1) {
      goto LABEL_5;
    }
LABEL_7:
    unint64_t v38 = sub_100043F74();
    uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
    *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
    *(_BYTE *)(v40 + 16) = 13;
    swift_willThrow(v39);
    id v41 = v8;
    swift_errorRetain(v39);
    id v42 = v41;
    uint64_t v43 = swift_errorRetain(v39);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
    if (os_log_type_enabled(v44, v48))
    {
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      uint64_t v50 = swift_slowAlloc(64LL, -1LL);
      uint64_t v146 = (uint64_t)a1;
      SEL v147 = (void *)v50;
      *(_DWORD *)uint64_t v49 = 136446466;
      id v51 = v42;
      uint64_t v52 = sub_100007578(&qword_1002573E0);
      uint64_t v53 = String.init<A>(describing:)(&v146, v52);
      SEL v55 = (_TtC18TrustedPeersHelper6Client *)v54;
      uint64_t v146 = sub_10017C4C4(v53, v54, (uint64_t *)&v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v49 + 4, v49 + 12);

      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      *(_WORD *)(v49 + 12) = 2082;
      uint64_t v146 = v39;
      swift_errorRetain(v39);
      uint64_t v63 = sub_100007578(&qword_100251D70);
      uint64_t v64 = String.init<A>(describing:)(&v146, v63);
      SEL v66 = (_TtC18TrustedPeersHelper6Client *)v65;
      uint64_t v146 = sub_10017C4C4(v64, v65, (uint64_t *)&v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v48,  "removeRecoveryKey failed for %{public}s: %{public}s",  (uint8_t *)v49,  0x16u);
      swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    swift_getErrorValue(v39, v149, v148);
    id v74 = sub_100177B68(v148[1], v148[2]);
    SEL v75 = (void *)_convertErrorToNSError(_:)(v74);
    v143[2](v143, 0LL, v75);

    swift_errorRelease();
    swift_errorRelease();
    id v83 = v145;
    goto LABEL_16;
  }

  if (!a1) {
    goto LABEL_7;
  }
LABEL_5:
  v140[9] = a1;
  uint64_t v25 = *(void *)(v141 + 24);
  id v26 = v8;
  id v27 = [v26 cloudkitContainerName];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  id v30 = v29;

  id v31 = [v26 octagonContextID];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  __chkstk_darwin(v35, v36);
  v140[2] = v25;
  void v140[3] = v28;
  v140[4] = v30;
  v140[5] = v32;
  v140[6] = v34;
  v140[7] = v26;
  uint64_t v37 = type metadata accessor for Container();
  OS_dispatch_queue.sync<A>(execute:)(&v147, sub_100195820, v140, v37);

  swift_bridgeObjectRelease(v34, v84, v85, v86, v87, v88, v89, v90);
  swift_bridgeObjectRelease(v30, v91, v92, v93, v94, v95, v96, v97);
  SEL v98 = v147;
  id v99 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B458, 32LL, 7LL);
  id v100 = v145;
  *(void *)v99->endpoint = sub_100196DF0;
  *(void *)v99->containerMap = v100;
  uint64_t v101 = type metadata accessor for Container.SemaphoreWrapper();
  swift_allocObject(v101, 41LL, 7LL);
  swift_retain(v100);
  id v102 = v98;
  id v103 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v102, 0xD000000000000019LL, 0x80000001001F9550LL);

  uint64_t v104 = swift_allocObject(&unk_10023B480, 40LL, 7LL);
  *(void *)(v104 + 16) = v103;
  *(void *)(v104 + 24) = sub_100196FF0;
  *(void *)(v104 + 32) = v99;
  uint64_t v105 = qword_100250EB8;
  swift_retain(v103);
  swift_retain(v99);
  if (v105 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  uint64_t v106 = sub_100006BAC(v6, (uint64_t)qword_1002567D0);
  id v107 = (os_log_s *)Logger.logObject.getter(v106);
  os_log_type_t v108 = static os_log_type_t.info.getter(v107);
  if (os_log_type_enabled(v107, v108))
  {
    id v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v109 = 0;
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "beginning a removeRecoveryKey", v109, 2u);
    swift_slowDealloc(v109, -1LL, -1LL);
  }

  id v110 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B4A8, 40LL, 7LL);
  *(void *)v110->endpoint = sub_1001958EC;
  *(void *)v110->containerMap = v104;
  *(void *)v110[1]._TtCs12_SwiftObject_opaque = v102;
  id v111 = v102;
  swift_retain(v104);
  sub_100137F18(0, (uint64_t)sub_1001958FC, (uint64_t)v110);
  swift_release(v100, v112, v113, v114, v115, v116, v117, v118);

  swift_release(v99, v119, v120, v121, v122, v123, v124, v125);
  swift_release(v103, v126, v127, v128, v129, v130, v131, v132);
  swift_release((_TtC18TrustedPeersHelper6Client *)v104, v133, v134, v135, v136, v137, v138, v139);
  id v83 = v110;
LABEL_16:
  swift_release(v83, v76, v77, v78, v79, v80, v81, v82);
}

void sub_100192C6C(void *a1, uint64_t a2, char *a3)
{
  uint64_t v136 = a2;
  uint64_t v134 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  __chkstk_darwin(v134, v5);
  id v135 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v7, v8);
  SEL v133 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v10, v11);
  id v132 = (char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B3B8, 24LL, 7LL);
  id v138 = a3;
  id v139 = v13;
  *(void *)v13->endpoint = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100006BAC(v14, (uint64_t)qword_100257120);
  id v16 = a1;
  uint64_t v137 = v15;
  SEL v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int64_t v20 = (char *)swift_slowAlloc(32LL, -1LL);
    uint64_t v140 = (uint64_t)a1;
    uint64_t v141 = v20;
    *(_DWORD *)id v19 = 136446210;
    id v21 = v16;
    uint64_t v22 = sub_100007578(&qword_1002573E0);
    uint64_t v23 = String.init<A>(describing:)(&v140, v22);
    uint64_t v25 = (_TtC18TrustedPeersHelper6Client *)v24;
    uint64_t v140 = sub_10017C4C4(v23, v24, (uint64_t *)&v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v19 + 4, v19 + 12);

    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "performATOPRVActions for %{public}s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      id v131 = a1;
      BOOL v33 = *(void **)(v136 + 24);
      id v34 = v16;
      id v35 = [v34 cloudkitContainerName];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      unint64_t v38 = v37;

      id v39 = [v34 octagonContextID];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      id v42 = v41;

      __chkstk_darwin(v43, v44);
      *(&v131 - 6) = v33;
      *(&v131 - 5) = (void *)v36;
      *(&v131 - 4) = v38;
      *(&v131 - 3) = (void *)v40;
      *(&v131 - 2) = v42;
      *(&v131 - 1) = v34;
      uint64_t v45 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v141, sub_100195820, &v131 - 8, v45);

      swift_bridgeObjectRelease(v42, v84, v85, v86, v87, v88, v89, v90);
      swift_bridgeObjectRelease(v38, v91, v92, v93, v94, v95, v96, v97);
      SEL v98 = v141;
      id v138 = v141;
      uint64_t v99 = swift_allocObject(&unk_10023B3E0, 32LL, 7LL);
      id v100 = v139;
      *(void *)(v99 + 16) = sub_100170F14;
      *(void *)(v99 + 24) = v100;
      sub_1000084C4( &v98[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish],  *(void *)&v98[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24]);
      uint64_t v101 = type metadata accessor for Metrics(0LL);
      uint64_t v102 = (uint64_t)v132;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56LL))(v132, 1LL, 1LL, v101);
      uint64_t v103 = type metadata accessor for AccountInfo(0LL);
      uint64_t v104 = (uint64_t)v133;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56LL))(v133, 1LL, 1LL, v103);
      uint64_t v105 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B408, 32LL, 7LL);
      *(void *)v105->endpoint = sub_100197000;
      *(void *)v105->containerMap = v99;
      __chkstk_darwin(v105, v106);
      *(&v131 - 2) = (void *)v102;
      *(&v131 - 1) = (void *)v104;
      uint64_t v107 = sub_1000077B8( &qword_100252788,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
      swift_retain(v100);
      swift_retain(v99);
      uint64_t v108 = (uint64_t)v135;
      static Message.with(_:)(sub_1001958D0, &v131 - 4, v134, v107);
      RetryingCKCodeService.performAtoprvactions(_:completion:)(v108, (uint64_t)sub_1001958C8, (uint64_t)v105);
      sub_1000415CC(v108, type metadata accessor for PerformATOPRVActionsRequest);
      swift_release(v105, v109, v110, v111, v112, v113, v114, v115);
      sub_100041590(v104, &qword_100251F50);
      sub_100041590(v102, &qword_100257000);
      swift_release(v139, v116, v117, v118, v119, v120, v121, v122);

      id v130 = (_TtC18TrustedPeersHelper6Client *)v99;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v46 = sub_100043F74();
  uint64_t v47 = swift_allocError(&type metadata for ContainerError, v46, 0LL, 0LL);
  *(_OWORD *)uint64_t v48 = xmmword_1001E6990;
  *(_BYTE *)(v48 + 16) = 13;
  swift_willThrow(v47);
  id v49 = v16;
  swift_errorRetain(v47);
  id v50 = v49;
  uint64_t v51 = swift_errorRetain(v47);
  uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v56 = static os_log_type_t.error.getter(v52, v53, v54, v55);
  if (os_log_type_enabled(v52, v56))
  {
    uint64_t v57 = swift_slowAlloc(22LL, -1LL);
    int64_t v58 = (char *)swift_slowAlloc(64LL, -1LL);
    uint64_t v140 = (uint64_t)a1;
    uint64_t v141 = v58;
    *(_DWORD *)uint64_t v57 = 136446466;
    id v59 = v50;
    uint64_t v60 = sub_100007578(&qword_1002573E0);
    uint64_t v61 = String.init<A>(describing:)(&v140, v60);
    uint64_t v63 = (_TtC18TrustedPeersHelper6Client *)v62;
    uint64_t v140 = sub_10017C4C4(v61, v62, (uint64_t *)&v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v57 + 4, v57 + 12);

    swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
    *(_WORD *)(v57 + 12) = 2082;
    uint64_t v140 = v47;
    swift_errorRetain(v47);
    uint64_t v71 = sub_100007578(&qword_100251D70);
    uint64_t v72 = String.init<A>(describing:)(&v140, v71);
    id v74 = (_TtC18TrustedPeersHelper6Client *)v73;
    uint64_t v140 = sub_10017C4C4(v72, v73, (uint64_t *)&v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v57 + 14, v57 + 22);
    swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v52,  v56,  "performATOPRVActions failed for %{public}s: %{public}s",  (uint8_t *)v57,  0x16u);
    swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v47, v143, v142);
  id v82 = sub_100177B68(v142[1], v142[2]);
  id v83 = (void *)_convertErrorToNSError(_:)(v82);
  (*((void (**)(char *, void *))v138 + 2))(v138, v83);

  swift_errorRelease();
  swift_errorRelease();
  id v130 = v139;
LABEL_11:
  swift_release(v130, v123, v124, v125, v126, v127, v128, v129);
}

void sub_1001933F4(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, void *aBlock)
{
  uint64_t v89 = a4;
  uint64_t v90 = a2;
  _Block_copy(aBlock);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100006BAC(v8, (uint64_t)qword_100257120);
  id v10 = a1;
  swift_bridgeObjectRetain_n(a3, 2LL);
  id v11 = v10;
  uint64_t v91 = v9;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  id v92 = v11;
  int64_t v93 = aBlock;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    uint64_t v94 = (uint64_t)a1;
    id v95 = (void *)v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    id v16 = v11;
    uint64_t v17 = sub_100007578(&qword_1002573E0);
    uint64_t v18 = String.init<A>(describing:)(&v94, v17);
    int64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
    uint64_t v94 = sub_10017C4C4(v18, v19, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain(a3);
    uint64_t v94 = sub_10017C4C4(v90, (unint64_t)a3, (uint64_t *)&v95);
    id v11 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "testSemaphore for %{public}s: %{public}s",  (uint8_t *)v14,  0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    uint64_t v88 = (uint64_t)a1;
    if (a1)
    {
LABEL_5:
      uint64_t v28 = *(void *)(v89 + 24);
      id v29 = v11;
      id v30 = [v29 cloudkitContainerName];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      BOOL v33 = v32;

      id v34 = [v29 octagonContextID];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      __chkstk_darwin(v38, v39);
      v87[2] = v28;
      v87[3] = v31;
      v87[4] = v33;
      v87[5] = v35;
      v87[6] = v37;
      v87[7] = v29;
      uint64_t v40 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v95, sub_100195820, v87, v40);

      swift_bridgeObjectRelease(v37, v71, v72, v73, v74, v75, v76, v77);
      swift_bridgeObjectRelease(v33, v78, v79, v80, v81, v82, v83, v84);
      id v85 = v95;
      int64_t v86 = v93;
      _Block_copy(v93);
      sub_1001704A0(v90, a3, v85, (void (**)(void, void))v86);
      _Block_release(v86);

      goto LABEL_11;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    uint64_t v88 = (uint64_t)a1;
    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v41 = sub_100043F74();
  uint64_t v42 = swift_allocError(&type metadata for ContainerError, v41, 0LL, 0LL);
  *(_OWORD *)uint64_t v43 = xmmword_1001E6990;
  *(_BYTE *)(v43 + 16) = 13;
  swift_willThrow(v42);
  id v44 = v11;
  swift_errorRetain(v42);
  id v45 = v44;
  uint64_t v46 = swift_errorRetain(v42);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v51 = static os_log_type_t.error.getter(v47, v48, v49, v50);
  if (os_log_type_enabled(v47, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v52 = 136446466;
    uint64_t v94 = v88;
    id v95 = (void *)v54;
    id v55 = v45;
    uint64_t v56 = sub_100007578(&qword_1002573E0);
    uint64_t v57 = String.init<A>(describing:)(&v94, v56);
    id v59 = (_TtC18TrustedPeersHelper6Client *)v58;
    uint64_t v94 = sub_10017C4C4(v57, v58, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v52 + 4, v52 + 12);

    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    *(_WORD *)(v52 + 12) = 2114;
    swift_errorRetain(v42);
    uint64_t v67 = _swift_stdlib_bridgeErrorToNSError(v42);
    uint64_t v94 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v52 + 14, v52 + 22);
    *uint64_t v53 = v67;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v51,  "testSemaphore failed for %{public}s: %{public}@",  (uint8_t *)v52,  0x16u);
    uint64_t v68 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v53, 1LL, v68);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  int64_t v86 = v93;
  swift_getErrorValue(v42, v97, v96);
  id v69 = sub_100177B68(v96[1], v96[2]);
  BOOL v70 = (void *)_convertErrorToNSError(_:)(v69);
  (*((void (**)(void *, void *))v86 + 2))(v86, v70);

  swift_errorRelease();
  swift_errorRelease();
LABEL_11:
  _Block_release(v86);
}

void sub_1001939D4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(const void *, void, void *))
{
  uint64_t v147 = a5;
  uint64_t v148 = a6;
  uint64_t v145 = a4;
  uint64_t v146 = a3;
  uint64_t v144 = a2;
  id v150 = a7;
  uint64_t v151 = swift_allocObject(&unk_10023B318, 24LL, 7LL);
  *(void *)(v151 + 16) = v150;
  _Block_copy(a7);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100006BAC(v9, (uint64_t)qword_100257120);
  id v11 = a1;
  uint64_t v149 = v10;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v152 = (uint64_t)a1;
    id v153 = (void *)v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    id v16 = a1;
    id v17 = v11;
    uint64_t v18 = sub_100007578(&qword_1002573E0);
    uint64_t v19 = String.init<A>(describing:)(&v152, v18);
    SEL v21 = (_TtC18TrustedPeersHelper6Client *)v20;
    uint64_t v152 = sub_10017C4C4(v19, v20, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v14 + 4, v14 + 12);

    a1 = v16;
    swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "preflightRecoverOctagon for %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    if (v16)
    {
LABEL_5:
      v143[8] = a1;
      uint64_t v29 = *(void *)(v148 + 24);
      id v30 = v11;
      id v31 = objc_msgSend(v30, "cloudkitContainerName", a1);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      id v34 = v33;

      id v35 = [v30 octagonContextID];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v38 = v37;

      __chkstk_darwin(v39, v40);
      v143[2] = v29;
      v143[3] = v32;
      v143[4] = v34;
      v143[5] = v36;
      v143[6] = v38;
      v143[7] = v30;
      uint64_t v41 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v153, sub_100195820, v143, v41);

      swift_bridgeObjectRelease(v38, v80, v81, v82, v83, v84, v85, v86);
      swift_bridgeObjectRelease(v34, v87, v88, v89, v90, v91, v92, v93);
      uint64_t v94 = v153;
      id v95 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B340, 32LL, 7LL);
      BOOL v96 = (_TtC18TrustedPeersHelper6Client *)v151;
      *(void *)v95->endpoint = sub_100196DF0;
      *(void *)v95->containerMap = v96;
      uint64_t v97 = type metadata accessor for Container.SemaphoreWrapper();
      swift_allocObject(v97, 41LL, 7LL);
      swift_retain(v96);
      id v98 = v94;
      uint64_t v99 = (_TtC18TrustedPeersHelper6Client *)sub_100159634(v98, 0xD00000000000003FLL, 0x80000001001F65B0LL);

      uint64_t v100 = swift_allocObject(&unk_10023B368, 40LL, 7LL);
      *(void *)(v100 + 16) = v99;
      *(void *)(v100 + 24) = sub_100196FF0;
      *(void *)(v100 + 32) = v95;
      uint64_t v101 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023B390, 72LL, 7LL);
      *(void *)v101->endpoint = sub_1001958AC;
      *(void *)v101->containerMap = v100;
      uint64_t v102 = v144;
      *(void *)v101[1]._TtCs12_SwiftObject_opaque = v98;
      *(void *)&v101[1]._TtCs12_SwiftObject_opaque[8] = v102;
      uint64_t v103 = v145;
      uint64_t v104 = v146;
      *(void *)v101[1].endpoint = v146;
      *(void *)v101[1].containerMap = v103;
      uint64_t v105 = v147;
      *(void *)v101[2]._TtCs12_SwiftObject_opaque = v147;
      id v106 = v98;
      swift_retain(v99);
      swift_retain(v95);
      swift_retain(v100);
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRetain(v105);
      sub_100137F18(0, (uint64_t)sub_1001958BC, (uint64_t)v101);
      swift_release(v96, v107, v108, v109, v110, v111, v112, v113);

      swift_release(v95, v114, v115, v116, v117, v118, v119, v120);
      swift_release(v99, v121, v122, v123, v124, v125, v126, v127);
      swift_release((_TtC18TrustedPeersHelper6Client *)v100, v128, v129, v130, v131, v132, v133, v134);
      uint64_t v142 = v101;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v42 = sub_100043F74();
  uint64_t v43 = swift_allocError(&type metadata for ContainerError, v42, 0LL, 0LL);
  *(_OWORD *)uint64_t v44 = xmmword_1001E6990;
  *(_BYTE *)(v44 + 16) = 13;
  swift_willThrow(v43);
  id v45 = v11;
  swift_errorRetain(v43);
  id v46 = v45;
  uint64_t v47 = swift_errorRetain(v43);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
  if (os_log_type_enabled(v48, v52))
  {
    uint64_t v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = swift_slowAlloc(64LL, -1LL);
    uint64_t v152 = (uint64_t)a1;
    id v153 = (void *)v54;
    *(_DWORD *)uint64_t v53 = 136446466;
    id v55 = v46;
    uint64_t v56 = sub_100007578(&qword_1002573E0);
    uint64_t v57 = String.init<A>(describing:)(&v152, v56);
    id v59 = (_TtC18TrustedPeersHelper6Client *)v58;
    uint64_t v152 = sub_10017C4C4(v57, v58, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v53 + 4, v53 + 12);

    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    *(_WORD *)(v53 + 12) = 2082;
    uint64_t v152 = v43;
    swift_errorRetain(v43);
    uint64_t v67 = sub_100007578(&qword_100251D70);
    uint64_t v68 = String.init<A>(describing:)(&v152, v67);
    BOOL v70 = (_TtC18TrustedPeersHelper6Client *)v69;
    uint64_t v152 = sub_10017C4C4(v68, v69, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v52,  "preflightRecoverOctagon failed for %{public}s: %{public}s",  (uint8_t *)v53,  0x16u);
    swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v43, v155, v154);
  id v78 = sub_100177B68(v154[1], v154[2]);
  id v79 = (void *)_convertErrorToNSError(_:)(v78);
  v150[2](v150, 0LL, v79);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v142 = (_TtC18TrustedPeersHelper6Client *)v151;
LABEL_11:
  swift_release(v142, v135, v136, v137, v138, v139, v140, v141);
}

void sub_10019406C(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  uint64_t v108 = a2;
  uint64_t v111 = swift_allocObject(&unk_10023B2C8, 24LL, 7LL);
  *(void *)(v111 + 16) = a3;
  id v109 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v110 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    id v113 = (void *)v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    id v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v112, v13);
    id v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v112 = sub_10017C4C4(v14, v15, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v110;
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "fetchTrustedPeerCount for %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11)
    {
LABEL_5:
      v107[8] = a1;
      uint64_t v24 = *(void *)(v108 + 24);
      id v25 = v6;
      id v26 = objc_msgSend(v25, "cloudkitContainerName", a1);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v28;

      id v30 = [v25 octagonContextID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      BOOL v33 = v32;

      __chkstk_darwin(v34, v35);
      v107[2] = v24;
      v107[3] = v27;
      v107[4] = v29;
      v107[5] = v31;
      v107[6] = v33;
      v107[7] = v25;
      uint64_t v36 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v113, sub_100195820, v107, v36);

      swift_bridgeObjectRelease(v33, v75, v76, v77, v78, v79, v80, v81);
      swift_bridgeObjectRelease(v29, v82, v83, v84, v85, v86, v87, v88);
      int64_t v89 = v113;
      uint64_t v90 = swift_allocObject(&unk_10023B2F0, 32LL, 7LL);
      id v91 = (_TtC18TrustedPeersHelper6Client *)v111;
      *(void *)(v90 + 16) = sub_100196DF4;
      *(void *)(v90 + 24) = v91;
      swift_retain(v91);
      sub_10012BDBC((uint64_t)sub_100195890, v90);
      swift_release(v91, v92, v93, v94, v95, v96, v97, v98);

      id v106 = (_TtC18TrustedPeersHelper6Client *)v90;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v37 = sub_100043F74();
  uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
  *(_OWORD *)uint64_t v39 = xmmword_1001E6990;
  *(_BYTE *)(v39 + 16) = 13;
  swift_willThrow(v38);
  id v40 = v6;
  swift_errorRetain(v38);
  id v41 = v40;
  uint64_t v42 = swift_errorRetain(v38);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    id v113 = (void *)v49;
    *(_DWORD *)uint64_t v48 = 136446466;
    id v50 = v41;
    uint64_t v51 = sub_100007578(&qword_1002573E0);
    uint64_t v52 = String.init<A>(describing:)(&v112, v51);
    uint64_t v54 = (_TtC18TrustedPeersHelper6Client *)v53;
    uint64_t v112 = sub_10017C4C4(v52, v53, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v112 = v38;
    swift_errorRetain(v38);
    uint64_t v62 = sub_100007578(&qword_100251D70);
    uint64_t v63 = String.init<A>(describing:)(&v112, v62);
    BOOL v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v112 = sub_10017C4C4(v63, v64, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "fetchTrustedPeerCount failed for %{public}s: %{public}s",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v38, v115, v114);
  id v73 = sub_100177B68(v114[1], v114[2]);
  id v74 = (void *)_convertErrorToNSError(_:)(v73);
  v109[2](v109, 0LL, v74);

  swift_errorRelease();
  swift_errorRelease();
  id v106 = (_TtC18TrustedPeersHelper6Client *)v111;
LABEL_11:
  swift_release(v106, v99, v100, v101, v102, v103, v104, v105);
}

void sub_100194618(void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  uint64_t v108 = a2;
  uint64_t v111 = swift_allocObject(&unk_10023B278, 24LL, 7LL);
  *(void *)(v111 + 16) = a3;
  id v109 = a3;
  _Block_copy(a3);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v5, (uint64_t)qword_100257120);
  id v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  id v110 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    id v113 = (void *)v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    id v11 = a1;
    id v12 = v6;
    uint64_t v13 = sub_100007578(&qword_1002573E0);
    uint64_t v14 = String.init<A>(describing:)(&v112, v13);
    id v16 = (_TtC18TrustedPeersHelper6Client *)v15;
    uint64_t v112 = sub_10017C4C4(v14, v15, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v9 + 4, v9 + 12);

    a1 = v11;
    id v6 = v110;
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "octagonContainsDistrustedRecoveryKeys for %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    if (v11)
    {
LABEL_5:
      v107[8] = a1;
      uint64_t v24 = *(void *)(v108 + 24);
      id v25 = v6;
      id v26 = objc_msgSend(v25, "cloudkitContainerName", a1);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v28;

      id v30 = [v25 octagonContextID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      BOOL v33 = v32;

      __chkstk_darwin(v34, v35);
      v107[2] = v24;
      v107[3] = v27;
      v107[4] = v29;
      v107[5] = v31;
      v107[6] = v33;
      v107[7] = v25;
      uint64_t v36 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v113, sub_100195820, v107, v36);

      swift_bridgeObjectRelease(v33, v75, v76, v77, v78, v79, v80, v81);
      swift_bridgeObjectRelease(v29, v82, v83, v84, v85, v86, v87, v88);
      int64_t v89 = v113;
      uint64_t v90 = swift_allocObject(&unk_10023B2A0, 32LL, 7LL);
      id v91 = (_TtC18TrustedPeersHelper6Client *)v111;
      *(void *)(v90 + 16) = sub_100195888;
      *(void *)(v90 + 24) = v91;
      swift_retain(v91);
      sub_10012C430((uint64_t)sub_100196FF0, v90);
      swift_release(v91, v92, v93, v94, v95, v96, v97, v98);

      id v106 = (_TtC18TrustedPeersHelper6Client *)v90;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v37 = sub_100043F74();
  uint64_t v38 = swift_allocError(&type metadata for ContainerError, v37, 0LL, 0LL);
  *(_OWORD *)uint64_t v39 = xmmword_1001E6990;
  *(_BYTE *)(v39 + 16) = 13;
  swift_willThrow(v38);
  id v40 = v6;
  swift_errorRetain(v38);
  id v41 = v40;
  uint64_t v42 = swift_errorRetain(v38);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v43, v44, v45, v46);
  if (os_log_type_enabled(v43, v47))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v112 = (uint64_t)a1;
    id v113 = (void *)v49;
    *(_DWORD *)uint64_t v48 = 136446466;
    id v50 = v41;
    uint64_t v51 = sub_100007578(&qword_1002573E0);
    uint64_t v52 = String.init<A>(describing:)(&v112, v51);
    uint64_t v54 = (_TtC18TrustedPeersHelper6Client *)v53;
    uint64_t v112 = sub_10017C4C4(v52, v53, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 4, v48 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v112 = v38;
    swift_errorRetain(v38);
    uint64_t v62 = sub_100007578(&qword_100251D70);
    uint64_t v63 = String.init<A>(describing:)(&v112, v62);
    BOOL v65 = (_TtC18TrustedPeersHelper6Client *)v64;
    uint64_t v112 = sub_10017C4C4(v63, v64, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v47,  "octagonContainsDistrustedRecoveryKeys failed for %{public}s: %{public}s",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v38, v115, v114);
  id v73 = sub_100177B68(v114[1], v114[2]);
  id v74 = (void *)_convertErrorToNSError(_:)(v73);
  v109[2](v109, 0LL, v74);

  swift_errorRelease();
  swift_errorRelease();
  id v106 = (_TtC18TrustedPeersHelper6Client *)v111;
LABEL_11:
  swift_release(v106, v99, v100, v101, v102, v103, v104, v105);
}

void sub_100194BC4( void *a1, uint64_t a2, uint64_t a3, void (**a4)(const void *, Class, Class, void *))
{
  uint64_t v111 = a2;
  uint64_t v112 = a3;
  SEL v114 = a4;
  uint64_t v115 = swift_allocObject(&unk_10023B228, 24LL, 7LL);
  *(void *)(v115 + 16) = v114;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v113 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v116 = (uint64_t)a1;
    id v117 = (void *)v12;
    *(_DWORD *)id v11 = 136446210;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v116, v14);
    SEL v17 = (_TtC18TrustedPeersHelper6Client *)v16;
    uint64_t v116 = sub_10017C4C4(v15, v16, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "fetchCurrentItem for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      void v110[9] = a1;
      uint64_t v25 = *(void *)(v112 + 24);
      id v26 = v8;
      id v27 = [v26 cloudkitContainerName];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      id v30 = v29;

      id v31 = [v26 octagonContextID];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v34 = v33;

      __chkstk_darwin(v35, v36);
      v110[2] = v25;
      v110[3] = v28;
      void v110[4] = v30;
      v110[5] = v32;
      v110[6] = v34;
      v110[7] = v26;
      uint64_t v37 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v117, sub_100195820, v110, v37);

      swift_bridgeObjectRelease(v34, v78, v79, v80, v81, v82, v83, v84);
      swift_bridgeObjectRelease(v30, v85, v86, v87, v88, v89, v90, v91);
      SEL v92 = v117;
      uint64_t v93 = swift_allocObject(&unk_10023B250, 32LL, 7LL);
      id v94 = (_TtC18TrustedPeersHelper6Client *)v115;
      *(void *)(v93 + 16) = sub_10019583C;
      *(void *)(v93 + 24) = v94;
      swift_retain(v94);
      sub_100146DE8(v111, (uint64_t)sub_100196FA4, v93);
      swift_release(v94, v95, v96, v97, v98, v99, v100, v101);

      id v109 = (_TtC18TrustedPeersHelper6Client *)v93;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v38 = sub_100043F74();
  uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
  *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
  *(_BYTE *)(v40 + 16) = 13;
  swift_willThrow(v39);
  id v41 = v8;
  swift_errorRetain(v39);
  id v42 = v41;
  uint64_t v43 = swift_errorRetain(v39);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
  if (os_log_type_enabled(v44, v48))
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(64LL, -1LL);
    uint64_t v116 = (uint64_t)a1;
    id v117 = (void *)v50;
    *(_DWORD *)uint64_t v49 = 136446466;
    id v51 = v42;
    uint64_t v52 = sub_100007578(&qword_1002573E0);
    uint64_t v53 = String.init<A>(describing:)(&v116, v52);
    SEL v55 = (_TtC18TrustedPeersHelper6Client *)v54;
    uint64_t v116 = sub_10017C4C4(v53, v54, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v116 = v39;
    swift_errorRetain(v39);
    uint64_t v63 = sub_100007578(&qword_100251D70);
    uint64_t v64 = String.init<A>(describing:)(&v116, v63);
    SEL v66 = (_TtC18TrustedPeersHelper6Client *)v65;
    uint64_t v116 = sub_10017C4C4(v64, v65, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v48,  "fetchCurrentItem failed for %{public}s: %{public}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v39, v119, v118);
  id v74 = sub_100177B68(v118[1], v118[2]);
  sub_100007620(0LL, &qword_100257408, off_10022CEC8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
  Class v76 = Array._bridgeToObjectiveC()().super.isa;
  int64_t v77 = (void *)_convertErrorToNSError(_:)(v74);
  v114[2](v114, isa, v76, v77);

  swift_errorRelease();
  swift_errorRelease();
  id v109 = (_TtC18TrustedPeersHelper6Client *)v115;
LABEL_11:
  swift_release(v109, v102, v103, v104, v105, v106, v107, v108);
}

void sub_1001951CC( void *a1, uint64_t a2, uint64_t a3, void (**a4)(const void *, Class, Class, void *))
{
  uint64_t v111 = a2;
  uint64_t v112 = a3;
  SEL v114 = a4;
  uint64_t v115 = swift_allocObject(&unk_10023B1D8, 24LL, 7LL);
  *(void *)(v115 + 16) = v114;
  _Block_copy(a4);
  if (qword_100250ED0 != -1) {
    swift_once(&qword_100250ED0, sub_100177AF8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100006BAC(v6, (uint64_t)qword_100257120);
  id v8 = a1;
  uint64_t v113 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v116 = (uint64_t)a1;
    id v117 = (void *)v12;
    *(_DWORD *)id v11 = 136446210;
    id v13 = v8;
    uint64_t v14 = sub_100007578(&qword_1002573E0);
    uint64_t v15 = String.init<A>(describing:)(&v116, v14);
    SEL v17 = (_TtC18TrustedPeersHelper6Client *)v16;
    uint64_t v116 = sub_10017C4C4(v15, v16, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "fetchPCSIdentityByPublicKey for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    if (a1)
    {
LABEL_5:
      void v110[9] = a1;
      uint64_t v25 = *(void *)(v112 + 24);
      id v26 = v8;
      id v27 = [v26 cloudkitContainerName];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      id v30 = v29;

      id v31 = [v26 octagonContextID];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v34 = v33;

      __chkstk_darwin(v35, v36);
      v110[2] = v25;
      v110[3] = v28;
      void v110[4] = v30;
      v110[5] = v32;
      v110[6] = v34;
      v110[7] = v26;
      uint64_t v37 = type metadata accessor for Container();
      OS_dispatch_queue.sync<A>(execute:)(&v117, sub_100195820, v110, v37);

      swift_bridgeObjectRelease(v34, v78, v79, v80, v81, v82, v83, v84);
      swift_bridgeObjectRelease(v30, v85, v86, v87, v88, v89, v90, v91);
      SEL v92 = v117;
      uint64_t v93 = swift_allocObject(&unk_10023B200, 32LL, 7LL);
      id v94 = (_TtC18TrustedPeersHelper6Client *)v115;
      *(void *)(v93 + 16) = sub_1001957F8;
      *(void *)(v93 + 24) = v94;
      swift_retain(v94);
      sub_100147F18(v111, (uint64_t)sub_100195834, v93);
      swift_release(v94, v95, v96, v97, v98, v99, v100, v101);

      id v109 = (_TtC18TrustedPeersHelper6Client *)v93;
      goto LABEL_11;
    }
  }

  else
  {

    if (a1) {
      goto LABEL_5;
    }
  }

  unint64_t v38 = sub_100043F74();
  uint64_t v39 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
  *(_OWORD *)uint64_t v40 = xmmword_1001E6990;
  *(_BYTE *)(v40 + 16) = 13;
  swift_willThrow(v39);
  id v41 = v8;
  swift_errorRetain(v39);
  id v42 = v41;
  uint64_t v43 = swift_errorRetain(v39);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v48 = static os_log_type_t.error.getter(v44, v45, v46, v47);
  if (os_log_type_enabled(v44, v48))
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(64LL, -1LL);
    uint64_t v116 = (uint64_t)a1;
    id v117 = (void *)v50;
    *(_DWORD *)uint64_t v49 = 136446466;
    id v51 = v42;
    uint64_t v52 = sub_100007578(&qword_1002573E0);
    uint64_t v53 = String.init<A>(describing:)(&v116, v52);
    SEL v55 = (_TtC18TrustedPeersHelper6Client *)v54;
    uint64_t v116 = sub_10017C4C4(v53, v54, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v116 = v39;
    swift_errorRetain(v39);
    uint64_t v63 = sub_100007578(&qword_100251D70);
    uint64_t v64 = String.init<A>(describing:)(&v116, v63);
    SEL v66 = (_TtC18TrustedPeersHelper6Client *)v65;
    uint64_t v116 = sub_10017C4C4(v64, v65, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v48,  "fetchPCSIdentityByPublicKey failed for %{public}s: %{public}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue(v39, v119, v118);
  id v74 = sub_100177B68(v118[1], v118[2]);
  sub_100007620(0LL, &qword_1002573D8, off_10022CED8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100007620(0LL, (unint64_t *)&qword_100256D50, &OBJC_CLASS___CKRecord_ptr);
  Class v76 = Array._bridgeToObjectiveC()().super.isa;
  int64_t v77 = (void *)_convertErrorToNSError(_:)(v74);
  v114[2](v114, isa, v76, v77);

  swift_errorRelease();
  swift_errorRelease();
  id v109 = (_TtC18TrustedPeersHelper6Client *)v115;
LABEL_11:
  swift_release(v109, v102, v103, v104, v105, v106, v107, v108);
}

uint64_t sub_1001957D4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001957F8(objc_class *a1, objc_class *a2, uint64_t a3)
{
}

void sub_100195820(uint64_t *a1@<X8>)
{
}

uint64_t sub_100195834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B134(a1, a2, a3, *(void (**)(uint64_t, uint64_t, id))(v3 + 16));
}

void sub_10019583C(objc_class *a1, objc_class *a2, uint64_t a3)
{
}

uint64_t sub_100195864()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100195888(char a1, uint64_t a2)
{
}

uint64_t sub_100195890(uint64_t a1, uint64_t a2)
{
  return sub_10017C120(a1, a2, *(void (**)(uint64_t, id))(v2 + 16));
}

uint64_t sub_1001958AC(char a1, uint64_t a2)
{
  return sub_10004B564(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(void, void))(v2 + 24));
}

uint64_t sub_1001958BC(uint64_t a1)
{
  return sub_100196538( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_10004B7C8);
}

uint64_t sub_1001958C8(uint64_t a1)
{
  return sub_100146910(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1001958D0(uint64_t a1)
{
  return sub_10019916C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001958EC(uint64_t a1, uint64_t a2)
{
  return sub_100143544( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32));
}

void sub_1001958FC(uint64_t a1)
{
}

uint64_t sub_100195908(char a1, uint64_t a2)
{
  return sub_10017C1B0(a1, a2, *(void (**)(void, id))(v2 + 16));
}

uint64_t sub_100195924(uint64_t a1, uint64_t a2)
{
  return sub_100143098( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32));
}

void sub_100195934(uint64_t a1)
{
}

uint64_t sub_100195944(uint64_t a1)
{
  return sub_10012C98C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100195950(uint64_t a1)
{
  return sub_10012C9B8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48),  *(unsigned __int8 *)(v1 + 49),  *(unsigned __int8 *)(v1 + 50));
}

void sub_10019597C(uint64_t a1)
{
}

void sub_100195988(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

uint64_t sub_100195994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012B9F0( a1,  a2,  a3,  *(void *)(v3 + 16),  *(uint64_t (**)(void, void, void))(v3 + 24),  *(void *)(v3 + 32));
}

uint64_t sub_1001959A0(uint64_t a1)
{
  return sub_10012BA30(a1, *(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_1001959A8(void *a1)
{
  return sub_100198B28( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_1001959C8()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_1001959D4(uint64_t a1, uint64_t a2)
{
  return sub_10017B95C( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void (**)(uint64_t, id))(v2 + 32),  *(void *)(v2 + 40),  0xD000000000000019LL,  0x80000001001FAC30LL);
}

uint64_t sub_100195A0C(uint64_t a1, uint64_t a2)
{
  return sub_100107FD4( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32));
}

uint64_t sub_100195A18()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100195AAC()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100107FF8( *(void *)(v0 + 16),  v0 + v2,  *(void (**)(void, void))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100195AF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100195B04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100195B14(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100195B1C()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100195B28(uint64_t a1)
{
  return sub_10017B8B0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(id))(v1 + 32),  *(void *)(v1 + 40),  0xD00000000000001ALL,  0x80000001001FAC50LL);
}

uint64_t sub_100195B60(uint64_t a1)
{
  return sub_100107394(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100195B6C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100195BE8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  sub_1001073C0( *(char **)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 32),  v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_100195C1C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100195C2C(objc_class *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100195C54()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100195C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B5E8( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void (**)(uint64_t, uint64_t, id))(v3 + 32),  *(void *)(v3 + 40),  0xD00000000000001ALL,  0x80000001001FAC70LL);
}

void sub_100195CA0(objc_class *a1, uint64_t a2)
{
}

uint64_t sub_100195CA8()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100195CB4(uint64_t a1, uint64_t a2)
{
  return sub_10017B95C( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void (**)(uint64_t, id))(v2 + 32),  *(void *)(v2 + 40),  0x766F636552746573LL,  0xEE0079654B797265LL);
}

uint64_t sub_100195CF4(uint64_t a1, uint64_t a2)
{
  return sub_100101054( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32));
}

uint64_t sub_100195D00()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

void sub_100195D44(uint64_t a1)
{
}

uint64_t sub_100195D74(void *a1)
{
  return sub_100121DF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100195D8C(uint64_t a1)
{
  return sub_100121E44(a1, *(void (**)(void, char *))(v1 + 16), *(void *)(v1 + 24));
}

void sub_100195D94(objc_class *a1, uint64_t a2)
{
}

void sub_100195D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100195DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011E24C(a1, a2, a3, *(void *)(v3 + 16), *(uint64_t (**)(void, void, void))(v3 + 24));
}

uint64_t sub_100195DB4()
{
  return sub_1001966B8(57LL);
}

void sub_100195DBC()
{
}

uint64_t sub_100195DD0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100195DE0( uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
}

uint64_t sub_100195DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10017AF84( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v7 + 16));
}

void sub_100195E0C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100195E18(uint64_t a1, char a2)
{
  return sub_1001B69F8(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void, void))(v2 + 24));
}

void sub_100195E28(uint64_t a1, objc_class *a2, uint64_t a3)
{
}

uint64_t sub_100195E34(_TtC18TrustedPeersHelper6Client *a1, _TtC18TrustedPeersHelper6Client *a2, char a3)
{
  return sub_100117E44(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void (**)(void, void, void))(v3 + 24));
}

uint64_t sub_100195E44(uint64_t a1)
{
  return sub_10017BF14(a1, *(void (**)(id))(v1 + 16));
}

uint64_t sub_100195E60(uint64_t a1)
{
  return sub_100116394(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

id sub_100195E70()
{
  return sub_1001163C0( *(void *)(v0 + 16),  *(void (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 40));
}

uint64_t sub_100195E7C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100195E90(uint64_t a1)
{
  return sub_100114B00(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

void sub_100195EA0()
{
}

uint64_t sub_100195EAC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100195EC0(uint64_t a1)
{
  return sub_1001148E4(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

void sub_100195ED0()
{
}

uint64_t sub_100195EDC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100195EEC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100195F08(uint64_t a1, uint64_t a2)
{
  return sub_100133FCC( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32));
}

uint64_t sub_100195F14()
{
  return sub_100196D88((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100195F20()
{
}

uint64_t sub_100195F2C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100195F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100133F8C( a1,  a2,  a3,  *(void *)(v3 + 16),  *(uint64_t (**)(void, void, void))(v3 + 24),  *(void *)(v3 + 32));
}

uint64_t sub_100195F4C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    swift_bridgeObjectRelease(*(void *)(v0 + 104));
  }

  return swift_deallocObject(v0, 145LL, 7LL);
}

uint64_t sub_100195FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007578(&qword_100256E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_100196000(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_100196008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10017A5E8(a1, a2, a3, a4, a5, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id))(v5 + 16));
}

uint64_t sub_100196024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10012F1CC( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(uint64_t (**)(void, void, void, void, void))(v5 + 24),  *(void *)(v5 + 32));
}

uint64_t sub_100196030()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100196074(void *a1)
{
}

uint64_t sub_100196088(uint64_t a1, uint64_t a2)
{
  return sub_10012DF38( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32));
}

uint64_t sub_100196094()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001960C8(uint64_t a1)
{
}

void sub_1001960D4( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, objc_class *a5, uint64_t a6, uint64_t a7)
{
}

uint64_t sub_1001960DC()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_1001960E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10017A120( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(void *)(v7 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v7 + 32),  *(void *)(v7 + 40),  0xD000000000000014LL,  0x80000001001FACB0LL);
}

uint64_t sub_100196138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100110C78( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 24),  *(void *)(v7 + 32));
}

uint64_t sub_100196160()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10019619C()
{
  return sub_1001967E4((uint64_t (*)(void, void, void, void, void, void))sub_100110CC4);
}

uint64_t sub_1001961A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001961B8()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_1001961C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10017A120( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(void *)(v7 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v7 + 32),  *(void *)(v7 + 40),  0xD000000000000024LL,  0x80000001001FACD0LL);
}

uint64_t sub_100196214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10010E828( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 24),  *(void *)(v7 + 32));
}

uint64_t sub_100196240()
{
  return sub_100044B00((uint64_t (*)(void, void, void, void, void))sub_10010E874);
}

uint64_t sub_10019624C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10019625C(objc_class *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100196284()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B5E8( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void (**)(uint64_t, uint64_t, id))(v3 + 32),  *(void *)(v3 + 40),  0xD000000000000022LL,  0x80000001001FAD00LL);
}

uint64_t sub_1001962D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010CA68( a1,  a2,  a3,  *(void *)(v3 + 16),  *(uint64_t (**)(void, void, void))(v3 + 24),  *(void *)(v3 + 32));
}

uint64_t sub_1001962E4()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100196320()
{
  return sub_100044B00((uint64_t (*)(void, void, void, void, void))sub_10010CAA8);
}

uint64_t sub_10019632C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10019633C()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10017A120( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(void *)(v7 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v7 + 32),  *(void *)(v7 + 40),  0xD00000000000001ALL,  0x80000001001FAD30LL);
}

uint64_t sub_100196398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10010ABF8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 24),  *(void *)(v7 + 32));
}

uint64_t sub_1001963C0()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

void sub_100196404()
{
}

uint64_t sub_100196418()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100196428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100196430()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_10019643C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100179EB0( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(void *)(v4 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, id))(v4 + 32),  *(void *)(v4 + 40),  0xD000000000000029LL,  0x80000001001FAD50LL);
}

uint64_t sub_100196480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000489F4( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(uint64_t (**)(void, void, void, void))(v4 + 24),  *(void *)(v4 + 32));
}

uint64_t sub_10019648C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001964C0(uint64_t a1)
{
}

uint64_t sub_1001964CC()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_1001964D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100179EB0( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(void *)(v4 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, id))(v4 + 32),  *(void *)(v4 + 40),  0xD000000000000020LL,  0x80000001001FAD80LL);
}

uint64_t sub_10019651C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100046934( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(uint64_t (**)(void, void, void, void))(v4 + 24),  *(void *)(v4 + 32));
}

uint64_t sub_10019652C(uint64_t a1)
{
  return sub_100196538( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_100046974);
}

uint64_t sub_100196538( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_100196550()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_10019655C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10017A120( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(void *)(v7 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v7 + 32),  *(void *)(v7 + 40),  0xD000000000000014LL,  0x80000001001FADB0LL);
}

uint64_t sub_1001965AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100108618( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *)(v7 + 16),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 24),  *(void *)(v7 + 32));
}

uint64_t sub_1001965D4()
{
  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(v0 + 32), v1, v2, v3, v4, v5, v6, v7);
  swift_release(*(_TtC18TrustedPeersHelper6Client **)(v0 + 48), v8, v9, v10, v11, v12, v13, v14);
  sub_10000852C(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(v0 + 80), v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(v0 + 88), v22, v23, v24, v25, v26, v27, v28);
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100196620()
{
  return sub_100108664( *(char **)(v0 + 16),  *(_WORD **)(v0 + 24),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 32),  *(void (**)(void, unint64_t, void, unint64_t, void, void, uint64_t))(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(_TtC18TrustedPeersHelper6Client **)(v0 + 80),  *(void *)(v0 + 88));
}

uint64_t sub_100196654()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100196664(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

uint64_t sub_10019666C()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196678(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100179A44( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(void *)(v5 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, void, id))(v5 + 32));
}

uint64_t sub_1001966A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_10004170C( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(uint64_t (**)(void, void, void, void, void))(v5 + 24));
}

uint64_t sub_1001966B0()
{
  return sub_1001966B8(56LL);
}

uint64_t sub_1001966B8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(v1 + 32));
  swift_release(*(void *)(v1 + 48));
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_1001966F8()
{
  return sub_100044B00((uint64_t (*)(void, void, void, void, void))sub_100041990);
}

uint64_t sub_100196704()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100196714(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
}

uint64_t sub_10019671C()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100179634( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(void *)(v5 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id))(v5 + 32));
}

uint64_t sub_100196750()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_10019675C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100179484( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(void *)(v5 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id))(v5 + 32));
}

uint64_t sub_100196788(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000FAC4C( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(uint64_t (**)(void, void, void, void, void))(v5 + 24));
}

uint64_t sub_100196794()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001967D8()
{
  return sub_1001967E4((uint64_t (*)(void, void, void, void, void, void))sub_1000FAF60);
}

uint64_t sub_1001967E4(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001967F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

__n128 sub_100196808( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, void *a13, objc_class *a14, uint64_t a15)
{
  return result;
}

uint64_t sub_100196840()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_10019684C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return sub_100178F44( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  *(void *)(v15 + 16),  *(void *)(v15 + 24),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v15 + 32));
}

uint64_t sub_100196894( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return sub_1000F56FC( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  *(void *)(v15 + 16),  *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 24));
}

uint64_t sub_1001968D8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));

  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  return swift_deallocObject(v0, 160LL, 7LL);
}

uint64_t sub_10019694C(uint64_t a1)
{
  return sub_1000F5A8C( a1,  *(void (**)(void, void, void, unint64_t, void, unint64_t, void, unint64_t, void, unint64_t, void, void, void, void, uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 40),  *(void **)(v1 + 48),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 56),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 64),  *(void **)(v1 + 72),  *(void **)(v1 + 80),  *(_DWORD *)(v1 + 88),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 96),  *(void **)(v1 + 104),  *(void *)(v1 + 112),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 120),  *(void *)(v1 + 128),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 136),  *(void *)(v1 + 144),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 152));
}

void sub_1001969A4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001969AC()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_1001969B8(uint64_t a1, uint64_t a2)
{
  return sub_10017B95C( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void (**)(uint64_t, id))(v2 + 32),  *(void *)(v2 + 40),  0xD00000000000001ALL,  0x80000001001FAE10LL);
}

uint64_t sub_1001969EC()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_1001969F8(uint64_t a1)
{
  return sub_10017B8B0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(id))(v1 + 32),  *(void *)(v1 + 40),  0xD00000000000001BLL,  0x80000001001FAE60LL);
}

uint64_t sub_100196A30(uint64_t a1)
{
  return sub_1001A58B8(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100196A40()
{
  return sub_1001A5B08(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_100196A4C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100196A5C()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196A68(char a1, uint64_t a2)
{
  return sub_1001784BC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void, id))(v2 + 32));
}

uint64_t sub_100196A74()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196A80(uint64_t a1)
{
  return sub_10017B8B0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(id))(v1 + 32),  *(void *)(v1 + 40),  0x6572206C61636F4CLL,  0xEB00000000746573LL);
}

uint64_t sub_100196ABC(uint64_t a1)
{
  return sub_1000F418C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100196ACC()
{
  return sub_1000F41B8(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_100196AD8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100196AE8()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196AF4(uint64_t a1)
{
  return sub_10017B8B0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(id))(v1 + 32),  *(void *)(v1 + 40),  0xD000000000000024LL,  0x80000001001F6B90LL);
}

uint64_t sub_100196B2C(uint64_t a1)
{
  return sub_1000F3B2C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100196B38()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100196B64()
{
  return sub_1000F3B58( *(_BYTE *)(v0 + 16),  *(_BYTE *)(v0 + 17),  *(_BYTE *)(v0 + 18),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_100196B7C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100196B8C()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196B98(uint64_t a1)
{
  return sub_10017B8B0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(id))(v1 + 32),  *(void *)(v1 + 40),  0x6E69747465736552LL,  0xE900000000000067LL);
}

void sub_100196BCC(uint64_t a1, objc_class *a2, uint64_t a3)
{
}

uint64_t sub_100196BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B134(a1, a2, a3, *(void (**)(uint64_t, uint64_t, id))(v3 + 16));
}

uint64_t sub_100196BF0(void *a1, uint64_t a2)
{
  return sub_1000EC658(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(void, void))(v2 + 24));
}

void sub_100196C00()
{
}

uint64_t sub_100196C0C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100196C1C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100196C48()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196C54(uint64_t a1, uint64_t a2)
{
  return sub_10017B95C( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void (**)(uint64_t, id))(v2 + 32),  *(void *)(v2 + 40),  0xD00000000000001ALL,  0x80000001001FAEA0LL);
}

void sub_100196C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100196C90()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B5E8( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void (**)(uint64_t, uint64_t, id))(v3 + 32),  *(void *)(v3 + 40),  0xD00000000000001ALL,  0x80000001001FAEC0LL);
}

uint64_t sub_100196CDC()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B5E8( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void (**)(uint64_t, uint64_t, id))(v3 + 32),  *(void *)(v3 + 40),  0xD000000000000014LL,  0x80000001001FA400LL);
}

void sub_100196D28(uint64_t a1, uint64_t a2)
{
}

void sub_100196D5C(uint64_t *a1@<X8>)
{
}

uint64_t sub_100196D7C()
{
  return sub_100196D88((void (*)(void))&_swift_release);
}

uint64_t sub_100196D88(void (*a1)(void))
{
  swift_release(*(void *)(v1 + 40));
  return swift_deallocObject(v1, 48LL, 7LL);
}

uint64_t sub_100196DC0(uint64_t a1, uint64_t a2)
{
  return sub_10017B95C( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void (**)(uint64_t, id))(v2 + 32),  *(void *)(v2 + 40),  0x676E69706D7544LL,  0xE700000000000000LL);
}

uint64_t CuttlefishAPI.ResetOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, (uint64_t *)&unk_100251E90, 0x7465736572LL, 0xE500000000000000LL);
}

uint64_t CuttlefishAPI.EstablishOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251E80, 0x73696C6261747365LL, 0xE900000000000068LL);
}

uint64_t sub_100197048(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_100007578(a2);
  __chkstk_darwin(v9, v10);
  id v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = objc_allocWithZone(v4);
  sub_10000FC68(a1, (uint64_t)v12, a2);
  uint64_t v14 = CKCodeOperation.init(functionName:request:)(a3, a4, v12);
  sub_100041590(a1, a2);
  return v14;
}

uint64_t CuttlefishAPI.JoinWithVoucherOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, (uint64_t *)&unk_100251E70, 0x687469576E696F6ALL, 0xEF72656863756F56LL);
}

uint64_t CuttlefishAPI.UpdateTrustOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, (uint64_t *)&unk_100251E60, 0x7254657461647075LL, 0xEB00000000747375LL);
}

uint64_t CuttlefishAPI.SetRecoveryKeyOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, (uint64_t *)&unk_100251E50, 0x766F636552746573LL, 0xEE0079654B797265LL);
}

uint64_t CuttlefishAPI.FetchChangesOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251E40, 0x6168436863746566LL, 0xEC0000007365676ELL);
}

uint64_t CuttlefishAPI.FetchViableBottlesOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251E30, 0xD000000000000012LL, 0x80000001001F6CE0LL);
}

uint64_t CuttlefishAPI.FetchPolicyDocumentsOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251E20, 0xD000000000000014LL, 0x80000001001F6CC0LL);
}

uint64_t CuttlefishAPI.GetRepairActionOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, (uint64_t *)&unk_100251E10, 0x6961706552746567LL, 0xEF6E6F6974634172LL);
}

uint64_t CuttlefishAPI.GetSupportAppInfoOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251E00, 0xD000000000000011LL, 0x80000001001F6CA0LL);
}

uint64_t CuttlefishAPI.ResetAccountCdpcontentsOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, (uint64_t *)&unk_100251DF0, 0xD000000000000017LL, 0x80000001001F6C80LL);
}

uint64_t CuttlefishAPI.AddCustodianRecoveryKeyOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251DE0, 0xD000000000000017LL, 0x80000001001F6C60LL);
}

uint64_t CuttlefishAPI.FetchRecoverableTlksharesOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251DD0, 0xD000000000000019LL, 0x80000001001F6C40LL);
}

uint64_t CuttlefishAPI.RemoveRecoveryKeyOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251DC0, 0xD000000000000011LL, 0x80000001001F6C20LL);
}

uint64_t CuttlefishAPI.PerformAtoprvactionsOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251DB0, 0xD000000000000014LL, 0x80000001001F6C00LL);
}

uint64_t CuttlefishAPI.FetchCurrentItemOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, (uint64_t *)&unk_100251DA0, 0xD000000000000010LL, 0x80000001001F6BE0LL);
}

uint64_t CuttlefishAPI.FetchPcsidentityByPublicKeyOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251D90, 0xD00000000000001BLL, 0x80000001001F6BC0LL);
}

uint64_t CuttlefishAPI.PerformCkserverUnreadableDataRemovalOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100197048(a1, &qword_100251D80, 0xD000000000000024LL, 0x80000001001F6B90LL);
}

uint64_t CuttlefishAPIAsync.updateTrust(changeToken:peerID:stableInfoAndSig:dynamicInfoAndSig:tlkShares:viewKeys:trustedDevicesVersion:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v32 = a13;
  uint64_t v30 = a11;
  uint64_t v31 = a12;
  __int128 v27 = a9;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, type metadata accessor for UpdateTrustRequest);
  SEL v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = v28;
  uint64_t v41 = v29;
  __int128 v42 = a9;
  uint64_t v43 = a10;
  int64_t v24 = v23;
  uint64_t v25 = sub_1000077B8(&qword_100252708, v23, (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
  static Message.with(_:)(sub_100197FC0, v33, updated, v25);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 32))(v22, v30, v31, v32, a14);
  return sub_1000415CC((uint64_t)v22, v24);
}

uint64_t CuttlefishAPIAsync.getSupportAppInfo(metrics:accountInfo:page:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  SupportAppInfouint64_t Request = type metadata accessor for GetSupportAppInfoRequest(0LL);
  __chkstk_darwin(SupportAppInfoRequest, type metadata accessor for GetSupportAppInfoRequest);
  id v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  char v28 = a4 & 1;
  BOOL v20 = v19;
  uint64_t v21 = sub_1000077B8(&qword_100252900, v19, (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
  static Message.with(_:)(sub_100198B3C, v24, SupportAppInfoRequest, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 96))(v18, a5, a6, a7, a8);
  return sub_1000415CC((uint64_t)v18, v20);
}

uint64_t CuttlefishAPIAsync.performAtoprvactions(metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = &v18[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v16 = sub_1000077B8( &qword_100252788,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
  static Message.with(_:)(sub_100199180, v18, v12, v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 120))(v15, a3, a4, a5, a6);
  return sub_1000415CC((uint64_t)v15, type metadata accessor for PerformATOPRVActionsRequest);
}

uint64_t CuttlefishAPI.ResetOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, (uint64_t *)&unk_100251E90, 0x7465736572LL, 0xE500000000000000LL);
}

void CuttlefishAPI.ResetOperation.init(functionName:request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.EstablishOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251E80, 0x73696C6261747365LL, 0xE900000000000068LL);
}

uint64_t sub_100197718(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100007578(a2);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(a1, (uint64_t)v11, a2);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(a3, a4, v11);
  sub_100041590(a1, a2);
  return v12;
}

void CuttlefishAPI.EstablishOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.JoinWithVoucherOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, (uint64_t *)&unk_100251E70, 0x687469576E696F6ALL, 0xEF72656863756F56LL);
}

void CuttlefishAPI.JoinWithVoucherOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.UpdateTrustOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, (uint64_t *)&unk_100251E60, 0x7254657461647075LL, 0xEB00000000747375LL);
}

void CuttlefishAPI.UpdateTrustOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.SetRecoveryKeyOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, (uint64_t *)&unk_100251E50, 0x766F636552746573LL, 0xEE0079654B797265LL);
}

void CuttlefishAPI.SetRecoveryKeyOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.AddCustodianRecoveryKeyOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251DE0, 0xD000000000000017LL, 0x80000001001F6C60LL);
}

void CuttlefishAPI.AddCustodianRecoveryKeyOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.FetchChangesOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251E40, 0x6168436863746566LL, 0xEC0000007365676ELL);
}

void CuttlefishAPI.FetchChangesOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.FetchViableBottlesOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251E30, 0xD000000000000012LL, 0x80000001001F6CE0LL);
}

void CuttlefishAPI.FetchViableBottlesOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.FetchRecoverableTlksharesOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251DD0, 0xD000000000000019LL, 0x80000001001F6C40LL);
}

void CuttlefishAPI.FetchRecoverableTlksharesOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.FetchPolicyDocumentsOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251E20, 0xD000000000000014LL, 0x80000001001F6CC0LL);
}

void CuttlefishAPI.FetchPolicyDocumentsOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.GetRepairActionOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, (uint64_t *)&unk_100251E10, 0x6961706552746567LL, 0xEF6E6F6974634172LL);
}

void CuttlefishAPI.GetRepairActionOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.GetSupportAppInfoOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251E00, 0xD000000000000011LL, 0x80000001001F6CA0LL);
}

void CuttlefishAPI.GetSupportAppInfoOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.ResetAccountCdpcontentsOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, (uint64_t *)&unk_100251DF0, 0xD000000000000017LL, 0x80000001001F6C80LL);
}

void CuttlefishAPI.ResetAccountCdpcontentsOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.RemoveRecoveryKeyOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251DC0, 0xD000000000000011LL, 0x80000001001F6C20LL);
}

void CuttlefishAPI.RemoveRecoveryKeyOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.PerformAtoprvactionsOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251DB0, 0xD000000000000014LL, 0x80000001001F6C00LL);
}

void CuttlefishAPI.PerformAtoprvactionsOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.FetchPcsidentityByPublicKeyOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251D90, 0xD00000000000001BLL, 0x80000001001F6BC0LL);
}

void CuttlefishAPI.FetchPcsidentityByPublicKeyOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.FetchCurrentItemOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, (uint64_t *)&unk_100251DA0, 0xD000000000000010LL, 0x80000001001F6BE0LL);
}

void CuttlefishAPI.FetchCurrentItemOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPI.PerformCkserverUnreadableDataRemovalOperation.init(request:)(uint64_t a1)
{
  return sub_100197718(a1, &qword_100251D80, 0xD000000000000024LL, 0x80000001001F6B90LL);
}

void CuttlefishAPI.PerformCkserverUnreadableDataRemovalOperation.init(functionName:request:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100197BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

id _s18TrustedPeersHelper13CuttlefishAPIO45PerformCkserverUnreadableDataRemovalOperationCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t CuttlefishAPIAsync.reset(resetReason:idmsTargetContext:idmsCuttlefishPassword:testingNotifyIdms:accountInfo:metrics:isGuitarfish:completion:)( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v29 = a7;
  uint64_t v28 = a6;
  uint64_t v32 = a11;
  uint64_t v30 = a8;
  uint64_t v31 = a12;
  uint64_t v33 = a13;
  uint64_t v19 = type metadata accessor for ResetRequest(0LL);
  __chkstk_darwin(v19, v20);
  SEL v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = a1;
  __int16 v36 = a2 & 0x1FF;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = v28;
  char v41 = v29;
  uint64_t v42 = v30;
  uint64_t v43 = a9;
  char v44 = a10;
  int64_t v24 = v23;
  uint64_t v25 = sub_1000077B8( (unint64_t *)&unk_100257080,  v23,  (uint64_t)&protocol conformance descriptor for ResetRequest);
  static Message.with(_:)(sub_100199198, v34, v19, v25);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 8))(v22, v32, v31, v33, a14);
  return sub_1000415CC((uint64_t)v22, v24);
}

uint64_t CuttlefishAPIAsync.establish(peer:bottle:viewKeys:tlkShares:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v25 = a8;
  uint64_t v24 = a7;
  uint64_t v16 = type metadata accessor for EstablishRequest(0LL);
  __chkstk_darwin(v16, type metadata accessor for EstablishRequest);
  id v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v20 = v19;
  uint64_t v21 = sub_1000077B8(&qword_1002526A8, v19, (uint64_t)&protocol conformance descriptor for EstablishRequest);
  static Message.with(_:)(sub_1001991B4, v26, v16, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 16))(v18, v24, v25, a9, a10);
  return sub_1000415CC((uint64_t)v18, v20);
}

uint64_t CuttlefishAPIAsync.joinWithVoucher(changeToken:peer:bottle:tlkShares:viewKeys:trustedDevicesVersion:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v30 = a12;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v19 = type metadata accessor for JoinWithVoucherRequest(0LL);
  __chkstk_darwin(v19, type metadata accessor for JoinWithVoucherRequest);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = v26;
  uint64_t v39 = v27;
  uint64_t v40 = a9;
  uint64_t v23 = v22;
  uint64_t v24 = sub_1000077B8(&qword_1002526D8, v22, (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
  static Message.with(_:)(sub_1001991C8, v31, v19, v24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a13 + 24))(v21, v28, v29, v30, a13);
  return sub_1000415CC((uint64_t)v21, v23);
}

uint64_t sub_100197F94( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_10019C9E0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_100197FC0(void *a1)
{
  return sub_10019D1FC(a1);
}

uint64_t CuttlefishAPIAsync.setRecoveryKey(changeToken:peerID:recoverySigningPubKey:recoveryEncryptionPubKey:stableInfoAndSig:tlkShares:metrics:accountInfo:viewKeys:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v30 = a8;
  uint64_t v29 = a7;
  uint64_t v32 = a13;
  uint64_t v33 = a14;
  uint64_t v31 = a12;
  v28[1] = a10;
  v28[0] = a9;
  uint64_t v21 = type metadata accessor for SetRecoveryKeyRequest(0LL);
  __chkstk_darwin(v21, type metadata accessor for SetRecoveryKeyRequest);
  uint64_t v23 = (char *)v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = v29;
  uint64_t v42 = v30;
  __int128 v43 = a9;
  __int128 v44 = a10;
  uint64_t v45 = a11;
  uint64_t v25 = v24;
  uint64_t v26 = sub_1000077B8( (unint64_t *)&unk_100256D40,  v24,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
  static Message.with(_:)(sub_1001991DC, v34, v21, v26);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a15 + 40))(v23, v31, v32, v33, a15);
  return sub_1000415CC((uint64_t)v23, v25);
}

uint64_t CuttlefishAPIAsync.addCustodianRecoveryKey(changeToken:peerID:peer:stableInfoAndSig:tlkShares:dynamicInfoAndSig:metrics:accountInfo:viewKeys:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v32 = a13;
  uint64_t v30 = a11;
  uint64_t v31 = a12;
  __int128 v27 = a9;
  uint64_t v20 = type metadata accessor for AddCustodianRecoveryKeyRequest(0LL);
  __chkstk_darwin(v20, type metadata accessor for AddCustodianRecoveryKeyRequest);
  uint64_t v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = v28;
  uint64_t v41 = v29;
  __int128 v42 = a9;
  uint64_t v43 = a10;
  uint64_t v24 = v23;
  uint64_t v25 = sub_1000077B8( (unint64_t *)&unk_100257070,  v23,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
  static Message.with(_:)(sub_1001991F0, v33, v20, v25);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 48))(v22, v30, v31, v32, a14);
  return sub_1000415CC((uint64_t)v22, v24);
}

uint64_t CuttlefishAPIAsync.fetchChanges(changeToken:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  __chkstk_darwin(ChangesRequest, type metadata accessor for FetchChangesRequest);
  id v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v20 = v19;
  uint64_t v21 = sub_1000077B8( (unint64_t *)&unk_100256FB0,  v19,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
  static Message.with(_:)(sub_100199204, v24, ChangesRequest, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 56))(v18, a5, a6, a7, a8);
  return sub_1000415CC((uint64_t)v18, v20);
}

uint64_t CuttlefishAPIAsync.fetchViableBottles(filterRequest:metrics:accountInfo:completion:)( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ViableBottlesuint64_t Request = type metadata accessor for FetchViableBottlesRequest(0LL);
  __chkstk_darwin(ViableBottlesRequest, v17);
  uint64_t v19 = &v25[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v26 = a1;
  __int16 v27 = a2 & 0x1FF;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v21 = v20;
  uint64_t v22 = sub_1000077B8( (unint64_t *)&unk_100257020,  v20,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
  static Message.with(_:)(sub_100199228, v25, ViableBottlesRequest, v22);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 64))(v19, a5, a6, a7, a8);
  return sub_1000415CC((uint64_t)v19, v21);
}

uint64_t CuttlefishAPIAsync.fetchRecoverableTlkshares(peerID:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RecoverableTLKSharesuint64_t Request = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  __chkstk_darwin(RecoverableTLKSharesRequest, type metadata accessor for FetchRecoverableTLKSharesRequest);
  uint64_t v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v20 = v19;
  uint64_t v21 = sub_1000077B8( &qword_100252830,  v19,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
  static Message.with(_:)(sub_10019923C, v24, RecoverableTLKSharesRequest, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 72))(v18, a5, a6, a7, a8);
  return sub_1000415CC((uint64_t)v18, v20);
}

uint64_t sub_1001985CC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  unint64_t v54 = a6;
  uint64_t v50 = a2;
  uint64_t v51 = a5;
  uint64_t v9 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v48 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v17);
  uint64_t v49 = (uint64_t)&v47 - v18;
  uint64_t v19 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for Metrics(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v29);
  uint64_t v31 = (char *)&v47 - v30;
  if (a3)
  {
    uint64_t v32 = (_TtC18TrustedPeersHelper6Client *)a1[1];
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    *a1 = v50;
    a1[1] = a3;
  }

  sub_10000FC68(a4, (uint64_t)v22, &qword_100257000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23) == 1)
  {
    sub_100041590((uint64_t)v22, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v22, (uint64_t)v31, type metadata accessor for Metrics);
    sub_10004164C((uint64_t)v31, (uint64_t)v28, type metadata accessor for Metrics);
    uint64_t v40 = (uint64_t)a1 + *(int *)(v54(0LL) + 24);
    sub_100041590(v40, &qword_100257000);
    sub_100041608((uint64_t)v28, v40, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v40, 0LL, 1LL, v23);
    sub_1000415CC((uint64_t)v31, type metadata accessor for Metrics);
  }

  sub_10000FC68(v51, (uint64_t)v12, &qword_100251F50);
  uint64_t v42 = v52;
  uint64_t v41 = v53;
  uint64_t v44 = v49;
  sub_100041608((uint64_t)v12, v49, type metadata accessor for AccountInfo);
  uint64_t v45 = v48;
  sub_10004164C(v44, v48, type metadata accessor for AccountInfo);
  uint64_t v46 = (uint64_t)a1 + *(int *)(v54(0LL) + 28);
  sub_100041590(v46, &qword_100251F50);
  sub_100041608(v45, v46, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v46, 0LL, 1LL, v41);
  return sub_1000415CC(v44, type metadata accessor for AccountInfo);
}

uint64_t CuttlefishAPIAsync.fetchPolicyDocuments(keys:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, type metadata accessor for FetchPolicyDocumentsRequest);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8(&qword_100256DA0, v17, (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
  static Message.with(_:)(sub_100199260, v21, PolicyDocumentsRequest, v19);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 80))(v16, a4, a5, a6, a7);
  return sub_1000415CC((uint64_t)v16, v18);
}

uint64_t CuttlefishAPIAsync.getRepairAction(peerID:requiresEscrowCheck:knownFederations:performCleanup:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a10;
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  __chkstk_darwin(RepairActionRequest, type metadata accessor for GetRepairActionRequest);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  char v31 = a3;
  uint64_t v32 = a4;
  char v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v22 = v21;
  uint64_t v23 = sub_1000077B8(&qword_100252898, v21, (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
  static Message.with(_:)(sub_100199284, v28, RepairActionRequest, v23);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a11 + 88))(v20, v27, v25, v26, a11);
  return sub_1000415CC((uint64_t)v20, v22);
}

uint64_t sub_100198B28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_10019F268(a1, a2, a3, a4, a5);
}

uint64_t sub_100198B3C(void *a1)
{
  return sub_10019F588(a1);
}

uint64_t CuttlefishAPIAsync.resetAccountCdpcontents(resetReason:idmsTargetContext:idmsCuttlefishPassword:testingNotifyIdms:accountInfo:metrics:isGuitarfish:completion:)( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v29 = a7;
  uint64_t v28 = a6;
  uint64_t v32 = a11;
  uint64_t v30 = a8;
  uint64_t v31 = a12;
  uint64_t v33 = a13;
  uint64_t v19 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = a1;
  __int16 v36 = a2 & 0x1FF;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = v28;
  char v41 = v29;
  uint64_t v42 = v30;
  uint64_t v43 = a9;
  char v44 = a10;
  uint64_t v24 = v23;
  uint64_t v25 = sub_1000077B8( &qword_100252930,  v23,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
  static Message.with(_:)(sub_100199298, v34, v19, v25);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 104))(v22, v32, v31, v33, a14);
  return sub_1000415CC((uint64_t)v22, v24);
}

uint64_t sub_100198C9C( uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t (*a12)(void))
{
  int v68 = a8;
  uint64_t v66 = a4;
  uint64_t v67 = a6;
  uint64_t v63 = a2;
  uint64_t v16 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v16, v17);
  uint64_t v69 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Metrics(0LL);
  uint64_t v70 = *(void *)(v19 - 8);
  uint64_t v71 = v19;
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v64 = (uint64_t)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v23);
  uint64_t v65 = (uint64_t)&v62 - v24;
  uint64_t v25 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for AccountInfo(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v32 = __chkstk_darwin(v29, v31);
  uint64_t v34 = (char *)&v62 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32, v35);
  uint64_t v37 = (char *)&v62 - v36;
  if ((a3 & 0x100) == 0)
  {
    *(void *)a1 = v63;
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = a3 & 1;
  }

  if (a5)
  {
    uint64_t v38 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 24);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
    *(void *)(a1 + 16) = v66;
    *(void *)(a1 + 24) = a5;
  }

  if (a7)
  {
    uint64_t v46 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 40);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
    *(void *)(a1 + 32) = v67;
    *(void *)(a1 + 40) = a7;
  }

  sub_10000FC68(a9, (uint64_t)v28, &qword_100251F50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29) == 1)
  {
    sub_100041590((uint64_t)v28, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v28, (uint64_t)v37, type metadata accessor for AccountInfo);
    sub_10004164C((uint64_t)v37, (uint64_t)v34, type metadata accessor for AccountInfo);
    uint64_t v54 = a1 + *(int *)(a12(0LL) + 40);
    sub_100041590(v54, &qword_100251F50);
    sub_100041608((uint64_t)v34, v54, type metadata accessor for AccountInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v54, 0LL, 1LL, v29);
    sub_1000415CC((uint64_t)v37, type metadata accessor for AccountInfo);
  }

  uint64_t v55 = v69;
  sub_10000FC68(a10, v69, &qword_100257000);
  uint64_t v57 = v70;
  uint64_t v56 = v71;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v55, 1LL, v71) == 1)
  {
    uint64_t result = sub_100041590(v55, &qword_100257000);
  }

  else
  {
    uint64_t v59 = v65;
    sub_100041608(v55, v65, type metadata accessor for Metrics);
    uint64_t v60 = v64;
    sub_10004164C(v59, v64, type metadata accessor for Metrics);
    uint64_t v61 = a1 + *(int *)(a12(0LL) + 44);
    sub_100041590(v61, &qword_100257000);
    sub_100041608(v60, v61, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v61, 0LL, 1LL, v56);
    uint64_t result = sub_1000415CC(v59, type metadata accessor for Metrics);
  }

  if (a11 != 2) {
    *(_BYTE *)(a1 + 49) = a11 & 1;
  }
  return result;
}

uint64_t CuttlefishAPIAsync.removeRecoveryKey(changeToken:peerID:stableInfoAndSig:dynamicInfoAndSig:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v29 = a9;
  uint64_t v27 = a8;
  uint64_t v28 = a10;
  uint64_t v30 = a11;
  uint64_t v19 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  __chkstk_darwin(v19, type metadata accessor for RemoveRecoveryKeyRequest);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v39 = v27;
  uint64_t v23 = v22;
  uint64_t v24 = sub_1000077B8( (unint64_t *)&unk_100256C80,  v22,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
  static Message.with(_:)(sub_1001992B4, v31, v19, v24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 112))(v21, v29, v28, v30, a12);
  return sub_1000415CC((uint64_t)v21, v23);
}

uint64_t sub_10019916C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A0000(a1, a2, a3);
}

uint64_t sub_100199180(uint64_t a1)
{
  return sub_1001A0000(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100199198(uint64_t a1)
{
  return sub_10019F6FC(a1, type metadata accessor for ResetRequest);
}

uint64_t sub_1001991B4(uint64_t a1)
{
  return sub_10019BE9C(a1);
}

uint64_t sub_1001991C8(uint64_t a1)
{
  return sub_10019C864(a1);
}

void sub_1001991DC(void *a1)
{
}

void sub_1001991F0(uint64_t a1)
{
}

uint64_t sub_100199204(void *a1)
{
  return sub_1001985CC(a1, v1[2], v1[3], v1[4], v1[5], type metadata accessor for FetchChangesRequest);
}

uint64_t sub_100199228(void *a1)
{
  return sub_10019EA18(a1);
}

uint64_t sub_10019923C(void *a1)
{
  return sub_1001985CC(a1, v1[2], v1[3], v1[4], v1[5], type metadata accessor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_100199260(_TtC18TrustedPeersHelper6Client **a1)
{
  return sub_1001993D8( a1,  *(_TtC18TrustedPeersHelper6Client **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for FetchPolicyDocumentsRequest);
}

uint64_t sub_100199284(uint64_t a1)
{
  return sub_10019F11C(a1);
}

uint64_t sub_100199298(uint64_t a1)
{
  return sub_10019F6FC(a1, type metadata accessor for ResetAccountCDPContentsRequest);
}

uint64_t sub_1001992B4(void *a1)
{
  return sub_10019FEC0(a1);
}

uint64_t CuttlefishAPIAsync.fetchPcsidentityByPublicKey(pcsServices:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  __chkstk_darwin(Request, type metadata accessor for DirectPCSIdentityFetchRequest);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8( (unint64_t *)&unk_100256F20,  v17,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
  static Message.with(_:)(sub_100199708, v21, Request, v19);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 128))(v16, a4, a5, a6, a7);
  return sub_1000415CC((uint64_t)v16, v18);
}

uint64_t sub_1001993D8( _TtC18TrustedPeersHelper6Client **a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  id v51 = a5;
  uint64_t v48 = a4;
  uint64_t v8 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AccountInfo(0LL);
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v46 = (uint64_t)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v16);
  uint64_t v47 = (uint64_t)&v46 - v17;
  uint64_t v18 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Metrics(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v46 - v29;
  if (*(void *)a2->endpoint)
  {
    uint64_t v31 = *a1;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
    *a1 = a2;
  }

  sub_10000FC68(a3, (uint64_t)v21, &qword_100257000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
  {
    sub_100041590((uint64_t)v21, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v21, (uint64_t)v30, type metadata accessor for Metrics);
    sub_10004164C((uint64_t)v30, (uint64_t)v27, type metadata accessor for Metrics);
    uint64_t v39 = (uint64_t)a1 + *(int *)(v51(0LL) + 24);
    sub_100041590(v39, &qword_100257000);
    sub_100041608((uint64_t)v27, v39, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v39, 0LL, 1LL, v22);
    sub_1000415CC((uint64_t)v30, type metadata accessor for Metrics);
  }

  sub_10000FC68(v48, (uint64_t)v11, &qword_100251F50);
  uint64_t v41 = v49;
  uint64_t v40 = v50;
  uint64_t v43 = v47;
  sub_100041608((uint64_t)v11, v47, type metadata accessor for AccountInfo);
  uint64_t v44 = v46;
  sub_10004164C(v43, v46, type metadata accessor for AccountInfo);
  uint64_t v45 = (uint64_t)a1 + *(int *)(v51(0LL) + 28);
  sub_100041590(v45, &qword_100251F50);
  sub_100041608(v44, v45, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v45, 0LL, 1LL, v40);
  return sub_1000415CC(v43, type metadata accessor for AccountInfo);
}

uint64_t sub_100199708(_TtC18TrustedPeersHelper6Client **a1)
{
  return sub_1001993D8( a1,  *(_TtC18TrustedPeersHelper6Client **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for DirectPCSIdentityFetchRequest);
}

uint64_t CuttlefishAPIAsync.fetchCurrentItem(currentItems:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  __chkstk_darwin(Request, type metadata accessor for CurrentItemFetchRequest);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8( (unint64_t *)&unk_100256F40,  v17,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
  static Message.with(_:)(sub_10019983C, v21, Request, v19);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 136))(v16, a4, a5, a6, a7);
  return sub_1000415CC((uint64_t)v16, v18);
}

uint64_t sub_10019983C(_TtC18TrustedPeersHelper6Client **a1)
{
  return sub_1001993D8( a1,  *(_TtC18TrustedPeersHelper6Client **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for CurrentItemFetchRequest);
}

uint64_t CuttlefishAPIAsync.performCkserverUnreadableDataRemoval(isGuitarfish:metrics:accountInfo:completion:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  __chkstk_darwin(v14, type metadata accessor for RemoveUnreadableCKServerDataRequest);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  _BYTE v21[16] = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8( &qword_100252A48,  v17,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
  static Message.with(_:)(sub_100199970, v21, v14, v19);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 144))(v16, a4, a5, a6, a7);
  return sub_1000415CC((uint64_t)v16, v18);
}

uint64_t sub_100199970(_BYTE *a1)
{
  return sub_1001A0648(a1, *(_BYTE *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t CuttlefishAPIAsyncClient.__allocating_init(codeService:)(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t CuttlefishAPIAsyncClient.init(codeService:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void CuttlefishAPIAsyncClient.reset(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100251E90);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for ResetRequest);
  uint64_t v14 = type metadata accessor for ResetRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.ResetOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100251E90);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0x7465736572LL, 0xE500000000000000LL, v10);
  sub_100041590((uint64_t)v13, (uint64_t *)&unk_100251E90);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.ResetOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257418,  (uint64_t)&nominal type descriptor for CuttlefishAPI.ResetOperation);
}

void CuttlefishAPIAsyncClient.establish(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251E80);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for EstablishRequest);
  uint64_t v14 = type metadata accessor for EstablishRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.EstablishOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251E80);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0x73696C6261747365LL, 0xE900000000000068LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251E80);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.EstablishOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257468,  (uint64_t)&nominal type descriptor for CuttlefishAPI.EstablishOperation);
}

void CuttlefishAPIAsyncClient.joinWithVoucher(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100251E70);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for JoinWithVoucherRequest);
  uint64_t v14 = type metadata accessor for JoinWithVoucherRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.JoinWithVoucherOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100251E70);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0x687469576E696F6ALL, 0xEF72656863756F56LL, v10);
  sub_100041590((uint64_t)v13, (uint64_t *)&unk_100251E70);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.JoinWithVoucherOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_1002574B8,  (uint64_t)&nominal type descriptor for CuttlefishAPI.JoinWithVoucherOperation);
}

void CuttlefishAPIAsyncClient.updateTrust(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100251E60);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for UpdateTrustRequest);
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56LL))(v13, 0LL, 1LL, updated);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.UpdateTrustOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100251E60);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0x7254657461647075LL, 0xEB00000000747375LL, v10);
  sub_100041590((uint64_t)v13, (uint64_t *)&unk_100251E60);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.UpdateTrustOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257508,  (uint64_t)&nominal type descriptor for CuttlefishAPI.UpdateTrustOperation);
}

void CuttlefishAPIAsyncClient.setRecoveryKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100251E50);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for SetRecoveryKeyRequest);
  uint64_t v14 = type metadata accessor for SetRecoveryKeyRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.SetRecoveryKeyOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100251E50);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0x766F636552746573LL, 0xEE0079654B797265LL, v10);
  sub_100041590((uint64_t)v13, (uint64_t *)&unk_100251E50);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.SetRecoveryKeyOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257558,  (uint64_t)&nominal type descriptor for CuttlefishAPI.SetRecoveryKeyOperation);
}

void CuttlefishAPIAsyncClient.addCustodianRecoveryKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251DE0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for AddCustodianRecoveryKeyRequest);
  uint64_t v14 = type metadata accessor for AddCustodianRecoveryKeyRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.AddCustodianRecoveryKeyOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251DE0);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000017LL, 0x80000001001F6C60LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251DE0);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.AddCustodianRecoveryKeyOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_1002575A8,  (uint64_t)&nominal type descriptor for CuttlefishAPI.AddCustodianRecoveryKeyOperation);
}

void CuttlefishAPIAsyncClient.fetchChanges(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251E40);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for FetchChangesRequest);
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(ChangesRequest - 8) + 56LL))( v13,  0LL,  1LL,  ChangesRequest);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchChangesOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251E40);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0x6168436863746566LL, 0xEC0000007365676ELL, v10);
  sub_100041590((uint64_t)v13, &qword_100251E40);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.FetchChangesOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_1002575F8,  (uint64_t)&nominal type descriptor for CuttlefishAPI.FetchChangesOperation);
}

void CuttlefishAPIAsyncClient.fetchViableBottles(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251E30);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for FetchViableBottlesRequest);
  ViableBottlesuint64_t Request = type metadata accessor for FetchViableBottlesRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(ViableBottlesRequest - 8) + 56LL))( v13,  0LL,  1LL,  ViableBottlesRequest);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchViableBottlesOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251E30);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000012LL, 0x80000001001F6CE0LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251E30);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.FetchViableBottlesOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257648,  (uint64_t)&nominal type descriptor for CuttlefishAPI.FetchViableBottlesOperation);
}

void CuttlefishAPIAsyncClient.fetchRecoverableTlkshares(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251DD0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for FetchRecoverableTLKSharesRequest);
  RecoverableTLKSharesuint64_t Request = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(RecoverableTLKSharesRequest - 8) + 56LL))( v13,  0LL,  1LL,  RecoverableTLKSharesRequest);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchRecoverableTlksharesOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251DD0);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000019LL, 0x80000001001F6C40LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251DD0);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.FetchRecoverableTlksharesOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257698,  (uint64_t)&nominal type descriptor for CuttlefishAPI.FetchRecoverableTlksharesOperation);
}

void CuttlefishAPIAsyncClient.fetchPolicyDocuments(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251E20);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for FetchPolicyDocumentsRequest);
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(PolicyDocumentsRequest - 8) + 56LL))( v13,  0LL,  1LL,  PolicyDocumentsRequest);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchPolicyDocumentsOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251E20);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000014LL, 0x80000001001F6CC0LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251E20);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.FetchPolicyDocumentsOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_1002576E8,  (uint64_t)&nominal type descriptor for CuttlefishAPI.FetchPolicyDocumentsOperation);
}

void CuttlefishAPIAsyncClient.getRepairAction(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100251E10);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for GetRepairActionRequest);
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(RepairActionRequest - 8) + 56LL))( v13,  0LL,  1LL,  RepairActionRequest);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.GetRepairActionOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100251E10);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0x6961706552746567LL, 0xEF6E6F6974634172LL, v10);
  sub_100041590((uint64_t)v13, (uint64_t *)&unk_100251E10);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.GetRepairActionOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257738,  (uint64_t)&nominal type descriptor for CuttlefishAPI.GetRepairActionOperation);
}

void CuttlefishAPIAsyncClient.getSupportAppInfo(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251E00);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for GetSupportAppInfoRequest);
  SupportAppInfouint64_t Request = type metadata accessor for GetSupportAppInfoRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(SupportAppInfoRequest - 8) + 56LL))( v13,  0LL,  1LL,  SupportAppInfoRequest);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.GetSupportAppInfoOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251E00);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000011LL, 0x80000001001F6CA0LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251E00);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.GetSupportAppInfoOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257788,  (uint64_t)&nominal type descriptor for CuttlefishAPI.GetSupportAppInfoOperation);
}

void CuttlefishAPIAsyncClient.resetAccountCdpcontents(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100251DF0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for ResetAccountCDPContentsRequest);
  uint64_t v14 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.ResetAccountCdpcontentsOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100251DF0);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000017LL, 0x80000001001F6C80LL, v10);
  sub_100041590((uint64_t)v13, (uint64_t *)&unk_100251DF0);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.ResetAccountCdpcontentsOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_1002577D8,  (uint64_t)&nominal type descriptor for CuttlefishAPI.ResetAccountCdpcontentsOperation);
}

void CuttlefishAPIAsyncClient.removeRecoveryKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251DC0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for RemoveRecoveryKeyRequest);
  uint64_t v14 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.RemoveRecoveryKeyOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251DC0);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000011LL, 0x80000001001F6C20LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251DC0);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.RemoveRecoveryKeyOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257828,  (uint64_t)&nominal type descriptor for CuttlefishAPI.RemoveRecoveryKeyOperation);
}

void CuttlefishAPIAsyncClient.performAtoprvactions(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251DB0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for PerformATOPRVActionsRequest);
  uint64_t v14 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.PerformAtoprvactionsOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251DB0);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000014LL, 0x80000001001F6C00LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251DB0);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.PerformAtoprvactionsOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257878,  (uint64_t)&nominal type descriptor for CuttlefishAPI.PerformAtoprvactionsOperation);
}

void CuttlefishAPIAsyncClient.fetchPcsidentityByPublicKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251D90);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for DirectPCSIdentityFetchRequest);
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(Request - 8) + 56LL))(v13, 0LL, 1LL, Request);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchPcsidentityByPublicKeyOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251D90);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD00000000000001BLL, 0x80000001001F6BC0LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251D90);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.FetchPcsidentityByPublicKeyOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_1002578C8,  (uint64_t)&nominal type descriptor for CuttlefishAPI.FetchPcsidentityByPublicKeyOperation);
}

void CuttlefishAPIAsyncClient.fetchCurrentItem(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100251DA0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for CurrentItemFetchRequest);
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(Request - 8) + 56LL))(v13, 0LL, 1LL, Request);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchCurrentItemOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100251DA0);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000010LL, 0x80000001001F6BE0LL, v10);
  sub_100041590((uint64_t)v13, (uint64_t *)&unk_100251DA0);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.FetchCurrentItemOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257918,  (uint64_t)&nominal type descriptor for CuttlefishAPI.FetchCurrentItemOperation);
}

void CuttlefishAPIAsyncClient.performCkserverUnreadableDataRemoval(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007578(&qword_100251D80);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10004164C(a1, (uint64_t)&v18 - v12, type metadata accessor for RemoveUnreadableCKServerDataRequest);
  uint64_t v14 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 0LL, 1LL, v14);
  id v15 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.PerformCkserverUnreadableDataRemovalOperation(0LL));
  sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251D80);
  uint64_t v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000024LL, 0x80000001001F6B90LL, v10);
  sub_100041590((uint64_t)v13, &qword_100251D80);
  id v17 = v16;
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v17);
}

uint64_t type metadata accessor for CuttlefishAPI.PerformCkserverUnreadableDataRemovalOperation(uint64_t a1)
{
  return sub_1000B6920( a1,  (uint64_t *)&unk_100257968,  (uint64_t)&nominal type descriptor for CuttlefishAPI.PerformCkserverUnreadableDataRemovalOperation);
}

uint64_t CuttlefishAPIAsyncClient.deinit()
{
  return v0;
}

uint64_t CuttlefishAPIAsyncClient.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void sub_10019B3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B418(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B438(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B458(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B478(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B498(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B518(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B538(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B558(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B578(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B598(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10019B5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CuttlefishAPIAsyncOperation.reset(resetReason:idmsTargetContext:idmsCuttlefishPassword:testingNotifyIdms:accountInfo:metrics:isGuitarfish:completion:)( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v30 = a7;
  uint64_t v29 = a6;
  uint64_t v33 = a11;
  uint64_t v31 = a8;
  uint64_t v32 = a12;
  uint64_t v34 = a13;
  uint64_t v19 = type metadata accessor for ResetRequest(0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = a1;
  __int16 v37 = a2 & 0x1FF;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v41 = v29;
  char v42 = v30;
  uint64_t v43 = v31;
  uint64_t v44 = a9;
  char v45 = a10;
  uint64_t v24 = v23;
  uint64_t v25 = sub_1000077B8( (unint64_t *)&unk_100257080,  v23,  (uint64_t)&protocol conformance descriptor for ResetRequest);
  static Message.with(_:)(sub_100199198, v35, v19, v25);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 8))(v22, v33, v32, v34, a14);
  sub_1000415CC((uint64_t)v22, v24);
  return v26;
}

uint64_t CuttlefishAPIAsyncOperation.establish(peer:bottle:viewKeys:tlkShares:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v26 = a8;
  uint64_t v25 = a7;
  uint64_t v16 = type metadata accessor for EstablishRequest(0LL);
  __chkstk_darwin(v16, type metadata accessor for EstablishRequest);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v20 = v19;
  uint64_t v21 = sub_1000077B8(&qword_1002526A8, v19, (uint64_t)&protocol conformance descriptor for EstablishRequest);
  static Message.with(_:)(sub_1001991B4, v27, v16, v21);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 16))(v18, v25, v26, a9, a10);
  sub_1000415CC((uint64_t)v18, v20);
  return v22;
}

uint64_t sub_10019B864( uint64_t a1, uint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, _TtC18TrustedPeersHelper6Client *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v125 = a2;
  uint64_t v123 = a7;
  id v119 = a5;
  uint64_t v120 = a6;
  id v129 = a4;
  uint64_t v115 = a1;
  uint64_t v116 = a3;
  uint64_t v7 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v7, v8);
  uint64_t v124 = (uint64_t)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v121 = *(void *)(v10 - 8);
  uint64_t v122 = v10;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v113 = (uint64_t)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v14);
  uint64_t v112 = (uint64_t)&v109 - v15;
  uint64_t v16 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v16, v17);
  id v118 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = type metadata accessor for Metrics(0LL);
  uint64_t v126 = *(void *)(v117 - 8);
  uint64_t v20 = __chkstk_darwin(v117, v19);
  uint64_t v111 = (uint64_t)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v22);
  uint64_t v110 = (uint64_t)&v109 - v23;
  uint64_t v24 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for Bottle(0LL);
  uint64_t v28 = *(void *)(v114 - 8);
  uint64_t v30 = __chkstk_darwin(v114, v29);
  uint64_t v109 = (uint64_t)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30, v32);
  uint64_t v34 = (char *)&v109 - v33;
  uint64_t v35 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v35, v36);
  uint64_t v38 = (char *)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for Peer(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v44 = (char *)&v109 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v42, v45);
  uint64_t v47 = (char *)&v109 - v46;
  sub_10000FC68(v125, (uint64_t)v38, &qword_100251F58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1LL, v39) == 1)
  {
    sub_100041590((uint64_t)v38, &qword_100251F58);
    uint64_t v48 = v115;
  }

  else
  {
    sub_100041608((uint64_t)v38, (uint64_t)v47, type metadata accessor for Peer);
    sub_10004164C((uint64_t)v47, (uint64_t)v44, type metadata accessor for Peer);
    uint64_t v49 = (uint64_t)v44;
    uint64_t v48 = v115;
    EstablishRequest.peer.setter(v49);
    sub_1000415CC((uint64_t)v47, type metadata accessor for Peer);
  }

  uint64_t v50 = v121;
  id v51 = v119;
  uint64_t v52 = v117;
  uint64_t v53 = v114;
  sub_10000FC68(v116, (uint64_t)v27, &qword_100251F38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v27, 1LL, v53) == 1)
  {
    sub_100041590((uint64_t)v27, &qword_100251F38);
  }

  else
  {
    sub_100041608((uint64_t)v27, (uint64_t)v34, type metadata accessor for Bottle);
    uint64_t v54 = v109;
    sub_10004164C((uint64_t)v34, v109, type metadata accessor for Bottle);
    EstablishRequest.bottle.setter(v54);
    sub_1000415CC((uint64_t)v34, type metadata accessor for Bottle);
  }

  uint64_t v55 = v120;
  uint64_t v56 = (uint64_t)v118;
  uint64_t v57 = v129;
  if (*(void *)v129->endpoint)
  {
    uint64_t v58 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
    swift_bridgeObjectRetain(v57);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v48 + v58)) & 1) == 0)
    {
      uint64_t v59 = *(void *)(v48 + v58);
      uint64_t v60 = type metadata accessor for EstablishRequest._StorageClass(0LL);
      swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
      uint64_t v61 = swift_retain(v59);
      uint64_t v62 = sub_1000870D0(v61);
      uint64_t v57 = v129;
      uint64_t v63 = *(_TtC18TrustedPeersHelper6Client **)(v48 + v58);
      *(void *)(v48 + v5_Block_object_dispose(va, 8) = v62;
      swift_release(v63, v64, v65, v66, v67, v68, v69, v70);
    }

    uint64_t v71 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(v48 + v58)
                                             + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
    swift_beginAccess(v71, v128, 1LL, 0LL);
    BOOL v72 = *v71;
    *uint64_t v71 = v57;
    swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
  }

  if (*(void *)v51->endpoint)
  {
    uint64_t v80 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
    swift_bridgeObjectRetain(v51);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v48 + v80)) & 1) == 0)
    {
      uint64_t v81 = *(void *)(v48 + v80);
      uint64_t v82 = type metadata accessor for EstablishRequest._StorageClass(0LL);
      swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
      uint64_t v83 = swift_retain(v81);
      uint64_t v84 = sub_1000870D0(v83);
      SEL v85 = *(_TtC18TrustedPeersHelper6Client **)(v48 + v80);
      *(void *)(v48 + v80) = v84;
      swift_release(v85, v86, v87, v88, v89, v90, v91, v92);
    }

    uint64_t v93 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(v48 + v80)
                                             + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
    swift_beginAccess(v93, v127, 1LL, 0LL);
    id v94 = *v93;
    *uint64_t v93 = v51;
    swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  }

  sub_10000FC68(v55, v56, &qword_100257000);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v56, 1LL, v52) == 1)
  {
    sub_100041590(v56, &qword_100257000);
  }

  else
  {
    uint64_t v102 = v110;
    sub_100041608(v56, v110, type metadata accessor for Metrics);
    uint64_t v103 = v111;
    sub_10004164C(v102, v111, type metadata accessor for Metrics);
    EstablishRequest.metrics.setter(v103);
    sub_1000415CC(v102, type metadata accessor for Metrics);
  }

  uint64_t v104 = v124;
  uint64_t v105 = v122;
  sub_10000FC68(v123, v124, &qword_100251F50);
  uint64_t v107 = v112;
  sub_100041608(v104, v112, type metadata accessor for AccountInfo);
  uint64_t v108 = v113;
  sub_10004164C(v107, v113, type metadata accessor for AccountInfo);
  EstablishRequest.accountInfo.setter(v108);
  return sub_1000415CC(v107, type metadata accessor for AccountInfo);
}

uint64_t sub_10019BE9C(uint64_t a1)
{
  return sub_10019B864( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 32),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t CuttlefishAPIAsyncOperation.joinWithVoucher(changeToken:peer:bottle:tlkShares:viewKeys:trustedDevicesVersion:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v31 = a12;
  uint64_t v29 = a10;
  uint64_t v30 = a11;
  uint64_t v19 = type metadata accessor for JoinWithVoucherRequest(0LL);
  __chkstk_darwin(v19, type metadata accessor for JoinWithVoucherRequest);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = v27;
  uint64_t v40 = v28;
  uint64_t v41 = a9;
  uint64_t v23 = v22;
  uint64_t v24 = sub_1000077B8(&qword_1002526D8, v22, (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
  static Message.with(_:)(sub_1001991C8, v32, v19, v24);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a13 + 24))(v21, v29, v30, v31, a13);
  sub_1000415CC((uint64_t)v21, v23);
  return v25;
}

uint64_t sub_10019BFEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _TtC18TrustedPeersHelper6Client *a6, _TtC18TrustedPeersHelper6Client *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v175 = a4;
  uint64_t v170 = a8;
  id v167 = a7;
  uint64_t v180 = a6;
  uint64_t v162 = a2;
  uint64_t v13 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v13, v14);
  uint64_t v174 = (uint64_t)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for AccountInfo(0LL);
  uint64_t v172 = *(void *)(v16 - 8);
  uint64_t v173 = v16;
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v161 = (uint64_t)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v20);
  uint64_t v160 = (uint64_t)&v152 - v21;
  uint64_t v22 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v22, v23);
  uint64_t v171 = (uint64_t)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for Metrics(0LL);
  uint64_t v168 = *(void *)(v25 - 8);
  uint64_t v169 = v25;
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v159 = (uint64_t)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v158 = (uint64_t)&v152 - v30;
  uint64_t v31 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v31, v32);
  uint64_t v166 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v165 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v176 = *(void *)(v165 - 8);
  uint64_t v35 = __chkstk_darwin(v165, v34);
  uint64_t v157 = (uint64_t)&v152 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35, v37);
  uint64_t v156 = (uint64_t)&v152 - v38;
  uint64_t v39 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v39, v40);
  uint64_t v42 = (char *)&v152 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for Bottle(0LL);
  uint64_t v163 = *(void *)(v164 - 8);
  uint64_t v44 = __chkstk_darwin(v164, v43);
  uint64_t v155 = (uint64_t)&v152 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v44, v46);
  uint64_t v154 = (uint64_t)&v152 - v47;
  uint64_t v48 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v48, v49);
  id v51 = (char *)&v152 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = type metadata accessor for Peer(0LL);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v55 = __chkstk_darwin(v52, v54);
  uint64_t v57 = (char *)&v152 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v55, v58);
  uint64_t v60 = (char *)&v152 - v59;
  if (a3)
  {
    uint64_t v153 = a5;
    uint64_t v61 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
    uint64_t v152 = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v62 = a1;
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v61)) & 1) == 0)
    {
      uint64_t v63 = *(void *)(a1 + v61);
      uint64_t v64 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
      swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
      uint64_t v65 = swift_retain(v63);
      uint64_t v66 = sub_100089850(v65);
      id v67 = *(_TtC18TrustedPeersHelper6Client **)(v62 + v61);
      *(void *)(v62 + v61) = v66;
      swift_release(v67, v68, v69, v70, v71, v72, v73, v74);
    }

    uint64_t v75 = *(void *)(v62 + v61);
    swift_beginAccess(v75 + 16, v177, 1LL, 0LL);
    id v76 = *(_TtC18TrustedPeersHelper6Client **)(v75 + 24);
    uint64_t v77 = v152;
    *(void *)(v75 + 16) = v162;
    *(void *)(v75 + 24) = v77;
    a1 = v62;
    swift_bridgeObjectRelease(v76, v78, v79, v80, v81, v82, v83, v84);
    a5 = v153;
  }

  sub_10000FC68(v175, (uint64_t)v51, &qword_100251F58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1LL, v52) == 1)
  {
    sub_100041590((uint64_t)v51, &qword_100251F58);
    uint64_t v85 = a1;
  }

  else
  {
    sub_100041608((uint64_t)v51, (uint64_t)v60, type metadata accessor for Peer);
    sub_10004164C((uint64_t)v60, (uint64_t)v57, type metadata accessor for Peer);
    uint64_t v85 = a1;
    JoinWithVoucherRequest.peer.setter((uint64_t)v57);
    sub_1000415CC((uint64_t)v60, type metadata accessor for Peer);
  }

  uint64_t v87 = (uint64_t)v166;
  SEL v86 = v167;
  uint64_t v88 = v165;
  uint64_t v89 = v164;
  uint64_t v90 = v163;
  sub_10000FC68(a5, (uint64_t)v42, &qword_100251F38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v42, 1LL, v89) == 1)
  {
    sub_100041590((uint64_t)v42, &qword_100251F38);
  }

  else
  {
    uint64_t v91 = v154;
    sub_100041608((uint64_t)v42, v154, type metadata accessor for Bottle);
    uint64_t v92 = v155;
    sub_10004164C(v91, v155, type metadata accessor for Bottle);
    JoinWithVoucherRequest.bottle.setter(v92);
    sub_1000415CC(v91, type metadata accessor for Bottle);
  }

  uint64_t v93 = v170;
  uint64_t v94 = v168;
  SEL v95 = v180;
  if (*(void *)v180->endpoint)
  {
    uint64_t v96 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
    swift_bridgeObjectRetain(v95);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v85 + v96)) & 1) == 0)
    {
      uint64_t v97 = *(void *)(v85 + v96);
      uint64_t v98 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
      swift_allocObject(v98, *(unsigned int *)(v98 + 48), *(unsigned __int16 *)(v98 + 52));
      uint64_t v99 = swift_retain(v97);
      uint64_t v100 = sub_100089850(v99);
      SEL v95 = v180;
      BOOL v101 = *(_TtC18TrustedPeersHelper6Client **)(v85 + v96);
      *(void *)(v85 + v96) = v100;
      swift_release(v101, v102, v103, v104, v105, v106, v107, v108);
    }

    uint64_t v109 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(v85 + v96)
                                              + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
    swift_beginAccess(v109, v179, 1LL, 0LL);
    uint64_t v110 = *v109;
    *uint64_t v109 = v95;
    swift_bridgeObjectRelease(v110, v111, v112, v113, v114, v115, v116, v117);
  }

  if (*(void *)v86->endpoint)
  {
    uint64_t v118 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
    swift_bridgeObjectRetain(v86);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v85 + v118)) & 1) == 0)
    {
      uint64_t v119 = *(void *)(v85 + v118);
      uint64_t v120 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
      swift_allocObject(v120, *(unsigned int *)(v120 + 48), *(unsigned __int16 *)(v120 + 52));
      uint64_t v121 = swift_retain(v119);
      uint64_t v122 = sub_100089850(v121);
      uint64_t v123 = *(_TtC18TrustedPeersHelper6Client **)(v85 + v118);
      *(void *)(v85 + v11_Block_object_dispose(va, 8) = v122;
      swift_release(v123, v124, v125, v126, v127, v128, v129, v130);
    }

    id v131 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(v85 + v118)
                                              + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
    swift_beginAccess(v131, v178, 1LL, 0LL);
    id v132 = *v131;
    *id v131 = v86;
    swift_bridgeObjectRelease(v132, v133, v134, v135, v136, v137, v138, v139);
  }

  sub_10000FC68(v93, v87, &qword_100256D20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v87, 1LL, v88) == 1)
  {
    sub_100041590(v87, &qword_100256D20);
  }

  else
  {
    uint64_t v140 = v156;
    sub_100041608(v87, v156, type metadata accessor for IdmsTrustedDevicesVersion);
    uint64_t v141 = v157;
    sub_10004164C(v140, v157, type metadata accessor for IdmsTrustedDevicesVersion);
    JoinWithVoucherRequest.trustedDevicesVersion.setter(v141);
    sub_1000415CC(v140, type metadata accessor for IdmsTrustedDevicesVersion);
  }

  uint64_t v142 = v171;
  uint64_t v143 = v172;
  uint64_t v144 = v169;
  sub_10000FC68(a9, v171, &qword_100257000);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v142, 1LL, v144) == 1)
  {
    sub_100041590(v142, &qword_100257000);
  }

  else
  {
    uint64_t v145 = v158;
    sub_100041608(v142, v158, type metadata accessor for Metrics);
    uint64_t v146 = v159;
    sub_10004164C(v145, v159, type metadata accessor for Metrics);
    JoinWithVoucherRequest.metrics.setter(v146);
    sub_1000415CC(v145, type metadata accessor for Metrics);
  }

  uint64_t v147 = v173;
  uint64_t v148 = v174;
  sub_10000FC68(a10, v174, &qword_100251F50);
  uint64_t v150 = v160;
  sub_100041608(v148, v160, type metadata accessor for AccountInfo);
  uint64_t v151 = v161;
  sub_10004164C(v150, v161, type metadata accessor for AccountInfo);
  JoinWithVoucherRequest.accountInfo.setter(v151);
  return sub_1000415CC(v150, type metadata accessor for AccountInfo);
}

uint64_t sub_10019C864(uint64_t a1)
{
  return sub_10019BFEC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 48),  *(_TtC18TrustedPeersHelper6Client **)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80));
}

uint64_t CuttlefishAPIAsyncOperation.updateTrust(changeToken:peerID:stableInfoAndSig:dynamicInfoAndSig:tlkShares:viewKeys:trustedDevicesVersion:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v33 = a13;
  uint64_t v31 = a11;
  uint64_t v32 = a12;
  __int128 v28 = a9;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  __chkstk_darwin(updated, type metadata accessor for UpdateTrustRequest);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = v29;
  uint64_t v42 = v30;
  __int128 v43 = a9;
  uint64_t v44 = a10;
  uint64_t v24 = v23;
  uint64_t v25 = sub_1000077B8(&qword_100252708, v23, (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
  static Message.with(_:)(sub_100197FC0, v34, updated, v25);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 32))(v22, v31, v32, v33, a14);
  sub_1000415CC((uint64_t)v22, v24);
  return v26;
}

uint64_t sub_10019C9E0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v146 = a8;
  uint64_t v141 = a6;
  uint64_t v142 = a7;
  uint64_t v139 = a5;
  uint64_t v136 = a2;
  uint64_t v137 = a4;
  uint64_t v14 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v14, v15);
  uint64_t v149 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for AccountInfo(0LL);
  uint64_t v150 = *(void *)(v17 - 8);
  uint64_t v151 = v17;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v134 = (uint64_t)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v21);
  uint64_t v135 = (uint64_t)&v128 - v22;
  uint64_t v23 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v23, v24);
  uint64_t v147 = (uint64_t)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = type metadata accessor for Metrics(0LL);
  uint64_t v148 = *(void *)(v152 - 8);
  uint64_t v27 = __chkstk_darwin(v152, v26);
  uint64_t v132 = (uint64_t)&v128 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v133 = (uint64_t)&v128 - v30;
  uint64_t v31 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v31, v32);
  uint64_t v143 = (uint64_t)&v128 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v144 = *(void *)(v34 - 8);
  uint64_t v145 = v34;
  uint64_t v36 = __chkstk_darwin(v34, v35);
  uint64_t v130 = (uint64_t)&v128 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36, v38);
  uint64_t v131 = (uint64_t)&v128 - v39;
  uint64_t v40 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v40, v41);
  __int128 v43 = (char *)&v128 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v140 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v138 = *(void *)(v140 - 8);
  uint64_t v45 = __chkstk_darwin(v140, v44);
  uint64_t v129 = (uint64_t)&v128 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45, v47);
  uint64_t v49 = (char *)&v128 - v48;
  uint64_t v50 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v50, v51);
  uint64_t v53 = (char *)&v128 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v57 = __chkstk_darwin(v54, v56);
  uint64_t v59 = (char *)&v128 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v57, v60);
  uint64_t v62 = (char *)&v128 - v61;
  if (a3)
  {
    uint64_t v63 = (_TtC18TrustedPeersHelper6Client *)a1[1];
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
    *a1 = v136;
    a1[1] = a3;
  }

  uint64_t v71 = v139;
  if (v139)
  {
    id v72 = (_TtC18TrustedPeersHelper6Client *)a1[3];
    swift_bridgeObjectRetain(v139);
    swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
    a1[2] = v137;
    a1[3] = v71;
  }

  sub_10000FC68(v141, (uint64_t)v53, &qword_100251F18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1LL, v54) == 1)
  {
    sub_100041590((uint64_t)v53, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v53, (uint64_t)v62, type metadata accessor for SignedPeerStableInfo);
    sub_10004164C((uint64_t)v62, (uint64_t)v59, type metadata accessor for SignedPeerStableInfo);
    uint64_t v80 = (uint64_t)a1 + *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 36);
    sub_100041590(v80, &qword_100251F18);
    sub_100041608((uint64_t)v59, v80, type metadata accessor for SignedPeerStableInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v80, 0LL, 1LL, v54);
    sub_1000415CC((uint64_t)v62, type metadata accessor for SignedPeerStableInfo);
  }

  sub_10000FC68(v142, (uint64_t)v43, &qword_100256CA0);
  uint64_t v81 = v138;
  uint64_t v82 = v140;
  int v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 48))(v43, 1LL, v140);
  uint64_t v84 = v148;
  if (v83 == 1)
  {
    sub_100041590((uint64_t)v43, &qword_100256CA0);
  }

  else
  {
    sub_100041608((uint64_t)v43, (uint64_t)v49, type metadata accessor for SignedPeerDynamicInfo);
    uint64_t v85 = v129;
    sub_10004164C((uint64_t)v49, v129, type metadata accessor for SignedPeerDynamicInfo);
    uint64_t v86 = (uint64_t)a1 + *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 40);
    sub_100041590(v86, &qword_100256CA0);
    sub_100041608(v85, v86, type metadata accessor for SignedPeerDynamicInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v86, 0LL, 1LL, v82);
    sub_1000415CC((uint64_t)v49, type metadata accessor for SignedPeerDynamicInfo);
  }

  uint64_t v87 = v146;
  uint64_t v88 = v144;
  if (*(void *)(v146 + 16))
  {
    uint64_t v89 = (_TtC18TrustedPeersHelper6Client *)a1[4];
    swift_bridgeObjectRetain(v146);
    swift_bridgeObjectRelease(v89, v90, v91, v92, v93, v94, v95, v96);
    a1[4] = v87;
  }

  uint64_t v97 = a11;
  if (*(void *)(a9 + 16))
  {
    uint64_t v98 = (_TtC18TrustedPeersHelper6Client *)a1[5];
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRelease(v98, v99, v100, v101, v102, v103, v104, v105);
    a1[5] = a9;
  }

  uint64_t v106 = a12;
  uint64_t v107 = v143;
  sub_10000FC68(a10, v143, &qword_100256D20);
  uint64_t v108 = v145;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v107, 1LL, v145) == 1)
  {
    sub_100041590(v107, &qword_100256D20);
  }

  else
  {
    uint64_t v146 = a11;
    uint64_t v109 = v131;
    sub_100041608(v107, v131, type metadata accessor for IdmsTrustedDevicesVersion);
    uint64_t v110 = v84;
    uint64_t v111 = v130;
    sub_10004164C(v109, v130, type metadata accessor for IdmsTrustedDevicesVersion);
    uint64_t v112 = (uint64_t)a1 + *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 44);
    sub_100041590(v112, &qword_100256D20);
    uint64_t v113 = v111;
    uint64_t v84 = v110;
    sub_100041608(v113, v112, type metadata accessor for IdmsTrustedDevicesVersion);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v88 + 56))(v112, 0LL, 1LL, v108);
    uint64_t v114 = v109;
    uint64_t v106 = a12;
    uint64_t v97 = v146;
    sub_1000415CC(v114, type metadata accessor for IdmsTrustedDevicesVersion);
  }

  uint64_t v115 = (uint64_t)v149;
  uint64_t v116 = v97;
  uint64_t v117 = v147;
  sub_10000FC68(v116, v147, &qword_100257000);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v117, 1LL, v152) == 1)
  {
    sub_100041590(v117, &qword_100257000);
  }

  else
  {
    uint64_t v118 = v133;
    sub_100041608(v117, v133, type metadata accessor for Metrics);
    uint64_t v119 = v132;
    sub_10004164C(v118, v132, type metadata accessor for Metrics);
    uint64_t v120 = (uint64_t)a1 + *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 48);
    sub_100041590(v120, &qword_100257000);
    sub_100041608(v119, v120, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v120, 0LL, 1LL, v152);
    sub_1000415CC(v118, type metadata accessor for Metrics);
  }

  uint64_t v121 = v150;
  sub_10000FC68(v106, v115, &qword_100251F50);
  uint64_t v122 = v151;
  uint64_t v124 = v115;
  uint64_t v125 = v135;
  sub_100041608(v124, v135, type metadata accessor for AccountInfo);
  uint64_t v126 = v134;
  sub_10004164C(v125, v134, type metadata accessor for AccountInfo);
  uint64_t v127 = (uint64_t)a1 + *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 52);
  sub_100041590(v127, &qword_100251F50);
  sub_100041608(v126, v127, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v121 + 56))(v127, 0LL, 1LL, v122);
  return sub_1000415CC(v125, type metadata accessor for AccountInfo);
}

uint64_t sub_10019D1FC(void *a1)
{
  return sub_10019C9E0(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t CuttlefishAPIAsyncOperation.setRecoveryKey(changeToken:peerID:recoverySigningPubKey:recoveryEncryptionPubKey:stableInfoAndSig:tlkShares:metrics:accountInfo:viewKeys:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v31 = a8;
  uint64_t v30 = a7;
  uint64_t v33 = a13;
  uint64_t v34 = a14;
  uint64_t v32 = a12;
  v29[1] = a10;
  v29[0] = a9;
  uint64_t v21 = type metadata accessor for SetRecoveryKeyRequest(0LL);
  __chkstk_darwin(v21, type metadata accessor for SetRecoveryKeyRequest);
  uint64_t v23 = (char *)v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v42 = v30;
  uint64_t v43 = v31;
  __int128 v44 = a9;
  __int128 v45 = a10;
  uint64_t v46 = a11;
  uint64_t v25 = v24;
  uint64_t v26 = sub_1000077B8( (unint64_t *)&unk_100256D40,  v24,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
  static Message.with(_:)(sub_1001991DC, v35, v21, v26);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a15 + 40))(v23, v32, v33, v34, a15);
  sub_1000415CC((uint64_t)v23, v25);
  return v27;
}

void sub_10019D3AC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v117 = a2;
  uint64_t v112 = a8;
  uint64_t v20 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v20, v21);
  uint64_t v120 = (uint64_t)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for AccountInfo(0LL);
  uint64_t v121 = *(void *)(v23 - 8);
  uint64_t v122 = v23;
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v115 = (uint64_t)&v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v27);
  uint64_t v116 = (uint64_t)&v110 - v28;
  uint64_t v29 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v29, v30);
  uint64_t v123 = (uint64_t)&v110 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for Metrics(0LL);
  uint64_t v118 = *(void *)(v32 - 8);
  uint64_t v119 = v32;
  uint64_t v34 = __chkstk_darwin(v32, v33);
  uint64_t v113 = (uint64_t)&v110 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34, v36);
  uint64_t v114 = (uint64_t)&v110 - v37;
  uint64_t v38 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v38, v39);
  uint64_t v41 = (char *)&v110 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v45 = __chkstk_darwin(v42, v44);
  uint64_t v110 = (uint64_t)&v110 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45, v47);
  uint64_t v111 = (uint64_t)&v110 - v48;
  if (a3)
  {
    uint64_t v49 = (_TtC18TrustedPeersHelper6Client *)a1[1];
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
    *a1 = v117;
    a1[1] = a3;
  }

  if (a5)
  {
    uint64_t v57 = (_TtC18TrustedPeersHelper6Client *)a1[3];
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    a1[2] = a4;
    a1[3] = a5;
  }

  uint64_t v117 = a10;
  if (a7 >> 60 != 15)
  {
    uint64_t v65 = v43;
    uint64_t v66 = v42;
    uint64_t v67 = a1[4];
    unint64_t v68 = a1[5];
    sub_1000084E8(a6, a7);
    uint64_t v69 = v67;
    uint64_t v43 = v65;
    unint64_t v70 = v68;
    uint64_t v42 = v66;
    sub_10000852C(v69, v70);
    a1[4] = a6;
    a1[5] = a7;
  }

  uint64_t v71 = a11;
  if (a9 >> 60 != 15)
  {
    uint64_t v72 = a1[6];
    unint64_t v73 = a1[7];
    uint64_t v74 = v42;
    uint64_t v75 = v112;
    sub_1000084E8(v112, a9);
    uint64_t v76 = v72;
    uint64_t v71 = a11;
    sub_10000852C(v76, v73);
    a1[6] = v75;
    a1[7] = a9;
    uint64_t v42 = v74;
  }

  sub_10000FC68(v117, (uint64_t)v41, &qword_100251F18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42) == 1)
  {
    sub_100041590((uint64_t)v41, &qword_100251F18);
  }

  else
  {
    uint64_t v77 = v111;
    sub_100041608((uint64_t)v41, v111, type metadata accessor for SignedPeerStableInfo);
    uint64_t v78 = v110;
    sub_10004164C(v77, v110, type metadata accessor for SignedPeerStableInfo);
    uint64_t v79 = (uint64_t)a1 + *(int *)(type metadata accessor for SetRecoveryKeyRequest(0LL) + 44);
    sub_100041590(v79, &qword_100251F18);
    sub_100041608(v78, v79, type metadata accessor for SignedPeerStableInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v79, 0LL, 1LL, v42);
    sub_1000415CC(v77, type metadata accessor for SignedPeerStableInfo);
  }

  uint64_t v80 = v118;
  uint64_t v81 = a13;
  if (*(void *)(v71 + 16))
  {
    uint64_t v82 = (_TtC18TrustedPeersHelper6Client *)a1[8];
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
    a1[8] = v71;
  }

  uint64_t v90 = v123;
  sub_10000FC68(a12, v123, &qword_100257000);
  uint64_t v91 = v119;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v90, 1LL, v119) == 1)
  {
    sub_100041590(v123, &qword_100257000);
  }

  else
  {
    uint64_t v92 = v114;
    sub_100041608(v123, v114, type metadata accessor for Metrics);
    uint64_t v93 = v113;
    sub_10004164C(v92, v113, type metadata accessor for Metrics);
    uint64_t v94 = (uint64_t)a1 + *(int *)(type metadata accessor for SetRecoveryKeyRequest(0LL) + 48);
    sub_100041590(v94, &qword_100257000);
    uint64_t v95 = v93;
    uint64_t v81 = a13;
    sub_100041608(v95, v94, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56))(v94, 0LL, 1LL, v91);
    sub_1000415CC(v92, type metadata accessor for Metrics);
  }

  uint64_t v97 = v120;
  uint64_t v96 = v121;
  sub_10000FC68(v81, v120, &qword_100251F50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1LL, v122) != 1)
  {
    uint64_t v98 = v97;
    uint64_t v99 = v116;
    sub_100041608(v98, v116, type metadata accessor for AccountInfo);
    uint64_t v100 = v115;
    sub_10004164C(v99, v115, type metadata accessor for AccountInfo);
    uint64_t v101 = (uint64_t)a1 + *(int *)(type metadata accessor for SetRecoveryKeyRequest(0LL) + 52);
    sub_100041590(v101, &qword_100251F50);
    sub_100041608(v100, v101, type metadata accessor for AccountInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v101, 0LL, 1LL, v122);
    sub_1000415CC(v99, type metadata accessor for AccountInfo);
    if (!*(void *)(a14 + 16)) {
      return;
    }
    goto LABEL_21;
  }

  sub_100041590(v97, &qword_100251F50);
  if (*(void *)(a14 + 16))
  {
LABEL_21:
    id v102 = (_TtC18TrustedPeersHelper6Client *)a1[9];
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
    a1[9] = a14;
  }

void sub_10019D964(void *a1)
{
}

uint64_t CuttlefishAPIAsyncOperation.addCustodianRecoveryKey(changeToken:peerID:peer:stableInfoAndSig:tlkShares:dynamicInfoAndSig:metrics:accountInfo:viewKeys:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v33 = a13;
  uint64_t v31 = a11;
  uint64_t v32 = a12;
  __int128 v28 = a9;
  uint64_t v20 = type metadata accessor for AddCustodianRecoveryKeyRequest(0LL);
  __chkstk_darwin(v20, type metadata accessor for AddCustodianRecoveryKeyRequest);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = v29;
  uint64_t v42 = v30;
  __int128 v43 = a9;
  uint64_t v44 = a10;
  uint64_t v24 = v23;
  uint64_t v25 = sub_1000077B8( (unint64_t *)&unk_100257070,  v23,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
  static Message.with(_:)(sub_1001991F0, v34, v20, v25);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 48))(v22, v31, v32, v33, a14);
  sub_1000415CC((uint64_t)v22, v24);
  return v26;
}

void sub_10019DAEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _TtC18TrustedPeersHelper6Client *a8, uint64_t a9, uint64_t a10, uint64_t a11, _TtC18TrustedPeersHelper6Client *a12)
{
  BOOL v209 = a8;
  uint64_t v193 = a7;
  uint64_t v200 = a6;
  uint64_t v189 = a4;
  uint64_t v16 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v16, v17);
  id v198 = (char *)&v177 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v197 = type metadata accessor for AccountInfo(0LL);
  uint64_t v196 = *(void *)(v197 - 8);
  uint64_t v20 = __chkstk_darwin(v197, v19);
  uint64_t v188 = (uint64_t)&v177 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v22);
  uint64_t v187 = (uint64_t)&v177 - v23;
  uint64_t v24 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v24, v25);
  SEL v204 = (char *)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v195 = type metadata accessor for Metrics(0LL);
  uint64_t v194 = *(void *)(v195 - 8);
  uint64_t v28 = __chkstk_darwin(v195, v27);
  uint64_t v186 = (uint64_t)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28, v30);
  uint64_t v185 = (uint64_t)&v177 - v31;
  uint64_t v32 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v32, v33);
  uint64_t v203 = (uint64_t)&v177 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v201 = *(void *)(v35 - 8);
  uint64_t v202 = v35;
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v184 = (uint64_t)&v177 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37, v39);
  uint64_t v183 = (uint64_t)&v177 - v40;
  uint64_t v41 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v41, v42);
  uint64_t v44 = (char *)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v192 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v191 = *(void *)(v192 - 8);
  uint64_t v46 = __chkstk_darwin(v192, v45);
  uint64_t v182 = (uint64_t)&v177 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v46, v48);
  uint64_t v181 = (uint64_t)&v177 - v49;
  uint64_t v50 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v50, v51);
  id v53 = (char *)&v177 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = type metadata accessor for Peer(0LL);
  uint64_t v54 = *(void *)(v199 - 8);
  uint64_t v56 = __chkstk_darwin(v199, v55);
  uint64_t v180 = (uint64_t)&v177 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v56, v58);
  int64_t v60 = (char *)&v177 - v59;
  if (a3)
  {
    uint64_t v178 = a2;
    uint64_t v179 = a5;
    uint64_t v61 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
    swift_bridgeObjectRetain(a3);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v61)) & 1) == 0)
    {
      uint64_t v62 = *(void *)(a1 + v61);
      uint64_t v63 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
      swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
      BOOL v64 = (void *)swift_retain(v62);
      uint64_t v65 = sub_100090AF8(v64);
      uint64_t v66 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v61);
      *(void *)(a1 + v61) = v65;
      swift_release(v66, v67, v68, v69, v70, v71, v72, v73);
    }

    uint64_t v74 = *(void *)(a1 + v61);
    swift_beginAccess(v74 + 16, v205, 1LL, 0LL);
    uint64_t v75 = *(_TtC18TrustedPeersHelper6Client **)(v74 + 24);
    *(void *)(v74 + 16) = v178;
    *(void *)(v74 + 24) = a3;
    swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
    a5 = v179;
  }

  if (a5)
  {
    uint64_t v83 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
    uint64_t v84 = a5;
    swift_bridgeObjectRetain(a5);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v83)) & 1) == 0)
    {
      uint64_t v85 = *(void *)(a1 + v83);
      uint64_t v86 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
      swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
      id v87 = (void *)swift_retain(v85);
      BOOL v88 = sub_100090AF8(v87);
      BOOL v89 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v83);
      *(void *)(a1 + v83) = v88;
      swift_release(v89, v90, v91, v92, v93, v94, v95, v96);
    }

    uint64_t v97 = *(void *)(a1 + v83);
    swift_beginAccess(v97 + 32, v206, 1LL, 0LL);
    uint64_t v98 = *(_TtC18TrustedPeersHelper6Client **)(v97 + 40);
    *(void *)(v97 + 32) = v189;
    *(void *)(v97 + 40) = v84;
    swift_bridgeObjectRelease(v98, v99, v100, v101, v102, v103, v104, v105);
  }

  sub_10000FC68(v200, (uint64_t)v53, &qword_100251F58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v53, 1LL, v199) == 1)
  {
    sub_100041590((uint64_t)v53, &qword_100251F58);
  }

  else
  {
    sub_100041608((uint64_t)v53, (uint64_t)v60, type metadata accessor for Peer);
    uint64_t v106 = v180;
    sub_10004164C((uint64_t)v60, v180, type metadata accessor for Peer);
    AddCustodianRecoveryKeyRequest.peer.setter(v106);
    sub_1000415CC((uint64_t)v60, type metadata accessor for Peer);
  }

  uint64_t v107 = (uint64_t)v204;
  uint64_t v108 = v195;
  uint64_t v109 = v194;
  uint64_t v110 = v192;
  uint64_t v111 = v191;
  sub_10000FC68(v193, (uint64_t)v44, &qword_100251F18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v44, 1LL, v110) == 1)
  {
    sub_100041590((uint64_t)v44, &qword_100251F18);
  }

  else
  {
    uint64_t v112 = v181;
    sub_100041608((uint64_t)v44, v181, type metadata accessor for SignedPeerStableInfo);
    uint64_t v113 = v182;
    sub_10004164C(v112, v182, type metadata accessor for SignedPeerStableInfo);
    AddCustodianRecoveryKeyRequest.stableInfoAndSig.setter(v113);
    sub_1000415CC(v112, type metadata accessor for SignedPeerStableInfo);
  }

  uint64_t v114 = (uint64_t)v198;
  uint64_t v115 = v209;
  uint64_t v116 = a10;
  if (*(void *)v209->endpoint)
  {
    uint64_t v117 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
    swift_bridgeObjectRetain(v115);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v117)) & 1) == 0)
    {
      uint64_t v118 = *(void *)(a1 + v117);
      uint64_t v119 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
      swift_allocObject(v119, *(unsigned int *)(v119 + 48), *(unsigned __int16 *)(v119 + 52));
      uint64_t v120 = (void *)swift_retain(v118);
      uint64_t v121 = sub_100090AF8(v120);
      uint64_t v122 = *(_TtC18TrustedPeersHelper6Client **)(a1 + v117);
      *(void *)(a1 + v117) = v121;
      swift_release(v122, v123, v124, v125, v126, v127, v128, v129);
    }

    uint64_t v130 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(a1 + v117)
                                              + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
    swift_beginAccess(v130, v208, 1LL, 0LL);
    uint64_t v131 = *v130;
    *uint64_t v130 = v209;
    swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
  }

  uint64_t v139 = a11;
  uint64_t v140 = v203;
  sub_10000FC68(a9, v203, &qword_100256CA0);
  int v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v140, 1LL, v202);
  uint64_t v190 = a1;
  if (v141 == 1)
  {
    sub_100041590(v140, &qword_100256CA0);
  }

  else
  {
    uint64_t v142 = v109;
    uint64_t v143 = v108;
    uint64_t v144 = v183;
    sub_100041608(v140, v183, type metadata accessor for SignedPeerDynamicInfo);
    uint64_t v145 = v184;
    sub_10004164C(v144, v184, type metadata accessor for SignedPeerDynamicInfo);
    AddCustodianRecoveryKeyRequest.dynamicInfoAndSig.setter(v145);
    uint64_t v146 = v144;
    uint64_t v108 = v143;
    uint64_t v109 = v142;
    uint64_t v116 = a10;
    uint64_t v139 = a11;
    uint64_t v107 = (uint64_t)v204;
    sub_1000415CC(v146, type metadata accessor for SignedPeerDynamicInfo);
  }

  sub_10000FC68(v116, v107, &qword_100257000);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v107, 1LL, v108) == 1)
  {
    sub_100041590(v107, &qword_100257000);
    uint64_t v147 = v197;
    uint64_t v148 = v196;
    uint64_t v149 = v190;
  }

  else
  {
    uint64_t v150 = v107;
    uint64_t v151 = v185;
    sub_100041608(v150, v185, type metadata accessor for Metrics);
    uint64_t v152 = v186;
    sub_10004164C(v151, v186, type metadata accessor for Metrics);
    uint64_t v149 = v190;
    AddCustodianRecoveryKeyRequest.metrics.setter(v152);
    sub_1000415CC(v151, type metadata accessor for Metrics);
    uint64_t v147 = v197;
    uint64_t v148 = v196;
  }

  sub_10000FC68(v139, v114, &qword_100251F50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v114, 1LL, v147) == 1)
  {
    sub_100041590(v114, &qword_100251F50);
  }

  else
  {
    uint64_t v153 = v187;
    sub_100041608(v114, v187, type metadata accessor for AccountInfo);
    uint64_t v154 = v188;
    sub_10004164C(v153, v188, type metadata accessor for AccountInfo);
    AddCustodianRecoveryKeyRequest.accountInfo.setter(v154);
    sub_1000415CC(v153, type metadata accessor for AccountInfo);
  }

  if (*(void *)a12->endpoint)
  {
    uint64_t v155 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
    swift_bridgeObjectRetain(a12);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v149 + v155)) & 1) == 0)
    {
      uint64_t v156 = *(void *)(v149 + v155);
      uint64_t v157 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
      swift_allocObject(v157, *(unsigned int *)(v157 + 48), *(unsigned __int16 *)(v157 + 52));
      uint64_t v158 = (void *)swift_retain(v156);
      uint64_t v159 = sub_100090AF8(v158);
      uint64_t v160 = *(_TtC18TrustedPeersHelper6Client **)(v149 + v155);
      *(void *)(v149 + v155) = v159;
      swift_release(v160, v161, v162, v163, v164, v165, v166, v167);
    }

    uint64_t v168 = (_TtC18TrustedPeersHelper6Client **)(*(void *)(v149 + v155)
                                              + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
    swift_beginAccess(v168, v207, 1LL, 0LL);
    uint64_t v169 = *v168;
    *uint64_t v168 = a12;
    swift_bridgeObjectRelease(v169, v170, v171, v172, v173, v174, v175, v176);
  }

void sub_10019E470(uint64_t a1)
{
}

uint64_t CuttlefishAPIAsyncOperation.fetchChanges(changeToken:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  __chkstk_darwin(ChangesRequest, type metadata accessor for FetchChangesRequest);
  uint64_t v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v20 = v19;
  uint64_t v21 = sub_1000077B8( (unint64_t *)&unk_100256FB0,  v19,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
  static Message.with(_:)(sub_1001A26C0, v25, ChangesRequest, v21);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 56))(v18, a5, a6, a7, a8);
  sub_1000415CC((uint64_t)v18, v20);
  return v22;
}

uint64_t CuttlefishAPIAsyncOperation.fetchViableBottles(filterRequest:metrics:accountInfo:completion:)( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ViableBottlesuint64_t Request = type metadata accessor for FetchViableBottlesRequest(0LL);
  __chkstk_darwin(ViableBottlesRequest, v17);
  uint64_t v19 = &v26[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v27 = a1;
  __int16 v28 = a2 & 0x1FF;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v21 = v20;
  uint64_t v22 = sub_1000077B8( (unint64_t *)&unk_100257020,  v20,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
  static Message.with(_:)(sub_100199228, v26, ViableBottlesRequest, v22);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 64))(v19, a5, a6, a7, a8);
  sub_1000415CC((uint64_t)v19, v21);
  return v23;
}

uint64_t sub_10019E6F4(void *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a5;
  uint64_t v38 = a2;
  uint64_t v43 = a1;
  uint64_t v7 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v39 = (uint64_t)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Metrics(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v38 - v29;
  if ((a3 & 0x100) == 0)
  {
    uint64_t v31 = v43;
    *uint64_t v43 = v38;
    *((_BYTE *)v31 + _Block_object_dispose(va, 8) = a3 & 1;
  }

  sub_10000FC68(a4, (uint64_t)v21, &qword_100257000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
  {
    sub_100041590((uint64_t)v21, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v21, (uint64_t)v30, type metadata accessor for Metrics);
    sub_10004164C((uint64_t)v30, (uint64_t)v27, type metadata accessor for Metrics);
    uint64_t v32 = (uint64_t)v43 + *(int *)(type metadata accessor for FetchViableBottlesRequest(0LL) + 24);
    sub_100041590(v32, &qword_100257000);
    sub_100041608((uint64_t)v27, v32, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v32, 0LL, 1LL, v22);
    sub_1000415CC((uint64_t)v30, type metadata accessor for Metrics);
  }

  sub_10000FC68(v40, (uint64_t)v10, &qword_100251F50);
  uint64_t v34 = v41;
  uint64_t v33 = v42;
  sub_100041608((uint64_t)v10, (uint64_t)v17, type metadata accessor for AccountInfo);
  uint64_t v36 = v39;
  sub_10004164C((uint64_t)v17, v39, type metadata accessor for AccountInfo);
  uint64_t v37 = (uint64_t)v43 + *(int *)(type metadata accessor for FetchViableBottlesRequest(0LL) + 28);
  sub_100041590(v37, &qword_100251F50);
  sub_100041608(v36, v37, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v37, 0LL, 1LL, v33);
  return sub_1000415CC((uint64_t)v17, type metadata accessor for AccountInfo);
}

uint64_t sub_10019EA18(void *a1)
{
  return sub_10019E6F4( a1,  *(void *)(v1 + 16),  *(unsigned __int8 *)(v1 + 24) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 25) << 8),  *(void *)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t CuttlefishAPIAsyncOperation.fetchRecoverableTlkshares(peerID:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RecoverableTLKSharesuint64_t Request = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  __chkstk_darwin(RecoverableTLKSharesRequest, type metadata accessor for FetchRecoverableTLKSharesRequest);
  uint64_t v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v20 = v19;
  uint64_t v21 = sub_1000077B8( &qword_100252830,  v19,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
  static Message.with(_:)(sub_1001A26D4, v25, RecoverableTLKSharesRequest, v21);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 72))(v18, a5, a6, a7, a8);
  sub_1000415CC((uint64_t)v18, v20);
  return v22;
}

uint64_t CuttlefishAPIAsyncOperation.fetchPolicyDocuments(keys:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  PolicyDocumentsuint64_t Request = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  __chkstk_darwin(PolicyDocumentsRequest, type metadata accessor for FetchPolicyDocumentsRequest);
  uint64_t v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8(&qword_100256DA0, v17, (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
  static Message.with(_:)(sub_1001A26FC, v22, PolicyDocumentsRequest, v19);
  uint64_t v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 80))(v16, a4, a5, a6, a7);
  sub_1000415CC((uint64_t)v16, v18);
  return v20;
}

uint64_t CuttlefishAPIAsyncOperation.getRepairAction(peerID:requiresEscrowCheck:knownFederations:performCleanup:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = a8;
  uint64_t v26 = a9;
  uint64_t v27 = a10;
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  __chkstk_darwin(RepairActionRequest, type metadata accessor for GetRepairActionRequest);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  char v32 = a3;
  uint64_t v33 = a4;
  char v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v22 = v21;
  uint64_t v23 = sub_1000077B8(&qword_100252898, v21, (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
  static Message.with(_:)(sub_100199284, v29, RepairActionRequest, v23);
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a11 + 88))(v20, v28, v26, v27, a11);
  sub_1000415CC((uint64_t)v20, v22);
  return v24;
}

uint64_t sub_10019EDA0( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = a7;
  uint64_t v63 = a8;
  int v60 = a4;
  int v61 = a6;
  uint64_t v59 = a2;
  uint64_t v11 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for AccountInfo(0LL);
  uint64_t v64 = *(void *)(v15 - 8);
  uint64_t v65 = v15;
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v57 = (uint64_t)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v19);
  uint64_t v58 = (uint64_t)&v57 - v20;
  uint64_t v21 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for Metrics(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (char *)&v57 - v32;
  if (a3)
  {
    char v34 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 8);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    *(void *)a1 = v59;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a3;
  }

  if (*(void *)(a5 + 16))
  {
    uint64_t v42 = *(_TtC18TrustedPeersHelper6Client **)(a1 + 24);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
    *(void *)(a1 + 24) = a5;
  }

  sub_10000FC68(v62, (uint64_t)v24, &qword_100257000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25) == 1)
  {
    sub_100041590((uint64_t)v24, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v24, (uint64_t)v33, type metadata accessor for Metrics);
    sub_10004164C((uint64_t)v33, (uint64_t)v30, type metadata accessor for Metrics);
    uint64_t v50 = a1 + *(int *)(type metadata accessor for GetRepairActionRequest(0LL) + 36);
    sub_100041590(v50, &qword_100257000);
    sub_100041608((uint64_t)v30, v50, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v50, 0LL, 1LL, v25);
    sub_1000415CC((uint64_t)v33, type metadata accessor for Metrics);
  }

  sub_10000FC68(v63, (uint64_t)v14, &qword_100251F50);
  uint64_t v52 = v64;
  uint64_t v51 = v65;
  uint64_t v54 = v58;
  sub_100041608((uint64_t)v14, v58, type metadata accessor for AccountInfo);
  uint64_t v55 = v57;
  sub_10004164C(v54, v57, type metadata accessor for AccountInfo);
  uint64_t v56 = a1 + *(int *)(type metadata accessor for GetRepairActionRequest(0LL) + 40);
  sub_100041590(v56, &qword_100251F50);
  sub_100041608(v55, v56, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v56, 0LL, 1LL, v51);
  return sub_1000415CC(v54, type metadata accessor for AccountInfo);
}

uint64_t sub_10019F11C(uint64_t a1)
{
  return sub_10019EDA0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t CuttlefishAPIAsyncOperation.getSupportAppInfo(metrics:accountInfo:page:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  SupportAppInfouint64_t Request = type metadata accessor for GetSupportAppInfoRequest(0LL);
  __chkstk_darwin(SupportAppInfoRequest, type metadata accessor for GetSupportAppInfoRequest);
  uint64_t v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  char v29 = a4 & 1;
  uint64_t v20 = v19;
  uint64_t v21 = sub_1000077B8(&qword_100252900, v19, (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
  static Message.with(_:)(sub_100198B3C, v25, SupportAppInfoRequest, v21);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 96))(v18, a5, a6, a7, a8);
  sub_1000415CC((uint64_t)v18, v20);
  return v22;
}

uint64_t sub_10019F268(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v46 = a5;
  uint64_t v41 = a4;
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v40 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Metrics(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v26 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v27);
  char v29 = (char *)&v39 - v28;
  sub_10000FC68(a2, (uint64_t)v20, &qword_100257000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21) == 1)
  {
    sub_100041590((uint64_t)v20, &qword_100257000);
    uint64_t v30 = v42;
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
    sub_10004164C((uint64_t)v29, (uint64_t)v26, type metadata accessor for Metrics);
    SupportAppInfouint64_t Request = type metadata accessor for GetSupportAppInfoRequest(0LL);
    uint64_t v32 = v42;
    uint64_t v33 = (uint64_t)v42 + *(int *)(SupportAppInfoRequest + 24);
    sub_100041590(v33, &qword_100257000);
    sub_100041608((uint64_t)v26, v33, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v33, 0LL, 1LL, v21);
    sub_1000415CC((uint64_t)v29, type metadata accessor for Metrics);
    uint64_t v30 = v32;
  }

  sub_10000FC68(v43, (uint64_t)v9, &qword_100251F50);
  uint64_t v35 = v44;
  uint64_t v34 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v9, 1LL, v45) != 1)
  {
    sub_100041608((uint64_t)v9, (uint64_t)v16, type metadata accessor for AccountInfo);
    uint64_t v37 = v40;
    sub_10004164C((uint64_t)v16, v40, type metadata accessor for AccountInfo);
    uint64_t v38 = (uint64_t)v30 + *(int *)(type metadata accessor for GetSupportAppInfoRequest(0LL) + 28);
    sub_100041590(v38, &qword_100251F50);
    sub_100041608(v37, v38, type metadata accessor for AccountInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v38, 0LL, 1LL, v34);
    uint64_t result = sub_1000415CC((uint64_t)v16, type metadata accessor for AccountInfo);
    if ((v46 & 1) != 0) {
      return result;
    }
    goto LABEL_8;
  }

  uint64_t result = sub_100041590((uint64_t)v9, &qword_100251F50);
  if ((v46 & 1) == 0) {
LABEL_8:
  }
    *uint64_t v30 = v41;
  return result;
}

uint64_t sub_10019F588(void *a1)
{
  return sub_10019F268( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40));
}

uint64_t CuttlefishAPIAsyncOperation.resetAccountCdpcontents(resetReason:idmsTargetContext:idmsCuttlefishPassword:testingNotifyIdms:accountInfo:metrics:isGuitarfish:completion:)( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v30 = a7;
  uint64_t v29 = a6;
  uint64_t v33 = a11;
  uint64_t v31 = a8;
  uint64_t v32 = a12;
  uint64_t v34 = a13;
  uint64_t v19 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = a1;
  __int16 v37 = a2 & 0x1FF;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v41 = v29;
  char v42 = v30;
  uint64_t v43 = v31;
  uint64_t v44 = a9;
  char v45 = a10;
  uint64_t v24 = v23;
  uint64_t v25 = sub_1000077B8( &qword_100252930,  v23,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
  static Message.with(_:)(sub_100199298, v35, v19, v25);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 104))(v22, v33, v32, v34, a14);
  sub_1000415CC((uint64_t)v22, v24);
  return v26;
}

uint64_t sub_10019F6FC(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_100198C9C( a1,  *(void *)(v2 + 16),  *(unsigned __int8 *)(v2 + 24) | (unsigned __int16)(*(unsigned __int8 *)(v2 + 25) << 8),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(unsigned __int8 *)(v2 + 64),  *(void *)(v2 + 72),  *(void *)(v2 + 80),  *(_BYTE *)(v2 + 88),  a2);
}

uint64_t CuttlefishAPIAsyncOperation.removeRecoveryKey(changeToken:peerID:stableInfoAndSig:dynamicInfoAndSig:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v30 = a9;
  uint64_t v28 = a8;
  uint64_t v29 = a10;
  uint64_t v31 = a11;
  uint64_t v19 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  __chkstk_darwin(v19, type metadata accessor for RemoveRecoveryKeyRequest);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = v28;
  uint64_t v23 = v22;
  uint64_t v24 = sub_1000077B8( (unint64_t *)&unk_100256C80,  v22,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
  static Message.with(_:)(sub_1001992B4, v32, v19, v24);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 112))(v21, v30, v29, v31, a12);
  sub_1000415CC((uint64_t)v21, v23);
  return v25;
}

uint64_t sub_10019F878( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v107 = a8;
  uint64_t v103 = a7;
  uint64_t v100 = a5;
  uint64_t v101 = a6;
  uint64_t v98 = a2;
  uint64_t v99 = a4;
  uint64_t v11 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v11, v12);
  uint64_t v108 = (uint64_t)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = type metadata accessor for AccountInfo(0LL);
  uint64_t v110 = *(void *)(v109 - 8);
  uint64_t v15 = __chkstk_darwin(v109, v14);
  uint64_t v96 = (uint64_t)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v17);
  uint64_t v97 = (uint64_t)&v91 - v18;
  uint64_t v19 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v19, v20);
  uint64_t v104 = (uint64_t)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Metrics(0LL);
  uint64_t v105 = *(void *)(v22 - 8);
  uint64_t v106 = v22;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v94 = (uint64_t)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v26);
  uint64_t v95 = (uint64_t)&v91 - v27;
  uint64_t v28 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (char *)&v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v32 = *(void *)(v102 - 8);
  uint64_t v34 = __chkstk_darwin(v102, v33);
  uint64_t v92 = (uint64_t)&v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34, v36);
  uint64_t v93 = (uint64_t)&v91 - v37;
  uint64_t v38 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v38, v39);
  uint64_t v41 = (char *)&v91 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v45 = __chkstk_darwin(v42, v44);
  id v47 = (char *)&v91 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45, v48);
  uint64_t v50 = (char *)&v91 - v49;
  if (a3)
  {
    uint64_t v51 = (_TtC18TrustedPeersHelper6Client *)a1[1];
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
    *a1 = v98;
    a1[1] = a3;
  }

  uint64_t v59 = v100;
  if (v100)
  {
    int v60 = (_TtC18TrustedPeersHelper6Client *)a1[3];
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
    a1[2] = v99;
    a1[3] = v59;
  }

  sub_10000FC68(v101, (uint64_t)v41, &qword_100251F18);
  uint64_t v68 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42) == 1)
  {
    sub_100041590((uint64_t)v41, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v41, (uint64_t)v50, type metadata accessor for SignedPeerStableInfo);
    sub_10004164C((uint64_t)v50, (uint64_t)v47, type metadata accessor for SignedPeerStableInfo);
    uint64_t v69 = (uint64_t)a1 + *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 28);
    sub_100041590(v69, &qword_100251F18);
    sub_100041608((uint64_t)v47, v69, type metadata accessor for SignedPeerStableInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v69, 0LL, 1LL, v42);
    sub_1000415CC((uint64_t)v50, type metadata accessor for SignedPeerStableInfo);
  }

  uint64_t v70 = v110;
  uint64_t v72 = v105;
  uint64_t v71 = v106;
  uint64_t v73 = a9;
  sub_10000FC68(v103, (uint64_t)v31, &qword_100256CA0);
  uint64_t v74 = v102;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v31, 1LL, v102) == 1)
  {
    sub_100041590((uint64_t)v31, &qword_100256CA0);
  }

  else
  {
    uint64_t v106 = a9;
    uint64_t v75 = v93;
    sub_100041608((uint64_t)v31, v93, type metadata accessor for SignedPeerDynamicInfo);
    uint64_t v76 = v71;
    uint64_t v77 = v92;
    sub_10004164C(v75, v92, type metadata accessor for SignedPeerDynamicInfo);
    uint64_t v78 = (uint64_t)a1 + *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 32);
    sub_100041590(v78, &qword_100256CA0);
    uint64_t v79 = v77;
    uint64_t v71 = v76;
    sub_100041608(v79, v78, type metadata accessor for SignedPeerDynamicInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v78, 0LL, 1LL, v74);
    uint64_t v80 = v75;
    uint64_t v70 = v110;
    uint64_t v73 = v106;
    sub_1000415CC(v80, type metadata accessor for SignedPeerDynamicInfo);
  }

  uint64_t v81 = v104;
  sub_10000FC68(v107, v104, &qword_100257000);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v81, 1LL, v71) == 1)
  {
    sub_100041590(v81, &qword_100257000);
  }

  else
  {
    uint64_t v82 = v95;
    sub_100041608(v81, v95, type metadata accessor for Metrics);
    uint64_t v83 = v94;
    sub_10004164C(v82, v94, type metadata accessor for Metrics);
    uint64_t v84 = (uint64_t)a1 + *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 36);
    sub_100041590(v84, &qword_100257000);
    sub_100041608(v83, v84, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v84, 0LL, 1LL, v71);
    sub_1000415CC(v82, type metadata accessor for Metrics);
  }

  uint64_t v85 = v108;
  uint64_t v86 = v109;
  sub_10000FC68(v73, v108, &qword_100251F50);
  uint64_t v88 = v97;
  sub_100041608(v85, v97, type metadata accessor for AccountInfo);
  uint64_t v89 = v96;
  sub_10004164C(v88, v96, type metadata accessor for AccountInfo);
  uint64_t v90 = (uint64_t)a1 + *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 40);
  sub_100041590(v90, &qword_100251F50);
  sub_100041608(v89, v90, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v90, 0LL, 1LL, v86);
  return sub_1000415CC(v88, type metadata accessor for AccountInfo);
}

uint64_t sub_10019FEC0(void *a1)
{
  return sub_10019F878(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t CuttlefishAPIAsyncOperation.performAtoprvactions(metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v16 = sub_1000077B8( &qword_100252788,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
  static Message.with(_:)(sub_1001A26E8, v19, v12, v16);
  uint64_t v17 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 120))(v15, a3, a4, a5, a6);
  sub_1000415CC((uint64_t)v15, type metadata accessor for PerformATOPRVActionsRequest);
  return v17;
}

uint64_t sub_1001A0000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a1;
  uint64_t v40 = a3;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AccountInfo(0LL);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v38 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Metrics(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v37 - v26;
  sub_10000FC68(a2, (uint64_t)v18, &qword_100257000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19) == 1)
  {
    sub_100041590((uint64_t)v18, &qword_100257000);
    uint64_t v28 = v39;
  }

  else
  {
    sub_100041608((uint64_t)v18, (uint64_t)v27, type metadata accessor for Metrics);
    sub_10004164C((uint64_t)v27, (uint64_t)v24, type metadata accessor for Metrics);
    uint64_t v29 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
    uint64_t v30 = v39;
    uint64_t v31 = v39 + *(int *)(v29 + 20);
    sub_100041590(v31, &qword_100257000);
    sub_100041608((uint64_t)v24, v31, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v31, 0LL, 1LL, v19);
    sub_1000415CC((uint64_t)v27, type metadata accessor for Metrics);
    uint64_t v28 = v30;
  }

  sub_10000FC68(v40, (uint64_t)v7, &qword_100251F50);
  uint64_t v33 = v41;
  uint64_t v32 = v42;
  sub_100041608((uint64_t)v7, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v35 = v38;
  sub_10004164C((uint64_t)v14, v38, type metadata accessor for AccountInfo);
  uint64_t v36 = v28 + *(int *)(type metadata accessor for PerformATOPRVActionsRequest(0LL) + 24);
  sub_100041590(v36, &qword_100251F50);
  sub_100041608(v35, v36, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v36, 0LL, 1LL, v32);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

uint64_t CuttlefishAPIAsyncOperation.fetchPcsidentityByPublicKey(pcsServices:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  __chkstk_darwin(Request, type metadata accessor for DirectPCSIdentityFetchRequest);
  uint64_t v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8( (unint64_t *)&unk_100256F20,  v17,  (uint64_t)&protocol conformance descriptor for DirectPCSIdentityFetchRequest);
  static Message.with(_:)(sub_1001A2710, v22, Request, v19);
  uint64_t v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 128))(v16, a4, a5, a6, a7);
  sub_1000415CC((uint64_t)v16, v18);
  return v20;
}

uint64_t CuttlefishAPIAsyncOperation.fetchCurrentItem(currentItems:metrics:accountInfo:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  __chkstk_darwin(Request, type metadata accessor for CurrentItemFetchRequest);
  uint64_t v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8( (unint64_t *)&unk_100256F40,  v17,  (uint64_t)&protocol conformance descriptor for CurrentItemFetchRequest);
  static Message.with(_:)(sub_1001A2724, v22, Request, v19);
  uint64_t v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 136))(v16, a4, a5, a6, a7);
  sub_1000415CC((uint64_t)v16, v18);
  return v20;
}

uint64_t CuttlefishAPIAsyncOperation.performCkserverUnreadableDataRemoval(isGuitarfish:metrics:accountInfo:completion:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  __chkstk_darwin(v14, type metadata accessor for RemoveUnreadableCKServerDataRequest);
  uint64_t v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  _BYTE v22[16] = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v18 = v17;
  uint64_t v19 = sub_1000077B8( &qword_100252A48,  v17,  (uint64_t)&protocol conformance descriptor for RemoveUnreadableCKServerDataRequest);
  static Message.with(_:)(sub_1001A2738, v22, v14, v19);
  uint64_t v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 144))(v16, a4, a5, a6, a7);
  sub_1000415CC((uint64_t)v16, v18);
  return v20;
}

uint64_t sub_1001A0648(_BYTE *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  int v6 = a2;
  uint64_t v7 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v37 = (uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v15);
  uint64_t v38 = (uint64_t)&v37 - v16;
  uint64_t v17 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Metrics(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v37 - v28;
  if (v6 != 2) {
    *a1 = a2 & 1;
  }
  sub_10000FC68(v39, (uint64_t)v20, &qword_100257000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21) == 1)
  {
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
    sub_10004164C((uint64_t)v29, (uint64_t)v26, type metadata accessor for Metrics);
    uint64_t v30 = (uint64_t)&a1[*(int *)(type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL) + 24)];
    sub_100041590(v30, &qword_100257000);
    sub_100041608((uint64_t)v26, v30, type metadata accessor for Metrics);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v30, 0LL, 1LL, v21);
    sub_1000415CC((uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v31 = v42;
  sub_10000FC68(v40, (uint64_t)v10, &qword_100251F50);
  uint64_t v32 = v41;
  uint64_t v34 = v38;
  sub_100041608((uint64_t)v10, v38, type metadata accessor for AccountInfo);
  uint64_t v35 = v37;
  sub_10004164C(v34, v37, type metadata accessor for AccountInfo);
  uint64_t v36 = (uint64_t)&a1[*(int *)(type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL) + 28)];
  sub_100041590(v36, &qword_100251F50);
  sub_100041608(v35, v36, type metadata accessor for AccountInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v36, 0LL, 1LL, v31);
  return sub_1000415CC(v34, type metadata accessor for AccountInfo);
}