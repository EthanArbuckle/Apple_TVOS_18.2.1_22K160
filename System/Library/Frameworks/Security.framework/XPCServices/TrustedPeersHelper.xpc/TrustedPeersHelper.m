int main(int argc, const char **argv, const char **envp)
{
  malloc_zone_t *zone;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_s *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  id v25;
  id v26;
  int result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _UNKNOWN **v31;
  zone = malloc_create_zone(0LL, 0);
  malloc_set_zone_name(zone, "ICU");
  LODWORD(v28) = 0;
  u_setMemoryFunctions(zone, sub_100176F68, sub_100176FC8, sub_100177028, &v28);
  v4 = type metadata accessor for CuttlefishCKOperationRunnerCreator();
  v5 = swift_allocObject(v4, 16LL, 7LL);
  v6 = sub_100007620(0LL, &qword_100250EF8, off_10022CEA0);
  v7 = [objc_allocWithZone((Class)OTPersonaActualAdapter) init];
  v8 = [objc_allocWithZone((Class)OTManagedConfigurationActualAdapter) init];
  v30 = v4;
  v31 = &off_100236028;
  v28 = v5;
  v9 = type metadata accessor for ContainerMap();
  v10 = (void *)swift_allocObject(v9, 96LL, 7LL);
  v11 = sub_100006248((uint64_t)&v28, v4);
  __chkstk_darwin(v11, v11);
  v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = *v13;
  swift_retain(v5);
  v16 = sub_100006958(v15, v6, (uint64_t)v7, (uint64_t)v8, v10);
  sub_100007600(&v28);
  swift_release(v5);
  qword_100258230 = (uint64_t)v16;
  v17 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v17, qword_100250B80);
  sub_100006BAC(v17, (uint64_t)qword_100250B80);
  Logger.init(subsystem:category:)(0xD00000000000001FLL, 0x80000001001E7520LL, 1852399981LL, 0xE400000000000000LL);
  qword_100258238 = 0xD00000000000001CLL;
  unk_100258240 = 0x80000001001E7540LL;
  if (!_set_user_dir_suffix())
  {
    result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ELL,  0x80000001001E7590LL,  "TrustedPeersHelper/Sandbox.swift",  32LL,  2LL,  69LL,  0,  v28,  v29);
LABEL_10:
    __break(1u);
    return result;
  }

  sub_10003CDC0();
  v19 = v18;
  v20 = swift_bridgeObjectRelease(v18);
  if (!v19)
  {
    result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x80000001001E75B0LL,  "TrustedPeersHelper/Sandbox.swift",  32LL,  2LL,  73LL,  0,  v28,  v29);
    goto LABEL_10;
  }

  v21 = (os_log_s *)Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting up", v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  v24 = (void *)objc_opt_self(&OBJC_CLASS___NSValueTransformer);
  v25 = [objc_allocWithZone((Class)type metadata accessor for SetValueTransformer()) init];
  if (qword_100250BA0 != -1) {
    swift_once(&qword_100250BA0, sub_100008400);
  }
  [v24 setValueTransformer:v25 forName:qword_100258258];

  qword_100258248 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for ServiceDelegate()) init];
  v26 = [(id)objc_opt_self(NSXPCListener) serviceListener];
  qword_100258250 = (uint64_t)v26;
  [v26 setDelegate:qword_100258248];
  [v26 resume];
  return 0;
}

id sub_100005FCC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServiceDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of Changes.recoveryEncryptionPubKey()
{
  return 0LL;
}

uint64_t variable initialization expression of TLKShare.signature()
{
  return 0LL;
}

uint64_t variable initialization expression of EscrowInformation.Metadata.ClientMetadata._secureBackupMetadataTimestamp@<X0>( uint64_t a1@<X8>)
{
  return sub_100006208((uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp, a1);
}

void *variable initialization expression of Changes.differences()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of Peer._permanentInfoAndSig@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for SignedPeerPermanentInfo, a1);
}

uint64_t variable initialization expression of Peer._stableInfoAndSig@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for SignedPeerStableInfo, a1);
}

uint64_t variable initialization expression of Peer._dynamicInfoAndSig@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for SignedPeerDynamicInfo, a1);
}

uint64_t variable initialization expression of Peer._recoveryVoucher@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for SignedRecoveryVoucher, a1);
}

uint64_t variable initialization expression of Peer._custodianRecoveryKeyAndSig@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for SignedCustodianRecoveryKey, a1);
}

uint64_t variable initialization expression of PeerDifference.operation@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for PeerDifference.OneOf_Operation, a1);
}

uint64_t variable initialization expression of TLKShare.poisoned()
{
  return 0LL;
}

uint64_t variable initialization expression of ViewKey.keyclass()
{
  return 0LL;
}

uint64_t variable initialization expression of ViewKeys._storage()
{
  return sub_1000061AC(&qword_100250CB8, &qword_100251EA8);
}

uint64_t variable initialization expression of DirectPCSIdentity._item@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208((uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport, a1);
}

uint64_t variable initialization expression of EscrowPair._storage()
{
  return sub_1000061AC(&qword_100250CD8, &qword_100251EB0);
}

uint64_t variable initialization expression of Changes.more()
{
  return 0LL;
}

uint64_t variable initialization expression of PolicyDocumentMapEntry._key@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for PolicyDocumentKey, a1);
}

uint64_t variable initialization expression of RemoveUnreadableCKServerDataRequest._accountInfo@<X0>( uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for AccountInfo, a1);
}

uint64_t variable initialization expression of EscrowProxyFederationMoveRecordRequest._metrics@<X0>( uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for Metrics, a1);
}

uint64_t variable initialization expression of AddCustodianRecoveryKeyResponse._changes@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for Changes, a1);
}

uint64_t variable initialization expression of EstablishRequest._storage()
{
  return sub_1000061AC(&qword_100250D20, &qword_100251EB8);
}

uint64_t variable initialization expression of JoinWithVoucherRequest._storage()
{
  return sub_1000061AC(&qword_100250D38, &qword_100251EC0);
}

uint64_t variable initialization expression of UpdateTrustRequest._trustedDevicesVersion@<X0>( uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for IdmsTrustedDevicesVersion, a1);
}

uint64_t variable initialization expression of AddCustodianRecoveryKeyRequest._storage()
{
  return sub_1000061AC(&qword_100250D90, &qword_100251EC8);
}

uint64_t variable initialization expression of FetchRecoverableTLKSharesResponse.View._keys@<X0>( uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for ViewKeysRecords, a1);
}

uint64_t variable initialization expression of GetRepairActionResponse._storage()
{
  return sub_1000061AC(&qword_100250E00, &qword_100251ED0);
}

uint64_t variable initialization expression of EscrowInformation.Metadata._storage()
{
  return sub_1000061AC(&qword_100250E50, &qword_100251ED8);
}

uint64_t sub_1000061AC(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_retain(*a2);
}

uint64_t variable initialization expression of EscrowInformation._escrowInformationMetadata@<X0>( uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for EscrowInformation.Metadata, a1);
}

uint64_t variable initialization expression of DirectPCSIdentity._pcsService@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for PCSService, a1);
}

uint64_t variable initialization expression of CurrentCKKSItem._itemSpecifier@<X0>(uint64_t a1@<X8>)
{
  return sub_100006208(type metadata accessor for CurrentCKKSItemSpecifier, a1);
}

uint64_t sub_100006208@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

uint64_t sub_100006248(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_100006270(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001DE368, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000062AC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001DE368, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000062F4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001DE368, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10000634C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

id sub_100006354()
{
  return *v0;
}

void *sub_10000635C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000636C(void *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_100006378@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100006388(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100006394(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000063A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001DE368, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000063F4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKUnderlyingErrorDomain);
}

uint64_t sub_100006404(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006444(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006484(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000064E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000653C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_10000654C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000658C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000065CC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006630()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100006664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000066B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100006710(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100251070,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE118);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006750(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100251070,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE118);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006794(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000067D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000682C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510B0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DDFFC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000686C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510B0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DDFFC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000068AC(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000068EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100006944(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_100006958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v22 = a2;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin();
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin();
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for CuttlefishCKOperationRunnerCreator();
  v28 = &off_100236028;
  *(void *)&__int128 v26 = a1;
  sub_100007620(0LL, &qword_100250FF8, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  v25 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_1000077B8( &qword_100251000,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v17 = sub_100007578(&qword_100251008);
  unint64_t v18 = sub_100007658();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v17, v18, v11, v16);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v7);
  a5[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000032LL,  0x80000001001E7650LL,  v15,  v13,  v10,  0LL);
  a5[11] = sub_10000B96C((uint64_t)_swiftEmptyArrayStorage);
  sub_1000076E8(&v26, (uint64_t)(a5 + 3));
  uint64_t v19 = v23;
  a5[8] = v22;
  a5[9] = v19;
  a5[10] = v24;
  return a5;
}

uint64_t *sub_100006B6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100006BAC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for ServiceDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper15ServiceDelegate);
}

uint64_t sub_100006BE4(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v2, (uint64_t)qword_100250B80);
  id v3 = a1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    *(void *)&v58[0] = v3;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, (char *)v58 + 8, v6 + 4, v6 + 12);
    *uint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received a new client: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
  }

  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v3 valueForEntitlement:v10];

  if (!v11)
  {
    memset(v58, 0, sizeof(v58));
    goto LABEL_12;
  }

  _bridgeAnyObjectToAny(_:)(v58, v11);
  swift_unknownObjectRelease(v11);
  sub_1000075B8((uint64_t)v58, (uint64_t)v56);
  uint64_t v12 = swift_dynamicCast(&v57, v56, (char *)&type metadata for Any + 8, &type metadata for Int, 0LL);
  if ((_DWORD)v12 && v57 == (id)1)
  {
    v13 = (void *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled((os_log_t)v13, v14))
    {
LABEL_10:

      sub_100007600(v56);
      sub_100007538((uint64_t)v58);
      id v21 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___TrustedPeersHelperProtocol];
      id v22 = TrustedPeersHelperSetupProtocol(v21);

      [v3 setExportedInterface:v22];
      id v23 = [v3 endpoint];
      uint64_t v24 = qword_100258230;
      uint64_t v25 = type metadata accessor for Client();
      uint64_t v26 = swift_allocObject(v25, 32LL, 7LL);
      *(void *)(v26 + 16) = v23;
      *(void *)(v26 + 24) = v24;
      swift_retain(v24);
      [v3 setExportedObject:v26];
      [v3 resume];
      swift_release(v26);
      return 1LL;
    }

    v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v55 = v16;
    *(_DWORD *)v15 = 136446210;
    uint64_t v17 = v15 + 12;
    unint64_t v18 = v15 + 4;
    uint64_t v54 = sub_10017C4C4(0xD00000000000002BLL, 0x80000001001E7620LL, &v55);
    uint64_t v19 = &v55;
    v20 = &v54;
LABEL_9:
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v19, v18, v17);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v13, v14, "client has entitlement '%{public}s'", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
    goto LABEL_10;
  }

  uint64_t v35 = swift_dynamicCast(&v54, v56, (char *)&type metadata for Any + 8, &type metadata for Bool, 0LL);
  if ((_DWORD)v35 && v54 == 1)
  {
    v13 = (void *)Logger.logObject.getter(v35);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled((os_log_t)v13, v14)) {
      goto LABEL_10;
    }
    v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    id v57 = (id)v16;
    *(_DWORD *)v15 = 136446210;
    uint64_t v17 = v15 + 12;
    unint64_t v18 = v15 + 4;
    uint64_t v55 = sub_10017C4C4(0xD00000000000002BLL, 0x80000001001E7620LL, (uint64_t *)&v57);
    uint64_t v19 = v56;
    v20 = &v55;
    goto LABEL_9;
  }

  if (!swift_dynamicCast(&v57, v56, (char *)&type metadata for Any + 8, &type metadata for Int, 0LL))
  {
    if (swift_dynamicCast(&v54, v56, (char *)&type metadata for Any + 8, &type metadata for Bool, 0LL))
    {
      int v48 = v54;
      id v37 = v3;
      v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v49))
      {
        uint64_t v40 = swift_slowAlloc(28LL, -1LL);
        v41 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v53 = swift_slowAlloc(32LL, -1LL);
        id v57 = (id)v53;
        *(_DWORD *)uint64_t v40 = 138543874;
        uint64_t v55 = (uint64_t)v37;
        id v50 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v40 + 4, v40 + 12);
        void *v41 = v37;

        *(_WORD *)(v40 + 12) = 2082;
        uint64_t v55 = sub_10017C4C4(0xD00000000000002BLL, 0x80000001001E7620LL, (uint64_t *)&v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v40 + 14, v40 + 22);
        *(_WORD *)(v40 + 22) = 1024;
        LODWORD(v55) = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 4, v40 + 24, v40 + 28);
        v43 = "client(%{public}@ has wrong BOOLean value for '%{public}s' (%{BOOL}d), rejecting";
        v44 = v38;
        os_log_type_t v45 = v49;
        v46 = (uint8_t *)v40;
        uint32_t v47 = 28;
        goto LABEL_26;
      }

LABEL_27:
      goto LABEL_28;
    }

    sub_100007600(v56);
LABEL_12:
    id v28 = v3;
    v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      v32 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      v56[0] = v52;
      *(_DWORD *)uint64_t v31 = 138543618;
      id v57 = v28;
      id v33 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v31 + 4, v31 + 12);
      void *v32 = v28;

      *(_WORD *)(v31 + 12) = 2082;
      id v57 = (id)sub_10017C4C4(0xD00000000000002BLL, 0x80000001001E7620LL, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v31 + 14, v31 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "client(%{public}@ is missing entitlement '%{public}s'",  (uint8_t *)v31,  0x16u);
      uint64_t v34 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v32, 1LL, v34);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
    }

    goto LABEL_29;
  }

  uint64_t v36 = (uint64_t)v57;
  id v37 = v3;
  v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v38, v39)) {
    goto LABEL_27;
  }
  uint64_t v40 = swift_slowAlloc(32LL, -1LL);
  v41 = (void *)swift_slowAlloc(8LL, -1LL);
  uint64_t v53 = swift_slowAlloc(32LL, -1LL);
  uint64_t v54 = (uint64_t)v37;
  uint64_t v55 = v53;
  *(_DWORD *)uint64_t v40 = 138543874;
  id v42 = v37;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v40 + 4, v40 + 12);
  void *v41 = v37;

  *(_WORD *)(v40 + 12) = 2082;
  uint64_t v54 = sub_10017C4C4(0xD00000000000002BLL, 0x80000001001E7620LL, &v55);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v40 + 14, v40 + 22);
  *(_WORD *)(v40 + 22) = 2048;
  uint64_t v54 = v36;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v40 + 24, v40 + 32);
  v43 = "client(%{public}@ has wrong integer value for '%{public}s' (%ld), rejecting";
  v44 = v38;
  os_log_type_t v45 = v39;
  v46 = (uint8_t *)v40;
  uint32_t v47 = 32;
LABEL_26:
  _os_log_impl((void *)&_mh_execute_header, v44, v45, v43, v46, v47);
  uint64_t v51 = sub_100007578(&qword_100250F90);
  swift_arrayDestroy(v41, 1LL, v51);
  swift_slowDealloc(v41, -1LL, -1LL);
  swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v53, -1LL, -1LL);
  swift_slowDealloc(v40, -1LL, -1LL);
LABEL_28:

  sub_100007600(v56);
LABEL_29:
  sub_100007538((uint64_t)v58);
  return 0LL;
}

            v88 = &qword_1002563E8;
            v89 = v79;
            goto LABEL_41;
          }

          v97 = v132;
          sub_10000FC68(v79, (uint64_t)v132, &qword_100257000);
          v98 = v82(v80, 1LL, v81);
          v85 = v146;
          v84 = (uint64_t)v147;
          v87 = (uint64_t)v145;
          if (v98 == 1)
          {
            sub_100041590(v152, &qword_100257000);
            sub_100041590(v153, &qword_100257000);
            sub_1000415CC((uint64_t)v97, type metadata accessor for Metrics);
            goto LABEL_27;
          }

          v99 = v140;
          sub_100041608(v80, (uint64_t)v140, type metadata accessor for Metrics);
          v100 = v97[1];
          v101 = v99[1];
          if (*v97 == *v99 && v100 == v101
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*v97, v100, *v99, v101, 0LL) & 1) != 0)
          {
            if ((v102 = v132[2], v103 = v132[3], v104 = v99[2], v105 = v99[3], v102 == v104) && v103 == v105
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v102, v103, v104, v105, 0LL) & 1) != 0)
            {
              v106 = *(int *)(v81 + 24);
              v107 = (uint64_t)v132;
              v108 = (char *)v132 + v106;
              v109 = (char *)v99 + v106;
              v110 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              LOBYTE(v108) = dispatch thunk of static Equatable.== infix(_:_:)(v108, v109, v144, v110);
              sub_1000415CC((uint64_t)v99, type metadata accessor for Metrics);
              sub_100041590(v152, &qword_100257000);
              sub_100041590(v153, &qword_100257000);
              sub_1000415CC(v107, type metadata accessor for Metrics);
              sub_100041590(v79, &qword_100257000);
              v86 = (uint64_t)v143;
              goto LABEL_35;
            }
          }

          sub_1000415CC((uint64_t)v99, type metadata accessor for Metrics);
          v96 = &qword_100257000;
          sub_100041590(v152, &qword_100257000);
          sub_100041590(v153, &qword_100257000);
          sub_1000415CC((uint64_t)v132, type metadata accessor for Metrics);
          v89 = v79;
LABEL_24:
          v88 = v96;
          goto LABEL_41;
        }

        sub_100041590((uint64_t)v53, &qword_100251F18);
        sub_100041590((uint64_t)v56, &qword_100251F18);
        sub_1000415CC((uint64_t)v49, type metadata accessor for SignedPeerStableInfo);
      }

      v88 = &qword_100256450;
      v89 = v71;
LABEL_41:
      sub_100041590(v89, v88);
      goto LABEL_42;
    }
  }

  return v61 & 1;
}

    uint64_t v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  id v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t result = (void *)sub_10000DE70(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    unint64_t v18 = v23[0];
    uint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }

  id v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    v13 = (v20 - 1) & v20;
    uint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    uint64_t result = v18;
  }

  id v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    NSString v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    NSString v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_28;
      }

    uint64_t v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    unint64_t v18 = 16 * v13;
    uint64_t v19 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    v20 = v19[1];
    id v21 = (uint64_t *)(*(void *)(a1 + 56) + v18);
    id v22 = *v21;
    id v23 = v21[1];
    *(void *)&v42[0] = *v19;
    *((void *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    sub_1000084E8(v22, v23);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v33[0] = v22;
    v33[1] = v23;
    swift_dynamicCast(v37, v33, &type metadata for Data, (char *)&type metadata for Any + 8, 7LL);
    v38 = v34;
    os_log_type_t v39 = v35;
    uint64_t v40 = v36;
    sub_100008570(v37, v41);
    uint64_t v34 = v38;
    uint64_t v35 = v39;
    uint64_t v36 = v40;
    sub_100008570(v41, v42);
    sub_100008570(v42, &v38);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v24 = -1LL << *((_BYTE *)v3 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)]) != 0)
    {
      NSString v10 = __clz(__rbit64((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        os_log_type_t v30 = *(void *)&v7[8 * v26];
      }

      while (v30 == -1);
      NSString v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    id v11 = v3[6] + 40 * v10;
    *(_OWORD *)id v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(void *)(v11 + 32) = v36;
    uint64_t result = (uint64_t)sub_100008570(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  uint64_t v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_100172694(a1);
    return (uint64_t)v3;
  }

  v15 = *(void *)(v32 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v31) {
      goto LABEL_37;
    }
    v15 = *(void *)(v32 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

uint64_t sub_100007538(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251EA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100007578(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000075B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007578(&qword_100251EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100007600(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100007620(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

unint64_t sub_100007658()
{
  unint64_t result = qword_100251010;
  if (!qword_100251010)
  {
    uint64_t v1 = sub_1000076A4(&qword_100251008);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100251010);
  }

  return result;
}

uint64_t sub_1000076A4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000076E8(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for CKUnderlyingError(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for TPPeerStatus(uint64_t a1)
{
}

void type metadata accessor for CuttlefishResetReason(uint64_t a1)
{
}

void type metadata accessor for TPPBCustodianRecoveryKey_Kind(uint64_t a1)
{
}

void type metadata accessor for TPPBPeerStableInfoUserControllableViewStatus(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_10000778C()
{
  return sub_1000077B8( &qword_100251050,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DDF14);
}

uint64_t sub_1000077B8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000077F8()
{
  return sub_1000077B8( &qword_100251058,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DDF40);
}

uint64_t sub_100007824()
{
  return sub_1000077B8( &qword_100251060,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE040);
}

uint64_t sub_100007850()
{
  return sub_1000077B8( &qword_100251068,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE068);
}

uint64_t sub_10000787C()
{
  return sub_1000077B8( &qword_100251070,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE118);
}

uint64_t sub_1000078A8()
{
  return sub_1000077B8( &qword_100251078,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE0E8);
}

uint64_t sub_1000078D4()
{
  return sub_1000077B8( &qword_100251080,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE0A8);
}

uint64_t sub_100007900()
{
  return sub_1000077B8(&qword_100251088, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1001DE1F8);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_100007940()
{
  return sub_1000077B8(&qword_100251090, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1001DE1C0);
}

unint64_t sub_100007970()
{
  unint64_t result = qword_100251098;
  if (!qword_100251098)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100251098);
  }

  return result;
}

uint64_t sub_1000079B4()
{
  return sub_1000077B8(&qword_1002510A0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1001DE230);
}

uint64_t sub_1000079E0()
{
  return sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158);
}

uint64_t sub_100007A0C()
{
  return sub_1000077B8( &qword_1002510B0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DDFFC);
}

uint64_t sub_100007A38()
{
  return sub_1000077B8( &qword_1002510B8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DDFC8);
}

uint64_t sub_100007A64()
{
  return sub_1000077B8( &qword_1002510C0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DDF84);
}

uint64_t sub_100007A90()
{
  return sub_1000077B8( &qword_1002510C8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001DE300);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_100007AD0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100007B14()
{
  return sub_1000077B8( &qword_1002510D0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001DE2C4);
}

uint64_t sub_100007B40()
{
  return sub_1000077B8( &qword_1002510D8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001DE33C);
}

uint64_t sub_100007B6C()
{
  return sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
}

uint64_t sub_100007B98()
{
  return sub_1000077B8( (unint64_t *)&qword_1002510E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE394);
}

uint64_t sub_100007BC4()
{
  return sub_1000077B8( &qword_1002510F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DDE1C);
}

uint64_t sub_100007C04()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v0, qword_100251170);
  sub_100006BAC(v0, (uint64_t)qword_100251170);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x80000001001E7520LL,  0xD000000000000013LL,  0x80000001001DE410LL);
}

double sub_100007CB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (v27)
  {
    sub_100008570(&v26, v28);
    __int128 v3 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
    uint64_t v4 = v29;
    uint64_t v5 = sub_1000084C4(v28, v29);
    uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)(v5, v4);
    *(void *)&__int128 v26 = 0LL;
    id v7 = [v3 archivedDataWithRootObject:v6 requiringSecureCoding:1 error:&v26];
    swift_unknownObjectRelease(v6);
    id v8 = (id)v26;
    if (v7)
    {
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v11 = v10;

      *(void *)(a2 + 24) = &type metadata for Data;
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v11;
      sub_100007600(v28);
      return result;
    }

    v13 = v8;
    uint64_t v14 = _convertNSErrorToError(_:)(v8);

    swift_willThrow(v15);
    sub_100007600(v28);
    if (qword_100250B98 != -1) {
      swift_once(&qword_100250B98, sub_100007C04);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_100251170);
    swift_errorRetain(v14);
    uint64_t v17 = swift_errorRetain(v14);
    unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v28[0] = v21;
      *(_DWORD *)v20 = 136446210;
      *(void *)&__int128 v26 = v14;
      swift_errorRetain(v14);
      uint64_t v22 = sub_100007578(&qword_100251D70);
      uint64_t v23 = String.init<A>(describing:)(&v26, v22);
      unint64_t v25 = v24;
      *(void *)&__int128 v26 = sub_10017C4C4(v23, v24, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, (char *)&v26 + 8, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to serialize a Set: %{public}s", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      swift_errorRelease(v14);
    }

    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      swift_errorRelease(v14);
    }
  }

  else
  {
    sub_100007538((uint64_t)&v26);
  }

  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

double sub_100007FB4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (v14[3])
  {
    if (swift_dynamicCast(v13, v14, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL))
    {
      uint64_t v3 = v13[0];
      unint64_t v4 = v13[1];
      id v5 = objc_allocWithZone(&OBJC_CLASS___NSKeyedUnarchiver);
      sub_1000084E8(v3, v4);
      id v6 = sub_100158440();
      uint64_t v7 = sub_100007578(&qword_1002511B0);
      uint64_t v8 = swift_allocObject(v7, 48LL, 7LL);
      *(_OWORD *)(v8 + 16) = xmmword_1001DE420;
      *(void *)(v8 + 32) = sub_100007620(0LL, &qword_1002511B8, &OBJC_CLASS___NSSet_ptr);
      *(void *)(v8 + 40) = sub_100007620(0LL, &qword_1002511C0, &OBJC_CLASS___NSString_ptr);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSKeyedArchiveRootObjectKey);
      uint64_t v11 = v10;
      NSCoder.decodeObject(of:forKey:)(v8, v9, v10);

      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      sub_10000852C(v3, v4);
      sub_10000852C(v3, v4);
      return result;
    }
  }

  else
  {
    sub_100007538((uint64_t)v14);
  }

  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

id sub_1000082EC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, _OWORD *))
{
  if (a3)
  {
    id v7 = a1;
    uint64_t v9 = swift_unknownObjectRetain(a3, v8);
    _bridgeAnyObjectToAny(_:)(v18, v9);
    swift_unknownObjectRelease(a3);
  }

  else
  {
    memset(v18, 0, sizeof(v18));
    id v10 = a1;
  }

  a4(v19, v18);

  sub_100007538((uint64_t)v18);
  uint64_t v11 = v20;
  if (!v20) {
    return 0LL;
  }
  uint64_t v12 = sub_1000084C4(v19, v20);
  uint64_t v13 = *(void *)(v11 - 8);
  __chkstk_darwin(v12, v12);
  uint64_t v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v13 + 16))(v15);
  uint64_t v16 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v15, v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v11);
  sub_100007600(v19);
  return v16;
}

NSString sub_100008400()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100258258 = (uint64_t)result;
  return result;
}

id sub_100008470()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SetValueTransformer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SetValueTransformer()
{
  return objc_opt_self(&OBJC_CLASS___SetValueTransformer);
}

void *sub_1000084C4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_1000084E8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000852C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_OWORD *sub_100008570(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

id sub_100008580(char *a1)
{
  uint64_t v4 = OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey;
  id v5 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey];
  v38 = v1;
  id v6 = [v5 publicKey];
  id v7 = [v6 keyData];

  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v10 = v9;

  ccsha384_di(v11, v12);
  id v13 = objc_msgSend((id)objc_opt_self(TPHObjectiveC), "ccsha384_diSize");
  uint64_t v36 = sub_100009698((uint64_t)v13);
  unint64_t v37 = v14;
  uint64_t v34 = v8;
  unint64_t v35 = v10;
  sub_1000084E8(v8, v10);
  sub_1000090D8((uint64_t)&v36);
  uint64_t v15 = v36;
  unint64_t v16 = v37;
  sub_1000084E8(v36, v37);
  Swift::String v17 = Data.base64EncodedString(options:)(0LL);
  sub_10000852C(v15, v16);
  sub_10000852C(v15, v16);
  sub_10000852C(v8, v10);
  uint64_t v36 = 2968402LL;
  unint64_t v37 = 0xE300000000000000LL;
  String.append(_:)(v17);
  swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v17._object, v18, v19, v20, v21, v22, v23, v24);
  sub_10000852C(v8, v10);
  unint64_t v25 = *(void **)&a1[v4];
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  id v28 = *(void **)&a1[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_encryptionKey];
  objc_allocWithZone((Class)type metadata accessor for OctagonSelfPeerKeys());
  uint64_t v29 = sub_100044CDC(v26, v27, v25, v28);
  id v30 = v38;
  if (v2)
  {

    uint64_t v31 = type metadata accessor for RecoveryKey();
    swift_deallocPartialClassInstance(v30, v31, 16LL, 7LL);
  }

  else
  {
    *(void *)&v38[OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys] = v29;

    v33.receiver = v30;
    v33.super_class = (Class)type metadata accessor for RecoveryKey();
    id v30 = objc_msgSendSuper2(&v33, "init");
  }

  return v30;
}

id sub_1000087E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecoveryKey();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RecoveryKey()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper11RecoveryKey);
}

uint64_t sub_100008840(uint64_t a1, char *a2, int a3)
{
  LODWORD(v33) = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v36 = a1;
  v10(v9, a1, v5);
  uint64_t v11 = OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey;
  id v12 = [*(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey] publicKey];
  uint64_t v32 = OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_encryptionKey;
  id v13 = [*(id *)&a2[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_encryptionKey] publicKey];
  unint64_t v14 = *(void **)&a2[v11];
  id v15 = objc_allocWithZone(&OBJC_CLASS___TPCustodianRecoveryKey);
  id v16 = v14;
  uint64_t v17 = v34;
  id v18 = sub_100009DD8((uint64_t)v9, (uint64_t)v12, (uint64_t)v13, (uint64_t)v16, v33);
  if (v17)
  {

    swift_unknownObjectRelease(v12);
    swift_unknownObjectRelease(v13);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v36, v5);
    uint64_t v19 = v35;
    uint64_t v29 = type metadata accessor for CustodianRecoveryKey();
    swift_deallocPartialClassInstance(v19, v29, 32LL, 7LL);
  }

  else
  {
    int64_t v20 = v18;
    uint64_t v33 = v6;
    uint64_t v34 = v5;
    swift_unknownObjectRelease(v12);
    swift_unknownObjectRelease(v13);

    uint64_t v21 = v35;
    *(void *)(v35 + 24) = v20;
    id v22 = [v20 peerID];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    uint64_t v26 = *(void **)&a2[v11];
    uint64_t v27 = *(void **)&a2[v32];
    objc_allocWithZone((Class)type metadata accessor for OctagonSelfPeerKeys());
    id v28 = sub_100044CDC(v23, v25, v26, v27);
    uint64_t v19 = v21;
    uint64_t v31 = v28;

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v34);
    *(void *)(v21 + 16) = v31;
  }

  return v19;
}

uint64_t sub_100008A9C( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, _TtC18TrustedPeersHelper6Client *a5)
{
  uint64_t v7 = v5;
  int64_t v20 = sub_10017C7E0(a2, a3);
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v21 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a3, v60, v61, v62, v63, v64, v65, v66);
  }

  else
  {
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a3, v13, v14, v15, v16, v17, v18, v19);
    if ((a3 & 0x2000000000000000LL) != 0) {
      Swift::Int v21 = HIBYTE(a3) & 0xF;
    }
    else {
      Swift::Int v21 = a2 & 0xFFFFFFFFFFFFLL;
    }
  }

  uint64_t v22 = sub_100009734((_BYTE *)v20 + 32, v21);
  unint64_t v24 = v23;
  swift_release(v20);
  objc_allocWithZone((Class)type metadata accessor for RecoveryKeySet());
  sub_1000084E8(v22, v24);
  uint64_t v25 = sub_10000ABC0(v22, v24, a4, a5);
  if (v6)
  {

    sub_10000852C(v22, v24);
LABEL_11:
    uint64_t v57 = type metadata accessor for CustodianRecoveryKey();
    swift_deallocPartialClassInstance(v7, v57, 32LL, 7LL);
    return v7;
  }

  uint64_t v69 = v7;
  v70 = v25;
  uint64_t v68 = OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey;
  id v26 = [*(id *)&v25[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey] publicKey];
  id v27 = [v26 spki];
  swift_unknownObjectRelease(v26);
  uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
  unint64_t v30 = v29;

  id v31 = [a1 signingPublicKey];
  id v32 = [v31 spki];
  swift_unknownObjectRelease(v31);
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
  unint64_t v35 = v34;

  sub_100041318(v28, v30);
  LOBYTE(v32) = v36;
  sub_10000852C(v33, v35);
  sub_10000852C(v28, v30);
  uint64_t v67 = OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_encryptionKey;
  id v37 = [*(id *)&v70[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_encryptionKey] publicKey];
  id v38 = [v37 spki];
  swift_unknownObjectRelease(v37);
  uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
  unint64_t v41 = v40;

  id v42 = [a1 encryptionPublicKey];
  id v43 = [v42 spki];
  swift_unknownObjectRelease(v42);
  uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
  unint64_t v46 = v45;

  sub_100041318(v39, v41);
  LOBYTE(v43) = v47;
  sub_10000852C(v44, v46);
  sub_10000852C(v39, v41);
  if ((v43 & 1) == 0)
  {
LABEL_10:
    unint64_t v55 = sub_100008F2C();
    uint64_t v56 = swift_allocError(&type metadata for RecoveryKey.Error, v55, 0LL, 0LL);
    swift_willThrow(v56);

    sub_10000852C(v22, v24);
    uint64_t v7 = v69;
    goto LABEL_11;
  }

  *(void *)(v69 + 24) = a1;
  id v48 = a1;
  id v49 = [v48 peerID];
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  uint64_t v52 = v51;

  uint64_t v53 = *(void **)&v70[v68];
  uint64_t v54 = *(void **)&v70[v67];
  objc_allocWithZone((Class)type metadata accessor for OctagonSelfPeerKeys());
  v59 = sub_100044CDC(v50, v52, v53, v54);

  sub_10000852C(v22, v24);
  uint64_t v7 = v69;
  *(void *)(v69 + 16) = v59;
  return v7;
}

uint64_t type metadata accessor for CustodianRecoveryKey()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper20CustodianRecoveryKey);
}

uint64_t sub_100008EDC()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for InheritanceKey()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper14InheritanceKey);
}

unint64_t sub_100008F2C()
{
  unint64_t result = qword_1002513D0;
  if (!qword_1002513D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001DE4F8, &type metadata for RecoveryKey.Error);
    atomic_store(result, (unint64_t *)&qword_1002513D0);
  }

  return result;
}

uint64_t sub_100008F70()
{
  return 1LL;
}

Swift::Int sub_100008F78()
{
  return Hasher._finalize()();
}

void sub_100008FB8()
{
}

Swift::Int sub_100008FDC()
{
  return Hasher._finalize()();
}

uint64_t sub_100009018(uint64_t a1)
{
  unint64_t v2 = sub_100009094();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100009040(uint64_t a1)
{
  unint64_t v2 = sub_100009094();
  return Error<>._code.getter(a1, v2);
}

unint64_t sub_10000906C()
{
  return 0xD000000000000024LL;
}

uint64_t sub_100009088()
{
  return 9LL;
}

unint64_t sub_100009094()
{
  unint64_t result = qword_1002513D8;
  if (!qword_1002513D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001DE4B8, &type metadata for RecoveryKey.Error);
    atomic_store(result, (unint64_t *)&qword_1002513D8);
  }

  return result;
}

void sub_1000090D8(uint64_t a1)
{
  __asm { BR              X12 }

void sub_100009138(uint64_t a1@<X8>)
{
  uint64_t v4 = v1;
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  sub_10000930C(v3);
  *unint64_t v2 = v4;
  v2[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
}

void sub_10000930C(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_10000936C()
{
  uint64_t v7 = v1;
  LOWORD(v8) = v0;
  BYTE2(v8) = BYTE2(v0);
  HIBYTE(v8) = BYTE3(v0);
  unsigned __int8 v9 = BYTE4(v0);
  unsigned __int8 v10 = BYTE5(v0);
  unsigned __int8 v11 = BYTE6(v0);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x100009528LL);
  }

  uint64_t result = ccdigest(v4, BYTE6(v0), &v7, v3);
  unint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *unint64_t v2 = v7;
  v2[1] = v6;
  return result;
}

void sub_100009544(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (a1[1] < (int)v4)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v4, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      sub_10000930C(a2);
      return;
    }

    goto LABEL_6;
  }

LABEL_7:
  __break(1u);
}

  __break(1u);
}

  BOOL v19 = 0LL;
LABEL_8:
  if (a7)
  {
    int64_t v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
  }

  else
  {
    int64_t v20 = 0LL;
  }

  Swift::Int v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  LOBYTE(v24) = a11 & 1;
  uint64_t v22 = [v25 initWithKeychainCircleMetrics:v16.super.isa altDSID:v17 flowID:v19 deviceSessionID:v20 eventName:v21 testsAreEnabled:a10 & 1 canSendMetrics:v24 category:a12];

  return v22;
}

    uint64_t v53 = &qword_1002563E8;
    uint64_t v54 = (uint64_t)v33;
LABEL_26:
    sub_100041590(v54, v53);
    goto LABEL_27;
  }

  uint64_t v52 = v98;
  sub_10000FC68((uint64_t)v33, (uint64_t)v98, &qword_100257000);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100041590(v44, &qword_100257000);
    sub_100041590((uint64_t)v43, &qword_100257000);
    sub_1000415CC((uint64_t)v52, type metadata accessor for Metrics);
    goto LABEL_7;
  }

  unint64_t v55 = v48;
  uint64_t v56 = v94;
  sub_100041608(v55, (uint64_t)v94, type metadata accessor for Metrics);
  uint64_t v57 = v52[1];
  v58 = v56[1];
  if ((*v52 != *v56 || v57 != v58) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v52, v57, *v56, v58, 0LL) & 1) == 0
    || ((v59 = v52[2], SEL v60 = v52[3], v61 = v56[2], v62 = v56[3], v59 != v61) || v60 != v62)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v61, v62, 0LL) & 1) == 0)
  {
    sub_1000415CC((uint64_t)v56, type metadata accessor for Metrics);
    sub_100041590(v44, &qword_100257000);
    sub_100041590((uint64_t)v43, &qword_100257000);
    sub_1000415CC((uint64_t)v52, type metadata accessor for Metrics);
    uint64_t v54 = (uint64_t)v33;
    uint64_t v53 = &qword_100257000;
    goto LABEL_26;
  }

  id v63 = *(int *)(v50 + 24);
  id v64 = (char *)v52 + v63;
  BOOL v65 = (uint64_t)v56;
  BOOL v66 = (char *)v56 + v63;
  uint64_t v67 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  uint64_t v68 = v64;
  uint64_t v69 = v106;
  LOBYTE(v66) = dispatch thunk of static Equatable.== infix(_:_:)(v68, v66, v106, v67);
  sub_1000415CC(v65, type metadata accessor for Metrics);
  sub_100041590(v44, &qword_100257000);
  v70 = (uint64_t)v43;
  uint64_t v51 = v69;
  sub_100041590(v70, &qword_100257000);
  sub_1000415CC((uint64_t)v52, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v33, &qword_100257000);
LABEL_15:
  v71 = (uint64_t)v95;
  sub_10000FC68((uint64_t)&v46[*(int *)(v45 + 28)], (uint64_t)v95, &qword_100251F50);
  v106 = (uint64_t)v47;
  v107 = v45;
  v72 = (uint64_t)v97;
  sub_10000FC68((uint64_t)&v47[*(int *)(v45 + 28)], (uint64_t)v97, &qword_100251F50);
  v73 = (uint64_t)v96;
  v74 = (uint64_t)&v96[*(int *)(v104 + 48)];
  sub_10000FC68(v71, (uint64_t)v96, &qword_100251F50);
  sub_10000FC68(v72, v74, &qword_100251F50);
  v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
  v76 = v103;
  if (v75(v73, 1LL, v103) != 1)
  {
    v77 = v93;
    sub_10000FC68(v73, (uint64_t)v93, &qword_100251F50);
    if (v75(v74, 1LL, v76) == 1)
    {
      sub_100041590((uint64_t)v97, &qword_100251F50);
      sub_100041590(v71, &qword_100251F50);
      sub_1000415CC((uint64_t)v77, type metadata accessor for AccountInfo);
      goto LABEL_20;
    }

    v78 = v99;
    sub_100041608(v74, (uint64_t)v99, type metadata accessor for AccountInfo);
    if (*v77 != *v78)
    {
      sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
      sub_100041590((uint64_t)v97, &qword_100251F50);
      sub_100041590(v71, &qword_100251F50);
      sub_1000415CC((uint64_t)v77, type metadata accessor for AccountInfo);
      uint64_t v54 = v73;
      uint64_t v53 = &qword_100251F50;
      goto LABEL_26;
    }

    v79 = *(int *)(v76 + 20);
    v80 = (char *)v77 + v79;
    v81 = (char *)v78 + v79;
    v82 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v80) = dispatch thunk of static Equatable.== infix(_:_:)(v80, v81, v51, v82);
    sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
    sub_100041590((uint64_t)v97, &qword_100251F50);
    sub_100041590(v71, &qword_100251F50);
    sub_1000415CC((uint64_t)v77, type metadata accessor for AccountInfo);
    sub_100041590(v73, &qword_100251F50);
LABEL_27:
    v89 = 0;
    return v89 & 1;
  }

  sub_100041590(v72, &qword_100251F50);
  sub_100041590(v71, &qword_100251F50);
  if (v75(v74, 1LL, v76) != 1)
  {
LABEL_20:
    uint64_t v53 = &qword_1002563E0;
    uint64_t v54 = v73;
    goto LABEL_26;
  }

  sub_100041590(v73, &qword_100251F50);
LABEL_24:
  v83 = v107;
  v84 = v102;
  v85 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v102 + 16);
  v86 = v100;
  v85(v100, &v46[*(int *)(v107 + 20)], v51);
  v87 = v101;
  v85(v101, (unsigned __int8 *)(v106 + *(int *)(v83 + 20)), v51);
  v88 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v89 = dispatch thunk of static Equatable.== infix(_:_:)(v86, v87, v51, v88);
  v90 = *(void (**)(char *, uint64_t))(v84 + 8);
  v90(v87, v51);
  v90(v86, v51);
  return v89 & 1;
}

    unint64_t v55 = &qword_1002563E8;
    uint64_t v56 = (uint64_t)v34;
LABEL_27:
    sub_100041590(v56, v55);
    goto LABEL_28;
  }

  v107 = a2;
  uint64_t v54 = v110;
  sub_10000FC68((uint64_t)v34, (uint64_t)v110, &qword_100257000);
  if (v51(v49, 1LL, v50) == 1)
  {
    sub_100041590((uint64_t)v43, &qword_100257000);
    sub_100041590((uint64_t)v46, &qword_100257000);
    sub_1000415CC((uint64_t)v54, type metadata accessor for Metrics);
    goto LABEL_7;
  }

  v93 = v46;
  uint64_t v57 = v94;
  sub_100041608(v49, (uint64_t)v94, type metadata accessor for Metrics);
  v58 = v54[1];
  v59 = v57[1];
  if ((*v54 != *v57 || v58 != v59) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v54, v58, *v57, v59, 0LL) & 1) == 0
    || ((SEL v60 = v54[2], v61 = v54[3], v62 = v57[2], v63 = v57[3], v60 != v62) || v61 != v63)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, v62, v63, 0LL) & 1) == 0)
  {
    sub_1000415CC((uint64_t)v57, type metadata accessor for Metrics);
    uint64_t v69 = &qword_100257000;
    sub_100041590((uint64_t)v43, &qword_100257000);
    sub_100041590((uint64_t)v93, &qword_100257000);
    sub_1000415CC((uint64_t)v54, type metadata accessor for Metrics);
    uint64_t v56 = (uint64_t)v34;
    goto LABEL_26;
  }

  id v64 = *(int *)(v50 + 24);
  BOOL v65 = (char *)v54 + v64;
  BOOL v66 = (char *)v57 + v64;
  uint64_t v67 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  uint64_t v53 = v106;
  LOBYTE(v65) = dispatch thunk of static Equatable.== infix(_:_:)(v65, v66, v106, v67);
  sub_1000415CC((uint64_t)v57, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v43, &qword_100257000);
  sub_100041590((uint64_t)v93, &qword_100257000);
  sub_1000415CC((uint64_t)v54, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v34, &qword_100257000);
  uint64_t v52 = v107;
LABEL_15:
  uint64_t v68 = v109;
  uint64_t v69 = &qword_100251F50;
  v70 = (uint64_t)v95;
  sub_10000FC68((uint64_t)&v109[*(int *)(v47 + 28)], (uint64_t)v95, &qword_100251F50);
  v110 = (char *)v47;
  v71 = *(int *)(v47 + 28);
  v72 = v52;
  v73 = (uint64_t)v96;
  sub_10000FC68((uint64_t)&v52[v71], (uint64_t)v96, &qword_100251F50);
  v74 = v105;
  v75 = v105 + *(int *)(v102 + 48);
  sub_10000FC68(v70, v105, &qword_100251F50);
  sub_10000FC68(v73, v75, &qword_100251F50);
  v76 = v104;
  v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  if (v77(v74, 1LL, v104) != 1)
  {
    v78 = v101;
    sub_10000FC68(v74, (uint64_t)v101, &qword_100251F50);
    if (v77(v75, 1LL, v76) == 1)
    {
      sub_100041590((uint64_t)v96, &qword_100251F50);
      sub_100041590(v70, &qword_100251F50);
      sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
      goto LABEL_20;
    }

    v79 = v97;
    sub_100041608(v75, (uint64_t)v97, type metadata accessor for AccountInfo);
    if (*v78 == *v79)
    {
      v80 = *(int *)(v76 + 20);
      v81 = (char *)v78 + v80;
      v82 = (char *)v79 + v80;
      v83 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      LOBYTE(v81) = dispatch thunk of static Equatable.== infix(_:_:)(v81, v82, v53, v83);
      sub_1000415CC((uint64_t)v79, type metadata accessor for AccountInfo);
      sub_100041590((uint64_t)v96, &qword_100251F50);
      sub_100041590(v70, &qword_100251F50);
      sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
      sub_100041590(v74, &qword_100251F50);
LABEL_28:
      v90 = 0;
      return v90 & 1;
    }

    sub_1000415CC((uint64_t)v79, type metadata accessor for AccountInfo);
    sub_100041590((uint64_t)v96, &qword_100251F50);
    sub_100041590(v70, &qword_100251F50);
    sub_1000415CC((uint64_t)v78, type metadata accessor for AccountInfo);
    uint64_t v56 = v74;
LABEL_26:
    unint64_t v55 = v69;
    goto LABEL_27;
  }

  sub_100041590(v73, &qword_100251F50);
  sub_100041590(v70, &qword_100251F50);
  if (v77(v75, 1LL, v76) != 1)
  {
LABEL_20:
    unint64_t v55 = &qword_1002563E0;
    uint64_t v56 = v74;
    goto LABEL_27;
  }

  sub_100041590(v74, &qword_100251F50);
LABEL_24:
  v84 = (uint64_t)v110;
  v85 = v100;
  v86 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  v87 = v98;
  v86(v98, &v68[*((int *)v110 + 5)], v53);
  v88 = v99;
  v86(v99, &v72[*(int *)(v84 + 20)], v53);
  v89 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v90 = dispatch thunk of static Equatable.== infix(_:_:)(v87, v88, v53, v89);
  v91 = *(void (**)(char *, uint64_t))(v85 + 8);
  v91(v88, v53);
  v91(v87, v53);
  return v90 & 1;
}

    unint64_t v23 = sub_100007578(&qword_100251658);
    memcpy(a1, a2, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_74;
  }

  if (v10)
  {
    sub_1000415CC((uint64_t)a1, type metadata accessor for PeerDifference.OneOf_Operation);
    goto LABEL_7;
  }

  if (a1 != a2)
  {
    sub_1000415CC((uint64_t)a1, type metadata accessor for PeerDifference.OneOf_Operation);
    unint64_t v24 = swift_getEnumCaseMultiPayload(a2, v6);
    v190 = a3;
    if (v24 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v67 = (int *)type metadata accessor for Peer(0LL);
      uint64_t v68 = v67[6];
      uint64_t v69 = (char *)a1 + v68;
      v70 = (char *)a2 + v68;
      v71 = type metadata accessor for UnknownStorage(0LL);
      v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 32LL);
      v72(v69, v70, v71);
      v73 = v67[7];
      v74 = (_OWORD *)((char *)a1 + v73);
      v75 = (_OWORD *)((char *)a2 + v73);
      v76 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      v77 = *(void *)(v76 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v77 + 48))(v75, 1LL, v76))
      {
        v78 = sub_100007578(&qword_100256F80);
        memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
      }

      else
      {
        v98 = v75[1];
        *v74 = *v75;
        v74[1] = v98;
        v72((char *)v74 + *(int *)(v76 + 24), (char *)v75 + *(int *)(v76 + 24), v71);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0LL, 1LL, v76);
      }

      v99 = v67[8];
      v100 = (_OWORD *)((char *)a1 + v99);
      v101 = (_OWORD *)((char *)a2 + v99);
      v102 = type metadata accessor for SignedPeerStableInfo(0LL);
      v103 = *(void *)(v102 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v103 + 48))(v101, 1LL, v102))
      {
        v104 = sub_100007578(&qword_100251F18);
        memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64LL));
      }

      else
      {
        v119 = v101[1];
        *v100 = *v101;
        v100[1] = v119;
        v72((char *)v100 + *(int *)(v102 + 24), (char *)v101 + *(int *)(v102 + 24), v71);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v103 + 56))(v100, 0LL, 1LL, v102);
      }

      v120 = v67[9];
      v121 = (_OWORD *)((char *)a1 + v120);
      v122 = (_OWORD *)((char *)a2 + v120);
      v123 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      v124 = *(void *)(v123 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v124 + 48))(v122, 1LL, v123))
      {
        v125 = sub_100007578(&qword_100256CA0);
        memcpy(v121, v122, *(void *)(*(void *)(v125 - 8) + 64LL));
      }

      else
      {
        v140 = v122[1];
        *v121 = *v122;
        v121[1] = v140;
        v72((char *)v121 + *(int *)(v123 + 24), (char *)v122 + *(int *)(v123 + 24), v71);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v124 + 56))(v121, 0LL, 1LL, v123);
      }

      v141 = v67[10];
      v142 = (_OWORD *)((char *)a1 + v141);
      v143 = (_OWORD *)((char *)a2 + v141);
      v144 = type metadata accessor for SignedRecoveryVoucher(0LL);
      v145 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v145 + 48))(v143, 1LL, v144))
      {
        v146 = sub_100007578(&qword_100251F20);
        memcpy(v142, v143, *(void *)(*(void *)(v146 - 8) + 64LL));
      }

      else
      {
        v161 = v143[1];
        *v142 = *v143;
        v142[1] = v161;
        v72((char *)v142 + *(int *)(v144 + 24), (char *)v143 + *(int *)(v144 + 24), v71);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v145 + 56))(v142, 0LL, 1LL, v144);
      }

      v162 = v67[11];
      v163 = (_OWORD *)((char *)a1 + v162);
      v164 = (_OWORD *)((char *)a2 + v162);
      v165 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      v166 = *(void *)(v165 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v166 + 48))(v164, 1LL, v165))
      {
        v167 = sub_100007578(&qword_100251F28);
        memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64LL));
      }

      else
      {
        v179 = v164[1];
        *v163 = *v164;
        v163[1] = v179;
        v72((char *)v163 + *(int *)(v165 + 24), (char *)v164 + *(int *)(v165 + 24), v71);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v166 + 56))(v163, 0LL, 1LL, v165);
      }

      v176 = a1;
      v177 = v6;
      v178 = 2LL;
    }

    else if (v24 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v25 = (int *)type metadata accessor for Peer(0LL);
      id v26 = v25[6];
      id v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      unint64_t v29 = type metadata accessor for UnknownStorage(0LL);
      unint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL);
      v30(v27, v28, v29);
      id v31 = v25[7];
      id v32 = (_OWORD *)((char *)a1 + v31);
      uint64_t v33 = (_OWORD *)((char *)a2 + v31);
      unint64_t v34 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      unint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
      {
        char v36 = sub_100007578(&qword_100256F80);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
      }

      else
      {
        v91 = v33[1];
        void *v32 = *v33;
        v32[1] = v91;
        v30((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v29);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
      }

      v92 = v25[8];
      v93 = (_OWORD *)((char *)a1 + v92);
      v94 = (_OWORD *)((char *)a2 + v92);
      v95 = type metadata accessor for SignedPeerStableInfo(0LL);
      v96 = *(void *)(v95 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v96 + 48))(v94, 1LL, v95))
      {
        v97 = sub_100007578(&qword_100251F18);
        memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64LL));
      }

      else
      {
        v112 = v94[1];
        *v93 = *v94;
        v93[1] = v112;
        v30((char *)v93 + *(int *)(v95 + 24), (char *)v94 + *(int *)(v95 + 24), v29);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0LL, 1LL, v95);
      }

      v113 = v25[9];
      v114 = (_OWORD *)((char *)a1 + v113);
      v115 = (_OWORD *)((char *)a2 + v113);
      v116 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      v117 = *(void *)(v116 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v117 + 48))(v115, 1LL, v116))
      {
        v118 = sub_100007578(&qword_100256CA0);
        memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64LL));
      }

      else
      {
        v133 = v115[1];
        *v114 = *v115;
        v114[1] = v133;
        v30((char *)v114 + *(int *)(v116 + 24), (char *)v115 + *(int *)(v116 + 24), v29);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0LL, 1LL, v116);
      }

      v134 = v25[10];
      v135 = (_OWORD *)((char *)a1 + v134);
      v136 = (_OWORD *)((char *)a2 + v134);
      v137 = type metadata accessor for SignedRecoveryVoucher(0LL);
      v138 = *(void *)(v137 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v138 + 48))(v136, 1LL, v137))
      {
        v139 = sub_100007578(&qword_100251F20);
        memcpy(v135, v136, *(void *)(*(void *)(v139 - 8) + 64LL));
      }

      else
      {
        v154 = v136[1];
        *v135 = *v136;
        v135[1] = v154;
        v30((char *)v135 + *(int *)(v137 + 24), (char *)v136 + *(int *)(v137 + 24), v29);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v138 + 56))(v135, 0LL, 1LL, v137);
      }

      v155 = v25[11];
      v156 = (_OWORD *)((char *)a1 + v155);
      v157 = (_OWORD *)((char *)a2 + v155);
      v158 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      v159 = *(void *)(v158 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v159 + 48))(v157, 1LL, v158))
      {
        v160 = sub_100007578(&qword_100251F28);
        memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64LL));
      }

      else
      {
        v175 = v157[1];
        *v156 = *v157;
        v156[1] = v175;
        v30((char *)v156 + *(int *)(v158 + 24), (char *)v157 + *(int *)(v158 + 24), v29);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v159 + 56))(v156, 0LL, 1LL, v158);
      }

      v176 = a1;
      v177 = v6;
      v178 = 1LL;
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v79 = (int *)type metadata accessor for Peer(0LL);
      v80 = v79[6];
      v81 = (char *)a1 + v80;
      v82 = (char *)a2 + v80;
      v83 = type metadata accessor for UnknownStorage(0LL);
      v84 = *(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 32LL);
      v84(v81, v82, v83);
      v85 = v79[7];
      v86 = (_OWORD *)((char *)a1 + v85);
      v87 = (_OWORD *)((char *)a2 + v85);
      v88 = type metadata accessor for SignedPeerPermanentInfo(0LL);
      v89 = *(void *)(v88 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v89 + 48))(v87, 1LL, v88))
      {
        v90 = sub_100007578(&qword_100256F80);
        memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
      }

      else
      {
        v105 = v87[1];
        *v86 = *v87;
        v86[1] = v105;
        v84((char *)v86 + *(int *)(v88 + 24), (char *)v87 + *(int *)(v88 + 24), v83);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0LL, 1LL, v88);
      }

      v106 = v79[8];
      v107 = (_OWORD *)((char *)a1 + v106);
      v108 = (_OWORD *)((char *)a2 + v106);
      v109 = type metadata accessor for SignedPeerStableInfo(0LL);
      v110 = *(void *)(v109 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v110 + 48))(v108, 1LL, v109))
      {
        v111 = sub_100007578(&qword_100251F18);
        memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64LL));
      }

      else
      {
        v126 = v108[1];
        *v107 = *v108;
        v107[1] = v126;
        v84((char *)v107 + *(int *)(v109 + 24), (char *)v108 + *(int *)(v109 + 24), v83);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0LL, 1LL, v109);
      }

      v127 = v79[9];
      v128 = (_OWORD *)((char *)a1 + v127);
      v129 = (_OWORD *)((char *)a2 + v127);
      v130 = type metadata accessor for SignedPeerDynamicInfo(0LL);
      v131 = *(void *)(v130 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v131 + 48))(v129, 1LL, v130))
      {
        v132 = sub_100007578(&qword_100256CA0);
        memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64LL));
      }

      else
      {
        v147 = v129[1];
        *v128 = *v129;
        v128[1] = v147;
        v84((char *)v128 + *(int *)(v130 + 24), (char *)v129 + *(int *)(v130 + 24), v83);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0LL, 1LL, v130);
      }

      v148 = v79[10];
      v149 = (_OWORD *)((char *)a1 + v148);
      v150 = (_OWORD *)((char *)a2 + v148);
      v151 = type metadata accessor for SignedRecoveryVoucher(0LL);
      v152 = *(void *)(v151 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v152 + 48))(v150, 1LL, v151))
      {
        v153 = sub_100007578(&qword_100251F20);
        memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64LL));
      }

      else
      {
        v168 = v150[1];
        *v149 = *v150;
        v149[1] = v168;
        v84((char *)v149 + *(int *)(v151 + 24), (char *)v150 + *(int *)(v151 + 24), v83);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v152 + 56))(v149, 0LL, 1LL, v151);
      }

      v169 = v79[11];
      v170 = (_OWORD *)((char *)a1 + v169);
      v171 = (_OWORD *)((char *)a2 + v169);
      v172 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
      v173 = *(void *)(v172 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v173 + 48))(v171, 1LL, v172))
      {
        v174 = sub_100007578(&qword_100251F28);
        memcpy(v170, v171, *(void *)(*(void *)(v174 - 8) + 64LL));
      }

      else
      {
        v180 = v171[1];
        *v170 = *v171;
        v170[1] = v180;
        v84((char *)v170 + *(int *)(v172 + 24), (char *)v171 + *(int *)(v172 + 24), v83);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v173 + 56))(v170, 0LL, 1LL, v172);
      }

      v176 = a1;
      v177 = v6;
      v178 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v176, v177, v178);
    a3 = v190;
  }

  uint64_t result = (objc_class *)sub_1000DE140();
  uint64_t v25 = v7;
  if (!v7) {
    return result;
  }
  if (qword_100250EB8 != -1) {
    goto LABEL_15;
  }
LABEL_9:
  id v38 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v38, (uint64_t)qword_1002567D0);
  swift_errorRetain(v25);
  uint64_t v39 = swift_errorRetain(v25);
  unint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  unint64_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    id v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v43 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v42 = 138543362;
    swift_errorRetain(v25);
    uint64_t v44 = _swift_stdlib_bridgeErrorToNSError(v25);
    uint64_t v52 = (void *)v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v42 + 4, v42 + 12);
    const char *v43 = v44;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to save built-in policies to DB: %{public}@", v42, 0xCu);
    unint64_t v45 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v43, 1LL, v45);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return (objc_class *)swift_willThrow(v46);
}

  id v38 = [v17 escrowMetadata];
  if (v38)
  {
    uint64_t v39 = v38;
    unint64_t v40 = [v38 bottleID];

    if (v40)
    {
      unint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      id v43 = v42;
    }

    else
    {
      unint64_t v41 = 0LL;
      id v43 = 0LL;
    }
  }

  else
  {
    unint64_t v41 = 0LL;
    id v43 = 0LL;
  }

  uint64_t v44 = v76;
  sub_10000FC68((uint64_t)&v16[*(int *)(v13 + 52)], (uint64_t)v8, &qword_100252098);
  unint64_t v45 = v77;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v8, 1LL, v77) == 1)
  {
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    unint64_t v46 = *(int *)(v45 + 20);
    if (qword_100250E50 != -1) {
      swift_once(&qword_100250E50, sub_10009EA7C);
    }
    char v47 = qword_100251ED8;
    *(void *)&v12[v46] = qword_100251ED8;
    swift_retain(v47);
    sub_100041590((uint64_t)v8, &qword_100252098);
  }

  else
  {
    sub_100041608((uint64_t)v8, (uint64_t)v12, type metadata accessor for EscrowInformation.Metadata);
  }

  id v48 = (uint64_t *)(*(void *)&v12[*(int *)(v45 + 20)]
                  + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
  swift_beginAccess(v48, v78, 0LL, 0LL);
  uint64_t v50 = *v48;
  id v49 = (_TtC18TrustedPeersHelper6Client *)v48[1];
  swift_bridgeObjectRetain(v49);
  sub_1000415CC((uint64_t)v12, type metadata accessor for EscrowInformation.Metadata);
  if (!v43)
  {
    sub_1000415CC((uint64_t)v16, type metadata accessor for EscrowInformation);
    swift_bridgeObjectRelease(v49, v60, v61, v62, v63, v64, v65, v66);
    goto LABEL_25;
  }

  if (v41 == v50 && v43 == v49) {
    v59 = 1;
  }
  else {
    v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v50, v49, 0LL);
  }
  swift_bridgeObjectRelease(v49, v51, v52, v53, v54, v55, v56, v57);
  sub_1000415CC((uint64_t)v16, type metadata accessor for EscrowInformation);
  swift_bridgeObjectRelease(v43, v67, v68, v69, v70, v71, v72, v73);
  return v59 & 1;
}

    swift_bridgeObjectRelease(v16);
    uint64_t result = v14;
    uint64_t v3 = v33;
  }

  id v13 = v3 + 5;
  if (v3 + 5 >= v32) {
    return 1LL;
  }
  unsigned __int8 v11 = *(void *)(v31 + 8 * v13);
  if (v11)
  {
    id v12 = v3 + 5;
    goto LABEL_25;
  }

  while (1)
  {
    id v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      return 1LL;
    }
    unsigned __int8 v11 = *(void *)(v31 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

  __break(1u);
}

  return v7;
}

void sub_1000095F4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v9 = v8;
  uint64_t v10 = __DataStorage._offset.getter();
  uint64_t v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (!a3)
  {
LABEL_12:
    __break(1u);
    return;
  }

  if (v12 >= v7 - v6) {
    uint64_t v13 = v7 - v6;
  }
  else {
    uint64_t v13 = v12;
  }
  ccdigest(a2, v13, v9 + v11, a3);
}

uint64_t sub_100009698(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_100009734(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_10000EF44(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

id sub_1000097E0(uint64_t a1, unint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4)
{
  id v16 = sub_10017C7E0(a1, a2);
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v17 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a2, v28, v29, v30, v31, v32, v33, v34);
  }

  else
  {
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a2, v9, v10, v11, v12, v13, v14, v15);
    if ((a2 & 0x2000000000000000LL) != 0) {
      Swift::Int v17 = HIBYTE(a2) & 0xF;
    }
    else {
      Swift::Int v17 = a1 & 0xFFFFFFFFFFFFLL;
    }
  }

  uint64_t v18 = sub_100009734((_BYTE *)v16 + 32, v17);
  unint64_t v20 = v19;
  swift_release(v16);
  id v21 = objc_allocWithZone((Class)type metadata accessor for RecoveryKeySet());
  sub_1000084E8(v18, v20);
  uint64_t v22 = a4;
  id v23 = v21;
  unint64_t v24 = sub_10000ABC0(v18, v20, a3, v22);
  if (!v4)
  {
    uint64_t v25 = v24;
    id v26 = objc_allocWithZone((Class)type metadata accessor for RecoveryKey());
    id v23 = sub_100008580(v25);
  }

  sub_10000852C(v18, v20);
  return v23;
}

id sub_100009908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v11 = 0LL;
  id v6 = [v3 initWithData:isa specifier:a3 error:&v11];

  id v7 = v11;
  if (v6)
  {
    id v8 = v11;
  }

  else
  {
    id v9 = v11;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
  }

  return v6;
}

uint64_t sub_1000099CC(void *a1, uint64_t a2)
{
  id v4 = [a1 signingKeyData];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  unint64_t v7 = v6;

  ccsha384_di(v8, v9);
  id v10 = objc_msgSend((id)objc_opt_self(TPHObjectiveC), "ccsha384_diSize");
  uint64_t v49 = sub_100009698((uint64_t)v10);
  unint64_t v50 = v11;
  sub_1000084E8(v5, v7);
  sub_1000090D8((uint64_t)&v49);
  uint64_t v12 = v49;
  unint64_t v13 = v50;
  sub_1000084E8(v49, v50);
  Swift::String v14 = Data.base64EncodedString(options:)(0LL);
  sub_10000852C(v12, v13);
  sub_10000852C(v12, v13);
  sub_10000852C(v5, v7);
  uint64_t v49 = 2968402LL;
  unint64_t v50 = 0xE300000000000000LL;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v14._object);
  sub_10000852C(v5, v7);
  unint64_t v51 = v50;
  id v15 = [a1 signingKeyData];
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v18 = v17;

  id v19 = objc_allocWithZone(&OBJC_CLASS____SFECKeySpecifier);
  sub_1000084E8(v16, v18);
  id v20 = [v19 initWithCurve:4];
  id v21 = objc_allocWithZone(&OBJC_CLASS____SFECPublicKey);
  id v22 = sub_100009908(v16, v18, (uint64_t)v20);

  sub_10000852C(v16, v18);
  if (v2)
  {
    sub_10000852C(v16, v18);
    return swift_bridgeObjectRelease(v51);
  }

  else
  {
    id v23 = [v22 encodeSubjectPublicKeyInfo];
    uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    unint64_t v25 = v24;

    sub_10000852C(v16, v18);
    id v26 = [a1 encryptionKeyData];
    uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
    unint64_t v29 = v28;

    id v30 = objc_allocWithZone(&OBJC_CLASS____SFECKeySpecifier);
    sub_1000084E8(v27, v29);
    id v31 = [v30 initWithCurve:4];
    id v32 = objc_allocWithZone(&OBJC_CLASS____SFECPublicKey);
    id v33 = sub_100009908(v27, v29, (uint64_t)v31);

    sub_10000852C(v27, v29);
    unint64_t v46 = v25;
    id v35 = [v33 encodeSubjectPublicKeyInfo];
    uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
    unint64_t v45 = v36;

    sub_10000852C(v27, v29);
    id v37 = objc_allocWithZone((Class)&OBJC_CLASS___TrustedPeersHelperPeer);
    swift_bridgeObjectRetain(a2);
    unint64_t v38 = v51;
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v38);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v41 = Data._bridgeToObjectiveC()().super.isa;
    Class v42 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a2);
    id v43 = [v37 initWithPeerID:v39 signingSPKI:isa encryptionSPKI:v41 secureElementIdentity:0 viewList:v42];
    sub_10000852C(v44, v45);
    sub_10000852C(v47, v46);

    return (uint64_t)v43;
  }

id sub_100009DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v21 = 0LL;
  id v13 = [v6 initWithUUID:isa signingPublicKey:a2 encryptionPublicKey:a3 signingKeyPair:a4 kind:a5 error:&v21];

  id v14 = v21;
  if (v13)
  {
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL);
    id v17 = v14;
    v16(a1, v15);
  }

  else
  {
    id v18 = v21;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow();
    uint64_t v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a1, v19);
  }

  return v13;
}

uint64_t sub_100009F08( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _TtC18TrustedPeersHelper6Client *a5, int a6)
{
  int v50 = a6;
  uint64_t v51 = a1;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v23 = (_TtC18TrustedPeersHelper6Client *)sub_10017C7E0(a2, a3);
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v24 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a3, v42, v43, v44, v45, v46, v47, v48);
  }

  else
  {
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a3, v16, v17, v18, v19, v20, v21, v22);
    if ((a3 & 0x2000000000000000LL) != 0) {
      Swift::Int v24 = HIBYTE(a3) & 0xF;
    }
    else {
      Swift::Int v24 = a2 & 0xFFFFFFFFFFFFLL;
    }
  }

  uint64_t v25 = sub_100009734(v23[1]._TtCs12_SwiftObject_opaque, v24);
  unint64_t v27 = (unint64_t)v26;
  swift_release(v23, v26, v28, v29, v30, v31, v32, v33);
  id v34 = objc_allocWithZone((Class)type metadata accessor for RecoveryKeySet());
  sub_1000084E8(v25, v27);
  id v35 = a5;
  uint64_t v36 = (uint64_t)v34;
  id v37 = sub_10000ABC0(v25, v27, a4, v35);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v51, v11);
  }

  else
  {
    unint64_t v38 = v37;
    uint64_t v39 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v51, v11);
    uint64_t v40 = type metadata accessor for CustodianRecoveryKey();
    uint64_t v36 = swift_allocObject(v40, 32LL, 7LL);
    sub_100008840((uint64_t)v15, v38, v50);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v39, v11);
  }

  sub_10000852C(v25, v27);
  return v36;
}

void *sub_10000A0DC()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  uint64_t v2 = v1;
  unint64_t v7 = &type metadata for String;
  *(void *)&__int128 v6 = 0xD000000000000045LL;
  *((void *)&v6 + 1) = 0x80000001001E7760LL;
  sub_100008570(&v6, v5);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10014BF08(v5, v0, v2, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return &_swiftEmptyDictionarySingleton;
}

uint64_t getEnumTagSinglePayload for RecoveryKey.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for RecoveryKey.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10000A22C + 4 * asc_1001DE450[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10000A24C + 4 * byte_1001DE455[v4]))();
  }
}

_BYTE *sub_10000A22C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10000A24C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10000A254(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10000A25C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10000A264(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10000A26C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RecoveryKey.Error()
{
  return &type metadata for RecoveryKey.Error;
}

unint64_t sub_10000A290()
{
  unint64_t result = qword_1002513E0;
  if (!qword_1002513E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001DE580, &type metadata for RecoveryKey.Error);
    atomic_store(result, (unint64_t *)&qword_1002513E0);
  }

  return result;
}

id sub_10000A518()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PolicyRedactionCrypter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PolicyRedactionCrypter()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper22PolicyRedactionCrypter);
}

id sub_10000A568(void *a1, uint64_t a2, void *a3)
{
  __int128 v6 = (void *)objc_opt_self(&OBJC_CLASS___TPHObjectiveC);
  id v7 = objc_msgSend( objc_allocWithZone(_SFAESKeySpecifier),  "initWithBitSize:",  objc_msgSend(v6, "aes256BitSize"));
  id v8 = [objc_allocWithZone(_SFAuthenticatedEncryptionOperation) initWithKeySpecifier:v7];

  sub_1000084E8(a2, (unint64_t)a3);
  id v9 = objc_msgSend( objc_allocWithZone(_SFAESKeySpecifier),  "initWithBitSize:",  objc_msgSend(v6, "aes256BitSize"));
  id v10 = objc_allocWithZone(&OBJC_CLASS____SFAESKey);
  id v11 = sub_100009908(a2, (uint64_t)a3, (uint64_t)v9);

  sub_10000852C(a2, (unint64_t)a3);
  if (v3) {
    goto LABEL_2;
  }
  id result = [a1 ciphertext];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v13 = result;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
  unint64_t v16 = v15;

  id result = [a1 authenticationCode];
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  id v17 = result;
  id v33 = v11;
  id v34 = v8;
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
  unint64_t v20 = v19;

  id result = [a1 initializationVector];
  if (result)
  {
    BOOL v21 = result;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    unint64_t v24 = v23;

    id v25 = objc_allocWithZone(&OBJC_CLASS____SFAuthenticatedCiphertext);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v36 = (id)v14;
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    Class v28 = Data._bridgeToObjectiveC()().super.isa;
    id v29 = [v25 initWithCiphertext:isa authenticationCode:v27 initializationVector:v28];
    sub_10000852C(v22, v24);
    sub_10000852C(v18, v20);
    sub_10000852C((uint64_t)v36, v16);

    id v37 = 0LL;
    id v8 = v34;
    id v30 = [v34 decrypt:v29 withKey:v33 error:&v37];
    id v31 = v37;
    if (v30)
    {
      a3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);

      return a3;
    }

    a3 = v31;
    _convertNSErrorToError(_:)(v31);

    swift_willThrow(v32);
LABEL_2:

    return a3;
  }

LABEL_12:
  __break(1u);
  return result;
}

        id v34 = 0;
        return v34 & 1;
      }

      sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
      sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v22, v10);
    }

    sub_100041590((uint64_t)v17, &qword_100251638);
    goto LABEL_12;
  }

  return v34 & 1;
}

  sub_10004C798(v3, v2);
  return v4;
}

  v241 = (unint64_t)_swiftEmptyArrayStorage;
  id v33 = *(char **)(v31 + 16);
  if (v33)
  {
    v220 = v28;
    v221 = v24;
    id v34 = (void *)objc_opt_self(&OBJC_CLASS___TPVoucher);
    id v35 = v31 + ((*((unsigned __int8 *)v239 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v239 + 80));
    v236 = v239[9];
    v237 = v34;
    swift_bridgeObjectRetain_n(v31, 2LL);
    id v36 = v238;
    do
    {
      v239 = (uint64_t *)v33;
      sub_10004164C(v35, (uint64_t)v36, type metadata accessor for SignedVoucher);
      unint64_t v38 = *v36;
      uint64_t v39 = v36[1];
      Class v41 = v36[2];
      uint64_t v40 = v36[3];
      sub_1000084E8(*v36, v39);
      sub_1000084E8(v41, v40);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v43 = Data._bridgeToObjectiveC()().super.isa;
      int64_t v44 = [v237 voucherInfoWithData:isa sig:v43];
      id v45 = v40;
      id v46 = v44;
      sub_10000852C(v41, v45);
      sub_10000852C(v38, v39);

      BOOL v47 = sub_1000415CC((uint64_t)v36, type metadata accessor for SignedVoucher);
      if (v46)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
        uint64_t v49 = *(void *)((v241 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        BOOL v48 = *(void *)((v241 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v49 >= v48 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1LL);
        }
        id v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v46);
        specialized Array._endMutation()(v37);
      }

      v35 += v236;
      id v33 = (char *)v239 - 1;
    }

    while (v239 != (uint64_t *)1);
    id v31 = v232;
    swift_bridgeObjectRelease(v232);
    int v50 = (void *)v241;
    Class v28 = v220;
    unint64_t v24 = v221;
    Class v27 = v235;
  }

  else
  {
    swift_bridgeObjectRetain(v31);
    int v50 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v31);
  unint64_t v55 = v230;
  uint64_t v56 = sub_100158B94((uint64_t)v50, v55);
  swift_bridgeObjectRelease(v50);

  uint64_t v57 = *(void **)&v231[(void)v27];
  v58 = v233;
  if (v56)
  {
    sub_100007620(0LL, &qword_100256C30, &OBJC_CLASS___TPVoucher_ptr);
    v59 = v57;
    v60.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v56);
    goto LABEL_42;
  }

  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  unint64_t v15 = *(void *)(v14 + 48) + 40 * a2;
  unint64_t v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(void *)(v15 + 32) = *(void *)(v6 + 32);
  id v17 = *(void *)(v14 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  unint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v14 + 16) = v19;
    return result;
  }

  __break(1u);
LABEL_15:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

    id v26 = v17;
    sub_1000DFAF4(v17, 0LL, a3, a4, a5, a6, a7);

    goto LABEL_13;
  }

  if (v13 == (id)1)
  {
    BOOL v21 = sub_100043F74();
    unint64_t v23 = swift_allocError(&type metadata for ContainerError, v21, 0LL, 0LL);
    unint64_t v24 = xmmword_1001E67D0;
  }

  else
  {
    if (v13 == (id)2)
    {
      uint64_t v14 = [v26 error];
      sub_1000DFAF4(0LL, (uint64_t)v14, a3, a4, a5, a6, a7);

LABEL_13:
      unint64_t v15 = v26;
      goto LABEL_14;
    }

    id v25 = sub_100043F74();
    unint64_t v23 = swift_allocError(&type metadata for ContainerError, v25, 0LL, 0LL);
    unint64_t v24 = xmmword_1001E67E0;
  }

  *(_OWORD *)uint64_t v22 = v24;
  *(_BYTE *)(v22 + 16) = 13;
  sub_1000DFAF4(0LL, v23, a3, a4, a5, a6, a7);

  swift_errorRelease();
}

    unint64_t v24 = v15;
    v28._countAndFlagsBits = a5;
    v28._object = a6;
    sub_1000DF85C(v15, 0LL, a3, a4, v28);

    goto LABEL_13;
  }

  if (v11 == (id)1)
  {
    unint64_t v19 = sub_100043F74();
    BOOL v21 = swift_allocError(&type metadata for ContainerError, v19, 0LL, 0LL);
    uint64_t v22 = xmmword_1001E67D0;
  }

  else
  {
    if (v11 == (id)2)
    {
      uint64_t v12 = [v24 error];
      v26._countAndFlagsBits = a5;
      v26._object = a6;
      sub_1000DF85C(0LL, (uint64_t)v12, a3, a4, v26);

LABEL_13:
      uint64_t v13 = v24;
      goto LABEL_14;
    }

    unint64_t v23 = sub_100043F74();
    BOOL v21 = swift_allocError(&type metadata for ContainerError, v23, 0LL, 0LL);
    uint64_t v22 = xmmword_1001E67E0;
  }

  *(_OWORD *)unint64_t v20 = v22;
  *(_BYTE *)(v20 + 16) = 13;
  v29._countAndFlagsBits = a5;
  v29._object = a6;
  sub_1000DF85C(0LL, v21, a3, a4, v29);

  swift_errorRelease();
}

    id v35 = v21;
    sub_10010248C(v21, 0LL, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);

    goto LABEL_13;
  }

  if (v17 == (id)1)
  {
    id v25 = sub_100043F74();
    Class v27 = swift_allocError(&type metadata for ContainerError, v25, 0LL, 0LL);
    Class v28 = xmmword_1001E67D0;
  }

  else
  {
    if (v17 == (id)2)
    {
      uint64_t v18 = [v35 error];
      sub_10010248C(0LL, (uint64_t)v18, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);

LABEL_13:
      unint64_t v19 = v35;
      goto LABEL_14;
    }

    id v29 = sub_100043F74();
    Class v27 = swift_allocError(&type metadata for ContainerError, v29, 0LL, 0LL);
    Class v28 = xmmword_1001E67E0;
  }

  *(_OWORD *)id v26 = v28;
  *(_BYTE *)(v26 + 16) = 13;
  sub_10010248C(0LL, v27, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);

  swift_errorRelease();
}

    id v29 = v20;
    a9();

    goto LABEL_13;
  }

  if (v16 == (id)1)
  {
    unint64_t v24 = sub_100043F74();
    id v26 = swift_allocError(&type metadata for ContainerError, v24, 0LL, 0LL);
    Class v27 = xmmword_1001E67D0;
  }

  else
  {
    if (v16 == (id)2)
    {
      id v17 = [v29 error];
      ((void (*)(void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a9)( 0LL,  v17,  a3,  a4,  a5,  a6,  a7,  a8);

LABEL_13:
      uint64_t v18 = v29;
      goto LABEL_14;
    }

    Class v28 = sub_100043F74();
    id v26 = swift_allocError(&type metadata for ContainerError, v28, 0LL, 0LL);
    Class v27 = xmmword_1001E67E0;
  }

  *(_OWORD *)id v25 = v27;
  *(_BYTE *)(v25 + 16) = 13;
  ((void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a9)( 0LL,  v26,  a3,  a4,  a5,  a6,  a7,  a8);

  swift_errorRelease();
}

    id v29 = v20;
    sub_100139CFC(v20, 0LL, a3, a4, a5 & 1, a6, a7, a8, a9);

    goto LABEL_13;
  }

  if (v16 == (id)1)
  {
    unint64_t v24 = sub_100043F74();
    id v26 = swift_allocError(&type metadata for ContainerError, v24, 0LL, 0LL);
    Class v27 = xmmword_1001E67D0;
  }

  else
  {
    if (v16 == (id)2)
    {
      id v17 = [v29 error];
      sub_100139CFC(0LL, (uint64_t)v17, a3, a4, a5 & 1, a6, a7, a8, a9);

LABEL_13:
      uint64_t v18 = v29;
      goto LABEL_14;
    }

    Class v28 = sub_100043F74();
    id v26 = swift_allocError(&type metadata for ContainerError, v28, 0LL, 0LL);
    Class v27 = xmmword_1001E67E0;
  }

  *(_OWORD *)id v25 = v27;
  *(_BYTE *)(v25 + 16) = 13;
  sub_100139CFC(0LL, v26, a3, a4, a5 & 1, a6, a7, a8, a9);

  swift_errorRelease();
}

    id v29 = v20;
    sub_100144DEC(v20, 0LL, a3, a4, a5, a6, a7, a8, a9);

    goto LABEL_13;
  }

  if (v16 == (id)1)
  {
    unint64_t v24 = sub_100043F74();
    id v26 = (void *)swift_allocError(&type metadata for ContainerError, v24, 0LL, 0LL);
    Class v27 = xmmword_1001E67D0;
  }

  else
  {
    if (v16 == (id)2)
    {
      id v17 = [v29 error];
      sub_100144DEC(0LL, v17, a3, a4, a5, a6, a7, a8, a9);

LABEL_13:
      uint64_t v18 = v29;
      goto LABEL_14;
    }

    Class v28 = sub_100043F74();
    id v26 = (void *)swift_allocError(&type metadata for ContainerError, v28, 0LL, 0LL);
    Class v27 = xmmword_1001E67E0;
  }

  *(_OWORD *)id v25 = v27;
  *(_BYTE *)(v25 + 16) = 13;
  sub_100144DEC(0LL, v26, a3, a4, a5, a6, a7, a8, a9);

  swift_errorRelease();
}

  return v11;
}

  return v32;
}

char **sub_10000A890(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v7 = (void *)objc_opt_self(&OBJC_CLASS___TPHObjectiveC);
  id v8 = &selRef_setAllSelves_;
  id v9 = objc_msgSend( objc_allocWithZone(_SFAESKeySpecifier),  "initWithBitSize:",  objc_msgSend(v7, "aes256BitSize"));
  id v10 = [objc_allocWithZone(_SFAuthenticatedEncryptionOperation) initWithKeySpecifier:v9];

  sub_1000084E8(a3, a4);
  id v11 = objc_msgSend( objc_allocWithZone(_SFAESKeySpecifier),  "initWithBitSize:",  objc_msgSend(v7, "aes256BitSize"));
  id v12 = objc_allocWithZone(&OBJC_CLASS____SFAESKey);
  id v13 = sub_100009908(a3, a4, (uint64_t)v11);

  sub_10000852C(a3, a4);
  if (v4) {
    goto LABEL_2;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v36 = 0LL;
  id v15 = [v10 encrypt:isa withKey:v13 additionalAuthenticatedData:0 error:&v36];

  id v8 = v36;
  if (!v15)
  {
    id v34 = v36;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v35);
LABEL_2:

    return v8;
  }

  id v16 = objc_allocWithZone(&OBJC_CLASS___TPPBPolicyRedactionAuthenticatedCiphertext);
  id v17 = v8;
  id result = (char **)[v16 init];
  if (result)
  {
    id v8 = result;
    id v19 = [v15 ciphertext];
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v22 = v21;

    Class v23 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v20, v22);
    [v8 setCiphertext:v23];

    id v24 = [v15 authenticationCode];
    uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
    unint64_t v27 = v26;

    Class v28 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v25, v27);
    [v8 setAuthenticationCode:v28];

    id v29 = [v15 initializationVector];
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
    unint64_t v32 = v31;

    Class v33 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000852C(v30, v32);
    [v8 setInitializationVector:v33];

    return v8;
  }

  __break(1u);
  return result;
}

char *sub_10000ABC0(uint64_t a1, unint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4)
{
  id v10 = v4;
  uint64_t v11 = sub_10000F0FC(1, a1, a2, a3, (unint64_t)a4);
  if (v5)
  {
    sub_10000852C(a1, a2);

    swift_bridgeObjectRelease(a4, v13, v14, v15, v16, v17, v18, v19);
    uint64_t v35 = type metadata accessor for RecoveryKeySet();
    swift_deallocPartialClassInstance(v10, v35, 24LL, 7LL);
  }

  else
  {
    uint64_t v20 = v11;
    unint64_t v21 = v12;
    SecKeyRef v22 = sub_10000F3AC();
    unint64_t v75 = v21;
    id v23 = [objc_allocWithZone(_SFECKeyPair) initWithSecKey:v22];

    uint64_t v24 = OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_encryptionKey;
    *(void *)&v10[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_encryptionKey] = v23;
    uint64_t v25 = sub_10000F0FC(0, a1, a2, a3, (unint64_t)a4);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease(a4, v26, v28, v29, v30, v31, v32, v33);
    uint64_t v34 = v25;
    SecKeyRef v37 = sub_10000F3AC();
    uint64_t v68 = v34;
    unint64_t v69 = (unint64_t)v27;
    id v38 = [objc_allocWithZone(_SFECKeyPair) initWithSecKey:v37];

    uint64_t v67 = OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey;
    *(void *)&v10[OBJC_IVAR____TtC18TrustedPeersHelper14RecoveryKeySet_signingKey] = v38;
    id v39 = [v38 publicKey];
    id v40 = [v39 spki];
    swift_unknownObjectRelease(v39);
    uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    unint64_t v43 = v42;

    ccsha384_di(v44, v45);
    id v46 = objc_msgSend((id)objc_opt_self(TPHObjectiveC), "ccsha384_diSize");
    uint64_t v73 = sub_100009698((uint64_t)v46);
    unint64_t v74 = v47;
    uint64_t v71 = v41;
    unint64_t v72 = v43;
    unint64_t v66 = v43;
    sub_1000084E8(v41, v43);
    sub_1000090D8((uint64_t)&v73);
    uint64_t v48 = v73;
    unint64_t v49 = v74;
    sub_1000084E8(v73, v74);
    Swift::String v50 = Data.base64EncodedString(options:)(0LL);
    sub_10000852C(v48, v49);
    sub_10000852C(v48, v49);
    sub_10000852C(v41, v72);
    sub_10000852C(v41, v66);
    id v51 = [*(id *)&v10[v67] keyData];
    uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
    unint64_t v54 = v53;

    sub_10000F6E0(v52, v54, v50._countAndFlagsBits, (uint64_t)v50._object);
    sub_10000852C(v52, v54);
    id v55 = [*(id *)&v10[v24] keyData];
    uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
    unint64_t v58 = v57;

    sub_10000F980(v56, v58, v50._countAndFlagsBits, (uint64_t)v50._object);
    sub_10000852C(v56, v58);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v50._object, v59, v60, v61, v62, v63, v64, v65);
    sub_10000852C(v68, v69);
    sub_10000852C(v20, v75);
    v70.receiver = v10;
    v70.super_class = (Class)type metadata accessor for RecoveryKeySet();
    id v10 = (char *)objc_msgSendSuper2(&v70, "init");
    sub_10000852C(a1, a2);
  }

  return v10;
}

void sub_10000B048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void sub_10000B0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  __int16 v8 = v6;
  char v9 = BYTE2(v6);
  char v10 = BYTE3(v6);
  char v11 = BYTE4(v6);
  char v12 = BYTE5(v6);
  sub_10000B2BC((uint64_t)&v7, (uint64_t)&v7 + BYTE6(v6), a5);
}

void sub_10000B2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_10000B330( uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v15 - 104) = v11;
  *(_WORD *)(v15 - 96) = v10;
  *(_BYTE *)(v15 - 94) = BYTE2(v10);
  *(_BYTE *)(v15 - 93) = BYTE3(v10);
  *(_BYTE *)(v15 - 92) = BYTE4(v10);
  *(_BYTE *)(v15 - 91) = BYTE5(v10);
  LOBYTE(v17) = v13;
  sub_10000B548(v15 - 104, v15 - 104 + BYTE6(v10), a4, a5, a6, v8, a7, a8, v18, v17, v12, v9, v14);
  return sub_10000852C(v11, v10);
}

uint64_t sub_10000B548( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  uint64_t result = ccsha384_di(a1, a2);
  if (!a4)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (!a6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (!a1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!a8)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  LODWORD(result) = cchkdf(result, a5 - a4, a4, a7 - a6, a6, a2 - a1, a1, a9 - a8, a8);
  *a3 = result;
  if ((_DWORD)result)
  {
LABEL_8:
    uint64_t v22 = result;
    unint64_t v23 = sub_10000C7AC();
    uint64_t v24 = swift_allocError(&type metadata for RecoveryKeySetError, v23, 0LL, 0LL);
    *(void *)uint64_t v25 = v22;
    *(void *)(v25 + 8) = 0LL;
    *(_BYTE *)(v25 + 16) = 2;
    return swift_willThrow(v24);
  }

  uint64_t result = ccrng(0LL);
  if (!result) {
    goto LABEL_15;
  }
  uint64_t result = ccec_generate_key_deterministic(a11, a9 - a8, a8, result, 1LL, a12);
  *a3 = result;
  if ((_DWORD)result) {
    goto LABEL_8;
  }
  if (a12)
  {
    unint64_t v26 = sub_10000FCAC(a12);
    uint64_t v32 = sub_100009698(v26);
    uint64_t v33 = v27;
    sub_10000E7F4((uint64_t)&v32);
    sub_10000B6C4(v32, v33);
    uint64_t v28 = *a13;
    unint64_t v29 = a13[1];
    *a13 = v30;
    a13[1] = v31;
    return sub_10000852C(v28, v29);
  }

LABEL_16:
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a1[4]);
  a1[4] = (uint64_t)v38;
  id v39 = a1[5];
  swift_bridgeObjectRetain(v9);
  id v40 = swift_bridgeObjectRelease(v39);
  a1[5] = v9;
  __chkstk_darwin(v40, v41);
  *(&v48 - 2) = v51;
  unint64_t v42 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  unint64_t v43 = (uint64_t)v52;
  uint64_t v44 = v49;
  static Message.with(_:)(sub_100176B40, &v48 - 4, v49, v42);
  uint64_t v45 = (uint64_t)a1 + *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 44);
  sub_100041590(v45, &qword_100256D20);
  sub_100041608(v43, v45, type metadata accessor for IdmsTrustedDevicesVersion);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v45, 0LL, 1LL, v44);
}

void sub_10000B6C4(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  objc_super v2 = (char *)&loc_10000B728 + dword_10000B95C[sub_1000084C4(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_10000B738()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_1000084E8(v1, v0);
  sub_10000EED0(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_10000852C(v1, v0);
  uint64_t v4 = v12;
  sub_100007600(&v13);
  return v4;
}

unint64_t sub_10000B96C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578((uint64_t *)&unk_100256B40);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 64);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 4);
    uint64_t v8 = (uint64_t)*(v6 - 3);
    uint64_t v9 = (uint64_t)*(v6 - 2);
    uint64_t v10 = (uint64_t)*(v6 - 1);
    char v11 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    id v12 = v11;
    unint64_t result = sub_10000D0B4(v7, v8, v9, v10);
    if ((v14 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v15 = (uint64_t *)(v4[6] + 32 * result);
    uint64_t *v15 = v7;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    *(void *)(v4[7] + 8 * result) = v12;
    uint64_t v16 = v4[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v4[2] = v18;
    v6 += 5;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000BAAC(uint64_t a1)
{
  return sub_10000BF98(a1, &qword_1002515A0, (uint64_t (*)(id))sub_10000D160);
}

unint64_t sub_10000BAC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(&qword_100251588);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000FC68(v7, (uint64_t)&v14, &qword_100251590);
    uint64_t v8 = v14;
    unint64_t result = sub_10000D160(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_100008570(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000BBEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(&qword_100251530);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000FC68(v7, (uint64_t)&v16, &qword_100251538);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10000D1E8(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    BOOL v12 = (uint64_t *)(v4[6] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100008570(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000BD20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(&qword_1002515A8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v9 = *(v6 - 1);
    unint64_t v10 = *v6;
    swift_bridgeObjectRetain(v8);
    sub_1000084E8(v9, v10);
    unint64_t result = sub_10000D1E8(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    BOOL v14 = (uint64_t *)(v4[7] + 16 * result);
    *BOOL v14 = v9;
    v14[1] = v10;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000BE44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(&qword_100251540);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000FC68(v7, (uint64_t)v16, &qword_100251548);
    unint64_t result = sub_10000D24C((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_100008570(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000BF84(uint64_t a1)
{
  return sub_10000BF98(a1, &qword_100256DD0, (uint64_t (*)(id))sub_10000D27C);
}

unint64_t sub_10000BF98(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(a2);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }

  swift_retain(v6);
  char v9 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v10 = *v9;
    id v11 = *(v9 - 1);
    id v12 = v10;
    unint64_t result = a3(v11);
    if ((v14 & 1) != 0) {
      break;
    }
    *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v15 = 8 * result;
    *(void *)(v7[6] + v15) = v11;
    *(void *)(v7[7] + v15) = v12;
    uint64_t v16 = v7[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v7[2] = v18;
    v9 += 2;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000C0A8(uint64_t a1)
{
  return sub_10000C498(a1, (uint64_t *)&unk_100256E70);
}

unint64_t sub_10000C0B4( _TtC18TrustedPeersHelper6Client *a1, const char *a2, void *a3, int64_t a4, void *a5, void *a6, BOOL a7, BOOL a8)
{
  uint64_t v9 = *(void *)a1->endpoint;
  if (!v9)
  {
    id v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(&qword_1002515B0);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  id v11 = (void *)v10;
  uint64_t v12 = *(void *)a1->endpoint;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }

  swift_retain(v10);
  endpoint = a1[1].endpoint;
  while (1)
  {
    uint64_t v14 = *((void *)endpoint - 2);
    uint64_t v15 = *((void *)endpoint - 1);
    uint64_t v16 = *(void *)endpoint;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    unint64_t result = sub_10000D1E8(v14, v15);
    if ((v18 & 1) != 0) {
      break;
    }
    *(void *)((char *)v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    BOOL v19 = (uint64_t *)(v11[6] + 16 * result);
    *BOOL v19 = v14;
    v19[1] = v15;
    *(void *)(v11[7] + 8 * result) = v16;
    uint64_t v20 = v11[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v11[2] = v22;
    endpoint += 24;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000C1CC(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251558);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    uint64_t v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }

  sub_100007578(&qword_100251560);
  uint64_t v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = *(int *)(v2 + 48);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v26 = a1;
  uint64_t v14 = a1 + v13;
  uint64_t v15 = *(void *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10000FC68(v14, (uint64_t)v6, &qword_100251558);
    unint64_t result = sub_10000D2AC((uint64_t)v6);
    if ((v17 & 1) != 0) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v19 = v9[6];
    uint64_t v20 = type metadata accessor for URL(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v18,  v6,  v20);
    *(void *)(v9[7] + 8 * v18) = *(void *)&v6[v11];
    uint64_t v21 = v9[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_12;
    }
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      uint64_t v24 = v26;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10000C360(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(&qword_100257090);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_10000D1E8(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    uint64_t v14 = (void *)(v4[7] + 16 * result);
    *uint64_t v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000C480(uint64_t a1)
{
  return sub_10000C498(a1, &qword_1002515B8);
}

unint64_t sub_10000C48C(uint64_t a1)
{
  return sub_10000C498(a1, (uint64_t *)&unk_100256CB0);
}

unint64_t sub_10000C498(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100007578(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v8 = (uint64_t)*(v7 - 2);
    uint64_t v9 = (uint64_t)*(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    id v11 = v10;
    unint64_t result = sub_10000D1E8(v8, v9);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v14 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v14 = v8;
    v14[1] = v9;
    *(void *)(v5[7] + 8 * result) = v11;
    uint64_t v15 = v5[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    _OWORD v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000C5AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v18 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v18);
    return (unint64_t)v4;
  }

  sub_100007578(&qword_100251568);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000FC68(v6, (uint64_t)&v19, &qword_100251570);
    uint64_t v7 = v19;
    uint64_t v8 = v20;
    unint64_t result = sub_10000D1E8(v19, v20);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    id v11 = (uint64_t *)(v4[6] + 16 * result);
    *id v11 = v7;
    v11[1] = v8;
    uint64_t v12 = v4[7] + 40 * result;
    __int128 v13 = v21;
    __int128 v14 = v22;
    *(void *)(v12 + 32) = v23;
    *(_OWORD *)uint64_t v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_12;
    }
    v4[2] = v17;
    v6 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v18 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

id sub_10000C720()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecoveryKeySet();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RecoveryKeySet()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper14RecoveryKeySet);
}

unint64_t sub_10000C7AC()
{
  unint64_t result = qword_100251518;
  if (!qword_100251518)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001DE634, &type metadata for RecoveryKeySetError);
    atomic_store(result, (unint64_t *)&qword_100251518);
  }

  return result;
}

uint64_t sub_10000C7F0(uint64_t a1)
{
  unint64_t v2 = sub_10000CCD0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000C818(uint64_t a1)
{
  unint64_t v2 = sub_10000CCD0();
  return Error<>._code.getter(a1, v2);
}

void sub_10000C840(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

unint64_t sub_10000C878()
{
  v0._countAndFlagsBits = ((uint64_t (*)(void *, void *))dispatch thunk of CustomStringConvertible.description.getter)( &type metadata for Int32,  &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  ((void (*)(void *))swift_bridgeObjectRelease)(object);
  return 0xD000000000000021LL;
}

void sub_10000C9E4()
{
}

unint64_t sub_10000C9FC(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6 = sub_10000BBEC((uint64_t)_swiftEmptyArrayStorage);
  sub_10000C840(a1, a2, a3);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    uint64_t v13 = v12;
    uint64_t v31 = &type metadata for String;
    *(void *)&__int128 v30 = v9;
    *((void *)&v30 + 1) = v10;
    sub_100008570(&v30, v29);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    sub_10014BF08(v29, v11, v13, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if (a3 == 2)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    uint64_t v17 = v23;
    id v24 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v24 initWithDomain:v25 code:(int)a1 userInfo:0];

    uint64_t v31 = (void *)sub_100007620(0LL, (unint64_t *)&qword_100251528, &OBJC_CLASS___NSError_ptr);
    *(void *)&__int128 v30 = v26;
    goto LABEL_7;
  }

  if (!a3)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    uint64_t v17 = v16;
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    uint64_t v19 = v18;
    id v20 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    id v22 = [v20 initWithDomain:v21 code:(int)a1 userInfo:0];

    uint64_t v31 = (void *)sub_100007620(0LL, (unint64_t *)&qword_100251528, &OBJC_CLASS___NSError_ptr);
    *(void *)&__int128 v30 = v22;
LABEL_7:
    sub_100008570(&v30, v29);
    char v27 = swift_isUniquelyReferenced_nonNull_native(v6);
    sub_10014BF08(v29, v15, v17, v27);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v6;
}

unint64_t sub_10000CC64()
{
  return 0xD000000000000033LL;
}

uint64_t sub_10000CC80()
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10000CCA0 + 4 * byte_1001DE5D4[*(unsigned __int8 *)(v0 + 16)]))(3LL);
}

uint64_t sub_10000CCA0()
{
  return 4LL;
}

uint64_t sub_10000CCA8()
{
  return 5LL;
}

uint64_t sub_10000CCB0()
{
  return qword_1001DE6D8[*v0];
}

unint64_t sub_10000CCC4()
{
  return sub_10000C9FC(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

unint64_t sub_10000CCD0()
{
  unint64_t result = qword_100251520;
  if (!qword_100251520)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001DE5F4, &type metadata for RecoveryKeySetError);
    atomic_store(result, (unint64_t *)&qword_100251520);
  }

  return result;
}

double sub_10000CD14@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10000D160(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10014D05C();
      uint64_t v10 = v13;
    }

    sub_100008570((_OWORD *)(*(void *)(v10 + 56) + 32 * v7), a2);
    sub_10000D318(v7, v10);
    uint64_t v11 = *v3;
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

double sub_10000CDF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10000D1E8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10014D220();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_100008570((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_10000D520(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_10000CEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10000D1E8(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10014D7F4();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 16 * v7);
  sub_10000D6F4(v7, v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_10000CFCC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10000D24C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10014D9AC();
      uint64_t v10 = v13;
    }

    sub_10000DEAC(*(void *)(v10 + 48) + 40 * v7);
    sub_100008570((_OWORD *)(*(void *)(v10 + 56) + 32 * v7), a2);
    sub_10000D8C8(v7, v10);
    uint64_t v11 = *v3;
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

unint64_t sub_10000D0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v8 = Hasher._finalize()();
  return sub_10000DA90(a1, a2, a3, a4, v8);
}

unint64_t sub_10000D160(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_1000077B8( &qword_100256EF0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE368);
  _CFObject.hash(into:)(v7, v3, v4);
  Swift::Int v5 = Hasher._finalize()();
  return sub_10000DB8C(a1, v5);
}

unint64_t sub_10000D1E8(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10000DCCC(a1, a2, v4);
}

unint64_t sub_10000D24C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10000DDAC(a1, v4);
}

unint64_t sub_10000D27C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10000DEE0(a1, v4);
}

unint64_t sub_10000D2AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = sub_1000077B8( (unint64_t *)&unk_100256C50,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10000DFF8(a1, v7);
}

void sub_10000D318(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v11 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v30);
        type metadata accessor for CFString(0LL);
        uint64_t v13 = v12;
        uint64_t v14 = sub_1000077B8( &qword_100256EF0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE368);
        id v15 = v11;
        _CFObject.hash(into:)(v30, v13, v14);
        Swift::Int v16 = Hasher._finalize()();

        unint64_t v17 = v16 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v17 < v9) {
            goto LABEL_5;
          }
        }

        else if (v17 >= v9)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          uint64_t v18 = *(void *)(a2 + 48);
          uint64_t v19 = (void *)(v18 + 8 * v3);
          id v20 = (void *)(v18 + 8 * v6);
          if (v3 != v6 || v19 >= v20 + 1) {
            *uint64_t v19 = *v20;
          }
          uint64_t v21 = *(void *)(a2 + 56);
          id v22 = (_OWORD *)(v21 + 32 * v3);
          uint64_t v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v22 >= v23 + 2))
          {
            __int128 v10 = v23[1];
            *id v22 = *v23;
            v22[1] = v10;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    id v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1LL << v3) - 1;
  }

  else
  {
    id v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1LL << a1) - 1;
  }

  *id v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1LL);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    id v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    id v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  id v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    id v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    id v22 = (-1LL << v3) - 1;
  }

  else
  {
    id v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    id v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  void *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  id v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    double result = swift_bridgeObjectRelease(a1);
    void *v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  id v15 = *(void *)v3->endpoint;
  Swift::Int v16 = (*(void *)v3->containerMap >> 1) - v15;
  unint64_t v17 = type metadata accessor for TLKShare(0LL);
  if (v16 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  id v20 = *(void *)(v18 + 72);
  uint64_t v21 = &v3->_TtCs12_SwiftObject_opaque[v19 + v20 * v15];
  id v22 = &a1->_TtCs12_SwiftObject_opaque[v19];
  uint64_t v23 = v20 * v2;
  id v24 = (char *)&v21[v23];
  uint64_t v25 = (char *)&v22[v23];
  swift_arrayInitWithCopy(v21);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1, v8, v9, v10, v11, v12, v13, v14);
    void *v1 = v3;
    return;
  }

  uint64_t v27 = *(void *)v3->endpoint;
  BOOL v28 = __OFADD__(v27, v2);
  uint64_t v29 = v27 + v2;
  if (!v28)
  {
    *(void *)v3->endpoint = v29;
    goto LABEL_19;
  }

  if ((a4 & 1) != 0)
  {
    BOOL v28 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v76
                                                                + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "escrowFetchDate"));
    if (v28)
    {
      uint64_t v29 = v28;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      __int128 v30 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v30(v22, v15, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v22, 0LL, 1LL, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v22, 1LL, v6) != 1)
      {
        uint64_t v31 = v75;
        uint64_t v32 = ((uint64_t (*)(char *, char *, uint64_t))v30)(v75, v22, v6);
        uint64_t v33 = Date.init()(v32);
        Date.addingTimeInterval(_:)( v33,  *(double *)(v76 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_escrowCacheTimeout));
        uint64_t v34 = static Date.< infix(_:_:)(v15, v11);
        uint64_t v35 = *(void (**)(char *, uint64_t))(v7 + 8);
        v35(v11, v6);
        v35(v15, v6);
        if ((v34 & 1) != 0)
        {
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          id v36 = type metadata accessor for Logger(0LL);
          SecKeyRef v37 = sub_100006BAC(v36, (uint64_t)qword_1002567D0);
          id v38 = (os_log_s *)Logger.logObject.getter(v37);
          id v39 = static os_log_type_t.info.getter(v38);
          if (os_log_type_enabled(v38, v39))
          {
            id v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)id v40 = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "escrow cache still valid", v40, 2u);
            swift_slowDealloc(v40, -1LL, -1LL);
          }

          v35(v31, v6);
          return v77[0];
        }

        v35(v31, v6);
        goto LABEL_27;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v22, 1LL, 1LL, v6);
    }

    sub_100041590((uint64_t)v22, &qword_100256D28);
LABEL_27:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    int64_t v61 = type metadata accessor for Logger(0LL);
    id v62 = sub_100006BAC(v61, (uint64_t)qword_1002567D0);
    id v63 = (os_log_s *)Logger.logObject.getter(v62);
    BOOL v64 = static os_log_type_t.info.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      BOOL v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "escrow cache no longer valid", v65, 2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    unint64_t v66 = sub_100043F74();
    uint64_t v41 = swift_allocError(&type metadata for ContainerError, v66, 0LL, 0LL);
    id v60 = xmmword_1001E68C0;
LABEL_32:
    *(_OWORD *)unint64_t v53 = v60;
    *(_BYTE *)(v53 + 16) = 13;
    swift_bridgeObjectRelease(v77[0], (SEL)v53, v54, v55, v56, v57, v58, v59);
    swift_bridgeObjectRelease(v77[1], v67, v68, v69, v70, v71, v72, v73);
    return (_TtC18TrustedPeersHelper6Client *)v41;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  unint64_t v42 = type metadata accessor for Logger(0LL);
  unint64_t v43 = sub_100006BAC(v42, (uint64_t)qword_1002567D0);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  uint64_t v45 = static os_log_type_t.info.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    id v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v46 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "skipping timeout check and directly returning cached records",  v46,  2u);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  return v77[0];
}

  if ((a4 & 1) != 0)
  {
    BOOL v28 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v70
                                                                + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "escrowFetchDate"));
    if (v28)
    {
      uint64_t v29 = v28;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      __int128 v30 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v30(v22, v15, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v22, 0LL, 1LL, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v22, 1LL, v6) != 1)
      {
        uint64_t v31 = v69;
        uint64_t v32 = ((uint64_t (*)(char *, char *, uint64_t))v30)(v69, v22, v6);
        uint64_t v33 = Date.init()(v32);
        Date.addingTimeInterval(_:)( v33,  *(double *)(v70 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_escrowCacheTimeout));
        uint64_t v34 = static Date.< infix(_:_:)(v15, v11);
        uint64_t v35 = *(void (**)(char *, uint64_t))(v7 + 8);
        v35(v11, v6);
        v35(v15, v6);
        if ((v34 & 1) != 0)
        {
          if (qword_100250EB8 != -1) {
            swift_once(&qword_100250EB8, sub_1000DD078);
          }
          id v36 = type metadata accessor for Logger(0LL);
          SecKeyRef v37 = sub_100006BAC(v36, (uint64_t)qword_1002567D0);
          id v38 = (os_log_s *)Logger.logObject.getter(v37);
          id v39 = static os_log_type_t.info.getter(v38);
          if (os_log_type_enabled(v38, v39))
          {
            id v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)id v40 = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "escrow cache still valid", v40, 2u);
            swift_slowDealloc(v40, -1LL, -1LL);
          }

          v35(v31, v6);
          return v71;
        }

        v35(v31, v6);
        goto LABEL_27;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v22, 1LL, 1LL, v6);
    }

    sub_100041590((uint64_t)v22, &qword_100256D28);
LABEL_27:
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    int64_t v61 = type metadata accessor for Logger(0LL);
    id v62 = sub_100006BAC(v61, (uint64_t)qword_1002567D0);
    id v63 = (os_log_s *)Logger.logObject.getter(v62);
    BOOL v64 = static os_log_type_t.info.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      BOOL v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "escrow cache no longer valid", v65, 2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    unint64_t v66 = sub_100043F74();
    uint64_t v41 = swift_allocError(&type metadata for ContainerError, v66, 0LL, 0LL);
    id v60 = xmmword_1001E68C0;
LABEL_32:
    *(_OWORD *)unint64_t v53 = v60;
    *(_BYTE *)(v53 + 16) = 13;
    swift_bridgeObjectRelease(v71, (SEL)v53, v54, v55, v56, v57, v58, v59);
    return (_TtC18TrustedPeersHelper6Client *)v41;
  }

  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  unint64_t v42 = type metadata accessor for Logger(0LL);
  unint64_t v43 = sub_100006BAC(v42, (uint64_t)qword_1002567D0);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  uint64_t v45 = static os_log_type_t.info.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    id v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v46 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "skipping timeout check and directly returning cached records",  v46,  2u);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  return v71;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    double result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  id v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

      ++v12;
      if (v17 == v3) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_20:
    if (v2 < 0) {
      id v39 = v2;
    }
    else {
      id v39 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    int64_t v3 = _CocoaArrayWrapper.endIndex.getter(v39);
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

      double result = swift_bridgeObjectRelease(v18);
    }

    uint64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v14 >= v36) {
      goto LABEL_41;
    }
    id v15 = *(void *)(v35 + 8 * v14);
    ++v5;
    if (!v15)
    {
      uint64_t v5 = v14 + 1;
      if (v14 + 1 >= v36) {
        goto LABEL_41;
      }
      id v15 = *(void *)(v35 + 8 * v5);
      if (!v15)
      {
        uint64_t v5 = v14 + 2;
        if (v14 + 2 >= v36) {
          goto LABEL_41;
        }
        id v15 = *(void *)(v35 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }

    swift_bridgeObjectRelease(v25, v27, v28, v29, v30, v31, v32, v33);
  }

  id v20 = v17 + 1;
  if (__OFADD__(v17, 1LL))
  {
    __break(1u);
    goto LABEL_64;
  }

  if (v20 >= v81) {
    goto LABEL_62;
  }
  uint64_t v21 = *(void *)(v80 + 8 * v20);
  ++v17;
  if (v21) {
    goto LABEL_21;
  }
  unint64_t v17 = v20 + 1;
  if (v20 + 1 >= v81) {
    goto LABEL_62;
  }
  uint64_t v21 = *(void *)(v80 + 8 * v17);
  if (v21) {
    goto LABEL_21;
  }
  unint64_t v17 = v20 + 2;
  if (v20 + 2 >= v81) {
    goto LABEL_62;
  }
  uint64_t v21 = *(void *)(v80 + 8 * v17);
  if (v21)
  {
LABEL_21:
    Swift::Int v16 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_22;
  }

  id v22 = v20 + 3;
  if (v22 >= v81)
  {
LABEL_62:
    swift_release(a1);
    return;
  }

  uint64_t v21 = *(void *)(v80 + 8 * v22);
  if (v21)
  {
    unint64_t v17 = v22;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v81) {
      goto LABEL_62;
    }
    uint64_t v21 = *(void *)(v80 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_21;
    }
  }

unint64_t sub_10000D520(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          Swift::Int v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *Swift::Int v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          id v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10000D6F4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          Swift::Int v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            _OWORD *v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10000D8C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_10000DE70(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = sub_10000DEAC((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            Swift::Int v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              __int128 v17 = *v16;
              __int128 v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            id v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              __int128 v9 = v21[1];
              _OWORD *v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10000DA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      unint64_t v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[2];
      uint64_t v17 = v15[3];
      BOOL v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (((uint64_t (*)(void))_stringCompareWithSmolCheck(_:_:expecting:))() & 1) != 0)
      {
        BOOL v19 = v16 == a3 && v17 == a4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a3, a4, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v8 = (v8 + 1) & v13;
    }

    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  return v8;
}

unint64_t sub_10000DB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    Swift::Int v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_1000077B8( &qword_100256EF0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE368);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10000DCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    Swift::Int v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10000DDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10000DE70(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10000DEAC((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t sub_10000DE70(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000DEAC(uint64_t a1)
{
  return a1;
}

unint64_t sub_10000DEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)(v6);

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)(v9);

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10000DFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v19 = a1;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v6 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(void *)(v3 + 48) + v13 * v11, v5);
      uint64_t v15 = sub_1000077B8( &qword_100251550,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v19, v5, v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  return v11;
}

void sub_10000E138(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_10000E1C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = v1;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  unsigned __int8 v9 = BYTE4(a1);
  unsigned __int8 v10 = BYTE5(a1);
  unsigned __int8 v11 = BYTE6(a1);
  sub_1000084E8(v4, v2);
  sub_10000E4C0(v3);
  uint64_t result = sub_10000852C(v4, v2);
  *uint64_t v5 = v7;
  v5[1] = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  return result;
}

void sub_10000E4C0(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_10000E538()
{
  *(void *)(v5 - 104) = v0;
  *(_WORD *)(v5 - 96) = v1;
  *(_BYTE *)(v5 - 94) = BYTE2(v1);
  *(_BYTE *)(v5 - 93) = BYTE3(v1);
  *(_BYTE *)(v5 - 92) = BYTE4(v1);
  *(_BYTE *)(v5 - 91) = BYTE5(v1);
  *(_BYTE *)(v5 - 90) = BYTE6(v1);
  sub_10000B048(v5 - 104, v5 - 104 + BYTE6(v1), v3, v2);
  uint64_t v6 = *(void *)(v5 - 104);
  uint64_t v7 = *(unsigned int *)(v5 - 96);
  uint64_t v8 = *(unsigned __int8 *)(v5 - 92);
  uint64_t v9 = *(unsigned __int8 *)(v5 - 91);
  uint64_t v10 = *(unsigned __int8 *)(v5 - 90);
  uint64_t result = sub_10000852C(v3, v2);
  *uint64_t v4 = v6;
  v4[1] = v7 | (v8 << 32) | (v9 << 40) | (v10 << 48);
  return result;
}

void sub_10000E7F4(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_10000E850@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v3;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t))ccec_x963_export)(1LL, &v6, v2);
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  void *v1 = v6;
  v1[1] = v5;
  return result;
}

void sub_10000EAB8(int *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (a1[1] < (int)v3)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v3, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      sub_10000E4C0(a2);
      return;
    }

    goto LABEL_6;
  }

void sub_10000EBB8(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v9 = v8;
  uint64_t v10 = __DataStorage._offset.getter();
  uint64_t v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v12 = v7 - v6;
  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_10000B048(v9 + v11, v9 + v11 + v14, a2, a3);
  sub_10000852C(a2, a3);
}

uint64_t sub_10000ECC4( uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t *a14)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v21 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v21 += a1 - result;
  }

  BOOL v22 = __OFSUB__(a2, a1);
  uint64_t v23 = a2 - a1;
  if (v22)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v24 = __DataStorage._length.getter();
  if (v24 >= v23) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = v24;
  }
  uint64_t v26 = v21 + v25;
  if (v21) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0LL;
  }
  LOBYTE(v28) = a11 & 1;
  return sub_10000B548(v21, v27, a4, a5, a6, a7, a8, a9, a10, v28, a12, a13, a14);
}

void sub_10000EDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __DataStorage._bytes.getter();
  if (v6)
  {
    uint64_t v7 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v7))
    {
LABEL_13:
      __break(1u);
      return;
    }

    v6 += a1 - v7;
  }

  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v6 + v11;
  if (v6) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  sub_10000B2BC(v6, v13, a4);
}

_BYTE *sub_10000EED0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_10000EF44(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_10000F004((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_10000F07C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_10000EF44(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10000F004(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_10000F07C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10000F0FC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  __int128 v40 = xmmword_1001DE6F0;
  if ((a1 & 1) != 0)
  {
    uint64_t v11 = 0xD00000000000001FLL;
    unint64_t v10 = 0x80000001001E7A40LL;
  }

  else
  {
    unint64_t v10 = 0x80000001001E7A20LL;
    uint64_t v11 = 0xD00000000000001CLL;
  }

  uint64_t v12 = sub_10017C7E0(v11, v10);
  uint64_t v13 = sub_100009734((_BYTE *)v12 + 32, v12[2]);
  unint64_t v15 = v14;
  uint64_t v16 = swift_release(v12);
  uint64_t v43 = v13;
  unint64_t v44 = v15;
  if (ccec_cp_384(v16, v17))
  {
    int v45 = a1 & 1;
    id v36 = (id)objc_opt_self(&OBJC_CLASS___TPHObjectiveC);
    id v18 = [v36 ccec384Context];
    uint64_t v19 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    uint64_t v41 = 0x3800000000LL;
    unint64_t v42 = __DataStorage.init(length:)(56LL) | 0x4000000000000000LL;
    uint64_t v38 = a2;
    unint64_t v39 = a3;
    sub_1000084E8(a2, a3);
    swift_bridgeObjectRetain(a5);
    id v20 = sub_10017C7E0(a4, a5);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)a5, v21, v22, v23, v24, v25, v26, v27);
    if ((a5 & 0x1000000000000000LL) != 0)
    {
      Swift::Int v28 = String.UTF8View._foreignCount()();
    }

    else if ((a5 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v28 = HIBYTE(a5) & 0xF;
    }

    else
    {
      Swift::Int v28 = a4 & 0xFFFFFFFFFFFFLL;
    }

    a3 = sub_100009734((_BYTE *)v20 + 32, v28);
    swift_release(v20);
    sub_10000E138((uint64_t)&v41);
    if (!v37)
    {
      unint64_t v34 = *((void *)&v40 + 1);
      a3 = v40;
      sub_1000084E8(v40, *((unint64_t *)&v40 + 1));
      sub_10000852C(v38, v39);
      objc_msgSend(v36, "contextFree:", v18, v18, &v40);
      sub_10000852C(v41, v42);
      sub_10000852C(a3, v34);
      sub_10000852C(v13, v15);
      return a3;
    }

    sub_10000852C(a2, v39);
    objc_msgSend(v36, "contextFree:", v18, v18, &v40);
    sub_10000852C(v41, v42);
    sub_10000852C(v40, *((unint64_t *)&v40 + 1));
    uint64_t v29 = v13;
    unint64_t v30 = v15;
  }

  else
  {
    unint64_t v31 = sub_10000C7AC();
    uint64_t v32 = swift_allocError(&type metadata for RecoveryKeySetError, v31, 0LL, 0LL);
    *(void *)uint64_t v33 = 0LL;
    *(void *)(v33 + 8) = 0LL;
    *(_BYTE *)(v33 + 16) = 3;
    swift_willThrow(v32);
    sub_10000852C(v40, *((unint64_t *)&v40 + 1));
    uint64_t v29 = v43;
    unint64_t v30 = v44;
  }

  sub_10000852C(v29, v30);
  return a3;
}

SecKeyRef sub_10000F3AC()
{
  uint64_t v0 = sub_100007578(&qword_100251598);
  uint64_t inited = swift_initStackObject(v0, &v21);
  *(_OWORD *)(inited + 16) = xmmword_1001DE420;
  *(void *)(inited + 32) = kSecAttrKeyClass;
  *(void *)(inited + 40) = kSecAttrKeyClassPrivate;
  *(void *)(inited + 48) = kSecAttrKeyType;
  *(void *)(inited + 56) = kSecAttrKeyTypeEC;
  unint64_t v2 = (id)kSecAttrKeyClass;
  uint64_t v3 = (id)kSecAttrKeyClassPrivate;
  uint64_t v4 = (id)kSecAttrKeyType;
  char v5 = (id)kSecAttrKeyTypeEC;
  uint64_t v6 = (_TtC18TrustedPeersHelper6Client *)sub_10000BF98( inited,  &qword_1002515A0,  (uint64_t (*)(id))sub_10000D160);
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  type metadata accessor for CFString(0LL);
  sub_1000077B8( (unint64_t *)&qword_1002510E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE394);
  uint64_t v8 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
  SecKeyRef v16 = SecKeyCreateWithData(isa, v8, 0LL);

  if (!v16)
  {
    unint64_t v17 = sub_10000C7AC();
    uint64_t v18 = swift_allocError(&type metadata for RecoveryKeySetError, v17, 0LL, 0LL);
    *(void *)uint64_t v19 = 0LL;
    *(void *)(v19 + 8) = 0LL;
    *(_BYTE *)(v19 + 16) = 3;
    swift_willThrow(v18);
  }

  return v16;
}

uint64_t sub_10000F52C(_TtC18TrustedPeersHelper6Client *a1)
{
  CFTypeRef result = 0LL;
  type metadata accessor for CFString(0LL);
  sub_1000077B8( (unint64_t *)&qword_1002510E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001DE394);
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  unsigned int v3 = SecItemAdd(isa, &result);

  if (v3)
  {
    if (v3 != -25299) {
      goto LABEL_4;
    }
    uint64_t v18 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = (id)kSecClass;
    sub_10000CD14((uint64_t)v4, v19);

    sub_100007538((uint64_t)v19);
    char v5 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    uint64_t v6 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18, v7, v8, v9, v10, v11, v12, v13);
    unsigned int v3 = SecItemUpdate(v5, v6);

    if (v3)
    {
LABEL_4:
      unint64_t v14 = sub_10000C7AC();
      uint64_t v15 = swift_allocError(&type metadata for RecoveryKeySetError, v14, 0LL, 0LL);
      *(void *)uint64_t v16 = v3;
      *(void *)(v16 + 8) = 0LL;
      *(_BYTE *)(v16 + 16) = 0;
      swift_willThrow(v15);
    }
  }

  swift_unknownObjectRelease(result);
  return 1LL;
}

uint64_t sub_10000F6E0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256EE0);
  uint64_t inited = swift_initStackObject(v4, v40);
  *(_OWORD *)(inited + 16) = xmmword_1001DE700;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0LL);
  *(void *)(inited + 40) = kSecClassKey;
  *(void *)(inited + 64) = v6;
  *(void *)(inited + 72) = kSecAttrAccessible;
  *(void *)(inited + 80) = kSecAttrAccessibleWhenUnlocked;
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 112) = kSecUseDataProtectionKeychain;
  *(_BYTE *)(inited + 120) = 1;
  *(void *)(inited + 144) = &type metadata for Bool;
  *(void *)(inited + 152) = kSecAttrAccessGroup;
  *(void *)(inited + 160) = 0xD00000000000001ALL;
  *(void *)(inited + 168) = 0x80000001001E79C0LL;
  *(void *)(inited + 184) = &type metadata for String;
  *(void *)(inited + 192) = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 200) = 0;
  *(void *)(inited + 224) = &type metadata for Bool;
  *(void *)(inited + 232) = kSecAttrApplicationLabel;
  uint64_t v7 = sub_100007578(&qword_100251578);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1001DE710;
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSUUID);
  id v10 = (id)kSecClass;
  id v11 = (id)kSecClassKey;
  BOOL v12 = (id)kSecAttrAccessible;
  BOOL v13 = (id)kSecAttrAccessibleWhenUnlocked;
  unint64_t v14 = (id)kSecUseDataProtectionKeychain;
  uint64_t v15 = (id)kSecAttrAccessGroup;
  uint64_t v16 = (id)kSecAttrSynchronizable;
  unint64_t v17 = (id)kSecAttrApplicationLabel;
  id v18 = [v9 init];
  id v19 = [v18 UUIDString];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000FC24();
  *(void *)(v8 + 32) = v20;
  *(void *)(v8 + 40) = v22;
  *(void *)(inited + 240) = String.init(format:_:)(0xD000000000000019LL, 0x80000001001E7A00LL, v8);
  *(void *)(inited + 248) = v23;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 272) = kSecAttrLabel;
  *(void *)(inited + 280) = a3;
  *(void *)(inited + 288) = a4;
  *(void *)(inited + 304) = &type metadata for String;
  *(void *)(inited + 312) = kSecValueData;
  *(void *)(inited + 344) = &type metadata for Data;
  *(void *)(inited + 320) = a1;
  *(void *)(inited + 328) = a2;
  id v24 = (id)kSecAttrLabel;
  swift_bridgeObjectRetain(a4);
  id v25 = (id)kSecValueData;
  sub_1000084E8(a1, a2);
  BOOL v26 = (_TtC18TrustedPeersHelper6Client *)sub_10000BAC0(inited);
  char v27 = sub_10000F52C(v26);
  swift_bridgeObjectRelease(v26, v28, v29, v30, v31, v32, v33, v34);
  return v27 & 1;
}

uint64_t sub_10000F980(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256EE0);
  uint64_t inited = swift_initStackObject(v6, v40);
  *(_OWORD *)(inited + 16) = xmmword_1001DE700;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0LL);
  *(void *)(inited + 40) = kSecClassKey;
  *(void *)(inited + 64) = v8;
  *(void *)(inited + 72) = kSecAttrAccessible;
  *(void *)(inited + 80) = kSecAttrAccessibleWhenUnlocked;
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 112) = kSecUseDataProtectionKeychain;
  *(_BYTE *)(inited + 120) = 1;
  *(void *)(inited + 144) = &type metadata for Bool;
  *(void *)(inited + 152) = kSecAttrAccessGroup;
  *(void *)(inited + 160) = 0xD00000000000001ALL;
  *(void *)(inited + 168) = 0x80000001001E79C0LL;
  *(void *)(inited + 184) = &type metadata for String;
  *(void *)(inited + 192) = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 200) = 0;
  *(void *)(inited + 224) = &type metadata for Bool;
  *(void *)(inited + 232) = kSecAttrLabel;
  *(void *)(inited + 240) = a3;
  *(void *)(inited + 248) = v4;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 272) = kSecAttrApplicationLabel;
  uint64_t v9 = sub_100007578(&qword_100251578);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001DE710;
  id v36 = objc_allocWithZone(&OBJC_CLASS___NSUUID);
  id v11 = (id)kSecClass;
  BOOL v12 = (id)kSecClassKey;
  BOOL v13 = (id)kSecAttrAccessible;
  unint64_t v14 = (id)kSecAttrAccessibleWhenUnlocked;
  uint64_t v15 = (id)kSecUseDataProtectionKeychain;
  uint64_t v16 = (id)kSecAttrAccessGroup;
  unint64_t v17 = (id)kSecAttrSynchronizable;
  id v18 = (id)kSecAttrLabel;
  swift_bridgeObjectRetain(a4);
  id v19 = (id)kSecAttrApplicationLabel;
  id v20 = [v36 init];
  id v21 = [v20 UUIDString];

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_10000FC24();
  *(void *)(v10 + 32) = v22;
  *(void *)(v10 + 40) = v24;
  *(void *)(inited + 280) = String.init(format:_:)(0xD00000000000001CLL, 0x80000001001E79E0LL, v10);
  *(void *)(inited + 288) = v25;
  *(void *)(inited + 304) = &type metadata for String;
  *(void *)(inited + 312) = kSecValueData;
  *(void *)(inited + 344) = &type metadata for Data;
  *(void *)(inited + 320) = a1;
  *(void *)(inited + 328) = a2;
  BOOL v26 = (id)kSecValueData;
  sub_1000084E8(a1, a2);
  char v27 = (_TtC18TrustedPeersHelper6Client *)sub_10000BAC0(inited);
  LOBYTE(v4) = sub_10000F52C(v27);
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  return v4 & 1;
}

unint64_t sub_10000FC24()
{
  unint64_t result = qword_100251580;
  if (!qword_100251580)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100251580);
  }

  return result;
}

uint64_t sub_10000FC68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007578(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_10000FCAC(void *a1)
{
  return 3 * ((unint64_t)(cczp_bitlen(*a1) + 7) >> 3) + 1;
}

uint64_t sub_10000FCD8(uint64_t a1)
{
  uint64_t v9 = sub_100007578(&qword_1002515C0);
  unint64_t v10 = sub_10000FD70();
  v8[0] = a1;
  unint64_t v2 = sub_1000084C4(v8, v9);
  unsigned int v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  sub_10000EED0(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100007600(v8);
  return v5;
}

unint64_t sub_10000FD70()
{
  unint64_t result = qword_1002515C8;
  if (!qword_1002515C8)
  {
    uint64_t v1 = sub_1000076A4(&qword_1002515C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002515C8);
  }

  return result;
}

uint64_t sub_10000FDC0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for RecoveryKeySetError(uint64_t a1)
{
  return sub_10000FDE8(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10000FDE8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s18TrustedPeersHelper19RecoveryKeySetErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10000FDC0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RecoveryKeySetError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10000FDC0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000FDE8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for RecoveryKeySetError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for RecoveryKeySetError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000FDE8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecoveryKeySetError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecoveryKeySetError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10000FF80(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10000FF98(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RecoveryKeySetError()
{
  return &type metadata for RecoveryKeySetError;
}

void sub_10000FFC0(uint64_t a1)
{
}

void sub_10000FFE0(uint64_t a1)
{
}

void sub_100010000(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithVersion:a3 hash:v7];

  *a4 = v8;
}

uint64_t sub_100010074()
{
  uint64_t v0 = sub_100007578(&qword_1002515D0);
  uint64_t v1 = swift_allocObject(v0, 792LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001DE720;
  id v2 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithVersion:1 hash:v3];

  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = sub_100010874;
  *(void *)(v1 + 48) = 0LL;
  *(void *)(v1 + 56) = sub_100010890;
  *(void *)(v1 + 64) = 0LL;
  id v5 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithVersion:2 hash:v6];

  *(void *)(v1 + 72) = v7;
  *(void *)(v1 + 80) = sub_100010E04;
  *(void *)(v1 + 88) = 0LL;
  *(void *)(v1 + 96) = sub_100010E20;
  *(void *)(v1 + 104) = 0LL;
  id v8 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithVersion:3 hash:v9];

  *(void *)(v1 + 112) = v10;
  *(void *)(v1 + 120) = sub_1000113EC;
  *(void *)(v1 + 128) = 0LL;
  *(void *)(v1 + 136) = sub_100011408;
  *(void *)(v1 + 144) = 0LL;
  id v11 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 initWithVersion:4 hash:v12];

  *(void *)(v1 + 152) = v13;
  *(void *)(v1 + 160) = sub_1000135FC;
  *(void *)(v1 + 168) = 0LL;
  *(void *)(v1 + 176) = sub_100013618;
  *(void *)(v1 + 184) = 0LL;
  id v14 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 initWithVersion:5 hash:v15];

  *(void *)(v1 + 192) = v16;
  *(void *)(v1 + 200) = sub_100015714;
  *(void *)(v1 + 208) = 0LL;
  *(void *)(v1 + 216) = sub_100015730;
  *(void *)(v1 + 224) = 0LL;
  id v17 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 initWithVersion:6 hash:v18];

  *(void *)(v1 + 232) = v19;
  *(void *)(v1 + 240) = sub_1000179BC;
  *(void *)(v1 + 248) = 0LL;
  *(void *)(v1 + 256) = sub_1000179D8;
  *(void *)(v1 + 264) = 0LL;
  id v20 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithVersion:7 hash:v21];

  *(void *)(v1 + 272) = v22;
  *(void *)(v1 + 280) = sub_100019C68;
  *(void *)(v1 + 288) = 0LL;
  *(void *)(v1 + 296) = sub_100019C84;
  *(void *)(v1 + 304) = 0LL;
  id v23 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 initWithVersion:8 hash:v24];

  *(void *)(v1 + 312) = v25;
  *(void *)(v1 + 320) = sub_10001BF7C;
  *(void *)(v1 + 328) = 0LL;
  *(void *)(v1 + 336) = sub_10001BF98;
  *(void *)(v1 + 344) = 0LL;
  id v26 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v26 initWithVersion:9 hash:v27];

  *(void *)(v1 + 352) = v28;
  *(void *)(v1 + 360) = sub_10001E528;
  *(void *)(v1 + 368) = 0LL;
  *(void *)(v1 + 376) = sub_10001E544;
  *(void *)(v1 + 384) = 0LL;
  id v29 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v29 initWithVersion:10 hash:v30];

  *(void *)(v1 + 392) = v31;
  *(void *)(v1 + 400) = sub_100020B3C;
  *(void *)(v1 + 408) = 0LL;
  *(void *)(v1 + 416) = sub_100020B58;
  *(void *)(v1 + 424) = 0LL;
  id v32 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [v32 initWithVersion:11 hash:v33];

  *(void *)(v1 + 432) = v34;
  *(void *)(v1 + 440) = sub_10002320C;
  *(void *)(v1 + 448) = 0LL;
  *(void *)(v1 + 456) = sub_100023228;
  *(void *)(v1 + 464) = 0LL;
  id v35 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v36 = String._bridgeToObjectiveC()();
  id v37 = [v35 initWithVersion:12 hash:v36];

  *(void *)(v1 + 472) = v37;
  *(void *)(v1 + 480) = sub_1000259B8;
  *(void *)(v1 + 488) = 0LL;
  *(void *)(v1 + 496) = sub_1000259D4;
  *(void *)(v1 + 504) = 0LL;
  id v38 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v39 = String._bridgeToObjectiveC()();
  id v40 = [v38 initWithVersion:13 hash:v39];

  *(void *)(v1 + 512) = v40;
  *(void *)(v1 + 520) = sub_100028164;
  *(void *)(v1 + 528) = 0LL;
  *(void *)(v1 + 536) = sub_100028180;
  *(void *)(v1 + 544) = 0LL;
  id v41 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v41 initWithVersion:15 hash:v42];

  *(void *)(v1 + 552) = v43;
  *(void *)(v1 + 560) = sub_10002A9E8;
  *(void *)(v1 + 568) = 0LL;
  *(void *)(v1 + 576) = sub_10002AA04;
  *(void *)(v1 + 584) = 0LL;
  id v44 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v45 = String._bridgeToObjectiveC()();
  id v46 = [v44 initWithVersion:16 hash:v45];

  *(void *)(v1 + 592) = v46;
  *(void *)(v1 + 600) = sub_10002D46C;
  *(void *)(v1 + 608) = 0LL;
  *(void *)(v1 + 616) = sub_10002D488;
  *(void *)(v1 + 624) = 0LL;
  id v47 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v47 initWithVersion:17 hash:v48];

  *(void *)(v1 + 632) = v49;
  *(void *)(v1 + 640) = sub_10002FDF8;
  *(void *)(v1 + 648) = 0LL;
  *(void *)(v1 + 656) = sub_10002FE14;
  *(void *)(v1 + 664) = 0LL;
  id v50 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v51 = String._bridgeToObjectiveC()();
  id v52 = [v50 initWithVersion:18 hash:v51];

  *(void *)(v1 + 672) = v52;
  *(void *)(v1 + 680) = sub_100032B68;
  *(void *)(v1 + 688) = 0LL;
  *(void *)(v1 + 696) = sub_100032B84;
  *(void *)(v1 + 704) = 0LL;
  id v53 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v54 = String._bridgeToObjectiveC()();
  id v55 = [v53 initWithVersion:19 hash:v54];

  *(void *)(v1 + 712) = v55;
  *(void *)(v1 + 720) = sub_1000359B8;
  *(void *)(v1 + 728) = 0LL;
  *(void *)(v1 + 736) = sub_1000359D4;
  *(void *)(v1 + 744) = 0LL;
  id v56 = objc_allocWithZone(&OBJC_CLASS___TPPolicyVersion);
  NSString v57 = String._bridgeToObjectiveC()();
  id v58 = [v56 initWithVersion:20 hash:v57];

  *(void *)(v1 + 752) = v58;
  *(void *)(v1 + 760) = sub_100038870;
  *(void *)(v1 + 768) = 0LL;
  *(void *)(v1 + 776) = sub_10003888C;
  *(void *)(v1 + 784) = 0LL;
  return v1;
}

unint64_t sub_100010874()
{
  return 0xD00000000000011CLL;
}

id sub_100010890()
{
  uint64_t v0 = sub_100007578(&qword_1002515D8);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001DE730;
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v5 = [v4 TPPBPolicyModelToCategoryWithPrefix:v2 category:v3];

  *(void *)(v1 + 32) = v5;
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v4 TPPBPolicyModelToCategoryWithPrefix:v6 category:v7];

  *(void *)(v1 + 40) = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v4 TPPBPolicyModelToCategoryWithPrefix:v9 category:v10];

  *(void *)(v1 + 48) = v11;
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v4 TPPBPolicyModelToCategoryWithPrefix:v12 category:v13];

  *(void *)(v1 + 56) = v14;
  NSString v15 = String._bridgeToObjectiveC()();
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v4 TPPBPolicyModelToCategoryWithPrefix:v15 category:v16];

  *(void *)(v1 + 64) = v17;
  NSString v18 = String._bridgeToObjectiveC()();
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v4 TPPBPolicyModelToCategoryWithPrefix:v18 category:v19];

  *(void *)(v1 + 72) = v20;
  specialized Array._endMutation()(v21);
  uint64_t v22 = v1;
  uint64_t v23 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_1001DE740;
  NSString v24 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v26 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v27 = [v26 TPPBPolicyCategoriesByViewWithView:v24 categories:isa];

  *(void *)(v23 + 32) = v27;
  NSString v28 = String._bridgeToObjectiveC()();
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  id v30 = [v26 TPPBPolicyCategoriesByViewWithView:v28 categories:v29];

  *(void *)(v23 + 40) = v30;
  NSString v31 = String._bridgeToObjectiveC()();
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  id v33 = [v26 TPPBPolicyCategoriesByViewWithView:v31 categories:v32];

  *(void *)(v23 + 48) = v33;
  specialized Array._endMutation()(v34);
  uint64_t v35 = v23;
  uint64_t v36 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v36 + 16) = xmmword_1001DE740;
  NSString v37 = String._bridgeToObjectiveC()();
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  NSString v39 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v40 = [v39 TPPBPolicyIntroducersByCategoryWithCategory:v37 introducers:v38];

  *(void *)(v36 + 32) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v39 TPPBPolicyIntroducersByCategoryWithCategory:v41 introducers:v42];

  *(void *)(v36 + 40) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v39 TPPBPolicyIntroducersByCategoryWithCategory:v44 introducers:v45];

  *(void *)(v36 + 48) = v46;
  specialized Array._endMutation()(v47);
  id v48 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 1LL,  v22,  v35,  v36,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_100010E04()
{
  return 0xD000000000000134LL;
}

id sub_100010E20()
{
  uint64_t v0 = sub_100007578(&qword_1002515D8);
  uint64_t v1 = swift_allocObject(v0, 88LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001DE750;
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v5 = [v4 TPPBPolicyModelToCategoryWithPrefix:v2 category:v3];

  *(void *)(v1 + 32) = v5;
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v4 TPPBPolicyModelToCategoryWithPrefix:v6 category:v7];

  *(void *)(v1 + 40) = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v4 TPPBPolicyModelToCategoryWithPrefix:v9 category:v10];

  *(void *)(v1 + 48) = v11;
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v4 TPPBPolicyModelToCategoryWithPrefix:v12 category:v13];

  *(void *)(v1 + 56) = v14;
  NSString v15 = String._bridgeToObjectiveC()();
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v4 TPPBPolicyModelToCategoryWithPrefix:v15 category:v16];

  *(void *)(v1 + 64) = v17;
  NSString v18 = String._bridgeToObjectiveC()();
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v4 TPPBPolicyModelToCategoryWithPrefix:v18 category:v19];

  *(void *)(v1 + 72) = v20;
  NSString v21 = String._bridgeToObjectiveC()();
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v4 TPPBPolicyModelToCategoryWithPrefix:v21 category:v22];

  *(void *)(v1 + 80) = v23;
  specialized Array._endMutation()(v24);
  uint64_t v25 = v1;
  uint64_t v26 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v26 + 16) = xmmword_1001DE740;
  NSString v27 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v29 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v30 = [v29 TPPBPolicyCategoriesByViewWithView:v27 categories:isa];

  *(void *)(v26 + 32) = v30;
  NSString v31 = String._bridgeToObjectiveC()();
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  id v33 = [v29 TPPBPolicyCategoriesByViewWithView:v31 categories:v32];

  *(void *)(v26 + 40) = v33;
  NSString v34 = String._bridgeToObjectiveC()();
  Class v35 = Array._bridgeToObjectiveC()().super.isa;
  id v36 = [v29 TPPBPolicyCategoriesByViewWithView:v34 categories:v35];

  *(void *)(v26 + 48) = v36;
  specialized Array._endMutation()(v37);
  uint64_t v38 = v26;
  uint64_t v39 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v39 + 16) = xmmword_1001DE740;
  NSString v40 = String._bridgeToObjectiveC()();
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  Class v42 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v43 = [v42 TPPBPolicyIntroducersByCategoryWithCategory:v40 introducers:v41];

  *(void *)(v39 + 32) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v42 TPPBPolicyIntroducersByCategoryWithCategory:v44 introducers:v45];

  *(void *)(v39 + 40) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v42 TPPBPolicyIntroducersByCategoryWithCategory:v47 introducers:v48];

  *(void *)(v39 + 48) = v49;
  specialized Array._endMutation()(v50);
  id v51 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 2LL,  v25,  v38,  v39,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_1000113EC()
{
  return 0xD000000000000A54LL;
}

id sub_100011408()
{
  uint64_t v278 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v278, 88LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE750;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  specialized Array._endMutation()(v23);
  uint64_t v277 = v0;
  uint64_t v24 = swift_allocObject(v278, 152LL, 7LL);
  *(_OWORD *)(v24 + 16) = xmmword_1001DE760;
  NSString v25 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  NSString v27 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v28 = [v27 TPPBPolicyCategoriesByViewWithView:v25 categories:isa];

  *(void *)(v24 + 32) = v28;
  NSString v29 = String._bridgeToObjectiveC()();
  Class v30 = Array._bridgeToObjectiveC()().super.isa;
  id v31 = [v27 TPPBPolicyCategoriesByViewWithView:v29 categories:v30];

  *(void *)(v24 + 40) = v31;
  NSString v32 = String._bridgeToObjectiveC()();
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  id v34 = [v27 TPPBPolicyCategoriesByViewWithView:v32 categories:v33];

  *(void *)(v24 + 48) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v27 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v24 + 56) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v27 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v24 + 64) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v27 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v24 + 72) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v27 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v24 + 80) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v27 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v24 + 88) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v27 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v24 + 96) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v27 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v24 + 104) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v27 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v24 + 112) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v27 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v24 + 120) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v27 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v24 + 128) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v27 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v24 + 136) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v27 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v24 + 144) = v70;
  specialized Array._endMutation()(v71);
  uint64_t v276 = v24;
  uint64_t v72 = swift_allocObject(v278, 64LL, 7LL);
  *(_OWORD *)(v72 + 16) = xmmword_1001DE770;
  NSString v73 = String._bridgeToObjectiveC()();
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  unint64_t v75 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v76 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v73 introducers:v74];

  *(void *)(v72 + 32) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v77 introducers:v78];

  *(void *)(v72 + 40) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v80 introducers:v81];

  *(void *)(v72 + 48) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v83 introducers:v84];

  *(void *)(v72 + 56) = v85;
  specialized Array._endMutation()(v86);
  uint64_t v275 = v72;
  uint64_t v87 = swift_allocObject(v278, 160LL, 7LL);
  *(_OWORD *)(v87 + 16) = xmmword_1001DE780;
  v88 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v89 = String._bridgeToObjectiveC()();
  NSString v90 = String._bridgeToObjectiveC()();
  id v91 = [v88 fieldMatch:v89 fieldRegex:v90];

  NSString v92 = String._bridgeToObjectiveC()();
  v93 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v94 = [v93 TPPBPolicyKeyViewMappingWithView:v92 matchingRule:v91];

  *(void *)(v87 + 32) = v94;
  NSString v95 = String._bridgeToObjectiveC()();
  NSString v96 = String._bridgeToObjectiveC()();
  id v97 = [v88 fieldMatch:v95 fieldRegex:v96];

  NSString v98 = String._bridgeToObjectiveC()();
  id v99 = [v93 TPPBPolicyKeyViewMappingWithView:v98 matchingRule:v97];

  *(void *)(v87 + 40) = v99;
  NSString v100 = String._bridgeToObjectiveC()();
  NSString v101 = String._bridgeToObjectiveC()();
  id v102 = [v88 fieldMatch:v100 fieldRegex:v101];

  NSString v103 = String._bridgeToObjectiveC()();
  id v104 = [v93 TPPBPolicyKeyViewMappingWithView:v103 matchingRule:v102];

  *(void *)(v87 + 48) = v104;
  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [v88 fieldMatch:v105 fieldRegex:v106];

  NSString v108 = String._bridgeToObjectiveC()();
  id v109 = [v93 TPPBPolicyKeyViewMappingWithView:v108 matchingRule:v107];

  *(void *)(v87 + 56) = v109;
  NSString v110 = String._bridgeToObjectiveC()();
  NSString v111 = String._bridgeToObjectiveC()();
  id v112 = [v88 fieldMatch:v110 fieldRegex:v111];

  NSString v113 = String._bridgeToObjectiveC()();
  id v114 = [v93 TPPBPolicyKeyViewMappingWithView:v113 matchingRule:v112];

  *(void *)(v87 + 64) = v114;
  NSString v115 = String._bridgeToObjectiveC()();
  NSString v116 = String._bridgeToObjectiveC()();
  id v117 = [v88 fieldMatch:v115 fieldRegex:v116];

  NSString v118 = String._bridgeToObjectiveC()();
  id v119 = [v93 TPPBPolicyKeyViewMappingWithView:v118 matchingRule:v117];

  *(void *)(v87 + 72) = v119;
  NSString v120 = String._bridgeToObjectiveC()();
  NSString v121 = String._bridgeToObjectiveC()();
  id v122 = [v88 fieldMatch:v120 fieldRegex:v121];

  NSString v123 = String._bridgeToObjectiveC()();
  id v124 = [v93 TPPBPolicyKeyViewMappingWithView:v123 matchingRule:v122];

  *(void *)(v87 + 80) = v124;
  uint64_t v125 = swift_allocObject(v278, 56LL, 7LL);
  *(_OWORD *)(v125 + 16) = xmmword_1001DE740;
  NSString v126 = String._bridgeToObjectiveC()();
  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v88 fieldMatch:v126 fieldRegex:v127];

  *(void *)(v125 + 32) = v128;
  NSString v129 = String._bridgeToObjectiveC()();
  NSString v130 = String._bridgeToObjectiveC()();
  id v131 = [v88 fieldMatch:v129 fieldRegex:v130];

  *(void *)(v125 + 40) = v131;
  NSString v132 = String._bridgeToObjectiveC()();
  NSString v133 = String._bridgeToObjectiveC()();
  id v134 = [v88 fieldMatch:v132 fieldRegex:v133];

  *(void *)(v125 + 48) = v134;
  specialized Array._endMutation()(v135);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v136 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v125);
  id v137 = [v88 orMatch:v136];

  NSString v138 = String._bridgeToObjectiveC()();
  id v139 = [v93 TPPBPolicyKeyViewMappingWithView:v138 matchingRule:v137];

  *(void *)(v87 + 88) = v139;
  NSString v140 = String._bridgeToObjectiveC()();
  NSString v141 = String._bridgeToObjectiveC()();
  id v142 = [v88 fieldMatch:v140 fieldRegex:v141];

  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v93 TPPBPolicyKeyViewMappingWithView:v143 matchingRule:v142];

  *(void *)(v87 + 96) = v144;
  uint64_t v145 = swift_allocObject(v278, 64LL, 7LL);
  *(_OWORD *)(v145 + 16) = xmmword_1001DE770;
  uint64_t v146 = swift_allocObject(v278, 48LL, 7LL);
  *(_OWORD *)(v146 + 16) = xmmword_1001DE790;
  NSString v147 = String._bridgeToObjectiveC()();
  NSString v148 = String._bridgeToObjectiveC()();
  id v149 = [v88 fieldMatch:v147 fieldRegex:v148];

  *(void *)(v146 + 32) = v149;
  NSString v150 = String._bridgeToObjectiveC()();
  NSString v151 = String._bridgeToObjectiveC()();
  id v152 = [v88 fieldMatch:v150 fieldRegex:v151];

  *(void *)(v146 + 40) = v152;
  specialized Array._endMutation()(v153);
  Class v154 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v146);
  id v155 = [v88 andMatch:v154];

  *(void *)(v145 + 32) = v155;
  uint64_t v156 = swift_allocObject(v278, 48LL, 7LL);
  *(_OWORD *)(v156 + 16) = xmmword_1001DE790;
  NSString v157 = String._bridgeToObjectiveC()();
  NSString v158 = String._bridgeToObjectiveC()();
  id v159 = [v88 fieldMatch:v157 fieldRegex:v158];

  *(void *)(v156 + 32) = v159;
  NSString v160 = String._bridgeToObjectiveC()();
  NSString v161 = String._bridgeToObjectiveC()();
  id v162 = [v88 fieldMatch:v160 fieldRegex:v161];

  *(void *)(v156 + 40) = v162;
  specialized Array._endMutation()(v163);
  Class v164 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v156);
  id v165 = [v88 andMatch:v164];

  *(void *)(v145 + 40) = v165;
  NSString v166 = String._bridgeToObjectiveC()();
  NSString v167 = String._bridgeToObjectiveC()();
  id v168 = [v88 fieldMatch:v166 fieldRegex:v167];

  *(void *)(v145 + 48) = v168;
  NSString v169 = String._bridgeToObjectiveC()();
  NSString v170 = String._bridgeToObjectiveC()();
  id v171 = [v88 fieldMatch:v169 fieldRegex:v170];

  *(void *)(v145 + 56) = v171;
  specialized Array._endMutation()(v172);
  Class v173 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v145);
  id v174 = [v88 orMatch:v173];

  NSString v175 = String._bridgeToObjectiveC()();
  id v176 = [v93 TPPBPolicyKeyViewMappingWithView:v175 matchingRule:v174];

  *(void *)(v87 + 104) = v176;
  uint64_t v177 = swift_allocObject(v278, 48LL, 7LL);
  *(_OWORD *)(v177 + 16) = xmmword_1001DE790;
  NSString v178 = String._bridgeToObjectiveC()();
  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v88 fieldMatch:v178 fieldRegex:v179];

  *(void *)(v177 + 32) = v180;
  uint64_t v181 = swift_allocObject(v278, 56LL, 7LL);
  *(_OWORD *)(v181 + 16) = xmmword_1001DE740;
  NSString v182 = String._bridgeToObjectiveC()();
  NSString v183 = String._bridgeToObjectiveC()();
  id v184 = [v88 fieldMatch:v182 fieldRegex:v183];

  *(void *)(v181 + 32) = v184;
  NSString v185 = String._bridgeToObjectiveC()();
  NSString v186 = String._bridgeToObjectiveC()();
  id v187 = [v88 fieldMatch:v185 fieldRegex:v186];

  *(void *)(v181 + 40) = v187;
  NSString v188 = String._bridgeToObjectiveC()();
  NSString v189 = String._bridgeToObjectiveC()();
  id v190 = [v88 fieldMatch:v188 fieldRegex:v189];

  *(void *)(v181 + 48) = v190;
  specialized Array._endMutation()(v191);
  Class v192 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v181);
  id v193 = [v88 andMatch:v192];

  *(void *)(v177 + 40) = v193;
  specialized Array._endMutation()(v194);
  Class v195 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v177);
  id v196 = [v88 orMatch:v195];

  NSString v197 = String._bridgeToObjectiveC()();
  id v198 = [v93 TPPBPolicyKeyViewMappingWithView:v197 matchingRule:v196];

  *(void *)(v87 + 112) = v198;
  uint64_t v199 = swift_allocObject(v278, 128LL, 7LL);
  *(_OWORD *)(v199 + 16) = xmmword_1001DE7A0;
  NSString v200 = String._bridgeToObjectiveC()();
  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v88 fieldMatch:v200 fieldRegex:v201];

  *(void *)(v199 + 32) = v202;
  NSString v203 = String._bridgeToObjectiveC()();
  NSString v204 = String._bridgeToObjectiveC()();
  id v205 = [v88 fieldMatch:v203 fieldRegex:v204];

  *(void *)(v199 + 40) = v205;
  NSString v206 = String._bridgeToObjectiveC()();
  NSString v207 = String._bridgeToObjectiveC()();
  id v208 = [v88 fieldMatch:v206 fieldRegex:v207];

  *(void *)(v199 + 48) = v208;
  NSString v209 = String._bridgeToObjectiveC()();
  NSString v210 = String._bridgeToObjectiveC()();
  id v211 = [v88 fieldMatch:v209 fieldRegex:v210];

  *(void *)(v199 + 56) = v211;
  NSString v212 = String._bridgeToObjectiveC()();
  NSString v213 = String._bridgeToObjectiveC()();
  id v214 = [v88 fieldMatch:v212 fieldRegex:v213];

  *(void *)(v199 + 64) = v214;
  NSString v215 = String._bridgeToObjectiveC()();
  NSString v216 = String._bridgeToObjectiveC()();
  id v217 = [v88 fieldMatch:v215 fieldRegex:v216];

  *(void *)(v199 + 72) = v217;
  NSString v218 = String._bridgeToObjectiveC()();
  NSString v219 = String._bridgeToObjectiveC()();
  id v220 = [v88 fieldMatch:v218 fieldRegex:v219];

  *(void *)(v199 + 80) = v220;
  NSString v221 = String._bridgeToObjectiveC()();
  NSString v222 = String._bridgeToObjectiveC()();
  id v223 = [v88 fieldMatch:v221 fieldRegex:v222];

  *(void *)(v199 + 88) = v223;
  NSString v224 = String._bridgeToObjectiveC()();
  NSString v225 = String._bridgeToObjectiveC()();
  id v226 = [v88 fieldMatch:v224 fieldRegex:v225];

  *(void *)(v199 + 96) = v226;
  NSString v227 = String._bridgeToObjectiveC()();
  NSString v228 = String._bridgeToObjectiveC()();
  id v229 = [v88 fieldMatch:v227 fieldRegex:v228];

  *(void *)(v199 + 104) = v229;
  NSString v230 = String._bridgeToObjectiveC()();
  NSString v231 = String._bridgeToObjectiveC()();
  id v232 = [v88 fieldMatch:v230 fieldRegex:v231];

  *(void *)(v199 + 112) = v232;
  NSString v233 = String._bridgeToObjectiveC()();
  NSString v234 = String._bridgeToObjectiveC()();
  id v235 = [v88 fieldMatch:v233 fieldRegex:v234];

  *(void *)(v199 + 120) = v235;
  specialized Array._endMutation()(v236);
  Class v237 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v199);
  id v238 = [v88 orMatch:v237];

  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v93 TPPBPolicyKeyViewMappingWithView:v239 matchingRule:v238];

  uint64_t v241 = v87;
  *(void *)(v87 + 120) = v240;
  NSString v242 = String._bridgeToObjectiveC()();
  NSString v243 = String._bridgeToObjectiveC()();
  id v244 = [v88 fieldMatch:v242 fieldRegex:v243];

  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v93 TPPBPolicyKeyViewMappingWithView:v245 matchingRule:v244];

  *(void *)(v87 + 128) = v246;
  NSString v247 = String._bridgeToObjectiveC()();
  NSString v248 = String._bridgeToObjectiveC()();
  id v249 = [v88 fieldMatch:v247 fieldRegex:v248];

  NSString v250 = String._bridgeToObjectiveC()();
  id v251 = [v93 TPPBPolicyKeyViewMappingWithView:v250 matchingRule:v249];

  *(void *)(v87 + 136) = v251;
  uint64_t v252 = swift_allocObject(v278, 56LL, 7LL);
  *(_OWORD *)(v252 + 16) = xmmword_1001DE740;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v88 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v252 + 32) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v88 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v252 + 40) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v88 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v252 + 48) = v261;
  specialized Array._endMutation()(v262);
  Class v263 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v252);
  id v264 = [v88 orMatch:v263];

  NSString v265 = String._bridgeToObjectiveC()();
  id v266 = [v93 TPPBPolicyKeyViewMappingWithView:v265 matchingRule:v264];

  *(void *)(v241 + 144) = v266;
  NSString v267 = String._bridgeToObjectiveC()();
  NSString v268 = String._bridgeToObjectiveC()();
  id v269 = [v88 fieldMatch:v267 fieldRegex:v268];

  NSString v270 = String._bridgeToObjectiveC()();
  id v271 = [v93 TPPBPolicyKeyViewMappingWithView:v270 matchingRule:v269];

  *(void *)(v241 + 152) = v271;
  specialized Array._endMutation()(v272);
  id v273 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 3LL,  v277,  v276,  v275,  (uint64_t)_swiftEmptyArrayStorage,  v241,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_1000135FC()
{
  return 0xD0000000000009E4LL;
}

id sub_100013618()
{
  uint64_t v0 = sub_100007578(&qword_1002515D8);
  uint64_t v1 = swift_allocObject(v0, 88LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001DE750;
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v5 = [v4 TPPBPolicyModelToCategoryWithPrefix:v2 category:v3];

  *(void *)(v1 + 32) = v5;
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v4 TPPBPolicyModelToCategoryWithPrefix:v6 category:v7];

  *(void *)(v1 + 40) = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v4 TPPBPolicyModelToCategoryWithPrefix:v9 category:v10];

  *(void *)(v1 + 48) = v11;
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v4 TPPBPolicyModelToCategoryWithPrefix:v12 category:v13];

  *(void *)(v1 + 56) = v14;
  NSString v15 = String._bridgeToObjectiveC()();
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v4 TPPBPolicyModelToCategoryWithPrefix:v15 category:v16];

  *(void *)(v1 + 64) = v17;
  NSString v18 = String._bridgeToObjectiveC()();
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v4 TPPBPolicyModelToCategoryWithPrefix:v18 category:v19];

  *(void *)(v1 + 72) = v20;
  NSString v21 = String._bridgeToObjectiveC()();
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v4 TPPBPolicyModelToCategoryWithPrefix:v21 category:v22];

  *(void *)(v1 + 80) = v23;
  specialized Array._endMutation()(v24);
  uint64_t v271 = v1;
  uint64_t v25 = swift_allocObject(v0, 144LL, 7LL);
  *(_OWORD *)(v25 + 16) = xmmword_1001DE7B0;
  NSString v26 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v28 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v29 = [v28 TPPBPolicyCategoriesByViewWithView:v26 categories:isa];

  *(void *)(v25 + 32) = v29;
  NSString v30 = String._bridgeToObjectiveC()();
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  id v32 = [v28 TPPBPolicyCategoriesByViewWithView:v30 categories:v31];

  *(void *)(v25 + 40) = v32;
  NSString v33 = String._bridgeToObjectiveC()();
  Class v34 = Array._bridgeToObjectiveC()().super.isa;
  id v35 = [v28 TPPBPolicyCategoriesByViewWithView:v33 categories:v34];

  *(void *)(v25 + 48) = v35;
  NSString v36 = String._bridgeToObjectiveC()();
  Class v37 = Array._bridgeToObjectiveC()().super.isa;
  id v38 = [v28 TPPBPolicyCategoriesByViewWithView:v36 categories:v37];

  *(void *)(v25 + 56) = v38;
  NSString v39 = String._bridgeToObjectiveC()();
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  id v41 = [v28 TPPBPolicyCategoriesByViewWithView:v39 categories:v40];

  *(void *)(v25 + 64) = v41;
  NSString v42 = String._bridgeToObjectiveC()();
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  id v44 = [v28 TPPBPolicyCategoriesByViewWithView:v42 categories:v43];

  *(void *)(v25 + 72) = v44;
  NSString v45 = String._bridgeToObjectiveC()();
  Class v46 = Array._bridgeToObjectiveC()().super.isa;
  id v47 = [v28 TPPBPolicyCategoriesByViewWithView:v45 categories:v46];

  *(void *)(v25 + 80) = v47;
  NSString v48 = String._bridgeToObjectiveC()();
  Class v49 = Array._bridgeToObjectiveC()().super.isa;
  id v50 = [v28 TPPBPolicyCategoriesByViewWithView:v48 categories:v49];

  *(void *)(v25 + 88) = v50;
  NSString v51 = String._bridgeToObjectiveC()();
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  id v53 = [v28 TPPBPolicyCategoriesByViewWithView:v51 categories:v52];

  *(void *)(v25 + 96) = v53;
  NSString v54 = String._bridgeToObjectiveC()();
  Class v55 = Array._bridgeToObjectiveC()().super.isa;
  id v56 = [v28 TPPBPolicyCategoriesByViewWithView:v54 categories:v55];

  *(void *)(v25 + 104) = v56;
  NSString v57 = String._bridgeToObjectiveC()();
  Class v58 = Array._bridgeToObjectiveC()().super.isa;
  id v59 = [v28 TPPBPolicyCategoriesByViewWithView:v57 categories:v58];

  *(void *)(v25 + 112) = v59;
  NSString v60 = String._bridgeToObjectiveC()();
  Class v61 = Array._bridgeToObjectiveC()().super.isa;
  id v62 = [v28 TPPBPolicyCategoriesByViewWithView:v60 categories:v61];

  *(void *)(v25 + 120) = v62;
  NSString v63 = String._bridgeToObjectiveC()();
  Class v64 = Array._bridgeToObjectiveC()().super.isa;
  id v65 = [v28 TPPBPolicyCategoriesByViewWithView:v63 categories:v64];

  *(void *)(v25 + 128) = v65;
  NSString v66 = String._bridgeToObjectiveC()();
  Class v67 = Array._bridgeToObjectiveC()().super.isa;
  id v68 = [v28 TPPBPolicyCategoriesByViewWithView:v66 categories:v67];

  *(void *)(v25 + 136) = v68;
  specialized Array._endMutation()(v69);
  uint64_t v270 = v25;
  uint64_t v70 = swift_allocObject(v0, 64LL, 7LL);
  *(_OWORD *)(v70 + 16) = xmmword_1001DE770;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  NSString v73 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v74 = [v73 TPPBPolicyIntroducersByCategoryWithCategory:v71 introducers:v72];

  *(void *)(v70 + 32) = v74;
  NSString v75 = String._bridgeToObjectiveC()();
  Class v76 = Array._bridgeToObjectiveC()().super.isa;
  id v77 = [v73 TPPBPolicyIntroducersByCategoryWithCategory:v75 introducers:v76];

  *(void *)(v70 + 40) = v77;
  NSString v78 = String._bridgeToObjectiveC()();
  Class v79 = Array._bridgeToObjectiveC()().super.isa;
  id v80 = [v73 TPPBPolicyIntroducersByCategoryWithCategory:v78 introducers:v79];

  *(void *)(v70 + 48) = v80;
  NSString v81 = String._bridgeToObjectiveC()();
  Class v82 = Array._bridgeToObjectiveC()().super.isa;
  id v83 = [v73 TPPBPolicyIntroducersByCategoryWithCategory:v81 introducers:v82];

  *(void *)(v70 + 56) = v83;
  specialized Array._endMutation()(v84);
  uint64_t v269 = v70;
  uint64_t v85 = swift_allocObject(v0, 152LL, 7LL);
  *(_OWORD *)(v85 + 16) = xmmword_1001DE760;
  uint64_t v86 = (void *)v85;
  uint64_t v87 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v88 = String._bridgeToObjectiveC()();
  NSString v89 = String._bridgeToObjectiveC()();
  id v90 = [v87 fieldMatch:v88 fieldRegex:v89];

  NSString v91 = String._bridgeToObjectiveC()();
  NSString v92 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v93 = [v92 TPPBPolicyKeyViewMappingWithView:v91 matchingRule:v90];

  v86[4] = v93;
  NSString v94 = String._bridgeToObjectiveC()();
  NSString v95 = String._bridgeToObjectiveC()();
  id v96 = [v87 fieldMatch:v94 fieldRegex:v95];

  NSString v97 = String._bridgeToObjectiveC()();
  id v98 = [v92 TPPBPolicyKeyViewMappingWithView:v97 matchingRule:v96];

  v86[5] = v98;
  NSString v99 = String._bridgeToObjectiveC()();
  NSString v100 = String._bridgeToObjectiveC()();
  id v101 = [v87 fieldMatch:v99 fieldRegex:v100];

  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = [v92 TPPBPolicyKeyViewMappingWithView:v102 matchingRule:v101];

  v86[6] = v103;
  NSString v104 = String._bridgeToObjectiveC()();
  NSString v105 = String._bridgeToObjectiveC()();
  id v106 = [v87 fieldMatch:v104 fieldRegex:v105];

  NSString v107 = String._bridgeToObjectiveC()();
  id v108 = [v92 TPPBPolicyKeyViewMappingWithView:v107 matchingRule:v106];

  v86[7] = v108;
  NSString v109 = String._bridgeToObjectiveC()();
  NSString v110 = String._bridgeToObjectiveC()();
  id v111 = [v87 fieldMatch:v109 fieldRegex:v110];

  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v92 TPPBPolicyKeyViewMappingWithView:v112 matchingRule:v111];

  v86[8] = v113;
  NSString v114 = String._bridgeToObjectiveC()();
  NSString v115 = String._bridgeToObjectiveC()();
  id v116 = [v87 fieldMatch:v114 fieldRegex:v115];

  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v92 TPPBPolicyKeyViewMappingWithView:v117 matchingRule:v116];

  v86[9] = v118;
  NSString v119 = String._bridgeToObjectiveC()();
  NSString v120 = String._bridgeToObjectiveC()();
  id v121 = [v87 fieldMatch:v119 fieldRegex:v120];

  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v92 TPPBPolicyKeyViewMappingWithView:v122 matchingRule:v121];

  v86[10] = v123;
  uint64_t v124 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v124 + 16) = xmmword_1001DE740;
  NSString v125 = String._bridgeToObjectiveC()();
  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v87 fieldMatch:v125 fieldRegex:v126];

  *(void *)(v124 + 32) = v127;
  NSString v128 = String._bridgeToObjectiveC()();
  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v87 fieldMatch:v128 fieldRegex:v129];

  *(void *)(v124 + 40) = v130;
  NSString v131 = String._bridgeToObjectiveC()();
  NSString v132 = String._bridgeToObjectiveC()();
  id v133 = [v87 fieldMatch:v131 fieldRegex:v132];

  *(void *)(v124 + 48) = v133;
  specialized Array._endMutation()(v134);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v135 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v124);
  id v136 = [v87 orMatch:v135];

  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [v92 TPPBPolicyKeyViewMappingWithView:v137 matchingRule:v136];

  NSString v268 = v86;
  v86[11] = v138;
  NSString v139 = String._bridgeToObjectiveC()();
  NSString v140 = String._bridgeToObjectiveC()();
  id v141 = [v87 fieldMatch:v139 fieldRegex:v140];

  NSString v142 = String._bridgeToObjectiveC()();
  id v143 = [v92 TPPBPolicyKeyViewMappingWithView:v142 matchingRule:v141];

  v86[12] = v143;
  uint64_t v144 = swift_allocObject(v0, 64LL, 7LL);
  *(_OWORD *)(v144 + 16) = xmmword_1001DE770;
  uint64_t v145 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v145 + 16) = xmmword_1001DE790;
  NSString v146 = String._bridgeToObjectiveC()();
  NSString v147 = String._bridgeToObjectiveC()();
  id v148 = [v87 fieldMatch:v146 fieldRegex:v147];

  *(void *)(v145 + 32) = v148;
  NSString v149 = String._bridgeToObjectiveC()();
  NSString v150 = String._bridgeToObjectiveC()();
  id v151 = [v87 fieldMatch:v149 fieldRegex:v150];

  *(void *)(v145 + 40) = v151;
  specialized Array._endMutation()(v152);
  Class v153 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v145);
  id v154 = [v87 andMatch:v153];

  *(void *)(v144 + 32) = v154;
  uint64_t v155 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v155 + 16) = xmmword_1001DE790;
  NSString v156 = String._bridgeToObjectiveC()();
  NSString v157 = String._bridgeToObjectiveC()();
  id v158 = [v87 fieldMatch:v156 fieldRegex:v157];

  *(void *)(v155 + 32) = v158;
  NSString v159 = String._bridgeToObjectiveC()();
  NSString v160 = String._bridgeToObjectiveC()();
  id v161 = [v87 fieldMatch:v159 fieldRegex:v160];

  *(void *)(v155 + 40) = v161;
  specialized Array._endMutation()(v162);
  Class v163 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v155);
  id v164 = [v87 andMatch:v163];

  *(void *)(v144 + 40) = v164;
  NSString v165 = String._bridgeToObjectiveC()();
  NSString v166 = String._bridgeToObjectiveC()();
  id v167 = [v87 fieldMatch:v165 fieldRegex:v166];

  *(void *)(v144 + 48) = v167;
  NSString v168 = String._bridgeToObjectiveC()();
  NSString v169 = String._bridgeToObjectiveC()();
  id v170 = [v87 fieldMatch:v168 fieldRegex:v169];

  *(void *)(v144 + 56) = v170;
  specialized Array._endMutation()(v171);
  Class v172 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v144);
  id v173 = [v87 orMatch:v172];

  NSString v174 = String._bridgeToObjectiveC()();
  id v175 = [v92 TPPBPolicyKeyViewMappingWithView:v174 matchingRule:v173];

  v268[13] = v175;
  uint64_t v176 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v176 + 16) = xmmword_1001DE790;
  NSString v177 = String._bridgeToObjectiveC()();
  NSString v178 = String._bridgeToObjectiveC()();
  id v179 = [v87 fieldMatch:v177 fieldRegex:v178];

  *(void *)(v176 + 32) = v179;
  uint64_t v180 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v180 + 16) = xmmword_1001DE740;
  NSString v181 = String._bridgeToObjectiveC()();
  NSString v182 = String._bridgeToObjectiveC()();
  id v183 = [v87 fieldMatch:v181 fieldRegex:v182];

  *(void *)(v180 + 32) = v183;
  NSString v184 = String._bridgeToObjectiveC()();
  NSString v185 = String._bridgeToObjectiveC()();
  id v186 = [v87 fieldMatch:v184 fieldRegex:v185];

  *(void *)(v180 + 40) = v186;
  NSString v187 = String._bridgeToObjectiveC()();
  NSString v188 = String._bridgeToObjectiveC()();
  id v189 = [v87 fieldMatch:v187 fieldRegex:v188];

  *(void *)(v180 + 48) = v189;
  specialized Array._endMutation()(v190);
  Class v191 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v180);
  id v192 = [v87 andMatch:v191];

  *(void *)(v176 + 40) = v192;
  specialized Array._endMutation()(v193);
  Class v194 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v176);
  id v195 = [v87 orMatch:v194];

  NSString v196 = String._bridgeToObjectiveC()();
  id v197 = [v92 TPPBPolicyKeyViewMappingWithView:v196 matchingRule:v195];

  v268[14] = v197;
  uint64_t v198 = swift_allocObject(v0, 128LL, 7LL);
  *(_OWORD *)(v198 + 16) = xmmword_1001DE7A0;
  NSString v199 = String._bridgeToObjectiveC()();
  NSString v200 = String._bridgeToObjectiveC()();
  id v201 = [v87 fieldMatch:v199 fieldRegex:v200];

  *(void *)(v198 + 32) = v201;
  NSString v202 = String._bridgeToObjectiveC()();
  NSString v203 = String._bridgeToObjectiveC()();
  id v204 = [v87 fieldMatch:v202 fieldRegex:v203];

  *(void *)(v198 + 40) = v204;
  NSString v205 = String._bridgeToObjectiveC()();
  NSString v206 = String._bridgeToObjectiveC()();
  id v207 = [v87 fieldMatch:v205 fieldRegex:v206];

  *(void *)(v198 + 48) = v207;
  NSString v208 = String._bridgeToObjectiveC()();
  NSString v209 = String._bridgeToObjectiveC()();
  id v210 = [v87 fieldMatch:v208 fieldRegex:v209];

  *(void *)(v198 + 56) = v210;
  NSString v211 = String._bridgeToObjectiveC()();
  NSString v212 = String._bridgeToObjectiveC()();
  id v213 = [v87 fieldMatch:v211 fieldRegex:v212];

  *(void *)(v198 + 64) = v213;
  NSString v214 = String._bridgeToObjectiveC()();
  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v87 fieldMatch:v214 fieldRegex:v215];

  *(void *)(v198 + 72) = v216;
  NSString v217 = String._bridgeToObjectiveC()();
  NSString v218 = String._bridgeToObjectiveC()();
  id v219 = [v87 fieldMatch:v217 fieldRegex:v218];

  *(void *)(v198 + 80) = v219;
  NSString v220 = String._bridgeToObjectiveC()();
  NSString v221 = String._bridgeToObjectiveC()();
  id v222 = [v87 fieldMatch:v220 fieldRegex:v221];

  *(void *)(v198 + 88) = v222;
  NSString v223 = String._bridgeToObjectiveC()();
  NSString v224 = String._bridgeToObjectiveC()();
  id v225 = [v87 fieldMatch:v223 fieldRegex:v224];

  *(void *)(v198 + 96) = v225;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v87 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v198 + 104) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v87 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v198 + 112) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v87 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v198 + 120) = v234;
  specialized Array._endMutation()(v235);
  Class v236 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v198);
  id v237 = [v87 orMatch:v236];

  NSString v238 = String._bridgeToObjectiveC()();
  id v239 = [v92 TPPBPolicyKeyViewMappingWithView:v238 matchingRule:v237];

  v268[15] = v239;
  NSString v240 = String._bridgeToObjectiveC()();
  NSString v241 = String._bridgeToObjectiveC()();
  id v242 = [v87 fieldMatch:v240 fieldRegex:v241];

  NSString v243 = String._bridgeToObjectiveC()();
  id v244 = [v92 TPPBPolicyKeyViewMappingWithView:v243 matchingRule:v242];

  v268[16] = v244;
  NSString v245 = String._bridgeToObjectiveC()();
  NSString v246 = String._bridgeToObjectiveC()();
  id v247 = [v87 fieldMatch:v245 fieldRegex:v246];

  NSString v248 = String._bridgeToObjectiveC()();
  id v249 = [v92 TPPBPolicyKeyViewMappingWithView:v248 matchingRule:v247];

  v268[17] = v249;
  uint64_t v250 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v250 + 16) = xmmword_1001DE740;
  NSString v251 = String._bridgeToObjectiveC()();
  NSString v252 = String._bridgeToObjectiveC()();
  id v253 = [v87 fieldMatch:v251 fieldRegex:v252];

  *(void *)(v250 + 32) = v253;
  NSString v254 = String._bridgeToObjectiveC()();
  NSString v255 = String._bridgeToObjectiveC()();
  id v256 = [v87 fieldMatch:v254 fieldRegex:v255];

  *(void *)(v250 + 40) = v256;
  NSString v257 = String._bridgeToObjectiveC()();
  NSString v258 = String._bridgeToObjectiveC()();
  id v259 = [v87 fieldMatch:v257 fieldRegex:v258];

  *(void *)(v250 + 48) = v259;
  specialized Array._endMutation()(v260);
  Class v261 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v250);
  id v262 = [v87 orMatch:v261];

  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v92 TPPBPolicyKeyViewMappingWithView:v263 matchingRule:v262];

  v268[18] = v264;
  specialized Array._endMutation()(v265);
  id v266 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 4LL,  v271,  v270,  v269,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v268,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_100015714()
{
  return 0xD000000000000A54LL;
}

id sub_100015730()
{
  uint64_t v283 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v283, 96LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7C0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  specialized Array._endMutation()(v26);
  uint64_t v281 = v0;
  uint64_t v27 = swift_allocObject(v283, 144LL, 7LL);
  *(_OWORD *)(v27 + 16) = xmmword_1001DE7B0;
  NSString v28 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  NSString v30 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v31 = [v30 TPPBPolicyCategoriesByViewWithView:v28 categories:isa];

  *(void *)(v27 + 32) = v31;
  NSString v32 = String._bridgeToObjectiveC()();
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  id v34 = [v30 TPPBPolicyCategoriesByViewWithView:v32 categories:v33];

  *(void *)(v27 + 40) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v30 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v27 + 48) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v30 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v27 + 56) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v30 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v27 + 64) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v30 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v27 + 72) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v30 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v27 + 80) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v30 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v27 + 88) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v30 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v27 + 96) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v30 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v27 + 104) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v30 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v27 + 112) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v30 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v27 + 120) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v30 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v27 + 128) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v30 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v27 + 136) = v70;
  specialized Array._endMutation()(v71);
  uint64_t v280 = v27;
  uint64_t v72 = swift_allocObject(v283, 64LL, 7LL);
  *(_OWORD *)(v72 + 16) = xmmword_1001DE770;
  NSString v73 = String._bridgeToObjectiveC()();
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  NSString v75 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v76 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v73 introducers:v74];

  *(void *)(v72 + 32) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v77 introducers:v78];

  *(void *)(v72 + 40) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v80 introducers:v81];

  *(void *)(v72 + 48) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v83 introducers:v84];

  *(void *)(v72 + 56) = v85;
  specialized Array._endMutation()(v86);
  uint64_t v279 = v72;
  uint64_t v87 = swift_allocObject(v283, 160LL, 7LL);
  *(_OWORD *)(v87 + 16) = xmmword_1001DE780;
  NSString v88 = (void *)v87;
  NSString v89 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v90 = String._bridgeToObjectiveC()();
  NSString v91 = String._bridgeToObjectiveC()();
  id v92 = [v89 fieldMatch:v90 fieldRegex:v91];

  NSString v93 = String._bridgeToObjectiveC()();
  NSString v94 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v95 = [v94 TPPBPolicyKeyViewMappingWithView:v93 matchingRule:v92];

  v88[4] = v95;
  NSString v96 = String._bridgeToObjectiveC()();
  NSString v97 = String._bridgeToObjectiveC()();
  id v98 = [v89 fieldMatch:v96 fieldRegex:v97];

  NSString v99 = String._bridgeToObjectiveC()();
  id v100 = [v94 TPPBPolicyKeyViewMappingWithView:v99 matchingRule:v98];

  v88[5] = v100;
  NSString v101 = String._bridgeToObjectiveC()();
  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = [v89 fieldMatch:v101 fieldRegex:v102];

  NSString v104 = String._bridgeToObjectiveC()();
  id v105 = [v94 TPPBPolicyKeyViewMappingWithView:v104 matchingRule:v103];

  v88[6] = v105;
  NSString v106 = String._bridgeToObjectiveC()();
  NSString v107 = String._bridgeToObjectiveC()();
  id v108 = [v89 fieldMatch:v106 fieldRegex:v107];

  NSString v109 = String._bridgeToObjectiveC()();
  id v110 = [v94 TPPBPolicyKeyViewMappingWithView:v109 matchingRule:v108];

  v88[7] = v110;
  NSString v111 = String._bridgeToObjectiveC()();
  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v89 fieldMatch:v111 fieldRegex:v112];

  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v94 TPPBPolicyKeyViewMappingWithView:v114 matchingRule:v113];

  v88[8] = v115;
  NSString v116 = String._bridgeToObjectiveC()();
  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v89 fieldMatch:v116 fieldRegex:v117];

  NSString v119 = String._bridgeToObjectiveC()();
  id v120 = [v94 TPPBPolicyKeyViewMappingWithView:v119 matchingRule:v118];

  v88[9] = v120;
  NSString v121 = String._bridgeToObjectiveC()();
  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v89 fieldMatch:v121 fieldRegex:v122];

  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v94 TPPBPolicyKeyViewMappingWithView:v124 matchingRule:v123];

  v88[10] = v125;
  uint64_t v126 = swift_allocObject(v283, 56LL, 7LL);
  *(_OWORD *)(v126 + 16) = xmmword_1001DE740;
  NSString v127 = String._bridgeToObjectiveC()();
  NSString v128 = String._bridgeToObjectiveC()();
  id v129 = [v89 fieldMatch:v127 fieldRegex:v128];

  *(void *)(v126 + 32) = v129;
  NSString v130 = String._bridgeToObjectiveC()();
  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v89 fieldMatch:v130 fieldRegex:v131];

  *(void *)(v126 + 40) = v132;
  NSString v133 = String._bridgeToObjectiveC()();
  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v89 fieldMatch:v133 fieldRegex:v134];

  *(void *)(v126 + 48) = v135;
  specialized Array._endMutation()(v136);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v137 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v126);
  id v138 = [v89 orMatch:v137];

  NSString v139 = String._bridgeToObjectiveC()();
  id v140 = [v94 TPPBPolicyKeyViewMappingWithView:v139 matchingRule:v138];

  v282 = v88;
  v88[11] = v140;
  NSString v141 = String._bridgeToObjectiveC()();
  NSString v142 = String._bridgeToObjectiveC()();
  id v143 = [v89 fieldMatch:v141 fieldRegex:v142];

  NSString v144 = String._bridgeToObjectiveC()();
  id v145 = [v94 TPPBPolicyKeyViewMappingWithView:v144 matchingRule:v143];

  v88[12] = v145;
  uint64_t v146 = swift_allocObject(v283, 64LL, 7LL);
  *(_OWORD *)(v146 + 16) = xmmword_1001DE770;
  uint64_t v147 = swift_allocObject(v283, 48LL, 7LL);
  *(_OWORD *)(v147 + 16) = xmmword_1001DE790;
  NSString v148 = String._bridgeToObjectiveC()();
  NSString v149 = String._bridgeToObjectiveC()();
  id v150 = [v89 fieldMatch:v148 fieldRegex:v149];

  *(void *)(v147 + 32) = v150;
  NSString v151 = String._bridgeToObjectiveC()();
  NSString v152 = String._bridgeToObjectiveC()();
  id v153 = [v89 fieldMatch:v151 fieldRegex:v152];

  *(void *)(v147 + 40) = v153;
  specialized Array._endMutation()(v154);
  Class v155 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v147);
  id v156 = [v89 andMatch:v155];

  *(void *)(v146 + 32) = v156;
  uint64_t v157 = swift_allocObject(v283, 48LL, 7LL);
  *(_OWORD *)(v157 + 16) = xmmword_1001DE790;
  NSString v158 = String._bridgeToObjectiveC()();
  NSString v159 = String._bridgeToObjectiveC()();
  id v160 = [v89 fieldMatch:v158 fieldRegex:v159];

  *(void *)(v157 + 32) = v160;
  NSString v161 = String._bridgeToObjectiveC()();
  NSString v162 = String._bridgeToObjectiveC()();
  id v163 = [v89 fieldMatch:v161 fieldRegex:v162];

  *(void *)(v157 + 40) = v163;
  specialized Array._endMutation()(v164);
  Class v165 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v157);
  id v166 = [v89 andMatch:v165];

  *(void *)(v146 + 40) = v166;
  NSString v167 = String._bridgeToObjectiveC()();
  NSString v168 = String._bridgeToObjectiveC()();
  id v169 = [v89 fieldMatch:v167 fieldRegex:v168];

  *(void *)(v146 + 48) = v169;
  NSString v170 = String._bridgeToObjectiveC()();
  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v89 fieldMatch:v170 fieldRegex:v171];

  *(void *)(v146 + 56) = v172;
  specialized Array._endMutation()(v173);
  Class v174 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v146);
  id v175 = [v89 orMatch:v174];

  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v94 TPPBPolicyKeyViewMappingWithView:v176 matchingRule:v175];

  v282[13] = v177;
  uint64_t v178 = swift_allocObject(v283, 48LL, 7LL);
  *(_OWORD *)(v178 + 16) = xmmword_1001DE790;
  NSString v179 = String._bridgeToObjectiveC()();
  NSString v180 = String._bridgeToObjectiveC()();
  id v181 = [v89 fieldMatch:v179 fieldRegex:v180];

  *(void *)(v178 + 32) = v181;
  uint64_t v182 = swift_allocObject(v283, 56LL, 7LL);
  *(_OWORD *)(v182 + 16) = xmmword_1001DE740;
  NSString v183 = String._bridgeToObjectiveC()();
  NSString v184 = String._bridgeToObjectiveC()();
  id v185 = [v89 fieldMatch:v183 fieldRegex:v184];

  *(void *)(v182 + 32) = v185;
  NSString v186 = String._bridgeToObjectiveC()();
  NSString v187 = String._bridgeToObjectiveC()();
  id v188 = [v89 fieldMatch:v186 fieldRegex:v187];

  *(void *)(v182 + 40) = v188;
  NSString v189 = String._bridgeToObjectiveC()();
  NSString v190 = String._bridgeToObjectiveC()();
  id v191 = [v89 fieldMatch:v189 fieldRegex:v190];

  *(void *)(v182 + 48) = v191;
  specialized Array._endMutation()(v192);
  Class v193 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v182);
  id v194 = [v89 andMatch:v193];

  *(void *)(v178 + 40) = v194;
  specialized Array._endMutation()(v195);
  Class v196 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v178);
  id v197 = [v89 orMatch:v196];

  NSString v198 = String._bridgeToObjectiveC()();
  id v199 = [v94 TPPBPolicyKeyViewMappingWithView:v198 matchingRule:v197];

  v282[14] = v199;
  uint64_t v200 = swift_allocObject(v283, 144LL, 7LL);
  *(_OWORD *)(v200 + 16) = xmmword_1001DE7B0;
  NSString v201 = String._bridgeToObjectiveC()();
  NSString v202 = String._bridgeToObjectiveC()();
  id v203 = [v89 fieldMatch:v201 fieldRegex:v202];

  *(void *)(v200 + 32) = v203;
  NSString v204 = String._bridgeToObjectiveC()();
  NSString v205 = String._bridgeToObjectiveC()();
  id v206 = [v89 fieldMatch:v204 fieldRegex:v205];

  *(void *)(v200 + 40) = v206;
  NSString v207 = String._bridgeToObjectiveC()();
  NSString v208 = String._bridgeToObjectiveC()();
  id v209 = [v89 fieldMatch:v207 fieldRegex:v208];

  *(void *)(v200 + 48) = v209;
  NSString v210 = String._bridgeToObjectiveC()();
  NSString v211 = String._bridgeToObjectiveC()();
  id v212 = [v89 fieldMatch:v210 fieldRegex:v211];

  *(void *)(v200 + 56) = v212;
  NSString v213 = String._bridgeToObjectiveC()();
  NSString v214 = String._bridgeToObjectiveC()();
  id v215 = [v89 fieldMatch:v213 fieldRegex:v214];

  *(void *)(v200 + 64) = v215;
  NSString v216 = String._bridgeToObjectiveC()();
  NSString v217 = String._bridgeToObjectiveC()();
  id v218 = [v89 fieldMatch:v216 fieldRegex:v217];

  *(void *)(v200 + 72) = v218;
  NSString v219 = String._bridgeToObjectiveC()();
  NSString v220 = String._bridgeToObjectiveC()();
  id v221 = [v89 fieldMatch:v219 fieldRegex:v220];

  *(void *)(v200 + 80) = v221;
  NSString v222 = String._bridgeToObjectiveC()();
  NSString v223 = String._bridgeToObjectiveC()();
  id v224 = [v89 fieldMatch:v222 fieldRegex:v223];

  *(void *)(v200 + 88) = v224;
  NSString v225 = String._bridgeToObjectiveC()();
  NSString v226 = String._bridgeToObjectiveC()();
  id v227 = [v89 fieldMatch:v225 fieldRegex:v226];

  *(void *)(v200 + 96) = v227;
  NSString v228 = String._bridgeToObjectiveC()();
  NSString v229 = String._bridgeToObjectiveC()();
  id v230 = [v89 fieldMatch:v228 fieldRegex:v229];

  *(void *)(v200 + 104) = v230;
  NSString v231 = String._bridgeToObjectiveC()();
  NSString v232 = String._bridgeToObjectiveC()();
  id v233 = [v89 fieldMatch:v231 fieldRegex:v232];

  *(void *)(v200 + 112) = v233;
  NSString v234 = String._bridgeToObjectiveC()();
  NSString v235 = String._bridgeToObjectiveC()();
  id v236 = [v89 fieldMatch:v234 fieldRegex:v235];

  *(void *)(v200 + 120) = v236;
  NSString v237 = String._bridgeToObjectiveC()();
  NSString v238 = String._bridgeToObjectiveC()();
  id v239 = [v89 fieldMatch:v237 fieldRegex:v238];

  *(void *)(v200 + 128) = v239;
  NSString v240 = String._bridgeToObjectiveC()();
  NSString v241 = String._bridgeToObjectiveC()();
  id v242 = [v89 fieldMatch:v240 fieldRegex:v241];

  *(void *)(v200 + 136) = v242;
  specialized Array._endMutation()(v243);
  Class v244 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v200);
  id v245 = [v89 orMatch:v244];

  NSString v246 = String._bridgeToObjectiveC()();
  id v247 = [v94 TPPBPolicyKeyViewMappingWithView:v246 matchingRule:v245];

  v282[15] = v247;
  NSString v248 = String._bridgeToObjectiveC()();
  NSString v249 = String._bridgeToObjectiveC()();
  id v250 = [v89 fieldMatch:v248 fieldRegex:v249];

  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v94 TPPBPolicyKeyViewMappingWithView:v251 matchingRule:v250];

  v282[16] = v252;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v89 fieldMatch:v253 fieldRegex:v254];

  NSString v256 = String._bridgeToObjectiveC()();
  id v257 = [v94 TPPBPolicyKeyViewMappingWithView:v256 matchingRule:v255];

  v282[17] = v257;
  uint64_t v258 = swift_allocObject(v283, 56LL, 7LL);
  *(_OWORD *)(v258 + 16) = xmmword_1001DE740;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v89 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v258 + 32) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v89 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v258 + 40) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v89 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v258 + 48) = v267;
  specialized Array._endMutation()(v268);
  Class v269 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v258);
  id v270 = [v89 orMatch:v269];

  NSString v271 = String._bridgeToObjectiveC()();
  id v272 = [v94 TPPBPolicyKeyViewMappingWithView:v271 matchingRule:v270];

  v282[18] = v272;
  id v273 = [v89 trueMatch];
  NSString v274 = String._bridgeToObjectiveC()();
  id v275 = [v94 TPPBPolicyKeyViewMappingWithView:v274 matchingRule:v273];

  v282[19] = v275;
  specialized Array._endMutation()(v276);
  id v277 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 5LL,  v281,  v280,  v279,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v282,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_1000179BC()
{
  return 0xD000000000000A70LL;
}

id sub_1000179D8()
{
  uint64_t v283 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v283, 96LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7C0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  specialized Array._endMutation()(v26);
  uint64_t v281 = v0;
  uint64_t v27 = swift_allocObject(v283, 144LL, 7LL);
  *(_OWORD *)(v27 + 16) = xmmword_1001DE7B0;
  NSString v28 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  NSString v30 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v31 = [v30 TPPBPolicyCategoriesByViewWithView:v28 categories:isa];

  *(void *)(v27 + 32) = v31;
  NSString v32 = String._bridgeToObjectiveC()();
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  id v34 = [v30 TPPBPolicyCategoriesByViewWithView:v32 categories:v33];

  *(void *)(v27 + 40) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v30 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v27 + 48) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v30 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v27 + 56) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v30 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v27 + 64) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v30 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v27 + 72) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v30 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v27 + 80) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v30 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v27 + 88) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v30 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v27 + 96) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v30 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v27 + 104) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v30 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v27 + 112) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v30 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v27 + 120) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v30 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v27 + 128) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v30 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v27 + 136) = v70;
  specialized Array._endMutation()(v71);
  uint64_t v280 = v27;
  uint64_t v72 = swift_allocObject(v283, 64LL, 7LL);
  *(_OWORD *)(v72 + 16) = xmmword_1001DE770;
  NSString v73 = String._bridgeToObjectiveC()();
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  NSString v75 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v76 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v73 introducers:v74];

  *(void *)(v72 + 32) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v77 introducers:v78];

  *(void *)(v72 + 40) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v80 introducers:v81];

  *(void *)(v72 + 48) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v75 TPPBPolicyIntroducersByCategoryWithCategory:v83 introducers:v84];

  *(void *)(v72 + 56) = v85;
  specialized Array._endMutation()(v86);
  uint64_t v279 = v72;
  uint64_t v87 = swift_allocObject(v283, 160LL, 7LL);
  *(_OWORD *)(v87 + 16) = xmmword_1001DE780;
  NSString v88 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v89 = String._bridgeToObjectiveC()();
  NSString v90 = String._bridgeToObjectiveC()();
  id v91 = [v88 fieldMatch:v89 fieldRegex:v90];

  NSString v92 = String._bridgeToObjectiveC()();
  NSString v93 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v94 = [v93 TPPBPolicyKeyViewMappingWithView:v92 matchingRule:v91];

  *(void *)(v87 + 32) = v94;
  NSString v95 = String._bridgeToObjectiveC()();
  NSString v96 = String._bridgeToObjectiveC()();
  id v97 = [v88 fieldMatch:v95 fieldRegex:v96];

  NSString v98 = String._bridgeToObjectiveC()();
  id v99 = [v93 TPPBPolicyKeyViewMappingWithView:v98 matchingRule:v97];

  *(void *)(v87 + 40) = v99;
  NSString v100 = String._bridgeToObjectiveC()();
  NSString v101 = String._bridgeToObjectiveC()();
  id v102 = [v88 fieldMatch:v100 fieldRegex:v101];

  NSString v103 = String._bridgeToObjectiveC()();
  id v104 = [v93 TPPBPolicyKeyViewMappingWithView:v103 matchingRule:v102];

  *(void *)(v87 + 48) = v104;
  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [v88 fieldMatch:v105 fieldRegex:v106];

  NSString v108 = String._bridgeToObjectiveC()();
  id v109 = [v93 TPPBPolicyKeyViewMappingWithView:v108 matchingRule:v107];

  *(void *)(v87 + 56) = v109;
  NSString v110 = String._bridgeToObjectiveC()();
  NSString v111 = String._bridgeToObjectiveC()();
  id v112 = [v88 fieldMatch:v110 fieldRegex:v111];

  NSString v113 = String._bridgeToObjectiveC()();
  id v114 = [v93 TPPBPolicyKeyViewMappingWithView:v113 matchingRule:v112];

  *(void *)(v87 + 64) = v114;
  NSString v115 = String._bridgeToObjectiveC()();
  NSString v116 = String._bridgeToObjectiveC()();
  id v117 = [v88 fieldMatch:v115 fieldRegex:v116];

  NSString v118 = String._bridgeToObjectiveC()();
  id v119 = [v93 TPPBPolicyKeyViewMappingWithView:v118 matchingRule:v117];

  *(void *)(v87 + 72) = v119;
  NSString v120 = String._bridgeToObjectiveC()();
  NSString v121 = String._bridgeToObjectiveC()();
  id v122 = [v88 fieldMatch:v120 fieldRegex:v121];

  NSString v123 = String._bridgeToObjectiveC()();
  id v124 = [v93 TPPBPolicyKeyViewMappingWithView:v123 matchingRule:v122];

  *(void *)(v87 + 80) = v124;
  uint64_t v125 = swift_allocObject(v283, 56LL, 7LL);
  *(_OWORD *)(v125 + 16) = xmmword_1001DE740;
  NSString v126 = String._bridgeToObjectiveC()();
  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v88 fieldMatch:v126 fieldRegex:v127];

  *(void *)(v125 + 32) = v128;
  NSString v129 = String._bridgeToObjectiveC()();
  NSString v130 = String._bridgeToObjectiveC()();
  id v131 = [v88 fieldMatch:v129 fieldRegex:v130];

  *(void *)(v125 + 40) = v131;
  NSString v132 = String._bridgeToObjectiveC()();
  NSString v133 = String._bridgeToObjectiveC()();
  id v134 = [v88 fieldMatch:v132 fieldRegex:v133];

  *(void *)(v125 + 48) = v134;
  specialized Array._endMutation()(v135);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v136 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v125);
  id v137 = [v88 orMatch:v136];

  NSString v138 = String._bridgeToObjectiveC()();
  id v139 = [v93 TPPBPolicyKeyViewMappingWithView:v138 matchingRule:v137];

  v282 = (void *)v87;
  *(void *)(v87 + 88) = v139;
  NSString v140 = String._bridgeToObjectiveC()();
  NSString v141 = String._bridgeToObjectiveC()();
  id v142 = [v88 fieldMatch:v140 fieldRegex:v141];

  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v93 TPPBPolicyKeyViewMappingWithView:v143 matchingRule:v142];

  *(void *)(v87 + 96) = v144;
  uint64_t v145 = swift_allocObject(v283, 64LL, 7LL);
  *(_OWORD *)(v145 + 16) = xmmword_1001DE770;
  uint64_t v146 = swift_allocObject(v283, 48LL, 7LL);
  *(_OWORD *)(v146 + 16) = xmmword_1001DE790;
  NSString v147 = String._bridgeToObjectiveC()();
  NSString v148 = String._bridgeToObjectiveC()();
  id v149 = [v88 fieldMatch:v147 fieldRegex:v148];

  *(void *)(v146 + 32) = v149;
  NSString v150 = String._bridgeToObjectiveC()();
  NSString v151 = String._bridgeToObjectiveC()();
  id v152 = [v88 fieldMatch:v150 fieldRegex:v151];

  *(void *)(v146 + 40) = v152;
  specialized Array._endMutation()(v153);
  Class v154 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v146);
  id v155 = [v88 andMatch:v154];

  *(void *)(v145 + 32) = v155;
  uint64_t v156 = swift_allocObject(v283, 48LL, 7LL);
  *(_OWORD *)(v156 + 16) = xmmword_1001DE790;
  NSString v157 = String._bridgeToObjectiveC()();
  NSString v158 = String._bridgeToObjectiveC()();
  id v159 = [v88 fieldMatch:v157 fieldRegex:v158];

  *(void *)(v156 + 32) = v159;
  NSString v160 = String._bridgeToObjectiveC()();
  NSString v161 = String._bridgeToObjectiveC()();
  id v162 = [v88 fieldMatch:v160 fieldRegex:v161];

  *(void *)(v156 + 40) = v162;
  specialized Array._endMutation()(v163);
  Class v164 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v156);
  id v165 = [v88 andMatch:v164];

  *(void *)(v145 + 40) = v165;
  NSString v166 = String._bridgeToObjectiveC()();
  NSString v167 = String._bridgeToObjectiveC()();
  id v168 = [v88 fieldMatch:v166 fieldRegex:v167];

  *(void *)(v145 + 48) = v168;
  NSString v169 = String._bridgeToObjectiveC()();
  NSString v170 = String._bridgeToObjectiveC()();
  id v171 = [v88 fieldMatch:v169 fieldRegex:v170];

  *(void *)(v145 + 56) = v171;
  specialized Array._endMutation()(v172);
  Class v173 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v145);
  id v174 = [v88 orMatch:v173];

  NSString v175 = String._bridgeToObjectiveC()();
  id v176 = [v93 TPPBPolicyKeyViewMappingWithView:v175 matchingRule:v174];

  v282[13] = v176;
  uint64_t v177 = swift_allocObject(v283, 48LL, 7LL);
  *(_OWORD *)(v177 + 16) = xmmword_1001DE790;
  NSString v178 = String._bridgeToObjectiveC()();
  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v88 fieldMatch:v178 fieldRegex:v179];

  *(void *)(v177 + 32) = v180;
  uint64_t v181 = swift_allocObject(v283, 56LL, 7LL);
  *(_OWORD *)(v181 + 16) = xmmword_1001DE740;
  NSString v182 = String._bridgeToObjectiveC()();
  NSString v183 = String._bridgeToObjectiveC()();
  id v184 = [v88 fieldMatch:v182 fieldRegex:v183];

  *(void *)(v181 + 32) = v184;
  NSString v185 = String._bridgeToObjectiveC()();
  NSString v186 = String._bridgeToObjectiveC()();
  id v187 = [v88 fieldMatch:v185 fieldRegex:v186];

  *(void *)(v181 + 40) = v187;
  NSString v188 = String._bridgeToObjectiveC()();
  NSString v189 = String._bridgeToObjectiveC()();
  id v190 = [v88 fieldMatch:v188 fieldRegex:v189];

  *(void *)(v181 + 48) = v190;
  specialized Array._endMutation()(v191);
  Class v192 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v181);
  id v193 = [v88 andMatch:v192];

  *(void *)(v177 + 40) = v193;
  specialized Array._endMutation()(v194);
  uint64_t v195 = v177;
  Class v196 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v195);
  id v197 = [v88 orMatch:v196];

  NSString v198 = String._bridgeToObjectiveC()();
  id v199 = [v93 TPPBPolicyKeyViewMappingWithView:v198 matchingRule:v197];

  v282[14] = v199;
  uint64_t v200 = swift_allocObject(v283, 144LL, 7LL);
  *(_OWORD *)(v200 + 16) = xmmword_1001DE7B0;
  NSString v201 = String._bridgeToObjectiveC()();
  NSString v202 = String._bridgeToObjectiveC()();
  id v203 = [v88 fieldMatch:v201 fieldRegex:v202];

  *(void *)(v200 + 32) = v203;
  NSString v204 = String._bridgeToObjectiveC()();
  NSString v205 = String._bridgeToObjectiveC()();
  id v206 = [v88 fieldMatch:v204 fieldRegex:v205];

  *(void *)(v200 + 40) = v206;
  NSString v207 = String._bridgeToObjectiveC()();
  NSString v208 = String._bridgeToObjectiveC()();
  id v209 = [v88 fieldMatch:v207 fieldRegex:v208];

  *(void *)(v200 + 48) = v209;
  NSString v210 = String._bridgeToObjectiveC()();
  NSString v211 = String._bridgeToObjectiveC()();
  id v212 = [v88 fieldMatch:v210 fieldRegex:v211];

  *(void *)(v200 + 56) = v212;
  NSString v213 = String._bridgeToObjectiveC()();
  NSString v214 = String._bridgeToObjectiveC()();
  id v215 = [v88 fieldMatch:v213 fieldRegex:v214];

  *(void *)(v200 + 64) = v215;
  NSString v216 = String._bridgeToObjectiveC()();
  NSString v217 = String._bridgeToObjectiveC()();
  id v218 = [v88 fieldMatch:v216 fieldRegex:v217];

  *(void *)(v200 + 72) = v218;
  NSString v219 = String._bridgeToObjectiveC()();
  NSString v220 = String._bridgeToObjectiveC()();
  id v221 = [v88 fieldMatch:v219 fieldRegex:v220];

  *(void *)(v200 + 80) = v221;
  NSString v222 = String._bridgeToObjectiveC()();
  NSString v223 = String._bridgeToObjectiveC()();
  id v224 = [v88 fieldMatch:v222 fieldRegex:v223];

  *(void *)(v200 + 88) = v224;
  NSString v225 = String._bridgeToObjectiveC()();
  NSString v226 = String._bridgeToObjectiveC()();
  id v227 = [v88 fieldMatch:v225 fieldRegex:v226];

  *(void *)(v200 + 96) = v227;
  NSString v228 = String._bridgeToObjectiveC()();
  NSString v229 = String._bridgeToObjectiveC()();
  id v230 = [v88 fieldMatch:v228 fieldRegex:v229];

  *(void *)(v200 + 104) = v230;
  NSString v231 = String._bridgeToObjectiveC()();
  NSString v232 = String._bridgeToObjectiveC()();
  id v233 = [v88 fieldMatch:v231 fieldRegex:v232];

  *(void *)(v200 + 112) = v233;
  NSString v234 = String._bridgeToObjectiveC()();
  NSString v235 = String._bridgeToObjectiveC()();
  id v236 = [v88 fieldMatch:v234 fieldRegex:v235];

  *(void *)(v200 + 120) = v236;
  NSString v237 = String._bridgeToObjectiveC()();
  NSString v238 = String._bridgeToObjectiveC()();
  id v239 = [v88 fieldMatch:v237 fieldRegex:v238];

  *(void *)(v200 + 128) = v239;
  NSString v240 = String._bridgeToObjectiveC()();
  NSString v241 = String._bridgeToObjectiveC()();
  id v242 = [v88 fieldMatch:v240 fieldRegex:v241];

  *(void *)(v200 + 136) = v242;
  specialized Array._endMutation()(v243);
  Class v244 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v200);
  id v245 = [v88 orMatch:v244];

  NSString v246 = String._bridgeToObjectiveC()();
  id v247 = [v93 TPPBPolicyKeyViewMappingWithView:v246 matchingRule:v245];

  v282[15] = v247;
  NSString v248 = String._bridgeToObjectiveC()();
  NSString v249 = String._bridgeToObjectiveC()();
  id v250 = [v88 fieldMatch:v248 fieldRegex:v249];

  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v93 TPPBPolicyKeyViewMappingWithView:v251 matchingRule:v250];

  v282[16] = v252;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v88 fieldMatch:v253 fieldRegex:v254];

  NSString v256 = String._bridgeToObjectiveC()();
  id v257 = [v93 TPPBPolicyKeyViewMappingWithView:v256 matchingRule:v255];

  v282[17] = v257;
  uint64_t v258 = swift_allocObject(v283, 56LL, 7LL);
  *(_OWORD *)(v258 + 16) = xmmword_1001DE740;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v88 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v258 + 32) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v88 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v258 + 40) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v88 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v258 + 48) = v267;
  specialized Array._endMutation()(v268);
  Class v269 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v258);
  id v270 = [v88 orMatch:v269];

  NSString v271 = String._bridgeToObjectiveC()();
  id v272 = [v93 TPPBPolicyKeyViewMappingWithView:v271 matchingRule:v270];

  v282[18] = v272;
  id v273 = [v88 trueMatch];
  NSString v274 = String._bridgeToObjectiveC()();
  id v275 = [v93 TPPBPolicyKeyViewMappingWithView:v274 matchingRule:v273];

  v282[19] = v275;
  specialized Array._endMutation()(v276);
  id v277 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 6LL,  v281,  v280,  v279,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v282,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_100019C68()
{
  return 0xD000000000000A90LL;
}

id sub_100019C84()
{
  uint64_t v0 = sub_100007578(&qword_1002515D8);
  uint64_t v1 = swift_allocObject(v0, 96LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001DE7C0;
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v5 = [v4 TPPBPolicyModelToCategoryWithPrefix:v2 category:v3];

  *(void *)(v1 + 32) = v5;
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v4 TPPBPolicyModelToCategoryWithPrefix:v6 category:v7];

  *(void *)(v1 + 40) = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v4 TPPBPolicyModelToCategoryWithPrefix:v9 category:v10];

  *(void *)(v1 + 48) = v11;
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v4 TPPBPolicyModelToCategoryWithPrefix:v12 category:v13];

  *(void *)(v1 + 56) = v14;
  NSString v15 = String._bridgeToObjectiveC()();
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v4 TPPBPolicyModelToCategoryWithPrefix:v15 category:v16];

  *(void *)(v1 + 64) = v17;
  NSString v18 = String._bridgeToObjectiveC()();
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v4 TPPBPolicyModelToCategoryWithPrefix:v18 category:v19];

  *(void *)(v1 + 72) = v20;
  NSString v21 = String._bridgeToObjectiveC()();
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v4 TPPBPolicyModelToCategoryWithPrefix:v21 category:v22];

  *(void *)(v1 + 80) = v23;
  NSString v24 = String._bridgeToObjectiveC()();
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v4 TPPBPolicyModelToCategoryWithPrefix:v24 category:v25];

  *(void *)(v1 + 88) = v26;
  specialized Array._endMutation()(v27);
  uint64_t v288 = v1;
  uint64_t v28 = v0;
  uint64_t v29 = swift_allocObject(v0, 152LL, 7LL);
  *(_OWORD *)(v29 + 16) = xmmword_1001DE760;
  NSString v30 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  NSString v32 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v33 = [v32 TPPBPolicyCategoriesByViewWithView:v30 categories:isa];

  *(void *)(v29 + 32) = v33;
  NSString v34 = String._bridgeToObjectiveC()();
  Class v35 = Array._bridgeToObjectiveC()().super.isa;
  id v36 = [v32 TPPBPolicyCategoriesByViewWithView:v34 categories:v35];

  *(void *)(v29 + 40) = v36;
  NSString v37 = String._bridgeToObjectiveC()();
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  id v39 = [v32 TPPBPolicyCategoriesByViewWithView:v37 categories:v38];

  *(void *)(v29 + 48) = v39;
  NSString v40 = String._bridgeToObjectiveC()();
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  id v42 = [v32 TPPBPolicyCategoriesByViewWithView:v40 categories:v41];

  *(void *)(v29 + 56) = v42;
  NSString v43 = String._bridgeToObjectiveC()();
  Class v44 = Array._bridgeToObjectiveC()().super.isa;
  id v45 = [v32 TPPBPolicyCategoriesByViewWithView:v43 categories:v44];

  *(void *)(v29 + 64) = v45;
  NSString v46 = String._bridgeToObjectiveC()();
  Class v47 = Array._bridgeToObjectiveC()().super.isa;
  id v48 = [v32 TPPBPolicyCategoriesByViewWithView:v46 categories:v47];

  *(void *)(v29 + 72) = v48;
  NSString v49 = String._bridgeToObjectiveC()();
  Class v50 = Array._bridgeToObjectiveC()().super.isa;
  id v51 = [v32 TPPBPolicyCategoriesByViewWithView:v49 categories:v50];

  *(void *)(v29 + 80) = v51;
  NSString v52 = String._bridgeToObjectiveC()();
  Class v53 = Array._bridgeToObjectiveC()().super.isa;
  id v54 = [v32 TPPBPolicyCategoriesByViewWithView:v52 categories:v53];

  *(void *)(v29 + 88) = v54;
  NSString v55 = String._bridgeToObjectiveC()();
  Class v56 = Array._bridgeToObjectiveC()().super.isa;
  id v57 = [v32 TPPBPolicyCategoriesByViewWithView:v55 categories:v56];

  *(void *)(v29 + 96) = v57;
  NSString v58 = String._bridgeToObjectiveC()();
  Class v59 = Array._bridgeToObjectiveC()().super.isa;
  id v60 = [v32 TPPBPolicyCategoriesByViewWithView:v58 categories:v59];

  *(void *)(v29 + 104) = v60;
  NSString v61 = String._bridgeToObjectiveC()();
  Class v62 = Array._bridgeToObjectiveC()().super.isa;
  id v63 = [v32 TPPBPolicyCategoriesByViewWithView:v61 categories:v62];

  *(void *)(v29 + 112) = v63;
  NSString v64 = String._bridgeToObjectiveC()();
  Class v65 = Array._bridgeToObjectiveC()().super.isa;
  id v66 = [v32 TPPBPolicyCategoriesByViewWithView:v64 categories:v65];

  *(void *)(v29 + 120) = v66;
  NSString v67 = String._bridgeToObjectiveC()();
  Class v68 = Array._bridgeToObjectiveC()().super.isa;
  id v69 = [v32 TPPBPolicyCategoriesByViewWithView:v67 categories:v68];

  *(void *)(v29 + 128) = v69;
  NSString v70 = String._bridgeToObjectiveC()();
  Class v71 = Array._bridgeToObjectiveC()().super.isa;
  id v72 = [v32 TPPBPolicyCategoriesByViewWithView:v70 categories:v71];

  *(void *)(v29 + 136) = v72;
  NSString v73 = String._bridgeToObjectiveC()();
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  id v75 = [v32 TPPBPolicyCategoriesByViewWithView:v73 categories:v74];

  *(void *)(v29 + 144) = v75;
  specialized Array._endMutation()(v76);
  uint64_t v287 = v29;
  uint64_t v77 = swift_allocObject(v28, 64LL, 7LL);
  *(_OWORD *)(v77 + 16) = xmmword_1001DE770;
  NSString v78 = String._bridgeToObjectiveC()();
  Class v79 = Array._bridgeToObjectiveC()().super.isa;
  NSString v80 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v81 = [v80 TPPBPolicyIntroducersByCategoryWithCategory:v78 introducers:v79];

  *(void *)(v77 + 32) = v81;
  NSString v82 = String._bridgeToObjectiveC()();
  Class v83 = Array._bridgeToObjectiveC()().super.isa;
  id v84 = [v80 TPPBPolicyIntroducersByCategoryWithCategory:v82 introducers:v83];

  *(void *)(v77 + 40) = v84;
  NSString v85 = String._bridgeToObjectiveC()();
  Class v86 = Array._bridgeToObjectiveC()().super.isa;
  id v87 = [v80 TPPBPolicyIntroducersByCategoryWithCategory:v85 introducers:v86];

  *(void *)(v77 + 48) = v87;
  NSString v88 = String._bridgeToObjectiveC()();
  Class v89 = Array._bridgeToObjectiveC()().super.isa;
  id v90 = [v80 TPPBPolicyIntroducersByCategoryWithCategory:v88 introducers:v89];

  *(void *)(v77 + 56) = v90;
  specialized Array._endMutation()(v91);
  uint64_t v286 = v77;
  uint64_t v92 = swift_allocObject(v28, 160LL, 7LL);
  *(_OWORD *)(v92 + 16) = xmmword_1001DE780;
  NSString v93 = (void *)v92;
  id v94 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v95 = String._bridgeToObjectiveC()();
  NSString v96 = String._bridgeToObjectiveC()();
  id v97 = [v94 fieldMatch:v95 fieldRegex:v96];

  NSString v98 = String._bridgeToObjectiveC()();
  id v99 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v100 = [v99 TPPBPolicyKeyViewMappingWithView:v98 matchingRule:v97];

  v93[4] = v100;
  NSString v101 = String._bridgeToObjectiveC()();
  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = [v94 fieldMatch:v101 fieldRegex:v102];

  NSString v104 = String._bridgeToObjectiveC()();
  id v105 = [v99 TPPBPolicyKeyViewMappingWithView:v104 matchingRule:v103];

  v93[5] = v105;
  NSString v106 = String._bridgeToObjectiveC()();
  NSString v107 = String._bridgeToObjectiveC()();
  id v108 = [v94 fieldMatch:v106 fieldRegex:v107];

  NSString v109 = String._bridgeToObjectiveC()();
  id v110 = [v99 TPPBPolicyKeyViewMappingWithView:v109 matchingRule:v108];

  v93[6] = v110;
  NSString v111 = String._bridgeToObjectiveC()();
  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v94 fieldMatch:v111 fieldRegex:v112];

  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v99 TPPBPolicyKeyViewMappingWithView:v114 matchingRule:v113];

  v93[7] = v115;
  NSString v116 = String._bridgeToObjectiveC()();
  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v94 fieldMatch:v116 fieldRegex:v117];

  NSString v119 = String._bridgeToObjectiveC()();
  id v120 = [v99 TPPBPolicyKeyViewMappingWithView:v119 matchingRule:v118];

  v93[8] = v120;
  NSString v121 = String._bridgeToObjectiveC()();
  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v94 fieldMatch:v121 fieldRegex:v122];

  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v99 TPPBPolicyKeyViewMappingWithView:v124 matchingRule:v123];

  v93[9] = v125;
  NSString v126 = String._bridgeToObjectiveC()();
  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v94 fieldMatch:v126 fieldRegex:v127];

  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v99 TPPBPolicyKeyViewMappingWithView:v129 matchingRule:v128];

  v93[10] = v130;
  uint64_t v131 = swift_allocObject(v28, 56LL, 7LL);
  *(_OWORD *)(v131 + 16) = xmmword_1001DE740;
  NSString v132 = String._bridgeToObjectiveC()();
  NSString v133 = String._bridgeToObjectiveC()();
  id v134 = [v94 fieldMatch:v132 fieldRegex:v133];

  *(void *)(v131 + 32) = v134;
  NSString v135 = String._bridgeToObjectiveC()();
  NSString v136 = String._bridgeToObjectiveC()();
  id v137 = [v94 fieldMatch:v135 fieldRegex:v136];

  *(void *)(v131 + 40) = v137;
  NSString v138 = String._bridgeToObjectiveC()();
  NSString v139 = String._bridgeToObjectiveC()();
  id v140 = [v94 fieldMatch:v138 fieldRegex:v139];

  *(void *)(v131 + 48) = v140;
  specialized Array._endMutation()(v141);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v142 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v131);
  id v143 = [v94 orMatch:v142];

  NSString v144 = String._bridgeToObjectiveC()();
  id v145 = [v99 TPPBPolicyKeyViewMappingWithView:v144 matchingRule:v143];

  v289 = v93;
  v93[11] = v145;
  NSString v146 = String._bridgeToObjectiveC()();
  NSString v147 = String._bridgeToObjectiveC()();
  id v148 = [v94 fieldMatch:v146 fieldRegex:v147];

  NSString v149 = String._bridgeToObjectiveC()();
  id v150 = [v99 TPPBPolicyKeyViewMappingWithView:v149 matchingRule:v148];

  v93[12] = v150;
  uint64_t v151 = swift_allocObject(v28, 64LL, 7LL);
  *(_OWORD *)(v151 + 16) = xmmword_1001DE770;
  uint64_t v152 = swift_allocObject(v28, 48LL, 7LL);
  *(_OWORD *)(v152 + 16) = xmmword_1001DE790;
  NSString v153 = String._bridgeToObjectiveC()();
  NSString v154 = String._bridgeToObjectiveC()();
  id v155 = [v94 fieldMatch:v153 fieldRegex:v154];

  *(void *)(v152 + 32) = v155;
  NSString v156 = String._bridgeToObjectiveC()();
  NSString v157 = String._bridgeToObjectiveC()();
  id v158 = [v94 fieldMatch:v156 fieldRegex:v157];

  *(void *)(v152 + 40) = v158;
  specialized Array._endMutation()(v159);
  Class v160 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v152);
  id v161 = [v94 andMatch:v160];

  *(void *)(v151 + 32) = v161;
  uint64_t v162 = swift_allocObject(v28, 48LL, 7LL);
  *(_OWORD *)(v162 + 16) = xmmword_1001DE790;
  NSString v163 = String._bridgeToObjectiveC()();
  NSString v164 = String._bridgeToObjectiveC()();
  id v165 = [v94 fieldMatch:v163 fieldRegex:v164];

  *(void *)(v162 + 32) = v165;
  NSString v166 = String._bridgeToObjectiveC()();
  NSString v167 = String._bridgeToObjectiveC()();
  id v168 = [v94 fieldMatch:v166 fieldRegex:v167];

  *(void *)(v162 + 40) = v168;
  specialized Array._endMutation()(v169);
  Class v170 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v162);
  id v171 = [v94 andMatch:v170];

  *(void *)(v151 + 40) = v171;
  NSString v172 = String._bridgeToObjectiveC()();
  NSString v173 = String._bridgeToObjectiveC()();
  id v174 = [v94 fieldMatch:v172 fieldRegex:v173];

  *(void *)(v151 + 48) = v174;
  NSString v175 = String._bridgeToObjectiveC()();
  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v94 fieldMatch:v175 fieldRegex:v176];

  *(void *)(v151 + 56) = v177;
  specialized Array._endMutation()(v178);
  uint64_t v179 = v151;
  Class v180 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v179);
  id v181 = [v94 orMatch:v180];

  NSString v182 = String._bridgeToObjectiveC()();
  id v183 = [v99 TPPBPolicyKeyViewMappingWithView:v182 matchingRule:v181];

  v289[13] = v183;
  uint64_t v184 = swift_allocObject(v28, 48LL, 7LL);
  *(_OWORD *)(v184 + 16) = xmmword_1001DE790;
  NSString v185 = String._bridgeToObjectiveC()();
  NSString v186 = String._bridgeToObjectiveC()();
  id v187 = [v94 fieldMatch:v185 fieldRegex:v186];

  *(void *)(v184 + 32) = v187;
  uint64_t v188 = swift_allocObject(v28, 56LL, 7LL);
  *(_OWORD *)(v188 + 16) = xmmword_1001DE740;
  NSString v189 = String._bridgeToObjectiveC()();
  NSString v190 = String._bridgeToObjectiveC()();
  id v191 = [v94 fieldMatch:v189 fieldRegex:v190];

  *(void *)(v188 + 32) = v191;
  NSString v192 = String._bridgeToObjectiveC()();
  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v94 fieldMatch:v192 fieldRegex:v193];

  *(void *)(v188 + 40) = v194;
  NSString v195 = String._bridgeToObjectiveC()();
  NSString v196 = String._bridgeToObjectiveC()();
  id v197 = [v94 fieldMatch:v195 fieldRegex:v196];

  *(void *)(v188 + 48) = v197;
  specialized Array._endMutation()(v198);
  Class v199 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v188);
  id v200 = [v94 andMatch:v199];

  *(void *)(v184 + 40) = v200;
  specialized Array._endMutation()(v201);
  uint64_t v202 = v184;
  Class v203 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v202);
  id v204 = [v94 orMatch:v203];

  NSString v205 = String._bridgeToObjectiveC()();
  id v206 = [v99 TPPBPolicyKeyViewMappingWithView:v205 matchingRule:v204];

  v289[14] = v206;
  uint64_t v207 = swift_allocObject(v28, 144LL, 7LL);
  *(_OWORD *)(v207 + 16) = xmmword_1001DE7B0;
  NSString v208 = String._bridgeToObjectiveC()();
  NSString v209 = String._bridgeToObjectiveC()();
  id v210 = [v94 fieldMatch:v208 fieldRegex:v209];

  *(void *)(v207 + 32) = v210;
  NSString v211 = String._bridgeToObjectiveC()();
  NSString v212 = String._bridgeToObjectiveC()();
  id v213 = [v94 fieldMatch:v211 fieldRegex:v212];

  *(void *)(v207 + 40) = v213;
  NSString v214 = String._bridgeToObjectiveC()();
  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v94 fieldMatch:v214 fieldRegex:v215];

  *(void *)(v207 + 48) = v216;
  NSString v217 = String._bridgeToObjectiveC()();
  NSString v218 = String._bridgeToObjectiveC()();
  id v219 = [v94 fieldMatch:v217 fieldRegex:v218];

  *(void *)(v207 + 56) = v219;
  NSString v220 = String._bridgeToObjectiveC()();
  NSString v221 = String._bridgeToObjectiveC()();
  id v222 = [v94 fieldMatch:v220 fieldRegex:v221];

  *(void *)(v207 + 64) = v222;
  NSString v223 = String._bridgeToObjectiveC()();
  NSString v224 = String._bridgeToObjectiveC()();
  id v225 = [v94 fieldMatch:v223 fieldRegex:v224];

  *(void *)(v207 + 72) = v225;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v94 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v207 + 80) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v94 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v207 + 88) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v94 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v207 + 96) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v94 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v207 + 104) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v94 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v207 + 112) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v94 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v207 + 120) = v243;
  NSString v244 = String._bridgeToObjectiveC()();
  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v94 fieldMatch:v244 fieldRegex:v245];

  *(void *)(v207 + 128) = v246;
  NSString v247 = String._bridgeToObjectiveC()();
  NSString v248 = String._bridgeToObjectiveC()();
  id v249 = [v94 fieldMatch:v247 fieldRegex:v248];

  *(void *)(v207 + 136) = v249;
  specialized Array._endMutation()(v250);
  Class v251 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v207);
  id v252 = [v94 orMatch:v251];

  NSString v253 = String._bridgeToObjectiveC()();
  id v254 = [v99 TPPBPolicyKeyViewMappingWithView:v253 matchingRule:v252];

  v289[15] = v254;
  NSString v255 = String._bridgeToObjectiveC()();
  NSString v256 = String._bridgeToObjectiveC()();
  id v257 = [v94 fieldMatch:v255 fieldRegex:v256];

  NSString v258 = String._bridgeToObjectiveC()();
  id v259 = [v99 TPPBPolicyKeyViewMappingWithView:v258 matchingRule:v257];

  v289[16] = v259;
  NSString v260 = String._bridgeToObjectiveC()();
  NSString v261 = String._bridgeToObjectiveC()();
  id v262 = [v94 fieldMatch:v260 fieldRegex:v261];

  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v99 TPPBPolicyKeyViewMappingWithView:v263 matchingRule:v262];

  v289[17] = v264;
  uint64_t v265 = swift_allocObject(v28, 56LL, 7LL);
  *(_OWORD *)(v265 + 16) = xmmword_1001DE740;
  NSString v266 = String._bridgeToObjectiveC()();
  NSString v267 = String._bridgeToObjectiveC()();
  id v268 = [v94 fieldMatch:v266 fieldRegex:v267];

  *(void *)(v265 + 32) = v268;
  NSString v269 = String._bridgeToObjectiveC()();
  NSString v270 = String._bridgeToObjectiveC()();
  id v271 = [v94 fieldMatch:v269 fieldRegex:v270];

  *(void *)(v265 + 40) = v271;
  NSString v272 = String._bridgeToObjectiveC()();
  NSString v273 = String._bridgeToObjectiveC()();
  id v274 = [v94 fieldMatch:v272 fieldRegex:v273];

  *(void *)(v265 + 48) = v274;
  specialized Array._endMutation()(v275);
  Class v276 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v265);
  id v277 = [v94 orMatch:v276];

  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v99 TPPBPolicyKeyViewMappingWithView:v278 matchingRule:v277];

  v289[18] = v279;
  id v280 = [v94 trueMatch];
  NSString v281 = String._bridgeToObjectiveC()();
  id v282 = [v99 TPPBPolicyKeyViewMappingWithView:v281 matchingRule:v280];

  v289[19] = v282;
  specialized Array._endMutation()(v283);
  id v284 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 7LL,  v288,  v287,  v286,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v289,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_10001BF7C()
{
  return 0xD000000000000BC0LL;
}

id sub_10001BF98()
{
  uint64_t v307 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v307, 96LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7C0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  specialized Array._endMutation()(v26);
  uint64_t v306 = v0;
  uint64_t v27 = swift_allocObject(v307, 152LL, 7LL);
  *(_OWORD *)(v27 + 16) = xmmword_1001DE760;
  NSString v28 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  NSString v30 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v31 = [v30 TPPBPolicyCategoriesByViewWithView:v28 categories:isa];

  *(void *)(v27 + 32) = v31;
  NSString v32 = String._bridgeToObjectiveC()();
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  id v34 = [v30 TPPBPolicyCategoriesByViewWithView:v32 categories:v33];

  *(void *)(v27 + 40) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v30 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v27 + 48) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v30 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v27 + 56) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v30 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v27 + 64) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v30 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v27 + 72) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v30 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v27 + 80) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v30 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v27 + 88) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v30 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v27 + 96) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v30 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v27 + 104) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v30 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v27 + 112) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v30 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v27 + 120) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v30 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v27 + 128) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v30 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v27 + 136) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v30 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v27 + 144) = v73;
  specialized Array._endMutation()(v74);
  uint64_t v305 = v27;
  uint64_t v75 = swift_allocObject(v307, 64LL, 7LL);
  *(_OWORD *)(v75 + 16) = xmmword_1001DE770;
  NSString v76 = String._bridgeToObjectiveC()();
  Class v77 = Array._bridgeToObjectiveC()().super.isa;
  NSString v78 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v79 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v76 introducers:v77];

  *(void *)(v75 + 32) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v80 introducers:v81];

  *(void *)(v75 + 40) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v83 introducers:v84];

  *(void *)(v75 + 48) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v86 introducers:v87];

  *(void *)(v75 + 56) = v88;
  specialized Array._endMutation()(v89);
  uint64_t v304 = v75;
  uint64_t v90 = swift_allocObject(v307, 160LL, 7LL);
  *(_OWORD *)(v90 + 16) = xmmword_1001DE780;
  uint64_t v91 = (void *)v90;
  uint64_t v92 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v93 = String._bridgeToObjectiveC()();
  NSString v94 = String._bridgeToObjectiveC()();
  id v95 = [v92 fieldMatch:v93 fieldRegex:v94];

  NSString v96 = String._bridgeToObjectiveC()();
  id v97 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v98 = [v97 TPPBPolicyKeyViewMappingWithView:v96 matchingRule:v95];

  v91[4] = v98;
  NSString v99 = String._bridgeToObjectiveC()();
  NSString v100 = String._bridgeToObjectiveC()();
  id v101 = [v92 fieldMatch:v99 fieldRegex:v100];

  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = [v97 TPPBPolicyKeyViewMappingWithView:v102 matchingRule:v101];

  v91[5] = v103;
  NSString v104 = String._bridgeToObjectiveC()();
  NSString v105 = String._bridgeToObjectiveC()();
  id v106 = [v92 fieldMatch:v104 fieldRegex:v105];

  NSString v107 = String._bridgeToObjectiveC()();
  id v108 = [v97 TPPBPolicyKeyViewMappingWithView:v107 matchingRule:v106];

  v91[6] = v108;
  NSString v109 = String._bridgeToObjectiveC()();
  NSString v110 = String._bridgeToObjectiveC()();
  id v111 = [v92 fieldMatch:v109 fieldRegex:v110];

  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v97 TPPBPolicyKeyViewMappingWithView:v112 matchingRule:v111];

  v91[7] = v113;
  NSString v114 = String._bridgeToObjectiveC()();
  NSString v115 = String._bridgeToObjectiveC()();
  id v116 = [v92 fieldMatch:v114 fieldRegex:v115];

  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v97 TPPBPolicyKeyViewMappingWithView:v117 matchingRule:v116];

  v91[8] = v118;
  NSString v119 = String._bridgeToObjectiveC()();
  NSString v120 = String._bridgeToObjectiveC()();
  id v121 = [v92 fieldMatch:v119 fieldRegex:v120];

  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v97 TPPBPolicyKeyViewMappingWithView:v122 matchingRule:v121];

  v91[9] = v123;
  NSString v124 = String._bridgeToObjectiveC()();
  NSString v125 = String._bridgeToObjectiveC()();
  id v126 = [v92 fieldMatch:v124 fieldRegex:v125];

  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v97 TPPBPolicyKeyViewMappingWithView:v127 matchingRule:v126];

  v91[10] = v128;
  uint64_t v129 = swift_allocObject(v307, 56LL, 7LL);
  *(_OWORD *)(v129 + 16) = xmmword_1001DE740;
  NSString v130 = String._bridgeToObjectiveC()();
  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v92 fieldMatch:v130 fieldRegex:v131];

  *(void *)(v129 + 32) = v132;
  NSString v133 = String._bridgeToObjectiveC()();
  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v92 fieldMatch:v133 fieldRegex:v134];

  *(void *)(v129 + 40) = v135;
  NSString v136 = String._bridgeToObjectiveC()();
  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [v92 fieldMatch:v136 fieldRegex:v137];

  *(void *)(v129 + 48) = v138;
  specialized Array._endMutation()(v139);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v140 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v129);
  id v141 = [v92 orMatch:v140];

  NSString v142 = String._bridgeToObjectiveC()();
  id v143 = [v97 TPPBPolicyKeyViewMappingWithView:v142 matchingRule:v141];

  uint64_t v303 = (uint64_t)v91;
  v91[11] = v143;
  NSString v144 = String._bridgeToObjectiveC()();
  NSString v145 = String._bridgeToObjectiveC()();
  id v146 = [v92 fieldMatch:v144 fieldRegex:v145];

  NSString v147 = String._bridgeToObjectiveC()();
  id v148 = [v97 TPPBPolicyKeyViewMappingWithView:v147 matchingRule:v146];

  v91[12] = v148;
  uint64_t v149 = swift_allocObject(v307, 64LL, 7LL);
  *(_OWORD *)(v149 + 16) = xmmword_1001DE770;
  uint64_t v150 = swift_allocObject(v307, 48LL, 7LL);
  *(_OWORD *)(v150 + 16) = xmmword_1001DE790;
  NSString v151 = String._bridgeToObjectiveC()();
  NSString v152 = String._bridgeToObjectiveC()();
  id v153 = [v92 fieldMatch:v151 fieldRegex:v152];

  *(void *)(v150 + 32) = v153;
  NSString v154 = String._bridgeToObjectiveC()();
  NSString v155 = String._bridgeToObjectiveC()();
  id v156 = [v92 fieldMatch:v154 fieldRegex:v155];

  *(void *)(v150 + 40) = v156;
  specialized Array._endMutation()(v157);
  Class v158 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v150);
  id v159 = [v92 andMatch:v158];

  *(void *)(v149 + 32) = v159;
  uint64_t v160 = swift_allocObject(v307, 48LL, 7LL);
  *(_OWORD *)(v160 + 16) = xmmword_1001DE790;
  NSString v161 = String._bridgeToObjectiveC()();
  NSString v162 = String._bridgeToObjectiveC()();
  id v163 = [v92 fieldMatch:v161 fieldRegex:v162];

  *(void *)(v160 + 32) = v163;
  NSString v164 = String._bridgeToObjectiveC()();
  NSString v165 = String._bridgeToObjectiveC()();
  id v166 = [v92 fieldMatch:v164 fieldRegex:v165];

  *(void *)(v160 + 40) = v166;
  specialized Array._endMutation()(v167);
  Class v168 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v160);
  id v169 = [v92 andMatch:v168];

  *(void *)(v149 + 40) = v169;
  NSString v170 = String._bridgeToObjectiveC()();
  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v92 fieldMatch:v170 fieldRegex:v171];

  *(void *)(v149 + 48) = v172;
  NSString v173 = String._bridgeToObjectiveC()();
  NSString v174 = String._bridgeToObjectiveC()();
  id v175 = [v92 fieldMatch:v173 fieldRegex:v174];

  *(void *)(v149 + 56) = v175;
  specialized Array._endMutation()(v176);
  Class v177 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v149);
  id v178 = [v92 orMatch:v177];

  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v97 TPPBPolicyKeyViewMappingWithView:v179 matchingRule:v178];

  v91[13] = v180;
  uint64_t v181 = swift_allocObject(v307, 48LL, 7LL);
  *(_OWORD *)(v181 + 16) = xmmword_1001DE790;
  NSString v182 = String._bridgeToObjectiveC()();
  NSString v183 = String._bridgeToObjectiveC()();
  id v184 = [v92 fieldMatch:v182 fieldRegex:v183];

  *(void *)(v181 + 32) = v184;
  uint64_t v185 = swift_allocObject(v307, 56LL, 7LL);
  *(_OWORD *)(v185 + 16) = xmmword_1001DE740;
  NSString v186 = String._bridgeToObjectiveC()();
  NSString v187 = String._bridgeToObjectiveC()();
  id v188 = [v92 fieldMatch:v186 fieldRegex:v187];

  *(void *)(v185 + 32) = v188;
  NSString v189 = String._bridgeToObjectiveC()();
  NSString v190 = String._bridgeToObjectiveC()();
  id v191 = [v92 fieldMatch:v189 fieldRegex:v190];

  *(void *)(v185 + 40) = v191;
  NSString v192 = String._bridgeToObjectiveC()();
  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v92 fieldMatch:v192 fieldRegex:v193];

  *(void *)(v185 + 48) = v194;
  specialized Array._endMutation()(v195);
  Class v196 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v185);
  id v197 = [v92 andMatch:v196];

  *(void *)(v181 + 40) = v197;
  specialized Array._endMutation()(v198);
  uint64_t v199 = v181;
  Class v200 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v199);
  id v201 = [v92 orMatch:v200];

  NSString v202 = String._bridgeToObjectiveC()();
  id v203 = [v97 TPPBPolicyKeyViewMappingWithView:v202 matchingRule:v201];

  v91[14] = v203;
  uint64_t v204 = swift_allocObject(v307, 144LL, 7LL);
  *(_OWORD *)(v204 + 16) = xmmword_1001DE7B0;
  NSString v205 = String._bridgeToObjectiveC()();
  NSString v206 = String._bridgeToObjectiveC()();
  id v207 = [v92 fieldMatch:v205 fieldRegex:v206];

  *(void *)(v204 + 32) = v207;
  NSString v208 = String._bridgeToObjectiveC()();
  NSString v209 = String._bridgeToObjectiveC()();
  id v210 = [v92 fieldMatch:v208 fieldRegex:v209];

  *(void *)(v204 + 40) = v210;
  NSString v211 = String._bridgeToObjectiveC()();
  NSString v212 = String._bridgeToObjectiveC()();
  id v213 = [v92 fieldMatch:v211 fieldRegex:v212];

  *(void *)(v204 + 48) = v213;
  NSString v214 = String._bridgeToObjectiveC()();
  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v92 fieldMatch:v214 fieldRegex:v215];

  *(void *)(v204 + 56) = v216;
  NSString v217 = String._bridgeToObjectiveC()();
  NSString v218 = String._bridgeToObjectiveC()();
  id v219 = [v92 fieldMatch:v217 fieldRegex:v218];

  *(void *)(v204 + 64) = v219;
  NSString v220 = String._bridgeToObjectiveC()();
  NSString v221 = String._bridgeToObjectiveC()();
  id v222 = [v92 fieldMatch:v220 fieldRegex:v221];

  *(void *)(v204 + 72) = v222;
  NSString v223 = String._bridgeToObjectiveC()();
  NSString v224 = String._bridgeToObjectiveC()();
  id v225 = [v92 fieldMatch:v223 fieldRegex:v224];

  *(void *)(v204 + 80) = v225;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v92 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v204 + 88) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v92 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v204 + 96) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v92 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v204 + 104) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v92 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v204 + 112) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v92 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v204 + 120) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v92 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v204 + 128) = v243;
  NSString v244 = String._bridgeToObjectiveC()();
  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v92 fieldMatch:v244 fieldRegex:v245];

  *(void *)(v204 + 136) = v246;
  specialized Array._endMutation()(v247);
  Class v248 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v204);
  id v249 = [v92 orMatch:v248];

  NSString v250 = String._bridgeToObjectiveC()();
  id v251 = [v97 TPPBPolicyKeyViewMappingWithView:v250 matchingRule:v249];

  v91[15] = v251;
  uint64_t v252 = swift_allocObject(v307, 48LL, 7LL);
  *(_OWORD *)(v252 + 16) = xmmword_1001DE790;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v92 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v252 + 32) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v92 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v252 + 40) = v258;
  specialized Array._endMutation()(v259);
  Class v260 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v252);
  id v261 = [v92 orMatch:v260];

  NSString v262 = String._bridgeToObjectiveC()();
  id v263 = [v97 TPPBPolicyKeyViewMappingWithView:v262 matchingRule:v261];

  v91[16] = v263;
  uint64_t v264 = swift_allocObject(v307, 64LL, 7LL);
  *(_OWORD *)(v264 + 16) = xmmword_1001DE770;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v92 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v264 + 32) = v267;
  NSString v268 = String._bridgeToObjectiveC()();
  NSString v269 = String._bridgeToObjectiveC()();
  id v270 = [v92 fieldMatch:v268 fieldRegex:v269];

  *(void *)(v264 + 40) = v270;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v92 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v264 + 48) = v273;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v92 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v264 + 56) = v276;
  specialized Array._endMutation()(v277);
  Class v278 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v264);
  id v279 = [v92 orMatch:v278];

  NSString v280 = String._bridgeToObjectiveC()();
  id v281 = [v97 TPPBPolicyKeyViewMappingWithView:v280 matchingRule:v279];

  v91[17] = v281;
  uint64_t v282 = swift_allocObject(v307, 56LL, 7LL);
  *(_OWORD *)(v282 + 16) = xmmword_1001DE740;
  NSString v283 = String._bridgeToObjectiveC()();
  NSString v284 = String._bridgeToObjectiveC()();
  id v285 = [v92 fieldMatch:v283 fieldRegex:v284];

  *(void *)(v282 + 32) = v285;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v92 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v282 + 40) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v92 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v282 + 48) = v291;
  specialized Array._endMutation()(v292);
  Class v293 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v282);
  id v294 = [v92 orMatch:v293];

  NSString v295 = String._bridgeToObjectiveC()();
  id v296 = [v97 TPPBPolicyKeyViewMappingWithView:v295 matchingRule:v294];

  *(void *)(v303 + 144) = v296;
  id v297 = [v92 trueMatch];
  NSString v298 = String._bridgeToObjectiveC()();
  id v299 = [v97 TPPBPolicyKeyViewMappingWithView:v298 matchingRule:v297];

  *(void *)(v303 + 152) = v299;
  specialized Array._endMutation()(v300);
  id v301 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 8LL,  v306,  v305,  v304,  (uint64_t)_swiftEmptyArrayStorage,  v303,  (uint64_t)&off_10022FBD8,  (uint64_t)&off_10022FC48,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_10001E528()
{
  return 0xD000000000000C30LL;
}

id sub_10001E544()
{
  uint64_t v310 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v310, 96LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7C0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  specialized Array._endMutation()(v26);
  uint64_t v308 = v0;
  uint64_t v27 = swift_allocObject(v310, 152LL, 7LL);
  *(_OWORD *)(v27 + 16) = xmmword_1001DE760;
  NSString v28 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  NSString v30 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v31 = [v30 TPPBPolicyCategoriesByViewWithView:v28 categories:isa];

  *(void *)(v27 + 32) = v31;
  NSString v32 = String._bridgeToObjectiveC()();
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  id v34 = [v30 TPPBPolicyCategoriesByViewWithView:v32 categories:v33];

  *(void *)(v27 + 40) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v30 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v27 + 48) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v30 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v27 + 56) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v30 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v27 + 64) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v30 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v27 + 72) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v30 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v27 + 80) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v30 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v27 + 88) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v30 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v27 + 96) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v30 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v27 + 104) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v30 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v27 + 112) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v30 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v27 + 120) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v30 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v27 + 128) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v30 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v27 + 136) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v30 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v27 + 144) = v73;
  specialized Array._endMutation()(v74);
  uint64_t v307 = v27;
  uint64_t v75 = swift_allocObject(v310, 64LL, 7LL);
  *(_OWORD *)(v75 + 16) = xmmword_1001DE770;
  NSString v76 = String._bridgeToObjectiveC()();
  Class v77 = Array._bridgeToObjectiveC()().super.isa;
  NSString v78 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v79 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v76 introducers:v77];

  *(void *)(v75 + 32) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v80 introducers:v81];

  *(void *)(v75 + 40) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v83 introducers:v84];

  *(void *)(v75 + 48) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v78 TPPBPolicyIntroducersByCategoryWithCategory:v86 introducers:v87];

  *(void *)(v75 + 56) = v88;
  specialized Array._endMutation()(v89);
  uint64_t v306 = v75;
  uint64_t v90 = swift_allocObject(v310, 160LL, 7LL);
  *(_OWORD *)(v90 + 16) = xmmword_1001DE780;
  uint64_t v91 = (void *)v90;
  uint64_t v92 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v93 = String._bridgeToObjectiveC()();
  NSString v94 = String._bridgeToObjectiveC()();
  id v95 = [v92 fieldMatch:v93 fieldRegex:v94];

  NSString v96 = String._bridgeToObjectiveC()();
  id v97 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v98 = [v97 TPPBPolicyKeyViewMappingWithView:v96 matchingRule:v95];

  v91[4] = v98;
  NSString v99 = String._bridgeToObjectiveC()();
  NSString v100 = String._bridgeToObjectiveC()();
  id v101 = [v92 fieldMatch:v99 fieldRegex:v100];

  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = [v97 TPPBPolicyKeyViewMappingWithView:v102 matchingRule:v101];

  v91[5] = v103;
  NSString v104 = String._bridgeToObjectiveC()();
  NSString v105 = String._bridgeToObjectiveC()();
  id v106 = [v92 fieldMatch:v104 fieldRegex:v105];

  NSString v107 = String._bridgeToObjectiveC()();
  id v108 = [v97 TPPBPolicyKeyViewMappingWithView:v107 matchingRule:v106];

  v91[6] = v108;
  NSString v109 = String._bridgeToObjectiveC()();
  NSString v110 = String._bridgeToObjectiveC()();
  id v111 = [v92 fieldMatch:v109 fieldRegex:v110];

  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v97 TPPBPolicyKeyViewMappingWithView:v112 matchingRule:v111];

  v91[7] = v113;
  NSString v114 = String._bridgeToObjectiveC()();
  NSString v115 = String._bridgeToObjectiveC()();
  id v116 = [v92 fieldMatch:v114 fieldRegex:v115];

  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v97 TPPBPolicyKeyViewMappingWithView:v117 matchingRule:v116];

  v91[8] = v118;
  NSString v119 = String._bridgeToObjectiveC()();
  NSString v120 = String._bridgeToObjectiveC()();
  id v121 = [v92 fieldMatch:v119 fieldRegex:v120];

  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v97 TPPBPolicyKeyViewMappingWithView:v122 matchingRule:v121];

  v91[9] = v123;
  NSString v124 = String._bridgeToObjectiveC()();
  NSString v125 = String._bridgeToObjectiveC()();
  id v126 = [v92 fieldMatch:v124 fieldRegex:v125];

  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v97 TPPBPolicyKeyViewMappingWithView:v127 matchingRule:v126];

  v91[10] = v128;
  uint64_t v129 = swift_allocObject(v310, 56LL, 7LL);
  *(_OWORD *)(v129 + 16) = xmmword_1001DE740;
  NSString v130 = String._bridgeToObjectiveC()();
  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v92 fieldMatch:v130 fieldRegex:v131];

  *(void *)(v129 + 32) = v132;
  NSString v133 = String._bridgeToObjectiveC()();
  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v92 fieldMatch:v133 fieldRegex:v134];

  *(void *)(v129 + 40) = v135;
  NSString v136 = String._bridgeToObjectiveC()();
  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [v92 fieldMatch:v136 fieldRegex:v137];

  *(void *)(v129 + 48) = v138;
  specialized Array._endMutation()(v139);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v140 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v129);
  id v141 = [v92 orMatch:v140];

  NSString v142 = String._bridgeToObjectiveC()();
  id v143 = [v97 TPPBPolicyKeyViewMappingWithView:v142 matchingRule:v141];

  uint64_t v309 = (uint64_t)v91;
  v91[11] = v143;
  NSString v144 = String._bridgeToObjectiveC()();
  NSString v145 = String._bridgeToObjectiveC()();
  id v146 = [v92 fieldMatch:v144 fieldRegex:v145];

  NSString v147 = String._bridgeToObjectiveC()();
  id v148 = [v97 TPPBPolicyKeyViewMappingWithView:v147 matchingRule:v146];

  v91[12] = v148;
  uint64_t v149 = swift_allocObject(v310, 64LL, 7LL);
  *(_OWORD *)(v149 + 16) = xmmword_1001DE770;
  uint64_t v150 = swift_allocObject(v310, 48LL, 7LL);
  *(_OWORD *)(v150 + 16) = xmmword_1001DE790;
  NSString v151 = String._bridgeToObjectiveC()();
  NSString v152 = String._bridgeToObjectiveC()();
  id v153 = [v92 fieldMatch:v151 fieldRegex:v152];

  *(void *)(v150 + 32) = v153;
  NSString v154 = String._bridgeToObjectiveC()();
  NSString v155 = String._bridgeToObjectiveC()();
  id v156 = [v92 fieldMatch:v154 fieldRegex:v155];

  *(void *)(v150 + 40) = v156;
  specialized Array._endMutation()(v157);
  Class v158 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v150);
  id v159 = [v92 andMatch:v158];

  *(void *)(v149 + 32) = v159;
  uint64_t v160 = swift_allocObject(v310, 48LL, 7LL);
  *(_OWORD *)(v160 + 16) = xmmword_1001DE790;
  NSString v161 = String._bridgeToObjectiveC()();
  NSString v162 = String._bridgeToObjectiveC()();
  id v163 = [v92 fieldMatch:v161 fieldRegex:v162];

  *(void *)(v160 + 32) = v163;
  NSString v164 = String._bridgeToObjectiveC()();
  NSString v165 = String._bridgeToObjectiveC()();
  id v166 = [v92 fieldMatch:v164 fieldRegex:v165];

  *(void *)(v160 + 40) = v166;
  specialized Array._endMutation()(v167);
  Class v168 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v160);
  id v169 = [v92 andMatch:v168];

  *(void *)(v149 + 40) = v169;
  NSString v170 = String._bridgeToObjectiveC()();
  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v92 fieldMatch:v170 fieldRegex:v171];

  *(void *)(v149 + 48) = v172;
  NSString v173 = String._bridgeToObjectiveC()();
  NSString v174 = String._bridgeToObjectiveC()();
  id v175 = [v92 fieldMatch:v173 fieldRegex:v174];

  *(void *)(v149 + 56) = v175;
  specialized Array._endMutation()(v176);
  Class v177 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v149);
  id v178 = [v92 orMatch:v177];

  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v97 TPPBPolicyKeyViewMappingWithView:v179 matchingRule:v178];

  v91[13] = v180;
  uint64_t v181 = swift_allocObject(v310, 48LL, 7LL);
  *(_OWORD *)(v181 + 16) = xmmword_1001DE790;
  NSString v182 = String._bridgeToObjectiveC()();
  NSString v183 = String._bridgeToObjectiveC()();
  id v184 = [v92 fieldMatch:v182 fieldRegex:v183];

  *(void *)(v181 + 32) = v184;
  uint64_t v185 = swift_allocObject(v310, 56LL, 7LL);
  *(_OWORD *)(v185 + 16) = xmmword_1001DE740;
  NSString v186 = String._bridgeToObjectiveC()();
  NSString v187 = String._bridgeToObjectiveC()();
  id v188 = [v92 fieldMatch:v186 fieldRegex:v187];

  *(void *)(v185 + 32) = v188;
  NSString v189 = String._bridgeToObjectiveC()();
  NSString v190 = String._bridgeToObjectiveC()();
  id v191 = [v92 fieldMatch:v189 fieldRegex:v190];

  *(void *)(v185 + 40) = v191;
  NSString v192 = String._bridgeToObjectiveC()();
  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v92 fieldMatch:v192 fieldRegex:v193];

  *(void *)(v185 + 48) = v194;
  specialized Array._endMutation()(v195);
  Class v196 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v185);
  id v197 = [v92 andMatch:v196];

  *(void *)(v181 + 40) = v197;
  specialized Array._endMutation()(v198);
  uint64_t v199 = v181;
  Class v200 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v199);
  id v201 = [v92 orMatch:v200];

  NSString v202 = String._bridgeToObjectiveC()();
  id v203 = [v97 TPPBPolicyKeyViewMappingWithView:v202 matchingRule:v201];

  v91[14] = v203;
  uint64_t v204 = swift_allocObject(v310, 144LL, 7LL);
  *(_OWORD *)(v204 + 16) = xmmword_1001DE7B0;
  NSString v205 = String._bridgeToObjectiveC()();
  NSString v206 = String._bridgeToObjectiveC()();
  id v207 = [v92 fieldMatch:v205 fieldRegex:v206];

  *(void *)(v204 + 32) = v207;
  NSString v208 = String._bridgeToObjectiveC()();
  NSString v209 = String._bridgeToObjectiveC()();
  id v210 = [v92 fieldMatch:v208 fieldRegex:v209];

  *(void *)(v204 + 40) = v210;
  NSString v211 = String._bridgeToObjectiveC()();
  NSString v212 = String._bridgeToObjectiveC()();
  id v213 = [v92 fieldMatch:v211 fieldRegex:v212];

  *(void *)(v204 + 48) = v213;
  NSString v214 = String._bridgeToObjectiveC()();
  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v92 fieldMatch:v214 fieldRegex:v215];

  *(void *)(v204 + 56) = v216;
  NSString v217 = String._bridgeToObjectiveC()();
  NSString v218 = String._bridgeToObjectiveC()();
  id v219 = [v92 fieldMatch:v217 fieldRegex:v218];

  *(void *)(v204 + 64) = v219;
  NSString v220 = String._bridgeToObjectiveC()();
  NSString v221 = String._bridgeToObjectiveC()();
  id v222 = [v92 fieldMatch:v220 fieldRegex:v221];

  *(void *)(v204 + 72) = v222;
  NSString v223 = String._bridgeToObjectiveC()();
  NSString v224 = String._bridgeToObjectiveC()();
  id v225 = [v92 fieldMatch:v223 fieldRegex:v224];

  *(void *)(v204 + 80) = v225;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v92 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v204 + 88) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v92 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v204 + 96) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v92 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v204 + 104) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v92 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v204 + 112) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v92 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v204 + 120) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v92 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v204 + 128) = v243;
  NSString v244 = String._bridgeToObjectiveC()();
  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v92 fieldMatch:v244 fieldRegex:v245];

  *(void *)(v204 + 136) = v246;
  specialized Array._endMutation()(v247);
  Class v248 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v204);
  id v249 = [v92 orMatch:v248];

  NSString v250 = String._bridgeToObjectiveC()();
  id v251 = [v97 TPPBPolicyKeyViewMappingWithView:v250 matchingRule:v249];

  v91[15] = v251;
  uint64_t v252 = swift_allocObject(v310, 48LL, 7LL);
  *(_OWORD *)(v252 + 16) = xmmword_1001DE790;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v92 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v252 + 32) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v92 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v252 + 40) = v258;
  specialized Array._endMutation()(v259);
  Class v260 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v252);
  id v261 = [v92 orMatch:v260];

  NSString v262 = String._bridgeToObjectiveC()();
  id v263 = [v97 TPPBPolicyKeyViewMappingWithView:v262 matchingRule:v261];

  v91[16] = v263;
  uint64_t v264 = swift_allocObject(v310, 72LL, 7LL);
  *(_OWORD *)(v264 + 16) = xmmword_1001DE7D0;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v92 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v264 + 32) = v267;
  NSString v268 = String._bridgeToObjectiveC()();
  NSString v269 = String._bridgeToObjectiveC()();
  id v270 = [v92 fieldMatch:v268 fieldRegex:v269];

  *(void *)(v264 + 40) = v270;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v92 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v264 + 48) = v273;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v92 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v264 + 56) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v92 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v264 + 64) = v279;
  specialized Array._endMutation()(v280);
  Class v281 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v264);
  id v282 = [v92 orMatch:v281];

  NSString v283 = String._bridgeToObjectiveC()();
  id v284 = [v97 TPPBPolicyKeyViewMappingWithView:v283 matchingRule:v282];

  v91[17] = v284;
  uint64_t v285 = swift_allocObject(v310, 56LL, 7LL);
  *(_OWORD *)(v285 + 16) = xmmword_1001DE740;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v92 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v285 + 32) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v92 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v285 + 40) = v291;
  NSString v292 = String._bridgeToObjectiveC()();
  NSString v293 = String._bridgeToObjectiveC()();
  id v294 = [v92 fieldMatch:v292 fieldRegex:v293];

  *(void *)(v285 + 48) = v294;
  specialized Array._endMutation()(v295);
  Class v296 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v285);
  id v297 = [v92 orMatch:v296];

  NSString v298 = String._bridgeToObjectiveC()();
  id v299 = [v97 TPPBPolicyKeyViewMappingWithView:v298 matchingRule:v297];

  *(void *)(v309 + 144) = v299;
  id v300 = [v92 trueMatch];
  NSString v301 = String._bridgeToObjectiveC()();
  id v302 = [v97 TPPBPolicyKeyViewMappingWithView:v301 matchingRule:v300];

  *(void *)(v309 + 152) = v302;
  specialized Array._endMutation()(v303);
  id v304 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 9LL,  v308,  v307,  v306,  (uint64_t)_swiftEmptyArrayStorage,  v309,  (uint64_t)&off_1002301D8,  (uint64_t)&off_100230248,  (uint64_t)&off_100230278,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_100020B3C()
{
  return 0xD000000000000C8CLL;
}

id sub_100020B58()
{
  uint64_t v316 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v316, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v314 = v0;
  uint64_t v30 = swift_allocObject(v316, 152LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE760;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  specialized Array._endMutation()(v77);
  uint64_t v313 = v30;
  uint64_t v78 = swift_allocObject(v316, 72LL, 7LL);
  *(_OWORD *)(v78 + 16) = xmmword_1001DE7D0;
  NSString v79 = String._bridgeToObjectiveC()();
  Class v80 = Array._bridgeToObjectiveC()().super.isa;
  Class v81 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v82 = [v81 TPPBPolicyIntroducersByCategoryWithCategory:v79 introducers:v80];

  *(void *)(v78 + 32) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v81 TPPBPolicyIntroducersByCategoryWithCategory:v83 introducers:v84];

  *(void *)(v78 + 40) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v81 TPPBPolicyIntroducersByCategoryWithCategory:v86 introducers:v87];

  *(void *)(v78 + 48) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v81 TPPBPolicyIntroducersByCategoryWithCategory:v89 introducers:v90];

  *(void *)(v78 + 56) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v81 TPPBPolicyIntroducersByCategoryWithCategory:v92 introducers:v93];

  *(void *)(v78 + 64) = v94;
  specialized Array._endMutation()(v95);
  uint64_t v312 = v78;
  uint64_t v96 = swift_allocObject(v316, 160LL, 7LL);
  *(_OWORD *)(v96 + 16) = xmmword_1001DE780;
  id v97 = (void *)v96;
  id v98 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v99 = String._bridgeToObjectiveC()();
  NSString v100 = String._bridgeToObjectiveC()();
  id v101 = [v98 fieldMatch:v99 fieldRegex:v100];

  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v104 = [v103 TPPBPolicyKeyViewMappingWithView:v102 matchingRule:v101];

  v97[4] = v104;
  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [v98 fieldMatch:v105 fieldRegex:v106];

  NSString v108 = String._bridgeToObjectiveC()();
  id v109 = [v103 TPPBPolicyKeyViewMappingWithView:v108 matchingRule:v107];

  v97[5] = v109;
  NSString v110 = String._bridgeToObjectiveC()();
  NSString v111 = String._bridgeToObjectiveC()();
  id v112 = [v98 fieldMatch:v110 fieldRegex:v111];

  NSString v113 = String._bridgeToObjectiveC()();
  id v114 = [v103 TPPBPolicyKeyViewMappingWithView:v113 matchingRule:v112];

  v97[6] = v114;
  NSString v115 = String._bridgeToObjectiveC()();
  NSString v116 = String._bridgeToObjectiveC()();
  id v117 = [v98 fieldMatch:v115 fieldRegex:v116];

  NSString v118 = String._bridgeToObjectiveC()();
  id v119 = [v103 TPPBPolicyKeyViewMappingWithView:v118 matchingRule:v117];

  v97[7] = v119;
  NSString v120 = String._bridgeToObjectiveC()();
  NSString v121 = String._bridgeToObjectiveC()();
  id v122 = [v98 fieldMatch:v120 fieldRegex:v121];

  NSString v123 = String._bridgeToObjectiveC()();
  id v124 = [v103 TPPBPolicyKeyViewMappingWithView:v123 matchingRule:v122];

  v97[8] = v124;
  NSString v125 = String._bridgeToObjectiveC()();
  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v98 fieldMatch:v125 fieldRegex:v126];

  NSString v128 = String._bridgeToObjectiveC()();
  id v129 = [v103 TPPBPolicyKeyViewMappingWithView:v128 matchingRule:v127];

  v97[9] = v129;
  NSString v130 = String._bridgeToObjectiveC()();
  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v98 fieldMatch:v130 fieldRegex:v131];

  NSString v133 = String._bridgeToObjectiveC()();
  id v134 = [v103 TPPBPolicyKeyViewMappingWithView:v133 matchingRule:v132];

  v97[10] = v134;
  uint64_t v135 = swift_allocObject(v316, 56LL, 7LL);
  *(_OWORD *)(v135 + 16) = xmmword_1001DE740;
  NSString v136 = String._bridgeToObjectiveC()();
  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [v98 fieldMatch:v136 fieldRegex:v137];

  *(void *)(v135 + 32) = v138;
  NSString v139 = String._bridgeToObjectiveC()();
  NSString v140 = String._bridgeToObjectiveC()();
  id v141 = [v98 fieldMatch:v139 fieldRegex:v140];

  *(void *)(v135 + 40) = v141;
  NSString v142 = String._bridgeToObjectiveC()();
  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v98 fieldMatch:v142 fieldRegex:v143];

  *(void *)(v135 + 48) = v144;
  specialized Array._endMutation()(v145);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v146 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v135);
  id v147 = [v98 orMatch:v146];

  NSString v148 = String._bridgeToObjectiveC()();
  id v149 = [v103 TPPBPolicyKeyViewMappingWithView:v148 matchingRule:v147];

  uint64_t v315 = (uint64_t)v97;
  v97[11] = v149;
  NSString v150 = String._bridgeToObjectiveC()();
  NSString v151 = String._bridgeToObjectiveC()();
  id v152 = [v98 fieldMatch:v150 fieldRegex:v151];

  NSString v153 = String._bridgeToObjectiveC()();
  id v154 = [v103 TPPBPolicyKeyViewMappingWithView:v153 matchingRule:v152];

  v97[12] = v154;
  uint64_t v155 = swift_allocObject(v316, 64LL, 7LL);
  *(_OWORD *)(v155 + 16) = xmmword_1001DE770;
  uint64_t v156 = swift_allocObject(v316, 48LL, 7LL);
  *(_OWORD *)(v156 + 16) = xmmword_1001DE790;
  NSString v157 = String._bridgeToObjectiveC()();
  NSString v158 = String._bridgeToObjectiveC()();
  id v159 = [v98 fieldMatch:v157 fieldRegex:v158];

  *(void *)(v156 + 32) = v159;
  NSString v160 = String._bridgeToObjectiveC()();
  NSString v161 = String._bridgeToObjectiveC()();
  id v162 = [v98 fieldMatch:v160 fieldRegex:v161];

  *(void *)(v156 + 40) = v162;
  specialized Array._endMutation()(v163);
  Class v164 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v156);
  id v165 = [v98 andMatch:v164];

  *(void *)(v155 + 32) = v165;
  uint64_t v166 = swift_allocObject(v316, 48LL, 7LL);
  *(_OWORD *)(v166 + 16) = xmmword_1001DE790;
  NSString v167 = String._bridgeToObjectiveC()();
  NSString v168 = String._bridgeToObjectiveC()();
  id v169 = [v98 fieldMatch:v167 fieldRegex:v168];

  *(void *)(v166 + 32) = v169;
  NSString v170 = String._bridgeToObjectiveC()();
  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v98 fieldMatch:v170 fieldRegex:v171];

  *(void *)(v166 + 40) = v172;
  specialized Array._endMutation()(v173);
  Class v174 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v166);
  id v175 = [v98 andMatch:v174];

  *(void *)(v155 + 40) = v175;
  NSString v176 = String._bridgeToObjectiveC()();
  NSString v177 = String._bridgeToObjectiveC()();
  id v178 = [v98 fieldMatch:v176 fieldRegex:v177];

  *(void *)(v155 + 48) = v178;
  NSString v179 = String._bridgeToObjectiveC()();
  NSString v180 = String._bridgeToObjectiveC()();
  id v181 = [v98 fieldMatch:v179 fieldRegex:v180];

  *(void *)(v155 + 56) = v181;
  specialized Array._endMutation()(v182);
  Class v183 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v155);
  id v184 = [v98 orMatch:v183];

  NSString v185 = String._bridgeToObjectiveC()();
  id v186 = [v103 TPPBPolicyKeyViewMappingWithView:v185 matchingRule:v184];

  v97[13] = v186;
  uint64_t v187 = swift_allocObject(v316, 48LL, 7LL);
  *(_OWORD *)(v187 + 16) = xmmword_1001DE790;
  NSString v188 = String._bridgeToObjectiveC()();
  NSString v189 = String._bridgeToObjectiveC()();
  id v190 = [v98 fieldMatch:v188 fieldRegex:v189];

  *(void *)(v187 + 32) = v190;
  uint64_t v191 = swift_allocObject(v316, 56LL, 7LL);
  *(_OWORD *)(v191 + 16) = xmmword_1001DE740;
  NSString v192 = String._bridgeToObjectiveC()();
  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v98 fieldMatch:v192 fieldRegex:v193];

  *(void *)(v191 + 32) = v194;
  NSString v195 = String._bridgeToObjectiveC()();
  NSString v196 = String._bridgeToObjectiveC()();
  id v197 = [v98 fieldMatch:v195 fieldRegex:v196];

  *(void *)(v191 + 40) = v197;
  NSString v198 = String._bridgeToObjectiveC()();
  NSString v199 = String._bridgeToObjectiveC()();
  id v200 = [v98 fieldMatch:v198 fieldRegex:v199];

  *(void *)(v191 + 48) = v200;
  specialized Array._endMutation()(v201);
  Class v202 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v191);
  id v203 = [v98 andMatch:v202];

  *(void *)(v187 + 40) = v203;
  specialized Array._endMutation()(v204);
  uint64_t v205 = v187;
  Class v206 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v205);
  id v207 = [v98 orMatch:v206];

  NSString v208 = String._bridgeToObjectiveC()();
  id v209 = [v103 TPPBPolicyKeyViewMappingWithView:v208 matchingRule:v207];

  v97[14] = v209;
  uint64_t v210 = swift_allocObject(v316, 144LL, 7LL);
  *(_OWORD *)(v210 + 16) = xmmword_1001DE7B0;
  NSString v211 = String._bridgeToObjectiveC()();
  NSString v212 = String._bridgeToObjectiveC()();
  id v213 = [v98 fieldMatch:v211 fieldRegex:v212];

  *(void *)(v210 + 32) = v213;
  NSString v214 = String._bridgeToObjectiveC()();
  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v98 fieldMatch:v214 fieldRegex:v215];

  *(void *)(v210 + 40) = v216;
  NSString v217 = String._bridgeToObjectiveC()();
  NSString v218 = String._bridgeToObjectiveC()();
  id v219 = [v98 fieldMatch:v217 fieldRegex:v218];

  *(void *)(v210 + 48) = v219;
  NSString v220 = String._bridgeToObjectiveC()();
  NSString v221 = String._bridgeToObjectiveC()();
  id v222 = [v98 fieldMatch:v220 fieldRegex:v221];

  *(void *)(v210 + 56) = v222;
  NSString v223 = String._bridgeToObjectiveC()();
  NSString v224 = String._bridgeToObjectiveC()();
  id v225 = [v98 fieldMatch:v223 fieldRegex:v224];

  *(void *)(v210 + 64) = v225;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v98 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v210 + 72) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v98 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v210 + 80) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v98 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v210 + 88) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v98 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v210 + 96) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v98 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v210 + 104) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v98 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v210 + 112) = v243;
  NSString v244 = String._bridgeToObjectiveC()();
  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v98 fieldMatch:v244 fieldRegex:v245];

  *(void *)(v210 + 120) = v246;
  NSString v247 = String._bridgeToObjectiveC()();
  NSString v248 = String._bridgeToObjectiveC()();
  id v249 = [v98 fieldMatch:v247 fieldRegex:v248];

  *(void *)(v210 + 128) = v249;
  NSString v250 = String._bridgeToObjectiveC()();
  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v98 fieldMatch:v250 fieldRegex:v251];

  *(void *)(v210 + 136) = v252;
  specialized Array._endMutation()(v253);
  Class v254 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v210);
  id v255 = [v98 orMatch:v254];

  NSString v256 = String._bridgeToObjectiveC()();
  id v257 = [v103 TPPBPolicyKeyViewMappingWithView:v256 matchingRule:v255];

  v97[15] = v257;
  uint64_t v258 = swift_allocObject(v316, 48LL, 7LL);
  *(_OWORD *)(v258 + 16) = xmmword_1001DE790;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v98 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v258 + 32) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v98 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v258 + 40) = v264;
  specialized Array._endMutation()(v265);
  Class v266 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v258);
  id v267 = [v98 orMatch:v266];

  NSString v268 = String._bridgeToObjectiveC()();
  id v269 = [v103 TPPBPolicyKeyViewMappingWithView:v268 matchingRule:v267];

  v97[16] = v269;
  uint64_t v270 = swift_allocObject(v316, 72LL, 7LL);
  *(_OWORD *)(v270 + 16) = xmmword_1001DE7D0;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v98 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v270 + 32) = v273;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v98 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v270 + 40) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v98 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v270 + 48) = v279;
  NSString v280 = String._bridgeToObjectiveC()();
  NSString v281 = String._bridgeToObjectiveC()();
  id v282 = [v98 fieldMatch:v280 fieldRegex:v281];

  *(void *)(v270 + 56) = v282;
  NSString v283 = String._bridgeToObjectiveC()();
  NSString v284 = String._bridgeToObjectiveC()();
  id v285 = [v98 fieldMatch:v283 fieldRegex:v284];

  *(void *)(v270 + 64) = v285;
  specialized Array._endMutation()(v286);
  Class v287 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v270);
  id v288 = [v98 orMatch:v287];

  NSString v289 = String._bridgeToObjectiveC()();
  id v290 = [v103 TPPBPolicyKeyViewMappingWithView:v289 matchingRule:v288];

  v97[17] = v290;
  uint64_t v291 = swift_allocObject(v316, 56LL, 7LL);
  *(_OWORD *)(v291 + 16) = xmmword_1001DE740;
  NSString v292 = String._bridgeToObjectiveC()();
  NSString v293 = String._bridgeToObjectiveC()();
  id v294 = [v98 fieldMatch:v292 fieldRegex:v293];

  *(void *)(v291 + 32) = v294;
  NSString v295 = String._bridgeToObjectiveC()();
  NSString v296 = String._bridgeToObjectiveC()();
  id v297 = [v98 fieldMatch:v295 fieldRegex:v296];

  *(void *)(v291 + 40) = v297;
  NSString v298 = String._bridgeToObjectiveC()();
  NSString v299 = String._bridgeToObjectiveC()();
  id v300 = [v98 fieldMatch:v298 fieldRegex:v299];

  *(void *)(v291 + 48) = v300;
  specialized Array._endMutation()(v301);
  Class v302 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v291);
  id v303 = [v98 orMatch:v302];

  NSString v304 = String._bridgeToObjectiveC()();
  id v305 = [v103 TPPBPolicyKeyViewMappingWithView:v304 matchingRule:v303];

  *(void *)(v315 + 144) = v305;
  id v306 = [v98 trueMatch];
  NSString v307 = String._bridgeToObjectiveC()();
  id v308 = [v103 TPPBPolicyKeyViewMappingWithView:v307 matchingRule:v306];

  *(void *)(v315 + 152) = v308;
  specialized Array._endMutation()(v309);
  id v310 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 10LL,  v314,  v313,  v312,  (uint64_t)_swiftEmptyArrayStorage,  v315,  (uint64_t)&off_100230888,  (uint64_t)&off_1002308F8,  (uint64_t)&off_100230928,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_10002320C()
{
  return 0xD000000000000CC8LL;
}

id sub_100023228()
{
  uint64_t v324 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v324, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v323 = v0;
  uint64_t v30 = swift_allocObject(v324, 160LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE780;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v33 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v30 + 152) = v79;
  specialized Array._endMutation()(v80);
  uint64_t v322 = v30;
  uint64_t v81 = swift_allocObject(v324, 72LL, 7LL);
  *(_OWORD *)(v81 + 16) = xmmword_1001DE7D0;
  NSString v82 = String._bridgeToObjectiveC()();
  Class v83 = Array._bridgeToObjectiveC()().super.isa;
  Class v84 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v85 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v82 introducers:v83];

  *(void *)(v81 + 32) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v86 introducers:v87];

  *(void *)(v81 + 40) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v89 introducers:v90];

  *(void *)(v81 + 48) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v92 introducers:v93];

  *(void *)(v81 + 56) = v94;
  NSString v95 = String._bridgeToObjectiveC()();
  Class v96 = Array._bridgeToObjectiveC()().super.isa;
  id v97 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v95 introducers:v96];

  *(void *)(v81 + 64) = v97;
  specialized Array._endMutation()(v98);
  uint64_t v321 = v81;
  uint64_t v99 = swift_allocObject(v324, 168LL, 7LL);
  *(_OWORD *)(v99 + 16) = xmmword_1001DE7F0;
  NSString v100 = (void *)v99;
  id v101 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v102 = String._bridgeToObjectiveC()();
  NSString v103 = String._bridgeToObjectiveC()();
  id v104 = [v101 fieldMatch:v102 fieldRegex:v103];

  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v107 = [v106 TPPBPolicyKeyViewMappingWithView:v105 matchingRule:v104];

  v100[4] = v107;
  NSString v108 = String._bridgeToObjectiveC()();
  NSString v109 = String._bridgeToObjectiveC()();
  id v110 = [v101 fieldMatch:v108 fieldRegex:v109];

  NSString v111 = String._bridgeToObjectiveC()();
  id v112 = [v106 TPPBPolicyKeyViewMappingWithView:v111 matchingRule:v110];

  v100[5] = v112;
  NSString v113 = String._bridgeToObjectiveC()();
  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v101 fieldMatch:v113 fieldRegex:v114];

  NSString v116 = String._bridgeToObjectiveC()();
  id v117 = [v106 TPPBPolicyKeyViewMappingWithView:v116 matchingRule:v115];

  v100[6] = v117;
  NSString v118 = String._bridgeToObjectiveC()();
  NSString v119 = String._bridgeToObjectiveC()();
  id v120 = [v101 fieldMatch:v118 fieldRegex:v119];

  NSString v121 = String._bridgeToObjectiveC()();
  id v122 = [v106 TPPBPolicyKeyViewMappingWithView:v121 matchingRule:v120];

  v100[7] = v122;
  NSString v123 = String._bridgeToObjectiveC()();
  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v101 fieldMatch:v123 fieldRegex:v124];

  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v106 TPPBPolicyKeyViewMappingWithView:v126 matchingRule:v125];

  v100[8] = v127;
  NSString v128 = String._bridgeToObjectiveC()();
  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v101 fieldMatch:v128 fieldRegex:v129];

  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v106 TPPBPolicyKeyViewMappingWithView:v131 matchingRule:v130];

  v100[9] = v132;
  NSString v133 = String._bridgeToObjectiveC()();
  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v101 fieldMatch:v133 fieldRegex:v134];

  NSString v136 = String._bridgeToObjectiveC()();
  id v137 = [v106 TPPBPolicyKeyViewMappingWithView:v136 matchingRule:v135];

  v100[10] = v137;
  uint64_t v138 = swift_allocObject(v324, 56LL, 7LL);
  *(_OWORD *)(v138 + 16) = xmmword_1001DE740;
  NSString v139 = String._bridgeToObjectiveC()();
  NSString v140 = String._bridgeToObjectiveC()();
  id v141 = [v101 fieldMatch:v139 fieldRegex:v140];

  *(void *)(v138 + 32) = v141;
  NSString v142 = String._bridgeToObjectiveC()();
  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v101 fieldMatch:v142 fieldRegex:v143];

  *(void *)(v138 + 40) = v144;
  NSString v145 = String._bridgeToObjectiveC()();
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v101 fieldMatch:v145 fieldRegex:v146];

  *(void *)(v138 + 48) = v147;
  specialized Array._endMutation()(v148);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v149 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v138);
  id v150 = [v101 orMatch:v149];

  NSString v151 = String._bridgeToObjectiveC()();
  id v152 = [v106 TPPBPolicyKeyViewMappingWithView:v151 matchingRule:v150];

  v100[11] = v152;
  NSString v153 = String._bridgeToObjectiveC()();
  NSString v154 = String._bridgeToObjectiveC()();
  id v155 = [v101 fieldMatch:v153 fieldRegex:v154];

  NSString v156 = String._bridgeToObjectiveC()();
  id v157 = [v106 TPPBPolicyKeyViewMappingWithView:v156 matchingRule:v155];

  v100[12] = v157;
  NSString v158 = String._bridgeToObjectiveC()();
  NSString v159 = String._bridgeToObjectiveC()();
  id v160 = [v101 fieldMatch:v158 fieldRegex:v159];

  NSString v161 = String._bridgeToObjectiveC()();
  id v162 = [v106 TPPBPolicyKeyViewMappingWithView:v161 matchingRule:v160];

  v100[13] = v162;
  uint64_t v163 = swift_allocObject(v324, 64LL, 7LL);
  *(_OWORD *)(v163 + 16) = xmmword_1001DE770;
  uint64_t v164 = swift_allocObject(v324, 48LL, 7LL);
  *(_OWORD *)(v164 + 16) = xmmword_1001DE790;
  NSString v165 = String._bridgeToObjectiveC()();
  NSString v166 = String._bridgeToObjectiveC()();
  id v167 = [v101 fieldMatch:v165 fieldRegex:v166];

  *(void *)(v164 + 32) = v167;
  NSString v168 = String._bridgeToObjectiveC()();
  NSString v169 = String._bridgeToObjectiveC()();
  id v170 = [v101 fieldMatch:v168 fieldRegex:v169];

  *(void *)(v164 + 40) = v170;
  specialized Array._endMutation()(v171);
  Class v172 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v164);
  id v173 = [v101 andMatch:v172];

  *(void *)(v163 + 32) = v173;
  uint64_t v174 = swift_allocObject(v324, 48LL, 7LL);
  *(_OWORD *)(v174 + 16) = xmmword_1001DE790;
  NSString v175 = String._bridgeToObjectiveC()();
  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v101 fieldMatch:v175 fieldRegex:v176];

  *(void *)(v174 + 32) = v177;
  NSString v178 = String._bridgeToObjectiveC()();
  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v101 fieldMatch:v178 fieldRegex:v179];

  *(void *)(v174 + 40) = v180;
  specialized Array._endMutation()(v181);
  Class v182 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v174);
  id v183 = [v101 andMatch:v182];

  *(void *)(v163 + 40) = v183;
  NSString v184 = String._bridgeToObjectiveC()();
  NSString v185 = String._bridgeToObjectiveC()();
  id v186 = [v101 fieldMatch:v184 fieldRegex:v185];

  *(void *)(v163 + 48) = v186;
  NSString v187 = String._bridgeToObjectiveC()();
  NSString v188 = String._bridgeToObjectiveC()();
  id v189 = [v101 fieldMatch:v187 fieldRegex:v188];

  *(void *)(v163 + 56) = v189;
  specialized Array._endMutation()(v190);
  Class v191 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v163);
  id v192 = [v101 orMatch:v191];

  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v106 TPPBPolicyKeyViewMappingWithView:v193 matchingRule:v192];

  uint64_t v195 = (uint64_t)v100;
  v100[14] = v194;
  uint64_t v196 = swift_allocObject(v324, 48LL, 7LL);
  *(_OWORD *)(v196 + 16) = xmmword_1001DE790;
  NSString v197 = String._bridgeToObjectiveC()();
  NSString v198 = String._bridgeToObjectiveC()();
  id v199 = [v101 fieldMatch:v197 fieldRegex:v198];

  *(void *)(v196 + 32) = v199;
  uint64_t v200 = swift_allocObject(v324, 56LL, 7LL);
  *(_OWORD *)(v200 + 16) = xmmword_1001DE740;
  NSString v201 = String._bridgeToObjectiveC()();
  NSString v202 = String._bridgeToObjectiveC()();
  id v203 = [v101 fieldMatch:v201 fieldRegex:v202];

  *(void *)(v200 + 32) = v203;
  NSString v204 = String._bridgeToObjectiveC()();
  NSString v205 = String._bridgeToObjectiveC()();
  id v206 = [v101 fieldMatch:v204 fieldRegex:v205];

  *(void *)(v200 + 40) = v206;
  NSString v207 = String._bridgeToObjectiveC()();
  NSString v208 = String._bridgeToObjectiveC()();
  id v209 = [v101 fieldMatch:v207 fieldRegex:v208];

  *(void *)(v200 + 48) = v209;
  specialized Array._endMutation()(v210);
  Class v211 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v200);
  id v212 = [v101 andMatch:v211];

  *(void *)(v196 + 40) = v212;
  specialized Array._endMutation()(v213);
  uint64_t v214 = v196;
  Class v215 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v214);
  id v216 = [v101 orMatch:v215];

  NSString v217 = String._bridgeToObjectiveC()();
  id v218 = [v106 TPPBPolicyKeyViewMappingWithView:v217 matchingRule:v216];

  v100[15] = v218;
  uint64_t v219 = swift_allocObject(v324, 144LL, 7LL);
  *(_OWORD *)(v219 + 16) = xmmword_1001DE7B0;
  NSString v220 = String._bridgeToObjectiveC()();
  NSString v221 = String._bridgeToObjectiveC()();
  id v222 = [v101 fieldMatch:v220 fieldRegex:v221];

  *(void *)(v219 + 32) = v222;
  NSString v223 = String._bridgeToObjectiveC()();
  NSString v224 = String._bridgeToObjectiveC()();
  id v225 = [v101 fieldMatch:v223 fieldRegex:v224];

  *(void *)(v219 + 40) = v225;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v101 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v219 + 48) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v101 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v219 + 56) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v101 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v219 + 64) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v101 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v219 + 72) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v101 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v219 + 80) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v101 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v219 + 88) = v243;
  NSString v244 = String._bridgeToObjectiveC()();
  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v101 fieldMatch:v244 fieldRegex:v245];

  *(void *)(v219 + 96) = v246;
  NSString v247 = String._bridgeToObjectiveC()();
  NSString v248 = String._bridgeToObjectiveC()();
  id v249 = [v101 fieldMatch:v247 fieldRegex:v248];

  *(void *)(v219 + 104) = v249;
  NSString v250 = String._bridgeToObjectiveC()();
  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v101 fieldMatch:v250 fieldRegex:v251];

  *(void *)(v219 + 112) = v252;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v101 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v219 + 120) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v101 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v219 + 128) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v101 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v219 + 136) = v261;
  specialized Array._endMutation()(v262);
  Class v263 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v219);
  id v264 = [v101 orMatch:v263];

  NSString v265 = String._bridgeToObjectiveC()();
  id v266 = [v106 TPPBPolicyKeyViewMappingWithView:v265 matchingRule:v264];

  v100[16] = v266;
  uint64_t v267 = swift_allocObject(v324, 48LL, 7LL);
  *(_OWORD *)(v267 + 16) = xmmword_1001DE790;
  NSString v268 = String._bridgeToObjectiveC()();
  NSString v269 = String._bridgeToObjectiveC()();
  id v270 = [v101 fieldMatch:v268 fieldRegex:v269];

  *(void *)(v267 + 32) = v270;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v101 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v267 + 40) = v273;
  specialized Array._endMutation()(v274);
  Class v275 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v267);
  id v276 = [v101 orMatch:v275];

  NSString v277 = String._bridgeToObjectiveC()();
  id v278 = [v106 TPPBPolicyKeyViewMappingWithView:v277 matchingRule:v276];

  v100[17] = v278;
  uint64_t v279 = swift_allocObject(v324, 72LL, 7LL);
  *(_OWORD *)(v279 + 16) = xmmword_1001DE7D0;
  NSString v280 = String._bridgeToObjectiveC()();
  NSString v281 = String._bridgeToObjectiveC()();
  id v282 = [v101 fieldMatch:v280 fieldRegex:v281];

  *(void *)(v279 + 32) = v282;
  NSString v283 = String._bridgeToObjectiveC()();
  NSString v284 = String._bridgeToObjectiveC()();
  id v285 = [v101 fieldMatch:v283 fieldRegex:v284];

  *(void *)(v279 + 40) = v285;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v101 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v279 + 48) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v101 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v279 + 56) = v291;
  NSString v292 = String._bridgeToObjectiveC()();
  NSString v293 = String._bridgeToObjectiveC()();
  id v294 = [v101 fieldMatch:v292 fieldRegex:v293];

  *(void *)(v279 + 64) = v294;
  specialized Array._endMutation()(v295);
  Class v296 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v279);
  id v297 = [v101 orMatch:v296];

  NSString v298 = String._bridgeToObjectiveC()();
  id v299 = [v106 TPPBPolicyKeyViewMappingWithView:v298 matchingRule:v297];

  v100[18] = v299;
  uint64_t v300 = swift_allocObject(v324, 56LL, 7LL);
  *(_OWORD *)(v300 + 16) = xmmword_1001DE740;
  NSString v301 = String._bridgeToObjectiveC()();
  NSString v302 = String._bridgeToObjectiveC()();
  id v303 = [v101 fieldMatch:v301 fieldRegex:v302];

  *(void *)(v300 + 32) = v303;
  NSString v304 = String._bridgeToObjectiveC()();
  NSString v305 = String._bridgeToObjectiveC()();
  id v306 = [v101 fieldMatch:v304 fieldRegex:v305];

  *(void *)(v300 + 40) = v306;
  NSString v307 = String._bridgeToObjectiveC()();
  NSString v308 = String._bridgeToObjectiveC()();
  id v309 = [v101 fieldMatch:v307 fieldRegex:v308];

  *(void *)(v300 + 48) = v309;
  specialized Array._endMutation()(v310);
  Class v311 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v300);
  id v312 = [v101 orMatch:v311];

  NSString v313 = String._bridgeToObjectiveC()();
  id v314 = [v106 TPPBPolicyKeyViewMappingWithView:v313 matchingRule:v312];

  *(void *)(v195 + 152) = v314;
  id v315 = [v101 trueMatch];
  NSString v316 = String._bridgeToObjectiveC()();
  id v317 = [v106 TPPBPolicyKeyViewMappingWithView:v316 matchingRule:v315];

  *(void *)(v195 + 160) = v317;
  specialized Array._endMutation()(v318);
  id v319 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 11LL,  v323,  v322,  v321,  (uint64_t)_swiftEmptyArrayStorage,  v195,  (uint64_t)&off_100230F78,  (uint64_t)&off_100230FE8,  (uint64_t)&off_100231018,  (uint64_t)_swiftEmptyArrayStorage,  1LL);
}

unint64_t sub_1000259B8()
{
  return 0xD000000000000CD8LL;
}

id sub_1000259D4()
{
  uint64_t v323 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v323, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v322 = v0;
  uint64_t v30 = swift_allocObject(v323, 160LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE780;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v33 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v30 + 152) = v79;
  specialized Array._endMutation()(v80);
  uint64_t v321 = v30;
  uint64_t v81 = swift_allocObject(v323, 72LL, 7LL);
  *(_OWORD *)(v81 + 16) = xmmword_1001DE7D0;
  NSString v82 = String._bridgeToObjectiveC()();
  Class v83 = Array._bridgeToObjectiveC()().super.isa;
  Class v84 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v85 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v82 introducers:v83];

  *(void *)(v81 + 32) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v86 introducers:v87];

  *(void *)(v81 + 40) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v89 introducers:v90];

  *(void *)(v81 + 48) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v92 introducers:v93];

  *(void *)(v81 + 56) = v94;
  NSString v95 = String._bridgeToObjectiveC()();
  Class v96 = Array._bridgeToObjectiveC()().super.isa;
  id v97 = [v84 TPPBPolicyIntroducersByCategoryWithCategory:v95 introducers:v96];

  *(void *)(v81 + 64) = v97;
  specialized Array._endMutation()(v98);
  uint64_t v320 = v81;
  uint64_t v99 = swift_allocObject(v323, 168LL, 7LL);
  *(_OWORD *)(v99 + 16) = xmmword_1001DE7F0;
  NSString v100 = (void *)v99;
  id v101 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v102 = String._bridgeToObjectiveC()();
  NSString v103 = String._bridgeToObjectiveC()();
  id v104 = [v101 fieldMatch:v102 fieldRegex:v103];

  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v107 = [v106 TPPBPolicyKeyViewMappingWithView:v105 matchingRule:v104];

  v100[4] = v107;
  NSString v108 = String._bridgeToObjectiveC()();
  NSString v109 = String._bridgeToObjectiveC()();
  id v110 = [v101 fieldMatch:v108 fieldRegex:v109];

  NSString v111 = String._bridgeToObjectiveC()();
  id v112 = [v106 TPPBPolicyKeyViewMappingWithView:v111 matchingRule:v110];

  v100[5] = v112;
  NSString v113 = String._bridgeToObjectiveC()();
  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v101 fieldMatch:v113 fieldRegex:v114];

  NSString v116 = String._bridgeToObjectiveC()();
  id v117 = [v106 TPPBPolicyKeyViewMappingWithView:v116 matchingRule:v115];

  v100[6] = v117;
  NSString v118 = String._bridgeToObjectiveC()();
  NSString v119 = String._bridgeToObjectiveC()();
  id v120 = [v101 fieldMatch:v118 fieldRegex:v119];

  NSString v121 = String._bridgeToObjectiveC()();
  id v122 = [v106 TPPBPolicyKeyViewMappingWithView:v121 matchingRule:v120];

  v100[7] = v122;
  NSString v123 = String._bridgeToObjectiveC()();
  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v101 fieldMatch:v123 fieldRegex:v124];

  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v106 TPPBPolicyKeyViewMappingWithView:v126 matchingRule:v125];

  v100[8] = v127;
  NSString v128 = String._bridgeToObjectiveC()();
  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v101 fieldMatch:v128 fieldRegex:v129];

  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v106 TPPBPolicyKeyViewMappingWithView:v131 matchingRule:v130];

  v100[9] = v132;
  NSString v133 = String._bridgeToObjectiveC()();
  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v101 fieldMatch:v133 fieldRegex:v134];

  NSString v136 = String._bridgeToObjectiveC()();
  id v137 = [v106 TPPBPolicyKeyViewMappingWithView:v136 matchingRule:v135];

  v100[10] = v137;
  uint64_t v138 = swift_allocObject(v323, 56LL, 7LL);
  *(_OWORD *)(v138 + 16) = xmmword_1001DE740;
  NSString v139 = String._bridgeToObjectiveC()();
  NSString v140 = String._bridgeToObjectiveC()();
  id v141 = [v101 fieldMatch:v139 fieldRegex:v140];

  *(void *)(v138 + 32) = v141;
  NSString v142 = String._bridgeToObjectiveC()();
  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v101 fieldMatch:v142 fieldRegex:v143];

  *(void *)(v138 + 40) = v144;
  NSString v145 = String._bridgeToObjectiveC()();
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v101 fieldMatch:v145 fieldRegex:v146];

  *(void *)(v138 + 48) = v147;
  specialized Array._endMutation()(v148);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v149 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v138);
  id v150 = [v101 orMatch:v149];

  NSString v151 = String._bridgeToObjectiveC()();
  id v152 = [v106 TPPBPolicyKeyViewMappingWithView:v151 matchingRule:v150];

  v100[11] = v152;
  NSString v153 = String._bridgeToObjectiveC()();
  NSString v154 = String._bridgeToObjectiveC()();
  id v155 = [v101 fieldMatch:v153 fieldRegex:v154];

  NSString v156 = String._bridgeToObjectiveC()();
  id v319 = v106;
  id v157 = [v106 TPPBPolicyKeyViewMappingWithView:v156 matchingRule:v155];

  v100[12] = v157;
  NSString v158 = String._bridgeToObjectiveC()();
  NSString v159 = String._bridgeToObjectiveC()();
  id v160 = [v101 fieldMatch:v158 fieldRegex:v159];

  NSString v161 = String._bridgeToObjectiveC()();
  id v162 = [v106 TPPBPolicyKeyViewMappingWithView:v161 matchingRule:v160];

  v100[13] = v162;
  uint64_t v163 = swift_allocObject(v323, 64LL, 7LL);
  *(_OWORD *)(v163 + 16) = xmmword_1001DE770;
  uint64_t v164 = swift_allocObject(v323, 48LL, 7LL);
  *(_OWORD *)(v164 + 16) = xmmword_1001DE790;
  NSString v165 = String._bridgeToObjectiveC()();
  NSString v166 = String._bridgeToObjectiveC()();
  id v167 = [v101 fieldMatch:v165 fieldRegex:v166];

  *(void *)(v164 + 32) = v167;
  NSString v168 = String._bridgeToObjectiveC()();
  NSString v169 = String._bridgeToObjectiveC()();
  id v170 = [v101 fieldMatch:v168 fieldRegex:v169];

  *(void *)(v164 + 40) = v170;
  specialized Array._endMutation()(v171);
  Class v172 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v164);
  id v173 = [v101 andMatch:v172];

  *(void *)(v163 + 32) = v173;
  uint64_t v174 = swift_allocObject(v323, 48LL, 7LL);
  *(_OWORD *)(v174 + 16) = xmmword_1001DE790;
  NSString v175 = String._bridgeToObjectiveC()();
  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v101 fieldMatch:v175 fieldRegex:v176];

  *(void *)(v174 + 32) = v177;
  NSString v178 = String._bridgeToObjectiveC()();
  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v101 fieldMatch:v178 fieldRegex:v179];

  *(void *)(v174 + 40) = v180;
  specialized Array._endMutation()(v181);
  Class v182 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v174);
  id v183 = [v101 andMatch:v182];

  *(void *)(v163 + 40) = v183;
  NSString v184 = String._bridgeToObjectiveC()();
  NSString v185 = String._bridgeToObjectiveC()();
  id v186 = [v101 fieldMatch:v184 fieldRegex:v185];

  *(void *)(v163 + 48) = v186;
  NSString v187 = String._bridgeToObjectiveC()();
  NSString v188 = String._bridgeToObjectiveC()();
  id v189 = [v101 fieldMatch:v187 fieldRegex:v188];

  *(void *)(v163 + 56) = v189;
  specialized Array._endMutation()(v190);
  Class v191 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v163);
  id v192 = [v101 orMatch:v191];

  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v319 TPPBPolicyKeyViewMappingWithView:v193 matchingRule:v192];

  v100[14] = v194;
  uint64_t v195 = swift_allocObject(v323, 48LL, 7LL);
  *(_OWORD *)(v195 + 16) = xmmword_1001DE790;
  NSString v196 = String._bridgeToObjectiveC()();
  NSString v197 = String._bridgeToObjectiveC()();
  id v198 = [v101 fieldMatch:v196 fieldRegex:v197];

  *(void *)(v195 + 32) = v198;
  uint64_t v199 = swift_allocObject(v323, 56LL, 7LL);
  *(_OWORD *)(v199 + 16) = xmmword_1001DE740;
  NSString v200 = String._bridgeToObjectiveC()();
  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v101 fieldMatch:v200 fieldRegex:v201];

  *(void *)(v199 + 32) = v202;
  NSString v203 = String._bridgeToObjectiveC()();
  NSString v204 = String._bridgeToObjectiveC()();
  id v205 = [v101 fieldMatch:v203 fieldRegex:v204];

  *(void *)(v199 + 40) = v205;
  NSString v206 = String._bridgeToObjectiveC()();
  NSString v207 = String._bridgeToObjectiveC()();
  id v208 = [v101 fieldMatch:v206 fieldRegex:v207];

  *(void *)(v199 + 48) = v208;
  specialized Array._endMutation()(v209);
  Class v210 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v199);
  id v211 = [v101 andMatch:v210];

  *(void *)(v195 + 40) = v211;
  specialized Array._endMutation()(v212);
  Class v213 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v195);
  id v214 = [v101 orMatch:v213];

  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v319 TPPBPolicyKeyViewMappingWithView:v215 matchingRule:v214];

  v100[15] = v216;
  uint64_t v217 = swift_allocObject(v323, 144LL, 7LL);
  *(_OWORD *)(v217 + 16) = xmmword_1001DE7B0;
  NSString v218 = String._bridgeToObjectiveC()();
  NSString v219 = String._bridgeToObjectiveC()();
  id v220 = [v101 fieldMatch:v218 fieldRegex:v219];

  *(void *)(v217 + 32) = v220;
  NSString v221 = String._bridgeToObjectiveC()();
  NSString v222 = String._bridgeToObjectiveC()();
  id v223 = [v101 fieldMatch:v221 fieldRegex:v222];

  *(void *)(v217 + 40) = v223;
  NSString v224 = String._bridgeToObjectiveC()();
  NSString v225 = String._bridgeToObjectiveC()();
  id v226 = [v101 fieldMatch:v224 fieldRegex:v225];

  *(void *)(v217 + 48) = v226;
  NSString v227 = String._bridgeToObjectiveC()();
  NSString v228 = String._bridgeToObjectiveC()();
  id v229 = [v101 fieldMatch:v227 fieldRegex:v228];

  *(void *)(v217 + 56) = v229;
  NSString v230 = String._bridgeToObjectiveC()();
  NSString v231 = String._bridgeToObjectiveC()();
  id v232 = [v101 fieldMatch:v230 fieldRegex:v231];

  *(void *)(v217 + 64) = v232;
  NSString v233 = String._bridgeToObjectiveC()();
  NSString v234 = String._bridgeToObjectiveC()();
  id v235 = [v101 fieldMatch:v233 fieldRegex:v234];

  *(void *)(v217 + 72) = v235;
  NSString v236 = String._bridgeToObjectiveC()();
  NSString v237 = String._bridgeToObjectiveC()();
  id v238 = [v101 fieldMatch:v236 fieldRegex:v237];

  *(void *)(v217 + 80) = v238;
  NSString v239 = String._bridgeToObjectiveC()();
  NSString v240 = String._bridgeToObjectiveC()();
  id v241 = [v101 fieldMatch:v239 fieldRegex:v240];

  *(void *)(v217 + 88) = v241;
  NSString v242 = String._bridgeToObjectiveC()();
  NSString v243 = String._bridgeToObjectiveC()();
  id v244 = [v101 fieldMatch:v242 fieldRegex:v243];

  *(void *)(v217 + 96) = v244;
  NSString v245 = String._bridgeToObjectiveC()();
  NSString v246 = String._bridgeToObjectiveC()();
  id v247 = [v101 fieldMatch:v245 fieldRegex:v246];

  *(void *)(v217 + 104) = v247;
  NSString v248 = String._bridgeToObjectiveC()();
  NSString v249 = String._bridgeToObjectiveC()();
  id v250 = [v101 fieldMatch:v248 fieldRegex:v249];

  *(void *)(v217 + 112) = v250;
  NSString v251 = String._bridgeToObjectiveC()();
  NSString v252 = String._bridgeToObjectiveC()();
  id v253 = [v101 fieldMatch:v251 fieldRegex:v252];

  *(void *)(v217 + 120) = v253;
  NSString v254 = String._bridgeToObjectiveC()();
  NSString v255 = String._bridgeToObjectiveC()();
  id v256 = [v101 fieldMatch:v254 fieldRegex:v255];

  *(void *)(v217 + 128) = v256;
  NSString v257 = String._bridgeToObjectiveC()();
  NSString v258 = String._bridgeToObjectiveC()();
  id v259 = [v101 fieldMatch:v257 fieldRegex:v258];

  *(void *)(v217 + 136) = v259;
  specialized Array._endMutation()(v260);
  Class v261 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v217);
  id v262 = [v101 orMatch:v261];

  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v319 TPPBPolicyKeyViewMappingWithView:v263 matchingRule:v262];

  v100[16] = v264;
  uint64_t v265 = swift_allocObject(v323, 48LL, 7LL);
  *(_OWORD *)(v265 + 16) = xmmword_1001DE790;
  NSString v266 = String._bridgeToObjectiveC()();
  NSString v267 = String._bridgeToObjectiveC()();
  id v268 = [v101 fieldMatch:v266 fieldRegex:v267];

  *(void *)(v265 + 32) = v268;
  NSString v269 = String._bridgeToObjectiveC()();
  NSString v270 = String._bridgeToObjectiveC()();
  id v271 = [v101 fieldMatch:v269 fieldRegex:v270];

  *(void *)(v265 + 40) = v271;
  specialized Array._endMutation()(v272);
  Class v273 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v265);
  id v274 = [v101 orMatch:v273];

  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v319 TPPBPolicyKeyViewMappingWithView:v275 matchingRule:v274];

  v100[17] = v276;
  uint64_t v277 = swift_allocObject(v323, 72LL, 7LL);
  *(_OWORD *)(v277 + 16) = xmmword_1001DE7D0;
  NSString v278 = String._bridgeToObjectiveC()();
  NSString v279 = String._bridgeToObjectiveC()();
  id v280 = [v101 fieldMatch:v278 fieldRegex:v279];

  *(void *)(v277 + 32) = v280;
  NSString v281 = String._bridgeToObjectiveC()();
  NSString v282 = String._bridgeToObjectiveC()();
  id v283 = [v101 fieldMatch:v281 fieldRegex:v282];

  *(void *)(v277 + 40) = v283;
  NSString v284 = String._bridgeToObjectiveC()();
  NSString v285 = String._bridgeToObjectiveC()();
  id v286 = [v101 fieldMatch:v284 fieldRegex:v285];

  *(void *)(v277 + 48) = v286;
  NSString v287 = String._bridgeToObjectiveC()();
  NSString v288 = String._bridgeToObjectiveC()();
  id v289 = [v101 fieldMatch:v287 fieldRegex:v288];

  *(void *)(v277 + 56) = v289;
  NSString v290 = String._bridgeToObjectiveC()();
  NSString v291 = String._bridgeToObjectiveC()();
  id v292 = [v101 fieldMatch:v290 fieldRegex:v291];

  *(void *)(v277 + 64) = v292;
  specialized Array._endMutation()(v293);
  Class v294 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v277);
  id v295 = [v101 orMatch:v294];

  NSString v296 = String._bridgeToObjectiveC()();
  id v297 = [v319 TPPBPolicyKeyViewMappingWithView:v296 matchingRule:v295];

  v100[18] = v297;
  uint64_t v298 = swift_allocObject(v323, 56LL, 7LL);
  *(_OWORD *)(v298 + 16) = xmmword_1001DE740;
  NSString v299 = String._bridgeToObjectiveC()();
  NSString v300 = String._bridgeToObjectiveC()();
  id v301 = [v101 fieldMatch:v299 fieldRegex:v300];

  *(void *)(v298 + 32) = v301;
  NSString v302 = String._bridgeToObjectiveC()();
  NSString v303 = String._bridgeToObjectiveC()();
  id v304 = [v101 fieldMatch:v302 fieldRegex:v303];

  *(void *)(v298 + 40) = v304;
  NSString v305 = String._bridgeToObjectiveC()();
  NSString v306 = String._bridgeToObjectiveC()();
  id v307 = [v101 fieldMatch:v305 fieldRegex:v306];

  *(void *)(v298 + 48) = v307;
  specialized Array._endMutation()(v308);
  Class v309 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v298);
  id v310 = [v101 orMatch:v309];

  NSString v311 = String._bridgeToObjectiveC()();
  id v312 = [v319 TPPBPolicyKeyViewMappingWithView:v311 matchingRule:v310];

  v100[19] = v312;
  id v313 = [v101 trueMatch];
  NSString v314 = String._bridgeToObjectiveC()();
  id v315 = [v319 TPPBPolicyKeyViewMappingWithView:v314 matchingRule:v313];

  v100[20] = v315;
  specialized Array._endMutation()(v316);
  id v317 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 12LL,  v322,  v321,  v320,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v100,  (uint64_t)&off_100231668,  (uint64_t)&off_1002316D8,  (uint64_t)&off_100231708,  (uint64_t)&off_100231748,  1LL);
}

unint64_t sub_100028164()
{
  return 0xD000000000000D18LL;
}

id sub_100028180()
{
  uint64_t v331 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v331, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v330 = v0;
  uint64_t v30 = swift_allocObject(v331, 168LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE7F0;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v33 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v30 + 152) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v33 TPPBPolicyCategoriesByViewWithView:v80 categories:v81];

  *(void *)(v30 + 160) = v82;
  specialized Array._endMutation()(v83);
  uint64_t v329 = v30;
  uint64_t v84 = swift_allocObject(v331, 72LL, 7LL);
  *(_OWORD *)(v84 + 16) = xmmword_1001DE7D0;
  NSString v85 = String._bridgeToObjectiveC()();
  Class v86 = Array._bridgeToObjectiveC()().super.isa;
  Class v87 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v88 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v85 introducers:v86];

  *(void *)(v84 + 32) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v89 introducers:v90];

  *(void *)(v84 + 40) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v92 introducers:v93];

  *(void *)(v84 + 48) = v94;
  NSString v95 = String._bridgeToObjectiveC()();
  Class v96 = Array._bridgeToObjectiveC()().super.isa;
  id v97 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v95 introducers:v96];

  *(void *)(v84 + 56) = v97;
  NSString v98 = String._bridgeToObjectiveC()();
  Class v99 = Array._bridgeToObjectiveC()().super.isa;
  id v100 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v98 introducers:v99];

  *(void *)(v84 + 64) = v100;
  specialized Array._endMutation()(v101);
  uint64_t v328 = v84;
  uint64_t v102 = swift_allocObject(v331, 176LL, 7LL);
  *(_OWORD *)(v102 + 16) = xmmword_1001DE800;
  NSString v103 = (void *)v102;
  id v104 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [v104 fieldMatch:v105 fieldRegex:v106];

  NSString v108 = String._bridgeToObjectiveC()();
  NSString v109 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v110 = [v109 TPPBPolicyKeyViewMappingWithView:v108 matchingRule:v107];

  v103[4] = v110;
  NSString v111 = String._bridgeToObjectiveC()();
  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v104 fieldMatch:v111 fieldRegex:v112];

  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v109 TPPBPolicyKeyViewMappingWithView:v114 matchingRule:v113];

  v103[5] = v115;
  NSString v116 = String._bridgeToObjectiveC()();
  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v104 fieldMatch:v116 fieldRegex:v117];

  NSString v119 = String._bridgeToObjectiveC()();
  id v120 = [v109 TPPBPolicyKeyViewMappingWithView:v119 matchingRule:v118];

  v103[6] = v120;
  NSString v121 = String._bridgeToObjectiveC()();
  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v104 fieldMatch:v121 fieldRegex:v122];

  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v109 TPPBPolicyKeyViewMappingWithView:v124 matchingRule:v123];

  v103[7] = v125;
  NSString v126 = String._bridgeToObjectiveC()();
  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v104 fieldMatch:v126 fieldRegex:v127];

  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v109 TPPBPolicyKeyViewMappingWithView:v129 matchingRule:v128];

  v103[8] = v130;
  NSString v131 = String._bridgeToObjectiveC()();
  NSString v132 = String._bridgeToObjectiveC()();
  id v133 = [v104 fieldMatch:v131 fieldRegex:v132];

  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v109 TPPBPolicyKeyViewMappingWithView:v134 matchingRule:v133];

  v103[9] = v135;
  NSString v136 = String._bridgeToObjectiveC()();
  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [v104 fieldMatch:v136 fieldRegex:v137];

  NSString v139 = String._bridgeToObjectiveC()();
  id v140 = [v109 TPPBPolicyKeyViewMappingWithView:v139 matchingRule:v138];

  v103[10] = v140;
  uint64_t v141 = swift_allocObject(v331, 56LL, 7LL);
  *(_OWORD *)(v141 + 16) = xmmword_1001DE740;
  NSString v142 = String._bridgeToObjectiveC()();
  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v104 fieldMatch:v142 fieldRegex:v143];

  *(void *)(v141 + 32) = v144;
  NSString v145 = String._bridgeToObjectiveC()();
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v104 fieldMatch:v145 fieldRegex:v146];

  *(void *)(v141 + 40) = v147;
  NSString v148 = String._bridgeToObjectiveC()();
  NSString v149 = String._bridgeToObjectiveC()();
  id v150 = [v104 fieldMatch:v148 fieldRegex:v149];

  *(void *)(v141 + 48) = v150;
  specialized Array._endMutation()(v151);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v152 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v141);
  id v153 = [v104 orMatch:v152];

  NSString v154 = String._bridgeToObjectiveC()();
  id v155 = [v109 TPPBPolicyKeyViewMappingWithView:v154 matchingRule:v153];

  v103[11] = v155;
  NSString v156 = String._bridgeToObjectiveC()();
  NSString v157 = String._bridgeToObjectiveC()();
  id v158 = [v104 fieldMatch:v156 fieldRegex:v157];

  NSString v159 = String._bridgeToObjectiveC()();
  id v160 = [v109 TPPBPolicyKeyViewMappingWithView:v159 matchingRule:v158];

  v103[12] = v160;
  NSString v161 = String._bridgeToObjectiveC()();
  NSString v162 = String._bridgeToObjectiveC()();
  id v163 = [v104 fieldMatch:v161 fieldRegex:v162];

  NSString v164 = String._bridgeToObjectiveC()();
  id v327 = v109;
  id v165 = [v109 TPPBPolicyKeyViewMappingWithView:v164 matchingRule:v163];

  v103[13] = v165;
  NSString v166 = String._bridgeToObjectiveC()();
  NSString v167 = String._bridgeToObjectiveC()();
  id v168 = [v104 fieldMatch:v166 fieldRegex:v167];

  NSString v169 = String._bridgeToObjectiveC()();
  id v170 = [v109 TPPBPolicyKeyViewMappingWithView:v169 matchingRule:v168];

  v103[14] = v170;
  uint64_t v171 = swift_allocObject(v331, 64LL, 7LL);
  *(_OWORD *)(v171 + 16) = xmmword_1001DE770;
  uint64_t v172 = swift_allocObject(v331, 48LL, 7LL);
  *(_OWORD *)(v172 + 16) = xmmword_1001DE790;
  NSString v173 = String._bridgeToObjectiveC()();
  NSString v174 = String._bridgeToObjectiveC()();
  id v175 = [v104 fieldMatch:v173 fieldRegex:v174];

  *(void *)(v172 + 32) = v175;
  NSString v176 = String._bridgeToObjectiveC()();
  NSString v177 = String._bridgeToObjectiveC()();
  id v178 = [v104 fieldMatch:v176 fieldRegex:v177];

  *(void *)(v172 + 40) = v178;
  specialized Array._endMutation()(v179);
  Class v180 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v172);
  id v181 = [v104 andMatch:v180];

  *(void *)(v171 + 32) = v181;
  uint64_t v182 = swift_allocObject(v331, 48LL, 7LL);
  *(_OWORD *)(v182 + 16) = xmmword_1001DE790;
  NSString v183 = String._bridgeToObjectiveC()();
  NSString v184 = String._bridgeToObjectiveC()();
  id v185 = [v104 fieldMatch:v183 fieldRegex:v184];

  *(void *)(v182 + 32) = v185;
  NSString v186 = String._bridgeToObjectiveC()();
  NSString v187 = String._bridgeToObjectiveC()();
  id v188 = [v104 fieldMatch:v186 fieldRegex:v187];

  *(void *)(v182 + 40) = v188;
  specialized Array._endMutation()(v189);
  Class v190 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v182);
  id v191 = [v104 andMatch:v190];

  *(void *)(v171 + 40) = v191;
  NSString v192 = String._bridgeToObjectiveC()();
  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v104 fieldMatch:v192 fieldRegex:v193];

  *(void *)(v171 + 48) = v194;
  NSString v195 = String._bridgeToObjectiveC()();
  NSString v196 = String._bridgeToObjectiveC()();
  id v197 = [v104 fieldMatch:v195 fieldRegex:v196];

  *(void *)(v171 + 56) = v197;
  specialized Array._endMutation()(v198);
  Class v199 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v171);
  id v200 = [v104 orMatch:v199];

  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v327 TPPBPolicyKeyViewMappingWithView:v201 matchingRule:v200];

  v103[15] = v202;
  uint64_t v203 = swift_allocObject(v331, 48LL, 7LL);
  *(_OWORD *)(v203 + 16) = xmmword_1001DE790;
  NSString v204 = String._bridgeToObjectiveC()();
  NSString v205 = String._bridgeToObjectiveC()();
  id v206 = [v104 fieldMatch:v204 fieldRegex:v205];

  *(void *)(v203 + 32) = v206;
  uint64_t v207 = swift_allocObject(v331, 56LL, 7LL);
  *(_OWORD *)(v207 + 16) = xmmword_1001DE740;
  NSString v208 = String._bridgeToObjectiveC()();
  NSString v209 = String._bridgeToObjectiveC()();
  id v210 = [v104 fieldMatch:v208 fieldRegex:v209];

  *(void *)(v207 + 32) = v210;
  NSString v211 = String._bridgeToObjectiveC()();
  NSString v212 = String._bridgeToObjectiveC()();
  id v213 = [v104 fieldMatch:v211 fieldRegex:v212];

  *(void *)(v207 + 40) = v213;
  NSString v214 = String._bridgeToObjectiveC()();
  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v104 fieldMatch:v214 fieldRegex:v215];

  *(void *)(v207 + 48) = v216;
  specialized Array._endMutation()(v217);
  Class v218 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v207);
  id v219 = [v104 andMatch:v218];

  *(void *)(v203 + 40) = v219;
  specialized Array._endMutation()(v220);
  Class v221 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v203);
  id v222 = [v104 orMatch:v221];

  NSString v223 = String._bridgeToObjectiveC()();
  id v224 = [v327 TPPBPolicyKeyViewMappingWithView:v223 matchingRule:v222];

  v103[16] = v224;
  uint64_t v225 = swift_allocObject(v331, 144LL, 7LL);
  *(_OWORD *)(v225 + 16) = xmmword_1001DE7B0;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v104 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v225 + 32) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v104 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v225 + 40) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v104 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v225 + 48) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v104 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v225 + 56) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v104 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v225 + 64) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v104 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v225 + 72) = v243;
  NSString v244 = String._bridgeToObjectiveC()();
  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v104 fieldMatch:v244 fieldRegex:v245];

  *(void *)(v225 + 80) = v246;
  NSString v247 = String._bridgeToObjectiveC()();
  NSString v248 = String._bridgeToObjectiveC()();
  id v249 = [v104 fieldMatch:v247 fieldRegex:v248];

  *(void *)(v225 + 88) = v249;
  NSString v250 = String._bridgeToObjectiveC()();
  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v104 fieldMatch:v250 fieldRegex:v251];

  *(void *)(v225 + 96) = v252;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v104 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v225 + 104) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v104 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v225 + 112) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v104 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v225 + 120) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v104 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v225 + 128) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v104 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v225 + 136) = v267;
  specialized Array._endMutation()(v268);
  Class v269 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v225);
  id v270 = [v104 orMatch:v269];

  NSString v271 = String._bridgeToObjectiveC()();
  id v272 = [v327 TPPBPolicyKeyViewMappingWithView:v271 matchingRule:v270];

  v103[17] = v272;
  uint64_t v273 = swift_allocObject(v331, 48LL, 7LL);
  *(_OWORD *)(v273 + 16) = xmmword_1001DE790;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v104 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v273 + 32) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v104 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v273 + 40) = v279;
  specialized Array._endMutation()(v280);
  Class v281 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v273);
  id v282 = [v104 orMatch:v281];

  NSString v283 = String._bridgeToObjectiveC()();
  id v284 = [v327 TPPBPolicyKeyViewMappingWithView:v283 matchingRule:v282];

  v103[18] = v284;
  uint64_t v285 = swift_allocObject(v331, 72LL, 7LL);
  *(_OWORD *)(v285 + 16) = xmmword_1001DE7D0;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v104 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v285 + 32) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v104 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v285 + 40) = v291;
  NSString v292 = String._bridgeToObjectiveC()();
  NSString v293 = String._bridgeToObjectiveC()();
  id v294 = [v104 fieldMatch:v292 fieldRegex:v293];

  *(void *)(v285 + 48) = v294;
  NSString v295 = String._bridgeToObjectiveC()();
  NSString v296 = String._bridgeToObjectiveC()();
  id v297 = [v104 fieldMatch:v295 fieldRegex:v296];

  *(void *)(v285 + 56) = v297;
  NSString v298 = String._bridgeToObjectiveC()();
  NSString v299 = String._bridgeToObjectiveC()();
  id v300 = [v104 fieldMatch:v298 fieldRegex:v299];

  *(void *)(v285 + 64) = v300;
  specialized Array._endMutation()(v301);
  Class v302 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v285);
  id v303 = [v104 orMatch:v302];

  NSString v304 = String._bridgeToObjectiveC()();
  id v305 = [v327 TPPBPolicyKeyViewMappingWithView:v304 matchingRule:v303];

  v103[19] = v305;
  uint64_t v306 = swift_allocObject(v331, 56LL, 7LL);
  *(_OWORD *)(v306 + 16) = xmmword_1001DE740;
  NSString v307 = String._bridgeToObjectiveC()();
  NSString v308 = String._bridgeToObjectiveC()();
  id v309 = [v104 fieldMatch:v307 fieldRegex:v308];

  *(void *)(v306 + 32) = v309;
  NSString v310 = String._bridgeToObjectiveC()();
  NSString v311 = String._bridgeToObjectiveC()();
  id v312 = [v104 fieldMatch:v310 fieldRegex:v311];

  *(void *)(v306 + 40) = v312;
  NSString v313 = String._bridgeToObjectiveC()();
  NSString v314 = String._bridgeToObjectiveC()();
  id v315 = [v104 fieldMatch:v313 fieldRegex:v314];

  *(void *)(v306 + 48) = v315;
  specialized Array._endMutation()(v316);
  Class v317 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v306);
  id v318 = [v104 orMatch:v317];

  NSString v319 = String._bridgeToObjectiveC()();
  id v320 = [v327 TPPBPolicyKeyViewMappingWithView:v319 matchingRule:v318];

  v103[20] = v320;
  id v321 = [v104 trueMatch];
  NSString v322 = String._bridgeToObjectiveC()();
  id v323 = [v327 TPPBPolicyKeyViewMappingWithView:v322 matchingRule:v321];

  v103[21] = v323;
  specialized Array._endMutation()(v324);
  id v325 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 13LL,  v330,  v329,  v328,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v103,  (uint64_t)&off_100231DC8,  (uint64_t)&off_100231E38,  (uint64_t)&off_100231E68,  (uint64_t)&off_100231EA8,  1LL);
}

unint64_t sub_10002A9E8()
{
  return 0xD000000000000EACLL;
}

id sub_10002AA04()
{
  uint64_t v347 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v347, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v345 = v0;
  uint64_t v30 = swift_allocObject(v347, 168LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE7F0;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v33 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v30 + 152) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v33 TPPBPolicyCategoriesByViewWithView:v80 categories:v81];

  *(void *)(v30 + 160) = v82;
  specialized Array._endMutation()(v83);
  uint64_t v344 = v30;
  uint64_t v84 = swift_allocObject(v347, 72LL, 7LL);
  *(_OWORD *)(v84 + 16) = xmmword_1001DE7D0;
  NSString v85 = String._bridgeToObjectiveC()();
  Class v86 = Array._bridgeToObjectiveC()().super.isa;
  Class v87 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v88 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v85 introducers:v86];

  *(void *)(v84 + 32) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v89 introducers:v90];

  *(void *)(v84 + 40) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v92 introducers:v93];

  *(void *)(v84 + 48) = v94;
  NSString v95 = String._bridgeToObjectiveC()();
  Class v96 = Array._bridgeToObjectiveC()().super.isa;
  id v97 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v95 introducers:v96];

  *(void *)(v84 + 56) = v97;
  NSString v98 = String._bridgeToObjectiveC()();
  Class v99 = Array._bridgeToObjectiveC()().super.isa;
  id v100 = [v87 TPPBPolicyIntroducersByCategoryWithCategory:v98 introducers:v99];

  *(void *)(v84 + 64) = v100;
  specialized Array._endMutation()(v101);
  uint64_t v343 = v84;
  uint64_t v102 = swift_allocObject(v347, 176LL, 7LL);
  *(_OWORD *)(v102 + 16) = xmmword_1001DE800;
  NSString v103 = (void *)v102;
  id v104 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [v104 fieldMatch:v105 fieldRegex:v106];

  NSString v108 = String._bridgeToObjectiveC()();
  NSString v109 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v110 = [v109 TPPBPolicyKeyViewMappingWithView:v108 matchingRule:v107];

  v103[4] = v110;
  NSString v111 = String._bridgeToObjectiveC()();
  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v104 fieldMatch:v111 fieldRegex:v112];

  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v109 TPPBPolicyKeyViewMappingWithView:v114 matchingRule:v113];

  v103[5] = v115;
  NSString v116 = String._bridgeToObjectiveC()();
  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v104 fieldMatch:v116 fieldRegex:v117];

  NSString v119 = String._bridgeToObjectiveC()();
  id v120 = [v109 TPPBPolicyKeyViewMappingWithView:v119 matchingRule:v118];

  v103[6] = v120;
  NSString v121 = String._bridgeToObjectiveC()();
  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v104 fieldMatch:v121 fieldRegex:v122];

  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v109 TPPBPolicyKeyViewMappingWithView:v124 matchingRule:v123];

  v103[7] = v125;
  NSString v126 = String._bridgeToObjectiveC()();
  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v104 fieldMatch:v126 fieldRegex:v127];

  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v109 TPPBPolicyKeyViewMappingWithView:v129 matchingRule:v128];

  v103[8] = v130;
  NSString v131 = String._bridgeToObjectiveC()();
  NSString v132 = String._bridgeToObjectiveC()();
  id v133 = [v104 fieldMatch:v131 fieldRegex:v132];

  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v109 TPPBPolicyKeyViewMappingWithView:v134 matchingRule:v133];

  v103[9] = v135;
  NSString v136 = String._bridgeToObjectiveC()();
  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [v104 fieldMatch:v136 fieldRegex:v137];

  NSString v139 = String._bridgeToObjectiveC()();
  id v140 = [v109 TPPBPolicyKeyViewMappingWithView:v139 matchingRule:v138];

  v103[10] = v140;
  uint64_t v141 = swift_allocObject(v347, 56LL, 7LL);
  *(_OWORD *)(v141 + 16) = xmmword_1001DE740;
  NSString v142 = String._bridgeToObjectiveC()();
  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v104 fieldMatch:v142 fieldRegex:v143];

  *(void *)(v141 + 32) = v144;
  NSString v145 = String._bridgeToObjectiveC()();
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v104 fieldMatch:v145 fieldRegex:v146];

  *(void *)(v141 + 40) = v147;
  NSString v148 = String._bridgeToObjectiveC()();
  NSString v149 = String._bridgeToObjectiveC()();
  id v150 = [v104 fieldMatch:v148 fieldRegex:v149];

  *(void *)(v141 + 48) = v150;
  specialized Array._endMutation()(v151);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v152 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v141);
  id v153 = [v104 orMatch:v152];

  NSString v154 = String._bridgeToObjectiveC()();
  id v155 = [v109 TPPBPolicyKeyViewMappingWithView:v154 matchingRule:v153];

  v103[11] = v155;
  NSString v156 = String._bridgeToObjectiveC()();
  NSString v157 = String._bridgeToObjectiveC()();
  id v158 = [v104 fieldMatch:v156 fieldRegex:v157];

  NSString v159 = String._bridgeToObjectiveC()();
  id v160 = [v109 TPPBPolicyKeyViewMappingWithView:v159 matchingRule:v158];

  v103[12] = v160;
  NSString v161 = String._bridgeToObjectiveC()();
  NSString v162 = String._bridgeToObjectiveC()();
  id v163 = [v104 fieldMatch:v161 fieldRegex:v162];

  NSString v164 = String._bridgeToObjectiveC()();
  id v346 = v109;
  id v165 = [v109 TPPBPolicyKeyViewMappingWithView:v164 matchingRule:v163];

  v103[13] = v165;
  NSString v166 = String._bridgeToObjectiveC()();
  NSString v167 = String._bridgeToObjectiveC()();
  id v168 = [v104 fieldMatch:v166 fieldRegex:v167];

  NSString v169 = String._bridgeToObjectiveC()();
  id v170 = [v109 TPPBPolicyKeyViewMappingWithView:v169 matchingRule:v168];

  v103[14] = v170;
  uint64_t v171 = swift_allocObject(v347, 64LL, 7LL);
  *(_OWORD *)(v171 + 16) = xmmword_1001DE770;
  uint64_t v172 = swift_allocObject(v347, 48LL, 7LL);
  *(_OWORD *)(v172 + 16) = xmmword_1001DE790;
  NSString v173 = String._bridgeToObjectiveC()();
  NSString v174 = String._bridgeToObjectiveC()();
  id v175 = [v104 fieldMatch:v173 fieldRegex:v174];

  *(void *)(v172 + 32) = v175;
  NSString v176 = String._bridgeToObjectiveC()();
  NSString v177 = String._bridgeToObjectiveC()();
  id v178 = [v104 fieldMatch:v176 fieldRegex:v177];

  *(void *)(v172 + 40) = v178;
  specialized Array._endMutation()(v179);
  Class v180 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v172);
  id v181 = [v104 andMatch:v180];

  *(void *)(v171 + 32) = v181;
  uint64_t v182 = swift_allocObject(v347, 48LL, 7LL);
  *(_OWORD *)(v182 + 16) = xmmword_1001DE790;
  NSString v183 = String._bridgeToObjectiveC()();
  NSString v184 = String._bridgeToObjectiveC()();
  id v185 = [v104 fieldMatch:v183 fieldRegex:v184];

  *(void *)(v182 + 32) = v185;
  NSString v186 = String._bridgeToObjectiveC()();
  NSString v187 = String._bridgeToObjectiveC()();
  id v188 = [v104 fieldMatch:v186 fieldRegex:v187];

  *(void *)(v182 + 40) = v188;
  specialized Array._endMutation()(v189);
  Class v190 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v182);
  id v191 = [v104 andMatch:v190];

  *(void *)(v171 + 40) = v191;
  NSString v192 = String._bridgeToObjectiveC()();
  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v104 fieldMatch:v192 fieldRegex:v193];

  *(void *)(v171 + 48) = v194;
  NSString v195 = String._bridgeToObjectiveC()();
  NSString v196 = String._bridgeToObjectiveC()();
  id v197 = [v104 fieldMatch:v195 fieldRegex:v196];

  *(void *)(v171 + 56) = v197;
  specialized Array._endMutation()(v198);
  Class v199 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v171);
  id v200 = [v104 orMatch:v199];

  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v109 TPPBPolicyKeyViewMappingWithView:v201 matchingRule:v200];

  v103[15] = v202;
  uint64_t v203 = swift_allocObject(v347, 48LL, 7LL);
  *(_OWORD *)(v203 + 16) = xmmword_1001DE790;
  NSString v204 = String._bridgeToObjectiveC()();
  NSString v205 = String._bridgeToObjectiveC()();
  id v206 = [v104 fieldMatch:v204 fieldRegex:v205];

  *(void *)(v203 + 32) = v206;
  uint64_t v207 = swift_allocObject(v347, 56LL, 7LL);
  *(_OWORD *)(v207 + 16) = xmmword_1001DE740;
  NSString v208 = String._bridgeToObjectiveC()();
  NSString v209 = String._bridgeToObjectiveC()();
  id v210 = [v104 fieldMatch:v208 fieldRegex:v209];

  *(void *)(v207 + 32) = v210;
  NSString v211 = String._bridgeToObjectiveC()();
  NSString v212 = String._bridgeToObjectiveC()();
  id v213 = [v104 fieldMatch:v211 fieldRegex:v212];

  *(void *)(v207 + 40) = v213;
  NSString v214 = String._bridgeToObjectiveC()();
  NSString v215 = String._bridgeToObjectiveC()();
  id v216 = [v104 fieldMatch:v214 fieldRegex:v215];

  *(void *)(v207 + 48) = v216;
  specialized Array._endMutation()(v217);
  Class v218 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v207);
  id v219 = [v104 andMatch:v218];

  *(void *)(v203 + 40) = v219;
  specialized Array._endMutation()(v220);
  Class v221 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v203);
  id v222 = [v104 orMatch:v221];

  NSString v223 = String._bridgeToObjectiveC()();
  id v224 = [v109 TPPBPolicyKeyViewMappingWithView:v223 matchingRule:v222];

  v103[16] = v224;
  uint64_t v225 = swift_allocObject(v347, 144LL, 7LL);
  *(_OWORD *)(v225 + 16) = xmmword_1001DE7B0;
  NSString v226 = String._bridgeToObjectiveC()();
  NSString v227 = String._bridgeToObjectiveC()();
  id v228 = [v104 fieldMatch:v226 fieldRegex:v227];

  *(void *)(v225 + 32) = v228;
  NSString v229 = String._bridgeToObjectiveC()();
  NSString v230 = String._bridgeToObjectiveC()();
  id v231 = [v104 fieldMatch:v229 fieldRegex:v230];

  *(void *)(v225 + 40) = v231;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v104 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v225 + 48) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v104 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v225 + 56) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v104 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v225 + 64) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v104 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v225 + 72) = v243;
  NSString v244 = String._bridgeToObjectiveC()();
  NSString v245 = String._bridgeToObjectiveC()();
  id v246 = [v104 fieldMatch:v244 fieldRegex:v245];

  *(void *)(v225 + 80) = v246;
  NSString v247 = String._bridgeToObjectiveC()();
  NSString v248 = String._bridgeToObjectiveC()();
  id v249 = [v104 fieldMatch:v247 fieldRegex:v248];

  *(void *)(v225 + 88) = v249;
  NSString v250 = String._bridgeToObjectiveC()();
  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v104 fieldMatch:v250 fieldRegex:v251];

  *(void *)(v225 + 96) = v252;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v104 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v225 + 104) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v104 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v225 + 112) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v104 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v225 + 120) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v104 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v225 + 128) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v104 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v225 + 136) = v267;
  specialized Array._endMutation()(v268);
  Class v269 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v225);
  id v270 = [v104 orMatch:v269];

  NSString v271 = String._bridgeToObjectiveC()();
  id v272 = [v109 TPPBPolicyKeyViewMappingWithView:v271 matchingRule:v270];

  v103[17] = v272;
  uint64_t v273 = swift_allocObject(v347, 48LL, 7LL);
  *(_OWORD *)(v273 + 16) = xmmword_1001DE790;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v104 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v273 + 32) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v104 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v273 + 40) = v279;
  specialized Array._endMutation()(v280);
  Class v281 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v273);
  id v282 = [v104 orMatch:v281];

  NSString v283 = String._bridgeToObjectiveC()();
  id v284 = [v109 TPPBPolicyKeyViewMappingWithView:v283 matchingRule:v282];

  v103[18] = v284;
  uint64_t v285 = swift_allocObject(v347, 112LL, 7LL);
  *(_OWORD *)(v285 + 16) = xmmword_1001DE810;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v104 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v285 + 32) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v104 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v285 + 40) = v291;
  NSString v292 = String._bridgeToObjectiveC()();
  NSString v293 = String._bridgeToObjectiveC()();
  id v294 = [v104 fieldMatch:v292 fieldRegex:v293];

  *(void *)(v285 + 48) = v294;
  NSString v295 = String._bridgeToObjectiveC()();
  NSString v296 = String._bridgeToObjectiveC()();
  id v297 = [v104 fieldMatch:v295 fieldRegex:v296];

  *(void *)(v285 + 56) = v297;
  NSString v298 = String._bridgeToObjectiveC()();
  NSString v299 = String._bridgeToObjectiveC()();
  id v300 = [v104 fieldMatch:v298 fieldRegex:v299];

  *(void *)(v285 + 64) = v300;
  NSString v301 = String._bridgeToObjectiveC()();
  NSString v302 = String._bridgeToObjectiveC()();
  id v303 = [v104 fieldMatch:v301 fieldRegex:v302];

  *(void *)(v285 + 72) = v303;
  NSString v304 = String._bridgeToObjectiveC()();
  NSString v305 = String._bridgeToObjectiveC()();
  id v306 = [v104 fieldMatch:v304 fieldRegex:v305];

  *(void *)(v285 + 80) = v306;
  NSString v307 = String._bridgeToObjectiveC()();
  NSString v308 = String._bridgeToObjectiveC()();
  id v309 = [v104 fieldMatch:v307 fieldRegex:v308];

  *(void *)(v285 + 88) = v309;
  NSString v310 = String._bridgeToObjectiveC()();
  NSString v311 = String._bridgeToObjectiveC()();
  id v312 = [v104 fieldMatch:v310 fieldRegex:v311];

  *(void *)(v285 + 96) = v312;
  NSString v313 = String._bridgeToObjectiveC()();
  NSString v314 = String._bridgeToObjectiveC()();
  id v315 = [v104 fieldMatch:v313 fieldRegex:v314];

  *(void *)(v285 + 104) = v315;
  specialized Array._endMutation()(v316);
  uint64_t v317 = v285;
  Class v318 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v317);
  id v319 = [v104 orMatch:v318];

  NSString v320 = String._bridgeToObjectiveC()();
  id v321 = [v346 TPPBPolicyKeyViewMappingWithView:v320 matchingRule:v319];

  v103[19] = v321;
  uint64_t v322 = swift_allocObject(v347, 56LL, 7LL);
  *(_OWORD *)(v322 + 16) = xmmword_1001DE740;
  NSString v323 = String._bridgeToObjectiveC()();
  NSString v324 = String._bridgeToObjectiveC()();
  id v325 = [v104 fieldMatch:v323 fieldRegex:v324];

  *(void *)(v322 + 32) = v325;
  NSString v326 = String._bridgeToObjectiveC()();
  NSString v327 = String._bridgeToObjectiveC()();
  id v328 = [v104 fieldMatch:v326 fieldRegex:v327];

  *(void *)(v322 + 40) = v328;
  NSString v329 = String._bridgeToObjectiveC()();
  NSString v330 = String._bridgeToObjectiveC()();
  id v331 = [v104 fieldMatch:v329 fieldRegex:v330];

  *(void *)(v322 + 48) = v331;
  specialized Array._endMutation()(v332);
  Class v333 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v322);
  id v334 = [v104 orMatch:v333];

  NSString v335 = String._bridgeToObjectiveC()();
  id v336 = [v346 TPPBPolicyKeyViewMappingWithView:v335 matchingRule:v334];

  v103[20] = v336;
  id v337 = [v104 trueMatch];
  NSString v338 = String._bridgeToObjectiveC()();
  id v339 = [v346 TPPBPolicyKeyViewMappingWithView:v338 matchingRule:v337];

  v103[21] = v339;
  specialized Array._endMutation()(v340);
  id v341 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 15LL,  v345,  v344,  v343,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v103,  (uint64_t)&off_100232528,  (uint64_t)&off_100232598,  (uint64_t)&off_1002325C8,  (uint64_t)&off_100232608,  1LL);
}

unint64_t sub_10002D46C()
{
  return 0xD000000000000D6CLL;
}

id sub_10002D488()
{
  uint64_t v339 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v339, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v338 = v0;
  uint64_t v30 = swift_allocObject(v339, 176LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE800;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v33 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v30 + 152) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v33 TPPBPolicyCategoriesByViewWithView:v80 categories:v81];

  *(void *)(v30 + 160) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v33 TPPBPolicyCategoriesByViewWithView:v83 categories:v84];

  *(void *)(v30 + 168) = v85;
  specialized Array._endMutation()(v86);
  uint64_t v337 = v30;
  uint64_t v87 = swift_allocObject(v339, 72LL, 7LL);
  *(_OWORD *)(v87 + 16) = xmmword_1001DE7D0;
  NSString v88 = String._bridgeToObjectiveC()();
  Class v89 = Array._bridgeToObjectiveC()().super.isa;
  Class v90 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v91 = [v90 TPPBPolicyIntroducersByCategoryWithCategory:v88 introducers:v89];

  *(void *)(v87 + 32) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v90 TPPBPolicyIntroducersByCategoryWithCategory:v92 introducers:v93];

  *(void *)(v87 + 40) = v94;
  NSString v95 = String._bridgeToObjectiveC()();
  Class v96 = Array._bridgeToObjectiveC()().super.isa;
  id v97 = [v90 TPPBPolicyIntroducersByCategoryWithCategory:v95 introducers:v96];

  *(void *)(v87 + 48) = v97;
  NSString v98 = String._bridgeToObjectiveC()();
  Class v99 = Array._bridgeToObjectiveC()().super.isa;
  id v100 = [v90 TPPBPolicyIntroducersByCategoryWithCategory:v98 introducers:v99];

  *(void *)(v87 + 56) = v100;
  NSString v101 = String._bridgeToObjectiveC()();
  Class v102 = Array._bridgeToObjectiveC()().super.isa;
  id v103 = [v90 TPPBPolicyIntroducersByCategoryWithCategory:v101 introducers:v102];

  *(void *)(v87 + 64) = v103;
  specialized Array._endMutation()(v104);
  uint64_t v336 = v87;
  uint64_t v105 = swift_allocObject(v339, 184LL, 7LL);
  *(_OWORD *)(v105 + 16) = xmmword_1001DE820;
  NSString v106 = (void *)v105;
  id v107 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v108 = String._bridgeToObjectiveC()();
  NSString v109 = String._bridgeToObjectiveC()();
  id v110 = [v107 fieldMatch:v108 fieldRegex:v109];

  NSString v111 = String._bridgeToObjectiveC()();
  NSString v112 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v113 = [v112 TPPBPolicyKeyViewMappingWithView:v111 matchingRule:v110];

  v106[4] = v113;
  NSString v114 = String._bridgeToObjectiveC()();
  NSString v115 = String._bridgeToObjectiveC()();
  id v116 = [v107 fieldMatch:v114 fieldRegex:v115];

  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v112 TPPBPolicyKeyViewMappingWithView:v117 matchingRule:v116];

  v106[5] = v118;
  NSString v119 = String._bridgeToObjectiveC()();
  NSString v120 = String._bridgeToObjectiveC()();
  id v121 = [v107 fieldMatch:v119 fieldRegex:v120];

  NSString v122 = String._bridgeToObjectiveC()();
  id v123 = [v112 TPPBPolicyKeyViewMappingWithView:v122 matchingRule:v121];

  v106[6] = v123;
  NSString v124 = String._bridgeToObjectiveC()();
  NSString v125 = String._bridgeToObjectiveC()();
  id v126 = [v107 fieldMatch:v124 fieldRegex:v125];

  NSString v127 = String._bridgeToObjectiveC()();
  id v128 = [v112 TPPBPolicyKeyViewMappingWithView:v127 matchingRule:v126];

  v106[7] = v128;
  NSString v129 = String._bridgeToObjectiveC()();
  NSString v130 = String._bridgeToObjectiveC()();
  id v131 = [v107 fieldMatch:v129 fieldRegex:v130];

  NSString v132 = String._bridgeToObjectiveC()();
  id v133 = [v112 TPPBPolicyKeyViewMappingWithView:v132 matchingRule:v131];

  v106[8] = v133;
  NSString v134 = String._bridgeToObjectiveC()();
  NSString v135 = String._bridgeToObjectiveC()();
  id v136 = [v107 fieldMatch:v134 fieldRegex:v135];

  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [v112 TPPBPolicyKeyViewMappingWithView:v137 matchingRule:v136];

  v106[9] = v138;
  NSString v139 = String._bridgeToObjectiveC()();
  NSString v140 = String._bridgeToObjectiveC()();
  id v141 = [v107 fieldMatch:v139 fieldRegex:v140];

  NSString v142 = String._bridgeToObjectiveC()();
  id v143 = [v112 TPPBPolicyKeyViewMappingWithView:v142 matchingRule:v141];

  v106[10] = v143;
  uint64_t v144 = swift_allocObject(v339, 56LL, 7LL);
  *(_OWORD *)(v144 + 16) = xmmword_1001DE740;
  NSString v145 = String._bridgeToObjectiveC()();
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v107 fieldMatch:v145 fieldRegex:v146];

  *(void *)(v144 + 32) = v147;
  NSString v148 = String._bridgeToObjectiveC()();
  NSString v149 = String._bridgeToObjectiveC()();
  id v150 = [v107 fieldMatch:v148 fieldRegex:v149];

  *(void *)(v144 + 40) = v150;
  NSString v151 = String._bridgeToObjectiveC()();
  NSString v152 = String._bridgeToObjectiveC()();
  id v153 = [v107 fieldMatch:v151 fieldRegex:v152];

  *(void *)(v144 + 48) = v153;
  specialized Array._endMutation()(v154);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v155 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v144);
  id v156 = [v107 orMatch:v155];

  NSString v157 = String._bridgeToObjectiveC()();
  id v158 = [v112 TPPBPolicyKeyViewMappingWithView:v157 matchingRule:v156];

  v106[11] = v158;
  NSString v159 = String._bridgeToObjectiveC()();
  NSString v160 = String._bridgeToObjectiveC()();
  id v161 = [v107 fieldMatch:v159 fieldRegex:v160];

  NSString v162 = String._bridgeToObjectiveC()();
  id v163 = [v112 TPPBPolicyKeyViewMappingWithView:v162 matchingRule:v161];

  v106[12] = v163;
  NSString v164 = String._bridgeToObjectiveC()();
  NSString v165 = String._bridgeToObjectiveC()();
  id v166 = [v107 fieldMatch:v164 fieldRegex:v165];

  NSString v167 = String._bridgeToObjectiveC()();
  id v168 = [v112 TPPBPolicyKeyViewMappingWithView:v167 matchingRule:v166];

  v106[13] = v168;
  NSString v169 = String._bridgeToObjectiveC()();
  NSString v170 = String._bridgeToObjectiveC()();
  id v171 = [v107 fieldMatch:v169 fieldRegex:v170];

  NSString v172 = String._bridgeToObjectiveC()();
  id v335 = v112;
  id v173 = [v112 TPPBPolicyKeyViewMappingWithView:v172 matchingRule:v171];

  v106[14] = v173;
  NSString v174 = String._bridgeToObjectiveC()();
  NSString v175 = String._bridgeToObjectiveC()();
  id v176 = [v107 fieldMatch:v174 fieldRegex:v175];

  NSString v177 = String._bridgeToObjectiveC()();
  id v178 = [v112 TPPBPolicyKeyViewMappingWithView:v177 matchingRule:v176];

  v106[15] = v178;
  uint64_t v179 = swift_allocObject(v339, 64LL, 7LL);
  *(_OWORD *)(v179 + 16) = xmmword_1001DE770;
  uint64_t v180 = swift_allocObject(v339, 48LL, 7LL);
  *(_OWORD *)(v180 + 16) = xmmword_1001DE790;
  NSString v181 = String._bridgeToObjectiveC()();
  NSString v182 = String._bridgeToObjectiveC()();
  id v183 = [v107 fieldMatch:v181 fieldRegex:v182];

  *(void *)(v180 + 32) = v183;
  NSString v184 = String._bridgeToObjectiveC()();
  NSString v185 = String._bridgeToObjectiveC()();
  id v186 = [v107 fieldMatch:v184 fieldRegex:v185];

  *(void *)(v180 + 40) = v186;
  specialized Array._endMutation()(v187);
  Class v188 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v180);
  id v189 = [v107 andMatch:v188];

  *(void *)(v179 + 32) = v189;
  uint64_t v190 = swift_allocObject(v339, 48LL, 7LL);
  *(_OWORD *)(v190 + 16) = xmmword_1001DE790;
  NSString v191 = String._bridgeToObjectiveC()();
  NSString v192 = String._bridgeToObjectiveC()();
  id v193 = [v107 fieldMatch:v191 fieldRegex:v192];

  *(void *)(v190 + 32) = v193;
  NSString v194 = String._bridgeToObjectiveC()();
  NSString v195 = String._bridgeToObjectiveC()();
  id v196 = [v107 fieldMatch:v194 fieldRegex:v195];

  *(void *)(v190 + 40) = v196;
  specialized Array._endMutation()(v197);
  Class v198 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v190);
  id v199 = [v107 andMatch:v198];

  *(void *)(v179 + 40) = v199;
  NSString v200 = String._bridgeToObjectiveC()();
  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v107 fieldMatch:v200 fieldRegex:v201];

  *(void *)(v179 + 48) = v202;
  NSString v203 = String._bridgeToObjectiveC()();
  NSString v204 = String._bridgeToObjectiveC()();
  id v205 = [v107 fieldMatch:v203 fieldRegex:v204];

  *(void *)(v179 + 56) = v205;
  specialized Array._endMutation()(v206);
  Class v207 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v179);
  id v208 = [v107 orMatch:v207];

  NSString v209 = String._bridgeToObjectiveC()();
  id v210 = [v335 TPPBPolicyKeyViewMappingWithView:v209 matchingRule:v208];

  v106[16] = v210;
  uint64_t v211 = swift_allocObject(v339, 48LL, 7LL);
  *(_OWORD *)(v211 + 16) = xmmword_1001DE790;
  NSString v212 = String._bridgeToObjectiveC()();
  NSString v213 = String._bridgeToObjectiveC()();
  id v214 = [v107 fieldMatch:v212 fieldRegex:v213];

  *(void *)(v211 + 32) = v214;
  uint64_t v215 = swift_allocObject(v339, 56LL, 7LL);
  *(_OWORD *)(v215 + 16) = xmmword_1001DE740;
  NSString v216 = String._bridgeToObjectiveC()();
  NSString v217 = String._bridgeToObjectiveC()();
  id v218 = [v107 fieldMatch:v216 fieldRegex:v217];

  *(void *)(v215 + 32) = v218;
  NSString v219 = String._bridgeToObjectiveC()();
  NSString v220 = String._bridgeToObjectiveC()();
  id v221 = [v107 fieldMatch:v219 fieldRegex:v220];

  *(void *)(v215 + 40) = v221;
  NSString v222 = String._bridgeToObjectiveC()();
  NSString v223 = String._bridgeToObjectiveC()();
  id v224 = [v107 fieldMatch:v222 fieldRegex:v223];

  *(void *)(v215 + 48) = v224;
  specialized Array._endMutation()(v225);
  Class v226 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v215);
  id v227 = [v107 andMatch:v226];

  *(void *)(v211 + 40) = v227;
  specialized Array._endMutation()(v228);
  Class v229 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v211);
  id v230 = [v107 orMatch:v229];

  NSString v231 = String._bridgeToObjectiveC()();
  id v232 = [v335 TPPBPolicyKeyViewMappingWithView:v231 matchingRule:v230];

  v106[17] = v232;
  uint64_t v233 = swift_allocObject(v339, 144LL, 7LL);
  *(_OWORD *)(v233 + 16) = xmmword_1001DE7B0;
  NSString v234 = String._bridgeToObjectiveC()();
  NSString v235 = String._bridgeToObjectiveC()();
  id v236 = [v107 fieldMatch:v234 fieldRegex:v235];

  *(void *)(v233 + 32) = v236;
  NSString v237 = String._bridgeToObjectiveC()();
  NSString v238 = String._bridgeToObjectiveC()();
  id v239 = [v107 fieldMatch:v237 fieldRegex:v238];

  *(void *)(v233 + 40) = v239;
  NSString v240 = String._bridgeToObjectiveC()();
  NSString v241 = String._bridgeToObjectiveC()();
  id v242 = [v107 fieldMatch:v240 fieldRegex:v241];

  *(void *)(v233 + 48) = v242;
  NSString v243 = String._bridgeToObjectiveC()();
  NSString v244 = String._bridgeToObjectiveC()();
  id v245 = [v107 fieldMatch:v243 fieldRegex:v244];

  *(void *)(v233 + 56) = v245;
  NSString v246 = String._bridgeToObjectiveC()();
  NSString v247 = String._bridgeToObjectiveC()();
  id v248 = [v107 fieldMatch:v246 fieldRegex:v247];

  *(void *)(v233 + 64) = v248;
  NSString v249 = String._bridgeToObjectiveC()();
  NSString v250 = String._bridgeToObjectiveC()();
  id v251 = [v107 fieldMatch:v249 fieldRegex:v250];

  *(void *)(v233 + 72) = v251;
  NSString v252 = String._bridgeToObjectiveC()();
  NSString v253 = String._bridgeToObjectiveC()();
  id v254 = [v107 fieldMatch:v252 fieldRegex:v253];

  *(void *)(v233 + 80) = v254;
  NSString v255 = String._bridgeToObjectiveC()();
  NSString v256 = String._bridgeToObjectiveC()();
  id v257 = [v107 fieldMatch:v255 fieldRegex:v256];

  *(void *)(v233 + 88) = v257;
  NSString v258 = String._bridgeToObjectiveC()();
  NSString v259 = String._bridgeToObjectiveC()();
  id v260 = [v107 fieldMatch:v258 fieldRegex:v259];

  *(void *)(v233 + 96) = v260;
  NSString v261 = String._bridgeToObjectiveC()();
  NSString v262 = String._bridgeToObjectiveC()();
  id v263 = [v107 fieldMatch:v261 fieldRegex:v262];

  *(void *)(v233 + 104) = v263;
  NSString v264 = String._bridgeToObjectiveC()();
  NSString v265 = String._bridgeToObjectiveC()();
  id v266 = [v107 fieldMatch:v264 fieldRegex:v265];

  *(void *)(v233 + 112) = v266;
  NSString v267 = String._bridgeToObjectiveC()();
  NSString v268 = String._bridgeToObjectiveC()();
  id v269 = [v107 fieldMatch:v267 fieldRegex:v268];

  *(void *)(v233 + 120) = v269;
  NSString v270 = String._bridgeToObjectiveC()();
  NSString v271 = String._bridgeToObjectiveC()();
  id v272 = [v107 fieldMatch:v270 fieldRegex:v271];

  *(void *)(v233 + 128) = v272;
  NSString v273 = String._bridgeToObjectiveC()();
  NSString v274 = String._bridgeToObjectiveC()();
  id v275 = [v107 fieldMatch:v273 fieldRegex:v274];

  *(void *)(v233 + 136) = v275;
  specialized Array._endMutation()(v276);
  Class v277 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v233);
  id v278 = [v107 orMatch:v277];

  NSString v279 = String._bridgeToObjectiveC()();
  id v280 = [v335 TPPBPolicyKeyViewMappingWithView:v279 matchingRule:v278];

  v106[18] = v280;
  uint64_t v281 = swift_allocObject(v339, 48LL, 7LL);
  *(_OWORD *)(v281 + 16) = xmmword_1001DE790;
  NSString v282 = String._bridgeToObjectiveC()();
  NSString v283 = String._bridgeToObjectiveC()();
  id v284 = [v107 fieldMatch:v282 fieldRegex:v283];

  *(void *)(v281 + 32) = v284;
  NSString v285 = String._bridgeToObjectiveC()();
  NSString v286 = String._bridgeToObjectiveC()();
  id v287 = [v107 fieldMatch:v285 fieldRegex:v286];

  *(void *)(v281 + 40) = v287;
  specialized Array._endMutation()(v288);
  Class v289 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v281);
  id v290 = [v107 orMatch:v289];

  NSString v291 = String._bridgeToObjectiveC()();
  id v292 = [v335 TPPBPolicyKeyViewMappingWithView:v291 matchingRule:v290];

  v106[19] = v292;
  uint64_t v293 = swift_allocObject(v339, 72LL, 7LL);
  *(_OWORD *)(v293 + 16) = xmmword_1001DE7D0;
  NSString v294 = String._bridgeToObjectiveC()();
  NSString v295 = String._bridgeToObjectiveC()();
  id v296 = [v107 fieldMatch:v294 fieldRegex:v295];

  *(void *)(v293 + 32) = v296;
  NSString v297 = String._bridgeToObjectiveC()();
  NSString v298 = String._bridgeToObjectiveC()();
  id v299 = [v107 fieldMatch:v297 fieldRegex:v298];

  *(void *)(v293 + 40) = v299;
  NSString v300 = String._bridgeToObjectiveC()();
  NSString v301 = String._bridgeToObjectiveC()();
  id v302 = [v107 fieldMatch:v300 fieldRegex:v301];

  *(void *)(v293 + 48) = v302;
  NSString v303 = String._bridgeToObjectiveC()();
  NSString v304 = String._bridgeToObjectiveC()();
  id v305 = [v107 fieldMatch:v303 fieldRegex:v304];

  *(void *)(v293 + 56) = v305;
  NSString v306 = String._bridgeToObjectiveC()();
  NSString v307 = String._bridgeToObjectiveC()();
  id v308 = [v107 fieldMatch:v306 fieldRegex:v307];

  *(void *)(v293 + 64) = v308;
  specialized Array._endMutation()(v309);
  Class v310 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v293);
  id v311 = [v107 orMatch:v310];

  NSString v312 = String._bridgeToObjectiveC()();
  id v313 = [v335 TPPBPolicyKeyViewMappingWithView:v312 matchingRule:v311];

  v106[20] = v313;
  uint64_t v314 = swift_allocObject(v339, 56LL, 7LL);
  *(_OWORD *)(v314 + 16) = xmmword_1001DE740;
  NSString v315 = String._bridgeToObjectiveC()();
  NSString v316 = String._bridgeToObjectiveC()();
  id v317 = [v107 fieldMatch:v315 fieldRegex:v316];

  *(void *)(v314 + 32) = v317;
  NSString v318 = String._bridgeToObjectiveC()();
  NSString v319 = String._bridgeToObjectiveC()();
  id v320 = [v107 fieldMatch:v318 fieldRegex:v319];

  *(void *)(v314 + 40) = v320;
  NSString v321 = String._bridgeToObjectiveC()();
  NSString v322 = String._bridgeToObjectiveC()();
  id v323 = [v107 fieldMatch:v321 fieldRegex:v322];

  *(void *)(v314 + 48) = v323;
  specialized Array._endMutation()(v324);
  Class v325 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v314);
  id v326 = [v107 orMatch:v325];

  NSString v327 = String._bridgeToObjectiveC()();
  id v328 = [v335 TPPBPolicyKeyViewMappingWithView:v327 matchingRule:v326];

  v106[21] = v328;
  id v329 = [v107 trueMatch];
  NSString v330 = String._bridgeToObjectiveC()();
  id v331 = [v335 TPPBPolicyKeyViewMappingWithView:v330 matchingRule:v329];

  v106[22] = v331;
  specialized Array._endMutation()(v332);
  id v333 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 16LL,  v338,  v337,  v336,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v106,  (uint64_t)&off_100232CC8,  (uint64_t)&off_100232D38,  (uint64_t)&off_100232D68,  (uint64_t)&off_100232DA8,  1LL);
}

unint64_t sub_10002FDF8()
{
  return 0xD000000000000F9CLL;
}

id sub_10002FE14()
{
  uint64_t v371 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v371, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v369 = v0;
  uint64_t v30 = swift_allocObject(v371, 192LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE830;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v33 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v30 + 152) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v33 TPPBPolicyCategoriesByViewWithView:v80 categories:v81];

  *(void *)(v30 + 160) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v33 TPPBPolicyCategoriesByViewWithView:v83 categories:v84];

  *(void *)(v30 + 168) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v33 TPPBPolicyCategoriesByViewWithView:v86 categories:v87];

  *(void *)(v30 + 176) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v33 TPPBPolicyCategoriesByViewWithView:v89 categories:v90];

  *(void *)(v30 + 184) = v91;
  specialized Array._endMutation()(v92);
  uint64_t v368 = v30;
  uint64_t v93 = swift_allocObject(v371, 72LL, 7LL);
  *(_OWORD *)(v93 + 16) = xmmword_1001DE7D0;
  NSString v94 = String._bridgeToObjectiveC()();
  Class v95 = Array._bridgeToObjectiveC()().super.isa;
  Class v96 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v97 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v94 introducers:v95];

  *(void *)(v93 + 32) = v97;
  NSString v98 = String._bridgeToObjectiveC()();
  Class v99 = Array._bridgeToObjectiveC()().super.isa;
  id v100 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v98 introducers:v99];

  *(void *)(v93 + 40) = v100;
  NSString v101 = String._bridgeToObjectiveC()();
  Class v102 = Array._bridgeToObjectiveC()().super.isa;
  id v103 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v101 introducers:v102];

  *(void *)(v93 + 48) = v103;
  NSString v104 = String._bridgeToObjectiveC()();
  Class v105 = Array._bridgeToObjectiveC()().super.isa;
  id v106 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v104 introducers:v105];

  *(void *)(v93 + 56) = v106;
  NSString v107 = String._bridgeToObjectiveC()();
  Class v108 = Array._bridgeToObjectiveC()().super.isa;
  id v109 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v107 introducers:v108];

  *(void *)(v93 + 64) = v109;
  specialized Array._endMutation()(v110);
  uint64_t v367 = v93;
  uint64_t v111 = swift_allocObject(v371, 200LL, 7LL);
  *(_OWORD *)(v111 + 16) = xmmword_1001DE840;
  NSString v112 = (void *)v111;
  id v113 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v114 = String._bridgeToObjectiveC()();
  NSString v115 = String._bridgeToObjectiveC()();
  id v116 = [v113 fieldMatch:v114 fieldRegex:v115];

  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v119 = [v118 TPPBPolicyKeyViewMappingWithView:v117 matchingRule:v116];

  v112[4] = v119;
  NSString v120 = String._bridgeToObjectiveC()();
  NSString v121 = String._bridgeToObjectiveC()();
  id v122 = [v113 fieldMatch:v120 fieldRegex:v121];

  NSString v123 = String._bridgeToObjectiveC()();
  id v124 = [v118 TPPBPolicyKeyViewMappingWithView:v123 matchingRule:v122];

  v112[5] = v124;
  NSString v125 = String._bridgeToObjectiveC()();
  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v113 fieldMatch:v125 fieldRegex:v126];

  NSString v128 = String._bridgeToObjectiveC()();
  id v129 = [v118 TPPBPolicyKeyViewMappingWithView:v128 matchingRule:v127];

  v112[6] = v129;
  NSString v130 = String._bridgeToObjectiveC()();
  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v113 fieldMatch:v130 fieldRegex:v131];

  NSString v133 = String._bridgeToObjectiveC()();
  id v134 = [v118 TPPBPolicyKeyViewMappingWithView:v133 matchingRule:v132];

  v112[7] = v134;
  NSString v135 = String._bridgeToObjectiveC()();
  NSString v136 = String._bridgeToObjectiveC()();
  id v137 = [v113 fieldMatch:v135 fieldRegex:v136];

  NSString v138 = String._bridgeToObjectiveC()();
  id v139 = [v118 TPPBPolicyKeyViewMappingWithView:v138 matchingRule:v137];

  v112[8] = v139;
  NSString v140 = String._bridgeToObjectiveC()();
  NSString v141 = String._bridgeToObjectiveC()();
  id v142 = [v113 fieldMatch:v140 fieldRegex:v141];

  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v118 TPPBPolicyKeyViewMappingWithView:v143 matchingRule:v142];

  v112[9] = v144;
  NSString v145 = String._bridgeToObjectiveC()();
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v113 fieldMatch:v145 fieldRegex:v146];

  NSString v148 = String._bridgeToObjectiveC()();
  id v149 = [v118 TPPBPolicyKeyViewMappingWithView:v148 matchingRule:v147];

  v112[10] = v149;
  uint64_t v150 = swift_allocObject(v371, 56LL, 7LL);
  *(_OWORD *)(v150 + 16) = xmmword_1001DE740;
  NSString v151 = String._bridgeToObjectiveC()();
  NSString v152 = String._bridgeToObjectiveC()();
  id v153 = [v113 fieldMatch:v151 fieldRegex:v152];

  *(void *)(v150 + 32) = v153;
  NSString v154 = String._bridgeToObjectiveC()();
  NSString v155 = String._bridgeToObjectiveC()();
  id v156 = [v113 fieldMatch:v154 fieldRegex:v155];

  *(void *)(v150 + 40) = v156;
  NSString v157 = String._bridgeToObjectiveC()();
  NSString v158 = String._bridgeToObjectiveC()();
  id v159 = [v113 fieldMatch:v157 fieldRegex:v158];

  *(void *)(v150 + 48) = v159;
  specialized Array._endMutation()(v160);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v161 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v150);
  id v162 = [v113 orMatch:v161];

  NSString v163 = String._bridgeToObjectiveC()();
  id v164 = [v118 TPPBPolicyKeyViewMappingWithView:v163 matchingRule:v162];

  v112[11] = v164;
  NSString v165 = String._bridgeToObjectiveC()();
  NSString v166 = String._bridgeToObjectiveC()();
  id v167 = [v113 fieldMatch:v165 fieldRegex:v166];

  NSString v168 = String._bridgeToObjectiveC()();
  id v169 = [v118 TPPBPolicyKeyViewMappingWithView:v168 matchingRule:v167];

  v112[12] = v169;
  NSString v170 = String._bridgeToObjectiveC()();
  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v113 fieldMatch:v170 fieldRegex:v171];

  NSString v173 = String._bridgeToObjectiveC()();
  id v174 = [v118 TPPBPolicyKeyViewMappingWithView:v173 matchingRule:v172];

  v112[13] = v174;
  NSString v175 = String._bridgeToObjectiveC()();
  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v113 fieldMatch:v175 fieldRegex:v176];

  NSString v178 = String._bridgeToObjectiveC()();
  id v179 = [v118 TPPBPolicyKeyViewMappingWithView:v178 matchingRule:v177];

  v112[14] = v179;
  NSString v180 = String._bridgeToObjectiveC()();
  NSString v181 = String._bridgeToObjectiveC()();
  id v182 = [v113 fieldMatch:v180 fieldRegex:v181];

  NSString v183 = String._bridgeToObjectiveC()();
  id v184 = [v118 TPPBPolicyKeyViewMappingWithView:v183 matchingRule:v182];

  v112[15] = v184;
  NSString v185 = String._bridgeToObjectiveC()();
  NSString v186 = String._bridgeToObjectiveC()();
  id v187 = [v113 fieldMatch:v185 fieldRegex:v186];

  NSString v188 = String._bridgeToObjectiveC()();
  id v370 = v118;
  id v189 = [v118 TPPBPolicyKeyViewMappingWithView:v188 matchingRule:v187];

  v112[16] = v189;
  NSString v190 = String._bridgeToObjectiveC()();
  NSString v191 = String._bridgeToObjectiveC()();
  id v192 = [v113 fieldMatch:v190 fieldRegex:v191];

  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v118 TPPBPolicyKeyViewMappingWithView:v193 matchingRule:v192];

  v112[17] = v194;
  uint64_t v195 = swift_allocObject(v371, 64LL, 7LL);
  *(_OWORD *)(v195 + 16) = xmmword_1001DE770;
  uint64_t v196 = swift_allocObject(v371, 48LL, 7LL);
  *(_OWORD *)(v196 + 16) = xmmword_1001DE790;
  NSString v197 = String._bridgeToObjectiveC()();
  NSString v198 = String._bridgeToObjectiveC()();
  id v199 = [v113 fieldMatch:v197 fieldRegex:v198];

  *(void *)(v196 + 32) = v199;
  NSString v200 = String._bridgeToObjectiveC()();
  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v113 fieldMatch:v200 fieldRegex:v201];

  *(void *)(v196 + 40) = v202;
  specialized Array._endMutation()(v203);
  Class v204 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v196);
  id v205 = [v113 andMatch:v204];

  *(void *)(v195 + 32) = v205;
  uint64_t v206 = swift_allocObject(v371, 48LL, 7LL);
  *(_OWORD *)(v206 + 16) = xmmword_1001DE790;
  NSString v207 = String._bridgeToObjectiveC()();
  NSString v208 = String._bridgeToObjectiveC()();
  id v209 = [v113 fieldMatch:v207 fieldRegex:v208];

  *(void *)(v206 + 32) = v209;
  NSString v210 = String._bridgeToObjectiveC()();
  NSString v211 = String._bridgeToObjectiveC()();
  id v212 = [v113 fieldMatch:v210 fieldRegex:v211];

  *(void *)(v206 + 40) = v212;
  specialized Array._endMutation()(v213);
  Class v214 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v206);
  id v215 = [v113 andMatch:v214];

  *(void *)(v195 + 40) = v215;
  NSString v216 = String._bridgeToObjectiveC()();
  NSString v217 = String._bridgeToObjectiveC()();
  id v218 = [v113 fieldMatch:v216 fieldRegex:v217];

  *(void *)(v195 + 48) = v218;
  NSString v219 = String._bridgeToObjectiveC()();
  NSString v220 = String._bridgeToObjectiveC()();
  id v221 = [v113 fieldMatch:v219 fieldRegex:v220];

  *(void *)(v195 + 56) = v221;
  specialized Array._endMutation()(v222);
  Class v223 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v195);
  id v224 = [v113 orMatch:v223];

  NSString v225 = String._bridgeToObjectiveC()();
  id v226 = [v118 TPPBPolicyKeyViewMappingWithView:v225 matchingRule:v224];

  v112[18] = v226;
  uint64_t v227 = swift_allocObject(v371, 48LL, 7LL);
  *(_OWORD *)(v227 + 16) = xmmword_1001DE790;
  NSString v228 = String._bridgeToObjectiveC()();
  NSString v229 = String._bridgeToObjectiveC()();
  id v230 = [v113 fieldMatch:v228 fieldRegex:v229];

  *(void *)(v227 + 32) = v230;
  uint64_t v231 = swift_allocObject(v371, 56LL, 7LL);
  *(_OWORD *)(v231 + 16) = xmmword_1001DE740;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v113 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v231 + 32) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v113 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v231 + 40) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v113 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v231 + 48) = v240;
  specialized Array._endMutation()(v241);
  Class v242 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v231);
  id v243 = [v113 andMatch:v242];

  *(void *)(v227 + 40) = v243;
  specialized Array._endMutation()(v244);
  Class v245 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v227);
  id v246 = [v113 orMatch:v245];

  NSString v247 = String._bridgeToObjectiveC()();
  id v248 = [v118 TPPBPolicyKeyViewMappingWithView:v247 matchingRule:v246];

  v112[19] = v248;
  uint64_t v249 = swift_allocObject(v371, 144LL, 7LL);
  *(_OWORD *)(v249 + 16) = xmmword_1001DE7B0;
  NSString v250 = String._bridgeToObjectiveC()();
  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v113 fieldMatch:v250 fieldRegex:v251];

  *(void *)(v249 + 32) = v252;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v113 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v249 + 40) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v113 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v249 + 48) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v113 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v249 + 56) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v113 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v249 + 64) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v113 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v249 + 72) = v267;
  NSString v268 = String._bridgeToObjectiveC()();
  NSString v269 = String._bridgeToObjectiveC()();
  id v270 = [v113 fieldMatch:v268 fieldRegex:v269];

  *(void *)(v249 + 80) = v270;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v113 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v249 + 88) = v273;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v113 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v249 + 96) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v113 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v249 + 104) = v279;
  NSString v280 = String._bridgeToObjectiveC()();
  NSString v281 = String._bridgeToObjectiveC()();
  id v282 = [v113 fieldMatch:v280 fieldRegex:v281];

  *(void *)(v249 + 112) = v282;
  NSString v283 = String._bridgeToObjectiveC()();
  NSString v284 = String._bridgeToObjectiveC()();
  id v285 = [v113 fieldMatch:v283 fieldRegex:v284];

  *(void *)(v249 + 120) = v285;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v113 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v249 + 128) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v113 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v249 + 136) = v291;
  specialized Array._endMutation()(v292);
  Class v293 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v249);
  id v294 = [v113 orMatch:v293];

  NSString v295 = String._bridgeToObjectiveC()();
  id v296 = [v118 TPPBPolicyKeyViewMappingWithView:v295 matchingRule:v294];

  v112[20] = v296;
  uint64_t v297 = swift_allocObject(v371, 48LL, 7LL);
  *(_OWORD *)(v297 + 16) = xmmword_1001DE790;
  NSString v298 = String._bridgeToObjectiveC()();
  NSString v299 = String._bridgeToObjectiveC()();
  id v300 = [v113 fieldMatch:v298 fieldRegex:v299];

  *(void *)(v297 + 32) = v300;
  NSString v301 = String._bridgeToObjectiveC()();
  NSString v302 = String._bridgeToObjectiveC()();
  id v303 = [v113 fieldMatch:v301 fieldRegex:v302];

  *(void *)(v297 + 40) = v303;
  specialized Array._endMutation()(v304);
  Class v305 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v297);
  id v306 = [v113 orMatch:v305];

  NSString v307 = String._bridgeToObjectiveC()();
  id v308 = [v118 TPPBPolicyKeyViewMappingWithView:v307 matchingRule:v306];

  v112[21] = v308;
  uint64_t v309 = swift_allocObject(v371, 112LL, 7LL);
  *(_OWORD *)(v309 + 16) = xmmword_1001DE810;
  NSString v310 = String._bridgeToObjectiveC()();
  NSString v311 = String._bridgeToObjectiveC()();
  id v312 = [v113 fieldMatch:v310 fieldRegex:v311];

  *(void *)(v309 + 32) = v312;
  NSString v313 = String._bridgeToObjectiveC()();
  NSString v314 = String._bridgeToObjectiveC()();
  id v315 = [v113 fieldMatch:v313 fieldRegex:v314];

  *(void *)(v309 + 40) = v315;
  NSString v316 = String._bridgeToObjectiveC()();
  NSString v317 = String._bridgeToObjectiveC()();
  id v318 = [v113 fieldMatch:v316 fieldRegex:v317];

  *(void *)(v309 + 48) = v318;
  NSString v319 = String._bridgeToObjectiveC()();
  NSString v320 = String._bridgeToObjectiveC()();
  id v321 = [v113 fieldMatch:v319 fieldRegex:v320];

  *(void *)(v309 + 56) = v321;
  NSString v322 = String._bridgeToObjectiveC()();
  NSString v323 = String._bridgeToObjectiveC()();
  id v324 = [v113 fieldMatch:v322 fieldRegex:v323];

  *(void *)(v309 + 64) = v324;
  NSString v325 = String._bridgeToObjectiveC()();
  NSString v326 = String._bridgeToObjectiveC()();
  id v327 = [v113 fieldMatch:v325 fieldRegex:v326];

  *(void *)(v309 + 72) = v327;
  NSString v328 = String._bridgeToObjectiveC()();
  NSString v329 = String._bridgeToObjectiveC()();
  id v330 = [v113 fieldMatch:v328 fieldRegex:v329];

  *(void *)(v309 + 80) = v330;
  NSString v331 = String._bridgeToObjectiveC()();
  NSString v332 = String._bridgeToObjectiveC()();
  id v333 = [v113 fieldMatch:v331 fieldRegex:v332];

  *(void *)(v309 + 88) = v333;
  NSString v334 = String._bridgeToObjectiveC()();
  NSString v335 = String._bridgeToObjectiveC()();
  id v336 = [v113 fieldMatch:v334 fieldRegex:v335];

  *(void *)(v309 + 96) = v336;
  NSString v337 = String._bridgeToObjectiveC()();
  NSString v338 = String._bridgeToObjectiveC()();
  id v339 = [v113 fieldMatch:v337 fieldRegex:v338];

  *(void *)(v309 + 104) = v339;
  specialized Array._endMutation()(v340);
  uint64_t v341 = v309;
  Class v342 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v341);
  id v343 = [v113 orMatch:v342];

  NSString v344 = String._bridgeToObjectiveC()();
  id v345 = [v370 TPPBPolicyKeyViewMappingWithView:v344 matchingRule:v343];

  v112[22] = v345;
  uint64_t v346 = swift_allocObject(v371, 56LL, 7LL);
  *(_OWORD *)(v346 + 16) = xmmword_1001DE740;
  NSString v347 = String._bridgeToObjectiveC()();
  NSString v348 = String._bridgeToObjectiveC()();
  id v349 = [v113 fieldMatch:v347 fieldRegex:v348];

  *(void *)(v346 + 32) = v349;
  NSString v350 = String._bridgeToObjectiveC()();
  NSString v351 = String._bridgeToObjectiveC()();
  id v352 = [v113 fieldMatch:v350 fieldRegex:v351];

  *(void *)(v346 + 40) = v352;
  NSString v353 = String._bridgeToObjectiveC()();
  NSString v354 = String._bridgeToObjectiveC()();
  id v355 = [v113 fieldMatch:v353 fieldRegex:v354];

  *(void *)(v346 + 48) = v355;
  specialized Array._endMutation()(v356);
  Class v357 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v346);
  id v358 = [v113 orMatch:v357];

  NSString v359 = String._bridgeToObjectiveC()();
  id v360 = [v370 TPPBPolicyKeyViewMappingWithView:v359 matchingRule:v358];

  v112[23] = v360;
  id v361 = [v113 trueMatch];
  NSString v362 = String._bridgeToObjectiveC()();
  id v363 = [v370 TPPBPolicyKeyViewMappingWithView:v362 matchingRule:v361];

  v112[24] = v363;
  specialized Array._endMutation()(v364);
  id v365 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 17LL,  v369,  v368,  v367,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v112,  (uint64_t)&off_1002334F8,  (uint64_t)&off_100233568,  (uint64_t)&off_100233598,  (uint64_t)&off_1002335D8,  1LL);
}

unint64_t sub_100032B68()
{
  return 0xD000000000001060LL;
}

id sub_100032B84()
{
  uint64_t v377 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v377, 104LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE7E0;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  specialized Array._endMutation()(v29);
  uint64_t v375 = v0;
  uint64_t v30 = swift_allocObject(v377, 192LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1001DE830;
  NSString v31 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v33 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v34 = [v33 TPPBPolicyCategoriesByViewWithView:v31 categories:isa];

  *(void *)(v30 + 32) = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  id v37 = [v33 TPPBPolicyCategoriesByViewWithView:v35 categories:v36];

  *(void *)(v30 + 40) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v33 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v30 + 48) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v33 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v30 + 56) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v33 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v30 + 64) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v33 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v30 + 72) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v33 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v30 + 80) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v33 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v30 + 88) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v33 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v30 + 96) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v33 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v30 + 104) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v33 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v30 + 112) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v33 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v30 + 120) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v33 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v30 + 128) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v33 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v30 + 136) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v33 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v30 + 144) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v33 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v30 + 152) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v33 TPPBPolicyCategoriesByViewWithView:v80 categories:v81];

  *(void *)(v30 + 160) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v33 TPPBPolicyCategoriesByViewWithView:v83 categories:v84];

  *(void *)(v30 + 168) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v33 TPPBPolicyCategoriesByViewWithView:v86 categories:v87];

  *(void *)(v30 + 176) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v33 TPPBPolicyCategoriesByViewWithView:v89 categories:v90];

  *(void *)(v30 + 184) = v91;
  specialized Array._endMutation()(v92);
  uint64_t v374 = v30;
  uint64_t v93 = swift_allocObject(v377, 72LL, 7LL);
  *(_OWORD *)(v93 + 16) = xmmword_1001DE7D0;
  NSString v94 = String._bridgeToObjectiveC()();
  Class v95 = Array._bridgeToObjectiveC()().super.isa;
  Class v96 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v97 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v94 introducers:v95];

  *(void *)(v93 + 32) = v97;
  NSString v98 = String._bridgeToObjectiveC()();
  Class v99 = Array._bridgeToObjectiveC()().super.isa;
  id v100 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v98 introducers:v99];

  *(void *)(v93 + 40) = v100;
  NSString v101 = String._bridgeToObjectiveC()();
  Class v102 = Array._bridgeToObjectiveC()().super.isa;
  id v103 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v101 introducers:v102];

  *(void *)(v93 + 48) = v103;
  NSString v104 = String._bridgeToObjectiveC()();
  Class v105 = Array._bridgeToObjectiveC()().super.isa;
  id v106 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v104 introducers:v105];

  *(void *)(v93 + 56) = v106;
  NSString v107 = String._bridgeToObjectiveC()();
  Class v108 = Array._bridgeToObjectiveC()().super.isa;
  id v109 = [v96 TPPBPolicyIntroducersByCategoryWithCategory:v107 introducers:v108];

  *(void *)(v93 + 64) = v109;
  specialized Array._endMutation()(v110);
  uint64_t v373 = v93;
  uint64_t v111 = swift_allocObject(v377, 200LL, 7LL);
  *(_OWORD *)(v111 + 16) = xmmword_1001DE840;
  NSString v112 = (void *)v111;
  id v113 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v114 = String._bridgeToObjectiveC()();
  NSString v115 = String._bridgeToObjectiveC()();
  id v116 = [v113 fieldMatch:v114 fieldRegex:v115];

  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v119 = [v118 TPPBPolicyKeyViewMappingWithView:v117 matchingRule:v116];

  v112[4] = v119;
  NSString v120 = String._bridgeToObjectiveC()();
  NSString v121 = String._bridgeToObjectiveC()();
  id v122 = [v113 fieldMatch:v120 fieldRegex:v121];

  NSString v123 = String._bridgeToObjectiveC()();
  id v124 = [v118 TPPBPolicyKeyViewMappingWithView:v123 matchingRule:v122];

  v112[5] = v124;
  NSString v125 = String._bridgeToObjectiveC()();
  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v113 fieldMatch:v125 fieldRegex:v126];

  NSString v128 = String._bridgeToObjectiveC()();
  id v129 = [v118 TPPBPolicyKeyViewMappingWithView:v128 matchingRule:v127];

  v112[6] = v129;
  NSString v130 = String._bridgeToObjectiveC()();
  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v113 fieldMatch:v130 fieldRegex:v131];

  NSString v133 = String._bridgeToObjectiveC()();
  id v134 = [v118 TPPBPolicyKeyViewMappingWithView:v133 matchingRule:v132];

  v112[7] = v134;
  NSString v135 = String._bridgeToObjectiveC()();
  NSString v136 = String._bridgeToObjectiveC()();
  id v137 = [v113 fieldMatch:v135 fieldRegex:v136];

  NSString v138 = String._bridgeToObjectiveC()();
  id v139 = [v118 TPPBPolicyKeyViewMappingWithView:v138 matchingRule:v137];

  v112[8] = v139;
  NSString v140 = String._bridgeToObjectiveC()();
  NSString v141 = String._bridgeToObjectiveC()();
  id v142 = [v113 fieldMatch:v140 fieldRegex:v141];

  NSString v143 = String._bridgeToObjectiveC()();
  id v144 = [v118 TPPBPolicyKeyViewMappingWithView:v143 matchingRule:v142];

  v112[9] = v144;
  NSString v145 = String._bridgeToObjectiveC()();
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v113 fieldMatch:v145 fieldRegex:v146];

  NSString v148 = String._bridgeToObjectiveC()();
  id v149 = [v118 TPPBPolicyKeyViewMappingWithView:v148 matchingRule:v147];

  v112[10] = v149;
  uint64_t v150 = swift_allocObject(v377, 56LL, 7LL);
  *(_OWORD *)(v150 + 16) = xmmword_1001DE740;
  NSString v151 = String._bridgeToObjectiveC()();
  NSString v152 = String._bridgeToObjectiveC()();
  id v153 = [v113 fieldMatch:v151 fieldRegex:v152];

  *(void *)(v150 + 32) = v153;
  NSString v154 = String._bridgeToObjectiveC()();
  NSString v155 = String._bridgeToObjectiveC()();
  id v156 = [v113 fieldMatch:v154 fieldRegex:v155];

  *(void *)(v150 + 40) = v156;
  NSString v157 = String._bridgeToObjectiveC()();
  NSString v158 = String._bridgeToObjectiveC()();
  id v159 = [v113 fieldMatch:v157 fieldRegex:v158];

  *(void *)(v150 + 48) = v159;
  specialized Array._endMutation()(v160);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v161 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v150);
  id v162 = [v113 orMatch:v161];

  NSString v163 = String._bridgeToObjectiveC()();
  id v164 = [v118 TPPBPolicyKeyViewMappingWithView:v163 matchingRule:v162];

  v112[11] = v164;
  NSString v165 = String._bridgeToObjectiveC()();
  NSString v166 = String._bridgeToObjectiveC()();
  id v167 = [v113 fieldMatch:v165 fieldRegex:v166];

  NSString v168 = String._bridgeToObjectiveC()();
  id v169 = [v118 TPPBPolicyKeyViewMappingWithView:v168 matchingRule:v167];

  v112[12] = v169;
  NSString v170 = String._bridgeToObjectiveC()();
  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v113 fieldMatch:v170 fieldRegex:v171];

  NSString v173 = String._bridgeToObjectiveC()();
  id v174 = [v118 TPPBPolicyKeyViewMappingWithView:v173 matchingRule:v172];

  v112[13] = v174;
  NSString v175 = String._bridgeToObjectiveC()();
  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v113 fieldMatch:v175 fieldRegex:v176];

  NSString v178 = String._bridgeToObjectiveC()();
  id v179 = [v118 TPPBPolicyKeyViewMappingWithView:v178 matchingRule:v177];

  v112[14] = v179;
  NSString v180 = String._bridgeToObjectiveC()();
  NSString v181 = String._bridgeToObjectiveC()();
  id v182 = [v113 fieldMatch:v180 fieldRegex:v181];

  NSString v183 = String._bridgeToObjectiveC()();
  id v184 = [v118 TPPBPolicyKeyViewMappingWithView:v183 matchingRule:v182];

  v112[15] = v184;
  NSString v185 = String._bridgeToObjectiveC()();
  NSString v186 = String._bridgeToObjectiveC()();
  id v187 = [v113 fieldMatch:v185 fieldRegex:v186];

  NSString v188 = String._bridgeToObjectiveC()();
  id v376 = v118;
  id v189 = [v118 TPPBPolicyKeyViewMappingWithView:v188 matchingRule:v187];

  v112[16] = v189;
  NSString v190 = String._bridgeToObjectiveC()();
  NSString v191 = String._bridgeToObjectiveC()();
  id v192 = [v113 fieldMatch:v190 fieldRegex:v191];

  NSString v193 = String._bridgeToObjectiveC()();
  id v194 = [v118 TPPBPolicyKeyViewMappingWithView:v193 matchingRule:v192];

  v112[17] = v194;
  uint64_t v195 = swift_allocObject(v377, 64LL, 7LL);
  *(_OWORD *)(v195 + 16) = xmmword_1001DE770;
  uint64_t v196 = swift_allocObject(v377, 48LL, 7LL);
  *(_OWORD *)(v196 + 16) = xmmword_1001DE790;
  NSString v197 = String._bridgeToObjectiveC()();
  NSString v198 = String._bridgeToObjectiveC()();
  id v199 = [v113 fieldMatch:v197 fieldRegex:v198];

  *(void *)(v196 + 32) = v199;
  NSString v200 = String._bridgeToObjectiveC()();
  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v113 fieldMatch:v200 fieldRegex:v201];

  *(void *)(v196 + 40) = v202;
  specialized Array._endMutation()(v203);
  Class v204 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v196);
  id v205 = [v113 andMatch:v204];

  *(void *)(v195 + 32) = v205;
  uint64_t v206 = swift_allocObject(v377, 48LL, 7LL);
  *(_OWORD *)(v206 + 16) = xmmword_1001DE790;
  NSString v207 = String._bridgeToObjectiveC()();
  NSString v208 = String._bridgeToObjectiveC()();
  id v209 = [v113 fieldMatch:v207 fieldRegex:v208];

  *(void *)(v206 + 32) = v209;
  NSString v210 = String._bridgeToObjectiveC()();
  NSString v211 = String._bridgeToObjectiveC()();
  id v212 = [v113 fieldMatch:v210 fieldRegex:v211];

  *(void *)(v206 + 40) = v212;
  specialized Array._endMutation()(v213);
  Class v214 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v206);
  id v215 = [v113 andMatch:v214];

  *(void *)(v195 + 40) = v215;
  NSString v216 = String._bridgeToObjectiveC()();
  NSString v217 = String._bridgeToObjectiveC()();
  id v218 = [v113 fieldMatch:v216 fieldRegex:v217];

  *(void *)(v195 + 48) = v218;
  NSString v219 = String._bridgeToObjectiveC()();
  NSString v220 = String._bridgeToObjectiveC()();
  id v221 = [v113 fieldMatch:v219 fieldRegex:v220];

  *(void *)(v195 + 56) = v221;
  specialized Array._endMutation()(v222);
  Class v223 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v195);
  id v224 = [v113 orMatch:v223];

  NSString v225 = String._bridgeToObjectiveC()();
  id v226 = [v118 TPPBPolicyKeyViewMappingWithView:v225 matchingRule:v224];

  v112[18] = v226;
  uint64_t v227 = swift_allocObject(v377, 48LL, 7LL);
  *(_OWORD *)(v227 + 16) = xmmword_1001DE790;
  NSString v228 = String._bridgeToObjectiveC()();
  NSString v229 = String._bridgeToObjectiveC()();
  id v230 = [v113 fieldMatch:v228 fieldRegex:v229];

  *(void *)(v227 + 32) = v230;
  uint64_t v231 = swift_allocObject(v377, 56LL, 7LL);
  *(_OWORD *)(v231 + 16) = xmmword_1001DE740;
  NSString v232 = String._bridgeToObjectiveC()();
  NSString v233 = String._bridgeToObjectiveC()();
  id v234 = [v113 fieldMatch:v232 fieldRegex:v233];

  *(void *)(v231 + 32) = v234;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v113 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v231 + 40) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v113 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v231 + 48) = v240;
  specialized Array._endMutation()(v241);
  Class v242 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v231);
  id v243 = [v113 andMatch:v242];

  *(void *)(v227 + 40) = v243;
  specialized Array._endMutation()(v244);
  Class v245 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v227);
  id v246 = [v113 orMatch:v245];

  NSString v247 = String._bridgeToObjectiveC()();
  id v248 = [v118 TPPBPolicyKeyViewMappingWithView:v247 matchingRule:v246];

  v112[19] = v248;
  uint64_t v249 = swift_allocObject(v377, 144LL, 7LL);
  *(_OWORD *)(v249 + 16) = xmmword_1001DE7B0;
  NSString v250 = String._bridgeToObjectiveC()();
  NSString v251 = String._bridgeToObjectiveC()();
  id v252 = [v113 fieldMatch:v250 fieldRegex:v251];

  *(void *)(v249 + 32) = v252;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v113 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v249 + 40) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v113 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v249 + 48) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v113 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v249 + 56) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v113 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v249 + 64) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v113 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v249 + 72) = v267;
  NSString v268 = String._bridgeToObjectiveC()();
  NSString v269 = String._bridgeToObjectiveC()();
  id v270 = [v113 fieldMatch:v268 fieldRegex:v269];

  *(void *)(v249 + 80) = v270;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v113 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v249 + 88) = v273;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v113 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v249 + 96) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v113 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v249 + 104) = v279;
  NSString v280 = String._bridgeToObjectiveC()();
  NSString v281 = String._bridgeToObjectiveC()();
  id v282 = [v113 fieldMatch:v280 fieldRegex:v281];

  *(void *)(v249 + 112) = v282;
  NSString v283 = String._bridgeToObjectiveC()();
  NSString v284 = String._bridgeToObjectiveC()();
  id v285 = [v113 fieldMatch:v283 fieldRegex:v284];

  *(void *)(v249 + 120) = v285;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v113 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v249 + 128) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v113 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v249 + 136) = v291;
  specialized Array._endMutation()(v292);
  Class v293 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v249);
  id v294 = [v113 orMatch:v293];

  NSString v295 = String._bridgeToObjectiveC()();
  id v296 = [v118 TPPBPolicyKeyViewMappingWithView:v295 matchingRule:v294];

  v112[20] = v296;
  uint64_t v297 = swift_allocObject(v377, 48LL, 7LL);
  *(_OWORD *)(v297 + 16) = xmmword_1001DE790;
  NSString v298 = String._bridgeToObjectiveC()();
  NSString v299 = String._bridgeToObjectiveC()();
  id v300 = [v113 fieldMatch:v298 fieldRegex:v299];

  *(void *)(v297 + 32) = v300;
  NSString v301 = String._bridgeToObjectiveC()();
  NSString v302 = String._bridgeToObjectiveC()();
  id v303 = [v113 fieldMatch:v301 fieldRegex:v302];

  *(void *)(v297 + 40) = v303;
  specialized Array._endMutation()(v304);
  Class v305 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v297);
  id v306 = [v113 orMatch:v305];

  NSString v307 = String._bridgeToObjectiveC()();
  id v308 = [v118 TPPBPolicyKeyViewMappingWithView:v307 matchingRule:v306];

  v112[21] = v308;
  uint64_t v309 = swift_allocObject(v377, 128LL, 7LL);
  *(_OWORD *)(v309 + 16) = xmmword_1001DE7A0;
  NSString v310 = String._bridgeToObjectiveC()();
  NSString v311 = String._bridgeToObjectiveC()();
  id v312 = [v113 fieldMatch:v310 fieldRegex:v311];

  *(void *)(v309 + 32) = v312;
  NSString v313 = String._bridgeToObjectiveC()();
  NSString v314 = String._bridgeToObjectiveC()();
  id v315 = [v113 fieldMatch:v313 fieldRegex:v314];

  *(void *)(v309 + 40) = v315;
  NSString v316 = String._bridgeToObjectiveC()();
  NSString v317 = String._bridgeToObjectiveC()();
  id v318 = [v113 fieldMatch:v316 fieldRegex:v317];

  *(void *)(v309 + 48) = v318;
  NSString v319 = String._bridgeToObjectiveC()();
  NSString v320 = String._bridgeToObjectiveC()();
  id v321 = [v113 fieldMatch:v319 fieldRegex:v320];

  *(void *)(v309 + 56) = v321;
  NSString v322 = String._bridgeToObjectiveC()();
  NSString v323 = String._bridgeToObjectiveC()();
  id v324 = [v113 fieldMatch:v322 fieldRegex:v323];

  *(void *)(v309 + 64) = v324;
  NSString v325 = String._bridgeToObjectiveC()();
  NSString v326 = String._bridgeToObjectiveC()();
  id v327 = [v113 fieldMatch:v325 fieldRegex:v326];

  *(void *)(v309 + 72) = v327;
  NSString v328 = String._bridgeToObjectiveC()();
  NSString v329 = String._bridgeToObjectiveC()();
  id v330 = [v113 fieldMatch:v328 fieldRegex:v329];

  *(void *)(v309 + 80) = v330;
  NSString v331 = String._bridgeToObjectiveC()();
  NSString v332 = String._bridgeToObjectiveC()();
  id v333 = [v113 fieldMatch:v331 fieldRegex:v332];

  *(void *)(v309 + 88) = v333;
  NSString v334 = String._bridgeToObjectiveC()();
  NSString v335 = String._bridgeToObjectiveC()();
  id v336 = [v113 fieldMatch:v334 fieldRegex:v335];

  *(void *)(v309 + 96) = v336;
  NSString v337 = String._bridgeToObjectiveC()();
  NSString v338 = String._bridgeToObjectiveC()();
  id v339 = [v113 fieldMatch:v337 fieldRegex:v338];

  *(void *)(v309 + 104) = v339;
  NSString v340 = String._bridgeToObjectiveC()();
  NSString v341 = String._bridgeToObjectiveC()();
  id v342 = [v113 fieldMatch:v340 fieldRegex:v341];

  *(void *)(v309 + 112) = v342;
  NSString v343 = String._bridgeToObjectiveC()();
  NSString v344 = String._bridgeToObjectiveC()();
  id v345 = [v113 fieldMatch:v343 fieldRegex:v344];

  *(void *)(v309 + 120) = v345;
  specialized Array._endMutation()(v346);
  uint64_t v347 = v309;
  Class v348 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v347);
  id v349 = [v113 orMatch:v348];

  NSString v350 = String._bridgeToObjectiveC()();
  id v351 = [v376 TPPBPolicyKeyViewMappingWithView:v350 matchingRule:v349];

  v112[22] = v351;
  uint64_t v352 = swift_allocObject(v377, 56LL, 7LL);
  *(_OWORD *)(v352 + 16) = xmmword_1001DE740;
  NSString v353 = String._bridgeToObjectiveC()();
  NSString v354 = String._bridgeToObjectiveC()();
  id v355 = [v113 fieldMatch:v353 fieldRegex:v354];

  *(void *)(v352 + 32) = v355;
  NSString v356 = String._bridgeToObjectiveC()();
  NSString v357 = String._bridgeToObjectiveC()();
  id v358 = [v113 fieldMatch:v356 fieldRegex:v357];

  *(void *)(v352 + 40) = v358;
  NSString v359 = String._bridgeToObjectiveC()();
  NSString v360 = String._bridgeToObjectiveC()();
  id v361 = [v113 fieldMatch:v359 fieldRegex:v360];

  *(void *)(v352 + 48) = v361;
  specialized Array._endMutation()(v362);
  Class v363 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v352);
  id v364 = [v113 orMatch:v363];

  NSString v365 = String._bridgeToObjectiveC()();
  id v366 = [v376 TPPBPolicyKeyViewMappingWithView:v365 matchingRule:v364];

  v112[23] = v366;
  id v367 = [v113 trueMatch];
  NSString v368 = String._bridgeToObjectiveC()();
  id v369 = [v376 TPPBPolicyKeyViewMappingWithView:v368 matchingRule:v367];

  v112[24] = v369;
  specialized Array._endMutation()(v370);
  id v371 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 18LL,  v375,  v374,  v373,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v112,  (uint64_t)&off_100233D28,  (uint64_t)&off_100233D98,  (uint64_t)&off_100233DC8,  (uint64_t)&off_100233E08,  1LL);
}

unint64_t sub_1000359B8()
{
  return 0xD000000000001088LL;
}

id sub_1000359D4()
{
  uint64_t v380 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v380, 112LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE810;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  NSString v29 = String._bridgeToObjectiveC()();
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v3 TPPBPolicyModelToCategoryWithPrefix:v29 category:v30];

  *(void *)(v0 + 104) = v31;
  specialized Array._endMutation()(v32);
  uint64_t v378 = v0;
  uint64_t v33 = swift_allocObject(v380, 192LL, 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_1001DE830;
  NSString v34 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v36 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v37 = [v36 TPPBPolicyCategoriesByViewWithView:v34 categories:isa];

  *(void *)(v33 + 32) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v36 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v33 + 40) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v36 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v33 + 48) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v36 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v33 + 56) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v36 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v33 + 64) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v36 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v33 + 72) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v36 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v33 + 80) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v36 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v33 + 88) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v36 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v33 + 96) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v36 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v33 + 104) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v36 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v33 + 112) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v36 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v33 + 120) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v36 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v33 + 128) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v36 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v33 + 136) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v36 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v33 + 144) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v36 TPPBPolicyCategoriesByViewWithView:v80 categories:v81];

  *(void *)(v33 + 152) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v36 TPPBPolicyCategoriesByViewWithView:v83 categories:v84];

  *(void *)(v33 + 160) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v36 TPPBPolicyCategoriesByViewWithView:v86 categories:v87];

  *(void *)(v33 + 168) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v36 TPPBPolicyCategoriesByViewWithView:v89 categories:v90];

  *(void *)(v33 + 176) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v36 TPPBPolicyCategoriesByViewWithView:v92 categories:v93];

  *(void *)(v33 + 184) = v94;
  specialized Array._endMutation()(v95);
  uint64_t v377 = v33;
  uint64_t v96 = swift_allocObject(v380, 72LL, 7LL);
  *(_OWORD *)(v96 + 16) = xmmword_1001DE7D0;
  NSString v97 = String._bridgeToObjectiveC()();
  Class v98 = Array._bridgeToObjectiveC()().super.isa;
  Class v99 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v100 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v97 introducers:v98];

  *(void *)(v96 + 32) = v100;
  NSString v101 = String._bridgeToObjectiveC()();
  Class v102 = Array._bridgeToObjectiveC()().super.isa;
  id v103 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v101 introducers:v102];

  *(void *)(v96 + 40) = v103;
  NSString v104 = String._bridgeToObjectiveC()();
  Class v105 = Array._bridgeToObjectiveC()().super.isa;
  id v106 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v104 introducers:v105];

  *(void *)(v96 + 48) = v106;
  NSString v107 = String._bridgeToObjectiveC()();
  Class v108 = Array._bridgeToObjectiveC()().super.isa;
  id v109 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v107 introducers:v108];

  *(void *)(v96 + 56) = v109;
  NSString v110 = String._bridgeToObjectiveC()();
  Class v111 = Array._bridgeToObjectiveC()().super.isa;
  id v112 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v110 introducers:v111];

  *(void *)(v96 + 64) = v112;
  specialized Array._endMutation()(v113);
  uint64_t v376 = v96;
  uint64_t v114 = swift_allocObject(v380, 200LL, 7LL);
  *(_OWORD *)(v114 + 16) = xmmword_1001DE840;
  NSString v115 = (void *)v114;
  id v116 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v117 = String._bridgeToObjectiveC()();
  NSString v118 = String._bridgeToObjectiveC()();
  id v119 = [v116 fieldMatch:v117 fieldRegex:v118];

  NSString v120 = String._bridgeToObjectiveC()();
  NSString v121 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v122 = [v121 TPPBPolicyKeyViewMappingWithView:v120 matchingRule:v119];

  v115[4] = v122;
  NSString v123 = String._bridgeToObjectiveC()();
  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v116 fieldMatch:v123 fieldRegex:v124];

  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v121 TPPBPolicyKeyViewMappingWithView:v126 matchingRule:v125];

  v115[5] = v127;
  NSString v128 = String._bridgeToObjectiveC()();
  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v116 fieldMatch:v128 fieldRegex:v129];

  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v121 TPPBPolicyKeyViewMappingWithView:v131 matchingRule:v130];

  v115[6] = v132;
  NSString v133 = String._bridgeToObjectiveC()();
  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v116 fieldMatch:v133 fieldRegex:v134];

  NSString v136 = String._bridgeToObjectiveC()();
  id v137 = [v121 TPPBPolicyKeyViewMappingWithView:v136 matchingRule:v135];

  v115[7] = v137;
  NSString v138 = String._bridgeToObjectiveC()();
  NSString v139 = String._bridgeToObjectiveC()();
  id v140 = [v116 fieldMatch:v138 fieldRegex:v139];

  NSString v141 = String._bridgeToObjectiveC()();
  id v142 = [v121 TPPBPolicyKeyViewMappingWithView:v141 matchingRule:v140];

  v115[8] = v142;
  NSString v143 = String._bridgeToObjectiveC()();
  NSString v144 = String._bridgeToObjectiveC()();
  id v145 = [v116 fieldMatch:v143 fieldRegex:v144];

  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v121 TPPBPolicyKeyViewMappingWithView:v146 matchingRule:v145];

  v115[9] = v147;
  NSString v148 = String._bridgeToObjectiveC()();
  NSString v149 = String._bridgeToObjectiveC()();
  id v150 = [v116 fieldMatch:v148 fieldRegex:v149];

  NSString v151 = String._bridgeToObjectiveC()();
  id v152 = [v121 TPPBPolicyKeyViewMappingWithView:v151 matchingRule:v150];

  v115[10] = v152;
  uint64_t v153 = swift_allocObject(v380, 56LL, 7LL);
  *(_OWORD *)(v153 + 16) = xmmword_1001DE740;
  NSString v154 = String._bridgeToObjectiveC()();
  NSString v155 = String._bridgeToObjectiveC()();
  id v156 = [v116 fieldMatch:v154 fieldRegex:v155];

  *(void *)(v153 + 32) = v156;
  NSString v157 = String._bridgeToObjectiveC()();
  NSString v158 = String._bridgeToObjectiveC()();
  id v159 = [v116 fieldMatch:v157 fieldRegex:v158];

  *(void *)(v153 + 40) = v159;
  NSString v160 = String._bridgeToObjectiveC()();
  NSString v161 = String._bridgeToObjectiveC()();
  id v162 = [v116 fieldMatch:v160 fieldRegex:v161];

  *(void *)(v153 + 48) = v162;
  specialized Array._endMutation()(v163);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v164 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v153);
  id v165 = [v116 orMatch:v164];

  NSString v166 = String._bridgeToObjectiveC()();
  id v167 = [v121 TPPBPolicyKeyViewMappingWithView:v166 matchingRule:v165];

  v115[11] = v167;
  NSString v168 = String._bridgeToObjectiveC()();
  NSString v169 = String._bridgeToObjectiveC()();
  id v170 = [v116 fieldMatch:v168 fieldRegex:v169];

  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v121 TPPBPolicyKeyViewMappingWithView:v171 matchingRule:v170];

  v115[12] = v172;
  NSString v173 = String._bridgeToObjectiveC()();
  NSString v174 = String._bridgeToObjectiveC()();
  id v175 = [v116 fieldMatch:v173 fieldRegex:v174];

  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v121 TPPBPolicyKeyViewMappingWithView:v176 matchingRule:v175];

  v115[13] = v177;
  NSString v178 = String._bridgeToObjectiveC()();
  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v116 fieldMatch:v178 fieldRegex:v179];

  NSString v181 = String._bridgeToObjectiveC()();
  id v182 = [v121 TPPBPolicyKeyViewMappingWithView:v181 matchingRule:v180];

  v115[14] = v182;
  NSString v183 = String._bridgeToObjectiveC()();
  NSString v184 = String._bridgeToObjectiveC()();
  id v185 = [v116 fieldMatch:v183 fieldRegex:v184];

  NSString v186 = String._bridgeToObjectiveC()();
  id v187 = [v121 TPPBPolicyKeyViewMappingWithView:v186 matchingRule:v185];

  v115[15] = v187;
  NSString v188 = String._bridgeToObjectiveC()();
  NSString v189 = String._bridgeToObjectiveC()();
  id v190 = [v116 fieldMatch:v188 fieldRegex:v189];

  NSString v191 = String._bridgeToObjectiveC()();
  id v379 = v121;
  id v192 = [v121 TPPBPolicyKeyViewMappingWithView:v191 matchingRule:v190];

  v115[16] = v192;
  NSString v193 = String._bridgeToObjectiveC()();
  NSString v194 = String._bridgeToObjectiveC()();
  id v195 = [v116 fieldMatch:v193 fieldRegex:v194];

  NSString v196 = String._bridgeToObjectiveC()();
  id v197 = [v121 TPPBPolicyKeyViewMappingWithView:v196 matchingRule:v195];

  v115[17] = v197;
  uint64_t v198 = swift_allocObject(v380, 64LL, 7LL);
  *(_OWORD *)(v198 + 16) = xmmword_1001DE770;
  uint64_t v199 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v199 + 16) = xmmword_1001DE790;
  NSString v200 = String._bridgeToObjectiveC()();
  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v116 fieldMatch:v200 fieldRegex:v201];

  *(void *)(v199 + 32) = v202;
  NSString v203 = String._bridgeToObjectiveC()();
  NSString v204 = String._bridgeToObjectiveC()();
  id v205 = [v116 fieldMatch:v203 fieldRegex:v204];

  *(void *)(v199 + 40) = v205;
  specialized Array._endMutation()(v206);
  Class v207 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v199);
  id v208 = [v116 andMatch:v207];

  *(void *)(v198 + 32) = v208;
  uint64_t v209 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v209 + 16) = xmmword_1001DE790;
  NSString v210 = String._bridgeToObjectiveC()();
  NSString v211 = String._bridgeToObjectiveC()();
  id v212 = [v116 fieldMatch:v210 fieldRegex:v211];

  *(void *)(v209 + 32) = v212;
  NSString v213 = String._bridgeToObjectiveC()();
  NSString v214 = String._bridgeToObjectiveC()();
  id v215 = [v116 fieldMatch:v213 fieldRegex:v214];

  *(void *)(v209 + 40) = v215;
  specialized Array._endMutation()(v216);
  Class v217 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v209);
  id v218 = [v116 andMatch:v217];

  *(void *)(v198 + 40) = v218;
  NSString v219 = String._bridgeToObjectiveC()();
  NSString v220 = String._bridgeToObjectiveC()();
  id v221 = [v116 fieldMatch:v219 fieldRegex:v220];

  *(void *)(v198 + 48) = v221;
  NSString v222 = String._bridgeToObjectiveC()();
  NSString v223 = String._bridgeToObjectiveC()();
  id v224 = [v116 fieldMatch:v222 fieldRegex:v223];

  *(void *)(v198 + 56) = v224;
  specialized Array._endMutation()(v225);
  Class v226 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v198);
  id v227 = [v116 orMatch:v226];

  NSString v228 = String._bridgeToObjectiveC()();
  id v229 = [v121 TPPBPolicyKeyViewMappingWithView:v228 matchingRule:v227];

  v115[18] = v229;
  uint64_t v230 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v230 + 16) = xmmword_1001DE790;
  NSString v231 = String._bridgeToObjectiveC()();
  NSString v232 = String._bridgeToObjectiveC()();
  id v233 = [v116 fieldMatch:v231 fieldRegex:v232];

  *(void *)(v230 + 32) = v233;
  uint64_t v234 = swift_allocObject(v380, 56LL, 7LL);
  *(_OWORD *)(v234 + 16) = xmmword_1001DE740;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v116 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v234 + 32) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v116 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v234 + 40) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v116 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v234 + 48) = v243;
  specialized Array._endMutation()(v244);
  Class v245 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v234);
  id v246 = [v116 andMatch:v245];

  *(void *)(v230 + 40) = v246;
  specialized Array._endMutation()(v247);
  Class v248 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v230);
  id v249 = [v116 orMatch:v248];

  NSString v250 = String._bridgeToObjectiveC()();
  id v251 = [v121 TPPBPolicyKeyViewMappingWithView:v250 matchingRule:v249];

  v115[19] = v251;
  uint64_t v252 = swift_allocObject(v380, 144LL, 7LL);
  *(_OWORD *)(v252 + 16) = xmmword_1001DE7B0;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v116 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v252 + 32) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v116 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v252 + 40) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v116 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v252 + 48) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v116 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v252 + 56) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v116 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v252 + 64) = v267;
  NSString v268 = String._bridgeToObjectiveC()();
  NSString v269 = String._bridgeToObjectiveC()();
  id v270 = [v116 fieldMatch:v268 fieldRegex:v269];

  *(void *)(v252 + 72) = v270;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v116 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v252 + 80) = v273;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v116 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v252 + 88) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v116 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v252 + 96) = v279;
  NSString v280 = String._bridgeToObjectiveC()();
  NSString v281 = String._bridgeToObjectiveC()();
  id v282 = [v116 fieldMatch:v280 fieldRegex:v281];

  *(void *)(v252 + 104) = v282;
  NSString v283 = String._bridgeToObjectiveC()();
  NSString v284 = String._bridgeToObjectiveC()();
  id v285 = [v116 fieldMatch:v283 fieldRegex:v284];

  *(void *)(v252 + 112) = v285;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v116 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v252 + 120) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v116 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v252 + 128) = v291;
  NSString v292 = String._bridgeToObjectiveC()();
  NSString v293 = String._bridgeToObjectiveC()();
  id v294 = [v116 fieldMatch:v292 fieldRegex:v293];

  *(void *)(v252 + 136) = v294;
  specialized Array._endMutation()(v295);
  Class v296 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v252);
  id v297 = [v116 orMatch:v296];

  NSString v298 = String._bridgeToObjectiveC()();
  id v299 = [v121 TPPBPolicyKeyViewMappingWithView:v298 matchingRule:v297];

  v115[20] = v299;
  uint64_t v300 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v300 + 16) = xmmword_1001DE790;
  NSString v301 = String._bridgeToObjectiveC()();
  NSString v302 = String._bridgeToObjectiveC()();
  id v303 = [v116 fieldMatch:v301 fieldRegex:v302];

  *(void *)(v300 + 32) = v303;
  NSString v304 = String._bridgeToObjectiveC()();
  NSString v305 = String._bridgeToObjectiveC()();
  id v306 = [v116 fieldMatch:v304 fieldRegex:v305];

  *(void *)(v300 + 40) = v306;
  specialized Array._endMutation()(v307);
  Class v308 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v300);
  id v309 = [v116 orMatch:v308];

  NSString v310 = String._bridgeToObjectiveC()();
  id v311 = [v121 TPPBPolicyKeyViewMappingWithView:v310 matchingRule:v309];

  v115[21] = v311;
  uint64_t v312 = swift_allocObject(v380, 128LL, 7LL);
  *(_OWORD *)(v312 + 16) = xmmword_1001DE7A0;
  NSString v313 = String._bridgeToObjectiveC()();
  NSString v314 = String._bridgeToObjectiveC()();
  id v315 = [v116 fieldMatch:v313 fieldRegex:v314];

  *(void *)(v312 + 32) = v315;
  NSString v316 = String._bridgeToObjectiveC()();
  NSString v317 = String._bridgeToObjectiveC()();
  id v318 = [v116 fieldMatch:v316 fieldRegex:v317];

  *(void *)(v312 + 40) = v318;
  NSString v319 = String._bridgeToObjectiveC()();
  NSString v320 = String._bridgeToObjectiveC()();
  id v321 = [v116 fieldMatch:v319 fieldRegex:v320];

  *(void *)(v312 + 48) = v321;
  NSString v322 = String._bridgeToObjectiveC()();
  NSString v323 = String._bridgeToObjectiveC()();
  id v324 = [v116 fieldMatch:v322 fieldRegex:v323];

  *(void *)(v312 + 56) = v324;
  NSString v325 = String._bridgeToObjectiveC()();
  NSString v326 = String._bridgeToObjectiveC()();
  id v327 = [v116 fieldMatch:v325 fieldRegex:v326];

  *(void *)(v312 + 64) = v327;
  NSString v328 = String._bridgeToObjectiveC()();
  NSString v329 = String._bridgeToObjectiveC()();
  id v330 = [v116 fieldMatch:v328 fieldRegex:v329];

  *(void *)(v312 + 72) = v330;
  NSString v331 = String._bridgeToObjectiveC()();
  NSString v332 = String._bridgeToObjectiveC()();
  id v333 = [v116 fieldMatch:v331 fieldRegex:v332];

  *(void *)(v312 + 80) = v333;
  NSString v334 = String._bridgeToObjectiveC()();
  NSString v335 = String._bridgeToObjectiveC()();
  id v336 = [v116 fieldMatch:v334 fieldRegex:v335];

  *(void *)(v312 + 88) = v336;
  NSString v337 = String._bridgeToObjectiveC()();
  NSString v338 = String._bridgeToObjectiveC()();
  id v339 = [v116 fieldMatch:v337 fieldRegex:v338];

  *(void *)(v312 + 96) = v339;
  NSString v340 = String._bridgeToObjectiveC()();
  NSString v341 = String._bridgeToObjectiveC()();
  id v342 = [v116 fieldMatch:v340 fieldRegex:v341];

  *(void *)(v312 + 104) = v342;
  NSString v343 = String._bridgeToObjectiveC()();
  NSString v344 = String._bridgeToObjectiveC()();
  id v345 = [v116 fieldMatch:v343 fieldRegex:v344];

  *(void *)(v312 + 112) = v345;
  NSString v346 = String._bridgeToObjectiveC()();
  NSString v347 = String._bridgeToObjectiveC()();
  id v348 = [v116 fieldMatch:v346 fieldRegex:v347];

  *(void *)(v312 + 120) = v348;
  specialized Array._endMutation()(v349);
  uint64_t v350 = v312;
  Class v351 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v350);
  id v352 = [v116 orMatch:v351];

  NSString v353 = String._bridgeToObjectiveC()();
  id v354 = [v379 TPPBPolicyKeyViewMappingWithView:v353 matchingRule:v352];

  v115[22] = v354;
  uint64_t v355 = swift_allocObject(v380, 56LL, 7LL);
  *(_OWORD *)(v355 + 16) = xmmword_1001DE740;
  NSString v356 = String._bridgeToObjectiveC()();
  NSString v357 = String._bridgeToObjectiveC()();
  id v358 = [v116 fieldMatch:v356 fieldRegex:v357];

  *(void *)(v355 + 32) = v358;
  NSString v359 = String._bridgeToObjectiveC()();
  NSString v360 = String._bridgeToObjectiveC()();
  id v361 = [v116 fieldMatch:v359 fieldRegex:v360];

  *(void *)(v355 + 40) = v361;
  NSString v362 = String._bridgeToObjectiveC()();
  NSString v363 = String._bridgeToObjectiveC()();
  id v364 = [v116 fieldMatch:v362 fieldRegex:v363];

  *(void *)(v355 + 48) = v364;
  specialized Array._endMutation()(v365);
  Class v366 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v355);
  id v367 = [v116 orMatch:v366];

  NSString v368 = String._bridgeToObjectiveC()();
  id v369 = [v379 TPPBPolicyKeyViewMappingWithView:v368 matchingRule:v367];

  v115[23] = v369;
  id v370 = [v116 trueMatch];
  NSString v371 = String._bridgeToObjectiveC()();
  id v372 = [v379 TPPBPolicyKeyViewMappingWithView:v371 matchingRule:v370];

  v115[24] = v372;
  specialized Array._endMutation()(v373);
  id v374 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 19LL,  v378,  v377,  v376,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v115,  (uint64_t)&off_100234568,  (uint64_t)&off_1002345D8,  (uint64_t)&off_100234608,  (uint64_t)&off_100234648,  1LL);
}

unint64_t sub_100038870()
{
  return 0xD000000000001090LL;
}

id sub_10003888C()
{
  uint64_t v380 = sub_100007578(&qword_1002515D8);
  uint64_t v0 = swift_allocObject(v380, 112LL, 7LL);
  *(_OWORD *)(v0 + 16) = xmmword_1001DE810;
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyModelToCategory);
  id v4 = [v3 TPPBPolicyModelToCategoryWithPrefix:v1 category:v2];

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 TPPBPolicyModelToCategoryWithPrefix:v5 category:v6];

  *(void *)(v0 + 40) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v3 TPPBPolicyModelToCategoryWithPrefix:v8 category:v9];

  *(void *)(v0 + 48) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v3 TPPBPolicyModelToCategoryWithPrefix:v11 category:v12];

  *(void *)(v0 + 56) = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v3 TPPBPolicyModelToCategoryWithPrefix:v14 category:v15];

  *(void *)(v0 + 64) = v16;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v3 TPPBPolicyModelToCategoryWithPrefix:v17 category:v18];

  *(void *)(v0 + 72) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v3 TPPBPolicyModelToCategoryWithPrefix:v20 category:v21];

  *(void *)(v0 + 80) = v22;
  NSString v23 = String._bridgeToObjectiveC()();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v3 TPPBPolicyModelToCategoryWithPrefix:v23 category:v24];

  *(void *)(v0 + 88) = v25;
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v3 TPPBPolicyModelToCategoryWithPrefix:v26 category:v27];

  *(void *)(v0 + 96) = v28;
  NSString v29 = String._bridgeToObjectiveC()();
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v3 TPPBPolicyModelToCategoryWithPrefix:v29 category:v30];

  *(void *)(v0 + 104) = v31;
  specialized Array._endMutation()(v32);
  uint64_t v378 = v0;
  uint64_t v33 = swift_allocObject(v380, 192LL, 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_1001DE830;
  NSString v34 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v36 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyCategoriesByView);
  id v37 = [v36 TPPBPolicyCategoriesByViewWithView:v34 categories:isa];

  *(void *)(v33 + 32) = v37;
  NSString v38 = String._bridgeToObjectiveC()();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  id v40 = [v36 TPPBPolicyCategoriesByViewWithView:v38 categories:v39];

  *(void *)(v33 + 40) = v40;
  NSString v41 = String._bridgeToObjectiveC()();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  id v43 = [v36 TPPBPolicyCategoriesByViewWithView:v41 categories:v42];

  *(void *)(v33 + 48) = v43;
  NSString v44 = String._bridgeToObjectiveC()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  id v46 = [v36 TPPBPolicyCategoriesByViewWithView:v44 categories:v45];

  *(void *)(v33 + 56) = v46;
  NSString v47 = String._bridgeToObjectiveC()();
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  id v49 = [v36 TPPBPolicyCategoriesByViewWithView:v47 categories:v48];

  *(void *)(v33 + 64) = v49;
  NSString v50 = String._bridgeToObjectiveC()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  id v52 = [v36 TPPBPolicyCategoriesByViewWithView:v50 categories:v51];

  *(void *)(v33 + 72) = v52;
  NSString v53 = String._bridgeToObjectiveC()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  id v55 = [v36 TPPBPolicyCategoriesByViewWithView:v53 categories:v54];

  *(void *)(v33 + 80) = v55;
  NSString v56 = String._bridgeToObjectiveC()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  id v58 = [v36 TPPBPolicyCategoriesByViewWithView:v56 categories:v57];

  *(void *)(v33 + 88) = v58;
  NSString v59 = String._bridgeToObjectiveC()();
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  id v61 = [v36 TPPBPolicyCategoriesByViewWithView:v59 categories:v60];

  *(void *)(v33 + 96) = v61;
  NSString v62 = String._bridgeToObjectiveC()();
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = [v36 TPPBPolicyCategoriesByViewWithView:v62 categories:v63];

  *(void *)(v33 + 104) = v64;
  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = Array._bridgeToObjectiveC()().super.isa;
  id v67 = [v36 TPPBPolicyCategoriesByViewWithView:v65 categories:v66];

  *(void *)(v33 + 112) = v67;
  NSString v68 = String._bridgeToObjectiveC()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  id v70 = [v36 TPPBPolicyCategoriesByViewWithView:v68 categories:v69];

  *(void *)(v33 + 120) = v70;
  NSString v71 = String._bridgeToObjectiveC()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  id v73 = [v36 TPPBPolicyCategoriesByViewWithView:v71 categories:v72];

  *(void *)(v33 + 128) = v73;
  NSString v74 = String._bridgeToObjectiveC()();
  Class v75 = Array._bridgeToObjectiveC()().super.isa;
  id v76 = [v36 TPPBPolicyCategoriesByViewWithView:v74 categories:v75];

  *(void *)(v33 + 136) = v76;
  NSString v77 = String._bridgeToObjectiveC()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  id v79 = [v36 TPPBPolicyCategoriesByViewWithView:v77 categories:v78];

  *(void *)(v33 + 144) = v79;
  NSString v80 = String._bridgeToObjectiveC()();
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  id v82 = [v36 TPPBPolicyCategoriesByViewWithView:v80 categories:v81];

  *(void *)(v33 + 152) = v82;
  NSString v83 = String._bridgeToObjectiveC()();
  Class v84 = Array._bridgeToObjectiveC()().super.isa;
  id v85 = [v36 TPPBPolicyCategoriesByViewWithView:v83 categories:v84];

  *(void *)(v33 + 160) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  id v88 = [v36 TPPBPolicyCategoriesByViewWithView:v86 categories:v87];

  *(void *)(v33 + 168) = v88;
  NSString v89 = String._bridgeToObjectiveC()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  id v91 = [v36 TPPBPolicyCategoriesByViewWithView:v89 categories:v90];

  *(void *)(v33 + 176) = v91;
  NSString v92 = String._bridgeToObjectiveC()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  id v94 = [v36 TPPBPolicyCategoriesByViewWithView:v92 categories:v93];

  *(void *)(v33 + 184) = v94;
  specialized Array._endMutation()(v95);
  uint64_t v377 = v33;
  uint64_t v96 = swift_allocObject(v380, 72LL, 7LL);
  *(_OWORD *)(v96 + 16) = xmmword_1001DE7D0;
  NSString v97 = String._bridgeToObjectiveC()();
  Class v98 = Array._bridgeToObjectiveC()().super.isa;
  Class v99 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyIntroducersByCategory);
  id v100 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v97 introducers:v98];

  *(void *)(v96 + 32) = v100;
  NSString v101 = String._bridgeToObjectiveC()();
  Class v102 = Array._bridgeToObjectiveC()().super.isa;
  id v103 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v101 introducers:v102];

  *(void *)(v96 + 40) = v103;
  NSString v104 = String._bridgeToObjectiveC()();
  Class v105 = Array._bridgeToObjectiveC()().super.isa;
  id v106 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v104 introducers:v105];

  *(void *)(v96 + 48) = v106;
  NSString v107 = String._bridgeToObjectiveC()();
  Class v108 = Array._bridgeToObjectiveC()().super.isa;
  id v109 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v107 introducers:v108];

  *(void *)(v96 + 56) = v109;
  NSString v110 = String._bridgeToObjectiveC()();
  Class v111 = Array._bridgeToObjectiveC()().super.isa;
  id v112 = [v99 TPPBPolicyIntroducersByCategoryWithCategory:v110 introducers:v111];

  *(void *)(v96 + 64) = v112;
  specialized Array._endMutation()(v113);
  uint64_t v376 = v96;
  uint64_t v114 = swift_allocObject(v380, 200LL, 7LL);
  *(_OWORD *)(v114 + 16) = xmmword_1001DE840;
  NSString v115 = (void *)v114;
  id v116 = (void *)objc_opt_self(&OBJC_CLASS___TPDictionaryMatchingRule);
  NSString v117 = String._bridgeToObjectiveC()();
  NSString v118 = String._bridgeToObjectiveC()();
  id v119 = [v116 fieldMatch:v117 fieldRegex:v118];

  NSString v120 = String._bridgeToObjectiveC()();
  NSString v121 = (void *)objc_opt_self(&OBJC_CLASS___TPPBPolicyKeyViewMapping);
  id v122 = [v121 TPPBPolicyKeyViewMappingWithView:v120 matchingRule:v119];

  v115[4] = v122;
  NSString v123 = String._bridgeToObjectiveC()();
  NSString v124 = String._bridgeToObjectiveC()();
  id v125 = [v116 fieldMatch:v123 fieldRegex:v124];

  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v121 TPPBPolicyKeyViewMappingWithView:v126 matchingRule:v125];

  v115[5] = v127;
  NSString v128 = String._bridgeToObjectiveC()();
  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v116 fieldMatch:v128 fieldRegex:v129];

  NSString v131 = String._bridgeToObjectiveC()();
  id v132 = [v121 TPPBPolicyKeyViewMappingWithView:v131 matchingRule:v130];

  v115[6] = v132;
  NSString v133 = String._bridgeToObjectiveC()();
  NSString v134 = String._bridgeToObjectiveC()();
  id v135 = [v116 fieldMatch:v133 fieldRegex:v134];

  NSString v136 = String._bridgeToObjectiveC()();
  id v137 = [v121 TPPBPolicyKeyViewMappingWithView:v136 matchingRule:v135];

  v115[7] = v137;
  NSString v138 = String._bridgeToObjectiveC()();
  NSString v139 = String._bridgeToObjectiveC()();
  id v140 = [v116 fieldMatch:v138 fieldRegex:v139];

  NSString v141 = String._bridgeToObjectiveC()();
  id v142 = [v121 TPPBPolicyKeyViewMappingWithView:v141 matchingRule:v140];

  v115[8] = v142;
  NSString v143 = String._bridgeToObjectiveC()();
  NSString v144 = String._bridgeToObjectiveC()();
  id v145 = [v116 fieldMatch:v143 fieldRegex:v144];

  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = [v121 TPPBPolicyKeyViewMappingWithView:v146 matchingRule:v145];

  v115[9] = v147;
  NSString v148 = String._bridgeToObjectiveC()();
  NSString v149 = String._bridgeToObjectiveC()();
  id v150 = [v116 fieldMatch:v148 fieldRegex:v149];

  NSString v151 = String._bridgeToObjectiveC()();
  id v152 = [v121 TPPBPolicyKeyViewMappingWithView:v151 matchingRule:v150];

  v115[10] = v152;
  uint64_t v153 = swift_allocObject(v380, 56LL, 7LL);
  *(_OWORD *)(v153 + 16) = xmmword_1001DE740;
  NSString v154 = String._bridgeToObjectiveC()();
  NSString v155 = String._bridgeToObjectiveC()();
  id v156 = [v116 fieldMatch:v154 fieldRegex:v155];

  *(void *)(v153 + 32) = v156;
  NSString v157 = String._bridgeToObjectiveC()();
  NSString v158 = String._bridgeToObjectiveC()();
  id v159 = [v116 fieldMatch:v157 fieldRegex:v158];

  *(void *)(v153 + 40) = v159;
  NSString v160 = String._bridgeToObjectiveC()();
  NSString v161 = String._bridgeToObjectiveC()();
  id v162 = [v116 fieldMatch:v160 fieldRegex:v161];

  *(void *)(v153 + 48) = v162;
  specialized Array._endMutation()(v163);
  sub_100007620(0LL, &qword_1002515E0, &OBJC_CLASS___TPPBDictionaryMatchingRule_ptr);
  Class v164 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v153);
  id v165 = [v116 orMatch:v164];

  NSString v166 = String._bridgeToObjectiveC()();
  id v167 = [v121 TPPBPolicyKeyViewMappingWithView:v166 matchingRule:v165];

  v115[11] = v167;
  NSString v168 = String._bridgeToObjectiveC()();
  NSString v169 = String._bridgeToObjectiveC()();
  id v170 = [v116 fieldMatch:v168 fieldRegex:v169];

  NSString v171 = String._bridgeToObjectiveC()();
  id v172 = [v121 TPPBPolicyKeyViewMappingWithView:v171 matchingRule:v170];

  v115[12] = v172;
  NSString v173 = String._bridgeToObjectiveC()();
  NSString v174 = String._bridgeToObjectiveC()();
  id v175 = [v116 fieldMatch:v173 fieldRegex:v174];

  NSString v176 = String._bridgeToObjectiveC()();
  id v177 = [v121 TPPBPolicyKeyViewMappingWithView:v176 matchingRule:v175];

  v115[13] = v177;
  NSString v178 = String._bridgeToObjectiveC()();
  NSString v179 = String._bridgeToObjectiveC()();
  id v180 = [v116 fieldMatch:v178 fieldRegex:v179];

  NSString v181 = String._bridgeToObjectiveC()();
  id v182 = [v121 TPPBPolicyKeyViewMappingWithView:v181 matchingRule:v180];

  v115[14] = v182;
  NSString v183 = String._bridgeToObjectiveC()();
  NSString v184 = String._bridgeToObjectiveC()();
  id v185 = [v116 fieldMatch:v183 fieldRegex:v184];

  NSString v186 = String._bridgeToObjectiveC()();
  id v187 = [v121 TPPBPolicyKeyViewMappingWithView:v186 matchingRule:v185];

  v115[15] = v187;
  NSString v188 = String._bridgeToObjectiveC()();
  NSString v189 = String._bridgeToObjectiveC()();
  id v190 = [v116 fieldMatch:v188 fieldRegex:v189];

  NSString v191 = String._bridgeToObjectiveC()();
  id v379 = v121;
  id v192 = [v121 TPPBPolicyKeyViewMappingWithView:v191 matchingRule:v190];

  v115[16] = v192;
  NSString v193 = String._bridgeToObjectiveC()();
  NSString v194 = String._bridgeToObjectiveC()();
  id v195 = [v116 fieldMatch:v193 fieldRegex:v194];

  NSString v196 = String._bridgeToObjectiveC()();
  id v197 = [v121 TPPBPolicyKeyViewMappingWithView:v196 matchingRule:v195];

  v115[17] = v197;
  uint64_t v198 = swift_allocObject(v380, 64LL, 7LL);
  *(_OWORD *)(v198 + 16) = xmmword_1001DE770;
  uint64_t v199 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v199 + 16) = xmmword_1001DE790;
  NSString v200 = String._bridgeToObjectiveC()();
  NSString v201 = String._bridgeToObjectiveC()();
  id v202 = [v116 fieldMatch:v200 fieldRegex:v201];

  *(void *)(v199 + 32) = v202;
  NSString v203 = String._bridgeToObjectiveC()();
  NSString v204 = String._bridgeToObjectiveC()();
  id v205 = [v116 fieldMatch:v203 fieldRegex:v204];

  *(void *)(v199 + 40) = v205;
  specialized Array._endMutation()(v206);
  Class v207 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v199);
  id v208 = [v116 andMatch:v207];

  *(void *)(v198 + 32) = v208;
  uint64_t v209 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v209 + 16) = xmmword_1001DE790;
  NSString v210 = String._bridgeToObjectiveC()();
  NSString v211 = String._bridgeToObjectiveC()();
  id v212 = [v116 fieldMatch:v210 fieldRegex:v211];

  *(void *)(v209 + 32) = v212;
  NSString v213 = String._bridgeToObjectiveC()();
  NSString v214 = String._bridgeToObjectiveC()();
  id v215 = [v116 fieldMatch:v213 fieldRegex:v214];

  *(void *)(v209 + 40) = v215;
  specialized Array._endMutation()(v216);
  Class v217 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v209);
  id v218 = [v116 andMatch:v217];

  *(void *)(v198 + 40) = v218;
  NSString v219 = String._bridgeToObjectiveC()();
  NSString v220 = String._bridgeToObjectiveC()();
  id v221 = [v116 fieldMatch:v219 fieldRegex:v220];

  *(void *)(v198 + 48) = v221;
  NSString v222 = String._bridgeToObjectiveC()();
  NSString v223 = String._bridgeToObjectiveC()();
  id v224 = [v116 fieldMatch:v222 fieldRegex:v223];

  *(void *)(v198 + 56) = v224;
  specialized Array._endMutation()(v225);
  Class v226 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v198);
  id v227 = [v116 orMatch:v226];

  NSString v228 = String._bridgeToObjectiveC()();
  id v229 = [v121 TPPBPolicyKeyViewMappingWithView:v228 matchingRule:v227];

  v115[18] = v229;
  uint64_t v230 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v230 + 16) = xmmword_1001DE790;
  NSString v231 = String._bridgeToObjectiveC()();
  NSString v232 = String._bridgeToObjectiveC()();
  id v233 = [v116 fieldMatch:v231 fieldRegex:v232];

  *(void *)(v230 + 32) = v233;
  uint64_t v234 = swift_allocObject(v380, 56LL, 7LL);
  *(_OWORD *)(v234 + 16) = xmmword_1001DE740;
  NSString v235 = String._bridgeToObjectiveC()();
  NSString v236 = String._bridgeToObjectiveC()();
  id v237 = [v116 fieldMatch:v235 fieldRegex:v236];

  *(void *)(v234 + 32) = v237;
  NSString v238 = String._bridgeToObjectiveC()();
  NSString v239 = String._bridgeToObjectiveC()();
  id v240 = [v116 fieldMatch:v238 fieldRegex:v239];

  *(void *)(v234 + 40) = v240;
  NSString v241 = String._bridgeToObjectiveC()();
  NSString v242 = String._bridgeToObjectiveC()();
  id v243 = [v116 fieldMatch:v241 fieldRegex:v242];

  *(void *)(v234 + 48) = v243;
  specialized Array._endMutation()(v244);
  Class v245 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v234);
  id v246 = [v116 andMatch:v245];

  *(void *)(v230 + 40) = v246;
  specialized Array._endMutation()(v247);
  Class v248 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v230);
  id v249 = [v116 orMatch:v248];

  NSString v250 = String._bridgeToObjectiveC()();
  id v251 = [v121 TPPBPolicyKeyViewMappingWithView:v250 matchingRule:v249];

  v115[19] = v251;
  uint64_t v252 = swift_allocObject(v380, 144LL, 7LL);
  *(_OWORD *)(v252 + 16) = xmmword_1001DE7B0;
  NSString v253 = String._bridgeToObjectiveC()();
  NSString v254 = String._bridgeToObjectiveC()();
  id v255 = [v116 fieldMatch:v253 fieldRegex:v254];

  *(void *)(v252 + 32) = v255;
  NSString v256 = String._bridgeToObjectiveC()();
  NSString v257 = String._bridgeToObjectiveC()();
  id v258 = [v116 fieldMatch:v256 fieldRegex:v257];

  *(void *)(v252 + 40) = v258;
  NSString v259 = String._bridgeToObjectiveC()();
  NSString v260 = String._bridgeToObjectiveC()();
  id v261 = [v116 fieldMatch:v259 fieldRegex:v260];

  *(void *)(v252 + 48) = v261;
  NSString v262 = String._bridgeToObjectiveC()();
  NSString v263 = String._bridgeToObjectiveC()();
  id v264 = [v116 fieldMatch:v262 fieldRegex:v263];

  *(void *)(v252 + 56) = v264;
  NSString v265 = String._bridgeToObjectiveC()();
  NSString v266 = String._bridgeToObjectiveC()();
  id v267 = [v116 fieldMatch:v265 fieldRegex:v266];

  *(void *)(v252 + 64) = v267;
  NSString v268 = String._bridgeToObjectiveC()();
  NSString v269 = String._bridgeToObjectiveC()();
  id v270 = [v116 fieldMatch:v268 fieldRegex:v269];

  *(void *)(v252 + 72) = v270;
  NSString v271 = String._bridgeToObjectiveC()();
  NSString v272 = String._bridgeToObjectiveC()();
  id v273 = [v116 fieldMatch:v271 fieldRegex:v272];

  *(void *)(v252 + 80) = v273;
  NSString v274 = String._bridgeToObjectiveC()();
  NSString v275 = String._bridgeToObjectiveC()();
  id v276 = [v116 fieldMatch:v274 fieldRegex:v275];

  *(void *)(v252 + 88) = v276;
  NSString v277 = String._bridgeToObjectiveC()();
  NSString v278 = String._bridgeToObjectiveC()();
  id v279 = [v116 fieldMatch:v277 fieldRegex:v278];

  *(void *)(v252 + 96) = v279;
  NSString v280 = String._bridgeToObjectiveC()();
  NSString v281 = String._bridgeToObjectiveC()();
  id v282 = [v116 fieldMatch:v280 fieldRegex:v281];

  *(void *)(v252 + 104) = v282;
  NSString v283 = String._bridgeToObjectiveC()();
  NSString v284 = String._bridgeToObjectiveC()();
  id v285 = [v116 fieldMatch:v283 fieldRegex:v284];

  *(void *)(v252 + 112) = v285;
  NSString v286 = String._bridgeToObjectiveC()();
  NSString v287 = String._bridgeToObjectiveC()();
  id v288 = [v116 fieldMatch:v286 fieldRegex:v287];

  *(void *)(v252 + 120) = v288;
  NSString v289 = String._bridgeToObjectiveC()();
  NSString v290 = String._bridgeToObjectiveC()();
  id v291 = [v116 fieldMatch:v289 fieldRegex:v290];

  *(void *)(v252 + 128) = v291;
  NSString v292 = String._bridgeToObjectiveC()();
  NSString v293 = String._bridgeToObjectiveC()();
  id v294 = [v116 fieldMatch:v292 fieldRegex:v293];

  *(void *)(v252 + 136) = v294;
  specialized Array._endMutation()(v295);
  Class v296 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v252);
  id v297 = [v116 orMatch:v296];

  NSString v298 = String._bridgeToObjectiveC()();
  id v299 = [v121 TPPBPolicyKeyViewMappingWithView:v298 matchingRule:v297];

  v115[20] = v299;
  uint64_t v300 = swift_allocObject(v380, 48LL, 7LL);
  *(_OWORD *)(v300 + 16) = xmmword_1001DE790;
  NSString v301 = String._bridgeToObjectiveC()();
  NSString v302 = String._bridgeToObjectiveC()();
  id v303 = [v116 fieldMatch:v301 fieldRegex:v302];

  *(void *)(v300 + 32) = v303;
  NSString v304 = String._bridgeToObjectiveC()();
  NSString v305 = String._bridgeToObjectiveC()();
  id v306 = [v116 fieldMatch:v304 fieldRegex:v305];

  *(void *)(v300 + 40) = v306;
  specialized Array._endMutation()(v307);
  Class v308 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v300);
  id v309 = [v116 orMatch:v308];

  NSString v310 = String._bridgeToObjectiveC()();
  id v311 = [v121 TPPBPolicyKeyViewMappingWithView:v310 matchingRule:v309];

  v115[21] = v311;
  uint64_t v312 = swift_allocObject(v380, 128LL, 7LL);
  *(_OWORD *)(v312 + 16) = xmmword_1001DE7A0;
  NSString v313 = String._bridgeToObjectiveC()();
  NSString v314 = String._bridgeToObjectiveC()();
  id v315 = [v116 fieldMatch:v313 fieldRegex:v314];

  *(void *)(v312 + 32) = v315;
  NSString v316 = String._bridgeToObjectiveC()();
  NSString v317 = String._bridgeToObjectiveC()();
  id v318 = [v116 fieldMatch:v316 fieldRegex:v317];

  *(void *)(v312 + 40) = v318;
  NSString v319 = String._bridgeToObjectiveC()();
  NSString v320 = String._bridgeToObjectiveC()();
  id v321 = [v116 fieldMatch:v319 fieldRegex:v320];

  *(void *)(v312 + 48) = v321;
  NSString v322 = String._bridgeToObjectiveC()();
  NSString v323 = String._bridgeToObjectiveC()();
  id v324 = [v116 fieldMatch:v322 fieldRegex:v323];

  *(void *)(v312 + 56) = v324;
  NSString v325 = String._bridgeToObjectiveC()();
  NSString v326 = String._bridgeToObjectiveC()();
  id v327 = [v116 fieldMatch:v325 fieldRegex:v326];

  *(void *)(v312 + 64) = v327;
  NSString v328 = String._bridgeToObjectiveC()();
  NSString v329 = String._bridgeToObjectiveC()();
  id v330 = [v116 fieldMatch:v328 fieldRegex:v329];

  *(void *)(v312 + 72) = v330;
  NSString v331 = String._bridgeToObjectiveC()();
  NSString v332 = String._bridgeToObjectiveC()();
  id v333 = [v116 fieldMatch:v331 fieldRegex:v332];

  *(void *)(v312 + 80) = v333;
  NSString v334 = String._bridgeToObjectiveC()();
  NSString v335 = String._bridgeToObjectiveC()();
  id v336 = [v116 fieldMatch:v334 fieldRegex:v335];

  *(void *)(v312 + 88) = v336;
  NSString v337 = String._bridgeToObjectiveC()();
  NSString v338 = String._bridgeToObjectiveC()();
  id v339 = [v116 fieldMatch:v337 fieldRegex:v338];

  *(void *)(v312 + 96) = v339;
  NSString v340 = String._bridgeToObjectiveC()();
  NSString v341 = String._bridgeToObjectiveC()();
  id v342 = [v116 fieldMatch:v340 fieldRegex:v341];

  *(void *)(v312 + 104) = v342;
  NSString v343 = String._bridgeToObjectiveC()();
  NSString v344 = String._bridgeToObjectiveC()();
  id v345 = [v116 fieldMatch:v343 fieldRegex:v344];

  *(void *)(v312 + 112) = v345;
  NSString v346 = String._bridgeToObjectiveC()();
  NSString v347 = String._bridgeToObjectiveC()();
  id v348 = [v116 fieldMatch:v346 fieldRegex:v347];

  *(void *)(v312 + 120) = v348;
  specialized Array._endMutation()(v349);
  uint64_t v350 = v312;
  Class v351 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v350);
  id v352 = [v116 orMatch:v351];

  NSString v353 = String._bridgeToObjectiveC()();
  id v354 = [v379 TPPBPolicyKeyViewMappingWithView:v353 matchingRule:v352];

  v115[22] = v354;
  uint64_t v355 = swift_allocObject(v380, 56LL, 7LL);
  *(_OWORD *)(v355 + 16) = xmmword_1001DE740;
  NSString v356 = String._bridgeToObjectiveC()();
  NSString v357 = String._bridgeToObjectiveC()();
  id v358 = [v116 fieldMatch:v356 fieldRegex:v357];

  *(void *)(v355 + 32) = v358;
  NSString v359 = String._bridgeToObjectiveC()();
  NSString v360 = String._bridgeToObjectiveC()();
  id v361 = [v116 fieldMatch:v359 fieldRegex:v360];

  *(void *)(v355 + 40) = v361;
  NSString v362 = String._bridgeToObjectiveC()();
  NSString v363 = String._bridgeToObjectiveC()();
  id v364 = [v116 fieldMatch:v362 fieldRegex:v363];

  *(void *)(v355 + 48) = v364;
  specialized Array._endMutation()(v365);
  Class v366 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v355);
  id v367 = [v116 orMatch:v366];

  NSString v368 = String._bridgeToObjectiveC()();
  id v369 = [v379 TPPBPolicyKeyViewMappingWithView:v368 matchingRule:v367];

  v115[23] = v369;
  id v370 = [v116 trueMatch];
  NSString v371 = String._bridgeToObjectiveC()();
  id v372 = [v379 TPPBPolicyKeyViewMappingWithView:v371 matchingRule:v370];

  v115[24] = v372;
  specialized Array._endMutation()(v373);
  id v374 = objc_allocWithZone(&OBJC_CLASS___TPPolicyDocument);
  return sub_10003BF74( 20LL,  v378,  v377,  v376,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v115,  (uint64_t)&off_100234DB8,  (uint64_t)&off_100234E28,  (uint64_t)&off_100234E58,  (uint64_t)&off_100234E98,  1LL);
}

BOOL sub_10003B728(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), a1);
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_10003B7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          NSString v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_10003B924(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }

  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }

  sub_100007620(0LL, &qword_100256C30, &OBJC_CLASS___TPVoucher_ptr);
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)(v10);

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)(v15);

        if ((v12 & 1) != 0) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }

      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0);
      return v12 & 1;
    }

    goto LABEL_11;
  }

  char v12 = 1;
  return v12 & 1;
}

void *sub_10003BA80(uint64_t *a1)
{
  uint64_t v2 = sub_100010074();
  uint64_t v3 = sub_10003BC20(v2, a1);
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    sub_10014E61C(0, v5, 0);
    Swift::Int v6 = (void *)(v4 + 64);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = swift_allocObject(&unk_1002356B0, 56LL, 7LL);
      __int128 v15 = *((_OWORD *)v6 - 2);
      __int128 v16 = *((_OWORD *)v6 - 1);
      *(_OWORD *)(v8 + 16) = v15;
      *(_OWORD *)(v8 + 32) = v16;
      *(void *)(v8 + 48) = v7;
      uint64_t v9 = swift_allocObject(&unk_1002356D8, 32LL, 7LL);
      *(void *)(v9 + 16) = sub_10003C1A0;
      *(void *)(v9 + 24) = v8;
      id v10 = (id)v15;
      swift_retain(v16);
      swift_retain(v7);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_10014E61C(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_10014E61C(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = sub_10003C1A8;
      v13[5] = v9;
      v6 += 5;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    swift_bridgeObjectRelease(v3);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_10003BC20(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (!v3)
  {
LABEL_17:
    swift_bridgeObjectRelease(v2);
    return (uint64_t)_swiftEmptyArrayStorage;
  }

  unint64_t v4 = 0LL;
  uint64_t v19 = result + 32;
  while (v4 < *(void *)(v2 + 16))
  {
    uint64_t v5 = v19 + 40 * v4;
    __int128 v21 = *(_OWORD *)v5;
    __int128 v22 = *(_OWORD *)(v5 + 16);
    uint64_t v6 = *(void *)(v5 + 32);
    ++v4;
    id v7 = *(id *)v5;
    swift_retain(v22);
    swift_retain(v6);
    id v8 = [v7 versionNumber];
    uint64_t v9 = *a2;
    if (*(void *)(*a2 + 16)
      && (id v10 = v8,
          uint64_t v11 = static Hasher._hash(seed:_:)(*(void *)(v9 + 40), v8),
          uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32),
          unint64_t v13 = v11 & ~v12,
          ((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0))
    {
      uint64_t v14 = *(void *)(v9 + 48);
      if (*(id *)(v14 + 8 * v13) != v10)
      {
        uint64_t v15 = ~v12;
        do
        {
          unint64_t v13 = (v13 + 1) & v15;
          if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
            goto LABEL_12;
          }
        }

        while (*(id *)(v14 + 8 * v13) != v10);
      }

      swift_release(v22);

      uint64_t result = swift_release(v6);
      if (v4 == v3) {
        goto LABEL_17;
      }
    }

    else
    {
LABEL_12:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0) {
        uint64_t result = sub_10014E638(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = sub_10014E638(v16 > 1, v17 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v17 + 1;
      uint64_t v18 = &_swiftEmptyArrayStorage[5 * v17];
      *((_OWORD *)v18 + 2) = v21;
      *((_OWORD *)v18 + 3) = v22;
      v18[8] = v6;
      if (v4 == v3) {
        goto LABEL_17;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10003BE2C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a1 + 8))();
  uint64_t v4 = v3;
  uint64_t v5 = Data.init(base64Encoded:options:)(v2);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease(v4);
  if (v7 >> 60 != 15)
  {
    NSString v8 = [*(id *)a1 policyHash];
    if (!v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v10 = v9;
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v10);
    }

    uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___TPPolicyDocument);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v13 = [v11 policyDocWithHash:v8 data:isa];
    sub_10003C1D0(v5, v7);

    if (v13) {
      return (uint64_t)v13;
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ELL,  0x80000001001E7AC0LL,  "TrustedPeersHelper/Policy.swift",  31LL,  2LL,  35LL,  0);
  __break(1u);
  return result;
}

id sub_10003BF74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  sub_100007620(0LL, &qword_1002515F0, &OBJC_CLASS___TPPBPolicyCategoriesByView_ptr);
  Class v18 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  sub_100007620(0LL, &qword_1002515F8, &OBJC_CLASS___TPPBPolicyIntroducersByCategory_ptr);
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  sub_100007620(0LL, &qword_100251600, &OBJC_CLASS___TPPBPolicyRedaction_ptr);
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a5);
  sub_100007620(0LL, &qword_100251608, &OBJC_CLASS___TPPBPolicyKeyViewMapping_ptr);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a6);
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a7);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a8);
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a9);
  Class v25 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a10);
  id v26 = [v30 initWithVersion:a1 modelToCategory:isa categoriesByView:v18 introducersByCategory:v19 redactions:v20 keyViewMapping:v21 userControlla bleViewList:v22 piggybackViews:v23 priorityViews:v24 inheritedExcludedViews:v25 hashAlgo:a11];

  return v26;
}

uint64_t sub_10003C1A0()
{
  return sub_10003BE2C(v0 + 16);
}

uint64_t sub_10003C1A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_10003C1D0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000852C(result, a2);
  }
  return result;
}

uint64_t sub_10003C1E4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_100010074();
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t result = (uint64_t)v1;
  uint64_t v5 = (void *)result;
  unint64_t v6 = _swiftEmptyArrayStorage;
  if (v3)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = v2 + 64;
    uint64_t v31 = v3;
    uint64_t v28 = v3 - 1;
    do
    {
      NSString v29 = v6;
      uint64_t v9 = (void *)(v8 + 40 * v7);
      unint64_t v10 = v7;
      while (1)
      {
        if (v10 >= *(void *)(v2 + 16))
        {
          __break(1u);
          return result;
        }

        __int128 v32 = *((_OWORD *)v9 - 1);
        __int128 v34 = *((_OWORD *)v9 - 2);
        uint64_t v11 = *v9;
        id v12 = v5;
        id v13 = (id)v34;
        swift_retain(v32);
        swift_retain(v11);
        id v14 = [v13 versionNumber];
        unint64_t v15 = (unint64_t)[v12 version];

        if ((v15 & 0x8000000000000000LL) == 0 && v14 == (id)v15) {
          break;
        }
        ++v10;
        swift_release(v32);

        uint64_t result = swift_release(v11);
        v9 += 5;
        if (v31 == v10)
        {
          unint64_t v6 = v29;
          goto LABEL_15;
        }
      }

      unint64_t v6 = v29;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v29);
      if ((result & 1) == 0)
      {
        uint64_t result = sub_10014E638(0, v29[2] + 1LL, 1);
        unint64_t v6 = v29;
      }

      unint64_t v17 = v6[2];
      unint64_t v16 = v6[3];
      if (v17 >= v16 >> 1)
      {
        uint64_t result = sub_10014E638(v16 > 1, v17 + 1, 1);
        unint64_t v6 = v29;
      }

      unint64_t v7 = v10 + 1;
      v6[2] = v17 + 1;
      Class v18 = &v6[5 * v17];
      *((_OWORD *)v18 + 2) = v34;
      *((_OWORD *)v18 + 3) = v32;
      v18[8] = v11;
      uint64_t v8 = v2 + 64;
    }

    while (v28 != v10);
  }

LABEL_15:
  swift_bridgeObjectRelease(v2);
  int64_t v19 = v6[2];
  if (v19)
  {
    sub_10014E61C(0, v19, 0);
    id v30 = v6;
    Class v20 = v6 + 8;
    do
    {
      uint64_t v21 = *v20;
      uint64_t v22 = swift_allocObject(&unk_100235700, 56LL, 7LL);
      __int128 v33 = *((_OWORD *)v20 - 2);
      __int128 v35 = *((_OWORD *)v20 - 1);
      *(_OWORD *)(v22 + 16) = v33;
      *(_OWORD *)(v22 + 32) = v35;
      *(void *)(v22 + 48) = v21;
      uint64_t v23 = swift_allocObject(&unk_100235728, 32LL, 7LL);
      *(void *)(v23 + 16) = sub_10003C7A8;
      *(void *)(v23 + 24) = v22;
      id v24 = (id)v33;
      swift_retain(v35);
      swift_retain(v21);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_10014E61C(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v26 = _swiftEmptyArrayStorage[2];
      unint64_t v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1) {
        sub_10014E61C(v25 > 1, v26 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v26 + 1;
      NSString v27 = &_swiftEmptyArrayStorage[2 * v26];
      v27[4] = sub_10003C7A0;
      v27[5] = v23;
      v20 += 5;
      --v19;
    }

    while (v19);
    swift_release(v30);
  }

  else
  {
    swift_release(v6);
  }

  return (uint64_t)_swiftEmptyArrayStorage;
}

    NSString v53 = &qword_1002563E8;
    Class v54 = (uint64_t)v30;
LABEL_35:
    sub_100041590(v54, v53);
    goto LABEL_36;
  }

  NSString v50 = v103;
  sub_10000FC68((uint64_t)v30, (uint64_t)v103, &qword_100257000);
  Class v51 = v49(v48, 1LL, v23);
  id v52 = v90;
  if (v51 == 1)
  {
    sub_100041590((uint64_t)v38, &qword_100257000);
    sub_100041590((uint64_t)v41, &qword_100257000);
    sub_1000415CC((uint64_t)v50, type metadata accessor for Metrics);
    goto LABEL_15;
  }

  id v55 = v96;
  sub_100041608(v48, (uint64_t)v96, type metadata accessor for Metrics);
  NSString v56 = v50[1];
  Class v57 = v55[1];
  if ((*v50 != *v55 || v56 != v57) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v50, v56, *v55, v57, 0LL) & 1) == 0
    || ((v58 = v50[2], v59 = v50[3], Class v60 = v55[2], v61 = v55[3], v58 != v60) || v59 != v61)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v60, v61, 0LL) & 1) == 0)
  {
    sub_1000415CC((uint64_t)v55, type metadata accessor for Metrics);
    Class v66 = &qword_100257000;
    sub_100041590((uint64_t)v38, &qword_100257000);
    sub_100041590((uint64_t)v41, &qword_100257000);
    sub_1000415CC((uint64_t)v50, type metadata accessor for Metrics);
    Class v54 = (uint64_t)v30;
    goto LABEL_34;
  }

  NSString v62 = *(int *)(v23 + 24);
  Class v63 = (char *)v50 + v62;
  id v64 = (char *)v55 + v62;
  NSString v65 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v63) = dispatch thunk of static Equatable.== infix(_:_:)(v63, v64, v52, v65);
  sub_1000415CC((uint64_t)v55, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v38, &qword_100257000);
  sub_100041590((uint64_t)v41, &qword_100257000);
  sub_1000415CC((uint64_t)v50, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v30, &qword_100257000);
LABEL_23:
  Class v66 = &qword_100251F50;
  id v67 = v100;
  sub_10000FC68((uint64_t)&v47[*(int *)(ViableBottlesRequest + 28)], v100, &qword_100251F50);
  NSString v68 = ViableBottlesRequest;
  Class v69 = v99;
  sub_10000FC68((uint64_t)&v104[*(int *)(ViableBottlesRequest + 28)], v99, &qword_100251F50);
  id v70 = v102;
  NSString v71 = v102 + *(int *)(v97 + 48);
  sub_10000FC68(v67, v102, &qword_100251F50);
  sub_10000FC68(v69, v71, &qword_100251F50);
  Class v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  id v73 = v101;
  if (v72(v70, 1LL, v101) != 1)
  {
    Class v75 = v95;
    sub_10000FC68(v70, (uint64_t)v95, &qword_100251F50);
    if (v72(v71, 1LL, v73) == 1)
    {
      sub_100041590(v69, &qword_100251F50);
      sub_100041590(v67, &qword_100251F50);
      sub_1000415CC((uint64_t)v75, type metadata accessor for AccountInfo);
      goto LABEL_28;
    }

    id v76 = v91;
    sub_100041608(v71, (uint64_t)v91, type metadata accessor for AccountInfo);
    if (*v75 == *v76)
    {
      NSString v77 = *(int *)(v73 + 20);
      Class v78 = (char *)v75 + v77;
      id v79 = (char *)v76 + v77;
      NSString v80 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      NSString v74 = v90;
      LOBYTE(v78) = dispatch thunk of static Equatable.== infix(_:_:)(v78, v79, v90, v80);
      sub_1000415CC((uint64_t)v76, type metadata accessor for AccountInfo);
      sub_100041590(v69, &qword_100251F50);
      sub_100041590(v67, &qword_100251F50);
      sub_1000415CC((uint64_t)v75, type metadata accessor for AccountInfo);
      sub_100041590(v70, &qword_100251F50);
LABEL_36:
      NSString v86 = 0;
      return v86 & 1;
    }

    sub_1000415CC((uint64_t)v76, type metadata accessor for AccountInfo);
    sub_100041590(v69, &qword_100251F50);
    sub_100041590(v67, &qword_100251F50);
    sub_1000415CC((uint64_t)v75, type metadata accessor for AccountInfo);
    Class v54 = v70;
LABEL_34:
    NSString v53 = v66;
    goto LABEL_35;
  }

  sub_100041590(v69, &qword_100251F50);
  sub_100041590(v67, &qword_100251F50);
  if (v72(v71, 1LL, v73) != 1)
  {
LABEL_28:
    NSString v53 = &qword_1002563E0;
    Class v54 = v70;
    goto LABEL_35;
  }

  sub_100041590(v70, &qword_100251F50);
  NSString v74 = v90;
LABEL_32:
  Class v81 = v94;
  id v82 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  NSString v83 = v92;
  v82(v92, &v47[*(int *)(v68 + 20)], v74);
  Class v84 = v93;
  v82(v93, &v104[*(int *)(v68 + 20)], v74);
  id v85 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  NSString v86 = dispatch thunk of static Equatable.== infix(_:_:)(v83, v84, v74, v85);
  Class v87 = *(void (**)(char *, uint64_t))(v81 + 8);
  v87(v84, v74);
  v87(v83, v74);
  return v86 & 1;
}

    id v91 = sub_100043F74();
    NSString v92 = swift_allocError(&type metadata for ContainerError, v91, 0LL, 0LL);
    *(_OWORD *)Class v93 = xmmword_1001E6820;
    *(_BYTE *)(v93 + 16) = 13;
    a2(0LL, 0LL, v92);
    swift_errorRelease();
    return;
  }

  unint64_t v17 = v16;
  Class v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  Class v20 = v19;

  uint64_t v21 = [*(id *)&a1[v15] egoPeerPermanentInfo];
  if (!v21)
  {
    swift_bridgeObjectRelease(v20, v22, v23, v24, v25, v26, v27, v28);
    NSString v86 = (os_log_s *)Logger.logObject.getter(v90);
    Class v87 = static os_log_type_t.info.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      id v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v88 = 0;
      NSString v89 = "permanentInfo does not exist";
      goto LABEL_14;
    }

    goto LABEL_15;
  }

  NSString v29 = v21;
  NSString v117 = a5;
  NSString v118 = a2;
  id v30 = v18;
  id v116 = a4;
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  __int128 v33 = v32;

  __int128 v34 = [*(id *)&a1[v15] egoPeerPermanentInfoSig];
  if (v34)
  {
    Class v42 = v34;
    NSString v115 = a3;
    id v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    NSString v44 = v20;
    Class v45 = v33;
    NSString v47 = v46;

    Class v48 = [objc_allocWithZone(TPECPublicKeyFactory) init];
    swift_bridgeObjectRetain(v44);
    sub_1000084E8(v31, v45);
    sub_1000084E8(v43, v47);
    NSString v110 = v30;
    id v49 = String._bridgeToObjectiveC()();
    id v112 = v44;
    swift_bridgeObjectRelease(v44, v50, v51, v52, v53, v54, v55, v56);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v58 = Data._bridgeToObjectiveC()().super.isa;
    Class v111 = v48;
    NSString v59 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v49 data:isa sig:v58 keyFactory:v48];
    uint64_t v113 = v47;
    uint64_t v114 = v43;
    sub_10000852C(v43, v47);
    sub_10000852C(v31, v45);

    if (v59)
    {
      id v67 = (void *)swift_allocObject(&unk_100238A50, 64LL, 7LL);
      v67[2] = v118;
      v67[3] = v115;
      v67[4] = v116;
      v67[5] = a1;
      v67[6] = v59;
      v67[7] = v117;
      strcpy((char *)v119, "signing-key ");
      BYTE5(v119[1]) = 0;
      HIWORD(v119[1]) = -5120;
      v68._countAndFlagsBits = v110;
      v68._object = v112;
      String.append(_:)(v68);
      swift_bridgeObjectRetain_n(v112, 2LL);
      swift_retain(v67);
      swift_retain(v115);
      Class v69 = v116;
      id v70 = a1;
      NSString v71 = v59;
      swift_bridgeObjectRetain(v117);
      sub_10015FAA0(v119[0], v119[1], (void (*)(char *, uint64_t))sub_100172700, (uint64_t)v67, v110, v112);

      swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v119[1], v72, v73, v74, v75, v76, v77, v78);
      swift_release_n(v67, 2LL);
      swift_bridgeObjectRelease_n(v112, 2LL);
      sub_10000852C(v43, v47);
      sub_10000852C(v31, v45);
      swift_bridgeObjectRelease(v112, v79, v80, v81, v82, v83, v84, v85);
    }

    else
    {
      Class v102 = v45;
      swift_bridgeObjectRelease(v112, v60, v61, v62, v63, v64, v65, v66);
      NSString v104 = (os_log_s *)Logger.logObject.getter(v103);
      Class v105 = static os_log_type_t.info.getter(v104);
      if (os_log_type_enabled(v104, (os_log_type_t)v105))
      {
        id v106 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v106 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v104,  (os_log_type_t)v105,  "Invalid permenent info or signature; can't vouch for them",
          v106,
          2u);
        swift_slowDealloc(v106, -1LL, -1LL);
      }

      NSString v107 = sub_100043F74();
      Class v108 = swift_allocError(&type metadata for ContainerError, v107, 0LL, 0LL);
      *(_OWORD *)id v109 = xmmword_1001DE880;
      *(_BYTE *)(v109 + 16) = 13;
      v118(0LL, 0LL, v108);
      swift_errorRelease();

      sub_10000852C(v114, v113);
      sub_10000852C(v31, v102);
    }
  }

  else
  {
    id v94 = v33;
    swift_bridgeObjectRelease(v20, v35, v36, v37, v38, v39, v40, v41);
    uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
    NSString v97 = static os_log_type_t.info.getter(v96);
    if (os_log_type_enabled(v96, v97))
    {
      Class v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)Class v98 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "permanentInfoSig does not exist", v98, 2u);
      swift_slowDealloc(v98, -1LL, -1LL);
    }

    Class v99 = sub_100043F74();
    id v100 = swift_allocError(&type metadata for ContainerError, v99, 0LL, 0LL);
    *(_OWORD *)NSString v101 = xmmword_1001E6820;
    *(_BYTE *)(v101 + 16) = 13;
    v118(0LL, 0LL, v100);
    swift_errorRelease();
    sub_10000852C(v31, v94);
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ContainerName);
  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  id v24 = sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  unint64_t v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
  id v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_100007620(0LL, (unint64_t *)&qword_100256DB0, &OBJC_CLASS___TPPolicyVersion_ptr);
  id v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  id v14 = static NSObject.== infix(_:_:)(v13);

  if ((v14 & 1) == 0)
  {
    unint64_t v15 = ~v11;
    do
    {
      id v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      unint64_t v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      unint64_t v17 = static NSObject.== infix(_:_:)(v16);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  int64_t v19 = *v2;
  uint64_t v22 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100152F54(&qword_100256DD8);
    int64_t v19 = v22;
  }

  uint64_t v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_100155D74(v12);
  Class v20 = *v2;
  *uint64_t v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

        uint64_t v11 = (v17 - 1) & v17;
        id v12 = __clz(__rbit64(v17)) + (v13 << 6);
        uint64_t v9 = v13;
LABEL_16:
        int64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        Class v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        uint64_t v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        id v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        unint64_t v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v43 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        NSString v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        NSString v29 = v28[1];
        id v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) != 0) {
          break;
        }
        __int128 v32 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v34 + 1)
        {
          __int128 v34 = i & v32;
          __int128 v35 = (void *)(v27 + 16 * v34);
          Class v36 = v35[1];
          id v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
            unint64_t v25 = v34 >> 6;
            unint64_t v26 = 1LL << v34;
            goto LABEL_23;
          }
        }

    unint64_t v15 = (v20 - 1) & v20;
  }

  while (1)
  {
    unint64_t v16 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v16 >= v40) {
      goto LABEL_26;
    }
    Class v20 = *(void *)(v39 + 8 * v16);
    ++v31;
    if (v20) {
      goto LABEL_15;
    }
  }

    unint64_t v16 = (v21 - 1) & v21;
  }

  while (1)
  {
    unint64_t v17 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v17 >= v41) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v40 + 8 * v17);
    ++v32;
    if (v21) {
      goto LABEL_15;
    }
  }

uint64_t sub_10003C518()
{
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10003C54C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t initializeBufferWithCopyOfBuffer for RawPolicy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for RawPolicy(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for RawPolicy(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = *((void *)a2 + 4);
  __int128 v4 = *a2;
  __int128 v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v3;
  id v5 = (id)v4;
  swift_retain(v7);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for RawPolicy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_retain(v7);
  swift_release(v8);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v9;
  swift_retain(v9);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for RawPolicy(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RawPolicy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawPolicy(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawPolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RawPolicy()
{
  return &type metadata for RawPolicy;
}

uint64_t sub_10003C7AC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v0, qword_100251610);
  sub_100006BAC(v0, (uint64_t)qword_100251610);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x80000001001E7520LL,  0x656E6961746E6F63LL,  0xE900000000000072LL);
}

void sub_10003C824(char *a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  if (!a1)
  {
    if (qword_100250BB8 != -1) {
      swift_once(&qword_100250BB8, sub_10003C7AC);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_100006BAC(v7, (uint64_t)qword_100251610);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_13;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "failed to bind memory", v11, 2u);
    uint64_t v12 = (uint64_t)v11;
    goto LABEL_12;
  }

  errno.setter(0LL);
  if ((uint64_t)confstr(a2, a1, 0x400uLL) > 0)
  {
    *a3 = String.init(cString:)(a1);
    a3[1] = v6;
    return;
  }

  if (qword_100250BB8 != -1) {
    swift_once(&qword_100250BB8, sub_10003C7AC);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_100006BAC(v13, (uint64_t)qword_100251610);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v15))
  {
    uint64_t v16 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)uint64_t v16 = 67109376;
    int v19 = a2;
    uint64_t v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v16 + 4, v16 + 8);
    *(_WORD *)(v16 + 8) = 1024;
    int v18 = errno.getter(v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v16 + 10, v16 + 14);
    _os_log_impl((void *)&_mh_execute_header, v9, v15, "confstr %d failed: %d", (uint8_t *)v16, 0xEu);
    uint64_t v12 = v16;
LABEL_12:
    swift_slowDealloc(v12, -1LL, -1LL);
  }

LABEL_13:
  *a3 = 0LL;
  a3[1] = 0LL;
}

        __int128 v34 = 0;
        return v34 & 1;
      }
    }

    else
    {
      sub_10000FC68((uint64_t)v17, (uint64_t)v22, &qword_100251648);
      if (v37(v36, 1LL, v10) != 1)
      {
        NSString v38 = v55;
        sub_100041608(v36, v55, type metadata accessor for ViewKeysRecords);
        Class v39 = _s18TrustedPeersHelper15ViewKeysRecordsV2eeoiySbAC_ACtFZ_0((uint64_t)v22, v38);
        sub_1000415CC(v38, type metadata accessor for ViewKeysRecords);
        sub_100041590((uint64_t)v26, &qword_100251648);
        sub_100041590((uint64_t)v29, &qword_100251648);
        sub_1000415CC((uint64_t)v22, type metadata accessor for ViewKeysRecords);
        sub_100041590((uint64_t)v17, &qword_100251648);
        if ((v39 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }

      sub_100041590((uint64_t)v26, &qword_100251648);
      sub_100041590((uint64_t)v29, &qword_100251648);
      sub_1000415CC((uint64_t)v22, type metadata accessor for ViewKeysRecords);
    }

    sub_100041590((uint64_t)v17, &qword_100251650);
    goto LABEL_13;
  }

  return v34 & 1;
}

    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_7;
  }

  LODWORD(v206) = a16;
  uint64_t v198 = a15;
  id v197 = a14;
  NSString v196 = a13;
  id v195 = a12;
  NSString v194 = a11;
  Class v87 = v209;
  id v88 = v218;
  NSString v89 = v85;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  Class v90 = [v89 data];
  id v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v90);
  Class v93 = v92;

  *Class v87 = v91;
  v87[1] = v93;
  id v202 = v89;
  id v94 = [v89 sig];
  uint64_t v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v94);
  NSString v97 = v96;

  v87[2] = v95;
  v87[3] = v97;
  __chkstk_darwin(v98, v99);
  id v100 = v212;
  *(&v193 - 8) = (uint64_t)v211;
  *(&v193 - 7) = v100;
  NSString v101 = v200;
  *(&v193 - 6) = v199;
  *(&v193 - 5) = (uint64_t)v101;
  Class v102 = v201;
  *(&v193 - 4) = (uint64_t)v215;
  *(&v193 - 3) = (uint64_t)v102;
  NSString v191 = v103;
  id v192 = v71;
  NSString v104 = sub_1000077B8( (unint64_t *)&unk_100257070,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
  static Message.with(_:)(sub_100175950, &v193 - 10, v203, v104);
  swift_bridgeObjectRelease(v102, v105, v106, v107, v108, v109, v110, v111);
  swift_bridgeObjectRelease(v101, v112, v113, v114, v115, v116, v117, v118);
  id v119 = *(void *)&v71[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
  id v212 = *(void *)&v71[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
  NSString v203 = v119;
  NSString v211 = sub_1000084C4(&v71[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v212);
  NSString v201 = a2;
  NSString v121 = v204;
  NSString v120 = v205;
  (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v208, v194, v205);
  id v122 = *(unsigned __int8 *)(v121 + 80);
  NSString v123 = (v122 + 24) & ~v122;
  NSString v124 = (v22 + v123 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  id v125 = (v124 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  NSString v126 = (v125 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  id v127 = (v126 + 19) & 0xFFFFFFFFFFFFFFF8LL;
  NSString v128 = (v127 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  NSString v129 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_10023A878, v128 + 16, v122 | 7);
  *(void *)v129->endpoint = v71;
  (*(void (**)(unsigned __int8 *, char *, uint64_t))(v121 + 32))( &v129->_TtCs12_SwiftObject_opaque[v123],  v208,  v120);
  id v130 = v201;
  *(void *)&v129->_TtCs12_SwiftObject_opaque[v124] = v201;
  NSString v131 = &v129->_TtCs12_SwiftObject_opaque[v125];
  id v132 = v196;
  *(void *)NSString v131 = v195;
  *((void *)v131 + 1) = v132;
  NSString v133 = &v129->_TtCs12_SwiftObject_opaque[v126];
  NSString v134 = v198;
  *(void *)NSString v133 = v197;
  *((void *)v133 + 1) = v134;
  *(_DWORD *)&v129->_TtCs12_SwiftObject_opaque[v127] = v206;
  id v135 = &v129->_TtCs12_SwiftObject_opaque[v128];
  NSString v136 = v213;
  *(void *)id v135 = v214;
  *((void *)v135 + 1) = v136;
  id v137 = *(void *)(v203 + 16);
  NSString v138 = *(void (**)(char *, void (*)(uint64_t), _TtC18TrustedPeersHelper6Client *, uint64_t, uint64_t))(v137 + 48);
  swift_retain(v130);
  NSString v139 = v71;
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRetain(v134);
  swift_retain(v136);
  id v140 = (uint64_t)v210;
  v138(v210, sub_100175A5C, v129, v212, v137);
  swift_release(v129, v141, v142, v143, v144, v145, v146, v147);

  sub_1000415CC(v140, type metadata accessor for AddCustodianRecoveryKeyRequest);
  sub_1000415CC((uint64_t)v209, type metadata accessor for SignedPeerDynamicInfo);
  NSString v148 = (uint64_t)v215;
  return sub_1000415CC(v148, type metadata accessor for SignedCustodianRecoveryKey);
}

  swift_release_n(v29, 2LL);
  swift_release_n(v27, 3LL);
}

  return v29;
}

    __n128 result = sub_10017C74C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    __n128 result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

void sub_10003CA3C(uint64_t a1)
{
  __asm { BR              X11 }

void sub_10003CA98(uint64_t a1@<X8>)
{
  uint64_t v5 = v3;
  LOWORD(v6) = a1;
  BYTE2(v6) = BYTE2(a1);
  HIBYTE(v6) = BYTE3(a1);
  unsigned __int8 v7 = BYTE4(a1);
  unsigned __int8 v8 = BYTE5(a1);
  unsigned __int8 v9 = BYTE6(a1);
  sub_10003C824((char *)&v5, v2, &v10);
  unint64_t v4 = v6 | ((unint64_t)v7 << 32) | ((unint64_t)v8 << 40) | ((unint64_t)v9 << 48);
  void *v1 = v5;
  v1[1] = v4;
}

void sub_10003CD18(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = __DataStorage._bytes.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = __DataStorage._offset.getter();
    uint64_t v10 = a1 - v9;
    if (__OFSUB__(a1, v9))
    {
      __break(1u);
    }

    else if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      sub_10003C824((char *)(v8 + v10), a4, &v11);
      return;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10003CDC0()
{
  uint64_t v0 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v1 = __DataStorage.init(length:)(1024LL);
  if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
  {
    uint64_t v2 = __DataStorage._bytes.getter();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t result = __DataStorage._offset.getter();
      if (__OFSUB__(0LL, result))
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }

      uint64_t v5 = v3 - result;
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
    uint64_t v6 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v5, 1024LL, 1LL, 0LL, 0LL, 0LL);
    swift_release(v1);
    uint64_t v1 = v6;
  }

  uint64_t result = __DataStorage._bytes.getter();
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v7 = result;
  uint64_t result = __DataStorage._offset.getter();
  uint64_t v8 = -result;
  if (__OFSUB__(0LL, result))
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v9 = __DataStorage._length.getter();
  if (v9 >= 1024) {
    size_t v10 = 1024LL;
  }
  else {
    size_t v10 = v9;
  }
  bzero((void *)(v7 + v8), v10);
  uint64_t v13 = 0x40000000000LL;
  unint64_t v14 = v1 | 0x4000000000000000LL;
  sub_10003CA3C((uint64_t)&v13);
  uint64_t v12 = v11;
  sub_10000852C(v13, v14);
  return v12;
}

uint64_t FetchPolicyDocumentsRequest._protobuf_generated_isEqualTo(other:)(char *a1)
{
  return sub_1000A82B0(v1, a1);
}

uint64_t FetchPolicyDocumentsResponse._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v19 - v10;
  if ((sub_10003E6BC(*v1, *a1) & 1) != 0)
  {
    uint64_t PolicyDocumentsResponse = type metadata accessor for FetchPolicyDocumentsResponse(0LL);
    uint64_t v13 = (char *)v1 + *(int *)(PolicyDocumentsResponse + 20);
    unint64_t v14 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v14(v11, v13, v3);
    v14(v8, (char *)a1 + *(int *)(PolicyDocumentsResponse + 20), v3);
    uint64_t v15 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v3, v15);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v8, v3);
    v17(v11, v3);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t FetchChangesRequest._protobuf_generated_isEqualTo(other:)(char *a1)
{
  return _s18TrustedPeersHelper19FetchChangesRequestV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t FetchChangesResponse._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_1000AD014(v1, a1);
}

uint64_t FetchViableBottlesRequest._protobuf_generated_isEqualTo(other:)(char *a1)
{
  return _s18TrustedPeersHelper25FetchViableBottlesRequestV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t FetchViableBottlesResponse._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  return _s18TrustedPeersHelper26FetchViableBottlesResponseV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t EscrowPair._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_1000B52A4(v1, a1);
}

uint64_t SetRecoveryKeyRequest._protobuf_generated_isEqualTo(other:)(void *a1)
{
  return _s18TrustedPeersHelper21SetRecoveryKeyRequestV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t SetRecoveryKeyResponse._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  return sub_1000AB47C(v1, a1);
}

uint64_t UpdateTrustRequest._protobuf_generated_isEqualTo(other:)(void *a1)
{
  return _s18TrustedPeersHelper18UpdateTrustRequestV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t UpdateTrustResponse._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  return sub_1000AD3F4(v1, a1);
}

uint64_t JoinWithVoucherRequest._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_1000ABB98(v1, a1);
}

uint64_t JoinWithVoucherResponse._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  return sub_1000AA734(v1, a1);
}

uint64_t EstablishRequest._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_1000B1054(v1, a1);
}

uint64_t EstablishResponse._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  return sub_1000AF16C(v1, a1);
}

uint64_t ResetRequest._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  return _s18TrustedPeersHelper12ResetRequestV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t ResetResponse._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return _s18TrustedPeersHelper13ResetResponseV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t PolicyDocumentMapEntry._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return _s18TrustedPeersHelper22PolicyDocumentMapEntryV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t PolicyDocumentKey._protobuf_generated_isEqualTo(other:)(char *a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v24 - v10;
  if (*v1 == *(void *)a1)
  {
    uint64_t v12 = v1[1];
    uint64_t v13 = v1[2];
    uint64_t v14 = *((void *)a1 + 1);
    uint64_t v15 = *((void *)a1 + 2);
    BOOL v16 = v12 == v14 && v13 == v15;
    if (v16 || (char v17 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 0LL) & 1) != 0))
    {
      uint64_t v18 = type metadata accessor for PolicyDocumentKey(0LL);
      uint64_t v19 = (char *)v1 + *(int *)(v18 + 24);
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      v20(v11, v19, v3);
      v20(v8, &a1[*(int *)(v18 + 24)], v3);
      uint64_t v21 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v3, v21);
      uint64_t v22 = *(void (**)(char *, uint64_t))(v4 + 8);
      v22(v8, v3);
      v22(v11, v3);
    }
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t Changes._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(v1 + 8);
  uint64_t v13 = *(void *)(a1 + 8);
  BOOL v14 = *(void *)v1 == *(void *)a1 && v12 == v13;
  if (v14
    || (char v15 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v1, v12, *(void *)a1, v13, 0LL) & 1) != 0))
  {
    if ((sub_100040DE0(*(void *)(v1 + 16), *(void *)(a1 + 16)) & 1) != 0
      && (sub_100041318(*(void *)(v1 + 24), *(void *)(v1 + 32)), (v16 & 1) != 0)
      && (sub_100041318(*(void *)(v1 + 40), *(void *)(v1 + 48)), (v17 & 1) != 0)
      && *(unsigned __int8 *)(v1 + 56) == *(unsigned __int8 *)(a1 + 56))
    {
      uint64_t v19 = type metadata accessor for Changes(0LL);
      uint64_t v20 = v1 + *(int *)(v19 + 36);
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      v21(v11, v20, v3);
      v21(v8, a1 + *(int *)(v19 + 36), v3);
      uint64_t v22 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v3, v22);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
      v23(v8, v3);
      v23(v11, v3);
    }

    else
    {
      char v15 = 0;
    }
  }

  return v15 & 1;
}

uint64_t TLKShare._protobuf_generated_isEqualTo(other:)(char *a1)
{
  return _s18TrustedPeersHelper8TLKShareV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t PeerDifference._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return _s18TrustedPeersHelper14PeerDifferenceV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t Peer._protobuf_generated_isEqualTo(other:)(void *a1)
{
  return _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t SignedPeerDynamicInfo._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_10003D42C(a1, type metadata accessor for SignedPeerDynamicInfo);
}

uint64_t SignedRecoveryVoucher._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_10003D42C(a1, type metadata accessor for SignedRecoveryVoucher);
}

uint64_t sub_10003D42C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v23 - v12;
  sub_100041318(*v2, v2[1]);
  if ((v14 & 1) != 0 && (sub_100041318(v2[2], v2[3]), (v15 & 1) != 0))
  {
    uint64_t v16 = a2(0LL);
    char v17 = (char *)v2 + *(int *)(v16 + 24);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v18(v13, v17, v5);
    v18(v10, (char *)(a1 + *(int *)(v16 + 24)), v5);
    uint64_t v19 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v5, v19);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v10, v5);
    v21(v13, v5);
  }

  else
  {
    char v20 = 0;
  }

  return v20 & 1;
}

uint64_t SignedVoucher._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_10003D42C(a1, type metadata accessor for SignedVoucher);
}

uint64_t SignedPeerStableInfo._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_10003D42C(a1, type metadata accessor for SignedPeerStableInfo);
}

uint64_t SignedPeerPermanentInfo._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_10003D42C(a1, type metadata accessor for SignedPeerPermanentInfo);
}

uint64_t Bottle._protobuf_generated_isEqualTo(other:)(char *a1)
{
  return _s18TrustedPeersHelper6BottleV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t ViewKey._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return _s18TrustedPeersHelper7ViewKeyV2eeoiySbAC_ACtFZ_0(v1, a1);
}

uint64_t ViewKeys._protobuf_generated_isEqualTo(other:)(uint64_t a1)
{
  return sub_1000A5C30(v1, a1);
}

uint64_t sub_10003D5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  Class v84 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v68 - v9;
  uint64_t v11 = type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  char v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100251648);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100007578(&qword_100251650);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecoverableTLKShares = type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
  uint64_t v25 = __chkstk_darwin(RecoverableTLKShares, v24);
  Class v81 = (char **)((char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v25, v27);
  NSString v80 = (char **)((char *)&v68 - v29);
  uint64_t v30 = *(void *)(a1 + 16);
  if (v30 != *(void *)(a2 + 16))
  {
LABEL_29:
    char v67 = 0;
    return v67 & 1;
  }

  if (!v30 || a1 == a2)
  {
    char v67 = 1;
    return v67 & 1;
  }

  uint64_t v71 = v20;
  Class v72 = v23;
  NSString v68 = v15;
  Class v69 = v19;
  uint64_t v73 = v12;
  uint64_t v74 = v11;
  uint64_t v31 = 0LL;
  unint64_t v32 = (*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v76 = a2 + v32;
  uint64_t v77 = a1 + v32;
  uint64_t v75 = *(void *)(v28 + 72);
  uint64_t v70 = v30;
  while (1)
  {
    uint64_t v78 = v31;
    uint64_t v33 = v75 * v31;
    __int128 v34 = v80;
    sub_10004164C(v77 + v75 * v31, (uint64_t)v80, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
    uint64_t v35 = v76 + v33;
    Class v36 = v81;
    sub_10004164C(v35, (uint64_t)v81, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
    uint64_t v37 = v34[1];
    uint64_t v38 = v36[1];
    BOOL v39 = *v34 == *v36 && v37 == v38;
    if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v34, v37, *v36, v38, 0LL) & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v40 = *(int *)(RecoverableTLKShares + 28);
    uint64_t v41 = (uint64_t)v81 + v40;
    uint64_t v42 = (uint64_t)v72;
    uint64_t v43 = (uint64_t)&v72[*(int *)(v71 + 48)];
    sub_10000FC68((uint64_t)v80 + v40, (uint64_t)v72, &qword_100251648);
    sub_10000FC68(v41, v43, &qword_100251648);
    uint64_t v44 = v74;
    Class v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    if (v45(v42, 1LL, v74) == 1)
    {
      if (v45(v43, 1LL, v44) != 1) {
        goto LABEL_27;
      }
      sub_100041590(v42, &qword_100251648);
    }

    else
    {
      uint64_t v46 = (uint64_t)v69;
      sub_10000FC68(v42, (uint64_t)v69, &qword_100251648);
      if (v45(v43, 1LL, v44) == 1)
      {
        sub_1000415CC(v46, type metadata accessor for ViewKeysRecords);
LABEL_27:
        sub_100041590(v42, &qword_100251650);
LABEL_28:
        sub_1000415CC((uint64_t)v81, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
        sub_1000415CC((uint64_t)v80, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
        goto LABEL_29;
      }

      uint64_t v47 = (uint64_t)v68;
      sub_100041608(v43, (uint64_t)v68, type metadata accessor for ViewKeysRecords);
      char v48 = static ViewKeysRecords.== infix(_:_:)(v46, v47);
      sub_1000415CC(v47, type metadata accessor for ViewKeysRecords);
      sub_1000415CC(v46, type metadata accessor for ViewKeysRecords);
      sub_100041590(v42, &qword_100251648);
      if ((v48 & 1) == 0) {
        goto LABEL_28;
      }
    }

    uint64_t v49 = v81[2];
    uint64_t v83 = v80[2];
    uint64_t v50 = *(void *)(v83 + 16);
    if (v50 != *(void *)(v49 + 16)) {
      goto LABEL_28;
    }
    if (v50 && v83 != v49) {
      break;
    }
LABEL_22:
    uint64_t v60 = (uint64_t)v80;
    uint64_t v61 = *(int *)(RecoverableTLKShares + 24);
    NSString v62 = (char *)v80 + v61;
    uint64_t v63 = (uint64_t)v81;
    id v64 = (char *)v81 + v61;
    uint64_t v65 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v66 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v67 = dispatch thunk of static Equatable.== infix(_:_:)(v62, v64, v65, v66);
    sub_1000415CC(v63, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
    sub_1000415CC(v60, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
    if ((v67 & 1) != 0)
    {
      uint64_t v31 = v78 + 1;
      if (v78 + 1 != v70) {
        continue;
      }
    }

    return v67 & 1;
  }

  unint64_t v51 = 0LL;
  unint64_t v52 = (*(unsigned __int8 *)(v85 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
  uint64_t v82 = *(void *)(v85 + 72);
  NSString v53 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v85 + 16);
  while (1)
  {
    uint64_t result = v53(v10, v83 + v52, v4);
    if (v51 >= *(void *)(v49 + 16)) {
      break;
    }
    id v55 = v84;
    v53(v84, v49 + v52, v4);
    uint64_t v56 = sub_1000077B8( &qword_100251630,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
    char v57 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v55, v4, v56);
    id v58 = v10;
    NSString v59 = *(void (**)(char *, uint64_t))(v85 + 8);
    v59(v55, v4);
    v59(v58, v4);
    if ((v57 & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v10 = v58;
    ++v51;
    v52 += v82;
    if (v50 == v51) {
      goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10003DB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v9);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 == *(void *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      char v20 = 1;
    }

    else
    {
      unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v25 = *(void *)(v10 + 72);
      uint64_t v26 = v10;
      char v15 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      uint64_t v16 = v13 - 1;
      do
      {
        uint64_t v17 = a1;
        v15(v12, a1 + v14, v4);
        uint64_t v18 = a2;
        v15(v8, a2 + v14, v4);
        uint64_t v19 = sub_1000077B8( &qword_100251630,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
        char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v8, v4, v19);
        uint64_t v21 = *(void (**)(char *, uint64_t))(v26 + 8);
        v21(v8, v4);
        v21(v12, v4);
        BOOL v23 = v16-- != 0;
        if ((v20 & 1) == 0) {
          break;
        }
        v14 += v25;
        a2 = v18;
        a1 = v17;
      }

      while (v23);
    }
  }

  else
  {
    char v20 = 0;
  }

  return v20 & 1;
}

uint64_t sub_10003DC90(uint64_t a1, uint64_t a2)
{
  return sub_10003F200( a1,  a2,  type metadata accessor for DirectPCSIdentity,  (uint64_t (*)(char *, char *))static DirectPCSIdentity.== infix(_:_:));
}

uint64_t sub_10003DCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = type metadata accessor for PCSService(0LL);
  uint64_t v5 = __chkstk_darwin(v16, v4);
  uint64_t v7 = (_DWORD *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5, v8);
  uint64_t v11 = (_DWORD *)((char *)v15 - v10);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v12 && a1 != a2)
  {
    unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v15[4] = *(void *)(v9 + 72);
    v15[5] = a1;
    sub_10004164C(a1 + v13, (uint64_t)v15 - v10, type metadata accessor for PCSService);
    sub_10004164C(a2 + v13, (uint64_t)v7, type metadata accessor for PCSService);
    if (*v11 == *v7) {
      __asm { BR              X10 }
    }

    sub_1000415CC((uint64_t)v7, type metadata accessor for PCSService);
    sub_1000415CC((uint64_t)v11, type metadata accessor for PCSService);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10003E6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v43 = (void *)((char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = sub_100007578(&qword_100251668);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (void *)((char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = sub_100007578(&qword_100251670);
  __chkstk_darwin(v44, v11);
  unint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for PolicyDocumentMapEntry(0LL);
  uint64_t v15 = __chkstk_darwin(v46, v14);
  uint64_t v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)v42 - v20;
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16)) {
    goto LABEL_21;
  }
  if (v22 && a1 != a2)
  {
    unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v24 = *(void *)(v19 + 72);
    v42[2] = 0LL;
    v42[3] = v24;
    v42[7] = a1;
    v42[8] = a2;
    v42[5] = v10;
    v42[6] = v4;
    v42[4] = v13;
    sub_10004164C(a1 + v23, (uint64_t)v42 - v20, type metadata accessor for PolicyDocumentMapEntry);
    sub_10004164C(a2 + v23, (uint64_t)v17, type metadata accessor for PolicyDocumentMapEntry);
    uint64_t v25 = *(int *)(v46 + 24);
    uint64_t v26 = (uint64_t)&v17[v25];
    uint64_t v27 = (uint64_t)&v13[*(int *)(v44 + 48)];
    sub_10000FC68((uint64_t)&v21[v25], (uint64_t)v13, &qword_100251668);
    sub_10000FC68(v26, v27, &qword_100251668);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (v28((uint64_t)v13, 1LL, v4) == 1)
    {
      if (v28(v27, 1LL, v4) == 1)
      {
        sub_100041590((uint64_t)v13, &qword_100251668);
        goto LABEL_13;
      }

      uint64_t v40 = &qword_100251670;
    }

    else
    {
      sub_10000FC68((uint64_t)v13, (uint64_t)v10, &qword_100251668);
      if (v28(v27, 1LL, v4) == 1)
      {
        uint64_t v40 = &qword_100251670;
      }

      else
      {
        uint64_t v29 = v43;
        sub_100041608(v27, (uint64_t)v43, type metadata accessor for PolicyDocumentKey);
        if (*v10 == *v29)
        {
          if ((uint64_t v30 = v10[1], v31 = v10[2], v32 = v29[1], v33 = v29[2], v30 == v32) && v31 == v33
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) != 0)
          {
            uint64_t v34 = *(int *)(v4 + 24);
            uint64_t v35 = (char *)v10 + v34;
            Class v36 = (char *)v29 + v34;
            uint64_t v37 = type metadata accessor for UnknownStorage(0LL);
            uint64_t v38 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v35) = dispatch thunk of static Equatable.== infix(_:_:)(v35, v36, v37, v38);
            sub_1000415CC((uint64_t)v29, type metadata accessor for PolicyDocumentKey);
            sub_1000415CC((uint64_t)v10, type metadata accessor for PolicyDocumentKey);
            sub_100041590((uint64_t)v13, &qword_100251668);
            if ((v35 & 1) != 0) {
LABEL_13:
            }
              __asm { BR              X10 }

            goto LABEL_20;
          }
        }

        sub_1000415CC((uint64_t)v29, type metadata accessor for PolicyDocumentKey);
        uint64_t v40 = &qword_100251668;
      }

      sub_1000415CC((uint64_t)v10, type metadata accessor for PolicyDocumentKey);
    }

    sub_100041590((uint64_t)v13, v40);
LABEL_20:
    sub_1000415CC((uint64_t)v17, type metadata accessor for PolicyDocumentMapEntry);
    sub_1000415CC((uint64_t)v21, type metadata accessor for PolicyDocumentMapEntry);
LABEL_21:
    char v39 = 0;
    return v39 & 1;
  }

  char v39 = 1;
  return v39 & 1;
}

uint64_t sub_10003EE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6, v9);
  uint64_t v12 = (uint64_t *)((char *)&v33 - v11);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 == *(void *)(a2 + 16))
  {
    if (!v13 || a1 == a2) {
      return 1LL;
    }
    unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v33 = *(void *)(v10 + 72);
    uint64_t v15 = type metadata accessor for PolicyDocumentKey;
    uint64_t v34 = (char *)&v33 - v11;
    while (1)
    {
      sub_10004164C(a1 + v14, (uint64_t)v12, v15);
      sub_10004164C(a2 + v14, (uint64_t)v8, v15);
      if (*v12 != *v8) {
        break;
      }
      uint64_t v16 = v12[1];
      uint64_t v17 = v12[2];
      uint64_t v18 = v8[1];
      uint64_t v19 = v8[2];
      BOOL v20 = v16 == v18 && v17 == v19;
      if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v21 = *(int *)(v4 + 24);
      uint64_t v22 = (char *)v12 + v21;
      unint64_t v23 = (char *)v8 + v21;
      uint64_t v24 = v8;
      uint64_t v25 = v15;
      uint64_t v26 = a1;
      uint64_t v27 = a2;
      uint64_t v28 = v4;
      uint64_t v29 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v30 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v23, v29, v30);
      uint64_t v4 = v28;
      a2 = v27;
      a1 = v26;
      uint64_t v15 = v25;
      uint64_t v8 = v24;
      uint64_t v12 = v34;
      if ((v31 & 1) == 0) {
        break;
      }
      sub_1000415CC((uint64_t)v8, v15);
      sub_1000415CC((uint64_t)v12, v15);
      v14 += v33;
      if (!--v13) {
        return 1LL;
      }
    }

    sub_1000415CC((uint64_t)v8, type metadata accessor for PolicyDocumentKey);
    sub_1000415CC((uint64_t)v12, type metadata accessor for PolicyDocumentKey);
  }

  return 0LL;
}

uint64_t sub_10003F018(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = type metadata accessor for EscrowPair(0LL);
  uint64_t v5 = __chkstk_darwin(v22, v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12 == *(void *)(a2 + 16))
  {
    if (!v12 || a1 == a2) {
      return 1LL;
    }
    unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v21 = *(void *)(v9 + 72);
    while (1)
    {
      sub_10004164C(a1 + v13, (uint64_t)v11, type metadata accessor for EscrowPair);
      sub_10004164C(a2 + v13, (uint64_t)v7, type metadata accessor for EscrowPair);
      uint64_t v14 = *(int *)(v22 + 20);
      uint64_t v15 = *(void *)&v11[v14];
      uint64_t v16 = *(void *)&v7[v14];
      if (v15 != v16)
      {
        swift_retain(*(void *)&v11[v14]);
        swift_retain(v16);
        BOOL v17 = sub_1000845C4(v15, v16);
        swift_release(v16);
        swift_release(v15);
        if (!v17) {
          break;
        }
      }

      uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v19 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v11, v7, v18, v19) & 1) == 0) {
        break;
      }
      sub_1000415CC((uint64_t)v7, type metadata accessor for EscrowPair);
      sub_1000415CC((uint64_t)v11, type metadata accessor for EscrowPair);
      v13 += v21;
      if (!--v12) {
        return 1LL;
      }
    }

    sub_1000415CC((uint64_t)v7, type metadata accessor for EscrowPair);
    sub_1000415CC((uint64_t)v11, type metadata accessor for EscrowPair);
  }

  return 0LL;
}

uint64_t sub_10003F1EC(uint64_t a1, uint64_t a2)
{
  return sub_10003F200( a1,  a2,  type metadata accessor for EscrowInformation,  (uint64_t (*)(char *, char *))static EscrowInformation.== infix(_:_:));
}

uint64_t sub_10003F200( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(char *, char *))
{
  uint64_t v8 = a3(0LL);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 == *(void *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      char v21 = 1;
    }

    else
    {
      unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v19 = *(void *)(v14 + 72);
      uint64_t v20 = v17 - 1;
      do
      {
        sub_10004164C(a1 + v18, (uint64_t)v16, a3);
        sub_10004164C(a2 + v18, (uint64_t)v12, a3);
        char v21 = a4(v16, v12);
        sub_1000415CC((uint64_t)v12, a3);
        sub_1000415CC((uint64_t)v16, a3);
        BOOL v23 = v20-- != 0;
        if ((v21 & 1) == 0) {
          break;
        }
        v18 += v19;
      }

      while (v23);
    }
  }

  else
  {
    char v21 = 0;
  }

  return v21 & 1;
}

uint64_t sub_10003F33C(uint64_t a1, uint64_t a2)
{
  return sub_10003F200( a1,  a2,  type metadata accessor for SupportAppDevice,  (uint64_t (*)(char *, char *))static SupportAppDevice.== infix(_:_:));
}

uint64_t sub_10003F350(uint64_t a1, uint64_t a2)
{
  return sub_10003F200( a1,  a2,  type metadata accessor for CurrentCKKSItem,  (uint64_t (*)(char *, char *))static CurrentCKKSItem.== infix(_:_:));
}

uint64_t sub_10003F364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (uint64_t *)((char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6, v9);
  uint64_t v12 = (uint64_t *)((char *)&v39 - v11);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 != *(void *)(a2 + 16))
  {
LABEL_23:
    char v35 = 0;
    return v35 & 1;
  }

  if (v13 && a1 != a2)
  {
    unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v39 = *(void *)(v10 + 72);
    uint64_t v15 = v13 - 1;
    uint64_t v16 = type metadata accessor for CurrentCKKSItemSpecifier;
    uint64_t v40 = (char *)&v39 - v11;
    while (1)
    {
      sub_10004164C(a1 + v14, (uint64_t)v12, v16);
      sub_10004164C(a2 + v14, (uint64_t)v8, v16);
      uint64_t v17 = v12[1];
      uint64_t v18 = v8[1];
      BOOL v19 = *v12 == *v8 && v17 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v17, *v8, v18, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v20 = v12[2];
      uint64_t v21 = v12[3];
      uint64_t v22 = v8[2];
      uint64_t v23 = v8[3];
      BOOL v24 = v20 == v22 && v21 == v23;
      if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v25 = v4;
      uint64_t v26 = *(int *)(v4 + 24);
      uint64_t v27 = (char *)v12 + v26;
      uint64_t v28 = v15;
      uint64_t v29 = v16;
      uint64_t v30 = (char *)v8 + v26;
      uint64_t v31 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v32 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v33 = v30;
      uint64_t v16 = v29;
      uint64_t v34 = v28;
      uint64_t v12 = v40;
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v33, v31, v32);
      sub_1000415CC((uint64_t)v8, v16);
      sub_1000415CC((uint64_t)v12, v16);
      BOOL v36 = v34 != 0;
      uint64_t v15 = v34 - 1;
      char v37 = v36;
      if ((v35 & 1) != 0)
      {
        v14 += v39;
        uint64_t v4 = v25;
        if ((v37 & 1) != 0) {
          continue;
        }
      }

      return v35 & 1;
    }

    sub_1000415CC((uint64_t)v8, type metadata accessor for CurrentCKKSItemSpecifier);
    sub_1000415CC((uint64_t)v12, type metadata accessor for CurrentCKKSItemSpecifier);
    goto LABEL_23;
  }

  char v35 = 1;
  return v35 & 1;
}

uint64_t sub_10003F56C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), uint64_t result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v2 - 1;
    if (!v12) {
      return 1LL;
    }
    uint64_t v13 = a2 + 7;
    for (unint64_t i = a1 + 7; ; i += 2)
    {
      uint64_t v15 = *(i - 1);
      uint64_t v16 = *i;
      uint64_t v17 = *(v13 - 1);
      uint64_t v18 = *v13;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      v13 += 2;
      if (!--v12) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10003F630(uint64_t a1, uint64_t a2)
{
  return sub_10003F200( a1,  a2,  type metadata accessor for TLKShare,  (uint64_t (*)(char *, char *))_s18TrustedPeersHelper8TLKShareV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_10003F644(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = type metadata accessor for ViewKeys(0LL);
  uint64_t v5 = __chkstk_darwin(v26, v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v8);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12 != *(void *)(a2 + 16))
  {
LABEL_15:
    char v21 = 0;
    return v21 & 1;
  }

  if (v12 && a1 != a2)
  {
    unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v25 = *(void *)(v9 + 72);
    uint64_t v14 = v12 - 1;
    while (1)
    {
      sub_10004164C(a1 + v13, (uint64_t)v11, type metadata accessor for ViewKeys);
      sub_10004164C(a2 + v13, (uint64_t)v7, type metadata accessor for ViewKeys);
      uint64_t v15 = *(int *)(v26 + 20);
      uint64_t v16 = *(void *)&v11[v15];
      uint64_t v17 = *(void *)&v7[v15];
      if (v16 != v17)
      {
        swift_retain(*(void *)&v11[v15]);
        swift_retain(v17);
        BOOL v18 = sub_100081DA0(v16, v17);
        swift_release(v17);
        swift_release(v16);
        if (!v18) {
          break;
        }
      }

      uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v20 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v7, v19, v20);
      sub_1000415CC((uint64_t)v7, type metadata accessor for ViewKeys);
      sub_1000415CC((uint64_t)v11, type metadata accessor for ViewKeys);
      BOOL v23 = v14-- != 0;
      if ((v21 & 1) != 0)
      {
        v13 += v25;
        if (v23) {
          continue;
        }
      }

      return v21 & 1;
    }

    sub_1000415CC((uint64_t)v7, type metadata accessor for ViewKeys);
    sub_1000415CC((uint64_t)v11, type metadata accessor for ViewKeys);
    goto LABEL_15;
  }

  char v21 = 1;
  return v21 & 1;
}

uint64_t sub_10003F82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251638);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SupportAppView(0LL);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  char v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v26 = (char *)&v55 - v25;
  uint64_t v27 = *(void *)(a1 + 16);
  if (v27 != *(void *)(a2 + 16))
  {
LABEL_26:
    char v51 = 0;
    return v51 & 1;
  }

  uint64_t v58 = v13;
  uint64_t v64 = v4;
  uint64_t v62 = v5;
  if (v27 && a1 != a2)
  {
    uint64_t v63 = v23;
    uint64_t v56 = v8;
    char v57 = v12;
    unint64_t v28 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v59 = *(void *)(v24 + 72);
    uint64_t v60 = a1;
    uint64_t v29 = v27 - 1;
    uint64_t v30 = v64;
    uint64_t v31 = v58;
    uint64_t v61 = a2;
    while (1)
    {
      sub_10004164C(a1 + v28, (uint64_t)v26, type metadata accessor for SupportAppView);
      sub_10004164C(a2 + v28, (uint64_t)v21, type metadata accessor for SupportAppView);
      uint64_t v32 = *((void *)v26 + 1);
      uint64_t v33 = *((void *)v21 + 1);
      BOOL v34 = *(void *)v26 == *(void *)v21 && v32 == v33;
      if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v26, v32, *(void *)v21, v33, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v35 = *(int *)(v63 + 28);
      uint64_t v36 = (uint64_t)&v21[v35];
      uint64_t v37 = (uint64_t)&v16[*(int *)(v31 + 48)];
      sub_10000FC68((uint64_t)&v26[v35], (uint64_t)v16, (uint64_t *)&unk_100256D30);
      sub_10000FC68(v36, v37, (uint64_t *)&unk_100256D30);
      uint64_t v38 = v62;
      uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
      if (v39((uint64_t)v16, 1LL, v30) == 1)
      {
        if (v39(v37, 1LL, v30) != 1) {
          goto LABEL_24;
        }
        sub_100041590((uint64_t)v16, (uint64_t *)&unk_100256D30);
      }

      else
      {
        uint64_t v40 = (uint64_t)v57;
        sub_10000FC68((uint64_t)v16, (uint64_t)v57, (uint64_t *)&unk_100256D30);
        if (v39(v37, 1LL, v30) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v30);
LABEL_24:
          sub_100041590((uint64_t)v16, &qword_100251638);
          break;
        }

        uint64_t v41 = v56;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v56, v37, v64);
        uint64_t v42 = sub_1000077B8( &qword_100251640,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v41, v64, v42);
        uint64_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
        uint64_t v45 = v41;
        uint64_t v30 = v64;
        v44(v45, v64);
        v44((char *)v40, v30);
        sub_100041590((uint64_t)v16, (uint64_t *)&unk_100256D30);
        uint64_t v31 = v58;
        if ((v43 & 1) == 0) {
          break;
        }
      }

      if (v26[16] != v21[16]) {
        break;
      }
      uint64_t v46 = *(int *)(v63 + 24);
      uint64_t v47 = &v26[v46];
      char v48 = &v21[v46];
      uint64_t v49 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v50 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v49, v50);
      sub_1000415CC((uint64_t)v21, type metadata accessor for SupportAppView);
      sub_1000415CC((uint64_t)v26, type metadata accessor for SupportAppView);
      BOOL v53 = v29-- != 0;
      if ((v51 & 1) != 0)
      {
        a1 = v60;
        v28 += v59;
        a2 = v61;
        if (v53) {
          continue;
        }
      }

      return v51 & 1;
    }

    sub_1000415CC((uint64_t)v21, type metadata accessor for SupportAppView);
    sub_1000415CC((uint64_t)v26, type metadata accessor for SupportAppView);
    goto LABEL_26;
  }

  char v51 = 1;
  return v51 & 1;
}

uint64_t sub_10003FC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = type metadata accessor for SignedVoucher(0LL);
  uint64_t v5 = __chkstk_darwin(v16, v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v8);
  uint64_t v11 = (char *)v15 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v12)
  {
    if (a1 != a2)
    {
      unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v15[4] = *(void *)(v9 + 72);
      v15[3] = a2;
      v15[5] = a1;
      sub_10004164C(a1 + v13, (uint64_t)v15 - v10, type metadata accessor for SignedVoucher);
      sub_10004164C(a2 + v13, (uint64_t)v7, type metadata accessor for SignedVoucher);
      __asm { BR              X10 }
    }
  }

  return 1LL;
}

uint64_t sub_100040DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251660);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for PeerDifference(0LL);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  char v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v49 = a2;
  if (v26 != *(void *)(a2 + 16)) {
    goto LABEL_17;
  }
  unint64_t v52 = (char *)&v45 - v25;
  if (!v26 || a1 == v49)
  {
    char v42 = 1;
    return v42 & 1;
  }

  uint64_t v46 = v8;
  unint64_t v27 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v47 = *(void *)(v24 + 72);
  uint64_t v48 = v23;
  uint64_t v28 = v26 - 1;
  uint64_t v29 = (uint64_t)v52;
  while (1)
  {
    uint64_t v51 = v28;
    unint64_t v30 = v27;
    sub_10004164C(a1 + v27, v29, type metadata accessor for PeerDifference);
    unint64_t v50 = v30;
    sub_10004164C(v49 + v30, (uint64_t)v21, type metadata accessor for PeerDifference);
    uint64_t v31 = (uint64_t)&v16[*(int *)(v13 + 48)];
    sub_10000FC68(v29, (uint64_t)v16, &qword_100251658);
    sub_10000FC68((uint64_t)v21, v31, &qword_100251658);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    if (v32(v16, 1LL, v4) != 1) {
      break;
    }
    sub_100041590((uint64_t)v16, &qword_100251658);
    uint64_t v33 = v52;
LABEL_10:
    uint64_t v36 = *(int *)(v48 + 20);
    uint64_t v37 = &v33[v36];
    uint64_t v38 = &v21[v36];
    uint64_t v39 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v40 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    uint64_t v41 = v38;
    uint64_t v29 = (uint64_t)v52;
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v41, v39, v40);
    sub_1000415CC((uint64_t)v21, type metadata accessor for PeerDifference);
    sub_1000415CC(v29, type metadata accessor for PeerDifference);
    uint64_t v28 = v51 - 1;
    if ((v42 & 1) != 0)
    {
      unint64_t v27 = v50 + v47;
      if (v51) {
        continue;
      }
    }

    return v42 & 1;
  }

  sub_10000FC68((uint64_t)v16, (uint64_t)v12, &qword_100251658);
  if (v32((char *)v31, 1LL, v4) != 1)
  {
    uint64_t v34 = (uint64_t)v46;
    sub_100041608(v31, (uint64_t)v46, type metadata accessor for PeerDifference.OneOf_Operation);
    char v35 = _s18TrustedPeersHelper14PeerDifferenceV15OneOf_OperationO21__derived_enum_equalsySbAE_AEtFZ_0( (uint64_t)v12,  v34);
    sub_1000415CC(v34, type metadata accessor for PeerDifference.OneOf_Operation);
    sub_1000415CC((uint64_t)v12, type metadata accessor for PeerDifference.OneOf_Operation);
    sub_100041590((uint64_t)v16, &qword_100251658);
    uint64_t v33 = v52;
    if ((v35 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }

  sub_1000415CC((uint64_t)v12, type metadata accessor for PeerDifference.OneOf_Operation);
LABEL_15:
  sub_100041590((uint64_t)v16, &qword_100251660);
  uint64_t v33 = v52;
LABEL_16:
  uint64_t v43 = (uint64_t)v33;
  sub_1000415CC((uint64_t)v21, type metadata accessor for PeerDifference);
  sub_1000415CC(v43, type metadata accessor for PeerDifference);
LABEL_17:
  char v42 = 0;
  return v42 & 1;
}

uint64_t sub_100041190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_100148FB0((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100041264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_100148FB0(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_100041318(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100041364()
{
  return ((uint64_t (*)(void))((char *)&loc_100041398 + *((int *)qword_100041570 + (v0 >> 62))))();
}

uint64_t sub_1000413A8@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_100041590(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100007578(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000415CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100041608(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004164C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100041690()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v0, qword_100251678);
  sub_100006BAC(v0, (uint64_t)qword_100251678);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x80000001001E7520LL,  0x7064656C74746F62LL,  0xEC00000073726565LL);
}

uint64_t sub_10004170C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, void, void, void, void))
{
  if (qword_100250BC0 != -1) {
    swift_once(&qword_100250BC0, sub_100041690);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v12, (uint64_t)qword_100251678);
  swift_errorRetain(a5);
  uint64_t v13 = swift_errorRetain(a5);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v38 = a3;
    uint64_t v39 = a7;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    char v18 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a5)
    {
      uint64_t v42 = 0x203A726F727265LL;
      unint64_t v43 = 0xE700000000000000LL;
      uint64_t v41 = a5;
      swift_errorRetain(a5);
      swift_errorRetain(a5);
      uint64_t v19 = sub_100007578(&qword_100251D70);
      v20._countAndFlagsBits = String.init<A>(describing:)(&v41, v19);
      object = (_TtC18TrustedPeersHelper6Client *)v20._object;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(object, v22, v23, v24, v25, v26, v27, v28);
      swift_errorRelease();
      uint64_t v29 = v42;
      char v18 = (_TtC18TrustedPeersHelper6Client *)v43;
    }

    else
    {
      uint64_t v29 = 0x73736563637573LL;
    }

    uint64_t v42 = sub_10017C4C4(v29, (unint64_t)v18, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v18, v30, v31, v32, v33, v34, v35, v36);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "preflightVouchWithBottle complete: %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    a7 = v39;
    a3 = v38;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD000000000000029LL, 0x80000001001F6310LL);
  return a7(a1, a2, a3, a4 & 1, a5);
}

void sub_100041990( uint64_t a1, _WORD *a2, _TtC18TrustedPeersHelper6Client *a3, void (*a4)(uint64_t, _TtC18TrustedPeersHelper6Client *, void *, void, void))
{
  uint64_t v5 = sub_100041C58(a2, a3);
  uint64_t v7 = v6;
  __int16 v9 = v8;
  uint64_t v11 = v10;

  id v19 = v11;
  a4(v7, v9, v11, 0LL, 0LL);
  swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
}

_WORD *sub_100041C58(_WORD *a1, _TtC18TrustedPeersHelper6Client *a2)
{
  uint64_t v6 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  char v10 = v9;

  id v11 = [*(id *)(v207 + v6) egoPeerPermanentInfo];
  if (!v11)
  {
LABEL_11:
    swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
LABEL_12:
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    uint64_t v59 = sub_100006BAC(v58, (uint64_t)qword_100251678);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v64 = static os_log_type_t.error.getter(v60, v61, v62, v63);
    if (os_log_type_enabled(v60, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  v64,  "fetchCurrentPolicy failed to find ego peer information",  v65,  2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    unint64_t v66 = sub_100043F74();
    uint64_t v67 = swift_allocError(&type metadata for ContainerError, v66, 0LL, 0LL);
    *(_OWORD *)uint64_t v68 = xmmword_1001DE890;
    *(_BYTE *)(v68 + 16) = 13;
    swift_willThrow(v67);
    return a1;
  }

  id v19 = v11;
  uint64_t v200 = (uint64_t)a1;
  a1 = (_WORD *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v21 = v20;

  id v22 = [*(id *)(v207 + v6) egoPeerPermanentInfoSig];
  if (!v22)
  {
    sub_10000852C((uint64_t)a1, v21);
    goto LABEL_11;
  }

  id v23 = v22;
  uint64_t v198 = v3;
  uint64_t v199 = a2;
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v26 = v25;

  unint64_t v206 = v21;
  id v27 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  sub_1000084E8((uint64_t)a1, v206);
  sub_1000084E8(v24, v26);
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10, v29, v30, v31, v32, v33, v34, v35);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v37 = Data._bridgeToObjectiveC()().super.isa;
  id v38 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v28 data:isa sig:v37 keyFactory:v27];
  id v205 = v27;

  uint64_t v202 = v24;
  unint64_t v203 = v26;
  sub_10000852C(v24, v26);
  uint64_t v204 = (uint64_t)a1;
  sub_10000852C((uint64_t)a1, v206);

  if (!v38)
  {
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v75 = type metadata accessor for Logger(0LL);
    uint64_t v76 = sub_100006BAC(v75, (uint64_t)qword_100251678);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v81 = static os_log_type_t.error.getter(v77, v78, v79, v80);
    if (os_log_type_enabled(v77, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  v81,  "fetchCurrentPolicy failed to create TPPeerPermanentInfo",  v82,  2u);
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    unint64_t v83 = sub_100043F74();
    uint64_t v84 = swift_allocError(&type metadata for ContainerError, v83, 0LL, 0LL);
    *(_OWORD *)uint64_t v85 = xmmword_1001DE880;
    *(_BYTE *)(v85 + 16) = 13;
    swift_willThrow(v84);

    sub_10000852C(v202, v26);
    uint64_t v73 = (uint64_t)a1;
    unint64_t v74 = v206;
    goto LABEL_24;
  }

  uint64_t v39 = v38;
  id v40 = [*(id *)(v207 + v6) bottles];
  if (!v40
    || (uint64_t v41 = v40,
        id v210 = 0LL,
        uint64_t v42 = type metadata accessor for BottleMO(),
        uint64_t v43 = sub_100044A74(&qword_100251690, (uint64_t (*)(uint64_t))type metadata accessor for BottleMO),
        static Set._conditionallyBridgeFromObjectiveC(_:result:)(v41, &v210, v42, v43),
        v41,
        (uint64_t v44 = (uint64_t)v210) == 0))
  {
    unint64_t v69 = sub_100043F74();
    uint64_t v70 = swift_allocError(&type metadata for ContainerError, v69, 0LL, 0LL);
    uint64_t v72 = 26LL;
LABEL_18:
    *(void *)uint64_t v71 = v72;
    *(void *)(v71 + 8) = 0LL;
    *(_BYTE *)(v71 + 16) = 13;
    swift_willThrow(v70);

    sub_10000852C(v24, v26);
    uint64_t v73 = v204;
    unint64_t v74 = v206;
LABEL_24:
    sub_10000852C(v73, v74);
    return a1;
  }

  swift_bridgeObjectRetain(v199);
  Swift::Int v45 = sub_1000443CC(v44, v200, (uint64_t)v199);
  swift_bridgeObjectRelease(v199, v46, v47, v48, v49, v50, v51, v52);
  a1 = (_WORD *)sub_1000DC8AC(v45);
  swift_release(v45);
  if (!a1)
  {
    unint64_t v87 = sub_100043F74();
    uint64_t v70 = swift_allocError(&type metadata for ContainerError, v87, 0LL, 0LL);
    uint64_t v72 = 15LL;
    goto LABEL_18;
  }

  id v197 = v39;
  id v53 = *(id *)(v207 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v54 = [a1 peerID];
  if (v54)
  {
    uint64_t v55 = v54;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    char v57 = v56;
  }

  else
  {
    char v57 = (_TtC18TrustedPeersHelper6Client *)0xE000000000000000LL;
  }

  NSString v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v57, v89, v90, v91, v92, v93, v94, v95);
  id v210 = 0LL;
  id v96 = [v53 peerWithID:v88 error:&v210];

  if (v210)
  {
    id v97 = v210;

    swift_willThrow(v98);
    Class v99 = v39;
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v100 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v100, (uint64_t)qword_100251678);
    NSString v101 = a1;
    id v102 = v97;
    id v103 = v101;
    id v104 = v102;
    Class v105 = (os_log_s *)Logger.logObject.getter(v104);
    os_log_type_t v109 = static os_log_type_t.error.getter(v105, v106, v107, v108);
    if (os_log_type_enabled(v105, v109))
    {
      os_log_type_t v208 = v109;
      a1 = (_WORD *)swift_slowAlloc(22LL, -1LL);
      NSString v201 = (void *)swift_slowAlloc(64LL, -1LL);
      id v210 = v201;
      *(_DWORD *)a1 = 136446466;
      id v110 = [v103 peerID];
      if (v110)
      {
        Class v111 = v110;
        uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
        uint64_t v114 = v113;
      }

      else
      {
        uint64_t v112 = 0xD000000000000010LL;
        uint64_t v114 = (_TtC18TrustedPeersHelper6Client *)0x80000001001F62E0LL;
      }

      uint64_t v209 = sub_10017C4C4(v112, (unint64_t)v114, (uint64_t *)&v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, a1 + 2, a1 + 6);

      swift_bridgeObjectRelease(v114, v149, v150, v151, v152, v153, v154, v155);
      a1[6] = 2082;
      uint64_t v209 = (uint64_t)v104;
      id v156 = v104;
      uint64_t v157 = sub_100007578(&qword_100251D70);
      uint64_t v158 = String.init<A>(describing:)(&v209, v157);
      NSString v160 = (_TtC18TrustedPeersHelper6Client *)v159;
      uint64_t v209 = sub_10017C4C4(v158, v159, (uint64_t *)&v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, a1 + 7, a1 + 11);

      swift_bridgeObjectRelease(v160, v161, v162, v163, v164, v165, v166, v167);
      _os_log_impl( (void *)&_mh_execute_header,  v105,  v208,  "preflightVouchWithBottle Error finding peer with ID %{public}s: %{public}s",  (uint8_t *)a1,  0x16u);
      swift_arrayDestroy(v201, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v201, -1LL, -1LL);
      swift_slowDealloc(a1, -1LL, -1LL);

      Class v99 = v197;
    }

    else
    {
    }

    swift_willThrow(v137);
    sub_10000852C(v204, v206);
    sub_10000852C(v202, v203);

LABEL_47:
    return a1;
  }

  if (v96)
  {
    id v115 = v96;
    id v116 = [v115 stableInfo];
    if (v116)
    {
      NSString v117 = v116;
      NSString v118 = v115;
      id v119 = [v39 modelID];
      int v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
      id v122 = v121;

      sub_10011F6F8(v120, v122, v117);
      if (!v198)
      {
        swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
        NSString v178 = v118;
        id v179 = [v118 peerID];
        static String._unconditionallyBridgeFromObjectiveC(_:)(v179);

        sub_10000852C(v204, v206);
        sub_10000852C(v202, v203);

        return a1;
      }

      sub_10000852C(v204, v206);
      sub_10000852C(v202, v26);

      swift_bridgeObjectRelease(v122, v130, v131, v132, v133, v134, v135, v136);
    }

    else
    {
      if (qword_100250BC0 != -1) {
        swift_once(&qword_100250BC0, sub_100041690);
      }
      uint64_t v168 = type metadata accessor for Logger(0LL);
      uint64_t v169 = sub_100006BAC(v168, (uint64_t)qword_100251678);
      id v170 = (os_log_s *)Logger.logObject.getter(v169);
      os_log_type_t v171 = static os_log_type_t.info.getter(v170);
      if (os_log_type_enabled(v170, v171))
      {
        id v172 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v172 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v170,  v171,  "preflightVouchWithBottle sponsor peer has no stable info",  v172,  2u);
        swift_slowDealloc(v172, -1LL, -1LL);
      }

      id v173 = [a1 peerID];
      if (v173)
      {
        NSString v174 = v173;
        uint64_t v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
        unint64_t v177 = v176;
      }

      else
      {
        uint64_t v175 = 0xD000000000000010LL;
        unint64_t v177 = 0x80000001001F62E0LL;
      }

      unint64_t v180 = sub_100043F74();
      uint64_t v181 = swift_allocError(&type metadata for ContainerError, v180, 0LL, 0LL);
      *(void *)uint64_t v182 = v175;
      *(void *)(v182 + 8) = v177;
      *(_BYTE *)(v182 + 16) = 0;
      swift_willThrow(v181);

      sub_10000852C(v204, v206);
      sub_10000852C(v202, v26);
    }

    goto LABEL_47;
  }

  if (qword_100250BC0 != -1) {
    swift_once(&qword_100250BC0, sub_100041690);
  }
  uint64_t v138 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v138, (uint64_t)qword_100251678);
  NSString v139 = a1;
  id v140 = (os_log_s *)Logger.logObject.getter(v139);
  os_log_type_t v141 = static os_log_type_t.info.getter(v140);
  if (os_log_type_enabled(v140, v141))
  {
    id v142 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    NSString v143 = (void *)swift_slowAlloc(32LL, -1LL);
    id v210 = v143;
    *(_DWORD *)id v142 = 136446210;
    id v144 = [v139 peerID];
    if (v144)
    {
      id v145 = v144;
      uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
      NSString v148 = v147;
    }

    else
    {
      NSString v148 = (_TtC18TrustedPeersHelper6Client *)0x80000001001F62E0LL;
      uint64_t v146 = 0xD000000000000010LL;
    }

    uint64_t v209 = sub_10017C4C4(v146, (unint64_t)v148, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v142 + 4, v142 + 12);

    swift_bridgeObjectRelease(v148, v183, v184, v185, v186, v187, v188, v189);
    _os_log_impl( (void *)&_mh_execute_header,  v140,  v141,  "preflightVouchWithBottle found no peer to match bottle with ID %{public}s",  v142,  0xCu);
    swift_arrayDestroy(v143, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v143, -1LL, -1LL);
    swift_slowDealloc(v142, -1LL, -1LL);
  }

  else
  {
  }

  id v190 = [v139 peerID];
  a1 = (_WORD *)0xD000000000000010LL;
  if (v190)
  {
    NSString v191 = v190;
    a1 = (_WORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
    unint64_t v193 = v192;
  }

  else
  {
    unint64_t v193 = 0x80000001001F62E0LL;
  }

  unint64_t v194 = sub_100043F74();
  uint64_t v195 = swift_allocError(&type metadata for ContainerError, v194, 0LL, 0LL);
  *(void *)uint64_t v196 = a1;
  *(void *)(v196 + 8) = v193;
  *(_BYTE *)(v196 + 16) = 0;
  swift_willThrow(v195);
  sub_10000852C(v204, v206);
  sub_10000852C(v202, v203);

  return a1;
}

void sub_10004299C( uint64_t a1, void (*a2)(void, void, void, uint64_t, uint64_t), uint64_t a3, void *a4, void *a5, _TtC18TrustedPeersHelper6Client *a6)
{
  if (a1)
  {
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v9, (uint64_t)qword_100251678);
    swift_errorRetain(a1);
    uint64_t v10 = swift_errorRetain(a1);
    id v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      id v50 = (_TtC18TrustedPeersHelper6Client *)v14;
      *(_DWORD *)id v13 = 136446210;
      uint64_t v48 = a1;
      swift_errorRetain(a1);
      uint64_t v15 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v16 = String.init<A>(describing:)(&v48, v15);
      BOOL v18 = (_TtC18TrustedPeersHelper6Client *)v17;
      uint64_t v48 = sub_10017C4C4(v16, v17, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "preflightVouchWithBottle unable to fetch current peers: %{public}s",  v13,  0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a2(0LL, 0LL, 0LL, 1LL, a1);
  }

  else
  {
    __chkstk_darwin(0LL, a2);
    v47[2] = v29;
    v47[3] = a2;
    v47[4] = a3;
    uint64_t v30 = sub_100007578(&qword_100251698);
    NSManagedObjectContext.performAndWait<A>(_:)(&v50, sub_100044690, v47, v30);
    int64_t v31 = v50;
    if (v50)
    {
      swift_retain(a3);
      id v32 = a4;
      swift_bridgeObjectRetain(a6);
      sub_100159B44((uint64_t)v31, v32, (uint64_t)a2, a3, v32, a5, (uint64_t)a6);
      swift_bridgeObjectRelease(v31, v33, v34, v35, v36, v37, v38, v39);
      swift_release(a3);

      swift_bridgeObjectRelease(a6, v40, v41, v42, v43, v44, v45, v46);
    }
  }

void sub_100042C5C( uint64_t a1@<X0>, void (*a2)(void, void, void, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v27 = 0LL;
  id v6 = [v5 allPolicyVersionsWithError:&v27];
  id v7 = v27;
  if (v6)
  {
    uint64_t v8 = v6;
    unint64_t v9 = sub_100044A38();
    uint64_t v10 = sub_100044A74((unint64_t *)&qword_100256DE0, (uint64_t (*)(uint64_t))sub_100044A38);
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);
    id v12 = v7;
  }

  else
  {
    id v13 = v27;
    uint64_t v14 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v15);
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_100251678);
    swift_errorRetain(v14);
    uint64_t v17 = swift_errorRetain(v14);
    BOOL v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v22 = static os_log_type_t.error.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v23 = 138543362;
      swift_errorRetain(v14);
      BOOL v24 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
      id v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 4, v23 + 12);
      *unint64_t v26 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Error fetching all policy versions: %{public}@", v23, 0xCu);
      uint64_t v25 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v26, 1LL, v25);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v14);
    a2(0LL, 0LL, 0LL, 1LL, v14);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v11 = 0LL;
  }

  *a3 = v11;
}

uint64_t sub_100042F2C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  return sub_1000446AC(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100042F48( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, uint64_t a9)
{
  if (!a3)
  {
    id v12 = *(void **)&a7[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v15 = (os_log_s *)swift_allocObject(&unk_100235800, 56LL, 7LL);
    *((void *)v15 + 2) = a7;
    *((void *)v15 + 3) = a8;
    *((void *)v15 + 4) = a9;
    *((void *)v15 + 5) = a5;
    *((void *)v15 + 6) = a6;
    a5 = swift_allocObject(&unk_100235828, 32LL, 7LL);
    *(void *)(a5 + 16) = sub_100044964;
    *(void *)(a5 + 24) = v15;
    aBlock[4] = (uint64_t)sub_100044980;
    uint64_t v41 = a5;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100235840;
    SEL v33 = _Block_copy(aBlock);
    uint64_t v34 = v41;
    int64_t v35 = a7;
    swift_bridgeObjectRetain(a9);
    swift_retain(a6);
    swift_retain(a5);
    swift_release(v34);
    [v12 performBlockAndWait:v33];
    _Block_release(v33);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a5, "", 121LL, 72LL, 53LL, 1LL);
    swift_release(v15);
    uint64_t result = swift_release(a5);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }

  id v12 = a3;
  if (qword_100250BC0 != -1) {
    swift_once(&qword_100250BC0, sub_100041690);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v13, (uint64_t)qword_100251678);
  swift_errorRetain(a4);
  uint64_t v14 = swift_errorRetain(a4);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter(v15);
  if (!os_log_type_enabled(v15, v16))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  uint64_t v38 = a5;
  uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v18 = swift_slowAlloc(32LL, -1LL);
  uint64_t v39 = a4;
  aBlock[0] = v18;
  *(_DWORD *)uint64_t v17 = 136446210;
  swift_errorRetain(a4);
  uint64_t v19 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v20 = String.init<A>(describing:)(&v39, v19);
  os_log_type_t v22 = (_TtC18TrustedPeersHelper6Client *)v21;
  uint64_t v39 = sub_10017C4C4(v20, v21, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, aBlock, v17 + 4, v17 + 12);
  id v23 = v22;
  a5 = v38;
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "preflightVouchWithBottle unable to fetch viable bottles: %{public}s",  v17,  0xCu);
  swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v18, -1LL, -1LL);
  swift_slowDealloc(v17, -1LL, -1LL);
LABEL_9:

  return ((uint64_t (*)(void, void, void, uint64_t, void *))a5)(0LL, 0LL, 0LL, 1LL, v12);
}

void sub_100043268( uint64_t a1, _WORD *a2, _TtC18TrustedPeersHelper6Client *a3, void (*a4)(uint64_t, _TtC18TrustedPeersHelper6Client *, void *, uint64_t, void))
{
  uint64_t v5 = sub_100041C58(a2, a3);
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v11 = v10;

  id v19 = v11;
  a4(v7, v9, v11, 1LL, 0LL);
  swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1000434E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(&unk_1002358C8, 32LL, 7LL);
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  uint64_t v10 = *(void **)&v4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
  uint64_t v11 = (void *)swift_allocObject(&unk_1002358F0, 56LL, 7LL);
  v11[2] = v4;
  v11[3] = a1;
  v11[4] = a2;
  v11[5] = sub_100044AB4;
  v11[6] = v9;
  uint64_t v12 = swift_allocObject(&unk_100235918, 32LL, 7LL);
  *(void *)(v12 + 16) = sub_100044AF4;
  *(void *)(v12 + 24) = v11;
  v18[4] = sub_100044B24;
  uint64_t v19 = v12;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256LL;
  _OWORD v18[2] = sub_1000DC9F8;
  v18[3] = &unk_100235930;
  id v13 = _Block_copy(v18);
  uint64_t v14 = v19;
  swift_retain(a4);
  id v15 = v4;
  swift_bridgeObjectRetain(a2);
  swift_retain(v9);
  swift_retain(v12);
  swift_release(v14);
  [v10 performBlockAndWait:v13];
  swift_release(v9);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v12, "", 121LL, 146LL, 33LL, 1LL);
  swift_release(v11);
  uint64_t result = swift_release(v12);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100043684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void))
{
  uint64_t v4 = a4;
  if (a3) {
    os_log_type_t v8 = static os_log_type_t.error.getter(a1, a2, a3, a4);
  }
  else {
    os_log_type_t v8 = static os_log_type_t.info.getter(a1);
  }
  os_log_type_t v9 = v8;
  if (qword_100250BC0 != -1) {
    swift_once(&qword_100250BC0, sub_100041690);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v10, (uint64_t)qword_100251678);
  swift_errorRetain(a3);
  uint64_t v11 = swift_errorRetain(a3);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  if (os_log_type_enabled(v12, v9))
  {
    unint64_t v21 = v4;
    id v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v14;
    *(_DWORD *)id v13 = 136446210;
    unint64_t v15 = 0xE700000000000000LL;
    if (a3)
    {
      uint64_t v23 = 0x203A726F727265LL;
      unint64_t v24 = 0xE700000000000000LL;
      uint64_t v22 = a3;
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      uint64_t v16 = sub_100007578(&qword_100251D70);
      v17._countAndFlagsBits = String.init<A>(describing:)(&v22, v16);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      swift_errorRelease();
      uint64_t v19 = v23;
      unint64_t v15 = v24;
    }

    else
    {
      uint64_t v19 = 0x73736563637573LL;
    }

    uint64_t v23 = sub_10017C4C4(v19, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v9, "octagonPeerID complete: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    uint64_t v4 = v21;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return v4(a1, a2, a3);
}

void sub_1000438D4(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, uint64_t, id))
{
  id v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "bottles"));
  if (!v8
    || (os_log_type_t v9 = v8,
        id v65 = 0LL,
        uint64_t v10 = type metadata accessor for BottleMO(),
        uint64_t v11 = sub_100044A74(&qword_100251690, (uint64_t (*)(uint64_t))type metadata accessor for BottleMO),
        static Set._conditionallyBridgeFromObjectiveC(_:result:)(v9, &v65, v10, v11),
        v9,
        (uint64_t v12 = (uint64_t)v65) == 0))
  {
    unint64_t v20 = sub_100043F74();
    uint64_t v21 = swift_allocError(&type metadata for ContainerError, v20, 0LL, 0LL);
    id v23 = (id)v21;
    uint64_t v24 = 26LL;
LABEL_7:
    *(void *)uint64_t v22 = v24;
    *(void *)(v22 + 8) = 0LL;
    *(_BYTE *)(v22 + 16) = 13;
    swift_willThrow(v21);
LABEL_8:
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v25, (uint64_t)qword_100251678);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(v23);
    swift_bridgeObjectRetain(a3);
    uint64_t v26 = swift_errorRetain(v23);
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v31 = static os_log_type_t.error.getter(v27, v28, v29, v30);
    if (os_log_type_enabled(v27, v31))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      SEL v33 = (void *)swift_slowAlloc(64LL, -1LL);
      id v65 = v33;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain(a3);
      uint64_t v63 = sub_10017C4C4(a2, a3, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v32 + 12) = 2082;
      uint64_t v63 = (uint64_t)v23;
      swift_errorRetain(v23);
      uint64_t v34 = sub_100007578(&qword_100251D70);
      uint64_t v35 = String.init<A>(describing:)(&v63, v34);
      unint64_t v37 = v36;
      uint64_t v63 = sub_10017C4C4(v35, v36, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease(v37);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v31,  "octagonPeerID Error finding peer with bottleID %s, privacy: .public): %{public}s",  (uint8_t *)v32,  0x16u);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v23);
    a4(0LL, 0LL, v23);
    swift_errorRelease();
    swift_errorRelease();
    return;
  }

  swift_bridgeObjectRetain(a3);
  Swift::Int v13 = sub_1000443CC(v12, a2, a3);
  swift_bridgeObjectRelease(a3);
  uint64_t v14 = (void *)sub_1000DC8AC(v13);
  swift_release(v13);
  if (!v14)
  {
    unint64_t v38 = sub_100043F74();
    uint64_t v21 = swift_allocError(&type metadata for ContainerError, v38, 0LL, 0LL);
    id v23 = (id)v21;
    uint64_t v24 = 15LL;
    goto LABEL_7;
  }

  id v15 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v16 = [v14 peerID];
  if (v16)
  {
    Swift::String v17 = v16;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;
  }

  else
  {
    unint64_t v19 = 0xE000000000000000LL;
  }

  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  id v65 = 0LL;
  id v40 = [v15 peerWithID:v39 error:&v65];

  if (v65)
  {
    id v23 = v65;

    swift_willThrow(v41);
    goto LABEL_8;
  }

  if (v40)
  {
    id v42 = [v40 peerID];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v45 = v44;

    a4(v43, v45, 0LL);
    swift_bridgeObjectRelease(v45);
  }

  else
  {
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v46, (uint64_t)qword_100251678);
    id v47 = v14;
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v52 = static os_log_type_t.error.getter(v48, v49, v50, v51);
    if (os_log_type_enabled(v48, v52))
    {
      id v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v54 = (void *)swift_slowAlloc(32LL, -1LL);
      id v65 = v54;
      *(_DWORD *)id v53 = 136446210;
      id v55 = [v47 peerID];
      if (v55)
      {
        uint64_t v56 = v55;
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
        unint64_t v59 = v58;
      }

      else
      {
        unint64_t v59 = 0x80000001001F62E0LL;
        uint64_t v57 = 0xD000000000000010LL;
      }

      uint64_t v63 = sub_10017C4C4(v57, v59, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v53 + 4, v53 + 12);

      swift_bridgeObjectRelease(v59);
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v52,  "octagonPeerID Unable to finding peer with peerID %{public}s",  v53,  0xCu);
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v60 = sub_100043F74();
    uint64_t v61 = swift_allocError(&type metadata for ContainerError, v60, 0LL, 0LL);
    *(_OWORD *)uint64_t v62 = xmmword_1001DE8A0;
    *(_BYTE *)(v62 + 16) = 13;
    a4(0LL, 0LL, (id)v61);
    swift_errorRelease();
  }

unint64_t sub_100043F74()
{
  unint64_t result = qword_100251D50;
  if (!qword_100251D50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ContainerError,  &type metadata for ContainerError);
    atomic_store(result, (unint64_t *)&qword_100251D50);
  }

  return result;
}

void sub_100043FB8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a2;
  uint64_t v30 = 0LL;
  int64_t v7 = 0LL;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v8 = a3 + 56;
  uint64_t v9 = v10;
  uint64_t v11 = 1LL << *(_BYTE *)(v8 - 24);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v9;
  uint64_t v31 = v8;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v15 = v14 | (v7 << 6);
LABEL_21:
    id v19 = *(id *)(*(void *)(a3 + 48) + 8 * v15);
    id v20 = objc_msgSend(v19, "bottleID", v28);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v24 = v23;

      if (v22 == a4 && v24 == a5)
      {

        swift_bridgeObjectRelease(a5);
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        if (__OFADD__(v30++, 1LL))
        {
          __break(1u);
LABEL_32:
          swift_retain(a3);
          sub_1001511D0(a1, v28, v30, a3);
          return;
        }
      }

      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, a4, a5, 0LL);

        swift_bridgeObjectRelease(v24);
        if ((v26 & 1) != 0) {
          goto LABEL_29;
        }
      }
    }

    else
    {
    }
  }

  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_34;
  }

  if (v16 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 1;
  if (v16 + 1 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v7);
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 2;
  if (v16 + 2 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v7);
  if (v17)
  {
LABEL_20:
    unint64_t v13 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_21;
  }

  int64_t v18 = v16 + 3;
  if (v18 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v18);
  if (v17)
  {
    int64_t v7 = v18;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v7 >= v32) {
      goto LABEL_32;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }

LABEL_34:
  __break(1u);
}

                id v47 = 0;
              }
            }
          }
        }
      }
    }
  }

  return v47 & 1;
}

  swift_release(a4, v46, v47, v48, v49, v50, v51, v52);
  uint64_t v70 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc);
  id v97 = 0LL;
  uint64_t v71 = [v70 save:&v97];
  uint64_t v72 = v97;
  if ((v71 & 1) != 0)
  {
    uint64_t v73 = qword_100250EB8;
    unint64_t v74 = v97;
    if (v73 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v75 = type metadata accessor for Logger(0LL);
    uint64_t v76 = sub_100006BAC(v75, (uint64_t)qword_1002567D0);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    uint64_t v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Saved MOC to drop peer MOs", v79, 2u);
      swift_slowDealloc(v79, -1LL, -1LL);
    }

    v96(0LL);
  }

  else
  {
    uint64_t v80 = v97;
    os_log_type_t v81 = _convertNSErrorToError(_:)(v72);

    swift_willThrow(v82);
    unint64_t v83 = v96;
    if (qword_100250EB8 != -1) {
      swift_once(&qword_100250EB8, sub_1000DD078);
    }
    uint64_t v84 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v84, (uint64_t)qword_1002567D0);
    swift_errorRetain(v81);
    uint64_t v85 = swift_errorRetain(v81);
    NSString v86 = (os_log_s *)Logger.logObject.getter(v85);
    id v90 = static os_log_type_t.error.getter(v86, v87, v88, v89);
    if (os_log_type_enabled(v86, v90))
    {
      int64_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v92 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)int64_t v91 = 138477827;
      swift_errorRetain(v81);
      id v93 = (void *)_swift_stdlib_bridgeErrorToNSError(v81);
      id v97 = v93;
      unint64_t v83 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v91 + 4, v91 + 12);
      *id v92 = v93;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v86, v90, "Failed to save MOC to drop peers: %{private}@", v91, 0xCu);
      BOOL v94 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v92, 1LL, v94);
      swift_slowDealloc(v92, -1LL, -1LL);
      swift_slowDealloc(v91, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v81);
    v83(v81);
    swift_errorRelease();
    swift_errorRelease();
  }

  return objc_msgSend(v70, "rollback", v95, v96);
}

    uint64_t v24 = (v33 - 1) & v33;
    uint64_t v25 = __clz(__rbit64(v33)) + (v10 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

    uint64_t v11 = (v25 - 1) & v25;
    int64_t v18 = __clz(__rbit64(v25)) + (v9 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

    uint64_t v10 = (v23 - 1) & v23;
    int64_t v16 = __clz(__rbit64(v23)) + (v9 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

  __break(1u);
}

              sub_100172694(v1);
              return;
            }
          }
        }
      }
    }

uint64_t sub_1000441FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(_BYTE *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1LL << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2LL);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v12);
    bzero((char *)&v19 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    swift_bridgeObjectRetain(a3);
    sub_100043FB8((unint64_t *)((char *)&v19 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v9, a1, a2, a3);
    uint64_t v14 = v13;
    swift_release(a1);
    uint64_t v15 = swift_bridgeObjectRelease(a3);
    if (v3) {
      swift_willThrow(v15);
    }
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  else
  {
    int64_t v16 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v16, v10);
    swift_bridgeObjectRetain(a3);
    sub_100043FB8((unint64_t *)v16, v9, a1, a2, a3);
    uint64_t v14 = v17;
    swift_release(a1);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  return v14;
}

Swift::Int sub_1000443CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return sub_1000441FC(a1, a2, a3);
  }
  uint64_t v5 = &_swiftEmptySetSingleton;
  SEL v33 = &_swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a3);
  uint64_t v7 = __CocoaSet.makeIterator()(v6);
  uint64_t v8 = __CocoaSet.Iterator.next()(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = type metadata accessor for BottleMO();
    while (1)
    {
      uint64_t v31 = v9;
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      id v12 = [v32 bottleID];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v16 = v15;

        if (v14 == a2 && v16 == a3)
        {
          swift_bridgeObjectRelease(a3);
LABEL_17:
          id v19 = v32;
          id v20 = v33;
          unint64_t v21 = v33[2];
          if (v33[3] <= v21)
          {
            sub_10014F7A8(v21 + 1);
            id v20 = v33;
          }

          Swift::Int result = NSObject._rawHashValue(seed:)(v20[5]);
          uint64_t v22 = v20 + 7;
          uint64_t v23 = -1LL << *((_BYTE *)v20 + 32);
          unint64_t v24 = result & ~v23;
          unint64_t v25 = v24 >> 6;
          if (((-1LL << v24) & ~v20[(v24 >> 6) + 7]) != 0)
          {
            unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~v20[(v24 >> 6) + 7])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v27 = 0;
            unint64_t v28 = (unint64_t)(63 - v23) >> 6;
            do
            {
              if (++v25 == v28 && (v27 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              BOOL v29 = v25 == v28;
              if (v25 == v28) {
                unint64_t v25 = 0LL;
              }
              v27 |= v29;
              uint64_t v30 = v22[v25];
            }

            while (v30 == -1);
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          }

          *(void *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
          *(void *)(v20[6] + 8 * v26) = v19;
          ++v20[2];
          goto LABEL_8;
        }

        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, a3, 0LL);
        swift_bridgeObjectRelease(v16);
        if ((v18 & 1) != 0) {
          goto LABEL_17;
        }
      }

LABEL_8:
      uint64_t v9 = __CocoaSet.Iterator.next()(result);
      if (!v9)
      {
        uint64_t v5 = v33;
        break;
      }
    }
  }

  swift_bridgeObjectRelease(a3);
  swift_release(v7);
  return (Swift::Int)v5;
}

uint64_t sub_10004464C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100044680(uint64_t a1)
{
}

void sub_100044690(uint64_t *a1@<X8>)
{
}

uint64_t sub_1000446AC( uint64_t a1, uint64_t (*a2)(void, void, void, uint64_t, uint64_t), uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    if (qword_100250BC0 != -1) {
      swift_once(&qword_100250BC0, sub_100041690);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v9, (uint64_t)qword_100251678);
    swift_errorRetain(a1);
    uint64_t v10 = swift_errorRetain(a1);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = a1;
      uint64_t v33 = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      swift_errorRetain(a1);
      uint64_t v15 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v16 = String.init<A>(describing:)(&v32, v15);
      char v18 = (_TtC18TrustedPeersHelper6Client *)v17;
      uint64_t v32 = sub_10017C4C4(v16, v17, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "preflightVouchWithBottle unable to fetch policy documents: %{public}s",  v13,  0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return a2(0LL, 0LL, 0LL, 1LL, a1);
  }

  else
  {
    BOOL v29 = (void *)swift_allocObject(&unk_100235878, 64LL, 7LL);
    _OWORD v29[2] = 0LL;
    v29[3] = a2;
    v29[4] = a3;
    v29[5] = a4;
    v29[6] = a5;
    v29[7] = a6;
    uint64_t v30 = swift_allocObject(&unk_1002358A0, 32LL, 7LL);
    *(void *)(v30 + 16) = sub_1000449DC;
    *(void *)(v30 + 24) = v29;
    swift_retain(a3);
    a4;
    swift_bridgeObjectRetain(a6);
    swift_retain(v29);
    sub_10011AAE4(0LL, 0LL, 0LL, 0LL, 0LL, (uint64_t)sub_100044A2C, v30);
    swift_release(v29);
    return swift_release(v30);
  }

uint64_t sub_100044964()
{
  return sub_100044B00((uint64_t (*)(void, void, void, void, void))sub_100043268);
}

uint64_t sub_100044970()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100044980()
{
  return sub_1000DC9D8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100044988(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100044998(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000449A0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000449DC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100042F48( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(char **)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56));
}

uint64_t sub_100044A08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100044A2C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10011A700(a1, a2, a3 & 1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
}

unint64_t sub_100044A38()
{
  unint64_t result = qword_100256DB0;
  if (!qword_100256DB0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___TPPolicyVersion);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100256DB0);
  }

  return result;
}

uint64_t sub_100044A74(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = a2(255LL);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100044AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043684(a1, a2, a3, *(uint64_t (**)(void, void, void))(v3 + 16));
}

uint64_t sub_100044AC0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100044AF4()
{
  return sub_100044B00((uint64_t (*)(void, void, void, void, void))sub_1000438D4);
}

uint64_t sub_100044B00(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100044B14()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

char *sub_100044CDC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_publicEncryptionKey;
  *(void *)&v4[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_publicEncryptionKey] = 0LL;
  uint64_t v8 = OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_publicSigningKey;
  *(void *)&v4[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_publicSigningKey] = 0LL;
  uint64_t v9 = &v4[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID];
  *(void *)uint64_t v9 = a1;
  *((void *)v9 + 1) = a2;
  uint64_t v30 = OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey;
  *(void *)&v4[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingKey] = a3;
  uint64_t v29 = OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey;
  *(void *)&v4[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey] = a4;
  uint64_t v10 = v4;
  id v11 = a3;
  id v31 = a4;
  id v12 = [v31 publicKey];
  uint64_t v13 = objc_opt_self(&OBJC_CLASS____SFECPublicKey);
  uint64_t v14 = swift_dynamicCastObjCClass(v12, v13);
  if (!v14)
  {

    uint64_t v14 = 0LL;
  }

  uint64_t v15 = *(void **)&v4[v7];
  *(void *)&v4[v7] = v14;

  id v16 = [v11 publicKey];
  uint64_t v17 = objc_opt_self(&OBJC_CLASS____SFECPublicKey);
  uint64_t v18 = swift_dynamicCastObjCClass(v16, v17);
  if (!v18)
  {

    uint64_t v18 = 0LL;
  }

  SEL v19 = *(void **)&v4[v8];
  *(void *)&v4[v8] = v18;

  id v20 = *(void **)&v4[v7];
  if (v20 && (int64_t v21 = *(void **)&v4[v8]) != 0LL)
  {
    *(void *)&v10[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionVerificationKey] = v20;
    *(void *)&v10[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingVerificationKey] = v21;
    id v22 = v20;
    id v23 = v21;

    v32.receiver = v10;
    v32.super_class = (Class)type metadata accessor for OctagonSelfPeerKeys();
    uint64_t v4 = (char *)objc_msgSendSuper2(&v32, "init");
  }

  else
  {
    unint64_t v24 = sub_1000453AC();
    uint64_t v25 = swift_allocError(&type metadata for OctagonSelfPeerKeysError, v24, 0LL, 0LL);
    swift_willThrow(v25);

    swift_bridgeObjectRelease(*((void *)v9 + 1));
    unint64_t v26 = *(void **)&v4[v8];

    uint64_t v27 = type metadata accessor for OctagonSelfPeerKeys();
    swift_deallocPartialClassInstance(v10, v27, 72LL, 7LL);
  }

  return v4;
}

unint64_t sub_100044F50()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 62LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0xD000000000000016LL;
}

id sub_100045024()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OctagonSelfPeerKeys();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t TPPeerPermanentInfo.publicEncryptionKey.getter()
{
  return sub_100045180((SEL *)&selRef_encryptionPubKey);
}

id sub_100045104(void *a1, uint64_t a2, SEL *a3)
{
  id v4 = a1;
  id v5 = [v4 *a3];
  uint64_t v6 = objc_opt_self(&OBJC_CLASS____SFECPublicKey);
  uint64_t v7 = (void *)swift_dynamicCastObjCClass(v5, v6);

  if (!v7) {
    swift_unknownObjectRelease(v5);
  }
  return v7;
}

uint64_t TPPeerPermanentInfo.publicSigningKey.getter()
{
  return sub_100045180((SEL *)&selRef_signingPubKey);
}

uint64_t sub_100045180(SEL *a1)
{
  id v2 = [v1 *a1];
  uint64_t v3 = objc_opt_self(&OBJC_CLASS____SFECPublicKey);
  uint64_t result = swift_dynamicCastObjCClass(v2, v3);
  if (!result)
  {
    swift_unknownObjectRelease(v2);
    return 0LL;
  }

  return result;
}

uint64_t TPPeerPermanentInfo.matchesPeer(_:)(void *a1)
{
  id v3 = [v1 peerID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  id v7 = [a1 peerID];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  if (v4 == v8 && v6 == v10)
  {
    char v12 = 1;
    uint64_t v10 = v6;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v10, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v12 & 1;
}

uint64_t type metadata accessor for OctagonSelfPeerKeys()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper19OctagonSelfPeerKeys);
}

unint64_t sub_1000453AC()
{
  unint64_t result = qword_1002517D0;
  if (!qword_1002517D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001DE984, &type metadata for OctagonSelfPeerKeysError);
    atomic_store(result, (unint64_t *)&qword_1002517D0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OctagonSelfPeerKeysError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100045430 + 4 * byte_1001DE8B0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100045450 + 4 * byte_1001DE8B5[v4]))();
  }
}

_BYTE *sub_100045430(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100045450(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100045458(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100045460(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100045468(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100045470(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OctagonSelfPeerKeysError()
{
  return &type metadata for OctagonSelfPeerKeysError;
}

unint64_t sub_100045490()
{
  unint64_t result = qword_1002517D8;
  if (!qword_1002517D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001DE95C, &type metadata for OctagonSelfPeerKeysError);
    atomic_store(result, (unint64_t *)&qword_1002517D8);
  }

  return result;
}

uint64_t sub_1000454D4(void *a1)
{
  id v2 = [a1 keyclass];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"tlk");
  if (v6 == v3 && v7 == v5)
  {
    swift_bridgeObjectRelease_n(v5, 2LL);
    uint64_t v25 = 0LL;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v3, v5, 0LL);
    swift_bridgeObjectRelease(v9, v11, v12, v13, v14, v15, v16, v17);
    if ((v10 & 1) != 0)
    {
      swift_bridgeObjectRelease(v5, v18, v19, v20, v21, v22, v23, v24);
      uint64_t v25 = 0LL;
    }

    else
    {
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"classA");
      if (v26 == v3 && v27 == v5)
      {
        swift_bridgeObjectRelease_n(v5, 2LL);
        uint64_t v25 = 1LL;
      }

      else
      {
        uint64_t v29 = v27;
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v3, v5, 0LL);
        swift_bridgeObjectRelease(v29, v31, v32, v33, v34, v35, v36, v37);
        if ((v30 & 1) != 0)
        {
          swift_bridgeObjectRelease(v5, v38, v39, v40, v41, v42, v43, v44);
          uint64_t v25 = 1LL;
        }

        else
        {
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"classC");
          id v47 = v46;
          if (v45 == v3 && v46 == v5)
          {
            uint64_t v25 = 2LL;
            swift_bridgeObjectRelease_n(v5, 2LL);
          }

          else
          {
            char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v3, v5, 0LL);
            swift_bridgeObjectRelease(v5, v49, v50, v51, v52, v53, v54, v55);
            swift_bridgeObjectRelease(v47, v56, v57, v58, v59, v60, v61, v62);
            if ((v48 & 1) != 0) {
              uint64_t v25 = 2LL;
            }
            else {
              uint64_t v25 = 0LL;
            }
          }
        }
      }
    }
  }

  uint64_t v63 = type metadata accessor for ViewKey(0LL);
  __chkstk_darwin(v63, v64);
  v67[2] = a1;
  v67[3] = v25;
  char v68 = 1;
  unint64_t v65 = sub_100046870();
  return static Message.with(_:)(sub_100046854, v67, v63, v65);
}

void sub_1000456C4(uint64_t a1, id a2, uint64_t a3, char a4)
{
  id v8 = [a2 uuid];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 8), v12, v13, v14, v15, v16, v17, v18);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  id v19 = [a2 parentKeyUUID];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 24), v23, v24, v25, v26, v27, v28, v29);
  *(void *)(a1 + 16) = v20;
  *(void *)(a1 + 24) = v22;
  *(void *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = a4 & 1;
  id v30 = [a2 wrappedkey];
  id v31 = [v30 base64WrappedKey];

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
  *(void *)(a1 + 48) = v32;
  *(void *)(a1 + 56) = v34;
  id v42 = SecCKKSHostOSVersion();
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 72), v46, v47, v48, v49, v50, v51, v52);
  *(void *)(a1 + 64) = v43;
  *(void *)(a1 + 72) = v45;
}

uint64_t sub_10004580C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ViewKey(0LL);
  __chkstk_darwin(v4, v5);
  id v7 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v8 = [a2 tlk];
  id v9 = [v8 zoneID];

  id v10 = [v9 zoneName];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  uint64_t v14 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v14)) & 1) == 0)
  {
    uint64_t v15 = *(void *)(a1 + v14);
    uint64_t v16 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v17 = swift_retain(v15);
    uint64_t v18 = sub_100081120(v17);
    uint64_t v19 = *(void *)(a1 + v14);
    *(void *)(a1 + v14) = v18;
    swift_release(v19);
  }

  uint64_t v20 = *(void *)(a1 + v14);
  swift_beginAccess(v20 + 16, v34, 1LL, 0LL);
  uint64_t v21 = *(_TtC18TrustedPeersHelper6Client **)(v20 + 24);
  *(void *)(v20 + 16) = v11;
  *(void *)(v20 + 24) = v13;
  swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
  id v29 = [a2 tlk];
  sub_1000454D4(v29);

  ViewKeys.newTlk.setter((uint64_t)v7);
  id v30 = [a2 classA];
  sub_1000454D4(v30);

  ViewKeys.newClassA.setter((uint64_t)v7);
  id v31 = [a2 classC];
  sub_1000454D4(v31);

  return ViewKeys.newClassC.setter((uint64_t)v7);
}

void sub_100045A0C(uint64_t a1, id a2)
{
  id v4 = [a2 zoneID];
  id v5 = [v4 zoneName];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 8), v9, v10, v11, v12, v13, v14, v15);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = [a2 curve];
  *(void *)(a1 + 24) = [a2 epoch];
  id v16 = [a2 tlkUUID];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 40), v20, v21, v22, v23, v24, v25, v26);
  *(void *)(a1 + 32) = v17;
  *(void *)(a1 + 40) = v19;
  *(void *)(a1 + 48) = [a2 poisoned];
  id v27 = [a2 receiverPeerID];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 64), v31, v32, v33, v34, v35, v36, v37);
  *(void *)(a1 + 56) = v28;
  *(void *)(a1 + 64) = v30;
  id v38 = [a2 receiverPublicEncryptionKeySPKI];
  uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
  unint64_t v41 = v40;

  Swift::String v42 = Data.base64EncodedString(options:)(0LL);
  sub_10000852C(v39, v41);
  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 80), v43, v44, v45, v46, v47, v48, v49);
  *(Swift::String *)(a1 + 72) = v42;
  id v50 = [a2 senderPeerID];
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  uint64_t v53 = v52;

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 96), v54, v55, v56, v57, v58, v59, v60);
  *(void *)(a1 + 88) = v51;
  *(void *)(a1 + 96) = v53;
  id v61 = [a2 signature];
  countAndFlagsBits = v61;
  if (v61)
  {
    uint64_t v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
    unint64_t v72 = v71;

    Swift::String v73 = Data.base64EncodedString(options:)(0LL);
    countAndFlagsBits = (void *)v73._countAndFlagsBits;
    object = v73._object;
    sub_10000852C(v70, v72);
  }

  else
  {
    object = (void *)0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 112), v62, v63, v64, v65, v66, v67, v68);
  *(void *)(a1 + 104) = countAndFlagsBits;
  *(void *)(a1 + 112) = object;
  unint64_t v75 = (unint64_t)[a2 version];
  if ((v75 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a1 + 120) = v75;
    id v76 = [a2 wrappedTLK];
    uint64_t v84 = v76;
    if (v76)
    {
      uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v76);
      unint64_t v87 = v86;

      Swift::String v88 = Data.base64EncodedString(options:)(0LL);
      uint64_t v84 = (void *)v88._countAndFlagsBits;
      SEL v89 = v88._object;
      sub_10000852C(v85, v87);
    }

    else
    {
      SEL v89 = (void *)0xE000000000000000LL;
    }

    swift_bridgeObjectRelease(*(_TtC18TrustedPeersHelper6Client **)(a1 + 136), v77, v78, v79, v80, v81, v82, v83);
    *(void *)(a1 + 128) = v84;
    *(void *)(a1 + 136) = v89;
  }

void *sub_100045CD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_1002517E0);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  id v122 = (_TtC18TrustedPeersHelper6Client *)((char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v117 = (uint64_t)&v111 - v8;
  __chkstk_darwin(v7, v9);
  int64_t v11 = (char *)&v111 - v10;
  uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v113 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v112 = (char *)&v111 - v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  int v120 = (char *)&v111 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  id v116 = (char *)&v111 - v25;
  __chkstk_darwin(v24, v26);
  uint64_t v114 = (char *)&v111 - v27;
  uint64_t v28 = sub_100007578(&qword_100251648);
  uint64_t v30 = __chkstk_darwin(v28, v29);
  NSString v118 = (char *)&v111 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v115 = (uint64_t)&v111 - v34;
  __chkstk_darwin(v33, v35);
  BOOL v37 = (char *)&v111 - v36;
  id v38 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v39 = *((void *)v38 - 1);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  SEL v43 = (char *)&v111 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v41, v44);
  id v47 = (char *)&v111 - v46;
  __chkstk_darwin(v45, v48);
  id v50 = (char *)&v111 - v49;
  uint64_t v51 = sub_100007578(&qword_1002517E8);
  uint64_t inited = swift_initStackObject(v51, v127);
  *(_OWORD *)(inited + 16) = xmmword_1001DE9D0;
  uint64_t v52 = *(int *)(type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL) + 28);
  uint64_t v121 = v1;
  uint64_t v124 = v1 + v52;
  sub_10000FC68(v1 + v52, (uint64_t)v37, &qword_100251648);
  int64_t v125 = *(unsigned int (**)(char *, uint64_t, int *))(v39 + 48);
  if (v125(v37, 1LL, v38) == 1)
  {
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v53(&v50[v38[5]], 1LL, 1LL, v12);
    v53(&v50[v38[6]], 1LL, 1LL, v12);
    v53(&v50[v38[7]], 1LL, 1LL, v12);
    sub_100041590((uint64_t)v37, &qword_100251648);
  }

  else
  {
    sub_100041608((uint64_t)v37, (uint64_t)v50, type metadata accessor for ViewKeysRecords);
  }

  sub_10000FC68((uint64_t)&v50[v38[5]], (uint64_t)v11, &qword_1002517E0);
  NSString v123 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v54 = v123(v11, 1LL, v12);
  uint64_t v55 = v13;
  uint64_t v56 = (uint64_t)v118;
  id v57 = v114;
  if (v54 == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v11, &qword_1002517E0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v114, v11, v12);
  }

  id v58 = (void *)inited;
  sub_100046818();
  sub_1000415CC((uint64_t)v50, type metadata accessor for ViewKeysRecords);
  v58[4] = CKRecord.init(_:)(v57);
  uint64_t v59 = v115;
  sub_10000FC68(v124, v115, &qword_100251648);
  if (v125((char *)v59, 1LL, v38) == 1)
  {
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    BOOL v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
    v60(&v47[v38[5]], 1LL, 1LL, v12);
    v60(&v47[v38[6]], 1LL, 1LL, v12);
    v60(&v47[v38[7]], 1LL, 1LL, v12);
    sub_100041590(v59, &qword_100251648);
  }

  else
  {
    sub_100041608(v59, (uint64_t)v47, type metadata accessor for ViewKeysRecords);
  }

  uint64_t v61 = v117;
  sub_10000FC68((uint64_t)&v47[v38[6]], v117, &qword_1002517E0);
  if (v123((char *)v61, 1LL, v12) == 1)
  {
    BOOL v62 = v116;
    Ckcode_RecordTransport.init()();
    sub_100041590(v61, &qword_1002517E0);
  }

  else
  {
    BOOL v62 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v116, v61, v12);
  }

  sub_1000415CC((uint64_t)v47, type metadata accessor for ViewKeysRecords);
  v58[5] = CKRecord.init(_:)(v62);
  sub_10000FC68(v124, v56, &qword_100251648);
  if (v125((char *)v56, 1LL, v38) == 1)
  {
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
    v63(&v43[v38[5]], 1LL, 1LL, v12);
    v63(&v43[v38[6]], 1LL, 1LL, v12);
    v63(&v43[v38[7]], 1LL, 1LL, v12);
    sub_100041590(v56, &qword_100251648);
  }

  else
  {
    sub_100041608(v56, (uint64_t)v43, type metadata accessor for ViewKeysRecords);
  }

  int64_t v64 = v122;
  unint64_t v65 = v120;
  sub_10000FC68((uint64_t)&v43[v38[7]], (uint64_t)v122, &qword_1002517E0);
  if (v123((char *)v64, 1LL, v12) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v64, &qword_1002517E0);
  }

  else
  {
    (*(void (**)(char *, _TtC18TrustedPeersHelper6Client *, uint64_t))(v55 + 32))(v65, v64, v12);
  }

  sub_1000415CC((uint64_t)v43, type metadata accessor for ViewKeysRecords);
  uint64_t v66 = CKRecord.init(_:)(v65);
  v58[6] = v66;
  unint64_t v126 = (unint64_t)v58;
  specialized Array._endMutation()(v66);
  BOOL v67 = (void *)v126;
  BOOL v68 = *(_TtC18TrustedPeersHelper6Client **)(v121 + 16);
  uint64_t v69 = *(void *)v68->endpoint;
  uint64_t v70 = _swiftEmptyArrayStorage;
  if (v69)
  {
    NSString v123 = (uint64_t (*)(char *, uint64_t, uint64_t))v126;
    unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v68);
    specialized ContiguousArray.reserveCapacity(_:)(v69);
    uint64_t v71 = *(unsigned __int8 *)(v55 + 80);
    id v122 = v68;
    unint64_t v72 = &v68->_TtCs12_SwiftObject_opaque[(v71 + 32) & ~v71];
    int64_t v125 = *(unsigned int (**)(char *, uint64_t, int *))(v55 + 72);
    Swift::String v73 = v113;
    unint64_t v74 = v112;
    uint64_t v124 = v55;
    unint64_t v75 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v55 + 16);
    do
    {
      v75(v74, v72, v12);
      v75(v73, (unsigned __int8 *)v74, v12);
      uint64_t v76 = CKRecord.init(_:)(v73);
      uint64_t v77 = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v74, v12);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v77);
      uint64_t v78 = *(void *)(v126 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v78);
      uint64_t v79 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v78, v76);
      specialized ContiguousArray._endMutation()(v79);
      unint64_t v72 = (unsigned __int8 *)v125 + (void)v72;
      --v69;
    }

    while (v69);
    unint64_t v87 = (_TtC18TrustedPeersHelper6Client *)v126;
    swift_bridgeObjectRelease(v122, v80, v81, v82, v83, v84, v85, v86);
    uint64_t v70 = _swiftEmptyArrayStorage;
    BOOL v67 = v123;
  }

  else
  {
    unint64_t v87 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  unint64_t v126 = (unint64_t)v67;
  sub_1000E459C(v87);
  BOOL v95 = (_TtC18TrustedPeersHelper6Client *)v126;
  unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v96 = *(void *)v95->endpoint;
  if (v96)
  {
    swift_bridgeObjectRetain(v95);
    for (uint64_t i = 0LL; i != v96; ++i)
    {
      uint64_t v106 = *(void **)&v95[1]._TtCs12_SwiftObject_opaque[8 * i];
      if (v106)
      {
        id v107 = v106;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v107);
        unint64_t v109 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v108 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v109 >= v108 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1LL);
        }
        uint64_t v105 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v109, v107);
        specialized Array._endMutation()(v105);
      }
    }

    swift_bridgeObjectRelease(v95, v97, v98, v99, v100, v101, v102, v103);
    uint64_t v70 = (void *)v126;
  }

  swift_bridgeObjectRelease(v95, v88, v89, v90, v91, v92, v93, v94);
  return v70;
}

uint64_t sub_1000464F0()
{
  uint64_t v1 = sub_100007578(&qword_1002517E0);
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100007578(&qword_1002517F8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for PCSService(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = type metadata accessor for DirectPCSIdentity(0LL);
  sub_10000FC68(v0 + *(int *)(v43 + 24), (uint64_t)v13, &qword_1002517F8);
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14);
  uint64_t v46 = v5;
  id v47 = v9;
  uint64_t v44 = v6;
  uint64_t v45 = v0;
  if (v19 == 1)
  {
    *(_DWORD *)uint64_t v18 = 0;
    *(_OWORD *)(v18 + 8) = xmmword_1001DE6F0;
    *((void *)v18 + 3) = 0LL;
    *((void *)v18 + 4) = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v13, &qword_1002517F8);
  }

  else
  {
    sub_100041608((uint64_t)v13, (uint64_t)v18, type metadata accessor for PCSService);
  }

  Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  uint64_t v21 = *((void *)v18 + 1);
  unint64_t v22 = *((void *)v18 + 2);
  uint64_t v23 = (_TtC18TrustedPeersHelper6Client *)*((void *)v18 + 4);
  id v24 = objc_allocWithZone((Class)&OBJC_CLASS___CuttlefishPCSServiceIdentifier);
  sub_1000084E8(v21, v22);
  swift_bridgeObjectRetain(v23);
  Class v25 = Data._bridgeToObjectiveC()().super.isa;
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23, v27, v28, v29, v30, v31, v32, v33);
  id v34 = [v24 init:isa PCSPublicKey:v25 zoneID:v26];
  sub_10000852C(v21, v22);

  sub_1000415CC((uint64_t)v18, type metadata accessor for PCSService);
  sub_10000FC68(v45 + *(int *)(v43 + 20), (uint64_t)v4, &qword_1002517E0);
  uint64_t v35 = v44;
  uint64_t v36 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v4, 1LL, v46) == 1)
  {
    BOOL v37 = v47;
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v4, &qword_1002517E0);
  }

  else
  {
    id v38 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    BOOL v37 = v47;
    v38(v47, v4, v36);
  }

  sub_100046818();
  uint64_t result = CKRecord.init(_:)(v37);
  if (result)
  {
    uint64_t v40 = (void *)result;
    id v41 = [objc_allocWithZone((Class)CuttlefishPCSIdentity) init:v34 item:result];

    return (uint64_t)v41;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_100046818()
{
  unint64_t result = qword_100256D50;
  if (!qword_100256D50)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CKRecord);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100256D50);
  }

  return result;
}

void sub_100046854(uint64_t a1)
{
}

unint64_t sub_100046870()
{
  unint64_t result = qword_1002517F0;
  if (!qword_1002517F0)
  {
    uint64_t v1 = type metadata accessor for ViewKey(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ViewKey, v1);
    atomic_store(result, (unint64_t *)&qword_1002517F0);
  }

  return result;
}

uint64_t sub_1000468B8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v0, qword_100251800);
  sub_100006BAC(v0, (uint64_t)qword_100251800);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x80000001001E7520LL,  0x797265766F636572LL,  0xEB0000000079656BLL);
}

uint64_t sub_100046934( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, void, void, void), uint64_t a7)
{
  return sub_100048A34( a1,  a2,  a3,  a4,  a5,  a6,  a7,  "preflightRecoveryKey complete: %{public}s",  0xD000000000000036LL,  0x80000001001F6630LL);
}

void sub_100046974( uint64_t a1, void (*a2)(void, void, void, uint64_t), uint64_t a3, void *a4, uint64_t a5, _TtC18TrustedPeersHelper6Client *a6, uint64_t a7, _TtC18TrustedPeersHelper6Client *a8)
{
  if (a1)
  {
    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v11, (uint64_t)qword_100251800);
    swift_errorRetain(a1);
    uint64_t v12 = swift_errorRetain(a1);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v61 = (_TtC18TrustedPeersHelper6Client *)v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      uint64_t v59 = a1;
      swift_errorRetain(a1);
      uint64_t v17 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v18 = String.init<A>(describing:)(&v59, v17);
      uint64_t v20 = (_TtC18TrustedPeersHelper6Client *)v19;
      uint64_t v59 = sub_10017C4C4(v18, v19, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "preflightRecoveryKey unable to fetch current peers: %{public}s",  v15,  0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a2(0LL, 0LL, 0LL, a1);
  }

  else
  {
    __chkstk_darwin(0LL, a2);
    _OWORD v58[2] = v33;
    v58[3] = a2;
    v58[4] = a3;
    uint64_t v34 = sub_100007578(&qword_100251698);
    NSManagedObjectContext.performAndWait<A>(_:)(&v61, sub_10004CEAC, v58, v34);
    uint64_t v35 = v61;
    if (v61)
    {
      swift_retain(a3);
      uint64_t v36 = a4;
      swift_bridgeObjectRetain(a6);
      swift_bridgeObjectRetain(a8);
      sub_10015A5D8((uint64_t)v35, v36, (uint64_t)a2, a3, v36, a5, a6, a7, (uint64_t)a8);
      swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
      swift_release(a3);

      swift_bridgeObjectRelease(a6, v44, v45, v46, v47, v48, v49, v50);
      swift_bridgeObjectRelease(a8, v51, v52, v53, v54, v55, v56, v57);
    }
  }

uint64_t sub_100046C54( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10004C7AC(a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100046C7C( uint64_t a1, void (*a2)(void, void, void, id), uint64_t a3, uint64_t a4, unint64_t a5, void *a6, _TtC18TrustedPeersHelper6Client *a7)
{
  uint64_t v13 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v14 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (v14)
  {
    uint64_t v15 = v14;
    id v352 = a2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;
    id v18 = [*(id *)(a1 + v13) egoPeerPermanentInfo];
    if (v18)
    {
      BOOL v26 = v18;
      id v346 = a6;
      uint64_t v350 = v15;
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v29 = v28;

      id v30 = [*(id *)(a1 + v13) egoPeerPermanentInfoSig];
      if (v30)
      {
        id v31 = v30;
        uint64_t v348 = v27;
        unint64_t v349 = v29;
        uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
        unint64_t v34 = v33;

        id v35 = [*(id *)(a1 + v13) egoPeerStableInfo];
        if (v35)
        {
          uint64_t v36 = v35;
          unint64_t v344 = v34;
          uint64_t v345 = v32;
          uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
          unint64_t v39 = v38;

          id v40 = [*(id *)(a1 + v13) egoPeerStableInfoSig];
          if (v40)
          {
            id v41 = v40;
            unint64_t v332 = a5;
            NSString v334 = a7;
            uint64_t v336 = a4;
            uint64_t v341 = v37;
            unint64_t v342 = v39;
            uint64_t v340 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
            unint64_t v343 = v42;

            id v43 = [objc_allocWithZone(TPECPublicKeyFactory) init];
            sub_1000084E8(v348, v349);
            sub_1000084E8(v345, v344);
            NSString v44 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v17, v45, v46, v47, v48, v49, v50, v51);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            Class v53 = Data._bridgeToObjectiveC()().super.isa;
            id v54 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v44 data:isa sig:v53 keyFactory:v43];
            id v339 = v43;

            sub_10000852C(v345, v344);
            sub_10000852C(v348, v349);

            id v338 = v54;
            if (v54)
            {
              id v55 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
              sub_1000084E8(v341, v39);
              sub_1000084E8(v340, v343);
              Class v56 = Data._bridgeToObjectiveC()().super.isa;
              Class v57 = Data._bridgeToObjectiveC()().super.isa;
              id v58 = [v55 initWithData:v56 sig:v57];
              sub_10000852C(v340, v343);
              sub_10000852C(v341, v39);

              if (v58)
              {
                swift_bridgeObjectRetain(v332);
                swift_bridgeObjectRetain(v334);
                uint64_t v59 = (char *)sub_1000097E0(v336, v332, (uint64_t)v346, v334);
                id v347 = v58;
                id v92 = v59;
                uint64_t v93 = OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys;
                BOOL v94 = *(void **)(*(void *)&v59[OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys]
                               + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingVerificationKey);
                BOOL v95 = v59;
                id v96 = [v94 keyData];
                uint64_t v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
                unint64_t v99 = v98;

                uint64_t v330 = v93;
                id v100 =  [*(id *)(*(void *)&v92[v93] + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionVerificationKey) keyData];
                uint64_t v331 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v100);
                unint64_t v333 = v101;

                if (qword_100250BC8 != -1) {
                  swift_once(&qword_100250BC8, sub_1000468B8);
                }
                uint64_t v102 = type metadata accessor for Logger(0LL);
                sub_100006BAC(v102, (uint64_t)qword_100251800);
                sub_1000084E8(v97, v99);
                uint64_t v103 = sub_1000084E8(v97, v99);
                id v104 = (os_log_s *)Logger.logObject.getter(v103);
                os_log_type_t v105 = static os_log_type_t.info.getter(v104);
                NSString v335 = v95;
                NSString v328 = v92;
                if (os_log_type_enabled(v104, v105))
                {
                  uint64_t v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  id v107 = (void *)swift_slowAlloc(32LL, -1LL);
                  id v356 = v107;
                  *(_DWORD *)uint64_t v106 = 136446210;
                  Swift::String v108 = Data.base64EncodedString(options:)(0LL);
                  uint64_t v353 = sub_10017C4C4(v108._countAndFlagsBits, (unint64_t)v108._object, (uint64_t *)&v356);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v106 + 4, v106 + 12);
                  swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v108._object,  v109,  v110,  v111,  v112,  v113,  v114,  v115);
                  sub_10000852C(v97, v99);
                  sub_10000852C(v97, v99);
                  _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "preflightVouchWithRecoveryKey signingPubKey: %{public}s",  v106,  0xCu);
                  swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v107, -1LL, -1LL);
                  swift_slowDealloc(v106, -1LL, -1LL);
                }

                else
                {
                  sub_10000852C(v97, v99);
                  sub_10000852C(v97, v99);
                }

                sub_1000084E8(v331, v333);
                uint64_t v116 = sub_1000084E8(v331, v333);
                uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
                os_log_type_t v118 = static os_log_type_t.info.getter(v117);
                if (os_log_type_enabled(v117, v118))
                {
                  id v119 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  int v120 = (void *)swift_slowAlloc(32LL, -1LL);
                  id v356 = v120;
                  *(_DWORD *)id v119 = 136446210;
                  Swift::String v121 = Data.base64EncodedString(options:)(0LL);
                  uint64_t v353 = sub_10017C4C4(v121._countAndFlagsBits, (unint64_t)v121._object, (uint64_t *)&v356);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v119 + 4, v119 + 12);
                  swift_bridgeObjectRelease( (_TtC18TrustedPeersHelper6Client *)v121._object,  v122,  v123,  v124,  v125,  v126,  v127,  v128);
                  sub_10000852C(v331, v333);
                  sub_10000852C(v331, v333);
                  _os_log_impl( (void *)&_mh_execute_header,  v117,  v118,  "preflightVouchWithRecoveryKey encryptionPubKey: %{public}s",  v119,  0xCu);
                  swift_arrayDestroy(v120, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v120, -1LL, -1LL);
                  swift_slowDealloc(v119, -1LL, -1LL);

                  sub_10000852C(v331, v333);
                  sub_10000852C(v97, v99);
                }

                else
                {
                  sub_10000852C(v97, v99);
                  sub_10000852C(v331, v333);
                  sub_10000852C(v331, v333);
                  sub_10000852C(v331, v333);
                }

                uint64_t v129 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
                SEL v130 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
                id v356 = 0LL;
                unsigned int v131 = objc_msgSend(v130, "isRecoveryKeyEnrolledWithError:", &v356, v328);
                id v132 = v356;
                if (v356)
                {
                  id v133 = v356;

                  swift_willThrow(v134);
                  id v135 = v133;
                  BOOL v136 = (os_log_s *)Logger.logObject.getter(v135);
                  os_log_type_t v140 = static os_log_type_t.error.getter(v136, v137, v138, v139);
                  if (os_log_type_enabled(v136, v140))
                  {
                    os_log_type_t v141 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                    Class v351 = (void *)swift_slowAlloc(8LL, -1LL);
                    *(_DWORD *)os_log_type_t v141 = 138543362;
                    id v142 = v135;
                    NSString v143 = (void *)_swift_stdlib_bridgeErrorToNSError(v142);
                    id v356 = v143;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v356, v357, v141 + 4, v141 + 12);
                    *Class v351 = v143;

                    unint64_t v144 = v342;
                    uint64_t v145 = v340;
                    _os_log_impl( (void *)&_mh_execute_header,  v136,  v140,  "preflightRecoveryKey: error determine whether Recovery Key is enrolled: %{public}@",  v141,  0xCu);
                    uint64_t v146 = sub_100007578(&qword_100250F90);
                    swift_arrayDestroy(v351, 1LL, v146);
                    swift_slowDealloc(v351, -1LL, -1LL);
                    swift_slowDealloc(v141, -1LL, -1LL);
                    id v147 = v352;
                    NSString v148 = v339;
                  }

                  else
                  {

                    BOOL v136 = (os_log_s *)v135;
                    id v147 = v352;
                    NSString v148 = v339;
                    uint64_t v145 = v340;
                    unint64_t v144 = v342;
                  }

                  id v182 = v135;
                  v147(0LL, 0LL, 0LL, v132);

                  sub_10000852C(v348, v349);
                  sub_10000852C(v345, v344);
                  sub_10000852C(v341, v144);

                  uint64_t v183 = v145;
LABEL_46:
                  sub_10000852C(v183, v343);

                  return;
                }

                if (v131)
                {
                  id v337 = *(id *)(a1 + v129);
                  id v150 = [v149 publicKey];
                  id v151 = [v150 keyData];

                  uint64_t v152 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v151);
                  unint64_t v154 = v153;

                  id v155 = objc_retainAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(v329 + v330)
                                   + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionKey),
                             "publicKey"));
                  id v156 = [v155 keyData];

                  uint64_t v157 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v156);
                  unint64_t v159 = v158;

                  id v160 = objc_allocWithZone(&OBJC_CLASS___TPRecoveryKeyPair);
                  Class v161 = Data._bridgeToObjectiveC()().super.isa;
                  Class v162 = Data._bridgeToObjectiveC()().super.isa;
                  id v163 = [v160 initWithSigningKeyData:v161 encryptionKeyData:v162];
                  sub_10000852C(v157, v159);
                  sub_10000852C(v152, v154);

                  id v356 = 0LL;
                  id v164 =  [v337 peerIDThatTrustsRecoveryKeys:v163 canIntroducePeer:v338 stableInfo:v347 error:&v356];

                  id v165 = v356;
                  if (v356)
                  {
                    id v166 = v356;
                    BOOL v167 = v335;

                    swift_willThrow(v168);
                    id v169 = v166;
                    id v170 = (os_log_s *)Logger.logObject.getter(v169);
                    os_log_type_t v171 = static os_log_type_t.info.getter(v170);
                    if (os_log_type_enabled(v170, v171))
                    {
                      id v172 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                      id v173 = (void *)swift_slowAlloc(8LL, -1LL);
                      *(_DWORD *)id v172 = 138543362;
                      id v174 = v169;
                      uint64_t v175 = (void *)_swift_stdlib_bridgeErrorToNSError(v174);
                      id v356 = v175;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v356, v357, v172 + 4, v172 + 12);
                      *id v173 = v175;

                      BOOL v167 = v335;
                      unint64_t v176 = v342;
                      os_log_type_t v177 = v171;
                      uint64_t v178 = v340;
                      _os_log_impl( (void *)&_mh_execute_header,  v170,  v177,  "preflightRecoveryKey failed to get peer that trusts RK: %{public}@",  v172,  0xCu);
                      uint64_t v179 = sub_100007578(&qword_100250F90);
                      swift_arrayDestroy(v173, 1LL, v179);
                      swift_slowDealloc(v173, -1LL, -1LL);
                      swift_slowDealloc(v172, -1LL, -1LL);
                      unint64_t v180 = v352;
                      uint64_t v181 = v339;
                    }

                    else
                    {

                      id v170 = (os_log_s *)v169;
                      unint64_t v180 = v352;
                      uint64_t v181 = v339;
                      uint64_t v178 = v340;
                      unint64_t v176 = v342;
                    }

                    id v182 = v169;
                    v180(0LL, 0LL, 0LL, v165);

                    sub_10000852C(v348, v349);
                    sub_10000852C(v345, v344);
                    sub_10000852C(v341, v176);

                    uint64_t v183 = v178;
                    goto LABEL_46;
                  }

                  if (!v164)
                  {

                    id v229 = (os_log_s *)Logger.logObject.getter(v228);
                    os_log_type_t v230 = static os_log_type_t.info.getter(v229);
                    if (os_log_type_enabled(v229, v230))
                    {
                      NSString v231 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                      *(_WORD *)NSString v231 = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v229,  v230,  "preflightRecoveryKey Untrusted recovery key set",  v231,  2u);
                      swift_slowDealloc(v231, -1LL, -1LL);
                    }

                    unint64_t v232 = sub_100043F74();
                    uint64_t v233 = swift_allocError(&type metadata for ContainerError, v232, 0LL, 0LL);
                    *(_OWORD *)uint64_t v234 = xmmword_1001DE9F0;
                    *(_BYTE *)(v234 + 16) = 13;
                    v352(0LL, 0LL, 0LL, (id)v233);

                    sub_10000852C(v348, v349);
                    sub_10000852C(v345, v344);
                    sub_10000852C(v341, v342);

                    uint64_t v191 = v340;
                    unint64_t v192 = v343;
                    goto LABEL_51;
                  }

                  uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
                  uint64_t v195 = v194;
                  uint64_t v196 = *(void **)(a1 + v129);
                  id v356 = 0LL;
                  id v197 = v196;
                  id v198 = [v197 peerWithID:v164 error:&v356];

                  id v199 = v356;
                  if (v356)
                  {
                    id v200 = v356;

                    swift_willThrow(v201);
                    id v202 = v200;
                    swift_bridgeObjectRetain(v195);
                    id v203 = v202;
                    uint64_t v204 = (os_log_s *)Logger.logObject.getter(v203);
                    os_log_type_t v208 = static os_log_type_t.error.getter(v204, v205, v206, v207);
                    if (os_log_type_enabled(v204, v208))
                    {
                      uint64_t v209 = swift_slowAlloc(22LL, -1LL);
                      id v210 = (void *)swift_slowAlloc(64LL, -1LL);
                      id v356 = v210;
                      *(_DWORD *)uint64_t v209 = 136446466;
                      swift_bridgeObjectRetain(v195);
                      uint64_t v353 = sub_10017C4C4(v193, (unint64_t)v195, (uint64_t *)&v356);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v209 + 4, v209 + 12);
                      swift_bridgeObjectRelease_n(v195, 3LL);
                      *(_WORD *)(v209 + 12) = 2082;
                      uint64_t v353 = (uint64_t)v203;
                      id v211 = v203;
                      uint64_t v212 = sub_100007578(&qword_100251D70);
                      uint64_t v213 = String.init<A>(describing:)(&v353, v212);
                      id v215 = (_TtC18TrustedPeersHelper6Client *)v214;
                      uint64_t v353 = sub_10017C4C4(v213, v214, (uint64_t *)&v356);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v209 + 14, v209 + 22);

                      uint64_t v216 = v215;
                      unint64_t v217 = v342;
                      uint64_t v218 = v340;
                      swift_bridgeObjectRelease(v216, v219, v220, v221, v222, v223, v224, v225);
                      _os_log_impl( (void *)&_mh_execute_header,  v204,  v208,  "preflightRecoveryKey Error finding peer with ID %{public}s: %{public}s",  (uint8_t *)v209,  0x16u);
                      swift_arrayDestroy(v210, 2LL, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v210, -1LL, -1LL);
                      swift_slowDealloc(v209, -1LL, -1LL);

                      Class v226 = v352;
                      id v227 = v339;
                    }

                    else
                    {

                      swift_bridgeObjectRelease_n(v195, 2LL);
                      Class v226 = v352;
                      id v227 = v339;
                      uint64_t v218 = v340;
                      unint64_t v217 = v342;
                    }

                    id v182 = v203;
                    v226(0LL, 0LL, 0LL, v199);

                    sub_10000852C(v348, v349);
                    sub_10000852C(v345, v344);
                    sub_10000852C(v341, v217);

                    uint64_t v183 = v218;
                    goto LABEL_46;
                  }

                  if (v198)
                  {
                    id v235 = v198;
                    swift_bridgeObjectRelease(v195, v236, v237, v238, v239, v240, v241, v242);
                    id v243 = *(id *)(a1 + v129);
                    id v244 = [v235 dynamicInfo];
                    if (v244)
                    {
                      Class v245 = v244;
                      id v246 = [v244 includedPeerIDs];

                      uint64_t v247 = (_TtC18TrustedPeersHelper6Client *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v246,  &type metadata for String,  &protocol witness table for String);
                    }

                    else
                    {
                      uint64_t v253 = sub_100007578((uint64_t *)&unk_100251820);
                      uint64_t inited = swift_initStackObject(v253, v355);
                      *(_OWORD *)(inited + 16) = xmmword_1001DE710;
                      id v255 = [v235 peerID];
                      uint64_t v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
                      uint64_t v258 = v257;

                      *(void *)(inited + 32) = v256;
                      *(void *)(inited + 40) = v258;
                      uint64_t v247 = (_TtC18TrustedPeersHelper6Client *)sub_10015AB0C(inited);
                      swift_setDeallocating(inited);
                      swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
                    }

                    Class v259 = Set._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease(v247, v260, v261, v262, v263, v264, v265, v266);
                    id v267 = [v235 stableInfo];
                    id v356 = 0LL;
                    id v268 =  [v243 policyForPeerIDs:v259 candidatePeerID:v350 candidateStableInfo:v267 error:&v356];

                    id v269 = v356;
                    if (v268)
                    {
                      id v270 = v356;
                      NSString v271 = [v338 modelID];
                      if (!v271)
                      {
                        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
                        id v273 = v272;
                        NSString v271 = String._bridgeToObjectiveC()();
                        swift_bridgeObjectRelease(v273, v274, v275, v276, v277, v278, v279, v280);
                      }

                      NSString v281 = v235;
                      id v282 = [v235 stableInfo];
                      if (v282)
                      {
                        NSString v283 = v282;
                        id v284 = [v282 syncUserControllableViews];
                      }

                      else
                      {
                        id v284 = 0LL;
                      }

                      id v291 = [v347 isInheritedAccount];
                      id v356 = 0LL;
                      id v292 =  [v268 syncingPolicyForModel:v271 syncUserControllableViews:v284 isInheritedAccount:v291 error:&v356];

                      id v293 = v356;
                      if (v292)
                      {
                        id v294 = *(void **)(v329 + v330);
                        id v295 = v356;
                        Class v296 = v294;

                        uint64_t v297 = *(void *)&v296[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID];
                        NSString v298 = *(_TtC18TrustedPeersHelper6Client **)&v296[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID
                                                                        + 8];
                        swift_bridgeObjectRetain(v298);

                        id v299 = v292;
                        v352(v297, v298, v292, 0LL);

                        sub_10000852C(v348, v349);
                        sub_10000852C(v345, v344);
                        sub_10000852C(v341, v342);

                        sub_10000852C(v340, v343);
                        swift_bridgeObjectRelease(v298, v300, v301, v302, v303, v304, v305, v306);

                        return;
                      }

                      id v307 = v356;

                      uint64_t v286 = _convertNSErrorToError(_:)(v293);
                      swift_willThrow(v308);
                    }

                    else
                    {
                      NSString v281 = v235;
                      id v285 = v356;

                      uint64_t v286 = _convertNSErrorToError(_:)(v269);
                      swift_willThrow(v287);
                    }

                    swift_errorRetain(v286);
                    uint64_t v309 = swift_errorRetain(v286);
                    NSString v310 = (os_log_s *)Logger.logObject.getter(v309);
                    os_log_type_t v314 = static os_log_type_t.error.getter(v310, v311, v312, v313);
                    if (os_log_type_enabled(v310, v314))
                    {
                      id v315 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                      NSString v316 = (void *)swift_slowAlloc(32LL, -1LL);
                      id v356 = v316;
                      *(_DWORD *)id v315 = 136446210;
                      uint64_t v353 = v286;
                      swift_errorRetain(v286);
                      uint64_t v317 = sub_100007578(&qword_100251D70);
                      uint64_t v318 = String.init<A>(describing:)(&v353, v317);
                      NSString v320 = (_TtC18TrustedPeersHelper6Client *)v319;
                      uint64_t v353 = sub_10017C4C4(v318, v319, (uint64_t *)&v356);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v315 + 4, v315 + 12);
                      swift_bridgeObjectRelease(v320, v321, v322, v323, v324, v325, v326, v327);
                      swift_errorRelease();
                      swift_errorRelease();
                      _os_log_impl( (void *)&_mh_execute_header,  v310,  v314,  "preflightRecoveryKey: error fetching policy: %{public}s",  v315,  0xCu);
                      swift_arrayDestroy(v316, 1LL, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v316, -1LL, -1LL);
                      swift_slowDealloc(v315, -1LL, -1LL);
                    }

                    else
                    {
                      swift_errorRelease();
                      swift_errorRelease();
                    }

                    swift_errorRetain(v286);
                    v352(0LL, 0LL, 0LL, (id)v286);

                    sub_10000852C(v348, v349);
                    sub_10000852C(v345, v344);
                    sub_10000852C(v341, v342);

                    sub_10000852C(v340, v343);
                    swift_errorRelease();
LABEL_32:
                    swift_errorRelease();
                    return;
                  }

                  uint64_t v248 = swift_bridgeObjectRetain_n(v195, 2LL);
                  id v249 = (os_log_s *)Logger.logObject.getter(v248);
                  os_log_type_t v250 = static os_log_type_t.info.getter(v249);
                  if (os_log_type_enabled(v249, v250))
                  {
                    id v251 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                    uint64_t v252 = (void *)swift_slowAlloc(32LL, -1LL);
                    id v356 = v252;
                    *(_DWORD *)id v251 = 136446210;
                    swift_bridgeObjectRetain(v195);
                    uint64_t v353 = sub_10017C4C4(v193, (unint64_t)v195, (uint64_t *)&v356);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v251 + 4, v251 + 12);
                    swift_bridgeObjectRelease_n(v195, 3LL);
                    _os_log_impl( (void *)&_mh_execute_header,  v249,  v250,  "preflightRecoveryKey Failed to find peer with ID %{public}s",  v251,  0xCu);
                    swift_arrayDestroy(v252, 1LL, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v252, -1LL, -1LL);
                    swift_slowDealloc(v251, -1LL, -1LL);
                  }

                  else
                  {

                    swift_bridgeObjectRelease_n(v195, 2LL);
                  }

                  unint64_t v288 = sub_100043F74();
                  uint64_t v289 = swift_allocError(&type metadata for ContainerError, v288, 0LL, 0LL);
                  *(void *)uint64_t v290 = v193;
                  *(void *)(v290 + 8) = v195;
                  *(_BYTE *)(v290 + 16) = 0;
                  v352(0LL, 0LL, 0LL, (id)v289);

                  sub_10000852C(v348, v349);
                  sub_10000852C(v345, v344);
                  sub_10000852C(v341, v342);

                  uint64_t v191 = v340;
                }

                else
                {

                  int64_t v185 = (os_log_s *)Logger.logObject.getter(v184);
                  os_log_type_t v186 = static os_log_type_t.info.getter(v185);
                  if (os_log_type_enabled(v185, v186))
                  {
                    id v187 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                    *(_WORD *)id v187 = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v185,  v186,  "preflightRecoveryKey: recovery Key is not enrolled",  v187,  2u);
                    swift_slowDealloc(v187, -1LL, -1LL);
                  }

                  unint64_t v188 = sub_100043F74();
                  uint64_t v189 = swift_allocError(&type metadata for ContainerError, v188, 0LL, 0LL);
                  *(_OWORD *)uint64_t v190 = xmmword_1001DE9E0;
                  *(_BYTE *)(v190 + 16) = 13;
                  v352(0LL, 0LL, 0LL, (id)v189);

                  sub_10000852C(v348, v349);
                  sub_10000852C(v345, v344);
                  sub_10000852C(v341, v342);

                  uint64_t v191 = v340;
                }

                unint64_t v192 = v343;
LABEL_51:
                sub_10000852C(v191, v192);

                goto LABEL_32;
              }

              if (qword_100250BC8 != -1) {
                swift_once(&qword_100250BC8, sub_1000468B8);
              }
              uint64_t v84 = type metadata accessor for Logger(0LL);
              uint64_t v85 = sub_100006BAC(v84, (uint64_t)qword_100251800);
              BOOL v86 = (os_log_s *)Logger.logObject.getter(v85);
              os_log_type_t v87 = static os_log_type_t.info.getter(v86);
              if (os_log_type_enabled(v86, v87))
              {
                Swift::String v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)Swift::String v88 = 0;
                _os_log_impl((void *)&_mh_execute_header, v86, v87, "cannot create TPPeerStableInfo", v88, 2u);
                swift_slowDealloc(v88, -1LL, -1LL);
              }

              unint64_t v89 = sub_100043F74();
              uint64_t v90 = swift_allocError(&type metadata for ContainerError, v89, 0LL, 0LL);
              *(_OWORD *)uint64_t v91 = xmmword_1001DEA00;
              *(_BYTE *)(v91 + 16) = 13;
              v352(0LL, 0LL, 0LL, (id)v90);
              swift_errorRelease();

              sub_10000852C(v340, v343);
              sub_10000852C(v341, v39);
              uint64_t v82 = v345;
              unint64_t v83 = v344;
            }

            else
            {

              unint64_t v79 = sub_100043F74();
              uint64_t v80 = swift_allocError(&type metadata for ContainerError, v79, 0LL, 0LL);
              *(_OWORD *)uint64_t v81 = xmmword_1001DE880;
              *(_BYTE *)(v81 + 16) = 13;
              v352(0LL, 0LL, 0LL, (id)v80);
              swift_errorRelease();

              sub_10000852C(v340, v343);
              sub_10000852C(v341, v39);
              uint64_t v82 = v345;
              unint64_t v83 = v344;
            }

            sub_10000852C(v82, v83);
            sub_10000852C(v348, v349);
            return;
          }

          sub_10000852C(v37, v39);
          unint64_t v63 = v344;
          uint64_t v62 = v345;
        }

        else
        {

          uint64_t v62 = v32;
          unint64_t v63 = v34;
        }

        sub_10000852C(v62, v63);
        uint64_t v60 = v348;
        unint64_t v61 = v349;
      }

      else
      {

        uint64_t v60 = v27;
        unint64_t v61 = v29;
      }

      sub_10000852C(v60, v61);
      swift_bridgeObjectRelease(v17, v64, v65, v66, v67, v68, v69, v70);
    }

    else
    {
      swift_bridgeObjectRelease(v17, v19, v20, v21, v22, v23, v24, v25);
    }

    a2 = v352;
  }

  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v71 = type metadata accessor for Logger(0LL);
  uint64_t v72 = sub_100006BAC(v71, (uint64_t)qword_100251800);
  Swift::String v73 = (os_log_s *)Logger.logObject.getter(v72);
  os_log_type_t v74 = static os_log_type_t.info.getter(v73);
  if (os_log_type_enabled(v73, v74))
  {
    unint64_t v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v75 = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "preflightRecoveryKey: no ego peer ID", v75, 2u);
    swift_slowDealloc(v75, -1LL, -1LL);
  }

  unint64_t v76 = sub_100043F74();
  uint64_t v77 = swift_allocError(&type metadata for ContainerError, v76, 0LL, 0LL);
  *(_OWORD *)uint64_t v78 = xmmword_1001DE890;
  *(_BYTE *)(v78 + 16) = 13;
  a2(0LL, 0LL, 0LL, (id)v77);
  swift_errorRelease();
}

uint64_t sub_1000489F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, void, void, void), uint64_t a7)
{
  return sub_100048A34( a1,  a2,  a3,  a4,  a5,  a6,  a7,  "preflightCustodianRecoveryKey complete: %{public}s",  0xD000000000000032LL,  0x80000001001F65F0LL);
}

uint64_t sub_100048A34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, void, void, void), uint64_t a7, const char *a8, uint64_t a9, unint64_t a10)
{
  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v13, (uint64_t)qword_100251800);
  swift_errorRetain(a4);
  uint64_t v14 = swift_errorRetain(a4);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v39 = a3;
    id v40 = a6;
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    unint64_t v19 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a4)
    {
      uint64_t v45 = 0x203A726F727265LL;
      unint64_t v46 = 0xE700000000000000LL;
      uint64_t v44 = a4;
      swift_errorRetain(a4);
      swift_errorRetain(a4);
      uint64_t v20 = sub_100007578(&qword_100251D70);
      v21._countAndFlagsBits = String.init<A>(describing:)(&v44, v20);
      object = (_TtC18TrustedPeersHelper6Client *)v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(object, v23, v24, v25, v26, v27, v28, v29);
      swift_errorRelease();
      uint64_t v30 = v45;
      unint64_t v19 = (_TtC18TrustedPeersHelper6Client *)v46;
    }

    else
    {
      uint64_t v30 = 0x73736563637573LL;
    }

    uint64_t v45 = sub_10017C4C4(v30, (unint64_t)v19, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v19, v31, v32, v33, v34, v35, v36, v37);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, a8, v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    a6 = v40;
    a3 = v39;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(a9, a10);
  return a6(a1, a2, a3, a4);
}

void sub_100048C9C(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  if (a1)
  {
    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v8, (uint64_t)qword_100251800);
    swift_errorRetain(a1);
    uint64_t v9 = swift_errorRetain(a1);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      unint64_t v42 = (_TtC18TrustedPeersHelper6Client *)v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v40 = a1;
      swift_errorRetain(a1);
      uint64_t v14 = sub_100007578((uint64_t *)&unk_1002516A0);
      uint64_t v15 = String.init<A>(describing:)(&v40, v14);
      uint64_t v17 = (_TtC18TrustedPeersHelper6Client *)v16;
      uint64_t v40 = sub_10017C4C4(v15, v16, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "preflightCustodianRecoveryKey unable to fetch current peers: %{public}s",  v12,  0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    ((void (*)(void, void, void, uint64_t))a2)(0LL, 0LL, 0LL, a1);
  }

  else
  {
    __chkstk_darwin(0LL, a2);
    v39[2] = v27;
    v39[3] = a2;
    v39[4] = a3;
    uint64_t v28 = sub_100007578(&qword_100251698);
    NSManagedObjectContext.performAndWait<A>(_:)(&v42, sub_10004CF48, v39, v28);
    BOOL v29 = v42;
    if (v42)
    {
      swift_retain(a3);
      uint64_t v30 = a4;
      id v31 = a5;
      sub_10015ACAC((uint64_t)v29, v30, a2, a3, v30, v31);
      swift_bridgeObjectRelease(v29, v32, v33, v34, v35, v36, v37, v38);
      swift_release(a3);
    }
  }

void sub_100048F4C( uint64_t a1@<X0>, void (*a2)(void, void, void, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v27 = 0LL;
  id v6 = [v5 allPolicyVersionsWithError:&v27];
  id v7 = v27;
  if (v6)
  {
    uint64_t v8 = v6;
    unint64_t v9 = sub_100044A38();
    unint64_t v10 = sub_10004CE64();
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);
    id v12 = v7;
  }

  else
  {
    id v13 = v27;
    uint64_t v14 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v15);
    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v16, (uint64_t)qword_100251800);
    swift_errorRetain(v14);
    uint64_t v17 = swift_errorRetain(v14);
    SEL v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v22 = static os_log_type_t.error.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v26 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)BOOL v23 = 138543362;
      swift_errorRetain(v14);
      BOOL v24 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
      id v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 4, v23 + 12);
      *id v26 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Error fetching all policy versions: %{public}@", v23, 0xCu);
      uint64_t v25 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v26, 1LL, v25);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain(v14);
    a2(0LL, 0LL, 0LL, v14);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v11 = 0LL;
  }

  *a3 = v11;
}

uint64_t sub_100049208(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char *a5, void *a6)
{
  return sub_10004CAD0(a2, a3, a4, a5, a6);
}

uint64_t sub_100049220( uint64_t a1, void (*a2)(void, void, void, void), uint64_t a3, void *a4)
{
  uint64_t v8 = sub_100007578(&qword_100251818);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v398 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  id v13 = *(uint8_t **)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v398 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO;
  id v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                              + OBJC_IVAR____TtC18TrustedPeersHelper9Container_containerMO), "egoPeerID"));
  if (!v18) {
    goto LABEL_20;
  }
  uint64_t v19 = v18;
  v417 = a2;
  uint64_t v418 = a3;
  v416 = v13;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;
  id v22 = [*(id *)(a1 + v17) egoPeerPermanentInfo];
  if (!v22)
  {
    swift_bridgeObjectRelease(v21, v23, v24, v25, v26, v27, v28, v29);

LABEL_19:
    a2 = v417;
LABEL_20:
    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v123 = type metadata accessor for Logger(0LL);
    uint64_t v124 = sub_100006BAC(v123, (uint64_t)qword_100251800);
    id v125 = (os_log_s *)Logger.logObject.getter(v124);
    os_log_type_t v126 = static os_log_type_t.info.getter(v125);
    if (os_log_type_enabled(v125, v126))
    {
      BOOL v127 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "preflightCustodianRecoveryKey: no ego peer ID", v127, 2u);
      swift_slowDealloc(v127, -1LL, -1LL);
    }

    unint64_t v128 = sub_100043F74();
    uint64_t v129 = swift_allocError(&type metadata for ContainerError, v128, 0LL, 0LL);
    *(_OWORD *)uint64_t v130 = xmmword_1001DE890;
    *(_BYTE *)(v130 + 16) = 13;
    a2(0LL, 0LL, 0LL, v129);
    return swift_errorRelease();
  }

  uint64_t v30 = v22;
  v412 = v16;
  uint64_t v413 = v12;
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v33 = v32;

  id v34 = [*(id *)(a1 + v17) egoPeerPermanentInfoSig];
  if (!v34)
  {

    uint64_t v114 = v31;
    unint64_t v115 = v33;
LABEL_18:
    sub_10000852C(v114, v115);
    swift_bridgeObjectRelease(v21, v116, v117, v118, v119, v120, v121, v122);
    goto LABEL_19;
  }

  id v35 = v34;
  id v409 = a4;
  unint64_t v414 = v33;
  uint64_t v415 = v31;
  uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
  unint64_t v38 = v37;

  id v39 = [*(id *)(a1 + v17) egoPeerStableInfo];
  if (!v39)
  {

    sub_10000852C(v36, v38);
    uint64_t v114 = v415;
LABEL_17:
    unint64_t v115 = v414;
    goto LABEL_18;
  }

  uint64_t v40 = v39;
  uint64_t v410 = v36;
  unint64_t v411 = v38;
  uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
  unint64_t v43 = v42;

  id v44 = [*(id *)(a1 + v17) egoPeerStableInfoSig];
  uint64_t v45 = v415;
  if (!v44)
  {

    sub_10000852C(v41, v43);
    sub_10000852C(v410, v411);
    uint64_t v114 = v45;
    goto LABEL_17;
  }

  unint64_t v46 = v44;
  id v403 = v19;
  uint64_t v407 = v41;
  unint64_t v406 = v43;
  uint64_t v408 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
  unint64_t v405 = v47;

  id v48 = [objc_allocWithZone(TPECPublicKeyFactory) init];
  unint64_t v49 = v414;
  sub_1000084E8(v45, v414);
  uint64_t v50 = v45;
  uint64_t v51 = v410;
  unint64_t v52 = v411;
  sub_1000084E8(v410, v411);
  NSString v53 = String._bridgeToObjectiveC()();
  id v402 = v53;
  swift_bridgeObjectRelease(v21, v54, v55, v56, v57, v58, v59, v60);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v62 = Data._bridgeToObjectiveC()().super.isa;
  id v63 =  [(id)objc_opt_self(TPPeerPermanentInfo) permanentInfoWithPeerID:v53 data:isa sig:v62 keyFactory:v48];
  id v404 = v48;

  sub_10000852C(v51, v52);
  sub_10000852C(v50, v49);

  id v402 = v63;
  if (!v63)
  {

    unint64_t v132 = sub_100043F74();
    uint64_t v133 = swift_allocError(&type metadata for ContainerError, v132, 0LL, 0LL);
    *(_OWORD *)uint64_t v134 = xmmword_1001DE880;
    *(_BYTE *)(v134 + 16) = 13;
    v417(0LL, 0LL, 0LL, v133);
    swift_errorRelease();

    sub_10000852C(v408, v405);
    sub_10000852C(v407, v406);
    sub_10000852C(v410, v411);
    return sub_10000852C(v415, v49);
  }

  id v64 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  uint64_t v65 = v407;
  unint64_t v66 = v406;
  sub_1000084E8(v407, v406);
  uint64_t v67 = v408;
  unint64_t v68 = v405;
  sub_1000084E8(v408, v405);
  Class v69 = Data._bridgeToObjectiveC()().super.isa;
  Class v70 = Data._bridgeToObjectiveC()().super.isa;
  id v71 = [v64 initWithData:v69 sig:v70];
  sub_10000852C(v67, v68);
  sub_10000852C(v65, v66);

  id v72 = v403;
  if (!v71)
  {

    unint64_t v135 = sub_100043F74();
    uint64_t v136 = swift_allocError(&type metadata for ContainerError, v135, 0LL, 0LL);
    *(_OWORD *)uint64_t v137 = xmmword_1001DEA00;
    *(_BYTE *)(v137 + 16) = 13;
    v417(0LL, 0LL, 0LL, v136);
    swift_errorRelease();

    sub_10000852C(v408, v68);
    sub_10000852C(v65, v66);
    sub_10000852C(v410, v411);
    return sub_10000852C(v415, v414);
  }

  id v401 = v71;
  id v73 = [v409 uuid];
  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
  unint64_t v76 = v75;

  UUID.init(uuidString:)(v74, v76);
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  uint64_t v84 = v416;
  uint64_t v85 = v413;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v416 + 6))(v11, 1LL, v413) == 1)
  {

    sub_10004CDD4((uint64_t)v11);
    unint64_t v86 = v414;
    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v87 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v87, (uint64_t)qword_100251800);
    id v88 = v409;
    unint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    os_log_type_t v90 = static os_log_type_t.info.getter(v89);
    BOOL v91 = os_log_type_enabled(v89, v90);
    id v92 = v404;
    if (v91)
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v94 = (void *)swift_slowAlloc(32LL, -1LL);
      id v421 = v94;
      *(_DWORD *)uint64_t v93 = 136446210;
      v416 = v93 + 4;
      id v95 = [v88 uuid];
      uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      unint64_t v98 = v97;

      unint64_t v86 = v414;
      uint64_t v419 = sub_10017C4C4(v96, v98, (uint64_t *)&v421);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, v420, v416, v93 + 12);

      unint64_t v99 = (_TtC18TrustedPeersHelper6Client *)v98;
      id v100 = v401;
      id v92 = v404;
      unint64_t v101 = v405;
      unint64_t v102 = v411;
      swift_bridgeObjectRelease(v99, v103, v104, v105, v106, v107, v108, v109);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Unable to parse uuid %{public}s", v93, 0xCu);
      swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
      id v110 = v94;
      unint64_t v111 = v406;
      swift_slowDealloc(v110, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);

      uint64_t v112 = v408;
      id v113 = v402;
    }

    else
    {

      uint64_t v112 = v408;
      id v113 = v402;
      unint64_t v102 = v411;
      unint64_t v101 = v68;
      unint64_t v111 = v406;
      id v100 = v401;
    }

    unint64_t v163 = sub_100043F74();
    uint64_t v164 = swift_allocError(&type metadata for ContainerError, v163, 0LL, 0LL);
    *(_OWORD *)uint64_t v165 = xmmword_1001DE9E0;
    *(_BYTE *)(v165 + 16) = 13;
    v417(0LL, 0LL, 0LL, v164);
    swift_errorRelease();

    sub_10000852C(v112, v101);
    sub_10000852C(v407, v111);
    sub_10000852C(v410, v102);
    return sub_10000852C(v415, v86);
  }

  (*((void (**)(char *, char *, uint64_t))v84 + 4))(v412, v11, v85);
  v399 = (char *)OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v138 = *(id *)(a1 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  Class v139 = UUID._bridgeToObjectiveC()().super.isa;
  id v140 = [v138 findCustodianRecoveryKeyWithUUID:v139];

  unint64_t v141 = v414;
  if (!v140)
  {

    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v166 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v166, (uint64_t)qword_100251800);
    id v167 = v409;
    uint64_t v168 = (os_log_s *)Logger.logObject.getter(v167);
    os_log_type_t v169 = static os_log_type_t.info.getter(v168);
    if (os_log_type_enabled(v168, v169))
    {
      id v170 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v171 = (void *)swift_slowAlloc(32LL, -1LL);
      id v421 = v171;
      *(_DWORD *)id v170 = 136446210;
      id v409 = v170 + 4;
      id v172 = [v167 uuid];
      uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
      uint64_t v175 = v174;

      uint64_t v84 = v416;
      uint64_t v419 = sub_10017C4C4(v173, (unint64_t)v175, (uint64_t *)&v421);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, v420, v409, v170 + 12);

      swift_bridgeObjectRelease(v175, v176, v177, v178, v179, v180, v181, v182);
      _os_log_impl( (void *)&_mh_execute_header,  v168,  v169,  "Unable to find custodian recovery key %{public}s on model",  v170,  0xCu);
      swift_arrayDestroy(v171, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v171, -1LL, -1LL);
      swift_slowDealloc(v170, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v183 = v408;
    unint64_t v184 = v406;
    uint64_t v185 = v407;
    unint64_t v186 = sub_100043F74();
    uint64_t v187 = swift_allocError(&type metadata for ContainerError, v186, 0LL, 0LL);
    *(_OWORD *)uint64_t v188 = xmmword_1001DE9E0;
    *(_BYTE *)(v188 + 16) = 13;
    v417(0LL, 0LL, 0LL, v187);

    swift_errorRelease();
    sub_10000852C(v183, v405);
    uint64_t v189 = v185;
    unint64_t v190 = v184;
    goto LABEL_45;
  }

  id v400 = v140;
  id v142 = v409;
  id v143 = [v409 recoveryString];
  if (!v143)
  {
LABEL_40:

    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v191 = type metadata accessor for Logger(0LL);
    uint64_t v192 = sub_100006BAC(v191, (uint64_t)qword_100251800);
    uint64_t v193 = (os_log_s *)Logger.logObject.getter(v192);
    os_log_type_t v194 = static os_log_type_t.info.getter(v193);
    BOOL v195 = os_log_type_enabled(v193, v194);
    uint64_t v196 = v417;
    uint64_t v197 = v408;
    if (v195)
    {
      id v198 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v193, v194, "Bad format CRK: recovery string or salt not set", v198, 2u);
      swift_slowDealloc(v198, -1LL, -1LL);
    }

    unint64_t v199 = sub_100043F74();
    uint64_t v200 = swift_allocError(&type metadata for ContainerError, v199, 0LL, 0LL);
    *(_OWORD *)uint64_t v201 = xmmword_1001DEA10;
    *(_BYTE *)(v201 + 16) = 13;
    v196(0LL, 0LL, 0LL, v200);

    swift_errorRelease();
    sub_10000852C(v197, v68);
    uint64_t v189 = v407;
    unint64_t v190 = v406;
LABEL_45:
    sub_10000852C(v189, v190);

    sub_10000852C(v410, v411);
    sub_10000852C(v415, v141);
    return (*((uint64_t (**)(char *, uint64_t))v84 + 1))(v412, v413);
  }

  unint64_t v144 = v143;
  uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
  id v147 = v146;

  id v148 = [v142 salt];
  if (!v148)
  {
    swift_bridgeObjectRelease(v147, v149, v150, v151, v152, v153, v154, v155);
    unint64_t v68 = v405;
    goto LABEL_40;
  }

  id v156 = v148;
  uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
  unint64_t v159 = v158;

  uint64_t v160 = type metadata accessor for CustodianRecoveryKey();
  swift_allocObject(v160, 32LL, 7LL);
  id v161 = v400;
  uint64_t v162 = sub_100008A9C(v161, v145, (unint64_t)v147, v157, v159);
  id v409 = v161;
  id v202 = (void *)v162;
  id v203 = v399;
  uint64_t v204 = *(void **)&v399[a1];
  id v421 = 0LL;
  swift_retain(v162);
  unsigned int v205 = [v204 isCustodianRecoveryKeyTrusted:v161 error:&v421];
  id v206 = v421;
  id v400 = v202;
  if (v421)
  {
    id v207 = v421;
    swift_release(v202);

    swift_willThrow(v208);
    if (qword_100250BC8 != -1) {
      swift_once(&qword_100250BC8, sub_1000468B8);
    }
    uint64_t v209 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v209, (uint64_t)qword_100251800);
    id v210 = v207;
    id v211 = (os_log_s *)Logger.logObject.getter(v210);
    os_log_type_t v215 = static os_log_type_t.error.getter(v211, v212, v213, v214);
    if (os_log_type_enabled(v211, v215))
    {
      uint64_t v216 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v217 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v216 = 138543362;
      id v218 = v210;
      SEL v219 = (void *)_swift_stdlib_bridgeErrorToNSError(v218);
      id v421 = v219;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v421, v422, v216 + 4, v216 + 12);
      *unint64_t v217 = v219;

      _os_log_impl( (void *)&_mh_execute_header,  v211,  v215,  "preflightCustodianRecoveryKey: error determining whether custodian recovery key is trusted: %{public}@",  v216,  0xCu);
      uint64_t v220 = sub_100007578(&qword_100250F90);
      swift_arrayDestroy(v217, 1LL, v220);
      swift_slowDealloc(v217, -1LL, -1LL);
      swift_slowDealloc(v216, -1LL, -1LL);
    }

    else
    {

      id v211 = (os_log_s *)v210;
    }

    id v240 = v416;
    BOOL v241 = (void (*)(void, void, void, id))v417;
    unint64_t v242 = v406;

    id v243 = v210;
    v241(0LL, 0LL, 0LL, v206);

    sub_10000852C(v408, v405);
    sub_10000852C(v407, v242);

    sub_10000852C(v410, v411);
    sub_10000852C(v415, v414);
    swift_release(v400);
    return (*((uint64_t (**)(char *, uint64_t))v240 + 1))(v412, v413);
  }

  int64_t v221 = v161;
  id v222 = v416;
  if (v205)
  {
    id v223 = *(void **)&v203[a1];
    id v421 = 0LL;
    id v224 =  [v223 peerIDThatTrustsCustodianRecoveryKeys:v161 canIntroducePeer:v402 stableInfo:v401 error:&v421];
    BOOL v225 = v224;
    if (v421)
    {
      id v226 = v421;
      swift_release(v400);

      swift_willThrow(v227);
      if (qword_100250BC8 != -1) {
        swift_once(&qword_100250BC8, sub_1000468B8);
      }
      uint64_t v228 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v228, (uint64_t)qword_100251800);
      id v229 = v226;
      os_log_type_t v230 = (os_log_s *)Logger.logObject.getter(v229);
      os_log_type_t v234 = static os_log_type_t.error.getter(v230, v231, v232, v233);
      if (os_log_type_enabled(v230, v234))
      {
        id v235 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        SEL v236 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v235 = 138543362;
        id v237 = v229;
        int64_t v238 = (void *)_swift_stdlib_bridgeErrorToNSError(v237);
        id v421 = v238;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v421, v422, v235 + 4, v235 + 12);
        *SEL v236 = v238;

        _os_log_impl( (void *)&_mh_execute_header,  v230,  v234,  "preflightCustodianRecoveryKey error getting peer that trusts CRK: %{public}@",  v235,  0xCu);
        uint64_t v239 = sub_100007578(&qword_100250F90);
        swift_arrayDestroy(v236, 1LL, v239);
        swift_slowDealloc(v236, -1LL, -1LL);
        swift_slowDealloc(v235, -1LL, -1LL);
      }

      else
      {

        os_log_type_t v230 = (os_log_s *)v229;
      }

      unint64_t v288 = sub_100043F74();
      uint64_t v289 = swift_allocError(&type metadata for ContainerError, v288, 0LL, 0LL);
      *(_OWORD *)uint64_t v290 = xmmword_1001DE9F0;
      *(_BYTE *)(v290 + 16) = 13;
      v417(0LL, 0LL, 0LL, v289);

      swift_errorRelease();
      goto LABEL_84;
    }

    if (v224)
    {
      uint64_t v257 = static String._unconditionallyBridgeFromObjectiveC(_:)(v224);
      Class v259 = v258;
      SEL v260 = *(void **)&v203[a1];
      id v421 = 0LL;
      id v261 = v260;
      id v262 = [v261 peerWithID:v225 error:&v421];

      if (v421)
      {
        id v263 = v421;
        id v264 = v421;
        swift_release(v400);

        swift_willThrow(v265);
        if (qword_100250BC8 != -1) {
          swift_once(&qword_100250BC8, sub_1000468B8);
        }
        uint64_t v266 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v266, (uint64_t)qword_100251800);
        id v267 = v264;
        swift_bridgeObjectRetain(v259);
        id v268 = v267;
        id v269 = (os_log_s *)Logger.logObject.getter(v268);
        os_log_type_t v273 = static os_log_type_t.error.getter(v269, v270, v271, v272);
        if (os_log_type_enabled(v269, v273))
        {
          uint64_t v274 = swift_slowAlloc(22LL, -1LL);
          id v275 = (void *)swift_slowAlloc(64LL, -1LL);
          id v421 = v275;
          *(_DWORD *)uint64_t v274 = 136446466;
          swift_bridgeObjectRetain(v259);
          uint64_t v419 = sub_10017C4C4(v257, (unint64_t)v259, (uint64_t *)&v421);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, v420, v274 + 4, v274 + 12);
          swift_bridgeObjectRelease_n(v259, 3LL);
          *(_WORD *)(v274 + 12) = 2082;
          uint64_t v419 = (uint64_t)v268;
          id v276 = v268;
          uint64_t v277 = sub_100007578(&qword_100251D70);
          uint64_t v278 = String.init<A>(describing:)(&v419, v277);
          BOOL v280 = (_TtC18TrustedPeersHelper6Client *)v279;
          uint64_t v419 = sub_10017C4C4(v278, v279, (uint64_t *)&v421);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, v420, v274 + 14, v274 + 22);

          swift_bridgeObjectRelease(v280, v281, v282, v283, v284, v285, v286, v287);
          _os_log_impl( (void *)&_mh_execute_header,  v269,  v273,  "preflightCustodianRecoveryKey Error finding peer with ID %{public}s: %{public}s",  (uint8_t *)v274,  0x16u);
          swift_arrayDestroy(v275, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v275, -1LL, -1LL);
          swift_slowDealloc(v274, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v259, 2LL);
        }

        id v313 = v268;
        v417(0LL, 0LL, 0LL, v263);

        id v299 = &v424;
        goto LABEL_83;
      }

      if (v262)
      {
        SEL v300 = (char *)v262;
        swift_bridgeObjectRelease(v259, v301, v302, v303, v304, v305, v306, v307);
        id v308 = *(id *)&v399[a1];
        v399 = v300;
        id v309 = [v300 dynamicInfo];
        if (v309)
        {
          NSString v310 = v309;
          id v311 = [v309 includedPeerIDs];

          uint64_t v312 = (_TtC18TrustedPeersHelper6Client *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v311,  &type metadata for String,  &protocol witness table for String);
        }

        else
        {
          uint64_t v320 = sub_100007578((uint64_t *)&unk_100251820);
          uint64_t inited = swift_initStackObject(v320, v420);
          *(_OWORD *)(inited + 16) = xmmword_1001DE710;
          id v322 = [v399 peerID];
          uint64_t v323 = static String._unconditionallyBridgeFromObjectiveC(_:)(v322);
          uint64_t v325 = v324;

          *(void *)(inited + 32) = v323;
          *(void *)(inited + 40) = v325;
          uint64_t v312 = (_TtC18TrustedPeersHelper6Client *)sub_10015AB0C(inited);
          swift_setDeallocating(inited);
          swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
        }

        Class v326 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v312, v327, v328, v329, v330, v331, v332, v333);
        id v334 = [v399 stableInfo];
        id v421 = 0LL;
        id v335 = v403;
        id v336 =  [v308 policyForPeerIDs:v326 candidatePeerID:v403 candidateStableInfo:v334 error:&v421];

        id v337 = v421;
        if (v336)
        {
          id v338 = v421;
          NSString v339 = [v402 modelID];
          if (!v339)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
            uint64_t v341 = v340;
            NSString v339 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v341, v342, v343, v344, v345, v346, v347, v348);
          }

          id v349 = [v399 stableInfo];
          if (v349)
          {
            uint64_t v350 = v349;
            id v351 = [v349 syncUserControllableViews];
          }

          else
          {
            id v351 = 0LL;
          }

          id v357 = [v401 isInheritedAccount];
          id v421 = 0LL;
          id v358 =  [v336 syncingPolicyForModel:v339 syncUserControllableViews:v351 isInheritedAccount:v357 error:&v421];

          id v359 = v421;
          if (v358)
          {
            id v360 = v400;
            id v361 = (void *)*((void *)v400 + 2);
            id v362 = v421;
            NSString v363 = v361;
            swift_release(v360);
            uint64_t v364 = *(void *)&v363[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID];
            uint64_t v365 = *(_TtC18TrustedPeersHelper6Client **)&v363[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_peerID
                                                            + 8];
            swift_bridgeObjectRetain(v365);

            id v366 = v358;
            v417(v364, v365, v358, 0LL);

            swift_bridgeObjectRelease(v365, v367, v368, v369, v370, v371, v372, v373);
            id v374 = v399;

            sub_10000852C(v408, v405);
            sub_10000852C(v407, v406);

            sub_10000852C(v410, v411);
            sub_10000852C(v415, v414);
            id v375 = v360;
LABEL_109:
            swift_release(v375);

            return (*((uint64_t (**)(char *, uint64_t))v416 + 1))(v412, v413);
          }

          id v376 = v421;
          swift_release(v400);
          uint64_t v353 = _convertNSErrorToError(_:)(v359);

          swift_willThrow(v377);
        }

        else
        {
          id v352 = v421;
          swift_release(v400);
          uint64_t v353 = _convertNSErrorToError(_:)(v337);

          swift_willThrow(v354);
        }

        if (qword_100250BC8 != -1) {
          swift_once(&qword_100250BC8, sub_1000468B8);
        }
        uint64_t v378 = type metadata accessor for Logger(0LL);
        sub_100006BAC(v378, (uint64_t)qword_100251800);
        swift_errorRetain(v353);
        uint64_t v379 = swift_errorRetain(v353);
        uint64_t v380 = (os_log_s *)Logger.logObject.getter(v379);
        os_log_type_t v384 = static os_log_type_t.error.getter(v380, v381, v382, v383);
        if (os_log_type_enabled(v380, v384))
        {
          v385 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v386 = (void *)swift_slowAlloc(32LL, -1LL);
          id v421 = v386;
          *(_DWORD *)v385 = 136446210;
          uint64_t v419 = v353;
          swift_errorRetain(v353);
          uint64_t v387 = sub_100007578(&qword_100251D70);
          uint64_t v388 = String.init<A>(describing:)(&v419, v387);
          v390 = (_TtC18TrustedPeersHelper6Client *)v389;
          uint64_t v419 = sub_10017C4C4(v388, v389, (uint64_t *)&v421);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, v420, v385 + 4, v385 + 12);
          swift_bridgeObjectRelease(v390, v391, v392, v393, v394, v395, v396, v397);
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v380,  v384,  "preflightCustodianRecoveryKey: error fetching policy: %{public}s",  v385,  0xCu);
          swift_arrayDestroy(v386, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v386, -1LL, -1LL);
          swift_slowDealloc(v385, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        swift_errorRetain(v353);
        v417(0LL, 0LL, 0LL, v353);
        id v374 = v399;

        swift_errorRelease();
        swift_errorRelease();

        sub_10000852C(v408, v405);
        sub_10000852C(v407, v406);

        sub_10000852C(v410, v411);
        sub_10000852C(v415, v414);
        id v375 = v400;
        goto LABEL_109;
      }

      swift_release(v400);

      if (qword_100250BC8 != -1) {
        swift_once(&qword_100250BC8, sub_1000468B8);
      }
      uint64_t v314 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v314, (uint64_t)qword_100251800);
      uint64_t v315 = swift_bridgeObjectRetain_n(v259, 2LL);
      NSString v316 = (os_log_s *)Logger.logObject.getter(v315);
      os_log_type_t v317 = static os_log_type_t.info.getter(v316);
      if (os_log_type_enabled(v316, v317))
      {
        uint64_t v318 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v319 = (void *)swift_slowAlloc(32LL, -1LL);
        id v421 = v319;
        *(_DWORD *)uint64_t v318 = 136446210;
        swift_bridgeObjectRetain(v259);
        uint64_t v419 = sub_10017C4C4(v257, (unint64_t)v259, (uint64_t *)&v421);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, v420, v318 + 4, v318 + 12);
        swift_bridgeObjectRelease_n(v259, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v316,  v317,  "preflightCustodianRecoveryKey Failed to find peer with ID %{public}s",  v318,  0xCu);
        swift_arrayDestroy(v319, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v319, -1LL, -1LL);
        swift_slowDealloc(v318, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v259, 2LL);
      }

      unint64_t v355 = sub_100043F74();
      uint64_t v297 = swift_allocError(&type metadata for ContainerError, v355, 0LL, 0LL);
      *(void *)uint64_t v356 = v257;
      *(void *)(v356 + 8) = v259;
      *(_BYTE *)(v356 + 16) = 0;
    }

    else
    {

      swift_release(v400);
      if (qword_100250BC8 != -1) {
        swift_once(&qword_100250BC8, sub_1000468B8);
      }
      uint64_t v291 = type metadata accessor for Logger(0LL);
      uint64_t v292 = sub_100006BAC(v291, (uint64_t)qword_100251800);
      id v293 = (os_log_s *)Logger.logObject.getter(v292);
      os_log_type_t v294 = static os_log_type_t.info.getter(v293);
      if (os_log_type_enabled(v293, v294))
      {
        id v295 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v295 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v293,  v294,  "preflightCustodianRecoveryKey Untrusted custodian recovery key",  v295,  2u);
        swift_slowDealloc(v295, -1LL, -1LL);
      }

      unint64_t v296 = sub_100043F74();
      uint64_t v297 = swift_allocError(&type metadata for ContainerError, v296, 0LL, 0LL);
      *(_OWORD *)uint64_t v298 = xmmword_1001DE9F0;
      *(_BYTE *)(v298 + 16) = 13;
    }

    v417(0LL, 0LL, 0LL, v297);

    swift_errorRelease();
    id v299 = &v423;
LABEL_83:

LABEL_84:
    sub_10000852C(v408, v405);
    sub_10000852C(v407, v406);

    sub_10000852C(v410, v411);
    sub_10000852C(v415, v414);
    swift_release(v400);
    return (*((uint64_t (**)(char *, uint64_t))v416 + 1))(v412, v413);
  }

  swift_release(v400);

  unint64_t v244 = v414;
  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v245 = type metadata accessor for Logger(0LL);
  uint64_t v246 = sub_100006BAC(v245, (uint64_t)qword_100251800);
  uint64_t v247 = (os_log_s *)Logger.logObject.getter(v246);
  os_log_type_t v248 = static os_log_type_t.info.getter(v247);
  BOOL v249 = os_log_type_enabled(v247, v248);
  uint64_t v250 = v408;
  if (v249)
  {
    id v251 = v221;
    uint64_t v252 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v252 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v247,  v248,  "preflightCustodianRecoveryKey: custodian recovery key is not trusted",  v252,  2u);
    uint64_t v253 = v252;
    int64_t v221 = v251;
    swift_slowDealloc(v253, -1LL, -1LL);
  }

  unint64_t v254 = sub_100043F74();
  uint64_t v255 = swift_allocError(&type metadata for ContainerError, v254, 0LL, 0LL);
  *(_OWORD *)uint64_t v256 = xmmword_1001DE9F0;
  *(_BYTE *)(v256 + 16) = 13;
  v417(0LL, 0LL, 0LL, v255);

  swift_errorRelease();
  sub_10000852C(v250, v405);
  sub_10000852C(v407, v406);

  sub_10000852C(v410, v411);
  sub_10000852C(v415, v244);
  swift_release(v400);
  return (*((uint64_t (**)(char *, uint64_t))v222 + 1))(v412, v413);
}

uint64_t sub_10004B564(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v7, (uint64_t)qword_100251800);
  swift_errorRetain(a2);
  uint64_t v8 = swift_errorRetain(a2);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v33 = a4;
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    id v13 = (_TtC18TrustedPeersHelper6Client *)0xE700000000000000LL;
    if (a2)
    {
      uint64_t v35 = 0x203A726F727265LL;
      unint64_t v36 = 0xE700000000000000LL;
      uint64_t v34 = a2;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v14 = sub_100007578(&qword_100251D70);
      v15._countAndFlagsBits = String.init<A>(describing:)(&v34, v14);
      object = (_TtC18TrustedPeersHelper6Client *)v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(object, v17, v18, v19, v20, v21, v22, v23);
      swift_errorRelease();
      uint64_t v24 = v35;
      id v13 = (_TtC18TrustedPeersHelper6Client *)v36;
    }

    else
    {
      uint64_t v24 = 0x73736563637573LL;
    }

    uint64_t v35 = sub_10017C4C4(v24, (unint64_t)v13, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v13, v25, v26, v27, v28, v29, v30, v31);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "preflightRecoverOctagonWithRecoveryKey complete: %{public}s",  v11,  0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    a4 = v33;
  }

  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000E3368(0xD00000000000003FLL, 0x80000001001F65B0LL);
  return a4(a1 & 1, a2);
}

void sub_10004B7C8( void *a1, _TtC18TrustedPeersHelper6Client *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    os_log_type_t v10 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v13 = swift_allocObject(&unk_100235A58, 72LL, 7LL);
    *(void *)(v13 + 16) = a5;
    *(void *)(v13 + 24) = a6;
    *(void *)(v13 + 32) = a7;
    *(void *)(v13 + 40) = a8;
    *(void *)(v13 + 48) = a2;
    *(void *)(v13 + 56) = a3;
    *(void *)(v13 + 64) = a4;
    a2 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100235A80, 32LL, 7LL);
    *(void *)a2->endpoint = sub_10004C764;
    *(void *)a2->containerMap = v13;
    aBlock[4] = (uint64_t)sub_100044980;
    id v63 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100235A98;
    unint64_t v36 = _Block_copy(aBlock);
    uint64_t v37 = v63;
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_retain(a3);
    unint64_t v38 = a4;
    swift_retain(a2);
    swift_release(v37, v39, v40, v41, v42, v43, v44, v45);
    [v10 performBlockAndWait:v36];
    _Block_release(v36);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a2, "", 120LL, 336LL, 37LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v13, v47, v48, v49, v50, v51, v52, v53);
    swift_release(a2, v54, v55, v56, v57, v58, v59, v60);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_8;
  }

  os_log_type_t v10 = a1;
  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v11, (uint64_t)qword_100251800);
  swift_errorRetain(v10);
  uint64_t v12 = swift_errorRetain(v10);
  uint64_t v13 = Logger.logObject.getter(v12);
  os_log_type_t v17 = static os_log_type_t.error.getter(v13, v14, v15, v16);
  if (!os_log_type_enabled((os_log_t)v13, v17))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v19 = swift_slowAlloc(32LL, -1LL);
  uint64_t v61 = (uint64_t)v10;
  aBlock[0] = v19;
  *(_DWORD *)id v18 = 136446210;
  swift_errorRetain(v10);
  uint64_t v20 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v21 = String.init<A>(describing:)(&v61, v20);
  BOOL v23 = (_TtC18TrustedPeersHelper6Client *)v22;
  uint64_t v61 = sub_10017C4C4(v21, v22, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, aBlock, v18 + 4, v18 + 12);
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  v17,  "preflightRecoverOctagonWithRecoveryKey unable to fetch changes: %{public}s",  v18,  0xCu);
  swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v19, -1LL, -1LL);
  swift_slowDealloc(v18, -1LL, -1LL);
LABEL_9:

  ((void (*)(void, void *))a2)(0LL, v10);
}

void sub_10004BAE4( uint64_t a1, unint64_t a2, uint64_t a3, _TtC18TrustedPeersHelper6Client *a4, void (*a5)(void, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (char *)sub_1000097E0(a1, a2, a3, a4);
  uint64_t v116 = a7;
  id v117 = a5;
  uint64_t v14 = OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys;
  uint64_t v15 = *(void **)(*(void *)&v13[OBJC_IVAR____TtC18TrustedPeersHelper11RecoveryKey_peerKeys]
                 + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_signingVerificationKey);
  int64_t v118 = v13;
  id v16 = [v15 keyData];
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  unint64_t v19 = v18;

  uint64_t v114 = v14;
  unint64_t v115 = v13;
  id v20 =  [*(id *)(*(void *)&v13[v14] + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_encryptionVerificationKey) keyData];
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  unint64_t v23 = v22;

  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v24, (uint64_t)qword_100251800);
  sub_1000084E8(v17, v19);
  uint64_t v25 = sub_1000084E8(v17, v19);
  int64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.info.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v29 = (void *)swift_slowAlloc(32LL, -1LL);
    id v121 = v29;
    unint64_t v113 = v21;
    *(_DWORD *)id v28 = 136446210;
    Swift::String v30 = Data.base64EncodedString(options:)(0LL);
    uint64_t v119 = sub_10017C4C4(v30._countAndFlagsBits, (unint64_t)v30._object, (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v30._object, v31, v32, v33, v34, v35, v36, v37);
    sub_10000852C(v17, v19);
    sub_10000852C(v17, v19);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "preflightRecoverOctagonWithRecoveryKey signingPubKey: %{public}s",  v28,  0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    sub_10000852C(v17, v19);
    sub_10000852C(v17, v19);
  }

  sub_1000084E8(v21, v23);
  uint64_t v38 = sub_1000084E8(v21, v23);
  SEL v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.info.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    id v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v42 = (void *)swift_slowAlloc(32LL, -1LL);
    id v121 = v42;
    *(_DWORD *)id v41 = 136446210;
    Swift::String v43 = Data.base64EncodedString(options:)(0LL);
    unint64_t v113 = v19;
    uint64_t v119 = sub_10017C4C4(v43._countAndFlagsBits, (unint64_t)v43._object, (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease((_TtC18TrustedPeersHelper6Client *)v43._object, v44, v45, v46, v47, v48, v49, v50);
    sub_10000852C(v21, v23);
    sub_10000852C(v21, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "preflightRecoverOctagonWithRecoveryKey encryptionPubKey: %{public}s",  v41,  0xCu);
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);

    sub_10000852C(v21, v23);
    sub_10000852C(v17, v19);
  }

  else
  {
    sub_10000852C(v17, v19);
    sub_10000852C(v21, v23);
    sub_10000852C(v21, v23);
    sub_10000852C(v21, v23);
  }

  id v51 = v118;
  uint64_t v52 = OBJC_IVAR____TtC18TrustedPeersHelper9Container_model;
  id v53 = *(void **)(v116 + OBJC_IVAR____TtC18TrustedPeersHelper9Container_model);
  id v121 = 0LL;
  unsigned int v54 = objc_msgSend(v53, "isRecoveryKeyEnrolledWithError:", &v121, v113);
  id v55 = v117;
  if (!v121)
  {
    if (!v54)
    {

      id v81 = (os_log_s *)Logger.logObject.getter(v80);
      os_log_type_t v82 = static os_log_type_t.info.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        BOOL v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)BOOL v83 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "preflightRecoverOctagonWithRecoveryKey: recovery Key is not enrolled",  v83,  2u);
        swift_slowDealloc(v83, -1LL, -1LL);
      }

      unint64_t v84 = sub_100043F74();
      uint64_t v85 = swift_allocError(&type metadata for ContainerError, v84, 0LL, 0LL);
      *(_OWORD *)uint64_t v86 = xmmword_1001DE9E0;
      *(_BYTE *)(v86 + 16) = 13;
      uint64_t v87 = v85;
      goto LABEL_45;
    }

    id v69 = [*(id *)(v116 + v52) recoverySigningPublicKey];
    if (v69)
    {
      Class v70 = v69;
      uint64_t v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
      unint64_t v73 = v72;

      uint64_t v74 = *(void **)(*(void *)&v115[v114]
                     + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_publicSigningKey);
      if (!v74)
      {
        if (v73 >> 60 != 15)
        {
          uint64_t v75 = 0LL;
          unint64_t v76 = 0xF000000000000000LL;
LABEL_28:
          sub_10003C1D0(v71, v73);
          sub_10003C1D0(v75, v76);
LABEL_29:

LABEL_42:
          int64_t v105 = (os_log_s *)Logger.logObject.getter(v90);
          os_log_type_t v106 = static os_log_type_t.info.getter(v105);
          if (os_log_type_enabled(v105, v106))
          {
            id v107 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)id v107 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "preflightRecoverOctagonWithRecoveryKey: recovery Key is incorrect",  v107,  2u);
            swift_slowDealloc(v107, -1LL, -1LL);
          }

          unint64_t v108 = sub_100043F74();
          uint64_t v109 = swift_allocError(&type metadata for ContainerError, v108, 0LL, 0LL);
          *(_OWORD *)uint64_t v110 = xmmword_1001DEA20;
          *(_BYTE *)(v110 + 16) = 13;
          uint64_t v87 = v109;
LABEL_45:
          v117(0LL, v87);

          swift_errorRelease();
          return;
        }

LABEL_31:
        id v93 = [*(id *)(v116 + v52) recoveryEncryptionPublicKey];
        if (v93)
        {
          BOOL v94 = v93;
          uint64_t v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v93);
          unint64_t v97 = v96;
        }

        else
        {
          uint64_t v95 = 0LL;
          unint64_t v97 = 0xF000000000000000LL;
        }

        unint64_t v98 = (char *)*(id *)&v115[v114];

        unint64_t v99 = *(void **)&v98[OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_publicEncryptionKey];
        id v100 = v99;

        if (v99)
        {
          id v101 = [v100 keyData];

          uint64_t v102 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v101);
          unint64_t v104 = v103;

          if (v97 >> 60 == 15)
          {
            if (v104 >> 60 == 15) {
              goto LABEL_47;
            }
LABEL_41:
            sub_10003C1D0(v95, v97);
            uint64_t v90 = sub_10003C1D0(v102, v104);
            goto LABEL_42;
          }

          if (v104 >> 60 == 15) {
            goto LABEL_41;
          }
          sub_10004C798(v95, v97);
          sub_100041318(v95, v97);
          char v112 = v111;
          sub_10003C1D0(v102, v104);
          sub_10003C1D0(v95, v97);
          uint64_t v90 = sub_10003C1D0(v95, v97);
          if ((v112 & 1) == 0) {
            goto LABEL_42;
          }
        }

        else if (v97 >> 60 != 15)
        {
          uint64_t v102 = 0LL;
          unint64_t v104 = 0xF000000000000000LL;
          goto LABEL_41;
        }

    uint64_t v17 = (v26 - 1) & v26;
    unint64_t v18 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_32:
    uint64_t v24 = *(id *)(*(void *)(a1 + 48) + 8 * v18);
    if (!v24) {
      goto LABEL_35;
    }
    while (1)
    {
      objc_msgSend(a2, "removePoliciesObject:", v24, v28, v29);

      uint64_t v11 = v19;
      uint64_t v12 = v17;
      if ((a1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      id v20 = __CocoaSet.Iterator.next()(v9);
      if (v20)
      {
        uint64_t v21 = v20;
        id v32 = v20;
        unint64_t v22 = type metadata accessor for PolicyMO();
        swift_unknownObjectRetain(v21, v23);
        swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
        uint64_t v24 = v34;
        swift_unknownObjectRelease(v21);
        unint64_t v19 = v11;
        uint64_t v17 = v12;
        if (v24) {
          continue;
        }
      }

      goto LABEL_35;
    }
  }

  __break(1u);
}

    swift_once(&qword_100250EB8, sub_1000DD078);
    goto LABEL_3;
  }

  uint64_t v102 = v15;
  unint64_t v103 = v7;
  id v101 = a3;
  sub_100041608((uint64_t)v22, (uint64_t)v18, type metadata accessor for FetchRecoverableTLKSharesResponse);
  BOOL v50 = *(_TtC18TrustedPeersHelper6Client **)v18;
  id v51 = *(void *)(*(void *)v18 + 16LL);
  uint64_t v52 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  unint64_t v104 = v18;
  if (v51)
  {
    id v100 = a2;
    os_log_type_t v106 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v50);
    sub_10014E6A8(0, v51, 0);
    id v53 = (uint64_t)&v50->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80)];
    unsigned int v54 = *(void *)(v103 + 72);
    id v55 = v106;
    do
    {
      sub_10004164C(v53, (uint64_t)v10, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      id v56 = *(void *)(*((void *)v10 + 2) + 16LL);
      sub_1000415CC((uint64_t)v10, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
      {
        sub_10014E6A8(0, *(void *)v55->endpoint + 1LL, 1);
        id v55 = v106;
      }

      uint64_t v65 = *(void *)v55->endpoint;
      id v64 = *(void *)v55->containerMap;
      if (v65 >= v64 >> 1)
      {
        sub_10014E6A8(v64 > 1, v65 + 1, 1);
        id v55 = v106;
      }

      *(void *)v55->endpoint = v65 + 1;
      *(void *)&v55[1]._TtCs12_SwiftObject_opaque[8 * v65] = v56;
      v53 += v54;
      --v51;
    }

    while (v51);
    swift_bridgeObjectRelease(v50, v57, v58, v59, v60, v61, v62, v63);
    a2 = v100;
    unint64_t v18 = v104;
    uint64_t v52 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  else
  {
    id v55 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  }

  uint64_t v67 = *(void *)v55->endpoint;
  uint64_t v68 = (uint64_t)v102;
  id v69 = 0LL;
  if (v67)
  {
    Class v70 = v55 + 1;
    while (1)
    {
      uint64_t v71 = *(void *)v70->_TtCs12_SwiftObject_opaque;
      Class v70 = (_TtC18TrustedPeersHelper6Client *)((char *)v70 + 8);
      unint64_t v72 = __OFADD__(v69, v71);
      id v69 = (_TtC18TrustedPeersHelper6Client *)((char *)v69 + v71);
      if (v72) {
        break;
      }
      if (!--v67) {
        goto LABEL_20;
      }
    }

    __break(1u);
    goto LABEL_31;
  }

        uint64_t v21 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
      }

      unint64_t v19 = *(id *)(*(void *)(v2 + 48) + 8 * v22);
    }
  }

  sub_100172694(v2);
}

      __break(1u);
    }

    goto LABEL_17;
  }

    uint64_t v13 = (v22 - 1) & v22;
    uint64_t v14 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_32:
    id v20 = *(id *)(*(void *)(v1 + 48) + 8 * v14);
    if (!v20) {
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v24 = [v20 allowed] ? 1 : 2;
      [v20 setStatus:v24];
      [v20 setAllowed:0];

      uint64_t v8 = v15;
      uint64_t v9 = v13;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      id v16 = __CocoaSet.Iterator.next()(v6);
      if (v16)
      {
        uint64_t v17 = v16;
        os_log_type_t v27 = v16;
        unint64_t v18 = type metadata accessor for MachineMO();
        swift_unknownObjectRetain(v17, v19);
        swift_dynamicCast(&v29, &v27, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
        id v20 = v29;
        swift_unknownObjectRelease(v17);
        uint64_t v15 = v8;
        uint64_t v13 = v9;
        if (v20) {
          continue;
        }
      }

      goto LABEL_38;
    }
  }

  __break(1u);
}

    uint64_t v9 = (v19 - 1) & v19;
    uint64_t v14 = __clz(__rbit64(v19)) + (v8 << 6);
    goto LABEL_12;
  }

  __break(1u);
}

LABEL_47:
        v117(1LL, 0LL);
        return;
      }
    }

    else
    {
      uint64_t v74 = *(void **)(*(void *)&v115[v114]
                     + OBJC_IVAR____TtC18TrustedPeersHelper19OctagonSelfPeerKeys_publicSigningKey);
      if (!v74) {
        goto LABEL_31;
      }
      uint64_t v71 = 0LL;
      unint64_t v73 = 0xF000000000000000LL;
    }

    id v88 = [v74 keyData];
    uint64_t v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v88);
    unint64_t v76 = v89;

    if (v73 >> 60 == 15)
    {
      if (v76 >> 60 != 15) {
        goto LABEL_28;
      }
    }

    else
    {
      if (v76 >> 60 == 15) {
        goto LABEL_28;
      }
      sub_10004C798(v71, v73);
      sub_100041318(v71, v73);
      char v92 = v91;
      sub_10003C1D0(v75, v76);
      sub_10003C1D0(v71, v73);
      sub_10003C1D0(v71, v73);
      if ((v92 & 1) == 0) {
        goto LABEL_29;
      }
    }

    goto LABEL_31;
  }

  id v56 = v121;

  swift_willThrow(v57);
  id v58 = v56;
  id v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v63 = static os_log_type_t.error.getter(v59, v60, v61, v62);
  if (os_log_type_enabled(v59, v63))
  {
    id v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v65 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v64 = 138543362;
    id v66 = v58;
    uint64_t v67 = (void *)_swift_stdlib_bridgeErrorToNSError(v66);
    id v121 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v64 + 4, v64 + 12);
    *uint64_t v65 = v67;
    id v55 = v117;

    id v51 = v118;
    _os_log_impl( (void *)&_mh_execute_header,  v59,  v63,  "preflightRecoverOctagonWithRecoveryKey: error determining whether Recovery Key is enrolled: %{public}@",  v64,  0xCu);
    uint64_t v68 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v65, 1LL, v68);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {

    id v59 = (os_log_s *)v58;
  }

  unint64_t v77 = sub_100043F74();
  uint64_t v78 = swift_allocError(&type metadata for ContainerError, v77, 0LL, 0LL);
  *(_OWORD *)uint64_t v79 = xmmword_1001DE9E0;
  *(_BYTE *)(v79 + 16) = 13;
  v55(0LL, v78);

  swift_errorRelease();
}

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_10004C728()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10004C764()
{
  return sub_10004CF10((uint64_t (*)(void, void, void, void, void, void, void))sub_10004BAE4);
}

uint64_t sub_10004C770()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004C780(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004C790(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004C798(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000084E8(result, a2);
  }
  return result;
}

uint64_t sub_10004C7AC( void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    os_log_type_t v10 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v13 = (os_log_s *)swift_allocObject(&unk_100235B48, 72LL, 7LL);
    *((void *)v13 + 2) = a4;
    *((void *)v13 + 3) = a2;
    *((void *)v13 + 4) = a3;
    *((void *)v13 + 5) = a5;
    *((void *)v13 + 6) = a6;
    *((void *)v13 + 7) = a7;
    *((void *)v13 + 8) = a8;
    a2 = swift_allocObject(&unk_100235B70, 32LL, 7LL);
    *(void *)(a2 + 16) = sub_10004CF04;
    *(void *)(a2 + 24) = v13;
    aBlock[4] = (uint64_t)sub_100044B24;
    uint64_t v40 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100235B88;
    int64_t v33 = _Block_copy(aBlock);
    uint64_t v34 = v40;
    id v35 = a4;
    swift_retain(a3);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_retain(a2);
    swift_release(v34);
    [v10 performBlockAndWait:v33];
    _Block_release(v33);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a2, "", 120LL, 44LL, 41LL, 1LL);
    swift_release(v13);
    uint64_t result = swift_release(a2);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }

  os_log_type_t v10 = a1;
  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v11, (uint64_t)qword_100251800);
  swift_errorRetain(v10);
  uint64_t v12 = swift_errorRetain(v10);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter(v13);
  if (!os_log_type_enabled(v13, v14))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v16 = swift_slowAlloc(32LL, -1LL);
  uint64_t v38 = (uint64_t)v10;
  aBlock[0] = v16;
  *(_DWORD *)uint64_t v15 = 136446210;
  swift_errorRetain(v10);
  uint64_t v17 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v18 = String.init<A>(describing:)(&v38, v17);
  id v20 = (_TtC18TrustedPeersHelper6Client *)v19;
  uint64_t v38 = sub_10017C4C4(v18, v19, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, aBlock, v15 + 4, v15 + 12);
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "preflightRecoveryKey unable to fetch policy documents: %{public}s",  v15,  0xCu);
  swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v16, -1LL, -1LL);
  swift_slowDealloc(v15, -1LL, -1LL);
LABEL_9:

  return ((uint64_t (*)(void, void, void, void *))a2)(0LL, 0LL, 0LL, v10);
}

uint64_t sub_10004CAD0(void *a1, uint64_t a2, uint64_t a3, char *a4, void *a5)
{
  if (!a1)
  {
    uint64_t v7 = *(void **)&a4[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    os_log_type_t v10 = (os_log_s *)swift_allocObject(&unk_100235AD0, 48LL, 7LL);
    *((void *)v10 + 2) = a4;
    *((void *)v10 + 3) = a2;
    *((void *)v10 + 4) = a3;
    *((void *)v10 + 5) = a5;
    a2 = swift_allocObject(&unk_100235AF8, 32LL, 7LL);
    *(void *)(a2 + 16) = sub_10004CE48;
    *(void *)(a2 + 24) = v10;
    aBlock[4] = (uint64_t)sub_100044B24;
    uint64_t v35 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_100235B10;
    BOOL v27 = _Block_copy(aBlock);
    uint64_t v28 = v35;
    BOOL v29 = a4;
    swift_retain(a3);
    id v30 = a5;
    swift_retain(a2);
    swift_release(v28);
    [v7 performBlockAndWait:v27];
    _Block_release(v27);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a2, "", 120LL, 194LL, 41LL, 1LL);
    swift_release(v10);
    uint64_t result = swift_release(a2);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v7 = a1;
  if (qword_100250BC8 != -1) {
    swift_once(&qword_100250BC8, sub_1000468B8);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v8, (uint64_t)qword_100251800);
  swift_errorRetain(v7);
  uint64_t v9 = swift_errorRetain(v7);
  os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (!os_log_type_enabled(v10, v11))
  {
LABEL_8:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }

  uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v13 = swift_slowAlloc(32LL, -1LL);
  uint64_t v33 = (uint64_t)v7;
  aBlock[0] = v13;
  *(_DWORD *)uint64_t v12 = 136446210;
  swift_errorRetain(v7);
  uint64_t v14 = sub_100007578((uint64_t *)&unk_1002516A0);
  uint64_t v15 = String.init<A>(describing:)(&v33, v14);
  uint64_t v17 = (_TtC18TrustedPeersHelper6Client *)v16;
  uint64_t v33 = sub_10017C4C4(v15, v16, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, aBlock, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "preflightCustodianRecoveryKey unable to fetch policy documents: %{public}s",  v12,  0xCu);
  swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1LL, -1LL);
  swift_slowDealloc(v12, -1LL, -1LL);
LABEL_9:

  return ((uint64_t (*)(void, void, void, void *))a2)(0LL, 0LL, 0LL, v7);
}

uint64_t sub_10004CDD4(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251818);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004CE14()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004CE48()
{
  return sub_100049220( *(void *)(v0 + 16),  *(void (**)(void, void, void, void))(v0 + 24),  *(void *)(v0 + 32),  *(void **)(v0 + 40));
}

uint64_t sub_10004CE54()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10004CE64()
{
  unint64_t result = qword_100256DE0;
  if (!qword_100256DE0)
  {
    unint64_t v1 = sub_100044A38();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100256DE0);
  }

  return result;
}

void sub_10004CEAC(uint64_t *a1@<X8>)
{
}

uint64_t sub_10004CEC8()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10004CF04()
{
  return sub_10004CF10((uint64_t (*)(void, void, void, void, void, void, void))sub_100046C7C);
}

uint64_t sub_10004CF10(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_10004CF28()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10004CF48(uint64_t *a1@<X8>)
{
}

uint64_t sub_10004CF5C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100006B6C(v0, qword_100251830);
  sub_100006BAC(v0, (uint64_t)qword_100251830);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x80000001001E7520LL,  0x656E6961746E6F63LL,  0xEC00000070616D72LL);
}

uint64_t sub_10004CFD8(uint64_t a1, uint64_t a2, char a3, BOOL a4)
{
  BOOL v4 = a4;
  if (!a4) {
    return v4;
  }
  BOOL v29 = a4;
  swift_errorRetain(a4);
  swift_errorRetain(v4);
  uint64_t v8 = sub_100007578(&qword_100251D70);
  type metadata accessor for CKError(0LL);
  uint64_t v10 = v9;
  if (!swift_dynamicCast(&v28, &v29, v8, v9, 0LL))
  {
LABEL_12:
    swift_errorRelease(v4);
    swift_errorRelease(v29);
    return 0LL;
  }

  os_log_type_t v11 = v28;
  uint64_t v12 = related decl 'e' for CKErrorCode.underlyingError.getter(v28);
  if (!v12)
  {

    goto LABEL_12;
  }

  uint64_t v13 = (void *)v12;
  BOOL v27 = v11;
  uint64_t v14 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  _BridgedStoredNSError.code.getter(&v25, v10, v14);
  if ((void)v25 != a1
    || (BOOL v27 = v13,
        type metadata accessor for CKUnderlyingError(0LL),
        uint64_t v16 = v15,
        uint64_t v17 = sub_1000077B8( &qword_1002510A8,  (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError,  (uint64_t)&unk_1001DE158),  _BridgedStoredNSError.code.getter(&v25, v16, v17),  (void)v25 != a2))
  {

    goto LABEL_12;
  }

  if ((a3 & 1) != 0)
  {
    *(void *)&__int128 v25 = v13;
    uint64_t v18 = _BridgedStoredNSError.userInfo.getter(v16, v17);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    uint64_t v21 = v20;
    if (*(void *)(v18 + 16) && (unint64_t v22 = sub_10000D1E8(v19, v20), (v23 & 1) != 0))
    {
      sub_100061664(*(void *)(v18 + 56) + 32 * v22, (uint64_t)&v25);
    }

    else
    {
      __int128 v25 = 0u;
      __int128 v26 = 0u;
    }

    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v4);
    swift_bridgeObjectRelease(v21);
    BOOL v4 = *((void *)&v26 + 1) == 0LL;
    sub_100041590((uint64_t)&v25, &qword_100251EA0);
    swift_errorRelease(v29);
  }

  else
  {

    swift_errorRelease(v4);
    swift_errorRelease(v29);
    return 1LL;
  }

  return v4;
}

BOOL sub_10004D204(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v27 = a3;
  swift_errorRetain(a3);
  swift_errorRetain(a3);
  uint64_t v6 = sub_100007578(&qword_100251D70);
  type metadata accessor for CKError(0LL);
  uint64_t v8 = v7;
  if (swift_dynamicCast(&v26, &v27, v6, v7, 0LL))
  {
    uint64_t v9 = v26;
    *(void *)&__int128 v23 = v26;
    uint64_t v10 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
    _BridgedStoredNSError.code.getter(v25, v8, v10);
    if (*(void *)&v25[0] == a1)
    {
      *(void *)&__int128 v23 = v9;
      uint64_t v11 = _BridgedStoredNSError.userInfo.getter(v8, v10);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      uint64_t v14 = v13;
      if (*(void *)(v11 + 16) && (unint64_t v15 = sub_10000D1E8(v12, v13), (v16 & 1) != 0))
      {
        sub_100061664(*(void *)(v11 + 56) + 32 * v15, (uint64_t)&v23);
      }

      else
      {
        __int128 v23 = 0u;
        __int128 v24 = 0u;
      }

      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v11);
      if (*((void *)&v24 + 1))
      {
        sub_100008570(&v23, v25);
        sub_100061664((uint64_t)v25, (uint64_t)&v23);
        uint64_t v19 = sub_100007620(0LL, (unint64_t *)&qword_100251528, &OBJC_CLASS___NSError_ptr);
        if (swift_dynamicCast(&v22, &v23, (char *)&type metadata for Any + 8, v19, 6LL))
        {
          uint64_t v20 = (uint64_t)v22;
          id v21 = v22;
          BOOL v17 = sub_10004D440(a2, v20);

          swift_errorRelease(a3);
          sub_100007600(v25);
          swift_errorRelease(v27);
          return v17;
        }

        swift_errorRelease(a3);
        sub_100007600(v25);
      }

      else
      {
        swift_errorRelease(a3);

        sub_100041590((uint64_t)&v23, &qword_100251EA0);
      }

      goto LABEL_9;
    }
  }

  swift_errorRelease(a3);
LABEL_9:
  swift_errorRelease(v27);
  return 0;
}

BOOL sub_10004D440(id a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v20 = a2;
  swift_errorRetain(a2);
  swift_errorRetain(a2);
  uint64_t v4 = sub_100007578(&qword_100251D70);
  uint64_t v5 = sub_100007620(0LL, (unint64_t *)&qword_100251528, &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v19, &v20, v4, v5, 0LL))
  {
    swift_errorRelease(a2);
    goto LABEL_10;
  }

  id v6 = v19;
  id v7 = [v19 domain];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v8 == v11 && v10 == v12)
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
    goto LABEL_13;
  }

  uint64_t v14 = v12;
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0LL);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
LABEL_13:
    id v17 = [v6 code];
    swift_errorRelease(a2);

    BOOL v16 = v17 == a1;
    swift_errorRelease(v20);
    return v16;
  }

  swift_errorRelease(a2);

LABEL_10:
  swift_errorRelease(v20);
  return 0LL;
}

Swift::Bool __swiftcall RetryingCKCodeService.configuredFor(user:)(TPSpecificUser *user)
{
  return sub_10005E548(user) & 1;
}

unint64_t sub_10004D5FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v9 = 4 * v4;
  unint64_t v10 = 15LL;
  while (1)
  {
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    if (v11 == a1 && v12 == a2) {
      break;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0LL);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) != 0) {
      return v10;
    }
    unint64_t v10 = String.index(after:)(v10, a3, a4);
    if (v9 == v10 >> 14) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(a2);
  return v10;
}

id sub_10004D6E8( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236818, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236830;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236868, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_1000612D8, v79);
  uint64_t v97 = swift_allocObject(&unk_100236890, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_1002368A8;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_10004DED0( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_1002368E0, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_1002368F8;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236930, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_1000612FC, v79);
  uint64_t v97 = swift_allocObject(&unk_100236958, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236970;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_10004E6B8( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236D90, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236DA8;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236DE0, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061504, v79);
  uint64_t v97 = swift_allocObject(&unk_100236E08, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = sub_10006164C;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236E20;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_10004EEA0( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236CC8, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236CE0;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236D18, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_1000613B0, v79);
  uint64_t v97 = swift_allocObject(&unk_100236D40, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236D58;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_10004F688( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236C00, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236C18;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236C50, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_10006138C, v79);
  uint64_t v97 = swift_allocObject(&unk_100236C78, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236C90;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_10004FE70( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236B38, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236B50;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236B88, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061368, v79);
  uint64_t v97 = swift_allocObject(&unk_100236BB0, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236BC8;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100050658( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236A70, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236A88;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236AC0, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061344, v79);
  uint64_t v97 = swift_allocObject(&unk_100236AE8, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236B00;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100050E40( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_1002369A8, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_1002369C0;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_1002369F8, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061320, v79);
  uint64_t v97 = swift_allocObject(&unk_100236A20, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236A38;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100051628( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236750, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236768;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_1002367A0, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_1000612B4, v79);
  uint64_t v97 = swift_allocObject(&unk_1002367C8, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_1002367E0;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100051E10( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236688, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_1002366A0;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_1002366D8, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061290, v79);
  uint64_t v97 = swift_allocObject(&unk_100236700, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236718;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_1000525F8( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_1002365C0, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_1002365D8;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236610, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_10006126C, v79);
  uint64_t v97 = swift_allocObject(&unk_100236638, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236650;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100052DE0( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_1002364F8, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236510;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236548, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061248, v79);
  uint64_t v97 = swift_allocObject(&unk_100236570, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236588;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_1000535C8( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236430, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236448;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236480, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061224, v79);
  uint64_t v97 = swift_allocObject(&unk_1002364A8, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_1002364C0;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100053DB0( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236368, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236380;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_1002363B8, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061200, v79);
  uint64_t v97 = swift_allocObject(&unk_1002363E0, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_1002363F8;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100054598( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_1002362A0, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_1002362B8;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_1002362F0, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_1000611DC, v79);
  uint64_t v97 = swift_allocObject(&unk_100236318, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236330;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100054D80( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_1002361D8, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_1002361F0;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236228, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_1000611B8, v79);
  uint64_t v97 = swift_allocObject(&unk_100236250, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_100236268;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100055568( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236110, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236128;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236160, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061194, v79);
  uint64_t v97 = swift_allocObject(&unk_100236188, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_1002361A0;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id sub_100055D50( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v125 = a8;
  unint64_t v133 = a7;
  uint64_t v135 = a4;
  uint64_t v136 = a6;
  unint64_t v130 = a5;
  unint64_t v123 = a1;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  __int128 v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v27 = __chkstk_darwin(v124, v26);
  unint64_t v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v121 = v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  unsigned int v131 = (char *)&v108 - v31;
  os_log_type_t v126 = a11;
  id v32 = (void *)a11(v30);
  id result = [v32 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v34 = result;
  uint64_t v119 = a12;
  uint64_t v120 = v25;
  [result setIsCloudKitSupportOperation:1];

  id result = [v32 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v35 = result;
  int64_t v118 = v20;
  uint64_t v113 = a10;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setApplicationBundleIdentifierOverride:v36];

  uint64_t v37 = swift_allocObject(&unk_100236048, 32LL, 7LL);
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = a3;
  uint64_t v38 = a3;
  id v143 = sub_10006197C;
  uint64_t v144 = v37;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100056FA0;
  id v142 = &unk_100236060;
  SEL v39 = _Block_copy(&aBlock);
  uint64_t v40 = v144;
  swift_bridgeObjectRetain(v38);
  id v41 = v32;
  swift_retain(v37);
  swift_release(v40);
  [v41 setRequestCompletedBlock:v39];
  _Block_release(v39);
  id v114 = v41;

  uint64_t v42 = v133;
  uint64_t v115 = v37;
  char v43 = 0;
  if (v133)
  {
    uint64_t v44 = HIBYTE(v133) & 0xF;
    if ((v133 & 0x2000000000000000LL) == 0) {
      uint64_t v44 = v136 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v130;
    if (v44 && v130)
    {
      uint64_t v46 = HIBYTE(v130) & 0xF;
      if ((v130 & 0x2000000000000000LL) == 0) {
        uint64_t v46 = v135 & 0xFFFFFFFFFFFFLL;
      }
      char v43 = v46 != 0;
    }
  }

  else
  {
    uint64_t v45 = v130;
  }

  sub_1000084C4((void *)(v134 + 16), *(void *)(v134 + 40));
  id v129 = sub_10005E480();
  uint64_t v108 = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v42);
  unint64_t v48 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v38);
  uint64_t v117 = v21;
  uint64_t v116 = v22;
  uint64_t v112 = a14;
  uint64_t v111 = a13;
  uint64_t v110 = (uint64_t)v38;
  uint64_t v109 = a2;
  if ((v49 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v140 = 0x80000001001F66B0LL;
    v62._countAndFlagsBits = a2;
    v62._object = v38;
    String.append(_:)(v62);
    uint64_t v60 = (uint64_t)aBlock;
    uint64_t v61 = v140;
  }

  else
  {
    unint64_t v50 = v48;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = String.subscript.getter(15LL, v50, a2, v38);
    unint64_t v53 = v52;
    unsigned int v54 = v38;
    id v56 = v55;
    id v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v137 = (void *)0xD000000000000013LL;
    unint64_t v138 = 0x80000001001F66B0LL;
    aBlock = (void **)v51;
    unint64_t v140 = v53;
    unint64_t v141 = v56;
    id v142 = v58;
    unint64_t v59 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v59);
    swift_bridgeObjectRelease(v58);
    uint64_t v60 = (uint64_t)v137;
    uint64_t v61 = v138;
  }

  sub_10005FCAC();
  char v64 = v63;
  uint64_t v65 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v66 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v67 = v65;
  id v129 = sub_10005F250(0LL, (uint64_t)v129, v108, v136, v42, v135, v45, v60, v61, v64, v43, v67);
  uint64_t v68 = v122;
  id v69 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v70 = v124;
  v69(v131, v113, v124);
  v69(v132, v123, v70);
  uint64_t v71 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v72 = (v71 + 32) & ~v71;
  unint64_t v73 = (v121 + 7 + v72) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v75 = (v71 + v74 + 8) & ~v71;
  unint64_t v76 = (v121 + 7 + v75) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v123 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_100236098, v123 + 16, v71 | 7);
  uint64_t v80 = v125;
  *(void *)(v79 + 16) = v129;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = v79 + v72;
  os_log_type_t v82 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v82(v81, v131, v70);
  BOOL v83 = (void *)(v79 + v73);
  uint64_t v84 = v112;
  *BOOL v83 = v111;
  v83[1] = v84;
  *(double *)(v79 + v74) = a9;
  v82(v79 + v75, v132, v70);
  uint64_t v85 = (uint64_t *)(v79 + v76);
  uint64_t v86 = v110;
  *uint64_t v85 = v109;
  v85[1] = v86;
  uint64_t v88 = v134;
  uint64_t v87 = v135;
  *(void *)(v79 + v121) = v134;
  unint64_t v89 = (uint64_t *)(v79 + v77);
  unint64_t v90 = v130;
  *unint64_t v89 = v87;
  v89[1] = v90;
  char v91 = (void *)(v79 + v78);
  unint64_t v92 = v133;
  *char v91 = v136;
  v91[1] = v92;
  id v93 = (void *)(v79 + v123);
  uint64_t v94 = v119;
  void *v93 = v126;
  v93[1] = v94;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  id v95 = v129;
  swift_retain(v84);
  swift_retain(v88);
  swift_retain(v94);
  unint64_t v96 = v114;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_100061170, v79);
  uint64_t v97 = swift_allocObject(&unk_1002360C0, 32LL, 7LL);
  *(void *)(v97 + 16) = v96;
  *(void *)(v97 + 24) = v88;
  id v143 = (void (*)(void *))sub_1000617D4;
  uint64_t v144 = v97;
  aBlock = _NSConcreteStackBlock;
  unint64_t v140 = 1107296256LL;
  unint64_t v141 = sub_100058388;
  id v142 = &unk_1002360D8;
  unint64_t v98 = _Block_copy(&aBlock);
  id v99 = v96;
  uint64_t v100 = swift_retain(v88);
  id v101 = v120;
  static DispatchQoS.unspecified.getter(v100);
  uint64_t v137 = _swiftEmptyArrayStorage;
  uint64_t v102 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v103 = sub_100007578(&qword_100251850);
  uint64_t v104 = sub_1000610E4(&qword_100251858, &qword_100251850);
  int64_t v105 = v118;
  uint64_t v106 = v103;
  uint64_t v107 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v106, v104, v128, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v101, v105, v98);
  _Block_release(v98);

  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v101, v117);
  return (id)swift_release(v144);
}

id RetryingCKCodeService.invokeRetry<A, B>(deadline:minimumDelay:functionName:deviceSessionID:flowID:attemptNumber:startTime:operationCreator:completion:)( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v135 = a8;
  unint64_t v143 = a7;
  uint64_t v145 = a4;
  uint64_t v146 = a6;
  unint64_t v140 = a5;
  unint64_t v132 = a1;
  uint64_t v21 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v137 = *(void *)(v21 - 8);
  uint64_t v138 = v21;
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for Date(0LL);
  uint64_t v133 = *(void *)(v134 - 8);
  uint64_t v31 = __chkstk_darwin(v134, v30);
  id v142 = (char *)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v131 = v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  unint64_t v141 = (char *)&v114 - v35;
  uint64_t v136 = a11;
  NSString v36 = (void *)a11(v34);
  id result = [v36 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v38 = result;
  uint64_t v129 = a12;
  unint64_t v130 = v29;
  [result setIsCloudKitSupportOperation:1];

  id result = [v36 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  SEL v39 = result;
  uint64_t v128 = v24;
  uint64_t v123 = a10;
  NSString v40 = String._bridgeToObjectiveC()();
  [v39 setApplicationBundleIdentifierOverride:v40];

  uint64_t v41 = swift_allocObject(&unk_100235BC0, 32LL, 7LL);
  *(void *)(v41 + 16) = a2;
  *(void *)(v41 + 24) = a3;
  uint64_t v42 = a3;
  unint64_t v153 = sub_10005FC8C;
  uint64_t v154 = v41;
  aBlock = _NSConcreteStackBlock;
  unint64_t v150 = 1107296256LL;
  int64_t v151 = sub_100056FA0;
  uint64_t v152 = &unk_100235BD8;
  char v43 = _Block_copy(&aBlock);
  uint64_t v44 = v154;
  swift_bridgeObjectRetain(v42);
  id v45 = v36;
  swift_retain(v41);
  swift_release(v44);
  [v45 setRequestCompletedBlock:v43];
  _Block_release(v43);
  id v124 = v45;

  uint64_t v46 = v143;
  uint64_t v125 = v41;
  char v47 = 0;
  if (v143)
  {
    uint64_t v48 = HIBYTE(v143) & 0xF;
    if ((v143 & 0x2000000000000000LL) == 0) {
      uint64_t v48 = v146 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v49 = v140;
    if (v48 && v140)
    {
      uint64_t v50 = HIBYTE(v140) & 0xF;
      if ((v140 & 0x2000000000000000LL) == 0) {
        uint64_t v50 = v145 & 0xFFFFFFFFFFFFLL;
      }
      char v47 = v50 != 0;
    }
  }

  else
  {
    uint64_t v49 = v140;
  }

  uint64_t v120 = a18;
  uint64_t v119 = a17;
  uint64_t v118 = a16;
  uint64_t v117 = a15;
  sub_1000084C4((void *)(v144 + 16), *(void *)(v144 + 40));
  id v139 = sub_10005E480();
  uint64_t v114 = v51;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v46);
  unint64_t v52 = sub_10004D5FC(40LL, 0xE100000000000000LL, a2, (unint64_t)v42);
  uint64_t v127 = v25;
  uint64_t v126 = v26;
  uint64_t v122 = a14;
  uint64_t v121 = a13;
  uint64_t v116 = (uint64_t)v42;
  uint64_t v115 = a2;
  if ((v53 & 1) != 0)
  {
    aBlock = (void **)0xD000000000000013LL;
    unint64_t v150 = 0x80000001001F66B0LL;
    v66._countAndFlagsBits = a2;
    v66._object = v42;
    String.append(_:)(v66);
    uint64_t v64 = (uint64_t)aBlock;
    uint64_t v65 = v150;
  }

  else
  {
    unint64_t v54 = v52;
    swift_bridgeObjectRetain(v42);
    uint64_t v55 = String.subscript.getter(15LL, v54, a2, v42);
    unint64_t v57 = v56;
    id v58 = v42;
    uint64_t v60 = v59;
    Swift::String v62 = v61;
    swift_bridgeObjectRelease(v58);
    id v147 = (void *)0xD000000000000013LL;
    unint64_t v148 = 0x80000001001F66B0LL;
    aBlock = (void **)v55;
    unint64_t v150 = v57;
    int64_t v151 = v60;
    uint64_t v152 = v62;
    unint64_t v63 = sub_10005FFF0();
    String.append<A>(contentsOf:)(&aBlock, &type metadata for Substring, v63);
    swift_bridgeObjectRelease(v62);
    uint64_t v64 = (uint64_t)v147;
    uint64_t v65 = v148;
  }

  sub_10005FCAC();
  char v68 = v67;
  id v69 = (void *)kSecurityRTCEventCategoryAccountDataAccessRecovery;
  id v70 = objc_allocWithZone(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v71 = v69;
  id v139 = sub_10005F250(0LL, (uint64_t)v139, v114, v146, v46, v145, v49, v64, v65, v68, v47, v71);
  uint64_t v72 = v133;
  unint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v133 + 16);
  uint64_t v74 = v134;
  v73(v141, v123, v134);
  v73(v142, v132, v74);
  uint64_t v75 = *(unsigned __int8 *)(v72 + 80);
  uint64_t v76 = (v75 + 64) & ~v75;
  unint64_t v77 = (v131 + 7 + v76) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = (v75 + v78 + 8) & ~v75;
  unint64_t v80 = (v131 + 7 + v79) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v131 = (v80 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v81 = (v131 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v82 = (v81 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v132 = (v82 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  BOOL v83 = (char *)swift_allocObject(&unk_100235C10, v132 + 16, v75 | 7);
  uint64_t v84 = v118;
  *((void *)v83 + 2) = v117;
  *((void *)v83 + 3) = v84;
  uint64_t v85 = v120;
  *((void *)v83 + 4) = v119;
  *((void *)v83 + 5) = v85;
  uint64_t v86 = v135;
  *((void *)v83 + 6) = v139;
  *((void *)v83 + 7) = v86;
  uint64_t v87 = &v83[v76];
  uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
  v88(v87, v141, v74);
  unint64_t v89 = &v83[v77];
  uint64_t v90 = v122;
  *(void *)unint64_t v89 = v121;
  *((void *)v89 + 1) = v90;
  *(double *)&v83[v78] = a9;
  v88(&v83[v79], v142, v74);
  char v91 = (uint64_t *)&v83[v80];
  uint64_t v92 = v116;
  *char v91 = v115;
  v91[1] = v92;
  uint64_t v94 = v144;
  uint64_t v93 = v145;
  *(void *)&v83[v131] = v144;
  id v95 = (uint64_t *)&v83[v81];
  unint64_t v96 = v140;
  *id v95 = v93;
  v95[1] = v96;
  uint64_t v97 = &v83[v82];
  unint64_t v98 = v143;
  *(void *)uint64_t v97 = v146;
  *((void *)v97 + 1) = v98;
  id v99 = &v83[v132];
  uint64_t v100 = v129;
  *(void *)id v99 = v136;
  *((void *)v99 + 1) = v100;
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v96);
  id v101 = v139;
  swift_retain(v90);
  swift_retain(v94);
  swift_retain(v100);
  uint64_t v102 = v124;
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(sub_10005FEF0, v83);
  uint64_t v103 = swift_allocObject(&unk_100235C38, 32LL, 7LL);
  *(void *)(v103 + 16) = v102;
  *(void *)(v103 + 24) = v94;
  unint64_t v153 = (void (*)(void *))sub_1000617D4;
  uint64_t v154 = v103;
  aBlock = _NSConcreteStackBlock;
  unint64_t v150 = 1107296256LL;
  int64_t v151 = sub_100058388;
  uint64_t v152 = &unk_100235C50;
  uint64_t v104 = _Block_copy(&aBlock);
  id v105 = v102;
  uint64_t v106 = swift_retain(v94);
  uint64_t v107 = v130;
  static DispatchQoS.unspecified.getter(v106);
  id v147 = _swiftEmptyArrayStorage;
  uint64_t v108 = sub_1000077B8( &qword_100251848,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v109 = sub_100007578(&qword_100251850);
  uint64_t v110 = sub_1000610E4(&qword_100251858, &qword_100251850);
  uint64_t v111 = v128;
  uint64_t v112 = v109;
  uint64_t v113 = v138;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v147, v112, v110, v138, v108);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v107, v111, v104);
  _Block_release(v104);

  swift_release(v125);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v111, v113);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v107, v127);
  return (id)swift_release(v154);
}

void sub_100056D78(void *a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    id v5 = [a1 requestUUID];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v8 = v7;

    if (qword_100250BD0 != -1) {
      swift_once(&qword_100250BD0, sub_10004CF5C);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v9, (uint64_t)qword_100251830);
    swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v10 = swift_bridgeObjectRetain(v8);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v14 = swift_slowAlloc(64LL, -1LL);
      uint64_t v16 = v14;
      *(_DWORD *)uint64_t v13 = 136446466;
      swift_bridgeObjectRetain(a3);
      uint64_t v15 = sub_10017C4C4(a2, a3, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v13 + 12) = 2082;
      swift_bridgeObjectRetain(v8);
      uint64_t v15 = sub_10017C4C4(v6, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease_n(v8, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "ckoperation request finished: %{public}s %{public}s",  (uint8_t *)v13,  0x16u);
      swift_arrayDestroy(v14, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v8, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }
  }

void sub_100056FA0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

void sub_100056FF4( os_log_s *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6, char *a7, uint64_t a8, double a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, void (*a19)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, void (*)(void), uint64_t))
{
  uint64_t v128 = a7;
  uint64_t v135 = a6;
  uint64_t v136 = a4;
  unint64_t v131 = a5;
  id v133 = a2;
  uint64_t v132 = type metadata accessor for Date(0LL);
  uint64_t v134 = *(void *)(v132 - 8);
  uint64_t v24 = __chkstk_darwin(v132, v23);
  uint64_t v26 = (char *)&v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v24, v27);
  uint64_t v127 = (char *)&v119 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v33 = (char *)&v119 - v32;
  uint64_t v35 = __chkstk_darwin(v31, v34);
  uint64_t v129 = (char *)&v119 - v36;
  __chkstk_darwin(v35, v37);
  SEL v39 = (char *)&v119 - v38;
  uint64_t v40 = sub_100007578(a18);
  uint64_t v42 = __chkstk_darwin(v40, v41);
  uint64_t v44 = (uint64_t *)((char *)&v119 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v42, v45);
  char v47 = (id *)((char *)&v119 - v46);
  unint64_t v130 = (uint64_t *)a1;
  uint64_t v48 = (uint64_t)a1;
  uint64_t v50 = v49;
  sub_10000FC68(v48, (uint64_t)&v119 - v46, a18);
  if (swift_getEnumCaseMultiPayload(v47, v50) != 1)
  {
    uint64_t v81 = sub_100007578(&qword_100256C10);
    uint64_t inited = swift_initStackObject(v81, &v137);
    *(_OWORD *)(inited + 16) = xmmword_1001DE420;
    uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldRetryAttemptCount);
    uint64_t v140 = v83;
    AnyHashable.init<A>(_:)(&v139, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = a3;
    uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldTotalRetryDuration);
    uint64_t v140 = v84;
    uint64_t v85 = AnyHashable.init<A>(_:)(&v139, &type metadata for String, &protocol witness table for String);
    Date.init()(v85);
    double v86 = Date.timeIntervalSince(_:)(v136);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v39, v132);
    *(void *)(inited + 168) = &type metadata for Double;
    *(double *)(inited + 144) = v86;
    unint64_t v87 = sub_10000BE44(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v87);
    id v89 = v133;
    [v133 addMetrics:isa];

    [(id)objc_opt_self(SecurityAnalyticsReporterRTC) sendMetricWithEvent:v89 success:1 error:0];
    v131(v130);
    uint64_t v79 = (uint64_t)v47;
    unint64_t v80 = a18;
    goto LABEL_13;
  }

  unint64_t v130 = a18;
  uint64_t v123 = a8;
  id v124 = v26;
  uint64_t v126 = v33;
  id v51 = *v47;
  uint64_t v52 = sub_100007578(&qword_100256C10);
  uint64_t v53 = swift_initStackObject(v52, &v141);
  *(_OWORD *)(v53 + 16) = xmmword_1001DE420;
  uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldRetryAttemptCount);
  uint64_t v140 = v54;
  AnyHashable.init<A>(_:)(&v139, &type metadata for String, &protocol witness table for String);
  *(void *)(v53 + 96) = &type metadata for Int;
  uint64_t v122 = a3;
  *(void *)(v53 + 72) = a3;
  uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldTotalRetryDuration);
  uint64_t v140 = v55;
  uint64_t v56 = AnyHashable.init<A>(_:)(&v139, &type metadata for String, &protocol witness table for String);
  Date.init()(v56);
  double v57 = Date.timeIntervalSince(_:)(v136);
  uint64_t v58 = v134;
  uint64_t v59 = v132;
  uint64_t v125 = *(void (**)(char *, uint64_t))(v134 + 8);
  v125(v39, v132);
  *(void *)(v53 + 168) = &type metadata for Double;
  *(double *)(v53 + 144) = v57;
  unint64_t v60 = sub_10000BE44(v53);
  Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v60);
  id v62 = v133;
  [v133 addMetrics:v61];

  uint64_t v63 = objc_opt_self(&OBJC_CLASS___SecurityAnalyticsReporterRTC);
  uint64_t v64 = (void *)_convertErrorToNSError(_:)(v51);
  [(id)v63 sendMetricWithEvent:v62 success:0 error:v64];

  swift_errorRetain(v51);
  LOBYTE(v63) = _s18TrustedPeersHelper21RetryingCKCodeServiceC14retryableError5errorSbs0H0_pSg_tFZ_0(v51);
  uint64_t v65 = swift_errorRelease(v51);
  if ((v63 & 1) == 0)
  {
LABEL_11:
    uint64_t *v44 = (uint64_t)v51;
    swift_storeEnumTagMultiPayload(v44, v50, 1LL);
    swift_errorRetain(v51);
    v131(v44);
    swift_errorRelease(v51);
    uint64_t v79 = (uint64_t)v44;
    unint64_t v80 = v130;
LABEL_13:
    sub_100041590(v79, v80);
    return;
  }

  uint64_t v66 = v59;
  char v67 = v129;
  Date.init()(v65);
  swift_errorRetain(v51);
  swift_errorRetain(v51);
  char v68 = (void *)_convertErrorToNSError(_:)(v51);
  [v68 cuttlefishRetryAfter];
  double v70 = v69;

  swift_errorRelease(v51);
  swift_errorRelease(v51);
  id v133 = v51;
  id v71 = (void *)_convertErrorToNSError(_:)(v51);
  double v72 = CKRetryAfterSecondsForError();

  if (v70 < a9) {
    double v73 = a9;
  }
  else {
    double v73 = v70;
  }
  if (v73 > v72) {
    double v74 = v73;
  }
  else {
    double v74 = v72;
  }
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v75(v39, v67, v59);
  uint64_t v76 = v126;
  Date.init(timeInterval:since:)(v39, v74);
  unint64_t v77 = v128;
  if (Date.compare(_:)(v128) == 1)
  {
    unint64_t v78 = v125;
    v125(v76, v59);
    v78(v67, v59);
    id v51 = v133;
    goto LABEL_11;
  }

  unint64_t v90 = a10;
  [(id)objc_opt_self(NSThread) sleepForTimeInterval:v74];
  if (qword_100250BD0 != -1) {
    swift_once(&qword_100250BD0, sub_10004CF5C);
  }
  uint64_t v91 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v91, (uint64_t)qword_100251830);
  uint64_t v92 = v127;
  v75(v127, v67, v59);
  v75(v124, v77, v59);
  uint64_t v93 = (uint64_t)v133;
  swift_errorRetain(v133);
  swift_bridgeObjectRetain(a10);
  swift_errorRetain(v93);
  uint64_t v94 = swift_bridgeObjectRetain(a10);
  id v95 = (os_log_s *)Logger.logObject.getter(v94);
  os_log_type_t v96 = static os_log_type_t.info.getter();
  int v97 = v96;
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v98 = swift_slowAlloc(42LL, -1LL);
    uint64_t v134 = swift_slowAlloc(128LL, -1LL);
    uint64_t v139 = v134;
    *(_DWORD *)uint64_t v98 = 136446978;
    unint64_t v130 = (uint64_t *)v95;
    swift_bridgeObjectRetain(a10);
    uint64_t v138 = sub_10017C4C4(v123, a10, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease_n(a10, 3LL);
    *(_WORD *)(v98 + 12) = 2082;
    uint64_t v138 = v93;
    swift_errorRetain(v93);
    uint64_t v99 = sub_100007578(&qword_100251D70);
    int v121 = v97;
    uint64_t v100 = String.init<A>(describing:)(&v138, v99);
    unint64_t v102 = v101;
    uint64_t v138 = sub_10017C4C4(v100, v101, &v139);
    uint64_t v120 = &v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v98 + 14, v98 + 22);
    swift_bridgeObjectRelease(v102);
    swift_errorRelease(v93);
    swift_errorRelease(v93);
    *(_WORD *)(v98 + 22) = 2082;
    uint64_t v103 = sub_1000077B8( &qword_100251D78,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v104 = v127;
    uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(v59, v103);
    unint64_t v107 = v106;
    uint64_t v138 = sub_10017C4C4(v105, v106, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v98 + 24, v98 + 32);
    swift_bridgeObjectRelease(v107);
    uint64_t v108 = v125;
    v125(v104, v59);
    *(_WORD *)(v98 + 32) = 2082;
    uint64_t v109 = v77;
    uint64_t v110 = v108;
    uint64_t v111 = v124;
    uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter(v66, v103);
    unint64_t v114 = v113;
    uint64_t v138 = sub_10017C4C4(v112, v113, &v139);
    char v67 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v120, v98 + 34, v98 + 42);
    swift_bridgeObjectRelease(v114);
    uint64_t v115 = v110;
    unint64_t v77 = v109;
    unint64_t v90 = a10;
    v115(v111, v66);
    id v95 = (os_log_s *)v130;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v130,  (os_log_type_t)v121,  "%{public}s error: %{public}s (retrying, now=%{public}s, deadline=%{public}s",  (uint8_t *)v98,  0x2Au);
    uint64_t v116 = v134;
    swift_arrayDestroy(v134, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1LL, -1LL);
    swift_slowDealloc(v98, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a10, 2LL);
    swift_errorRelease(v93);
    swift_errorRelease(v93);
    uint64_t v117 = v125;
    v125(v92, v59);
    v117(v124, v59);
  }

  if (__OFADD__(v122, 1LL))
  {
    __break(1u);
  }

  else
  {
    a19( (uint64_t)v77,  v123,  v90,  a12,  a13,  a14,  a15,  v122 + 1,  a9,  v136,  a16,  a17,  (void (*)(void))v131,  v135);
    swift_errorRelease(v133);
    uint64_t v118 = v125;
    v125(v126, v66);
    v118(v67, v66);
  }

void sub_100057988( char *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6, char *a7, uint64_t a8, double a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v124 = a6;
  uint64_t v125 = (void (*)(char *))a5;
  uint64_t v126 = a4;
  id v123 = a2;
  uint64_t v122 = type metadata accessor for Date(0LL);
  uint64_t v127 = *(void *)(v122 - 8);
  uint64_t v27 = __chkstk_darwin(v122, v26);
  uint64_t v116 = (char *)&v110 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v117 = (char *)&v110 - v31;
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v118 = (char *)&v110 - v34;
  uint64_t v36 = __chkstk_darwin(v33, v35);
  uint64_t v119 = (char *)&v110 - v37;
  __chkstk_darwin(v36, v38);
  uint64_t v40 = (char *)&v110 - v39;
  uint64_t v115 = sub_1000076A4(&qword_100251D70);
  uint64_t v41 = type metadata accessor for Result(0LL, a19);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v120 = (uint64_t *)((char *)&v110 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v44, v46);
  uint64_t v48 = (void **)((char *)&v110 - v47);
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  int v121 = a1;
  v49((char *)&v110 - v47, (uint64_t)a1, v41);
  if (swift_getEnumCaseMultiPayload(v48, v41) == 1)
  {
    uint64_t v113 = a8;
    unint64_t v114 = (os_log_s *)v42;
    uint64_t v111 = a19;
    int v121 = a7;
    uint64_t v50 = *v48;
    uint64_t v51 = sub_100007578(&qword_100256C10);
    uint64_t inited = swift_initStackObject(v51, &v132);
    *(_OWORD *)(inited + 16) = xmmword_1001DE420;
    unint64_t v130 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldRetryAttemptCount);
    uint64_t v131 = v53;
    AnyHashable.init<A>(_:)(&v130, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Int;
    uint64_t v112 = a3;
    *(void *)(inited + 72) = a3;
    unint64_t v130 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldTotalRetryDuration);
    uint64_t v131 = v54;
    uint64_t v55 = AnyHashable.init<A>(_:)(&v130, &type metadata for String, &protocol witness table for String);
    Date.init()(v55);
    double v56 = Date.timeIntervalSince(_:)(v126);
    double v57 = *(void (**)(char *, uint64_t))(v127 + 8);
    uint64_t v58 = v122;
    v57(v40, v122);
    *(void *)(inited + 168) = &type metadata for Double;
    *(double *)(inited + 144) = v56;
    unint64_t v59 = sub_10000BE44(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v59);
    id v61 = v123;
    [v123 addMetrics:isa];

    id v62 = (void *)objc_opt_self(&OBJC_CLASS___SecurityAnalyticsReporterRTC);
    uint64_t v63 = (void *)_convertErrorToNSError(_:)(v50);
    [v62 sendMetricWithEvent:v61 success:0 error:v63];

    uint64_t v64 = (uint64_t)v50;
    swift_errorRetain(v50);
    char v65 = _s18TrustedPeersHelper21RetryingCKCodeServiceC14retryableError5errorSbs0H0_pSg_tFZ_0(v50);
    uint64_t v66 = swift_errorRelease(v50);
    if ((v65 & 1) == 0)
    {
LABEL_11:
      unint64_t v77 = v120;
      *uint64_t v120 = v50;
      swift_storeEnumTagMultiPayload((char *)v77, v41, 1LL);
      swift_errorRetain(v50);
      v125((char *)v77);
      swift_errorRelease(v50);
      (*((void (**)(void *, uint64_t))v114 + 1))((char *)v77, v41);
      return;
    }

    char v67 = v119;
    Date.init()(v66);
    swift_errorRetain(v50);
    swift_errorRetain(v50);
    char v68 = (void *)_convertErrorToNSError(_:)(v50);
    [v68 cuttlefishRetryAfter];
    double v70 = v69;

    swift_errorRelease(v50);
    swift_errorRelease(v50);
    id v71 = (void *)_convertErrorToNSError(_:)(v50);
    double v72 = CKRetryAfterSecondsForError();

    if (v70 < a9) {
      double v73 = a9;
    }
    else {
      double v73 = v70;
    }
    if (v73 > v72) {
      double v74 = v73;
    }
    else {
      double v74 = v72;
    }
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
    v75(v40, v67, v58);
    uint64_t v76 = v118;
    Date.init(timeInterval:since:)(v40, v74);
    if (Date.compare(_:)(v121) == 1)
    {
      v57(v76, v58);
      v57(v67, v58);
      goto LABEL_11;
    }

    [(id)objc_opt_self(NSThread) sleepForTimeInterval:v74];
    if (qword_100250BD0 != -1) {
      swift_once(&qword_100250BD0, sub_10004CF5C);
    }
    uint64_t v87 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v87, (uint64_t)qword_100251830);
    v75(v117, v67, v58);
    uint64_t v88 = v116;
    v75(v116, v121, v58);
    swift_errorRetain(v64);
    swift_bridgeObjectRetain(a10);
    swift_errorRetain(v64);
    uint64_t v89 = swift_bridgeObjectRetain(a10);
    unint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.info.getter();
    LODWORD(v127) = v91;
    id v92 = a10;
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v93 = swift_slowAlloc(42LL, -1LL);
      uint64_t v120 = (void *)swift_slowAlloc(128LL, -1LL);
      unint64_t v130 = v120;
      *(_DWORD *)uint64_t v93 = 136446978;
      unint64_t v114 = v90;
      swift_bridgeObjectRetain(a10);
      uint64_t v129 = sub_10017C4C4(v113, (unint64_t)a10, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v93 + 4, v93 + 12);
      swift_bridgeObjectRelease_n(a10, 3LL);
      *(_WORD *)(v93 + 12) = 2082;
      uint64_t v129 = v64;
      swift_errorRetain(v64);
      id v123 = a10;
      uint64_t v94 = String.init<A>(describing:)(&v129, v115);
      unint64_t v96 = v95;
      uint64_t v129 = sub_10017C4C4(v94, v95, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v93 + 14, v93 + 22);
      swift_bridgeObjectRelease(v96);
      swift_errorRelease(v64);
      swift_errorRelease(v64);
      *(_WORD *)(v93 + 22) = 2082;
      uint64_t v97 = v58;
      uint64_t v98 = sub_1000077B8( &qword_100251D78,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v99 = v117;
      uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter(v97, v98);
      unint64_t v102 = v101;
      uint64_t v129 = sub_10017C4C4(v100, v101, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v93 + 24, v93 + 32);
      swift_bridgeObjectRelease(v102);
      v57(v99, v97);
      *(_WORD *)(v93 + 32) = 2082;
      uint64_t v103 = v116;
      uint64_t v104 = v97;
      uint64_t v105 = v98;
      uint64_t v58 = v97;
      char v67 = v119;
      uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter(v104, v105);
      unint64_t v108 = v107;
      uint64_t v129 = sub_10017C4C4(v106, v107, (uint64_t *)&v130);
      id v92 = v123;
      uint64_t v76 = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v93 + 34, v93 + 42);
      swift_bridgeObjectRelease(v108);
      v57(v103, v58);
      unint64_t v90 = v114;
      _os_log_impl( (void *)&_mh_execute_header,  v114,  (os_log_type_t)v127,  "%{public}s error: %{public}s (retrying, now=%{public}s, deadline=%{public}s",  (uint8_t *)v93,  0x2Au);
      uint64_t v109 = v120;
      swift_arrayDestroy(v120, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a10, 2LL);
      swift_errorRelease(v64);
      swift_errorRelease(v64);
      v57(v117, v58);
      v57(v88, v58);
    }

    if (__OFADD__(v112, 1LL))
    {
      __break(1u);
    }

    else
    {
      RetryingCKCodeService.invokeRetry<A, B>(deadline:minimumDelay:functionName:deviceSessionID:flowID:attemptNumber:startTime:operationCreator:completion:)( v121,  v113,  v92,  a12,  a13,  a14,  a15,  v112 + 1,  a9,  v126,  a16,  a17,  v125,  v124,  a18,  v111,  a20,  a21);
      swift_errorRelease(v64);
      v57(v76, v58);
      v57(v67, v58);
    }
  }

  else
  {
    uint64_t v78 = sub_100007578(&qword_100256C10);
    uint64_t v79 = swift_initStackObject(v78, &v128);
    *(_OWORD *)(v79 + 16) = xmmword_1001DE420;
    unint64_t v130 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldRetryAttemptCount);
    uint64_t v131 = v80;
    AnyHashable.init<A>(_:)(&v130, &type metadata for String, &protocol witness table for String);
    *(void *)(v79 + 96) = &type metadata for Int;
    *(void *)(v79 + 72) = a3;
    unint64_t v130 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(kSecurityRTCFieldTotalRetryDuration);
    uint64_t v131 = v81;
    uint64_t v82 = AnyHashable.init<A>(_:)(&v130, &type metadata for String, &protocol witness table for String);
    Date.init()(v82);
    double v83 = Date.timeIntervalSince(_:)(v126);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v40, v122);
    *(void *)(v79 + 168) = &type metadata for Double;
    *(double *)(v79 + 144) = v83;
    unint64_t v84 = sub_10000BE44(v79);
    Class v85 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v84);
    id v86 = v123;
    [v123 addMetrics:v85];

    [(id)objc_opt_self(SecurityAnalyticsReporterRTC) sendMetricWithEvent:v86 success:1 error:0];
    v125(v121);
    (*(void (**)(void **, uint64_t))(v42 + 8))(v48, v41);
  }

uint64_t sub_100058334(void *a1, uint64_t a2)
{
  return CKCodeService.add<A, B>(_:)(a1);
}

uint64_t sub_100058388(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t RetryingCKCodeService.retry<A, B>(functionName:deviceSessionID:flowID:operationCreator:completion:)( uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t (*a7)(void), uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  unint64_t v38 = a6;
  uint64_t v36 = a8;
  uint64_t v37 = a5;
  uint64_t v34 = a7;
  unint64_t v35 = a4;
  __int128 v32 = a10;
  __int128 v33 = a9;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  uint64_t v24 = (char *)&v32 - v23;
  uint64_t v26 = __chkstk_darwin(v22, v25);
  uint64_t v28 = (char *)&v32 - v27;
  Date.init()(v26);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v20, v28, v15);
  uint64_t v29 = Date.init(timeInterval:since:)(v20, 30.0);
  Date.init()(v29);
  RetryingCKCodeService.invokeRetry<A, B>(deadline:minimumDelay:functionName:deviceSessionID:flowID:attemptNumber:startTime:operationCreator:completion:)( (unint64_t)v24,  a1,  a2,  a3,  v35,  v37,  v38,  1LL,  5.0,  (uint64_t)v20,  v34,  v36,  v33,  *((uint64_t *)&v33 + 1),  v32,  *((uint64_t *)&v32 + 1),  a11,  a12);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v16 + 8);
  v30(v20, v15);
  v30(v24, v15);
  return ((uint64_t (*)(char *, uint64_t))v30)(v28, v15);
}

uint64_t RetryingCKCodeService.reset(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  unint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  unint64_t v60 = (char *)&v52 - v12;
  uint64_t v13 = type metadata accessor for ResetRequest(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  __int128 v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(v13 + 44);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  unint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for ResetRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235C88, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for ResetRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_10004E6B8( v48,  0xD000000000000014LL,  (void *)0x80000001001F66D0LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_10006007C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_100058938(uint64_t a1)
{
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100251E90);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for ResetRequest);
  uint64_t v10 = type metadata accessor for ResetRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.ResetOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100251E90);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x7465736572LL, 0xE500000000000000LL, v6);
  sub_100041590((uint64_t)v9, (uint64_t *)&unk_100251E90);
  return v12;
}

uint64_t RetryingCKCodeService.establish(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v60 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v62 = (char *)&v53 - v11;
  __chkstk_darwin(v10, v12);
  id v61 = (char *)&v53 - v13;
  uint64_t v14 = type metadata accessor for EstablishRequest(0LL);
  uint64_t v55 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v56 = v16;
  uint64_t v57 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100007578(&qword_100257000);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v53 - v23;
  uint64_t v25 = type metadata accessor for Metrics(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (uint64_t *)((char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (uint64_t *)((char *)&v53 - v32);
  uint64_t v34 = *(int *)(v14 + 20);
  uint64_t v58 = a1;
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = v35
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v65,  0LL,  0LL);
  sub_10000FC68(v36, (uint64_t)v24, &qword_100257000);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v37(v24, 1LL, v25) == 1)
  {
    *uint64_t v33 = 0LL;
    v33[1] = 0xE000000000000000LL;
    v33[2] = 0LL;
    v33[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v24, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v24, (uint64_t)v33, type metadata accessor for Metrics);
  }

  unint64_t v38 = v33[3];
  uint64_t v54 = v33[2];
  swift_bridgeObjectRetain(v38);
  sub_100060034((uint64_t)v33);
  uint64_t v39 = v35
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v64,  0LL,  0LL);
  sub_10000FC68(v39, (uint64_t)v21, &qword_100257000);
  if (v37(v21, 1LL, v25) == 1)
  {
    *uint64_t v30 = 0LL;
    v30[1] = 0xE000000000000000LL;
    v30[2] = 0LL;
    v30[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v21, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v21, (uint64_t)v30, type metadata accessor for Metrics);
  }

  uint64_t v40 = *v30;
  unint64_t v41 = v30[1];
  swift_bridgeObjectRetain(v41);
  sub_100060034((uint64_t)v30);
  uint64_t v42 = v57;
  sub_10004164C(v58, v57, type metadata accessor for EstablishRequest);
  uint64_t v43 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v44 = (v43 + 16) & ~v43;
  uint64_t v45 = swift_allocObject(&unk_100235CB0, v44 + v56, v43 | 7);
  uint64_t v46 = sub_100041608(v42, v45 + v44, type metadata accessor for EstablishRequest);
  uint64_t v47 = v61;
  Date.init()(v46);
  uint64_t v48 = v63;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v8, v47, v4);
  unint64_t v49 = (unint64_t)v62;
  uint64_t v50 = Date.init(timeInterval:since:)(v8, 30.0);
  Date.init()(v50);
  sub_10004EEA0( v49,  0xD000000000000018LL,  (void *)0x80000001001F66F0LL,  v54,  v38,  v40,  v41,  1LL,  5.0,  (uint64_t)v8,  (uint64_t (*)(void))sub_10006009C,  v45,  v60,  v59);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v8, v4);
  v51((char *)v49, v4);
  v51(v47, v4);
  swift_bridgeObjectRelease(v41);
  swift_release(v45);
  return swift_bridgeObjectRelease(v38);
}

uint64_t sub_100058E74(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251E80);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for EstablishRequest);
  uint64_t v10 = type metadata accessor for EstablishRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.EstablishOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251E80);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x73696C6261747365LL, 0xE900000000000068LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251E80);
  return v12;
}

uint64_t RetryingCKCodeService.joinWithVoucher(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v60 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v62 = (char *)&v53 - v11;
  __chkstk_darwin(v10, v12);
  id v61 = (char *)&v53 - v13;
  uint64_t v14 = type metadata accessor for JoinWithVoucherRequest(0LL);
  uint64_t v55 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v56 = v16;
  uint64_t v57 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100007578(&qword_100257000);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v53 - v23;
  uint64_t v25 = type metadata accessor for Metrics(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (uint64_t *)((char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (uint64_t *)((char *)&v53 - v32);
  uint64_t v34 = *(int *)(v14 + 20);
  uint64_t v58 = a1;
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = v35
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v65,  0LL,  0LL);
  sub_10000FC68(v36, (uint64_t)v24, &qword_100257000);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v37(v24, 1LL, v25) == 1)
  {
    *uint64_t v33 = 0LL;
    v33[1] = 0xE000000000000000LL;
    v33[2] = 0LL;
    v33[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v24, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v24, (uint64_t)v33, type metadata accessor for Metrics);
  }

  unint64_t v38 = v33[3];
  uint64_t v54 = v33[2];
  swift_bridgeObjectRetain(v38);
  sub_100060034((uint64_t)v33);
  uint64_t v39 = v35
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v64,  0LL,  0LL);
  sub_10000FC68(v39, (uint64_t)v21, &qword_100257000);
  if (v37(v21, 1LL, v25) == 1)
  {
    *uint64_t v30 = 0LL;
    v30[1] = 0xE000000000000000LL;
    v30[2] = 0LL;
    v30[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v21, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v21, (uint64_t)v30, type metadata accessor for Metrics);
  }

  uint64_t v40 = *v30;
  unint64_t v41 = v30[1];
  swift_bridgeObjectRetain(v41);
  sub_100060034((uint64_t)v30);
  uint64_t v42 = v57;
  sub_10004164C(v58, v57, type metadata accessor for JoinWithVoucherRequest);
  uint64_t v43 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v44 = (v43 + 16) & ~v43;
  uint64_t v45 = swift_allocObject(&unk_100235CD8, v44 + v56, v43 | 7);
  uint64_t v46 = sub_100041608(v42, v45 + v44, type metadata accessor for JoinWithVoucherRequest);
  uint64_t v47 = v61;
  Date.init()(v46);
  uint64_t v48 = v63;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v8, v47, v4);
  unint64_t v49 = (unint64_t)v62;
  uint64_t v50 = Date.init(timeInterval:since:)(v8, 30.0);
  Date.init()(v50);
  sub_10004F688( v49,  0xD00000000000001ELL,  (void *)0x80000001001F6710LL,  v54,  v38,  v40,  v41,  1LL,  5.0,  (uint64_t)v8,  (uint64_t (*)(void))sub_1000600FC,  v45,  v60,  v59);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v8, v4);
  v51((char *)v49, v4);
  v51(v47, v4);
  swift_bridgeObjectRelease(v41);
  swift_release(v45);
  return swift_bridgeObjectRelease(v38);
}

uint64_t sub_1000593B8(uint64_t a1)
{
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100251E70);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for JoinWithVoucherRequest);
  uint64_t v10 = type metadata accessor for JoinWithVoucherRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.JoinWithVoucherOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100251E70);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x687469576E696F6ALL, 0xEF72656863756F56LL, v6);
  sub_100041590((uint64_t)v9, (uint64_t *)&unk_100251E70);
  return v12;
}

uint64_t RetryingCKCodeService.updateTrust(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  uint64_t v53 = *(void *)(updated - 8);
  __chkstk_darwin(updated, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(updated + 48);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for UpdateTrustRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235D00, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for UpdateTrustRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_10004FE70( v48,  0xD00000000000001ALL,  (void *)0x80000001001F6730LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060388,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_1000598C8(uint64_t a1)
{
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100251E60);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for UpdateTrustRequest);
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56LL))(v9, 0LL, 1LL, updated);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.UpdateTrustOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100251E60);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x7254657461647075LL, 0xEB00000000747375LL, v6);
  sub_100041590((uint64_t)v9, (uint64_t *)&unk_100251E60);
  return v12;
}

uint64_t RetryingCKCodeService.setRecoveryKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t v13 = type metadata accessor for SetRecoveryKeyRequest(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(v13 + 48);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for SetRecoveryKeyRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235D28, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for SetRecoveryKeyRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100050658( v48,  0xD00000000000001DLL,  (void *)0x80000001001F6750LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_10006053C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_100059DD4(uint64_t a1)
{
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100251E50);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for SetRecoveryKeyRequest);
  uint64_t v10 = type metadata accessor for SetRecoveryKeyRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.SetRecoveryKeyOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100251E50);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x766F636552746573LL, 0xEE0079654B797265LL, v6);
  sub_100041590((uint64_t)v9, (uint64_t *)&unk_100251E50);
  return v12;
}

uint64_t RetryingCKCodeService.fetchChanges(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  uint64_t v53 = *(void *)(ChangesRequest - 8);
  __chkstk_darwin(ChangesRequest, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(ChangesRequest + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for FetchChangesRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235D50, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for FetchChangesRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100050E40( v48,  0xD00000000000001BLL,  (void *)0x80000001001F6770LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_10006055C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005A2E4(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251E40);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for FetchChangesRequest);
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(ChangesRequest - 8) + 56LL))( v9,  0LL,  1LL,  ChangesRequest);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchChangesOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251E40);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x6168436863746566LL, 0xEC0000007365676ELL, v6);
  sub_100041590((uint64_t)v9, &qword_100251E40);
  return v12;
}

uint64_t RetryingCKCodeService.fetchViableBottles(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t ViableBottlesRequest = type metadata accessor for FetchViableBottlesRequest(0LL);
  uint64_t v53 = *(void *)(ViableBottlesRequest - 8);
  __chkstk_darwin(ViableBottlesRequest, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(ViableBottlesRequest + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for FetchViableBottlesRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235D78, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for FetchViableBottlesRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_10004DED0( v48,  0xD000000000000021LL,  (void *)0x80000001001F6790LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_10006057C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005A7F0(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251E30);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for FetchViableBottlesRequest);
  uint64_t ViableBottlesRequest = type metadata accessor for FetchViableBottlesRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(ViableBottlesRequest - 8) + 56LL))( v9,  0LL,  1LL,  ViableBottlesRequest);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchViableBottlesOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251E30);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000012LL, 0x80000001001F6CE0LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251E30);
  return v12;
}

uint64_t RetryingCKCodeService.fetchPolicyDocuments(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t PolicyDocumentsRequest = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  uint64_t v53 = *(void *)(PolicyDocumentsRequest - 8);
  __chkstk_darwin(PolicyDocumentsRequest, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(PolicyDocumentsRequest + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for FetchPolicyDocumentsRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235DA0, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for FetchPolicyDocumentsRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_10004D6E8( v48,  0xD000000000000023LL,  (void *)0x80000001001F67C0LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_10006059C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005ACF8(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251E20);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for FetchPolicyDocumentsRequest);
  uint64_t PolicyDocumentsRequest = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(PolicyDocumentsRequest - 8) + 56LL))( v9,  0LL,  1LL,  PolicyDocumentsRequest);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchPolicyDocumentsOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251E20);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000014LL, 0x80000001001F6CC0LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251E20);
  return v12;
}

uint64_t RetryingCKCodeService.getRepairAction(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  uint64_t v53 = *(void *)(RepairActionRequest - 8);
  __chkstk_darwin(RepairActionRequest, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(RepairActionRequest + 36);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for GetRepairActionRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235DC8, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for GetRepairActionRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100051628( v48,  0xD00000000000001ELL,  (void *)0x80000001001F67F0LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_1000606E0,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005B200(uint64_t a1)
{
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100251E10);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for GetRepairActionRequest);
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(RepairActionRequest - 8) + 56LL))( v9,  0LL,  1LL,  RepairActionRequest);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.GetRepairActionOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100251E10);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x6961706552746567LL, 0xEF6E6F6974634172LL, v6);
  sub_100041590((uint64_t)v9, (uint64_t *)&unk_100251E10);
  return v12;
}

uint64_t RetryingCKCodeService.getSupportAppInfo(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t SupportAppInfoRequest = type metadata accessor for GetSupportAppInfoRequest(0LL);
  uint64_t v53 = *(void *)(SupportAppInfoRequest - 8);
  __chkstk_darwin(SupportAppInfoRequest, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(SupportAppInfoRequest + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for GetSupportAppInfoRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235DF0, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for GetSupportAppInfoRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100051E10( v48,  0xD000000000000020LL,  (void *)0x80000001001F6810LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060700,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005B710(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251E00);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for GetSupportAppInfoRequest);
  uint64_t SupportAppInfoRequest = type metadata accessor for GetSupportAppInfoRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(SupportAppInfoRequest - 8) + 56LL))( v9,  0LL,  1LL,  SupportAppInfoRequest);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.GetSupportAppInfoOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251E00);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000011LL, 0x80000001001F6CA0LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251E00);
  return v12;
}

uint64_t RetryingCKCodeService.resetAccountCdpcontents(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t v13 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(v13 + 44);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for ResetAccountCDPContentsRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235E18, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for ResetAccountCDPContentsRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_1000525F8( v48,  0xD000000000000026LL,  (void *)0x80000001001F6840LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060854,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005BC18(uint64_t a1)
{
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100251DF0);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for ResetAccountCDPContentsRequest);
  uint64_t v10 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.ResetAccountCdpcontentsOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100251DF0);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000017LL, 0x80000001001F6C80LL, v6);
  sub_100041590((uint64_t)v9, (uint64_t *)&unk_100251DF0);
  return v12;
}

uint64_t RetryingCKCodeService.addCustodianRecoveryKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v60 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v62 = (char *)&v53 - v11;
  __chkstk_darwin(v10, v12);
  id v61 = (char *)&v53 - v13;
  uint64_t v14 = type metadata accessor for AddCustodianRecoveryKeyRequest(0LL);
  uint64_t v55 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v56 = v16;
  uint64_t v57 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100007578(&qword_100257000);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v53 - v23;
  uint64_t v25 = type metadata accessor for Metrics(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (uint64_t *)((char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (uint64_t *)((char *)&v53 - v32);
  uint64_t v34 = *(int *)(v14 + 20);
  uint64_t v58 = a1;
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = v35
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v65,  0LL,  0LL);
  sub_10000FC68(v36, (uint64_t)v24, &qword_100257000);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v37(v24, 1LL, v25) == 1)
  {
    *uint64_t v33 = 0LL;
    v33[1] = 0xE000000000000000LL;
    v33[2] = 0LL;
    v33[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v24, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v24, (uint64_t)v33, type metadata accessor for Metrics);
  }

  unint64_t v38 = v33[3];
  uint64_t v54 = v33[2];
  swift_bridgeObjectRetain(v38);
  sub_100060034((uint64_t)v33);
  uint64_t v39 = v35
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v64,  0LL,  0LL);
  sub_10000FC68(v39, (uint64_t)v21, &qword_100257000);
  if (v37(v21, 1LL, v25) == 1)
  {
    *uint64_t v30 = 0LL;
    v30[1] = 0xE000000000000000LL;
    v30[2] = 0LL;
    v30[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v21, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v21, (uint64_t)v30, type metadata accessor for Metrics);
  }

  uint64_t v40 = *v30;
  unint64_t v41 = v30[1];
  swift_bridgeObjectRetain(v41);
  sub_100060034((uint64_t)v30);
  uint64_t v42 = v57;
  sub_10004164C(v58, v57, type metadata accessor for AddCustodianRecoveryKeyRequest);
  uint64_t v43 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v44 = (v43 + 16) & ~v43;
  uint64_t v45 = swift_allocObject(&unk_100235E40, v44 + v56, v43 | 7);
  uint64_t v46 = sub_100041608(v42, v45 + v44, type metadata accessor for AddCustodianRecoveryKeyRequest);
  uint64_t v47 = v61;
  Date.init()(v46);
  uint64_t v48 = v63;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v8, v47, v4);
  unint64_t v49 = (unint64_t)v62;
  uint64_t v50 = Date.init(timeInterval:since:)(v8, 30.0);
  Date.init()(v50);
  sub_100052DE0( v49,  0xD000000000000026LL,  (void *)0x80000001001F6870LL,  v54,  v38,  v40,  v41,  1LL,  5.0,  (uint64_t)v8,  (uint64_t (*)(void))sub_100060900,  v45,  v60,  v59);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v8, v4);
  v51((char *)v49, v4);
  v51(v47, v4);
  swift_bridgeObjectRelease(v41);
  swift_release(v45);
  return swift_bridgeObjectRelease(v38);
}

uint64_t sub_10005C15C(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251DE0);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for AddCustodianRecoveryKeyRequest);
  uint64_t v10 = type metadata accessor for AddCustodianRecoveryKeyRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.AddCustodianRecoveryKeyOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251DE0);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000017LL, 0x80000001001F6C60LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251DE0);
  return v12;
}

uint64_t RetryingCKCodeService.fetchRecoverableTlkshares(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t RecoverableTLKSharesRequest = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  uint64_t v53 = *(void *)(RecoverableTLKSharesRequest - 8);
  __chkstk_darwin(RecoverableTLKSharesRequest, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(RecoverableTLKSharesRequest + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for FetchRecoverableTLKSharesRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235E68, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for FetchRecoverableTLKSharesRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_1000535C8( v48,  0xD000000000000028LL,  (void *)0x80000001001F68A0LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060A4C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005C664(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251DD0);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for FetchRecoverableTLKSharesRequest);
  uint64_t RecoverableTLKSharesRequest = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(RecoverableTLKSharesRequest - 8) + 56LL))( v9,  0LL,  1LL,  RecoverableTLKSharesRequest);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchRecoverableTlksharesOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251DD0);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000019LL, 0x80000001001F6C40LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251DD0);
  return v12;
}

uint64_t RetryingCKCodeService.removeRecoveryKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t v13 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(v13 + 36);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for RemoveRecoveryKeyRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235E90, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for RemoveRecoveryKeyRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100053DB0( v48,  0xD000000000000020LL,  (void *)0x80000001001F68D0LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060C30,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005CB6C(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251DC0);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for RemoveRecoveryKeyRequest);
  uint64_t v10 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.RemoveRecoveryKeyOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251DC0);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000011LL, 0x80000001001F6C20LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251DC0);
  return v12;
}

uint64_t RetryingCKCodeService.performAtoprvactions(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t v13 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(v13 + 20);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for PerformATOPRVActionsRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235EB8, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for PerformATOPRVActionsRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100054598( v48,  0xD000000000000023LL,  (void *)0x80000001001F6900LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060D5C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005D074(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251DB0);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for PerformATOPRVActionsRequest);
  uint64_t v10 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.PerformAtoprvactionsOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251DB0);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000014LL, 0x80000001001F6C00LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251DB0);
  return v12;
}

uint64_t RetryingCKCodeService.fetchCurrentItem(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  uint64_t v53 = *(void *)(Request - 8);
  __chkstk_darwin(Request, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(Request + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for CurrentItemFetchRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235EE0, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for CurrentItemFetchRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100054D80( v48,  0xD00000000000001FLL,  (void *)0x80000001001F6930LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060D7C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005D57C(uint64_t a1)
{
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100251DA0);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for CurrentItemFetchRequest);
  uint64_t Request = type metadata accessor for CurrentItemFetchRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(Request - 8) + 56LL))(v9, 0LL, 1LL, Request);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchCurrentItemOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100251DA0);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000010LL, 0x80000001001F6BE0LL, v6);
  sub_100041590((uint64_t)v9, (uint64_t *)&unk_100251DA0);
  return v12;
}

uint64_t RetryingCKCodeService.fetchPcsidentityByPublicKey(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  uint64_t v53 = *(void *)(Request - 8);
  __chkstk_darwin(Request, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(Request + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for DirectPCSIdentityFetchRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235F08, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for DirectPCSIdentityFetchRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100055568( v48,  0xD00000000000002ALL,  (void *)0x80000001001F6950LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_100060EC8,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005DA84(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251D90);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for DirectPCSIdentityFetchRequest);
  uint64_t Request = type metadata accessor for DirectPCSIdentityFetchRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(Request - 8) + 56LL))(v9, 0LL, 1LL, Request);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.FetchPcsidentityByPublicKeyOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251D90);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD00000000000001BLL, 0x80000001001F6BC0LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251D90);
  return v12;
}

uint64_t RetryingCKCodeService.performCkserverUnreadableDataRemoval(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v62 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56, v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v60 = (char *)&v52 - v12;
  uint64_t v13 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v54 = v15;
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100257000);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (uint64_t *)((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - v31);
  uint64_t v33 = *(int *)(v13 + 24);
  uint64_t v57 = a1;
  uint64_t v34 = a1 + v33;
  sub_10000FC68(a1 + v33, (uint64_t)v23, &qword_100257000);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1LL, v24) == 1)
  {
    void *v32 = 0LL;
    v32[1] = 0xE000000000000000LL;
    v32[2] = 0LL;
    v32[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v23, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v23, (uint64_t)v32, type metadata accessor for Metrics);
  }

  uint64_t v37 = v32[2];
  unint64_t v36 = v32[3];
  swift_bridgeObjectRetain(v36);
  sub_100060034((uint64_t)v32);
  sub_10000FC68(v34, (uint64_t)v20, &qword_100257000);
  if (v35(v20, 1LL, v24) == 1)
  {
    uint64_t *v29 = 0LL;
    v29[1] = 0xE000000000000000LL;
    _OWORD v29[2] = 0LL;
    v29[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v20, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v20, (uint64_t)v29, type metadata accessor for Metrics);
  }

  uint64_t v38 = *v29;
  unint64_t v39 = v29[1];
  swift_bridgeObjectRetain(v39);
  sub_100060034((uint64_t)v29);
  uint64_t v40 = v55;
  sub_10004164C(v57, v55, type metadata accessor for RemoveUnreadableCKServerDataRequest);
  uint64_t v41 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = swift_allocObject(&unk_100235F30, v42 + v54, v41 | 7);
  uint64_t v44 = sub_100041608(v40, v43 + v42, type metadata accessor for RemoveUnreadableCKServerDataRequest);
  uint64_t v45 = v60;
  Date.init()(v44);
  uint64_t v46 = v62;
  uint64_t v47 = v56;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v7, v45, v56);
  unint64_t v48 = (unint64_t)v61;
  uint64_t v49 = Date.init(timeInterval:since:)(v7, 30.0);
  Date.init()(v49);
  sub_100055D50( v48,  0xD000000000000033LL,  (void *)0x80000001001F6980LL,  v37,  v36,  v38,  v39,  1LL,  5.0,  (uint64_t)v7,  (uint64_t (*)(void))sub_10006100C,  v43,  v59,  v58);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v7, v47);
  v50((char *)v48, v47);
  v50(v45, v47);
  swift_bridgeObjectRelease(v39);
  swift_release(v43);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_10005DF8C(uint64_t a1)
{
  uint64_t v2 = sub_100007578(&qword_100251D80);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_10004164C(a1, (uint64_t)&v14 - v8, type metadata accessor for RemoveUnreadableCKServerDataRequest);
  uint64_t v10 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CuttlefishAPI.PerformCkserverUnreadableDataRemovalOperation(0LL));
  sub_10000FC68((uint64_t)v9, (uint64_t)v6, &qword_100251D80);
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000024LL, 0x80000001001F6B90LL, v6);
  sub_100041590((uint64_t)v9, &qword_100251D80);
  return v12;
}

uint64_t RetryingCKCodeService.deinit()
{
  return v0;
}

uint64_t RetryingCKCodeService.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t sub_10005E0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.reset(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.establish(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.joinWithVoucher(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.updateTrust(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.setRecoveryKey(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.addCustodianRecoveryKey(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.fetchChanges(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.fetchViableBottles(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.fetchRecoverableTlkshares(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.fetchPolicyDocuments(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.getRepairAction(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.getSupportAppInfo(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.resetAccountCdpcontents(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.removeRecoveryKey(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.performAtoprvactions(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.fetchPcsidentityByPublicKey(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.fetchCurrentItem(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RetryingCKCodeService.performCkserverUnreadableDataRemoval(_:completion:)(a1, a2, a3);
}

uint64_t sub_10005E328(void *a1)
{
  return sub_10005E548(a1) & 1;
}

uint64_t sub_10005E364(void *a1)
{
  *(void *)(v1 + 24) = a1;
  id v2 = a1;
  id v3 = [v2 options];
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 setApplicationBundleIdentifierOverride:v4];

  uint64_t v5 = *(void **)(v1 + 24);
  id v6 = [v5 privateCloudDatabase];
  id v7 = v5;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = objc_msgSend(v7, "codeServiceWithName:databaseScope:", v8, objc_msgSend(v6, "databaseScope"));

  *(void *)(v1 + 16) = v9;
  return v1;
}

id sub_10005E480()
{
  id v1 = [*(id *)(v0 + 24) options];
  id v2 = [v1 accountOverrideInfo];

  if (v2)
  {
    id v3 = [v2 altDSID];

    if (v3)
    {
      id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t sub_10005E528()
{
  return CKCodeService.add<A, B>(_:)();
}

uint64_t sub_10005E548(void *a1)
{
  id v3 = [*(id *)(v1 + 24) options];
  id v4 = [v3 accountOverrideInfo];

  if (v4)
  {
    id v5 = [v4 altDSID];

    if (v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      unint64_t v8 = v7;

      id v9 = [a1 altDSID];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      if (v10 == v6 && v12 == v8)
      {
        swift_bridgeObjectRelease_n(v8, 2LL);
        return 1LL;
      }

      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v6, v8, 0LL);
      swift_bridgeObjectRelease(v12);
      if ((v14 & 1) != 0)
      {
        swift_bridgeObjectRelease(v8);
        return 1LL;
      }

      if (qword_100250BD0 != -1) {
        swift_once(&qword_100250BD0, sub_10004CF5C);
      }
      uint64_t v25 = type metadata accessor for Logger(0LL);
      sub_100006BAC(v25, (uint64_t)qword_100251830);
      id v26 = a1;
      uint64_t v27 = swift_bridgeObjectRetain(v8);
      uint64_t v18 = (void *)Logger.logObject.getter(v27);
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled((os_log_t)v18, v28))
      {

        swift_bridgeObjectRelease_n(v8, 2LL);
        return 0LL;
      }

      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v29 = swift_slowAlloc(64LL, -1LL);
      uint64_t v35 = v29;
      *(_DWORD *)uint64_t v20 = 136446466;
      swift_bridgeObjectRetain(v8);
      uint64_t v34 = sub_10017C4C4(v6, v8, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(v8, 3LL);
      *(_WORD *)(v20 + 12) = 2082;
      id v30 = [v26 altDSID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      unint64_t v33 = v32;

      uint64_t v34 = sub_10017C4C4(v31, v33, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v20 + 14, v20 + 22);

      swift_bridgeObjectRelease(v33);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  v28,  "Mismatch between configured CKContainer (altDSID %{public}s and requested user %{public}s",  (uint8_t *)v20,  0x16u);
      swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v24 = (void *)v29;
      goto LABEL_21;
    }
  }

  if (qword_100250BD0 != -1) {
    swift_once(&qword_100250BD0, sub_10004CF5C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v16, (uint64_t)qword_100251830);
  id v17 = a1;
  uint64_t v18 = (void *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled((os_log_t)v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 138543362;
    uint64_t v35 = (uint64_t)v17;
    id v22 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4, v20 + 12);
    *uint64_t v21 = v17;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  v19,  "Mismatch between primary CKContainer and requested user %{public}@",  (uint8_t *)v20,  0xCu);
    uint64_t v23 = sub_100007578(&qword_100250F90);
    swift_arrayDestroy(v21, 1LL, v23);
    uint64_t v24 = v21;
LABEL_21:
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    return 0LL;
  }

  return 0LL;
}

uint64_t sub_10005E9A4()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

void sub_10005E9B4( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  id v85 = a6;
  unint64_t v77 = a7;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  id v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = (uint64_t)(a1 + 11);
  swift_beginAccess(a1 + 11, v84, 0LL, 0LL);
  uint64_t v78 = a1;
  uint64_t v18 = a1[11];
  if (*(void *)(v18 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(v18);
    unint64_t v19 = sub_10000D0B4(a2, (uint64_t)a3, a4, (uint64_t)a5);
    if ((v20 & 1) != 0)
    {
      uint64_t v21 = (char *)*(id *)(*(void *)(v18 + 56) + 8 * v19);
      swift_bridgeObjectRelease(a5);
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v18);
      uint64_t v22 = *(void *)&v21[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
      uint64_t v23 = *(void *)&v21[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
      sub_1000084C4(&v21[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v22);
      uint64_t v24 = *(void *)(v23 + 8);
      id v25 = v85;
      if (((*(uint64_t (**)(id, uint64_t))(v24 + 8))(v85, v22) & 1) != 0)
      {
        id v26 = (void *)v78[9];
        id v27 = [v25 personaUniqueString];
        [v26 prepareThreadForKeychainAPIUseForPersonaIdentifier:v27];

        *unint64_t v77 = (uint64_t)v21;
      }

      else
      {
        unint64_t v61 = sub_100043F74();
        swift_allocError(&type metadata for ContainerError, v61, 0LL, 0LL);
        *(void *)uint64_t v62 = v25;
        *(void *)(v62 + 8) = 0LL;
        *(_BYTE *)(v62 + 16) = 9;
        swift_willThrow(v25);
      }

      return;
    }

    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v18);
  }

  type metadata accessor for ContainerMap();
  os_log_type_t v28 = v17;
  sub_10005EF7C(a2, (uint64_t)a3, a4, a5, (uint64_t)v17);
  if (!v7)
  {
    uint64_t v29 = (void *)a2;
    uint64_t v74 = v14;
    uint64_t v75 = v13;
    id v30 = objc_allocWithZone(&OBJC_CLASS___NSPersistentStoreDescription);
    double v73 = v28;
    URL._bridgeToObjectiveC()(&var18);
    unint64_t v32 = v31;
    id v72 = [v30 initWithURL:v31];

    id v33 = [v85 makeCKContainer];
    uint64_t v34 = type metadata accessor for CuttlefishCKCodeOperationRunner();
    uint64_t v35 = swift_allocObject(v34, 32LL, 7LL);
    sub_10005E364(v33);
    v83[3] = v34;
    v83[4] = &off_100236008;
    v83[0] = v35;
    sub_1000610A0((uint64_t)v83, (uint64_t)v80);
    uint64_t v36 = sub_100006248((uint64_t)v80, v81);
    uint64_t v70 = (uint64_t)&v70;
    __chkstk_darwin(v36, v36);
    uint64_t v38 = (uint64_t *)((char *)&v70 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v39 + 16))(v38);
    uint64_t v40 = *v38;
    v79[3] = v34;
    v79[4] = &off_100236008;
    v79[0] = v40;
    uint64_t v41 = type metadata accessor for RetryingCKCodeService();
    uint64_t v42 = swift_allocObject(v41, 64LL, 7LL);
    uint64_t v43 = sub_100006248((uint64_t)v79, v34);
    uint64_t v71 = 0LL;
    uint64_t v44 = v29;
    __chkstk_darwin(v43, v43);
    uint64_t v46 = (uint64_t *)((char *)&v70 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v47 + 16))(v46);
    uint64_t v48 = sub_10005F3D8(*v46, v42);
    sub_100007600(v79);
    uint64_t v49 = (void *)a4;
    sub_100007600(v80);
    uint64_t v50 = v78;
    uint64_t v51 = v78[8];
    uint64_t v52 = v78[10];
    uint64_t v81 = v41;
    uint64_t v82 = &off_100235F48;
    v80[0] = v48;
    id v53 = objc_allocWithZone((Class)type metadata accessor for Container());
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    id v54 = v72;
    swift_unknownObjectRetain(v52, v55);
    swift_retain(v48);
    id v72 = v44;
    uint64_t v56 = v44;
    uint64_t v57 = v54;
    uint64_t v58 = v54;
    uint64_t v59 = v71;
    uint64_t v60 = sub_1000E7DDC(v56, a3, v49, a5, v58, v51, v52, v80);
    if (v59)
    {

      swift_release(v48);
      sub_100007600(v83);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
    }

    else
    {
      uint64_t v63 = v60;
      swift_beginAccess(v76, v80, 33LL, 0LL);
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRetain(a5);
      id v64 = v63;
      uint64_t v76 = v48;
      uint64_t v65 = (uint64_t)v64;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50[11]);
      v79[0] = v50[11];
      v50[11] = 0x8000000000000000LL;
      sub_10014C498(v65, (uint64_t)v72, (uint64_t)a3, (uint64_t)v49, (uint64_t)a5, isUniquelyReferenced_nonNull_native);
      uint64_t v67 = v50[11];
      v50[11] = v79[0];
      swift_bridgeObjectRelease(a5);
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v67);
      swift_endAccess(v80);
      char v68 = (void *)v50[9];
      id v69 = [v85 personaUniqueString];
      [v68 prepareThreadForKeychainAPIUseForPersonaIdentifier:v69];

      swift_release(v76);
      sub_100007600(v83);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
      *unint64_t v77 = v65;
    }
  }

uint64_t sub_10005EF7C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_100007578(&qword_100251D58);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v36 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v36 - v20;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  swift_bridgeObjectRetain(a2);
  v22._countAndFlagsBits = 45LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  uint64_t v23 = v37;
  swift_bridgeObjectRetain(v37);
  v24._countAndFlagsBits = a3;
  v24._object = a4;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  uint64_t v25 = v37;
  swift_bridgeObjectRetain(v37);
  v26._object = (void *)0x80000001001F6B70LL;
  v26._countAndFlagsBits = 0xD000000000000016LL;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  uint64_t v27 = v37;
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  CFURLRef v29 = SecCopyURLForFileInUserScopedKeychainDirectory((uint64_t)v28);

  if (v29)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

    uint64_t v30 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v18, 0LL, 1LL, v30);
  }

  else
  {
    uint64_t v30 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v18, 1LL, 1LL, v30);
  }

  sub_100061124((uint64_t)v18, (uint64_t)v21);
  sub_10000FC68((uint64_t)v21, (uint64_t)v14, &qword_100251D58);
  type metadata accessor for URL(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v14, 1LL, v30) == 1)
  {
    sub_100041590((uint64_t)v14, &qword_100251D58);
    unint64_t v32 = sub_100043F74();
    uint64_t v33 = swift_allocError(&type metadata for ContainerError, v32, 0LL, 0LL);
    *(_OWORD *)uint64_t v34 = xmmword_1001DEA50;
    *(_BYTE *)(v34 + 16) = 13;
    swift_willThrow(v33);
    return sub_100041590((uint64_t)v21, &qword_100251D58);
  }

  else
  {
    sub_100041590((uint64_t)v21, &qword_100251D58);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(a5, v14, v30);
  }

uint64_t sub_10005F20C()
{
  sub_100007600((void *)(v0 + 24));
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  swift_unknownObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

id sub_10005F250( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, void *a12)
{
  if (a1)
  {
    v16.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v17 = 0LL;
    uint64_t v18 = a9;
    if (a5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  v16.super.Class isa = 0LL;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  uint64_t v18 = a9;
  if (a5)
  {
LABEL_4:
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
    goto LABEL_8;
  }

uint64_t sub_10005F3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[3] = type metadata accessor for CuttlefishCKCodeOperationRunner();
  v24[4] = &off_100236008;
  v24[0] = a1;
  sub_1000610A0((uint64_t)v24, a2 + 16);
  sub_100007620(0LL, &qword_100250FF8, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_1000077B8( &qword_100251000,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v17 = sub_100007578(&qword_100251008);
  uint64_t v18 = sub_1000610E4((unint64_t *)&qword_100251010, &qword_100251008);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v8, v16);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v22);
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000015LL,  0x80000001001DEAC0LL,  v15,  v11,  v7,  0LL);
  sub_100007600(v24);
  *(void *)(a2 + 56) = v19;
  return a2;
}

unint64_t _s18TrustedPeersHelper21RetryingCKCodeServiceC19functionNameToEvent0gH0S2S_tF_0( uint64_t a1, void *a2)
{
  unint64_t v4 = sub_10004D5FC(40LL, 0xE100000000000000LL, a1, (unint64_t)a2);
  if ((v5 & 1) != 0)
  {
    v16._countAndFlagsBits = a1;
    v16._object = a2;
    String.append(_:)(v16);
    return 0xD000000000000013LL;
  }

  else
  {
    unint64_t v6 = v4;
    swift_bridgeObjectRetain(a2);
    uint64_t v7 = String.subscript.getter(15LL, v6, a1, a2);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(a2);
    unint64_t v18 = 0xD000000000000013LL;
    unint64_t v19 = 0x80000001001F66B0LL;
    v17[0] = v7;
    v17[1] = v9;
    v17[2] = v11;
    v17[3] = v13;
    unint64_t v14 = sub_10005FFF0();
    String.append<A>(contentsOf:)(v17, &type metadata for Substring, v14);
    swift_bridgeObjectRelease(v13);
    return v18;
  }

uint64_t _s18TrustedPeersHelper21RetryingCKCodeServiceC14retryableError5errorSbs0H0_pSg_tFZ_0(void *a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    goto LABEL_37;
  }
  uint64_t v47 = a1;
  swift_errorRetain(a1);
  swift_errorRetain(v1);
  uint64_t v2 = sub_100007578(&qword_100251D70);
  uint64_t v3 = sub_100007620(0LL, (unint64_t *)&qword_100251528, &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v46, &v47, v2, v3, 0LL))
  {
    swift_errorRelease(v1);
    goto LABEL_10;
  }

  id v4 = v46;
  id v5 = [v46 domain];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v6 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  else
  {
    uint64_t v12 = v10;
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0LL);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0)
    {
      swift_errorRelease(v1);

LABEL_10:
      swift_errorRelease(v47);
      goto LABEL_13;
    }
  }

  id v14 = [v4 code];
  swift_errorRelease(v1);

  swift_errorRelease(v47);
  if (v14 == (id)-1001LL) {
    return 1LL;
  }
LABEL_13:
  uint64_t v47 = v1;
  swift_errorRetain(v1);
  swift_errorRetain(v1);
  if (!swift_dynamicCast(&v46, &v47, v2, v3, 0LL))
  {
    swift_errorRelease(v1);
LABEL_18:
    swift_errorRelease(v47);
    goto LABEL_21;
  }

  id v15 = v46;
  id v16 = [v46 domain];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  uint64_t v22 = v20;
  if (v17 == v21 && v19 == v20)
  {
    swift_bridgeObjectRelease_n(v19, 2LL);
    goto LABEL_20;
  }

  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v20, 0LL);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) == 0)
  {
    swift_errorRelease(v1);

    goto LABEL_18;
  }

LABEL_20:
  id v24 = [v15 code];
  swift_errorRelease(v1);

  swift_errorRelease(v47);
  if (v24 == (id)-1009LL) {
    return 1LL;
  }
LABEL_21:
  uint64_t v47 = v1;
  swift_errorRetain(v1);
  type metadata accessor for CKError(0LL);
  uint64_t v26 = v25;
  if (swift_dynamicCast(&v46, &v47, v2, v25, 0LL))
  {
    id v27 = v46;
    uint64_t v28 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
    _BridgedStoredNSError.code.getter(&v45, v26, v28);

    uint64_t v29 = v45;
    swift_errorRelease(v47);
    if (v29 == 4) {
      return 1LL;
    }
  }

  else
  {
    swift_errorRelease(v47);
  }

  uint64_t v47 = v1;
  swift_errorRetain(v1);
  if (swift_dynamicCast(&v46, &v47, v2, v26, 0LL))
  {
    id v30 = v46;
    uint64_t v31 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
    _BridgedStoredNSError.code.getter(&v45, v26, v31);

    uint64_t v32 = v45;
    swift_errorRelease(v47);
    if (v32 == 6) {
      return 1LL;
    }
  }

  else
  {
    swift_errorRelease(v47);
  }

  uint64_t v47 = v1;
  swift_errorRetain(v1);
  if (swift_dynamicCast(&v46, &v47, v2, v26, 0LL))
  {
    id v33 = v46;
    uint64_t v34 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
    _BridgedStoredNSError.code.getter(&v45, v26, v34);

    uint64_t v35 = v45;
    swift_errorRelease(v47);
    if (v35 == 7) {
      return 1LL;
    }
  }

  else
  {
    swift_errorRelease(v47);
  }

  uint64_t v47 = v1;
  swift_errorRetain(v1);
  if (!swift_dynamicCast(&v46, &v47, v2, v26, 0LL))
  {
    swift_errorRelease(v47);
    goto LABEL_37;
  }

  id v36 = v46;
  uint64_t v37 = sub_1000077B8( &qword_1002510E0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1001DE258);
  _BridgedStoredNSError.code.getter(&v45, v26, v37);

  uint64_t v38 = v45;
  swift_errorRelease(v47);
  if (v38 == 23) {
    return 1LL;
  }
LABEL_37:
  uint64_t v39 = 1LL;
  if ((sub_10004CFD8(15LL, 2000LL, 0, (BOOL)v1) & 1) == 0 && (sub_10004CFD8(15LL, 6000LL, 1, (BOOL)v1) & 1) == 0)
  {
    if (v1)
    {
      swift_errorRetain(v1);
      uint64_t v41 = (void *)_convertErrorToNSError(_:)(v1);
      unsigned __int8 v42 = [v41 isCuttlefishError:1021];

      swift_errorRelease(v1);
      if ((v42 & 1) != 0) {
        return 1LL;
      }
      swift_errorRetain(v1);
      uint64_t v43 = (void *)_convertErrorToNSError(_:)(v1);
      unsigned __int8 v44 = [v43 isCuttlefishError:1019];

      swift_errorRelease(v1);
      if ((v44 & 1) != 0) {
        return 1LL;
      }
      uint64_t v1 = (void *)_convertErrorToNSError(_:)(v1);
    }

    uint64_t v39 = CKCanRetryForError(v1);
  }

  return v39;
}

  swift_bridgeObjectRelease(v55, v43, v44, v45, v46, v47, v48, v49);
  if (qword_100250EB8 != -1) {
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
  double v73 = type metadata accessor for Logger(0LL);
  sub_100006BAC(v73, (uint64_t)qword_1002567D0);
  uint64_t v74 = sub_10004164C((uint64_t)v18, v68, type metadata accessor for FetchRecoverableTLKSharesResponse);
  uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
  uint64_t v76 = static os_log_type_t.info.getter(v75);
  if (os_log_type_enabled(v75, v76))
  {
    unint64_t v77 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)unint64_t v77 = 134218240;
    uint64_t v78 = *(_TtC18TrustedPeersHelper6Client **)(*(void *)v68 + 16LL);
    sub_1000415CC(v68, type metadata accessor for FetchRecoverableTLKSharesResponse);
    uint64_t v106 = v78;
    uint64_t v18 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v77 + 4, v77 + 12);
    *(_WORD *)(v77 + 12) = 2048;
    uint64_t v106 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v77 + 14, v77 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "fetchRecoverableTlkshares succeeded: found %ld views and %ld total TLKShares",  (uint8_t *)v77,  0x16u);
    swift_slowDealloc(v77, -1LL, -1LL);
  }

  else
  {
    sub_1000415CC(v68, type metadata accessor for FetchRecoverableTLKSharesResponse);
  }

  uint64_t v79 = v103;

  uint64_t v80 = *(_TtC18TrustedPeersHelper6Client **)v18;
  uint64_t v106 = (_TtC18TrustedPeersHelper6Client *)_swiftEmptyArrayStorage;
  uint64_t v81 = *(void *)v80->endpoint;
  if (v81)
  {
    uint64_t v82 = (uint64_t)&v80->_TtCs12_SwiftObject_opaque[(*(unsigned __int8 *)(v79 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)];
    double v83 = *(void *)(v79 + 72);
    swift_bridgeObjectRetain(v80);
    do
    {
      sub_10004164C(v82, (uint64_t)v10, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      unint64_t v84 = sub_100045CD8();
      sub_1000415CC((uint64_t)v10, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
      sub_1000E4884((uint64_t)v84);
      v82 += v83;
      --v81;
    }

    while (v81);
    swift_bridgeObjectRelease(v80, v85, v86, v87, v88, v89, v90, v91);
    uint64_t v52 = v106;
  }

  a2(v52, 0LL);
  swift_bridgeObjectRelease(v52, v92, v93, v94, v95, v96, v97, v98);
  return sub_1000415CC((uint64_t)v104, type metadata accessor for FetchRecoverableTLKSharesResponse);
}

    uint64_t v10 = (v15 - 1) & v15;
    char v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    id result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) status];
    if (!result)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_10015147C(v4, a2, v5, a3, (uint64_t *)&unk_100256B90);
      }
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    uint64_t v10 = (v15 - 1) & v15;
    char v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    id result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) status];
    if (result == (unint64_t *)4)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_10015147C(v4, a2, v5, a3, (uint64_t *)&unk_100256B90);
      }
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    uint64_t v10 = (v15 - 1) & v15;
    char v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    id result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) status];
    if (result == (unint64_t *)3)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_10015147C(v4, a2, v5, a3, (uint64_t *)&unk_100256B90);
      }
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    uint64_t v10 = (v15 - 1) & v15;
    char v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    id result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) status];
    if (result == (unint64_t *)5)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_10015147C(v4, a2, v5, a3, (uint64_t *)&unk_100256B90);
      }
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    uint64_t v10 = (v15 - 1) & v15;
    char v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    id result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) status];
    if (result == (unint64_t *)2)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_10015147C(v4, a2, v5, a3, (uint64_t *)&unk_100256B90);
      }
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    uint64_t v10 = (v15 - 1) & v15;
    char v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    id result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) status];
    if (result == (unint64_t *)1)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_10015147C(v4, a2, v5, a3, (uint64_t *)&unk_100256B90);
      }
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    uint64_t v10 = (v15 - 1) & v15;
    char v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    id result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) status];
    if (result == (unint64_t *)1)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_100151470(v4, a2, v5, a3);
      }
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    id v16 = 1;
  }

  return v16 & 1;
}

    __break(1u);
    goto LABEL_21;
  }

  if (a10 == 2)
  {
    id v30 = sub_1001B04C0(a8, v23);
    goto LABEL_15;
  }

  return result;
}

uint64_t sub_10005FC68()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10005FC8C(void *a1)
{
}

uint64_t sub_10005FC94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005FCA4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10005FCAC()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v0 = (void (*)(void))off_100259C80;
  uint64_t v7 = off_100259C80;
  if (!off_100259C80)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000616A0;
    v3[3] = &unk_100236E50;
    v3[4] = &v4;
    sub_1000616A0(v3);
    uint64_t v0 = (void (*)(void))v5[3];
  }

  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    v0();
  }

  else
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "_Bool soft_MetricsOverrideTestsAreEnabled(void)"));
    objc_msgSend( v1,  "handleFailureInFunction:file:lineNumber:description:",  v2,  @"TrustedPeersHelper-Bridging-Header.h",  90,  @"%s",  dlerror());

    __break(1u);
  }

void sub_10005FDA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005FDC0()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v15 = v3 | 7;
  uint64_t v5 = *(void *)(v2 + 64) + 7LL;
  unint64_t v6 = (v5 + v4) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v3 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  unint64_t v8 = (v5 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;

  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  v12(v0 + v7, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v8 + 8));
  swift_release(*(void *)(v0 + v9));
  swift_bridgeObjectRelease(*(void *)(v0 + v10 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v11 + 8));
  swift_release(*(void *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v15);
}

void sub_10005FEF0(char *a1)
{
  __int128 v16 = *(_OWORD *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(type metadata accessor for Date(0LL) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 64) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64) + 7LL;
  unint64_t v9 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = (v6 + v10 + 8) & ~v6;
  unint64_t v12 = (v8 + v11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100057988( a1,  *(void **)(v1 + 48),  *(void *)(v1 + 56),  v1 + v7,  *(void (**)(char *))(v1 + v9),  *(void *)(v1 + v9 + 8),  (char *)(v1 + v11),  *(void *)(v1 + v12),  *(double *)(v1 + v10),  *(void **)(v1 + v12 + 8),  *(void *)(v1 + v13),  *(void *)(v1 + v14),  *(void *)(v1 + v14 + 8),  *(void *)(v1 + v15),  *(void *)(v1 + v15 + 8),  *(void *)(v1 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  v16,  *((uint64_t *)&v16 + 1),  v3,  v4);
}

unint64_t sub_10005FFF0()
{
  unint64_t result = qword_100251860;
  if (!qword_100251860)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100251860);
  }

  return result;
}

uint64_t sub_100060034(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100060070()
{
  return sub_100060720(type metadata accessor for ResetRequest);
}

uint64_t sub_10006007C()
{
  return sub_1000600B0(type metadata accessor for ResetRequest, sub_100058938);
}

uint64_t sub_100060090()
{
  return sub_100060874(type metadata accessor for EstablishRequest);
}

uint64_t sub_10006009C()
{
  return sub_1000600B0(type metadata accessor for EstablishRequest, sub_100058E74);
}

uint64_t sub_1000600B0(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a1(0LL) - 8) + 80LL);
  return a2(v2 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000600F0()
{
  return sub_100060874(type metadata accessor for JoinWithVoucherRequest);
}

uint64_t sub_1000600FC()
{
  return sub_1000600B0(type metadata accessor for JoinWithVoucherRequest, sub_1000593B8);
}

uint64_t sub_100060110()
{
  uint64_t updated = (int *)type metadata accessor for UpdateTrustRequest(0LL);
  uint64_t v2 = *((void *)updated - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v23 = *(void *)(v2 + 64);
  uint64_t v5 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 40));
  uint64_t v6 = v0 + v4 + updated[8];
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  uint64_t v9 = v0 + v4 + updated[9];
  uint64_t v10 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
  {
    sub_10000852C(*(void *)v9, *(void *)(v9 + 8));
    sub_10000852C(*(void *)(v9 + 16), *(void *)(v9 + 24));
    v8(v9 + *(int *)(v10 + 24), v7);
  }

  uint64_t v11 = v5 + updated[10];
  uint64_t v12 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12))
  {
    sub_10000852C(*(void *)v11, *(void *)(v11 + 8));
    sub_10000852C(*(void *)(v11 + 16), *(void *)(v11 + 24));
    v8(v11 + *(int *)(v12 + 24), v7);
  }

  uint64_t v13 = v5 + updated[11];
  uint64_t v14 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v13, 1LL, v14))
  {
    swift_bridgeObjectRelease(*(void *)(v13 + 8));
    v8(v13 + *(int *)(v14 + 20), v7);
    uint64_t v15 = v13 + *(int *)(v14 + 24);
    uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
  }

  uint64_t v18 = v5 + updated[12];
  uint64_t v19 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v18, 1LL, v19))
  {
    swift_bridgeObjectRelease(*(void *)(v18 + 8));
    swift_bridgeObjectRelease(*(void *)(v18 + 24));
    v8(v18 + *(int *)(v19 + 24), v7);
  }

  uint64_t v20 = v5 + updated[13];
  uint64_t v21 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v0, v4 + v23, v3 | 7);
}

uint64_t sub_100060388()
{
  return sub_1000600B0(type metadata accessor for UpdateTrustRequest, sub_1000598C8);
}

uint64_t sub_10006039C()
{
  uint64_t v1 = (int *)type metadata accessor for SetRecoveryKeyRequest(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 24));
  sub_10000852C(*(void *)(v6 + 32), *(void *)(v6 + 40));
  sub_10000852C(*(void *)(v6 + 48), *(void *)(v6 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 72));
  uint64_t v7 = v0 + v4 + v1[10];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v0 + v4 + v1[11];
  uint64_t v11 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    sub_10000852C(*(void *)v10, *(void *)(v10 + 8));
    sub_10000852C(*(void *)(v10 + 16), *(void *)(v10 + 24));
    v9(v10 + *(int *)(v11 + 24), v8);
  }

  uint64_t v12 = v6 + v1[12];
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    swift_bridgeObjectRelease(*(void *)(v12 + 8));
    swift_bridgeObjectRelease(*(void *)(v12 + 24));
    v9(v12 + *(int *)(v13 + 24), v8);
  }

  uint64_t v14 = v6 + v1[13];
  uint64_t v15 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006053C()
{
  return sub_1000600B0(type metadata accessor for SetRecoveryKeyRequest, sub_100059DD4);
}

uint64_t sub_100060550()
{
  return sub_100060920(type metadata accessor for FetchChangesRequest);
}

uint64_t sub_10006055C()
{
  return sub_1000600B0(type metadata accessor for FetchChangesRequest, sub_10005A2E4);
}

uint64_t sub_100060570()
{
  return sub_100060EE8(type metadata accessor for FetchViableBottlesRequest);
}

uint64_t sub_10006057C()
{
  return sub_1000600B0(type metadata accessor for FetchViableBottlesRequest, sub_10005A7F0);
}

uint64_t sub_100060590()
{
  return sub_100060D9C(type metadata accessor for FetchPolicyDocumentsRequest);
}

uint64_t sub_10006059C()
{
  return sub_1000600B0(type metadata accessor for FetchPolicyDocumentsRequest, sub_10005ACF8);
}

uint64_t sub_1000605B0()
{
  uint64_t RepairActionRequest = (int *)type metadata accessor for GetRepairActionRequest(0LL);
  uint64_t v2 = *((void *)RepairActionRequest - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 24));
  uint64_t v6 = v0 + v4 + RepairActionRequest[8];
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  uint64_t v9 = v0 + v4 + RepairActionRequest[9];
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
  {
    swift_bridgeObjectRelease(*(void *)(v9 + 8));
    swift_bridgeObjectRelease(*(void *)(v9 + 24));
    v8(v9 + *(int *)(v10 + 24), v7);
  }

  uint64_t v11 = v0 + v4 + RepairActionRequest[10];
  uint64_t v12 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000606E0()
{
  return sub_1000600B0(type metadata accessor for GetRepairActionRequest, sub_10005B200);
}

uint64_t sub_1000606F4()
{
  return sub_100060EE8(type metadata accessor for GetSupportAppInfoRequest);
}

uint64_t sub_100060700()
{
  return sub_1000600B0(type metadata accessor for GetSupportAppInfoRequest, sub_10005B710);
}

uint64_t sub_100060714()
{
  return sub_100060720(type metadata accessor for ResetAccountCDPContentsRequest);
}

uint64_t sub_100060720(uint64_t (*a1)(void))
{
  uint64_t v2 = (int *)a1(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  swift_bridgeObjectRelease(*(void *)(v1 + v5 + 24));
  swift_bridgeObjectRelease(*(void *)(v1 + v5 + 40));
  uint64_t v7 = v1 + v5 + v2[9];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v1 + v5 + v2[10];
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  uint64_t v12 = v1 + v5 + v2[11];
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    swift_bridgeObjectRelease(*(void *)(v12 + 8));
    swift_bridgeObjectRelease(*(void *)(v12 + 24));
    v9(v12 + *(int *)(v13 + 24), v8);
  }

  return swift_deallocObject(v1, v5 + v6, v4 | 7);
}

uint64_t sub_100060854()
{
  return sub_1000600B0(type metadata accessor for ResetAccountCDPContentsRequest, sub_10005BC18);
}

uint64_t sub_100060868()
{
  return sub_100060874(type metadata accessor for AddCustodianRecoveryKeyRequest);
}

uint64_t sub_100060874(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  uint64_t v8 = v1 + v5;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_release(*(void *)(v8 + *(int *)(v2 + 20)));
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100060900()
{
  return sub_1000600B0(type metadata accessor for AddCustodianRecoveryKeyRequest, sub_10005C15C);
}

uint64_t sub_100060914()
{
  return sub_100060920(type metadata accessor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_100060920(uint64_t (*a1)(void))
{
  uint64_t v2 = (int *)a1(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  swift_bridgeObjectRelease(*(void *)(v1 + v5 + 8));
  uint64_t v7 = v1 + v5 + v2[5];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v1 + v5 + v2[6];
  uint64_t v11 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    swift_bridgeObjectRelease(*(void *)(v10 + 8));
    swift_bridgeObjectRelease(*(void *)(v10 + 24));
    v9(v10 + *(int *)(v11 + 24), v8);
  }

  uint64_t v12 = v1 + v5 + v2[7];
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v1, v5 + v6, v4 | 7);
}

uint64_t sub_100060A4C()
{
  return sub_1000600B0(type metadata accessor for FetchRecoverableTLKSharesRequest, sub_10005C664);
}

uint64_t sub_100060A60()
{
  uint64_t v1 = (int *)type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 24));
  uint64_t v7 = v0 + v4 + v1[6];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v0 + v4 + v1[7];
  uint64_t v11 = type metadata accessor for SignedPeerStableInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    sub_10000852C(*(void *)v10, *(void *)(v10 + 8));
    sub_10000852C(*(void *)(v10 + 16), *(void *)(v10 + 24));
    v9(v10 + *(int *)(v11 + 24), v8);
  }

  uint64_t v12 = v6 + v1[8];
  uint64_t v13 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    sub_10000852C(*(void *)v12, *(void *)(v12 + 8));
    sub_10000852C(*(void *)(v12 + 16), *(void *)(v12 + 24));
    v9(v12 + *(int *)(v13 + 24), v8);
  }

  uint64_t v14 = v6 + v1[9];
  uint64_t v15 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    swift_bridgeObjectRelease(*(void *)(v14 + 8));
    swift_bridgeObjectRelease(*(void *)(v14 + 24));
    v9(v14 + *(int *)(v15 + 24), v8);
  }

  uint64_t v16 = v6 + v1[10];
  uint64_t v17 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100060C30()
{
  return sub_1000600B0(type metadata accessor for RemoveRecoveryKeyRequest, sub_10005CB6C);
}

uint64_t sub_100060C44()
{
  uint64_t v1 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v0 + v4, v6);
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    swift_bridgeObjectRelease(*(void *)(v8 + 8));
    swift_bridgeObjectRelease(*(void *)(v8 + 24));
    v7(v8 + *(int *)(v9 + 24), v6);
  }

  uint64_t v10 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100060D5C()
{
  return sub_1000600B0(type metadata accessor for PerformATOPRVActionsRequest, sub_10005D074);
}

uint64_t sub_100060D70()
{
  return sub_100060D9C(type metadata accessor for CurrentItemFetchRequest);
}

uint64_t sub_100060D7C()
{
  return sub_1000600B0(type metadata accessor for CurrentItemFetchRequest, sub_10005D57C);
}

uint64_t sub_100060D90()
{
  return sub_100060D9C(type metadata accessor for DirectPCSIdentityFetchRequest);
}

uint64_t sub_100060D9C(uint64_t (*a1)(void))
{
  uint64_t v2 = (int *)a1(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  swift_bridgeObjectRelease(*(void *)(v1 + v5));
  uint64_t v7 = v1 + v5 + v2[5];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v1 + v5 + v2[6];
  uint64_t v11 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    swift_bridgeObjectRelease(*(void *)(v10 + 8));
    swift_bridgeObjectRelease(*(void *)(v10 + 24));
    v9(v10 + *(int *)(v11 + 24), v8);
  }

  uint64_t v12 = v1 + v5 + v2[7];
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v1, v5 + v6, v4 | 7);
}

uint64_t sub_100060EC8()
{
  return sub_1000600B0(type metadata accessor for DirectPCSIdentityFetchRequest, sub_10005DA84);
}

uint64_t sub_100060EDC()
{
  return sub_100060EE8(type metadata accessor for RemoveUnreadableCKServerDataRequest);
}

uint64_t sub_100060EE8(uint64_t (*a1)(void))
{
  uint64_t v2 = (int *)a1(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = v1 + v5 + v2[5];
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  uint64_t v10 = v1 + v5 + v2[6];
  uint64_t v11 = type metadata accessor for Metrics(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    swift_bridgeObjectRelease(*(void *)(v10 + 8));
    swift_bridgeObjectRelease(*(void *)(v10 + 24));
    v9(v10 + *(int *)(v11 + 24), v8);
  }

  uint64_t v12 = v1 + v5 + v2[7];
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  return swift_deallocObject(v1, v5 + v6, v4 | 7);
}

uint64_t sub_10006100C()
{
  return sub_1000600B0(type metadata accessor for RemoveUnreadableCKServerDataRequest, sub_10005DF8C);
}

uint64_t type metadata accessor for RetryingCKCodeService()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper21RetryingCKCodeService);
}

uint64_t type metadata accessor for CuttlefishCKCodeOperationRunner()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper31CuttlefishCKCodeOperationRunner);
}

uint64_t type metadata accessor for CuttlefishCKOperationRunnerCreator()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper34CuttlefishCKOperationRunnerCreator);
}

uint64_t type metadata accessor for ContainerMap()
{
  return objc_opt_self(&OBJC_CLASS____TtC18TrustedPeersHelper12ContainerMap);
}

uint64_t sub_1000610A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000610E4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000076A4(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100061124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007578(&qword_100251D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100061170(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251D60,  (uint64_t)sub_100055D50,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061194(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251D88,  (uint64_t)sub_100055568,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_1000611B8(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251D98,  (uint64_t)sub_100054D80,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_1000611DC(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100256C70,  (uint64_t)sub_100054598,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061200(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251DB8,  (uint64_t)sub_100053DB0,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061224(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251DC8,  (uint64_t)sub_1000535C8,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061248(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251DD8,  (uint64_t)sub_100052DE0,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_10006126C(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251DE8,  (uint64_t)sub_1000525F8,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061290(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100256CF0,  (uint64_t)sub_100051E10,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_1000612B4(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251E08,  (uint64_t)sub_100051628,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_1000612D8(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100256DC0,  (uint64_t)sub_10004D6E8,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100061948);
}

uint64_t sub_1000612FC(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251E28,  (uint64_t)sub_10004DED0,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100061948);
}

uint64_t sub_100061320(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251E38,  (uint64_t)sub_100050E40,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061344(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251E48,  (uint64_t)sub_100050658,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061368(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100256D10,  (uint64_t)sub_10004FE70,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_10006138C(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100256E20,  (uint64_t)sub_10004F688,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_1000613B0(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100256EB0,  (uint64_t)sub_10004EEA0,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_1000613D4()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v15 = v3 | 7;
  uint64_t v5 = *(void *)(v2 + 64) + 7LL;
  unint64_t v6 = (v5 + v4) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v3 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  unint64_t v8 = (v5 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;

  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  v12(v0 + v7, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v8 + 8));
  swift_release(*(void *)(v0 + v9));
  swift_bridgeObjectRelease(*(void *)(v0 + v10 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v11 + 8));
  swift_release(*(void *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v15);
}

uint64_t sub_100061504(uint64_t a1)
{
  return sub_100061520( a1,  (uint64_t)&unk_100251E88,  (uint64_t)sub_10004E6B8,  (uint64_t (*)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_100056FF4);
}

uint64_t sub_100061520( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, uint64_t, void, void, uint64_t, void, double, void, void, void, void, void, void, void, void, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(type metadata accessor for Date(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = *(void *)(v9 + 64) + 7LL;
  unint64_t v13 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = (v10 + v14 + 8) & ~v10;
  unint64_t v16 = (v12 + v15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  return a4( a1,  *(void *)(v4 + 16),  *(void *)(v4 + 24),  v4 + v11,  *(void *)(v4 + v13),  *(void *)(v4 + v13 + 8),  v4 + v15,  *(void *)(v4 + v16),  *(double *)(v4 + v14),  *(void *)(v4 + v16 + 8),  *(void *)(v4 + v17),  *(void *)(v4 + v18),  *(void *)(v4 + v18 + 8),  *(void *)(v4 + v19),  *(void *)(v4 + v19 + 8),  *(void *)(v4 + ((v19 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v4 + ((v19 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  a2,  a3);
}

uint64_t sub_100061620()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10006164C()
{
  return sub_100058334(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100061664(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_1000616A0(void *a1)
{
  uint64_t v5 = 0LL;
  if (!qword_100259C88)
  {
    __int128 v6 = off_100236E70;
    uint64_t v7 = 0LL;
    qword_100259C88 = _sl_dlopen(&v6, &v5);
  }

  uint64_t v2 = (void *)qword_100259C88;
  if (!qword_100259C88)
  {
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *KeychainCircleLibrary(void)"));
    objc_msgSend( a1,  "handleFailureInFunction:file:lineNumber:description:",  v2,  @"TrustedPeersHelper-Bridging-Header.h",  87,  @"%s",  v5);

    __break(1u);
    goto LABEL_7;
  }

  uint64_t v3 = v5;
  if (v5) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "MetricsOverrideTestsAreEnabled");
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = result;
  off_100259C80 = *(_UNKNOWN **)(*(void *)(a1[4] + 8LL) + 24LL);
  return result;
}

void sub_100061948( os_log_s *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6, char *a7, uint64_t a8, double a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, void (*a19)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, void (*)(void), uint64_t))
{
}

BOOL sub_100061980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

uint64_t static FetchPolicyDocumentsRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000AAC5C(a1, a2, (uint64_t)sub_10003EE24, (char *)type metadata accessor for FetchPolicyDocumentsRequest) & 1;
}

uint64_t static FetchPolicyDocumentsResponse.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000A7990(a1, a2, sub_10003E6BC, type metadata accessor for FetchPolicyDocumentsResponse) & 1;
}

uint64_t static FetchChangesResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000AD020(a1, a2, type metadata accessor for FetchChangesResponse) & 1;
}

uint64_t static EscrowPair.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for EscrowPair,  (uint64_t (*)(uint64_t, uint64_t))sub_1000845C4) & 1;
}

uint64_t static SetRecoveryKeyResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for SetRecoveryKeyResponse) & 1;
}

uint64_t static UpdateTrustResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for UpdateTrustResponse) & 1;
}

uint64_t static JoinWithVoucherRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_10008AB84) & 1;
}

uint64_t static JoinWithVoucherResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for JoinWithVoucherResponse) & 1;
}

uint64_t static EstablishRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for EstablishRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_100088030) & 1;
}

uint64_t static EstablishResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for EstablishResponse) & 1;
}

uint64_t static SignedPeerDynamicInfo.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1000B2874(a1, a2, type metadata accessor for SignedPeerDynamicInfo) & 1;
}

uint64_t static SignedRecoveryVoucher.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1000B2874(a1, a2, type metadata accessor for SignedRecoveryVoucher) & 1;
}

uint64_t static SignedVoucher.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1000B2874(a1, a2, type metadata accessor for SignedVoucher) & 1;
}

uint64_t static SignedPeerStableInfo.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1000B2874(a1, a2, type metadata accessor for SignedPeerStableInfo) & 1;
}

uint64_t static SignedPeerPermanentInfo.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1000B2874(a1, a2, type metadata accessor for SignedPeerPermanentInfo) & 1;
}

uint64_t static ViewKeys.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for ViewKeys,  (uint64_t (*)(uint64_t, uint64_t))sub_100081DA0) & 1;
}

uint64_t ViewKeys.view.setter(uint64_t a1, uint64_t a2)
{
  return sub_10006724C( a1,  a2,  type metadata accessor for ViewKeys,  type metadata accessor for ViewKeys._StorageClass,  sub_100081120);
}

uint64_t ViewKeys.newTlk.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  unint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100081120(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for ViewKey);
  uint64_t v19 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251EE0);
  uint64_t v20 = v18 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251EE0);
  swift_endAccess(v23);
  return swift_release(v18);
}

uint64_t ViewKeys.newClassA.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  unint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100081120(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for ViewKey);
  uint64_t v19 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251EE0);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251EE0);
  swift_endAccess(v23);
  return swift_release(v18);
}

uint64_t ViewKeys.newClassC.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  unint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100081120(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for ViewKey);
  uint64_t v19 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251EE0);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251EE0);
  swift_endAccess(v23);
  return swift_release(v18);
}

uint64_t FetchRecoverableTLKSharesResponse.View.keys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100251648);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecoverableTLKShares = type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
  sub_10000FC68(v1 + *(int *)(RecoverableTLKShares + 28), (uint64_t)v6, &qword_100251648);
  unint64_t v8 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v9 = a1 + v8[5];
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  v11(v9, 1LL, 1LL, v10);
  v11(a1 + v8[6], 1LL, 1LL, v10);
  v11(a1 + v8[7], 1LL, 1LL, v10);
  return sub_100041590((uint64_t)v6, &qword_100251648);
}

uint64_t ViewKeysRecords.tlk.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100062260(type metadata accessor for ViewKeysRecords, a1);
}

uint64_t ViewKeysRecords.classA.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000639DC( &qword_1002517E0,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport,  (void (*)(void))&Ckcode_RecordTransport.init(),  a1);
}

uint64_t ViewKeysRecords.classC.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000750EC( &qword_1002517E0,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport,  (void (*)(void))&Ckcode_RecordTransport.init(),  a1);
}

uint64_t CurrentCKKSItem.itemSpecifier.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( (uint64_t *)&unk_100256F50,  type metadata accessor for CurrentCKKSItem,  type metadata accessor for CurrentCKKSItemSpecifier,  a1);
}

uint64_t CurrentCKKSItem.item.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100062260(type metadata accessor for CurrentCKKSItem, a1);
}

uint64_t sub_100062260@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_1002517E0);
  __chkstk_darwin(v5, v6);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 20), (uint64_t)v8, &qword_1002517E0);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  Ckcode_RecordTransport.init()();
  return sub_100041590((uint64_t)v8, &qword_1002517E0);
}

uint64_t DirectPCSIdentity.pcsService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_1002517F8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DirectPCSIdentity(0LL);
  sub_10000FC68(v1 + *(int *)(v7 + 24), (uint64_t)v6, &qword_1002517F8);
  uint64_t v8 = type metadata accessor for PCSService(0LL);
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = xmmword_1001DE6F0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v6, &qword_1002517F8);
}

uint64_t DirectPCSIdentity.item.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100062260(type metadata accessor for DirectPCSIdentity, a1);
}

uint64_t ResetRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062618(type metadata accessor for ResetRequest, a1);
}

uint64_t EstablishRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062724( type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  a1);
}

uint64_t JoinWithVoucherRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062724( type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  a1);
}

uint64_t UpdateTrustRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062498(type metadata accessor for UpdateTrustRequest, a1);
}

uint64_t SetRecoveryKeyRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062498(type metadata accessor for SetRecoveryKeyRequest, a1);
}

uint64_t sub_100062498@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 48), (uint64_t)v8, &qword_100257000);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, &qword_100257000);
}

uint64_t FetchChangesRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for FetchChangesRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t FetchViableBottlesRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for FetchViableBottlesRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t FetchPolicyDocumentsRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for FetchPolicyDocumentsRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t GetRepairActionRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_10006286C(type metadata accessor for GetRepairActionRequest, a1);
}

uint64_t GetSupportAppInfoRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for GetSupportAppInfoRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t ResetAccountCDPContentsRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062618(type metadata accessor for ResetAccountCDPContentsRequest, a1);
}

uint64_t sub_100062618@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 44), (uint64_t)v8, &qword_100257000);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, &qword_100257000);
}

uint64_t AddCustodianRecoveryKeyRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062724( type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  a1);
}

uint64_t sub_100062724@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(void *)(v3 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v11, v15, 0LL, 0LL);
  sub_10000FC68(v11, (uint64_t)v10, &qword_100257000);
  uint64_t v12 = type metadata accessor for Metrics(0LL);
  *a3 = 0LL;
  a3[1] = 0xE000000000000000LL;
  a3[2] = 0LL;
  a3[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v10, &qword_100257000);
}

uint64_t FetchRecoverableTLKSharesRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for FetchRecoverableTLKSharesRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t RemoveRecoveryKeyRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_10006286C(type metadata accessor for RemoveRecoveryKeyRequest, a1);
}

uint64_t sub_10006286C@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 36), (uint64_t)v8, &qword_100257000);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, &qword_100257000);
}

uint64_t PerformATOPRVActionsRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  sub_10000FC68(v1 + *(int *)(v7 + 20), (uint64_t)v6, &qword_100257000);
  uint64_t v8 = type metadata accessor for Metrics(0LL);
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v6, &qword_100257000);
}

uint64_t CurrentItemFetchRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for CurrentItemFetchRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t DirectPCSIdentityFetchRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for DirectPCSIdentityFetchRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t RemoveUnreadableCKServerDataRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  return sub_100062AA4( &qword_100257000,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  type metadata accessor for Metrics,  a1);
}

uint64_t sub_100062AA4@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2(0LL);
  sub_10000FC68(v4 + *(int *)(v13 + 24), (uint64_t)v12, a1);
  uint64_t v14 = a3(0LL);
  *a4 = 0LL;
  a4[1] = 0xE000000000000000LL;
  a4[2] = 0LL;
  a4[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v12, a1);
}

void sub_100062B90()
{
  static ViewKeyClass.allCases = (uint64_t)&off_100234EC8;
}

uint64_t *ViewKeyClass.allCases.unsafeMutableAddressor()
{
  if (qword_100250BD8 != -1) {
    swift_once(&qword_100250BD8, sub_100062B90);
  }
  return &static ViewKeyClass.allCases;
}

uint64_t static ViewKeyClass.allCases.getter()
{
  return sub_100063404(&qword_100250BD8, &static ViewKeyClass.allCases);
}

uint64_t sub_100062C00@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250BD8, &static ViewKeyClass.allCases, (uint64_t)sub_100062B90, a1);
}

uint64_t sub_100062C20(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000B674C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t ResetReason.init(rawValue:)(uint64_t a1)
{
  return sub_100062FC4(a1, (uint64_t (*)(void))sub_1000B5A84);
}

void sub_100062C68()
{
  static ResetReason.allCases = (uint64_t)&off_100234F18;
}

uint64_t *ResetReason.allCases.unsafeMutableAddressor()
{
  if (qword_100250BE0 != -1) {
    swift_once(&qword_100250BE0, sub_100062C68);
  }
  return &static ResetReason.allCases;
}

uint64_t static ResetReason.allCases.getter()
{
  return sub_100063404(&qword_100250BE0, &static ResetReason.allCases);
}

void sub_100062CD8(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
}

uint64_t sub_100062CE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100063060((uint64_t (*)(void))sub_1000B5A84, a1);
}

uint64_t GetSupportAppInfoRequest.page.getter()
{
  return *(void *)v0;
}

uint64_t sub_100062CFC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250BE0, &static ResetReason.allCases, (uint64_t)sub_100062C68, a1);
}

uint64_t sub_100062D18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000630B8(a1, (uint64_t (*)(void))sub_1000B5A84, a2);
}

uint64_t sub_100062D24(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000B6790();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_100062D5C(uint64_t a1, uint64_t *a2)
{
  return sub_100061980(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t AccountFlags.init(rawValue:)(uint64_t a1)
{
  return sub_100062FC4(a1, (uint64_t (*)(void))sub_1000B5A98);
}

uint64_t AccountFlags.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return qword_1001E6180[result];
  }
  return result;
}

void sub_100062D98()
{
  static AccountFlags.allCases = (uint64_t)&off_100234FB8;
}

uint64_t *AccountFlags.allCases.unsafeMutableAddressor()
{
  if (qword_100250BE8 != -1) {
    swift_once(&qword_100250BE8, sub_100062D98);
  }
  return &static AccountFlags.allCases;
}

uint64_t static AccountFlags.allCases.getter()
{
  return sub_100063404(&qword_100250BE8, &static AccountFlags.allCases);
}

uint64_t sub_100062E08@<X0>(uint64_t a1@<X8>)
{
  return sub_100063060((uint64_t (*)(void))sub_1000B5A98, a1);
}

uint64_t sub_100062E14()
{
  uint64_t result = *v0;
  if (*((_BYTE *)v0 + 8) == 1) {
    return qword_1001E6180[result];
  }
  return result;
}

uint64_t sub_100062E34@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250BE8, &static AccountFlags.allCases, (uint64_t)sub_100062D98, a1);
}

uint64_t sub_100062E50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000630B8(a1, sub_1000B5A98, a2);
}

void sub_100062E5C(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1) {
    uint64_t v2 = qword_1001E6180[v2];
  }
  *a1 = v2;
}

uint64_t sub_100062E80(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000DBEC8();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_100062EB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1) {
    uint64_t v2 = qword_1001E6180[v2];
  }
  uint64_t v3 = *a2;
  if (*((_BYTE *)a2 + 8)) {
    uint64_t v3 = qword_1001E6180[v3];
  }
  return v2 == v3;
}

void sub_100062EF0()
{
  static FilteringRequest.allCases = (uint64_t)&off_100235038;
}

uint64_t *FilteringRequest.allCases.unsafeMutableAddressor()
{
  if (qword_100250BF0 != -1) {
    swift_once(&qword_100250BF0, sub_100062EF0);
  }
  return &static FilteringRequest.allCases;
}

uint64_t static FilteringRequest.allCases.getter()
{
  return sub_100063404(&qword_100250BF0, &static FilteringRequest.allCases);
}

uint64_t sub_100062F60@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250BF0, &static FilteringRequest.allCases, (uint64_t)sub_100062EF0, a1);
}

uint64_t sub_100062F7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000B67E8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t RepairAction.init(rawValue:)(uint64_t a1)
{
  return sub_100062FC4(a1, (uint64_t (*)(void))sub_1000B5AF8);
}

uint64_t sub_100062FC4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_100062FE4()
{
  static RepairAction.allCases = (uint64_t)&off_100235078;
}

uint64_t *RepairAction.allCases.unsafeMutableAddressor()
{
  if (qword_100250BF8 != -1) {
    swift_once(&qword_100250BF8, sub_100062FE4);
  }
  return &static RepairAction.allCases;
}

uint64_t static RepairAction.allCases.getter()
{
  return sub_100063404(&qword_100250BF8, &static RepairAction.allCases);
}

uint64_t sub_100063054@<X0>(uint64_t a1@<X8>)
{
  return sub_100063060((uint64_t (*)(void))sub_1000B5AF8, a1);
}

uint64_t sub_100063060@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_100063090@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250BF8, &static RepairAction.allCases, (uint64_t)sub_100062FE4, a1);
}

uint64_t sub_1000630AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000630B8(a1, (uint64_t (*)(void))sub_1000B5AF8, a2);
}

uint64_t sub_1000630B8@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_1000630EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000DBE84();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_100063124()
{
  static SupportAppDeviceStatus.allCases = (uint64_t)&off_1002350F8;
}

uint64_t *SupportAppDeviceStatus.allCases.unsafeMutableAddressor()
{
  if (qword_100250C00 != -1) {
    swift_once(&qword_100250C00, sub_100063124);
  }
  return &static SupportAppDeviceStatus.allCases;
}

uint64_t static SupportAppDeviceStatus.allCases.getter()
{
  return sub_100063404(&qword_100250C00, &static SupportAppDeviceStatus.allCases);
}

uint64_t sub_100063194@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250C00, &static SupportAppDeviceStatus.allCases, (uint64_t)sub_100063124, a1);
}

uint64_t sub_1000631B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000B682C();
  return Enum.hash(into:)(a1, a2, v4);
}

  ;
}

BOOL RecordStatus.rawValue.getter(BOOL result, char a2)
{
  if ((a2 & 1) != 0) {
    return result;
  }
  return result;
}

void sub_100063210()
{
  static RecordStatus.allCases = (uint64_t)&off_100235138;
}

uint64_t *RecordStatus.allCases.unsafeMutableAddressor()
{
  if (qword_100250C08 != -1) {
    swift_once(&qword_100250C08, sub_100063210);
  }
  return &static RecordStatus.allCases;
}

uint64_t static RecordStatus.allCases.getter()
{
  return sub_100063404(&qword_100250C08, &static RecordStatus.allCases);
}

unint64_t sub_100063280@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_100063298()
{
  if (v0[8]) {
    return *(void *)v0 != 0LL;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t sub_1000632B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250C08, &static RecordStatus.allCases, (uint64_t)sub_100063210, a1);
}

void *sub_1000632D0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_1000632EC(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t sub_10006330C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000B6884();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_100063344(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

  ;
}

void sub_100063394()
{
  static SOSViability.allCases = (uint64_t)&off_100235178;
}

uint64_t *SOSViability.allCases.unsafeMutableAddressor()
{
  if (qword_100250C10 != -1) {
    swift_once(&qword_100250C10, sub_100063394);
  }
  return &static SOSViability.allCases;
}

uint64_t static SOSViability.allCases.getter()
{
  return sub_100063404(&qword_100250C10, &static SOSViability.allCases);
}

uint64_t sub_100063404(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_bridgeObjectRetain(*a2);
}

unint64_t sub_10006343C@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_100063454@<X0>(uint64_t *a1@<X8>)
{
  return sub_100063470(&qword_100250C10, &static SOSViability.allCases, (uint64_t)sub_100063394, a1);
}

uint64_t sub_100063470@<X0>(void *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = *a2;
  *a4 = *a2;
  return swift_bridgeObjectRetain(v6);
}

void *sub_1000634B4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

Swift::Int sub_1000634D0(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(v2 + 8);
  void v7[9] = *(void *)v2;
  char v8 = v5;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_100063538(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000B68C8();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100063570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(_BYTE *)(v3 + 8);
  v8[9] = *(void *)v3;
  char v9 = v6;
  Hasher.init(_seed:)(v8);
  dispatch thunk of Hashable.hash(into:)(v8, a2, a3);
  return Hasher._finalize()();
}

uint64_t (*ViewKeys.unknownFields.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t (*TLKShare.curve.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t SignedPeerPermanentInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for SignedPeerPermanentInfo, a1);
}

uint64_t SignedPeerPermanentInfo.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for SignedPeerPermanentInfo);
}

uint64_t (*SignedPeerPermanentInfo.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SignedPeerPermanentInfo.init()@<X0>(_OWORD *a1@<X8>)
{
  return sub_100063720((void (*)(void))type metadata accessor for SignedPeerPermanentInfo, a1);
}

uint64_t SignedPeerStableInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for SignedPeerStableInfo, a1);
}

uint64_t sub_10006364C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t SignedPeerStableInfo.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for SignedPeerStableInfo);
}

uint64_t sub_1000636A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*SignedPeerStableInfo.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SignedPeerStableInfo.init()@<X0>(_OWORD *a1@<X8>)
{
  return sub_100063720((void (*)(void))type metadata accessor for SignedPeerStableInfo, a1);
}

uint64_t sub_100063720@<X0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1001DE6F0;
  a2[1] = xmmword_1001DE6F0;
  a1(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t SignedPeerDynamicInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for SignedPeerDynamicInfo, a1);
}

uint64_t SignedPeerDynamicInfo.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for SignedPeerDynamicInfo);
}

uint64_t (*SignedPeerDynamicInfo.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SignedPeerDynamicInfo.init()@<X0>(_OWORD *a1@<X8>)
{
  return sub_100063720((void (*)(void))type metadata accessor for SignedPeerDynamicInfo, a1);
}

uint64_t SignedVoucher.voucher.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1000084E8(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t SignedVoucher.voucher.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000852C(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + _Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t SignedVoucher.sig.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1000084E8(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t SignedVoucher.sig.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000852C(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t SignedVoucher.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for SignedVoucher, a1);
}

uint64_t SignedVoucher.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for SignedVoucher);
}

uint64_t (*SignedVoucher.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SignedVoucher.init()@<X0>(_OWORD *a1@<X8>)
{
  return sub_100063720((void (*)(void))type metadata accessor for SignedVoucher, a1);
}

uint64_t SignedRecoveryVoucher.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for SignedRecoveryVoucher, a1);
}

uint64_t SignedRecoveryVoucher.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for SignedRecoveryVoucher);
}

uint64_t (*SignedRecoveryVoucher.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SignedRecoveryVoucher.init()@<X0>(_OWORD *a1@<X8>)
{
  return sub_100063720((void (*)(void))type metadata accessor for SignedRecoveryVoucher, a1);
}

uint64_t SignedCustodianRecoveryKey.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for SignedCustodianRecoveryKey, a1);
}

uint64_t SignedCustodianRecoveryKey.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for SignedCustodianRecoveryKey);
}

uint64_t (*SignedCustodianRecoveryKey.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SignedCustodianRecoveryKey.init()@<X0>(_OWORD *a1@<X8>)
{
  return sub_100063720((void (*)(void))type metadata accessor for SignedCustodianRecoveryKey, a1);
}

uint64_t IdmsTrustedDevicesVersion.idmsTrustedDevicesVersionString.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t IdmsTrustedDevicesVersion.idmsTrustedDevicesVersionString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t IdmsTrustedDevicesVersion.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000639DC( (uint64_t *)&unk_100256D30,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp,  (void (*)(void))&Google_Protobuf_Timestamp.init(),  a1);
}

uint64_t sub_1000639DC@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100007578(a1);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a2(0LL);
  sub_10000FC68(v5 + *(int *)(v15 + 24), (uint64_t)v14, a1);
  uint64_t v16 = a3(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  a4();
  return sub_100041590((uint64_t)v14, a1);
}

uint64_t IdmsTrustedDevicesVersion.timestamp.setter(uint64_t a1)
{
  return sub_100066AF8( a1,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t *)&unk_100256D30,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp);
}

void (*IdmsTrustedDevicesVersion.timestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  char v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for IdmsTrustedDevicesVersion(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256D30);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Google_Protobuf_Timestamp.init()();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256D30);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100063C00;
}

void sub_100063C00(uint64_t a1, char a2)
{
}

BOOL IdmsTrustedDevicesVersion.hasTimestamp.getter()
{
  return sub_100066CB0( (uint64_t *)&unk_100256D30,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp);
}

Swift::Void __swiftcall IdmsTrustedDevicesVersion.clearTimestamp()()
{
}

uint64_t IdmsTrustedDevicesVersion.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for IdmsTrustedDevicesVersion, a1);
}

uint64_t IdmsTrustedDevicesVersion.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for IdmsTrustedDevicesVersion);
}

uint64_t (*IdmsTrustedDevicesVersion.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t IdmsTrustedDevicesVersion.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Peer.permanentInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006E4D4( &qword_100256F80,  type metadata accessor for Peer,  type metadata accessor for SignedPeerPermanentInfo,  a1);
}

uint64_t Peer.permanentInfoAndSig.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for Peer,  &qword_100256F80,  type metadata accessor for SignedPeerPermanentInfo);
}

void (*Peer.permanentInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100256F80);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  char v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Peer(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100256F80);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *char v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100256F80);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerPermanentInfo);
  }

  return sub_100063E4C;
}

void sub_100063E4C(uint64_t a1, char a2)
{
}

BOOL Peer.hasPermanentInfoAndSig.getter()
{
  return sub_100066F44( &qword_100256F80,  type metadata accessor for Peer,  type metadata accessor for SignedPeerPermanentInfo);
}

Swift::Void __swiftcall Peer.clearPermanentInfoAndSig()()
{
}

uint64_t Peer.stableInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006E75C( &qword_100251F18,  type metadata accessor for Peer,  type metadata accessor for SignedPeerStableInfo,  a1);
}

uint64_t Peer.stableInfoAndSig.setter(uint64_t a1)
{
  return sub_100073434( a1,  type metadata accessor for Peer,  &qword_100251F18,  type metadata accessor for SignedPeerStableInfo);
}

void (*Peer.stableInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F18);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerStableInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  char v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Peer(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F18);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *char v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerStableInfo);
  }

  return sub_100063FFC;
}

void sub_100063FFC(uint64_t a1, char a2)
{
}

BOOL Peer.hasStableInfoAndSig.getter()
{
  return sub_10006E9AC( &qword_100251F18,  type metadata accessor for Peer,  type metadata accessor for SignedPeerStableInfo);
}

Swift::Void __swiftcall Peer.clearStableInfoAndSig()()
{
}

uint64_t Peer.dynamicInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006C728( &qword_100256CA0,  type metadata accessor for Peer,  type metadata accessor for SignedPeerDynamicInfo,  a1);
}

uint64_t Peer.dynamicInfoAndSig.setter(uint64_t a1)
{
  return sub_100072E4C( a1,  type metadata accessor for Peer,  &qword_100256CA0,  type metadata accessor for SignedPeerDynamicInfo);
}

void (*Peer.dynamicInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100256CA0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  char v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Peer(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100256CA0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *char v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100256CA0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerDynamicInfo);
  }

  return sub_1000641AC;
}

void sub_1000641AC(uint64_t a1, char a2)
{
}

BOOL Peer.hasDynamicInfoAndSig.getter()
{
  return sub_10006C978( &qword_100256CA0,  type metadata accessor for Peer,  type metadata accessor for SignedPeerDynamicInfo);
}

Swift::Void __swiftcall Peer.clearDynamicInfoAndSig()()
{
}

uint64_t Peer.recoveryVoucher.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006CAD4( &qword_100251F20,  type metadata accessor for Peer,  type metadata accessor for SignedRecoveryVoucher,  a1);
}

uint64_t Peer.recoveryVoucher.setter(uint64_t a1)
{
  return sub_100075E3C( a1,  type metadata accessor for Peer,  &qword_100251F20,  type metadata accessor for SignedRecoveryVoucher);
}

void (*Peer.recoveryVoucher.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F20);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedRecoveryVoucher(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  char v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Peer(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F20);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *char v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F20);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedRecoveryVoucher);
  }

  return sub_10006435C;
}

void sub_10006435C(uint64_t a1, char a2)
{
}

BOOL Peer.hasRecoveryVoucher.getter()
{
  return sub_100068970( &qword_100251F20,  type metadata accessor for Peer,  type metadata accessor for SignedRecoveryVoucher);
}

Swift::Void __swiftcall Peer.clearRecoveryVoucher()()
{
}

uint64_t Peer.custodianRecoveryKeyAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006D7A8( &qword_100251F28,  type metadata accessor for Peer,  type metadata accessor for SignedCustodianRecoveryKey,  a1);
}

uint64_t Peer.custodianRecoveryKeyAndSig.setter(uint64_t a1)
{
  return sub_10007602C( a1,  type metadata accessor for Peer,  &qword_100251F28,  type metadata accessor for SignedCustodianRecoveryKey);
}

void (*Peer.custodianRecoveryKeyAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F28);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  char v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Peer(0LL) + 44);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F28);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *char v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F28);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedCustodianRecoveryKey);
  }

  return sub_10006450C;
}

void sub_10006450C(uint64_t a1, char a2)
{
}

BOOL Peer.hasCustodianRecoveryKeyAndSig.getter()
{
  return sub_100068C28( &qword_100251F28,  type metadata accessor for Peer,  type metadata accessor for SignedCustodianRecoveryKey);
}

Swift::Void __swiftcall Peer.clearCustodianRecoveryKeyAndSig()()
{
}

uint64_t Peer.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for Peer, a1);
}

uint64_t Peer.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for Peer);
}

uint64_t (*Peer.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t Peer.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for Peer(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = (char *)a1 + v2[7];
  uint64_t v4 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + v2[8];
  uint64_t v6 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = (char *)a1 + v2[9];
  uint64_t v8 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  char v9 = (char *)a1 + v2[10];
  uint64_t v10 = type metadata accessor for SignedRecoveryVoucher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = (char *)a1 + v2[11];
  uint64_t v12 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( v11,  1LL,  1LL,  v12);
}

uint64_t PeerDifference.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10000FC68(v1, a1, &qword_100251658);
}

uint64_t PeerDifference.operation.setter(uint64_t a1)
{
  return sub_1000B66E0(a1, v1, &qword_100251658);
}

uint64_t PeerDifference.add.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(v2, (uint64_t)v7, &qword_100251658);
  uint64_t v8 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8) == 1)
  {
    sub_100041590((uint64_t)v7, &qword_100251658);
LABEL_5:
    *a1 = 0LL;
    a1[1] = 0xE000000000000000LL;
    a1[2] = _swiftEmptyArrayStorage;
    char v9 = (int *)type metadata accessor for Peer(0LL);
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v10 = (char *)a1 + v9[7];
    uint64_t v11 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
    uint64_t v12 = (char *)a1 + v9[8];
    uint64_t v13 = type metadata accessor for SignedPeerStableInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    uint64_t v14 = (char *)a1 + v9[9];
    uint64_t v15 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    uint64_t v16 = (char *)a1 + v9[10];
    uint64_t v17 = type metadata accessor for SignedRecoveryVoucher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    uint64_t v18 = (char *)a1 + v9[11];
    uint64_t v19 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( v18,  1LL,  1LL,  v19);
  }

  if (swift_getEnumCaseMultiPayload(v7, v8))
  {
    sub_1000415CC((uint64_t)v7, type metadata accessor for PeerDifference.OneOf_Operation);
    goto LABEL_5;
  }

  return sub_100041608((uint64_t)v7, (uint64_t)a1, type metadata accessor for Peer);
}

uint64_t PeerDifference.add.setter(uint64_t a1)
{
  return sub_100065180(a1, 0LL);
}

void (*PeerDifference.add.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = sub_100007578(&qword_100251658);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  v4[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for Peer(0LL);
  size_t v8 = *(void *)(*((void *)v7 - 1) + 64LL);
  v4[2] = malloc(v8);
  char v9 = malloc(v8);
  v4[3] = v9;
  sub_10000FC68(v2, (uint64_t)v6, &qword_100251658);
  uint64_t v10 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1LL, v10) == 1)
  {
    sub_100041590((uint64_t)v6, &qword_100251658);
  }

  else
  {
    if (!swift_getEnumCaseMultiPayload(v6, v10))
    {
      sub_100041608((uint64_t)v6, (uint64_t)v9, type metadata accessor for Peer);
      return sub_100064B34;
    }

    sub_1000415CC((uint64_t)v6, type metadata accessor for PeerDifference.OneOf_Operation);
  }

  *char v9 = 0LL;
  v9[1] = 0xE000000000000000LL;
  v9[2] = _swiftEmptyArrayStorage;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v12 = (char *)v9 + v7[7];
  uint64_t v13 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = (char *)v9 + v7[8];
  uint64_t v15 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  uint64_t v16 = (char *)v9 + v7[9];
  uint64_t v17 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  uint64_t v18 = (char *)v9 + v7[10];
  uint64_t v19 = type metadata accessor for SignedRecoveryVoucher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  uint64_t v20 = (char *)v9 + v7[11];
  uint64_t v21 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  return sub_100064B34;
}

void sub_100064B34(uint64_t **a1, char a2)
{
}

uint64_t PeerDifference.remove.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(v2, (uint64_t)v7, &qword_100251658);
  uint64_t v8 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8) == 1)
  {
    sub_100041590((uint64_t)v7, &qword_100251658);
  }

  else
  {
    sub_1000415CC((uint64_t)v7, type metadata accessor for PeerDifference.OneOf_Operation);
  }

  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t v10 = (int *)type metadata accessor for Peer(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v11 = (char *)a1 + v10[7];
  uint64_t v12 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = (char *)a1 + v10[8];
  uint64_t v14 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = (char *)a1 + v10[9];
  uint64_t v16 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = (char *)a1 + v10[10];
  uint64_t v18 = type metadata accessor for SignedRecoveryVoucher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = (char *)a1 + v10[11];
  uint64_t v20 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( v19,  1LL,  1LL,  v20);
}

uint64_t PeerDifference.remove.setter(uint64_t a1)
{
  return sub_100065180(a1, 1LL);
}

void (*PeerDifference.remove.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = sub_100007578(&qword_100251658);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  v4[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for Peer(0LL);
  size_t v8 = *(void *)(*((void *)v7 - 1) + 64LL);
  v4[2] = malloc(v8);
  char v9 = malloc(v8);
  v4[3] = v9;
  sub_10000FC68(v2, (uint64_t)v6, &qword_100251658);
  uint64_t v10 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1LL, v10) == 1)
  {
    sub_100041590((uint64_t)v6, &qword_100251658);
LABEL_6:
    *char v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = _swiftEmptyArrayStorage;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v12 = (char *)v9 + v7[7];
    uint64_t v13 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    uint64_t v14 = (char *)v9 + v7[8];
    uint64_t v15 = type metadata accessor for SignedPeerStableInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    uint64_t v16 = (char *)v9 + v7[9];
    uint64_t v17 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    uint64_t v18 = (char *)v9 + v7[10];
    uint64_t v19 = type metadata accessor for SignedRecoveryVoucher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
    uint64_t v20 = (char *)v9 + v7[11];
    uint64_t v21 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
    return sub_100064F74;
  }

  if (swift_getEnumCaseMultiPayload(v6, v10) != 1)
  {
    sub_1000415CC((uint64_t)v6, type metadata accessor for PeerDifference.OneOf_Operation);
    goto LABEL_6;
  }

  sub_100041608((uint64_t)v6, (uint64_t)v9, type metadata accessor for Peer);
  return sub_100064F74;
}

void sub_100064F74(uint64_t **a1, char a2)
{
}

uint64_t PeerDifference.update.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(v2, (uint64_t)v7, &qword_100251658);
  uint64_t v8 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8) == 1)
  {
    sub_100041590((uint64_t)v7, &qword_100251658);
  }

  else
  {
    sub_1000415CC((uint64_t)v7, type metadata accessor for PeerDifference.OneOf_Operation);
  }

  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t v10 = (int *)type metadata accessor for Peer(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v11 = (char *)a1 + v10[7];
  uint64_t v12 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = (char *)a1 + v10[8];
  uint64_t v14 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = (char *)a1 + v10[9];
  uint64_t v16 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = (char *)a1 + v10[10];
  uint64_t v18 = type metadata accessor for SignedRecoveryVoucher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = (char *)a1 + v10[11];
  uint64_t v20 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( v19,  1LL,  1LL,  v20);
}

uint64_t PeerDifference.update.setter(uint64_t a1)
{
  return sub_100065180(a1, 2LL);
}

uint64_t sub_100065180(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  swift_storeEnumTagMultiPayload(v2, v5, a2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v2, 0LL, 1LL, v5);
}

void (*PeerDifference.update.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = sub_100007578(&qword_100251658);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  v4[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for Peer(0LL);
  size_t v8 = *(void *)(*((void *)v7 - 1) + 64LL);
  v4[2] = malloc(v8);
  char v9 = malloc(v8);
  v4[3] = v9;
  sub_10000FC68(v2, (uint64_t)v6, &qword_100251658);
  uint64_t v10 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1LL, v10) == 1)
  {
    sub_100041590((uint64_t)v6, &qword_100251658);
LABEL_6:
    *char v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = _swiftEmptyArrayStorage;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v12 = (char *)v9 + v7[7];
    uint64_t v13 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    uint64_t v14 = (char *)v9 + v7[8];
    uint64_t v15 = type metadata accessor for SignedPeerStableInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    uint64_t v16 = (char *)v9 + v7[9];
    uint64_t v17 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    uint64_t v18 = (char *)v9 + v7[10];
    uint64_t v19 = type metadata accessor for SignedRecoveryVoucher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
    uint64_t v20 = (char *)v9 + v7[11];
    uint64_t v21 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
    return sub_100065434;
  }

  if (swift_getEnumCaseMultiPayload(v6, v10) != 2)
  {
    sub_1000415CC((uint64_t)v6, type metadata accessor for PeerDifference.OneOf_Operation);
    goto LABEL_6;
  }

  sub_100041608((uint64_t)v6, (uint64_t)v9, type metadata accessor for Peer);
  return sub_100065434;
}

void sub_100065434(uint64_t **a1, char a2)
{
}

void sub_10006543C(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (void *)(*a1)[2];
  size_t v8 = (void *)(*a1)[3];
  uint64_t v10 = **a1;
  char v9 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    sub_10004164C((*a1)[3], (uint64_t)v7, type metadata accessor for Peer);
    sub_100041590(v10, &qword_100251658);
    sub_100041608((uint64_t)v7, v10, type metadata accessor for Peer);
    swift_storeEnumTagMultiPayload(v10, v5, a3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v10, 0LL, 1LL, v5);
    sub_1000415CC((uint64_t)v8, type metadata accessor for Peer);
  }

  else
  {
    sub_100041590(**a1, &qword_100251658);
    sub_100041608((uint64_t)v8, v10, type metadata accessor for Peer);
    swift_storeEnumTagMultiPayload(v10, v5, a3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v10, 0LL, 1LL, v5);
  }

  free(v8);
  free(v7);
  free(v9);
  free(v4);
}

uint64_t PeerDifference.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for PeerDifference, a1);
}

uint64_t sub_100065570@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t PeerDifference.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for PeerDifference);
}

uint64_t sub_1000655C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*PeerDifference.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t PeerDifference.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
  type metadata accessor for PeerDifference(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t (*TLKShare.epoch.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t (*TLKShare.keyUuid.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t (*TLKShare.poisoned.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t (*TLKShare.receiver.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t (*TLKShare.receiverPublicEncryptionKey.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t (*TLKShare.sender.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t (*TLKShare.signature.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t TLKShare.version.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t TLKShare.version.setter(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t (*TLKShare.version.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t TLKShare.wrappedkey.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain(*(void *)(v0 + 136));
  return v1;
}

uint64_t TLKShare.wrappedkey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 136));
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 136) = a2;
  return result;
}

uint64_t (*TLKShare.wrappedkey.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t TLKShare.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000790D8(type metadata accessor for TLKShare, a1);
}

uint64_t TLKShare.unknownFields.setter(uint64_t a1)
{
  return sub_100079130(a1, type metadata accessor for TLKShare);
}

uint64_t (*TLKShare.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t TLKShare.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0xE000000000000000LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  a1[8] = 0xE000000000000000LL;
  a1[9] = 0LL;
  a1[10] = 0xE000000000000000LL;
  a1[11] = 0LL;
  a1[12] = 0xE000000000000000LL;
  a1[13] = 0LL;
  a1[14] = 0xE000000000000000LL;
  a1[15] = 0LL;
  a1[16] = 0LL;
  a1[17] = 0xE000000000000000LL;
  type metadata accessor for TLKShare(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t (*ViewKey.uploadOsVersion.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t ViewKey.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006815C(type metadata accessor for ViewKey, a1);
}

uint64_t ViewKey.unknownFields.setter(uint64_t a1)
{
  return sub_1000681B4(a1, type metadata accessor for ViewKey);
}

uint64_t (*ViewKey.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t ViewKey.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = 0xE000000000000000LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  type metadata accessor for ViewKey(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t ViewKeys.view.getter()
{
  return sub_1000671D4(type metadata accessor for ViewKeys);
}

void (*ViewKeys.view.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_100065954;
}

void sub_100065954(uint64_t *a1, char a2)
{
}

uint64_t ViewKeys.newTlk.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000662C8( &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk,  a1);
}

void (*ViewKeys.newTlk.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for ViewKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  char v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251EE0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *char v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    v9[4] = 0LL;
    *((_BYTE *)v9 + 40) = 1;
    v9[6] = 0LL;
    v9[7] = 0xE000000000000000LL;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251EE0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for ViewKey);
  }

  return sub_100065ACC;
}

void sub_100065ACC(uint64_t a1, char a2)
{
}

BOOL ViewKeys.hasNewTlk.getter()
{
  return sub_100065DD4( &qword_100251EE0,  type metadata accessor for ViewKeys,  &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk,  type metadata accessor for ViewKey);
}

Swift::Void __swiftcall ViewKeys.clearNewTlk()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100081120(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251EE0);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t ViewKeys.newClassA.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000662C8( &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  a1);
}

void (*ViewKeys.newClassA.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for ViewKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251EE0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    v9[4] = 0LL;
    *((_BYTE *)v9 + 40) = 1;
    v9[6] = 0LL;
    v9[7] = 0xE000000000000000LL;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251EE0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for ViewKey);
  }

  return sub_100065D9C;
}

void sub_100065D9C(uint64_t a1, char a2)
{
}

BOOL ViewKeys.hasNewClassA.getter()
{
  return sub_100065DD4( &qword_100251EE0,  type metadata accessor for ViewKeys,  &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  type metadata accessor for ViewKey);
}

BOOL sub_100065DD4( uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = *(void *)(v4 + *(int *)(a2(0LL) + 20)) + *a3;
  swift_beginAccess(v13, v18, 0LL, 0LL);
  sub_10000FC68(v13, (uint64_t)v12, a1);
  uint64_t v14 = a4(0LL);
  BOOL v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v12, 1LL, v14) != 1;
  sub_100041590((uint64_t)v12, a1);
  return v15;
}

Swift::Void __swiftcall ViewKeys.clearNewClassA()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100081120(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251EE0);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t ViewKeys.newClassC.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000662C8( &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  a1);
}

void (*ViewKeys.newClassC.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for ViewKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251EE0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    v9[4] = 0LL;
    *((_BYTE *)v9 + 40) = 1;
    v9[6] = 0LL;
    v9[7] = 0xE000000000000000LL;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251EE0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for ViewKey);
  }

  return sub_100066150;
}

void sub_100066150(uint64_t a1, char a2)
{
}

BOOL ViewKeys.hasNewClassC.getter()
{
  return sub_100065DD4( &qword_100251EE0,  type metadata accessor for ViewKeys,  &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  type metadata accessor for ViewKey);
}

Swift::Void __swiftcall ViewKeys.clearNewClassC()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100081120(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251EE0);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t ViewKeys.oldTlk.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000662C8( &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  a1);
}

uint64_t sub_1000662C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = *(void *)(v2 + *(int *)(type metadata accessor for ViewKeys(0LL) + 20)) + *a1;
  swift_beginAccess(v9, v13, 0LL, 0LL);
  sub_10000FC68(v9, (uint64_t)v8, &qword_100251EE0);
  uint64_t v10 = type metadata accessor for ViewKey(0LL);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0xE000000000000000LL;
  *(void *)(a2 + 32) = 0LL;
  *(_BYTE *)(a2 + 40) = 1;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0xE000000000000000LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, &qword_100251EE0);
}

uint64_t ViewKeys.oldTlk.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100081120(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for ViewKey);
  uint64_t v19 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251EE0);
  uint64_t v20 = v18 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251EE0);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*ViewKeys.oldTlk.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251EE0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for ViewKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251EE0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    v9[4] = 0LL;
    *((_BYTE *)v9 + 40) = 1;
    v9[6] = 0LL;
    v9[7] = 0xE000000000000000LL;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251EE0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for ViewKey);
  }

  return sub_1000666D4;
}

void sub_1000666D4(uint64_t a1, char a2)
{
}

BOOL ViewKeys.hasOldTlk.getter()
{
  return sub_100065DD4( &qword_100251EE0,  type metadata accessor for ViewKeys,  &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  type metadata accessor for ViewKey);
}

Swift::Void __swiftcall ViewKeys.clearOldTlk()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for ViewKeys(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for ViewKeys._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100081120(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for ViewKey(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251EE0);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t ViewKeys.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076760( type metadata accessor for ViewKeys,  &qword_100250CB8,  &qword_100251EA8,  (uint64_t)sub_100081050,  a1);
}

uint64_t ViewKeysRecords.tlk.setter(uint64_t a1)
{
  return sub_1000796E4(a1, type metadata accessor for ViewKeysRecords);
}

void (*ViewKeysRecords.tlk.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_1002517E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ViewKeysRecords(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_1002517E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v5, &qword_1002517E0);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100066994;
}

void sub_100066994(uint64_t a1, char a2)
{
}

void sub_1000669A0(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(int *)(*(void *)a1 + 48LL);
  uint64_t v6 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v7 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v8 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v9 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v10 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v11 = **(void **)a1 + v5;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void, void *, uint64_t))(v9 + 16))(*(void *)(*(void *)a1 + 32LL), v7, v8);
    sub_100041590(v11, a3);
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 32))(v11, v6, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v11, 0LL, 1LL, v8);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v7, v8);
  }

  else
  {
    sub_100041590(**(void **)a1 + v5, a3);
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 32))(v11, v7, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v11, 0LL, 1LL, v8);
  }

  free(v7);
  free(v6);
  free(v10);
  free(v4);
}

BOOL ViewKeysRecords.hasTlk.getter()
{
  return sub_100068F74( &qword_1002517E0,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
}

Swift::Void __swiftcall ViewKeysRecords.clearTlk()()
{
}

uint64_t ViewKeysRecords.classA.setter(uint64_t a1)
{
  return sub_100066AF8( a1,  type metadata accessor for ViewKeysRecords,  &qword_1002517E0,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
}

uint64_t sub_100066AF8( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 24);
  sub_100041590(v8, a3);
  uint64_t v9 = a4(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, a1, v9);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v8, 0LL, 1LL, v9);
}

void (*ViewKeysRecords.classA.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_1002517E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ViewKeysRecords(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_1002517E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v5, &qword_1002517E0);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100066994;
}

BOOL ViewKeysRecords.hasClassA.getter()
{
  return sub_100066CB0( &qword_1002517E0,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
}

BOOL sub_100066CB0(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 24), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall ViewKeysRecords.clearClassA()()
{
}

uint64_t sub_100066D88(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 24);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t ViewKeysRecords.classC.setter(uint64_t a1)
{
  return sub_1000751F4( a1,  type metadata accessor for ViewKeysRecords,  &qword_1002517E0,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
}

void (*ViewKeysRecords.classC.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_1002517E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ViewKeysRecords(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_1002517E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v5, &qword_1002517E0);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100066994;
}

BOOL ViewKeysRecords.hasClassC.getter()
{
  return sub_100066F44( &qword_1002517E0,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
}

BOOL sub_100066F44(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 28), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall ViewKeysRecords.clearClassC()()
{
}

uint64_t sub_10006701C(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 28);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t ViewKeysRecords.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
  v6(v3, 1LL, 1LL, v4);
  v6(a1 + v2[6], 1LL, 1LL, v4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(a1 + v2[7], 1LL, 1LL, v4);
}

uint64_t (*Bottle.bottleID.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t Bottle.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E11C(type metadata accessor for Bottle, a1);
}

uint64_t Bottle.unknownFields.setter(uint64_t a1)
{
  return sub_10006E174(a1, type metadata accessor for Bottle);
}

uint64_t (*Bottle.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t Bottle.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 16) = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 32) = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = xmmword_1001DE6F0;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  type metadata accessor for Bottle(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t EscrowPair.escrowRecordID.getter()
{
  return sub_1000671D4(type metadata accessor for EscrowPair);
}

uint64_t sub_1000671D4(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 16, v5, 0LL, 0LL);
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(*(void *)(v2 + 24));
  return v3;
}

uint64_t EscrowPair.escrowRecordID.setter(uint64_t a1, uint64_t a2)
{
  return sub_10006724C( a1,  a2,  type metadata accessor for EscrowPair,  type metadata accessor for EscrowPair._StorageClass,  sub_100083C2C);
}

uint64_t sub_10006724C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = v5;
  uint64_t v11 = *(int *)(a3(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a4(0LL);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v14 = swift_retain(v12);
    uint64_t v15 = a5(v14);
    uint64_t v16 = *(void *)(v8 + v11);
    *(void *)(v8 + v11) = v15;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v8 + v11);
  swift_beginAccess(v17 + 16, v20, 1LL, 0LL);
  uint64_t v18 = *(void *)(v17 + 24);
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  return swift_bridgeObjectRelease(v18);
}

void (*EscrowPair.escrowRecordID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowPair(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_10006738C;
}

void sub_10006738C(uint64_t *a1, char a2)
{
}

void sub_1000673A0( uint64_t *a1, char a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 72);
  uint64_t v8 = *(int *)(*a1 + 96);
  uint64_t v9 = *(void *)(*a1 + 80);
  uint64_t v10 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v10 + v8)) & 1) == 0)
    {
      uint64_t v11 = *(int *)(v6 + 96);
      uint64_t v12 = *(void *)(v6 + 88);
      uint64_t v13 = *(void *)(v12 + v11);
      uint64_t v14 = a3(0LL);
      swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
      uint64_t v15 = swift_retain(v13);
      uint64_t v16 = a4(v15);
      uint64_t v17 = *(void *)(v12 + v11);
      *(void *)(v12 + v11) = v16;
      swift_release(v17);
    }

    uint64_t v18 = *(void *)(*(void *)(v6 + 88) + *(int *)(v6 + 96));
    swift_beginAccess(v18 + 16, v6 + 24, 1LL, 0LL);
    uint64_t v19 = *(void *)(v18 + 24);
    *(void *)(v18 + 16) = v7;
    *(void *)(v18 + 24) = v9;
    swift_bridgeObjectRelease(v19);
    uint64_t v20 = *(void *)(v6 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v10 + v8)) & 1) == 0)
    {
      uint64_t v21 = *(int *)(v6 + 96);
      uint64_t v22 = *(void *)(v6 + 88);
      uint64_t v23 = *(void *)(v22 + v21);
      uint64_t v24 = a3(0LL);
      swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
      uint64_t v25 = swift_retain(v23);
      uint64_t v26 = a4(v25);
      uint64_t v27 = *(void *)(v22 + v21);
      *(void *)(v22 + v21) = v26;
      swift_release(v27);
    }

    uint64_t v28 = *(void *)(*(void *)(v6 + 88) + *(int *)(v6 + 96));
    swift_beginAccess(v28 + 16, v6 + 48, 1LL, 0LL);
    uint64_t v20 = *(void *)(v28 + 24);
    *(void *)(v28 + 16) = v7;
    *(void *)(v28 + 24) = v9;
  }

  swift_bridgeObjectRelease(v20);
  free((void *)v6);
}

uint64_t EscrowPair.bottle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006AF50( type metadata accessor for EscrowPair,  &OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  a1);
}

uint64_t EscrowPair.bottle.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F38);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EscrowPair(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EscrowPair._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100083C2C(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Bottle);
  uint64_t v19 = type metadata accessor for Bottle(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F38);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F38);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EscrowPair.bottle.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F38);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Bottle(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F38);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    v9[2] = xmmword_1001DE6F0;
    v9[3] = xmmword_1001DE6F0;
    *((void *)v9 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v9 + 9) = 0xE000000000000000LL;
    *((void *)v9 + 10) = 0LL;
    *((void *)v9 + 11) = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F38);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Bottle);
  }

  return sub_1000677F0;
}

void sub_1000677F0(uint64_t a1, char a2)
{
}

BOOL EscrowPair.hasBottle.getter()
{
  return sub_100065DD4( &qword_100251F38,  type metadata accessor for EscrowPair,  &OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  type metadata accessor for Bottle);
}

Swift::Void __swiftcall EscrowPair.clearBottle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EscrowPair(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EscrowPair._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100083C2C(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Bottle(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F38);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EscrowPair.record.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007578((uint64_t *)&unk_100257060);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v7, v15, 0LL, 0LL);
  sub_10000FC68(v7, (uint64_t)v6, (uint64_t *)&unk_100257060);
  uint64_t v8 = type metadata accessor for EscrowInformation(0LL);
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v9 = a1 + *(int *)(v8 + 48);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = a1 + *(int *)(v8 + 52);
  uint64_t v12 = type metadata accessor for EscrowInformation.Metadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_100041590((uint64_t)v6, (uint64_t *)&unk_100257060);
}

uint64_t EscrowInformation.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for EscrowInformation(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = a1 + *(int *)(v2 + 48);
  uint64_t v4 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 52);
  uint64_t v6 = type metadata accessor for EscrowInformation.Metadata(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t EscrowPair.record.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100257060);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EscrowPair(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EscrowPair._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100083C2C(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for EscrowInformation);
  uint64_t v19 = type metadata accessor for EscrowInformation(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_100257060);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, (uint64_t *)&unk_100257060);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EscrowPair.record.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100257060);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for EscrowInformation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, (uint64_t *)&unk_100257060);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0LL;
    v9[3] = 0LL;
    v9[4] = 0LL;
    v9[2] = 0xE000000000000000LL;
    *((_BYTE *)v9 + 40) = 1;
    v9[6] = 0LL;
    *((_BYTE *)v9 + 56) = 1;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v12 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = (char *)v9 + *(int *)(v6 + 52);
    uint64_t v14 = type metadata accessor for EscrowInformation.Metadata(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100257060);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for EscrowInformation);
  }

  return sub_100067ED8;
}

void sub_100067ED8(uint64_t a1, char a2)
{
}

BOOL EscrowPair.hasRecord.getter()
{
  return sub_100065DD4( (uint64_t *)&unk_100257060,  type metadata accessor for EscrowPair,  &OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  type metadata accessor for EscrowInformation);
}

Swift::Void __swiftcall EscrowPair.clearRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100257060);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EscrowPair(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EscrowPair._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100083C2C(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for EscrowInformation(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, (uint64_t *)&unk_100257060);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EscrowPair.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076760( type metadata accessor for EscrowPair,  &qword_100250CD8,  &qword_100251EB0,  (uint64_t)sub_100083B8C,  a1);
}

uint64_t Changes.recoverySigningPubKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_1000084E8(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t Changes.recoverySigningPubKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000852C(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t Changes.recoveryEncryptionPubKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_1000084E8(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t Changes.recoveryEncryptionPubKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000852C(*(void *)(v2 + 40), *(void *)(v2 + 48));
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t (*Changes.recoveryEncryptionPubKey.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t Changes.more.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t Changes.more.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t Changes.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006815C(type metadata accessor for Changes, a1);
}

uint64_t sub_10006815C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t Changes.unknownFields.setter(uint64_t a1)
{
  return sub_1000681B4(a1, type metadata accessor for Changes);
}

uint64_t sub_1000681B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*Changes.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t Changes.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + 24) = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 40) = xmmword_1001DE6F0;
  *(_BYTE *)(a1 + 56) = 0;
  type metadata accessor for Changes(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t GetSupportAppInfoRequest.page.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*DirectPCSIdentityFetchResponse.synckeys.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t PolicyDocumentKey.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for PolicyDocumentKey, a1);
}

uint64_t PolicyDocumentKey.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for PolicyDocumentKey);
}

uint64_t (*PolicyDocumentKey.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t PolicyDocumentKey.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0xE000000000000000LL;
  type metadata accessor for PolicyDocumentKey(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t PolicyDocumentMapEntry.key.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100251668);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PolicyDocumentMapEntry(0LL);
  sub_10000FC68(v1 + *(int *)(v7 + 24), (uint64_t)v6, &qword_100251668);
  uint64_t v8 = type metadata accessor for PolicyDocumentKey(0LL);
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v6, &qword_100251668);
}

uint64_t PolicyDocumentMapEntry.key.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for PolicyDocumentMapEntry,  &qword_100251668,  type metadata accessor for PolicyDocumentKey);
}

void (*PolicyDocumentMapEntry.key.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251668);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for PolicyDocumentKey(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for PolicyDocumentMapEntry(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251668);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0LL;
    v9[2] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251668);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for PolicyDocumentKey);
  }

  return sub_100068544;
}

void sub_100068544(uint64_t a1, char a2)
{
}

BOOL PolicyDocumentMapEntry.hasKey.getter()
{
  return sub_100066CB0( &qword_100251668,  type metadata accessor for PolicyDocumentMapEntry,  type metadata accessor for PolicyDocumentKey);
}

Swift::Void __swiftcall PolicyDocumentMapEntry.clearKey()()
{
}

uint64_t PolicyDocumentMapEntry.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for PolicyDocumentMapEntry, a1);
}

uint64_t PolicyDocumentMapEntry.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for PolicyDocumentMapEntry);
}

uint64_t (*PolicyDocumentMapEntry.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t PolicyDocumentMapEntry.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1001DE6F0;
  uint64_t v2 = type metadata accessor for PolicyDocumentMapEntry(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for PolicyDocumentKey(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t AccountInfo.flags.getter()
{
  return *v0;
}

uint64_t AccountInfo.flags.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t AccountInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for AccountInfo, a1);
}

uint64_t AccountInfo.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for AccountInfo);
}

uint64_t (*AccountInfo.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t AccountInfo.init()@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for AccountInfo(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t Metrics.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for Metrics, a1);
}

uint64_t Metrics.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for Metrics);
}

uint64_t (*Metrics.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t Metrics.init()@<X0>(void *a1@<X8>)
{
  return sub_100079BA4((void (*)(void))type metadata accessor for Metrics, a1);
}

uint64_t ResetRequest.resetReason.getter()
{
  return *(void *)v0;
}

uint64_t ResetRequest.resetReason.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + _Block_object_dispose(va, 8) = a2 & 1;
  return result;
}

uint64_t ResetRequest.idmsTargetContext.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t ResetRequest.idmsTargetContext.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t ResetRequest.idmsCuttlefishPassword.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t ResetRequest.idmsCuttlefishPassword.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t ResetRequest.testingNotifyIdms.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ResetRequest.testingNotifyIdms.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t ResetRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_100075D30(type metadata accessor for ResetRequest, a1);
}

uint64_t ResetRequest.accountInfo.setter(uint64_t a1)
{
  return sub_100075E3C( a1,  type metadata accessor for ResetRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*ResetRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ResetRequest(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

void sub_100068940(uint64_t a1, char a2)
{
}

BOOL ResetRequest.hasAccountInfo.getter()
{
  return sub_100068970( &qword_100251F50,  type metadata accessor for ResetRequest,  type metadata accessor for AccountInfo);
}

BOOL sub_100068970(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 40), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall ResetRequest.clearAccountInfo()()
{
}

uint64_t sub_100068A48(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 40);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t ResetRequest.metrics.setter(uint64_t a1)
{
  return sub_10007602C( a1,  type metadata accessor for ResetRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*ResetRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ResetRequest(0LL) + 44);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

void sub_100068BF8(uint64_t a1, char a2)
{
}

BOOL ResetRequest.hasMetrics.getter()
{
  return sub_100068C28(&qword_100257000, type metadata accessor for ResetRequest, type metadata accessor for Metrics);
}

BOOL sub_100068C28(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 44), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall ResetRequest.clearMetrics()()
{
}

uint64_t sub_100068D00(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 44);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t ResetRequest.isGuitarfish.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ResetRequest.isGuitarfish.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*ResetAccountCDPContentsRequest.isGuitarfish.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t ResetRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006815C(type metadata accessor for ResetRequest, a1);
}

uint64_t ResetRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000681B4(a1, type metadata accessor for ResetRequest);
}

uint64_t (*ResetRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t ResetRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076254(type metadata accessor for ResetRequest, a1);
}

uint64_t ResetResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071B6C(type metadata accessor for ResetResponse, a1);
}

uint64_t ResetResponse.changes.setter(uint64_t a1)
{
  return sub_100071C9C( a1,  type metadata accessor for ResetResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

void (*ResetResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ResetResponse(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

void sub_100068F44(uint64_t a1, char a2)
{
}

BOOL ResetResponse.hasChanges.getter()
{
  return sub_100068F74( (uint64_t *)&unk_100256C90,  type metadata accessor for ResetResponse,  type metadata accessor for Changes);
}

BOOL sub_100068F74(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 20), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall ResetResponse.clearChanges()()
{
}

uint64_t sub_10006904C(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 20);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t ResetResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_10006F0D8(type metadata accessor for ResetResponse, a1);
}

uint64_t EstablishRequest.peer.getter@<X0>(void *a1@<X8>)
{
  return sub_10006F8D4( type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  a1);
}

uint64_t EstablishRequest.peer.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F58);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_1000870D0(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Peer);
  uint64_t v19 = type metadata accessor for Peer(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F58);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F58);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EstablishRequest.peer.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F58);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F58);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = _swiftEmptyArrayStorage;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + v6[7];
    uint64_t v12 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = (char *)v9 + v6[8];
    uint64_t v14 = type metadata accessor for SignedPeerStableInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    uint64_t v15 = (char *)v9 + v6[9];
    uint64_t v16 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    uint64_t v17 = (char *)v9 + v6[10];
    uint64_t v18 = type metadata accessor for SignedRecoveryVoucher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
    uint64_t v19 = (char *)v9 + v6[11];
    uint64_t v20 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
    sub_100041590((uint64_t)v5, &qword_100251F58);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Peer);
  }

  return sub_100069480;
}

void sub_100069480(uint64_t a1, char a2)
{
}

BOOL EstablishRequest.hasPeer.getter()
{
  return sub_100065DD4( &qword_100251F58,  type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  type metadata accessor for Peer);
}

Swift::Void __swiftcall EstablishRequest.clearPeer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000870D0(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Peer(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F58);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EstablishRequest.bottle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006AF50( type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  a1);
}

uint64_t EstablishRequest.bottle.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F38);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_1000870D0(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Bottle);
  uint64_t v19 = type metadata accessor for Bottle(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F38);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F38);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EstablishRequest.bottle.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F38);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Bottle(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F38);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    v9[2] = xmmword_1001DE6F0;
    v9[3] = xmmword_1001DE6F0;
    *((void *)v9 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v9 + 9) = 0xE000000000000000LL;
    *((void *)v9 + 10) = 0LL;
    *((void *)v9 + 11) = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F38);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Bottle);
  }

  return sub_1000698D8;
}

void sub_1000698D8(uint64_t a1, char a2)
{
}

BOOL EstablishRequest.hasBottle.getter()
{
  return sub_100065DD4( &qword_100251F38,  type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  type metadata accessor for Bottle);
}

Swift::Void __swiftcall EstablishRequest.clearBottle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000870D0(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Bottle(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F38);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EstablishRequest.viewKeys.getter()
{
  return sub_100069B34( type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
}

uint64_t EstablishRequest.viewKeys.setter(uint64_t a1)
{
  return sub_100069BB4( a1,  type metadata accessor for EstablishRequest,  type metadata accessor for EstablishRequest._StorageClass,  sub_1000870D0,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
}

void (*EstablishRequest.viewKeys.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100069B04;
}

void sub_100069B04(uint64_t *a1, char a2)
{
}

uint64_t EstablishRequest.tlkShares.getter()
{
  return sub_100069B34( type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
}

uint64_t sub_100069B34(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (void *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v3);
}

uint64_t EstablishRequest.tlkShares.setter(uint64_t a1)
{
  return sub_100069BB4( a1,  type metadata accessor for EstablishRequest,  type metadata accessor for EstablishRequest._StorageClass,  sub_1000870D0,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
}

uint64_t sub_100069BB4( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v14 = swift_retain(v12);
    uint64_t v15 = a4(v14);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v15;
    swift_release(v16);
  }

  uint64_t v17 = (uint64_t *)(*(void *)(v9 + v11) + *a5);
  swift_beginAccess(v17, v20, 1LL, 0LL);
  uint64_t v18 = *v17;
  *uint64_t v17 = a1;
  return swift_bridgeObjectRelease(v18);
}

void (*EstablishRequest.tlkShares.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100069D08;
}

void sub_100069D08(uint64_t *a1, char a2)
{
}

void sub_100069D24( uint64_t *a1, char a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), void *a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 72);
  uint64_t v10 = *(int *)(*a1 + 88);
  uint64_t v11 = *(void *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v11 + v10)) & 1) == 0)
    {
      uint64_t v12 = *(int *)(v8 + 88);
      uint64_t v13 = *(void *)(v8 + 80);
      uint64_t v14 = *(void *)(v13 + v12);
      uint64_t v15 = a3(0LL);
      swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      uint64_t v16 = swift_retain(v14);
      uint64_t v17 = a4(v16);
      uint64_t v18 = *(void *)(v13 + v12);
      *(void *)(v13 + v12) = v17;
      swift_release(v18);
    }

    uint64_t v19 = (uint64_t *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess(v19, v8 + 24, 1LL, 0LL);
    uint64_t v20 = *v19;
    *uint64_t v19 = v9;
    swift_bridgeObjectRelease(v20);
    uint64_t v21 = *(void *)(v8 + 72);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v11 + v10)) & 1) == 0)
    {
      uint64_t v22 = *(int *)(v8 + 88);
      uint64_t v23 = *(void *)(v8 + 80);
      uint64_t v24 = *(void *)(v23 + v22);
      uint64_t v25 = a3(0LL);
      swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      uint64_t v26 = swift_retain(v24);
      uint64_t v27 = a4(v26);
      uint64_t v28 = *(void *)(v23 + v22);
      *(void *)(v23 + v22) = v27;
      swift_release(v28);
    }

    uint64_t v29 = (uint64_t *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess(v29, v8 + 48, 1LL, 0LL);
    uint64_t v21 = *v29;
    uint64_t *v29 = v9;
  }

  swift_bridgeObjectRelease(v21);
  free((void *)v8);
}

uint64_t EstablishRequest.metrics.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_1000870D0(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Metrics);
  uint64_t v19 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100257000);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100257000);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EstablishRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_10006A164;
}

void sub_10006A164(uint64_t a1, char a2)
{
}

BOOL EstablishRequest.hasMetrics.getter()
{
  return sub_100065DD4( &qword_100257000,  type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall EstablishRequest.clearMetrics()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000870D0(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100257000);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EstablishRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_100070EC4( type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  a1);
}

uint64_t EstablishRequest.accountInfo.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_1000870D0(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for AccountInfo);
  uint64_t v19 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F50);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F50);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EstablishRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_10006A5A4;
}

void sub_10006A5A4(uint64_t a1, char a2)
{
}

BOOL EstablishRequest.hasAccountInfo.getter()
{
  return sub_100065DD4( &qword_100251F50,  type metadata accessor for EstablishRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall EstablishRequest.clearAccountInfo()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EstablishRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EstablishRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000870D0(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F50);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EstablishRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076760( type metadata accessor for EstablishRequest,  &qword_100250D20,  &qword_100251EB8,  (uint64_t)sub_100086FB8,  a1);
}

uint64_t EstablishResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071514(type metadata accessor for EstablishResponse, a1);
}

uint64_t EstablishResponse.changes.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for EstablishResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

void (*EstablishResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for EstablishResponse(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

BOOL EstablishResponse.hasChanges.getter()
{
  return sub_100066CB0( (uint64_t *)&unk_100256C90,  type metadata accessor for EstablishResponse,  type metadata accessor for Changes);
}

Swift::Void __swiftcall EstablishResponse.clearChanges()()
{
}

uint64_t EstablishResponse.zoneKeyHierarchyRecords.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t EstablishResponse.zoneKeyHierarchyRecords.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  void *v1 = a1;
  return result;
}

uint64_t EstablishResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for EstablishResponse, a1);
}

uint64_t EstablishResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for EstablishResponse);
}

uint64_t (*EstablishResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t EstablishResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_10006C6A0(type metadata accessor for EstablishResponse, a1);
}

uint64_t JoinWithVoucherRequest.changeToken.getter()
{
  return sub_1000671D4(type metadata accessor for JoinWithVoucherRequest);
}

uint64_t JoinWithVoucherRequest.changeToken.setter(uint64_t a1, uint64_t a2)
{
  return sub_10006724C( a1,  a2,  type metadata accessor for JoinWithVoucherRequest,  type metadata accessor for JoinWithVoucherRequest._StorageClass,  sub_100089850);
}

void (*JoinWithVoucherRequest.changeToken.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_10006A9FC;
}

void sub_10006A9FC(uint64_t *a1, char a2)
{
}

uint64_t JoinWithVoucherRequest.peer.getter@<X0>(void *a1@<X8>)
{
  return sub_10006F8D4( type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  a1);
}

uint64_t JoinWithVoucherRequest.peer.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F58);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  size_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100089850(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Peer);
  uint64_t v19 = type metadata accessor for Peer(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F58);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F58);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*JoinWithVoucherRequest.peer.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F58);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F58);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = _swiftEmptyArrayStorage;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + v6[7];
    uint64_t v12 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = (char *)v9 + v6[8];
    uint64_t v14 = type metadata accessor for SignedPeerStableInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    uint64_t v15 = (char *)v9 + v6[9];
    uint64_t v16 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    uint64_t v17 = (char *)v9 + v6[10];
    uint64_t v18 = type metadata accessor for SignedRecoveryVoucher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
    uint64_t v19 = (char *)v9 + v6[11];
    uint64_t v20 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
    sub_100041590((uint64_t)v5, &qword_100251F58);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Peer);
  }

  return sub_10006ADD0;
}

void sub_10006ADD0(uint64_t a1, char a2)
{
}

BOOL JoinWithVoucherRequest.hasPeer.getter()
{
  return sub_100065DD4( &qword_100251F58,  type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  type metadata accessor for Peer);
}

Swift::Void __swiftcall JoinWithVoucherRequest.clearPeer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100089850(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Peer(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F58);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t JoinWithVoucherRequest.bottle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006AF50( type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  a1);
}

uint64_t sub_10006AF50@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(void *)(v3 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v11, v15, 0LL, 0LL);
  sub_10000FC68(v11, (uint64_t)v10, &qword_100251F38);
  uint64_t v12 = type metadata accessor for Bottle(0LL);
  *(_OWORD *)a3 = xmmword_1001DE6F0;
  *(_OWORD *)(a3 + 16) = xmmword_1001DE6F0;
  *(_OWORD *)(a3 + 32) = xmmword_1001DE6F0;
  *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = xmmword_1001DE6F0;
  *(void *)(a3 + 64) = 0LL;
  *(void *)(a3 + 72) = 0xE000000000000000LL;
  *(void *)(a3 + 80) = 0LL;
  *(void *)(a3 + 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v10, &qword_100251F38);
}

uint64_t JoinWithVoucherRequest.bottle.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F38);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100089850(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Bottle);
  uint64_t v19 = type metadata accessor for Bottle(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F38);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F38);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*JoinWithVoucherRequest.bottle.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F38);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Bottle(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F38);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    v9[2] = xmmword_1001DE6F0;
    v9[3] = xmmword_1001DE6F0;
    *((void *)v9 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v9 + 9) = 0xE000000000000000LL;
    *((void *)v9 + 10) = 0LL;
    *((void *)v9 + 11) = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F38);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Bottle);
  }

  return sub_10006B358;
}

void sub_10006B358(uint64_t a1, char a2)
{
}

BOOL JoinWithVoucherRequest.hasBottle.getter()
{
  return sub_100065DD4( &qword_100251F38,  type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  type metadata accessor for Bottle);
}

Swift::Void __swiftcall JoinWithVoucherRequest.clearBottle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100089850(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Bottle(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F38);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t JoinWithVoucherRequest.tlkShares.getter()
{
  return sub_100069B34( type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
}

uint64_t JoinWithVoucherRequest.tlkShares.setter(uint64_t a1)
{
  return sub_100069BB4( a1,  type metadata accessor for JoinWithVoucherRequest,  type metadata accessor for JoinWithVoucherRequest._StorageClass,  sub_100089850,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
}

void (*JoinWithVoucherRequest.tlkShares.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10006B584;
}

void sub_10006B584(uint64_t *a1, char a2)
{
}

uint64_t JoinWithVoucherRequest.viewKeys.getter()
{
  return sub_100069B34( type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
}

uint64_t JoinWithVoucherRequest.viewKeys.setter(uint64_t a1)
{
  return sub_100069BB4( a1,  type metadata accessor for JoinWithVoucherRequest,  type metadata accessor for JoinWithVoucherRequest._StorageClass,  sub_100089850,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
}

void (*JoinWithVoucherRequest.viewKeys.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10006B660;
}

void sub_10006B660(uint64_t *a1, char a2)
{
}

uint64_t JoinWithVoucherRequest.trustedDevicesVersion.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v7, v13, 0LL, 0LL);
  sub_10000FC68(v7, (uint64_t)v6, &qword_100256D20);
  uint64_t v8 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v9 = (char *)a1 + *(int *)(v8 + 24);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_100041590((uint64_t)v6, &qword_100256D20);
}

uint64_t JoinWithVoucherRequest.trustedDevicesVersion.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100256D20);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100089850(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for IdmsTrustedDevicesVersion);
  uint64_t v19 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100256D20);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100256D20);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*JoinWithVoucherRequest.trustedDevicesVersion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100256D20);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100256D20);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    uint64_t v12 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100041590((uint64_t)v5, &qword_100256D20);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for IdmsTrustedDevicesVersion);
  }

  return sub_10006BAA8;
}

void sub_10006BAA8(uint64_t a1, char a2)
{
}

BOOL JoinWithVoucherRequest.hasTrustedDevicesVersion.getter()
{
  return sub_100065DD4( &qword_100256D20,  type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion,  type metadata accessor for IdmsTrustedDevicesVersion);
}

Swift::Void __swiftcall JoinWithVoucherRequest.clearTrustedDevicesVersion()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100089850(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100256D20);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t JoinWithVoucherRequest.metrics.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100089850(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Metrics);
  uint64_t v19 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100257000);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100257000);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*JoinWithVoucherRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_10006BEDC;
}

void sub_10006BEDC(uint64_t a1, char a2)
{
}

BOOL JoinWithVoucherRequest.hasMetrics.getter()
{
  return sub_100065DD4( &qword_100257000,  type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall JoinWithVoucherRequest.clearMetrics()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100089850(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100257000);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t JoinWithVoucherRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_100070EC4( type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  a1);
}

uint64_t JoinWithVoucherRequest.accountInfo.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_100089850(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for AccountInfo);
  uint64_t v19 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F50);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F50);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*JoinWithVoucherRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_10006C31C;
}

void sub_10006C31C(uint64_t a1, char a2)
{
}

BOOL JoinWithVoucherRequest.hasAccountInfo.getter()
{
  return sub_100065DD4( &qword_100251F50,  type metadata accessor for JoinWithVoucherRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall JoinWithVoucherRequest.clearAccountInfo()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for JoinWithVoucherRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_100089850(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F50);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t JoinWithVoucherRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076760( type metadata accessor for JoinWithVoucherRequest,  &qword_100250D38,  &qword_100251EC0,  (uint64_t)sub_100089700,  a1);
}

uint64_t JoinWithVoucherResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071514(type metadata accessor for JoinWithVoucherResponse, a1);
}

uint64_t JoinWithVoucherResponse.changes.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

void (*JoinWithVoucherResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for JoinWithVoucherResponse(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

BOOL JoinWithVoucherResponse.hasChanges.getter()
{
  return sub_100066CB0( (uint64_t *)&unk_100256C90,  type metadata accessor for JoinWithVoucherResponse,  type metadata accessor for Changes);
}

Swift::Void __swiftcall JoinWithVoucherResponse.clearChanges()()
{
}

uint64_t JoinWithVoucherResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for JoinWithVoucherResponse, a1);
}

uint64_t JoinWithVoucherResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for JoinWithVoucherResponse);
}

uint64_t (*JoinWithVoucherResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t JoinWithVoucherResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_10006C6A0(type metadata accessor for JoinWithVoucherResponse, a1);
}

uint64_t sub_10006C6A0@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = _swiftEmptyArrayStorage;
  uint64_t v3 = a1(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for Changes(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t UpdateTrustRequest.stableInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006C728( &qword_100251F18,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for SignedPeerStableInfo,  a1);
}

uint64_t sub_10006C728@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2(0LL);
  sub_10000FC68(v4 + *(int *)(v13 + 36), (uint64_t)v12, a1);
  uint64_t v14 = a3(0LL);
  *a4 = xmmword_1001DE6F0;
  a4[1] = xmmword_1001DE6F0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v12, a1);
}

uint64_t UpdateTrustRequest.stableInfoAndSig.setter(uint64_t a1)
{
  return sub_100072E4C( a1,  type metadata accessor for UpdateTrustRequest,  &qword_100251F18,  type metadata accessor for SignedPeerStableInfo);
}

void (*UpdateTrustRequest.stableInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F18);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerStableInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F18);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerStableInfo);
  }

  return sub_100063FFC;
}

BOOL UpdateTrustRequest.hasStableInfoAndSig.getter()
{
  return sub_10006C978( &qword_100251F18,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for SignedPeerStableInfo);
}

BOOL sub_10006C978(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 36), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall UpdateTrustRequest.clearStableInfoAndSig()()
{
}

uint64_t sub_10006CA50(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 36);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t UpdateTrustRequest.dynamicInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006CAD4( &qword_100256CA0,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for SignedPeerDynamicInfo,  a1);
}

uint64_t sub_10006CAD4@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2(0LL);
  sub_10000FC68(v4 + *(int *)(v13 + 40), (uint64_t)v12, a1);
  uint64_t v14 = a3(0LL);
  *a4 = xmmword_1001DE6F0;
  a4[1] = xmmword_1001DE6F0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v12, a1);
}

uint64_t UpdateTrustRequest.dynamicInfoAndSig.setter(uint64_t a1)
{
  return sub_100075E3C( a1,  type metadata accessor for UpdateTrustRequest,  &qword_100256CA0,  type metadata accessor for SignedPeerDynamicInfo);
}

void (*UpdateTrustRequest.dynamicInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100256CA0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100256CA0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100256CA0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerDynamicInfo);
  }

  return sub_1000641AC;
}

BOOL UpdateTrustRequest.hasDynamicInfoAndSig.getter()
{
  return sub_100068970( &qword_100256CA0,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for SignedPeerDynamicInfo);
}

Swift::Void __swiftcall UpdateTrustRequest.clearDynamicInfoAndSig()()
{
}

uint64_t UpdateTrustRequest.tlkShares.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t UpdateTrustRequest.tlkShares.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 32));
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t UpdateTrustRequest.viewKeys.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t UpdateTrustRequest.viewKeys.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 40));
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t UpdateTrustRequest.trustedDevicesVersion.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  sub_10000FC68(v1 + *(int *)(updated + 44), (uint64_t)v6, &qword_100256D20);
  uint64_t v8 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v9 = (char *)a1 + *(int *)(v8 + 24);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_100041590((uint64_t)v6, &qword_100256D20);
}

uint64_t UpdateTrustRequest.trustedDevicesVersion.setter(uint64_t a1)
{
  return sub_10007602C( a1,  type metadata accessor for UpdateTrustRequest,  &qword_100256D20,  type metadata accessor for IdmsTrustedDevicesVersion);
}

void (*UpdateTrustRequest.trustedDevicesVersion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100256D20);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 44);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100256D20);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    uint64_t v12 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100041590((uint64_t)v5, &qword_100256D20);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for IdmsTrustedDevicesVersion);
  }

  return sub_10006D024;
}

void sub_10006D024(uint64_t a1, char a2)
{
}

BOOL UpdateTrustRequest.hasTrustedDevicesVersion.getter()
{
  return sub_100068C28( &qword_100256D20,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for IdmsTrustedDevicesVersion);
}

Swift::Void __swiftcall UpdateTrustRequest.clearTrustedDevicesVersion()()
{
}

uint64_t UpdateTrustRequest.metrics.setter(uint64_t a1)
{
  return sub_10006DA50(a1, type metadata accessor for UpdateTrustRequest);
}

void (*UpdateTrustRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL UpdateTrustRequest.hasMetrics.getter()
{
  return sub_10006DC08( &qword_100257000,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall UpdateTrustRequest.clearMetrics()()
{
}

uint64_t UpdateTrustRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10006DD54(type metadata accessor for UpdateTrustRequest, a1);
}

uint64_t UpdateTrustRequest.accountInfo.setter(uint64_t a1)
{
  return sub_1000767EC( a1,  type metadata accessor for UpdateTrustRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*UpdateTrustRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for UpdateTrustRequest(0LL) + 52);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL UpdateTrustRequest.hasAccountInfo.getter()
{
  return sub_10006DFA0( &qword_100251F50,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall UpdateTrustRequest.clearAccountInfo()()
{
}

uint64_t UpdateTrustRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000731B8(type metadata accessor for UpdateTrustRequest, a1);
}

uint64_t UpdateTrustRequest.unknownFields.setter(uint64_t a1)
{
  return sub_100073210(a1, type metadata accessor for UpdateTrustRequest);
}

uint64_t (*UpdateTrustRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t UpdateTrustRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  a1[4] = _swiftEmptyArrayStorage;
  a1[5] = _swiftEmptyArrayStorage;
  uint64_t updated = (int *)type metadata accessor for UpdateTrustRequest(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = (char *)a1 + updated[9];
  uint64_t v4 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + updated[10];
  uint64_t v6 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = (char *)a1 + updated[11];
  uint64_t v8 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = (char *)a1 + updated[12];
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = (char *)a1 + updated[13];
  uint64_t v12 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( v11,  1LL,  1LL,  v12);
}

uint64_t UpdateTrustResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071514(type metadata accessor for UpdateTrustResponse, a1);
}

uint64_t UpdateTrustResponse.changes.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for UpdateTrustResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

void (*UpdateTrustResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for UpdateTrustResponse(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

BOOL UpdateTrustResponse.hasChanges.getter()
{
  return sub_100066CB0( (uint64_t *)&unk_100256C90,  type metadata accessor for UpdateTrustResponse,  type metadata accessor for Changes);
}

Swift::Void __swiftcall UpdateTrustResponse.clearChanges()()
{
}

uint64_t UpdateTrustResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for UpdateTrustResponse, a1);
}

uint64_t UpdateTrustResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for UpdateTrustResponse);
}

uint64_t (*UpdateTrustResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t UpdateTrustResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_10006C6A0(type metadata accessor for UpdateTrustResponse, a1);
}

uint64_t SetRecoveryKeyRequest.recoverySigningPubKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1000084E8(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t SetRecoveryKeyRequest.recoverySigningPubKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000852C(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t SetRecoveryKeyRequest.recoveryEncryptionPubKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1000084E8(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t SetRecoveryKeyRequest.recoveryEncryptionPubKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000852C(*(void *)(v2 + 48), *(void *)(v2 + 56));
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t SetRecoveryKeyRequest.stableInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006D7A8( &qword_100251F18,  type metadata accessor for SetRecoveryKeyRequest,  type metadata accessor for SignedPeerStableInfo,  a1);
}

uint64_t sub_10006D7A8@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2(0LL);
  sub_10000FC68(v4 + *(int *)(v13 + 44), (uint64_t)v12, a1);
  uint64_t v14 = a3(0LL);
  *a4 = xmmword_1001DE6F0;
  a4[1] = xmmword_1001DE6F0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v12, a1);
}

uint64_t SetRecoveryKeyRequest.stableInfoAndSig.setter(uint64_t a1)
{
  return sub_10007602C( a1,  type metadata accessor for SetRecoveryKeyRequest,  &qword_100251F18,  type metadata accessor for SignedPeerStableInfo);
}

void (*SetRecoveryKeyRequest.stableInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F18);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerStableInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for SetRecoveryKeyRequest(0LL) + 44);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F18);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerStableInfo);
  }

  return sub_100063FFC;
}

BOOL SetRecoveryKeyRequest.hasStableInfoAndSig.getter()
{
  return sub_100068C28( &qword_100251F18,  type metadata accessor for SetRecoveryKeyRequest,  type metadata accessor for SignedPeerStableInfo);
}

Swift::Void __swiftcall SetRecoveryKeyRequest.clearStableInfoAndSig()()
{
}

uint64_t SetRecoveryKeyRequest.tlkShares.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t SetRecoveryKeyRequest.tlkShares.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 64));
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t SetRecoveryKeyRequest.metrics.setter(uint64_t a1)
{
  return sub_10006DA50(a1, type metadata accessor for SetRecoveryKeyRequest);
}

uint64_t sub_10006DA50(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 48);
  sub_100041590(v4, &qword_100257000);
  sub_100041608(a1, v4, type metadata accessor for Metrics);
  uint64_t v5 = type metadata accessor for Metrics(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 0LL, 1LL, v5);
}

void (*SetRecoveryKeyRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for SetRecoveryKeyRequest(0LL) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL SetRecoveryKeyRequest.hasMetrics.getter()
{
  return sub_10006DC08( &qword_100257000,  type metadata accessor for SetRecoveryKeyRequest,  type metadata accessor for Metrics);
}

BOOL sub_10006DC08(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 48), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall SetRecoveryKeyRequest.clearMetrics()()
{
}

uint64_t sub_10006DCE0(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 48);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t SetRecoveryKeyRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10006DD54(type metadata accessor for SetRecoveryKeyRequest, a1);
}

uint64_t sub_10006DD54@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 52), (uint64_t)v8, &qword_100251F50);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  *a2 = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, &qword_100251F50);
}

uint64_t SetRecoveryKeyRequest.accountInfo.setter(uint64_t a1)
{
  return sub_1000767EC( a1,  type metadata accessor for SetRecoveryKeyRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*SetRecoveryKeyRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for SetRecoveryKeyRequest(0LL) + 52);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL SetRecoveryKeyRequest.hasAccountInfo.getter()
{
  return sub_10006DFA0( &qword_100251F50,  type metadata accessor for SetRecoveryKeyRequest,  type metadata accessor for AccountInfo);
}

BOOL sub_10006DFA0(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 52), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall SetRecoveryKeyRequest.clearAccountInfo()()
{
}

uint64_t sub_10006E078(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 52);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t SetRecoveryKeyRequest.viewKeys.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 72));
}

uint64_t SetRecoveryKeyRequest.viewKeys.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 72));
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t SetRecoveryKeyRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E11C(type metadata accessor for SetRecoveryKeyRequest, a1);
}

uint64_t sub_10006E11C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t SetRecoveryKeyRequest.unknownFields.setter(uint64_t a1)
{
  return sub_10006E174(a1, type metadata accessor for SetRecoveryKeyRequest);
}

uint64_t sub_10006E174(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*SetRecoveryKeyRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SetRecoveryKeyRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(_OWORD *)(a1 + 32) = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = xmmword_1001DE6F0;
  *(void *)(a1 + 64) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 72) = _swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for SetRecoveryKeyRequest(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = a1 + v2[11];
  uint64_t v4 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + v2[12];
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = a1 + v2[13];
  uint64_t v8 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
}

uint64_t SetRecoveryKeyResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071514(type metadata accessor for SetRecoveryKeyResponse, a1);
}

uint64_t SetRecoveryKeyResponse.changes.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

void (*SetRecoveryKeyResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for SetRecoveryKeyResponse(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

BOOL SetRecoveryKeyResponse.hasChanges.getter()
{
  return sub_100066CB0( (uint64_t *)&unk_100256C90,  type metadata accessor for SetRecoveryKeyResponse,  type metadata accessor for Changes);
}

Swift::Void __swiftcall SetRecoveryKeyResponse.clearChanges()()
{
}

uint64_t SetRecoveryKeyResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for SetRecoveryKeyResponse, a1);
}

uint64_t SetRecoveryKeyResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for SetRecoveryKeyResponse);
}

uint64_t (*SetRecoveryKeyResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SetRecoveryKeyResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_10006C6A0(type metadata accessor for SetRecoveryKeyResponse, a1);
}

uint64_t RemoveRecoveryKeyRequest.stableInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006E4D4( &qword_100251F18,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for SignedPeerStableInfo,  a1);
}

uint64_t sub_10006E4D4@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2(0LL);
  sub_10000FC68(v4 + *(int *)(v13 + 28), (uint64_t)v12, a1);
  uint64_t v14 = a3(0LL);
  *a4 = xmmword_1001DE6F0;
  a4[1] = xmmword_1001DE6F0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v12, a1);
}

uint64_t RemoveRecoveryKeyRequest.stableInfoAndSig.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for RemoveRecoveryKeyRequest,  &qword_100251F18,  type metadata accessor for SignedPeerStableInfo);
}

void (*RemoveRecoveryKeyRequest.stableInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F18);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerStableInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F18);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerStableInfo);
  }

  return sub_100063FFC;
}

BOOL RemoveRecoveryKeyRequest.hasStableInfoAndSig.getter()
{
  return sub_100066F44( &qword_100251F18,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for SignedPeerStableInfo);
}

Swift::Void __swiftcall RemoveRecoveryKeyRequest.clearStableInfoAndSig()()
{
}

uint64_t RemoveRecoveryKeyRequest.dynamicInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_10006E75C( &qword_100256CA0,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for SignedPeerDynamicInfo,  a1);
}

uint64_t sub_10006E75C@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2(0LL);
  sub_10000FC68(v4 + *(int *)(v13 + 32), (uint64_t)v12, a1);
  uint64_t v14 = a3(0LL);
  *a4 = xmmword_1001DE6F0;
  a4[1] = xmmword_1001DE6F0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v12, a1);
}

uint64_t RemoveRecoveryKeyRequest.dynamicInfoAndSig.setter(uint64_t a1)
{
  return sub_100073434( a1,  type metadata accessor for RemoveRecoveryKeyRequest,  &qword_100256CA0,  type metadata accessor for SignedPeerDynamicInfo);
}

void (*RemoveRecoveryKeyRequest.dynamicInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100256CA0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100256CA0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100256CA0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerDynamicInfo);
  }

  return sub_1000641AC;
}

BOOL RemoveRecoveryKeyRequest.hasDynamicInfoAndSig.getter()
{
  return sub_10006E9AC( &qword_100256CA0,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for SignedPeerDynamicInfo);
}

BOOL sub_10006E9AC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100007578(a1);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2(0LL);
  sub_10000FC68(v3 + *(int *)(v11 + 32), (uint64_t)v10, a1);
  uint64_t v12 = a3(0LL);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v10, 1LL, v12) != 1;
  sub_100041590((uint64_t)v10, a1);
  return v13;
}

Swift::Void __swiftcall RemoveRecoveryKeyRequest.clearDynamicInfoAndSig()()
{
}

uint64_t sub_10006EA84(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 32);
  sub_100041590(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t RemoveRecoveryKeyRequest.metrics.setter(uint64_t a1)
{
  return sub_100072E4C( a1,  type metadata accessor for RemoveRecoveryKeyRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*RemoveRecoveryKeyRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL RemoveRecoveryKeyRequest.hasMetrics.getter()
{
  return sub_10006C978( &qword_100257000,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall RemoveRecoveryKeyRequest.clearMetrics()()
{
}

uint64_t RemoveRecoveryKeyRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_100075D30(type metadata accessor for RemoveRecoveryKeyRequest, a1);
}

uint64_t RemoveRecoveryKeyRequest.accountInfo.setter(uint64_t a1)
{
  return sub_100075E3C( a1,  type metadata accessor for RemoveRecoveryKeyRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*RemoveRecoveryKeyRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for RemoveRecoveryKeyRequest(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL RemoveRecoveryKeyRequest.hasAccountInfo.getter()
{
  return sub_100068970( &qword_100251F50,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall RemoveRecoveryKeyRequest.clearAccountInfo()()
{
}

uint64_t RemoveRecoveryKeyRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for RemoveRecoveryKeyRequest, a1);
}

uint64_t RemoveRecoveryKeyRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for RemoveRecoveryKeyRequest);
}

uint64_t (*RemoveRecoveryKeyRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t RemoveRecoveryKeyRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  uint64_t v2 = (int *)type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = (char *)a1 + v2[7];
  uint64_t v4 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + v2[8];
  uint64_t v6 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = (char *)a1 + v2[9];
  uint64_t v8 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = (char *)a1 + v2[10];
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
}

uint64_t RemoveRecoveryKeyResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071B6C(type metadata accessor for RemoveRecoveryKeyResponse, a1);
}

uint64_t RemoveRecoveryKeyResponse.changes.setter(uint64_t a1)
{
  return sub_100071C9C( a1,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

void (*RemoveRecoveryKeyResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for RemoveRecoveryKeyResponse(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

BOOL RemoveRecoveryKeyResponse.hasChanges.getter()
{
  return sub_100068F74( (uint64_t *)&unk_100256C90,  type metadata accessor for RemoveRecoveryKeyResponse,  type metadata accessor for Changes);
}

Swift::Void __swiftcall RemoveRecoveryKeyResponse.clearChanges()()
{
}

uint64_t RemoveRecoveryKeyResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_10006F0D8(type metadata accessor for RemoveRecoveryKeyResponse, a1);
}

uint64_t sub_10006F0D8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(a1(0LL) + 20);
  uint64_t v5 = type metadata accessor for Changes(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t PerformATOPRVActionsRequest.metrics.setter(uint64_t a1)
{
  return sub_100071C9C( a1,  type metadata accessor for PerformATOPRVActionsRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*PerformATOPRVActionsRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for PerformATOPRVActionsRequest(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL PerformATOPRVActionsRequest.hasMetrics.getter()
{
  return sub_100068F74( &qword_100257000,  type metadata accessor for PerformATOPRVActionsRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall PerformATOPRVActionsRequest.clearMetrics()()
{
}

uint64_t PerformATOPRVActionsRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  sub_10000FC68(v1 + *(int *)(v7 + 24), (uint64_t)v6, &qword_100251F50);
  uint64_t v8 = type metadata accessor for AccountInfo(0LL);
  *a1 = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v6, &qword_100251F50);
}

uint64_t PerformATOPRVActionsRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for PerformATOPRVActionsRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*PerformATOPRVActionsRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for PerformATOPRVActionsRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL PerformATOPRVActionsRequest.hasAccountInfo.getter()
{
  return sub_100066CB0( &qword_100251F50,  type metadata accessor for PerformATOPRVActionsRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall PerformATOPRVActionsRequest.clearAccountInfo()()
{
}

uint64_t PerformATOPRVActionsRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100079A70( type metadata accessor for PerformATOPRVActionsRequest,  type metadata accessor for Metrics,  type metadata accessor for AccountInfo,  a1);
}

uint64_t AddCustodianRecoveryKeyRequest.changeToken.getter()
{
  return sub_1000671D4(type metadata accessor for AddCustodianRecoveryKeyRequest);
}

uint64_t AddCustodianRecoveryKeyRequest.changeToken.setter(uint64_t a1, uint64_t a2)
{
  return sub_10006724C( a1,  a2,  type metadata accessor for AddCustodianRecoveryKeyRequest,  type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass,  (uint64_t (*)(uint64_t))sub_100090AF8);
}

void (*AddCustodianRecoveryKeyRequest.changeToken.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_10006F5C8;
}

void sub_10006F5C8(uint64_t *a1, char a2)
{
}

uint64_t AddCustodianRecoveryKeyRequest.peerID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20));
  swift_beginAccess(v1 + 32, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain(*(void *)(v1 + 40));
  return v2;
}

uint64_t AddCustodianRecoveryKeyRequest.peerID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = (void *)swift_retain(v7);
    uint64_t v10 = sub_100090AF8(v9);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 32, v15, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 40);
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  return swift_bridgeObjectRelease(v13);
}

void (*AddCustodianRecoveryKeyRequest.peerID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 40);
  v3[9] = *(void *)(v5 + 32);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_10006F764;
}

void sub_10006F764(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = (void *)swift_retain(v9);
      uint64_t v12 = sub_100090AF8(v11);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 32, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 40);
    *(void *)(v14 + 32) = v3;
    *(void *)(v14 + 40) = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v21 = (void *)swift_retain(v19);
      uint64_t v22 = sub_100090AF8(v21);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v22;
      swift_release(v23);
    }

    uint64_t v24 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v24 + 32, v2 + 48, 1LL, 0LL);
    uint64_t v16 = *(void *)(v24 + 40);
    *(void *)(v24 + 32) = v3;
    *(void *)(v24 + 40) = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

uint64_t AddCustodianRecoveryKeyRequest.peer.getter@<X0>(void *a1@<X8>)
{
  return sub_10006F8D4( type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  a1);
}

uint64_t sub_10006F8D4@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(void *)(v3 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v11, v25, 0LL, 0LL);
  sub_10000FC68(v11, (uint64_t)v10, &qword_100251F58);
  uint64_t v12 = (int *)type metadata accessor for Peer(0LL);
  *a3 = 0LL;
  a3[1] = 0xE000000000000000LL;
  a3[2] = _swiftEmptyArrayStorage;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v13 = (char *)a3 + v12[7];
  uint64_t v14 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = (char *)a3 + v12[8];
  uint64_t v16 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = (char *)a3 + v12[9];
  uint64_t v18 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = (char *)a3 + v12[10];
  uint64_t v20 = type metadata accessor for SignedRecoveryVoucher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = (char *)a3 + v12[11];
  uint64_t v22 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 1LL, 1LL, v22);
  return sub_100041590((uint64_t)v10, &qword_100251F58);
}

uint64_t AddCustodianRecoveryKeyRequest.peer.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F58);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = (void *)swift_retain(v13);
    uint64_t v16 = sub_100090AF8(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Peer);
  uint64_t v19 = type metadata accessor for Peer(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F58);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F58);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*AddCustodianRecoveryKeyRequest.peer.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F58);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Peer(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F58);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = _swiftEmptyArrayStorage;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + v6[7];
    uint64_t v12 = type metadata accessor for SignedPeerPermanentInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = (char *)v9 + v6[8];
    uint64_t v14 = type metadata accessor for SignedPeerStableInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    uint64_t v15 = (char *)v9 + v6[9];
    uint64_t v16 = type metadata accessor for SignedPeerDynamicInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    uint64_t v17 = (char *)v9 + v6[10];
    uint64_t v18 = type metadata accessor for SignedRecoveryVoucher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
    uint64_t v19 = (char *)v9 + v6[11];
    uint64_t v20 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
    sub_100041590((uint64_t)v5, &qword_100251F58);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Peer);
  }

  return sub_10006FE84;
}

void sub_10006FE84(uint64_t a1, char a2)
{
}

BOOL AddCustodianRecoveryKeyRequest.hasPeer.getter()
{
  return sub_100065DD4( &qword_100251F58,  type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  type metadata accessor for Peer);
}

Swift::Void __swiftcall AddCustodianRecoveryKeyRequest.clearPeer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = (void *)swift_retain(v7);
    uint64_t v10 = sub_100090AF8(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Peer(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F58);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t AddCustodianRecoveryKeyRequest.stableInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_100070538( &qword_100251F18,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig,  type metadata accessor for SignedPeerStableInfo,  a1);
}

uint64_t AddCustodianRecoveryKeyRequest.stableInfoAndSig.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F18);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = (void *)swift_retain(v13);
    uint64_t v16 = sub_100090AF8(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for SignedPeerStableInfo);
  uint64_t v19 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F18);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F18);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*AddCustodianRecoveryKeyRequest.stableInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F18);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F18);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F18);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerStableInfo);
  }

  return sub_1000702D4;
}

void sub_1000702D4(uint64_t a1, char a2)
{
}

BOOL AddCustodianRecoveryKeyRequest.hasStableInfoAndSig.getter()
{
  return sub_100065DD4( &qword_100251F18,  type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig,  type metadata accessor for SignedPeerStableInfo);
}

Swift::Void __swiftcall AddCustodianRecoveryKeyRequest.clearStableInfoAndSig()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = (void *)swift_retain(v7);
    uint64_t v10 = sub_100090AF8(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F18);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t AddCustodianRecoveryKeyRequest.tlkShares.getter()
{
  return sub_100069B34( type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
}

uint64_t AddCustodianRecoveryKeyRequest.tlkShares.setter(uint64_t a1)
{
  return sub_100069BB4( a1,  type metadata accessor for AddCustodianRecoveryKeyRequest,  type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass,  (uint64_t (*)(uint64_t))sub_100090AF8,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
}

void (*AddCustodianRecoveryKeyRequest.tlkShares.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100070500;
}

void sub_100070500(uint64_t *a1, char a2)
{
}

uint64_t AddCustodianRecoveryKeyRequest.dynamicInfoAndSig.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_100070538( &qword_100256CA0,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  type metadata accessor for SignedPeerDynamicInfo,  a1);
}

uint64_t sub_100070538@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = sub_100007578(a1);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = *(void *)(v4 + *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20)) + *a2;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000FC68(v13, (uint64_t)v12, a1);
  uint64_t v14 = a3(0LL);
  *a4 = xmmword_1001DE6F0;
  a4[1] = xmmword_1001DE6F0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v12, a1);
}

uint64_t AddCustodianRecoveryKeyRequest.dynamicInfoAndSig.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100256CA0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = (void *)swift_retain(v13);
    uint64_t v16 = sub_100090AF8(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v19 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100256CA0);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100256CA0);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*AddCustodianRecoveryKeyRequest.dynamicInfoAndSig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100256CA0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100256CA0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = xmmword_1001DE6F0;
    v9[1] = xmmword_1001DE6F0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100256CA0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for SignedPeerDynamicInfo);
  }

  return sub_100070910;
}

void sub_100070910(uint64_t a1, char a2)
{
}

BOOL AddCustodianRecoveryKeyRequest.hasDynamicInfoAndSig.getter()
{
  return sub_100065DD4( &qword_100256CA0,  type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  type metadata accessor for SignedPeerDynamicInfo);
}

Swift::Void __swiftcall AddCustodianRecoveryKeyRequest.clearDynamicInfoAndSig()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = (void *)swift_retain(v7);
    uint64_t v10 = sub_100090AF8(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100256CA0);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t AddCustodianRecoveryKeyRequest.metrics.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = (void *)swift_retain(v13);
    uint64_t v16 = sub_100090AF8(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for Metrics);
  uint64_t v19 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100257000);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100257000);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*AddCustodianRecoveryKeyRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100070D44;
}

void sub_100070D44(uint64_t a1, char a2)
{
}

BOOL AddCustodianRecoveryKeyRequest.hasMetrics.getter()
{
  return sub_100065DD4( &qword_100257000,  type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall AddCustodianRecoveryKeyRequest.clearMetrics()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = (void *)swift_retain(v7);
    uint64_t v10 = sub_100090AF8(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100257000);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t AddCustodianRecoveryKeyRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_100070EC4( type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  a1);
}

uint64_t sub_100070EC4@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v7 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(void *)(v3 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v11, v15, 0LL, 0LL);
  sub_10000FC68(v11, (uint64_t)v10, &qword_100251F50);
  uint64_t v12 = type metadata accessor for AccountInfo(0LL);
  *a3 = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v10, &qword_100251F50);
}

uint64_t AddCustodianRecoveryKeyRequest.accountInfo.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = (void *)swift_retain(v13);
    uint64_t v16 = sub_100090AF8(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for AccountInfo);
  uint64_t v19 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_100251F50);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_100251F50);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*AddCustodianRecoveryKeyRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_10007129C;
}

void sub_10007129C(uint64_t a1, char a2)
{
}

BOOL AddCustodianRecoveryKeyRequest.hasAccountInfo.getter()
{
  return sub_100065DD4( &qword_100251F50,  type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall AddCustodianRecoveryKeyRequest.clearAccountInfo()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = (void *)swift_retain(v7);
    uint64_t v10 = sub_100090AF8(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_100251F50);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t AddCustodianRecoveryKeyRequest.viewKeys.getter()
{
  return sub_100069B34( type metadata accessor for AddCustodianRecoveryKeyRequest,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
}

uint64_t AddCustodianRecoveryKeyRequest.viewKeys.setter(uint64_t a1)
{
  return sub_100069BB4( a1,  type metadata accessor for AddCustodianRecoveryKeyRequest,  type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass,  (uint64_t (*)(uint64_t))sub_100090AF8,  &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
}

void (*AddCustodianRecoveryKeyRequest.viewKeys.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyRequest(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_1000714C8;
}

void sub_1000714C8(uint64_t *a1, char a2)
{
}

uint64_t AddCustodianRecoveryKeyRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076760( type metadata accessor for AddCustodianRecoveryKeyRequest,  &qword_100250D90,  &qword_100251EC8,  (uint64_t)sub_10009099C,  a1);
}

uint64_t AddCustodianRecoveryKeyResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071514(type metadata accessor for AddCustodianRecoveryKeyResponse, a1);
}

uint64_t sub_100071514@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 24), (uint64_t)v8, (uint64_t *)&unk_100256C90);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a2 + 24) = xmmword_1001DE6F0;
  *(_OWORD *)(a2 + 40) = xmmword_1001DE6F0;
  *(_BYTE *)(a2 + 56) = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, (uint64_t *)&unk_100256C90);
}

uint64_t AddCustodianRecoveryKeyResponse.changes.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

void (*AddCustodianRecoveryKeyResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for AddCustodianRecoveryKeyResponse(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

BOOL AddCustodianRecoveryKeyResponse.hasChanges.getter()
{
  return sub_100066CB0( (uint64_t *)&unk_100256C90,  type metadata accessor for AddCustodianRecoveryKeyResponse,  type metadata accessor for Changes);
}

Swift::Void __swiftcall AddCustodianRecoveryKeyResponse.clearChanges()()
{
}

uint64_t AddCustodianRecoveryKeyResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for AddCustodianRecoveryKeyResponse, a1);
}

uint64_t AddCustodianRecoveryKeyResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for AddCustodianRecoveryKeyResponse);
}

uint64_t (*AddCustodianRecoveryKeyResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t AddCustodianRecoveryKeyResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_10006C6A0(type metadata accessor for AddCustodianRecoveryKeyResponse, a1);
}

uint64_t FetchChangesRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for FetchChangesRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*FetchChangesRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchChangesRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL FetchChangesRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for FetchChangesRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall FetchChangesRequest.clearMetrics()()
{
}

uint64_t FetchChangesRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for FetchChangesRequest, a1);
}

uint64_t FetchChangesRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for FetchChangesRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*FetchChangesRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchChangesRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL FetchChangesRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for FetchChangesRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall FetchChangesRequest.clearAccountInfo()()
{
}

uint64_t FetchChangesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for FetchChangesRequest, a1);
}

uint64_t FetchChangesRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for FetchChangesRequest);
}

uint64_t (*FetchChangesRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchChangesRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000726BC(type metadata accessor for FetchChangesRequest, a1);
}

uint64_t FetchChangesResponse.changes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100071B6C(type metadata accessor for FetchChangesResponse, a1);
}

uint64_t sub_100071B6C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v5, v6);
  size_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 20), (uint64_t)v8, (uint64_t *)&unk_100256C90);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a2 + 24) = xmmword_1001DE6F0;
  *(_OWORD *)(a2 + 40) = xmmword_1001DE6F0;
  *(_BYTE *)(a2 + 56) = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, (uint64_t *)&unk_100256C90);
}

uint64_t FetchChangesResponse.changes.setter(uint64_t a1)
{
  return sub_100071C9C( a1,  type metadata accessor for FetchChangesResponse,  (uint64_t *)&unk_100256C90,  type metadata accessor for Changes);
}

uint64_t sub_100071C9C( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 20);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*FetchChangesResponse.changes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256C90);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Changes(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchChangesResponse(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v9 + 24) = xmmword_1001DE6F0;
    *(_OWORD *)(v9 + 40) = xmmword_1001DE6F0;
    v9[56] = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256C90);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Changes);
  }

  return sub_100068F44;
}

BOOL FetchChangesResponse.hasChanges.getter()
{
  return sub_100068F74( (uint64_t *)&unk_100256C90,  type metadata accessor for FetchChangesResponse,  type metadata accessor for Changes);
}

Swift::Void __swiftcall FetchChangesResponse.clearChanges()()
{
}

uint64_t FetchChangesResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_10006F0D8(type metadata accessor for FetchChangesResponse, a1);
}

uint64_t FetchViableBottlesRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for FetchViableBottlesRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*FetchViableBottlesRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchViableBottlesRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL FetchViableBottlesRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for FetchViableBottlesRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall FetchViableBottlesRequest.clearMetrics()()
{
}

uint64_t FetchViableBottlesRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for FetchViableBottlesRequest, a1);
}

uint64_t FetchViableBottlesRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for FetchViableBottlesRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*FetchViableBottlesRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchViableBottlesRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL FetchViableBottlesRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for FetchViableBottlesRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall FetchViableBottlesRequest.clearAccountInfo()()
{
}

uint64_t FetchViableBottlesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for FetchViableBottlesRequest, a1);
}

uint64_t FetchViableBottlesRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for FetchViableBottlesRequest);
}

uint64_t (*FetchViableBottlesRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchViableBottlesRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
  uint64_t ViableBottlesRequest = type metadata accessor for FetchViableBottlesRequest(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = a1 + *(int *)(ViableBottlesRequest + 24);
  uint64_t v4 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + *(int *)(ViableBottlesRequest + 28);
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t FetchViableBottlesResponse.legacyRecords.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t FetchViableBottlesResponse.legacyRecords.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t FetchViableBottlesResponse.totalEscrowRecordsFullyViable.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t FetchViableBottlesResponse.totalEscrowRecordsFullyViable.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t FetchViableBottlesResponse.totalEscrowRecordsPartiallyViable.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t FetchViableBottlesResponse.totalEscrowRecordsPartiallyViable.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t FetchViableBottlesResponse.totalEscrowRecordsLegacy.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t FetchViableBottlesResponse.totalEscrowRecordsLegacy.setter(uint64_t result)
{
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t FetchViableBottlesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100075754(type metadata accessor for FetchViableBottlesResponse, a1);
}

uint64_t FetchViableBottlesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000757AC(a1, type metadata accessor for FetchViableBottlesResponse);
}

uint64_t (*FetchViableBottlesResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchViableBottlesResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = _swiftEmptyArrayStorage;
  *(void *)(a1 + _Block_object_dispose(va, 8) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 16) = _swiftEmptyArrayStorage;
  type metadata accessor for FetchViableBottlesResponse(0LL);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t FetchRecoverableTLKSharesRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for FetchRecoverableTLKSharesRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*FetchRecoverableTLKSharesRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchRecoverableTLKSharesRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL FetchRecoverableTLKSharesRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for FetchRecoverableTLKSharesRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall FetchRecoverableTLKSharesRequest.clearMetrics()()
{
}

uint64_t FetchRecoverableTLKSharesRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for FetchRecoverableTLKSharesRequest, a1);
}

uint64_t FetchRecoverableTLKSharesRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for FetchRecoverableTLKSharesRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*FetchRecoverableTLKSharesRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchRecoverableTLKSharesRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL FetchRecoverableTLKSharesRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for FetchRecoverableTLKSharesRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall FetchRecoverableTLKSharesRequest.clearAccountInfo()()
{
}

uint64_t FetchRecoverableTLKSharesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for FetchRecoverableTLKSharesRequest, a1);
}

uint64_t FetchRecoverableTLKSharesRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for FetchRecoverableTLKSharesRequest);
}

uint64_t (*FetchRecoverableTLKSharesRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchRecoverableTLKSharesRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000726BC(type metadata accessor for FetchRecoverableTLKSharesRequest, a1);
}

uint64_t sub_1000726BC@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  uint64_t v3 = a1(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + *(int *)(v3 + 28);
  uint64_t v7 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t FetchRecoverableTLKSharesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for FetchRecoverableTLKSharesResponse, a1);
}

uint64_t FetchRecoverableTLKSharesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for FetchRecoverableTLKSharesResponse);
}

uint64_t (*FetchRecoverableTLKSharesResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchRecoverableTLKSharesResponse.View.keys.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  &qword_100251648,  type metadata accessor for ViewKeysRecords);
}

void (*FetchRecoverableTLKSharesResponse.View.keys.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251648);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for ViewKeysRecords(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251648);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
    v13(v11, 1LL, 1LL, v12);
    v13(&v9[v6[6]], 1LL, 1LL, v12);
    v13(&v9[v6[7]], 1LL, 1LL, v12);
    sub_100041590((uint64_t)v5, &qword_100251648);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for ViewKeysRecords);
  }

  return sub_100072930;
}

void sub_100072930(uint64_t a1, char a2)
{
}

BOOL FetchRecoverableTLKSharesResponse.View.hasKeys.getter()
{
  return sub_100066F44( &qword_100251648,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  type metadata accessor for ViewKeysRecords);
}

Swift::Void __swiftcall FetchRecoverableTLKSharesResponse.View.clearKeys()()
{
}

uint64_t FetchRecoverableTLKSharesResponse.View.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for FetchRecoverableTLKSharesResponse.View, a1);
}

uint64_t FetchRecoverableTLKSharesResponse.View.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t (*FetchRecoverableTLKSharesResponse.View.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchRecoverableTLKSharesResponse.View.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t RecoverableTLKShares = type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = (char *)a1 + *(int *)(RecoverableTLKShares + 28);
  uint64_t v4 = type metadata accessor for ViewKeysRecords(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t FetchRecoverableTLKSharesResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_100072DEC( (uint64_t)_swiftEmptyArrayStorage,  (void (*)(void))type metadata accessor for FetchRecoverableTLKSharesResponse,  a1);
}

uint64_t FetchPolicyDocumentsRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for FetchPolicyDocumentsRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*FetchPolicyDocumentsRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchPolicyDocumentsRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL FetchPolicyDocumentsRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for FetchPolicyDocumentsRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall FetchPolicyDocumentsRequest.clearMetrics()()
{
}

uint64_t FetchPolicyDocumentsRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for FetchPolicyDocumentsRequest, a1);
}

uint64_t FetchPolicyDocumentsRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for FetchPolicyDocumentsRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*FetchPolicyDocumentsRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for FetchPolicyDocumentsRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL FetchPolicyDocumentsRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for FetchPolicyDocumentsRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall FetchPolicyDocumentsRequest.clearAccountInfo()()
{
}

uint64_t FetchPolicyDocumentsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for FetchPolicyDocumentsRequest, a1);
}

uint64_t FetchPolicyDocumentsRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for FetchPolicyDocumentsRequest);
}

uint64_t (*FetchPolicyDocumentsRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchPolicyDocumentsRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_100075BF4((uint64_t)_swiftEmptyArrayStorage, type metadata accessor for FetchPolicyDocumentsRequest, a1);
}

uint64_t FetchPolicyDocumentsResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for FetchPolicyDocumentsResponse, a1);
}

uint64_t FetchPolicyDocumentsResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for FetchPolicyDocumentsResponse);
}

uint64_t (*FetchPolicyDocumentsResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t FetchPolicyDocumentsResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_100072DEC( (uint64_t)_swiftEmptyArrayStorage,  (void (*)(void))type metadata accessor for FetchPolicyDocumentsResponse,  a1);
}

uint64_t sub_100072DEC@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a2(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t GetRepairActionRequest.performCleanup.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t GetRepairActionRequest.performCleanup.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t GetRepairActionRequest.metrics.setter(uint64_t a1)
{
  return sub_100072E4C( a1,  type metadata accessor for GetRepairActionRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

uint64_t sub_100072E4C( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 36);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*GetRepairActionRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for GetRepairActionRequest(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL GetRepairActionRequest.hasMetrics.getter()
{
  return sub_10006C978( &qword_100257000,  type metadata accessor for GetRepairActionRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall GetRepairActionRequest.clearMetrics()()
{
}

uint64_t GetRepairActionRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_100075D30(type metadata accessor for GetRepairActionRequest, a1);
}

uint64_t GetRepairActionRequest.accountInfo.setter(uint64_t a1)
{
  return sub_100075E3C( a1,  type metadata accessor for GetRepairActionRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*GetRepairActionRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for GetRepairActionRequest(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL GetRepairActionRequest.hasAccountInfo.getter()
{
  return sub_100068970( &qword_100251F50,  type metadata accessor for GetRepairActionRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall GetRepairActionRequest.clearAccountInfo()()
{
}

uint64_t GetRepairActionRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000731B8(type metadata accessor for GetRepairActionRequest, a1);
}

uint64_t sub_1000731B8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t GetRepairActionRequest.unknownFields.setter(uint64_t a1)
{
  return sub_100073210(a1, type metadata accessor for GetRepairActionRequest);
}

uint64_t sub_100073210(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*GetRepairActionRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t GetRepairActionRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = a1 + *(int *)(RepairActionRequest + 36);
  uint64_t v4 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + *(int *)(RepairActionRequest + 40);
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t EscrowProxyFederationMoveRecordRequest.metrics.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  sub_10000FC68(v1 + *(int *)(v7 + 32), (uint64_t)v6, &qword_100257000);
  uint64_t v8 = type metadata accessor for Metrics(0LL);
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v6, &qword_100257000);
}

uint64_t EscrowProxyFederationMoveRecordRequest.metrics.setter(uint64_t a1)
{
  return sub_100073434( a1,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

uint64_t sub_100073434( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 32);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*EscrowProxyFederationMoveRecordRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL EscrowProxyFederationMoveRecordRequest.hasMetrics.getter()
{
  return sub_10006E9AC( &qword_100257000,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall EscrowProxyFederationMoveRecordRequest.clearMetrics()()
{
}

uint64_t EscrowProxyFederationMoveRecordRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100079270(type metadata accessor for EscrowProxyFederationMoveRecordRequest, a1);
}

uint64_t EscrowProxyFederationMoveRecordRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000792C8(a1, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t (*EscrowProxyFederationMoveRecordRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t EscrowProxyFederationMoveRecordRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  a1[4] = 0LL;
  a1[5] = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for Metrics(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t GetRepairActionResponse.repairAction.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return *(void *)(v1 + 16);
}

uint64_t GetRepairActionResponse.repairAction.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000B5DF0(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  uint64_t result = swift_beginAccess(v12 + 16, v14, 1LL, 0LL);
  *(void *)(v12 + 16) = a1;
  *(_BYTE *)(v12 + 24) = a2 & 1;
  return result;
}

void (*GetRepairActionResponse.repairAction.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  char v6 = *(_BYTE *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  *((_BYTE *)v3 + 80) = v6;
  return sub_10007383C;
}

void sub_10007383C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(_BYTE *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 88)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v7 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v3 + 84);
    uint64_t v9 = *(void *)(v3 + 88);
    uint64_t v10 = *(void *)(v9 + v8);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v12 = swift_retain(v10);
    uint64_t v13 = sub_1000B5DF0(v12);
    swift_release(v10);
    uint64_t v14 = *(void *)(v9 + v8);
    *(void *)(v9 + v_Block_object_dispose(va, 8) = v13;
    swift_release(v14);
  }

LABEL_4:
  uint64_t v15 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess(v15 + 16, v7, 1LL, 0LL);
  *(void *)(v15 + 16) = v4;
  *(_BYTE *)(v15 + 24) = v5;
  free((void *)v3);
}

  uint64_t v16 = (void *)(*(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3);
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *uint64_t v16 = v6;
  free((void *)v5);
}

  uint64_t v16 = (_BYTE *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *uint64_t v16 = v6;
  free((void *)v5);
}

  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  if (a5) {
    uint64_t v11 = _convertErrorToNSError(_:)(a5);
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = (id)v11;
  (*(void (**)(uint64_t, NSString, Class, uint64_t))(a6 + 16))(a6, v10, isa, a4);
}

  if (v5) {
    char v6 = (void *)_convertErrorToNSError(_:)(v5);
  }
  else {
    char v6 = 0LL;
  }
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v6);

  return swift_errorRelease();
}

uint64_t GetRepairActionResponse.escrowRecordMoveRequest.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100007578((uint64_t *)&unk_100256FF0);
  __chkstk_darwin(v3, v4);
  char v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v7, v13, 0LL, 0LL);
  sub_10000FC68(v7, (uint64_t)v6, (uint64_t *)&unk_100256FF0);
  uint64_t v8 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  a1[4] = 0LL;
  a1[5] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v9 = (char *)a1 + *(int *)(v8 + 32);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_100041590((uint64_t)v6, (uint64_t *)&unk_100256FF0);
}

uint64_t GetRepairActionResponse.escrowRecordMoveRequest.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256FF0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_1000B5DF0(v15);
    swift_release(v13);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
  uint64_t v19 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_100256FF0);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  swift_beginAccess( v18 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, (uint64_t *)&unk_100256FF0);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*GetRepairActionResponse.escrowRecordMoveRequest.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256FF0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, (uint64_t *)&unk_100256FF0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 32);
    uint64_t v12 = type metadata accessor for Metrics(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256FF0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
  }

  return sub_100073D5C;
}

void sub_100073D5C(uint64_t a1, char a2)
{
}

BOOL GetRepairActionResponse.hasEscrowRecordMoveRequest.getter()
{
  return sub_100065DD4( (uint64_t *)&unk_100256FF0,  type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest,  type metadata accessor for EscrowProxyFederationMoveRecordRequest);
}

Swift::Void __swiftcall GetRepairActionResponse.clearEscrowRecordMoveRequest()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100256FF0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000B5DF0(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  swift_beginAccess( v12 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, (uint64_t *)&unk_100256FF0);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t GetRepairActionResponse.totalEscrowRecords.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
}

uint64_t GetRepairActionResponse.totalEscrowRecords.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
}

void (*GetRepairActionResponse.totalEscrowRecords.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100073F6C;
}

void sub_100073F6C(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.collectableEscrowRecords.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
}

uint64_t sub_100073F8C(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return *(void *)v3;
}

uint64_t GetRepairActionResponse.collectableEscrowRecords.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
}

uint64_t sub_100073FF0(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000B5DF0(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = (void *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *uint64_t v12 = a1;
  return result;
}

void (*GetRepairActionResponse.collectableEscrowRecords.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074128;
}

void sub_100074128(uint64_t *a1, char a2)
{
}

void sub_100074134(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 88);
    uint64_t v10 = *(void *)(v5 + 80);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v13 = swift_retain(v11);
    uint64_t v14 = sub_1000B5DF0(v13);
    swift_release(v11);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v14;
    swift_release(v15);
  }

uint64_t GetRepairActionResponse.collectedEscrowRecords.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
}

uint64_t GetRepairActionResponse.collectedEscrowRecords.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
}

void (*GetRepairActionResponse.collectedEscrowRecords.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_1000742B8;
}

void sub_1000742B8(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.escrowRecordGarbageCollectionEnabled.getter()
{
  return sub_100074578(&OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
}

uint64_t GetRepairActionResponse.escrowRecordGarbageCollectionEnabled.setter(char a1)
{
  return sub_1000745D8( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
}

void (*GetRepairActionResponse.escrowRecordGarbageCollectionEnabled.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5;
  return sub_10007435C;
}

void sub_10007435C(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.totalTlkShares.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
}

uint64_t GetRepairActionResponse.totalTlkShares.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
}

void (*GetRepairActionResponse.totalTlkShares.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074408;
}

void sub_100074408(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.collectableTlkShares.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
}

uint64_t GetRepairActionResponse.collectableTlkShares.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
}

void (*GetRepairActionResponse.collectableTlkShares.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_1000744B4;
}

void sub_1000744B4(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.collectedTlkShares.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
}

uint64_t GetRepairActionResponse.collectedTlkShares.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
}

void (*GetRepairActionResponse.collectedTlkShares.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074560;
}

void sub_100074560(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.tlkShareGarbageCollectionEnabled.getter()
{
  return sub_100074578(&OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
}

uint64_t sub_100074578(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1 + *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20)) + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return *v2;
}

uint64_t GetRepairActionResponse.tlkShareGarbageCollectionEnabled.setter(char a1)
{
  return sub_1000745D8( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
}

uint64_t sub_1000745D8(char a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000B5DF0(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = (_BYTE *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *uint64_t v12 = a1 & 1;
  return result;
}

void (*GetRepairActionResponse.tlkShareGarbageCollectionEnabled.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5;
  return sub_100074714;
}

void sub_100074714(uint64_t *a1, char a2)
{
}

void sub_100074720(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  char v6 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 80);
    uint64_t v10 = *(void *)(v5 + 72);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v13 = swift_retain(v11);
    uint64_t v14 = sub_1000B5DF0(v13);
    swift_release(v11);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v14;
    swift_release(v15);
  }

uint64_t GetRepairActionResponse.totalPeers.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
}

uint64_t GetRepairActionResponse.totalPeers.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
}

void (*GetRepairActionResponse.totalPeers.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_1000748A0;
}

void sub_1000748A0(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.trustedPeers.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
}

uint64_t GetRepairActionResponse.trustedPeers.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
}

void (*GetRepairActionResponse.trustedPeers.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_10007494C;
}

void sub_10007494C(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.superfluousPeers.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
}

uint64_t GetRepairActionResponse.superfluousPeers.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
}

void (*GetRepairActionResponse.superfluousPeers.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_1000749F8;
}

void sub_1000749F8(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.peersCleanedup.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
}

uint64_t GetRepairActionResponse.peersCleanedup.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
}

void (*GetRepairActionResponse.peersCleanedup.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074AA4;
}

void sub_100074AA4(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.superfluousPeersCleanupEnabled.getter()
{
  return sub_100074578(&OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
}

uint64_t GetRepairActionResponse.superfluousPeersCleanupEnabled.setter(char a1)
{
  return sub_1000745D8( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
}

void (*GetRepairActionResponse.superfluousPeersCleanupEnabled.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5;
  return sub_100074B48;
}

void sub_100074B48(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.duplicateEscrowRecords.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
}

uint64_t GetRepairActionResponse.duplicateEscrowRecords.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
}

void (*GetRepairActionResponse.duplicateEscrowRecords.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074BF4;
}

void sub_100074BF4(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.unsetHmacpeers.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
}

uint64_t GetRepairActionResponse.unsetHmacpeers.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
}

void (*GetRepairActionResponse.unsetHmacpeers.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074CA0;
}

void sub_100074CA0(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.updatedHmacpeers.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
}

uint64_t GetRepairActionResponse.updatedHmacpeers.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
}

void (*GetRepairActionResponse.updatedHmacpeers.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074D4C;
}

void sub_100074D4C(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.totalDeviceStateRecords.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
}

uint64_t GetRepairActionResponse.totalDeviceStateRecords.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
}

void (*GetRepairActionResponse.totalDeviceStateRecords.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074DF8;
}

void sub_100074DF8(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.collectableDeviceStateRecords.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
}

uint64_t GetRepairActionResponse.collectableDeviceStateRecords.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
}

void (*GetRepairActionResponse.collectableDeviceStateRecords.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074EA4;
}

void sub_100074EA4(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.collectedDeviceStateRecords.getter()
{
  return sub_100073F8C( type metadata accessor for GetRepairActionResponse,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
}

uint64_t GetRepairActionResponse.collectedDeviceStateRecords.setter(uint64_t a1)
{
  return sub_100073FF0( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
}

void (*GetRepairActionResponse.collectedDeviceStateRecords.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_100074F50;
}

void sub_100074F50(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.tlkShareDeletionFailed.getter()
{
  return sub_100074578(&OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
}

uint64_t GetRepairActionResponse.tlkShareDeletionFailed.setter(char a1)
{
  return sub_1000745D8( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
}

void (*GetRepairActionResponse.tlkShareDeletionFailed.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5;
  return sub_100074FF4;
}

void sub_100074FF4(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.deviceStateRecordDeletionFailed.getter()
{
  return sub_100074578(&OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
}

uint64_t GetRepairActionResponse.deviceStateRecordDeletionFailed.setter(char a1)
{
  return sub_1000745D8( a1,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
}

void (*GetRepairActionResponse.deviceStateRecordDeletionFailed.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5;
  return sub_100075098;
}

void sub_100075098(uint64_t *a1, char a2)
{
}

uint64_t GetRepairActionResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076760( type metadata accessor for GetRepairActionResponse,  &qword_100250E00,  &qword_100251ED0,  (uint64_t)sub_100098C80,  a1);
}

uint64_t SupportAppView.lastReport.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000750EC( (uint64_t *)&unk_100256D30,  type metadata accessor for SupportAppView,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp,  (void (*)(void))&Google_Protobuf_Timestamp.init(),  a1);
}

uint64_t sub_1000750EC@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100007578(a1);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a2(0LL);
  sub_10000FC68(v5 + *(int *)(v15 + 28), (uint64_t)v14, a1);
  uint64_t v16 = a3(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  a4();
  return sub_100041590((uint64_t)v14, a1);
}

uint64_t SupportAppView.lastReport.setter(uint64_t a1)
{
  return sub_1000751F4( a1,  type metadata accessor for SupportAppView,  (uint64_t *)&unk_100256D30,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp);
}

uint64_t sub_1000751F4( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 28);
  sub_100041590(v8, a3);
  uint64_t v9 = a4(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, a1, v9);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v8, 0LL, 1LL, v9);
}

void (*SupportAppView.lastReport.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for SupportAppView(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256D30);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Google_Protobuf_Timestamp.init()();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256D30);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100063C00;
}

BOOL SupportAppView.hasLastReport.getter()
{
  return sub_100066F44( (uint64_t *)&unk_100256D30,  type metadata accessor for SupportAppView,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp);
}

Swift::Void __swiftcall SupportAppView.clearLastReport()()
{
}

uint64_t SupportAppView.enabled.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t SupportAppView.enabled.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t SupportAppView.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for SupportAppView, a1);
}

uint64_t SupportAppView.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for SupportAppView);
}

uint64_t (*SupportAppView.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SupportAppView.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 16) = 0;
  uint64_t v2 = type metadata accessor for SupportAppView(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t RemoveUnreadableCKServerDataRequest.isGuitarfish.getter()
{
  return *v0;
}

uint64_t RemoveUnreadableCKServerDataRequest.isGuitarfish.setter(uint64_t result)
{
  _BYTE *v1 = result;
  return result;
}

uint64_t SupportAppDevice.octagon.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t SupportAppDevice.octagon.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*SupportAppDevice.octagon.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t SupportAppDevice.escrow.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t SupportAppDevice.escrow.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*SupportAppDevice.escrow.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t SupportAppDevice.serialNumber.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t SupportAppDevice.serialNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 16));
  *(void *)(v2 + _Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t SupportAppDevice.views.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t SupportAppDevice.views.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t SupportAppDevice.lastHealthReport.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100076360(type metadata accessor for SupportAppDevice, a1);
}

uint64_t SupportAppDevice.lastHealthReport.setter(uint64_t a1)
{
  return sub_100076454(a1, type metadata accessor for SupportAppDevice);
}

void (*SupportAppDevice.lastHealthReport.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for SupportAppDevice(0LL) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256D30);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Google_Protobuf_Timestamp.init()();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256D30);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100063C00;
}

BOOL SupportAppDevice.hasLastHealthReport.getter()
{
  return sub_10006DC08( (uint64_t *)&unk_100256D30,  type metadata accessor for SupportAppDevice,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp);
}

Swift::Void __swiftcall SupportAppDevice.clearLastHealthReport()()
{
}

uint64_t SupportAppDevice.status.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SupportAppDevice.status.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t SupportAppDevice.modelID.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t SupportAppDevice.modelID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 56));
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t SupportAppDevice.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100075754(type metadata accessor for SupportAppDevice, a1);
}

uint64_t sub_100075754@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t SupportAppDevice.unknownFields.setter(uint64_t a1)
{
  return sub_1000757AC(a1, type metadata accessor for SupportAppDevice);
}

uint64_t sub_1000757AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*SupportAppDevice.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t SupportAppDevice.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0xE000000000000000LL;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for SupportAppDevice(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = a1 + *(int *)(v2 + 48);
  uint64_t v4 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t GetSupportAppInfoRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for GetSupportAppInfoRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*GetSupportAppInfoRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for GetSupportAppInfoRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL GetSupportAppInfoRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for GetSupportAppInfoRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall GetSupportAppInfoRequest.clearMetrics()()
{
}

uint64_t GetSupportAppInfoRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for GetSupportAppInfoRequest, a1);
}

uint64_t GetSupportAppInfoRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for GetSupportAppInfoRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*GetSupportAppInfoRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for GetSupportAppInfoRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL GetSupportAppInfoRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for GetSupportAppInfoRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall GetSupportAppInfoRequest.clearAccountInfo()()
{
}

uint64_t GetSupportAppInfoRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for GetSupportAppInfoRequest, a1);
}

uint64_t GetSupportAppInfoRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for GetSupportAppInfoRequest);
}

uint64_t (*GetSupportAppInfoRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t GetSupportAppInfoRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_100075BF4(0LL, type metadata accessor for GetSupportAppInfoRequest, a1);
}

uint64_t sub_100075BF4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = a2(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v5 = (char *)a3 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = (char *)a3 + *(int *)(v4 + 28);
  uint64_t v8 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
}

uint64_t GetSupportAppInfoResponse.more.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t GetSupportAppInfoResponse.more.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t GetSupportAppInfoResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006815C(type metadata accessor for GetSupportAppInfoResponse, a1);
}

uint64_t GetSupportAppInfoResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000681B4(a1, type metadata accessor for GetSupportAppInfoResponse);
}

uint64_t (*GetSupportAppInfoResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t GetSupportAppInfoResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = _swiftEmptyArrayStorage;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 40) = 0;
  type metadata accessor for GetSupportAppInfoResponse(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t ResetAccountCDPContentsRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_100075D30(type metadata accessor for ResetAccountCDPContentsRequest, a1);
}

uint64_t sub_100075D30@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 40), (uint64_t)v8, &qword_100251F50);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  *a2 = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, &qword_100251F50);
}

uint64_t ResetAccountCDPContentsRequest.accountInfo.setter(uint64_t a1)
{
  return sub_100075E3C( a1,  type metadata accessor for ResetAccountCDPContentsRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

uint64_t sub_100075E3C( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 40);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*ResetAccountCDPContentsRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ResetAccountCDPContentsRequest(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL ResetAccountCDPContentsRequest.hasAccountInfo.getter()
{
  return sub_100068970( &qword_100251F50,  type metadata accessor for ResetAccountCDPContentsRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall ResetAccountCDPContentsRequest.clearAccountInfo()()
{
}

uint64_t ResetAccountCDPContentsRequest.metrics.setter(uint64_t a1)
{
  return sub_10007602C( a1,  type metadata accessor for ResetAccountCDPContentsRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

uint64_t sub_10007602C( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 44);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*ResetAccountCDPContentsRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ResetAccountCDPContentsRequest(0LL) + 44);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL ResetAccountCDPContentsRequest.hasMetrics.getter()
{
  return sub_100068C28( &qword_100257000,  type metadata accessor for ResetAccountCDPContentsRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall ResetAccountCDPContentsRequest.clearMetrics()()
{
}

uint64_t ResetAccountCDPContentsRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006815C(type metadata accessor for ResetAccountCDPContentsRequest, a1);
}

uint64_t ResetAccountCDPContentsRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000681B4(a1, type metadata accessor for ResetAccountCDPContentsRequest);
}

uint64_t (*ResetAccountCDPContentsRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t ResetAccountCDPContentsRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076254(type metadata accessor for ResetAccountCDPContentsRequest, a1);
}

uint64_t sub_100076254@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 1;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0xE000000000000000LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0xE000000000000000LL;
  *(_WORD *)(a2 + 4_Block_object_dispose(va, 8) = 0;
  uint64_t v3 = a1(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(v3 + 40);
  uint64_t v5 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(v3 + 44);
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t PasscodeGeneration.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for PasscodeGeneration, a1);
}

uint64_t PasscodeGeneration.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for PasscodeGeneration);
}

uint64_t (*PasscodeGeneration.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t PasscodeGeneration.init()@<X0>(void *a1@<X8>)
{
  return sub_100072DEC(0LL, (void (*)(void))type metadata accessor for PasscodeGeneration, a1);
}

uint64_t EscrowInformation.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100076360(type metadata accessor for EscrowInformation, a1);
}

uint64_t sub_100076360@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v5, v6);
  size_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 48), (uint64_t)v8, (uint64_t *)&unk_100256D30);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  Google_Protobuf_Timestamp.init()();
  return sub_100041590((uint64_t)v8, (uint64_t *)&unk_100256D30);
}

uint64_t EscrowInformation.creationDate.setter(uint64_t a1)
{
  return sub_100076454(a1, type metadata accessor for EscrowInformation);
}

uint64_t sub_100076454(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 48);
  sub_100041590(v4, (uint64_t *)&unk_100256D30);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, a1, v5);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
}

void (*EscrowInformation.creationDate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for EscrowInformation(0LL) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256D30);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Google_Protobuf_Timestamp.init()();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256D30);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100063C00;
}

BOOL EscrowInformation.hasCreationDate.getter()
{
  return sub_10006DC08( (uint64_t *)&unk_100256D30,  type metadata accessor for EscrowInformation,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp);
}

Swift::Void __swiftcall EscrowInformation.clearCreationDate()()
{
}

uint64_t EscrowInformation.escrowInformationMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_100252098);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for EscrowInformation(0LL);
  sub_10000FC68(v1 + *(int *)(v7 + 52), (uint64_t)v6, &qword_100252098);
  uint64_t v8 = type metadata accessor for EscrowInformation.Metadata(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v9 = *(int *)(v8 + 20);
  if (qword_100250E50 != -1) {
    swift_once(&qword_100250E50, sub_10009EA7C);
  }
  uint64_t v10 = qword_100251ED8;
  *(void *)(a1 + v9) = qword_100251ED8;
  swift_retain(v10);
  return sub_100041590((uint64_t)v6, &qword_100252098);
}

uint64_t EscrowInformation.Metadata.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100076760( type metadata accessor for EscrowInformation.Metadata,  &qword_100250E50,  &qword_100251ED8,  (uint64_t)sub_10009EA7C,  a1);
}

uint64_t sub_100076760@<X0>( uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(int *)(a1(0LL) + 20);
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  uint64_t v11 = *a3;
  *(void *)(a5 + v10) = *a3;
  return swift_retain(v11);
}

uint64_t EscrowInformation.escrowInformationMetadata.setter(uint64_t a1)
{
  return sub_1000767EC( a1,  type metadata accessor for EscrowInformation,  &qword_100252098,  type metadata accessor for EscrowInformation.Metadata);
}

uint64_t sub_1000767EC( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 52);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*EscrowInformation.escrowInformationMetadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100252098);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for EscrowInformation.Metadata(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for EscrowInformation(0LL) + 52);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100252098);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100250E50 != -1) {
      swift_once(&qword_100250E50, sub_10009EA7C);
    }
    uint64_t v12 = qword_100251ED8;
    *(void *)&v9[v11] = qword_100251ED8;
    swift_retain(v12);
    sub_100041590((uint64_t)v5, &qword_100252098);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for EscrowInformation.Metadata);
  }

  return sub_1000769BC;
}

void sub_1000769BC(uint64_t a1, char a2)
{
}

BOOL EscrowInformation.hasEscrowInformationMetadata.getter()
{
  return sub_10006DFA0( &qword_100252098,  type metadata accessor for EscrowInformation,  type metadata accessor for EscrowInformation.Metadata);
}

Swift::Void __swiftcall EscrowInformation.clearEscrowInformationMetadata()()
{
}

uint64_t EscrowInformation.silentAttemptAllowed.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t EscrowInformation.silentAttemptAllowed.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t EscrowInformation.viabilityStatus.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t EscrowInformation.viabilityStatus.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t EscrowInformation.federationID.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 72));
  return v1;
}

uint64_t EscrowInformation.federationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 72));
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t EscrowInformation.expectedFederationID.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain(*(void *)(v0 + 88));
  return v1;
}

uint64_t EscrowInformation.expectedFederationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 88));
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t EscrowInformation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100075754(type metadata accessor for EscrowInformation, a1);
}

uint64_t EscrowInformation.unknownFields.setter(uint64_t a1)
{
  return sub_1000757AC(a1, type metadata accessor for EscrowInformation);
}

uint64_t (*EscrowInformation.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t EscrowInformation.Metadata.backupKeybagDigest.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20));
  swift_beginAccess(v1 + 16, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 16);
  sub_1000084E8(v2, *(void *)(v1 + 24));
  return v2;
}

uint64_t EscrowInformation.Metadata.backupKeybagDigest.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_10009EC08(v9);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 16, v16, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 16);
  unint64_t v14 = *(void *)(v12 + 24);
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  return sub_10000852C(v13, v14);
}

void (*EscrowInformation.Metadata.backupKeybagDigest.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  v3[9] = v6;
  v3[10] = v7;
  sub_1000084E8(v6, v7);
  return sub_100076CBC;
}

void sub_100076CBC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  unint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    sub_1000084E8(*(void *)(*a1 + 72), v5);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_retain(v9);
      uint64_t v12 = sub_10009EC08(v11);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 16, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 16);
    unint64_t v16 = *(void *)(v14 + 24);
    *(void *)(v14 + 16) = v3;
    *(void *)(v14 + 24) = v5;
    sub_10000852C(v15, v16);
    uint64_t v17 = *(void *)(v2 + 72);
    unint64_t v18 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v19 = *(int *)(v2 + 96);
      uint64_t v20 = *(void *)(v2 + 88);
      uint64_t v21 = *(void *)(v20 + v19);
      uint64_t v22 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      uint64_t v23 = swift_retain(v21);
      uint64_t v24 = sub_10009EC08(v23);
      uint64_t v25 = *(void *)(v20 + v19);
      *(void *)(v20 + v19) = v24;
      swift_release(v25);
    }

    uint64_t v26 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v26 + 16, v2 + 48, 1LL, 0LL);
    uint64_t v17 = *(void *)(v26 + 16);
    unint64_t v18 = *(void *)(v26 + 24);
    *(void *)(v26 + 16) = v3;
    *(void *)(v26 + 24) = v5;
  }

  sub_10000852C(v17, v18);
  free((void *)v2);
}

uint64_t EscrowInformation.Metadata.clientMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_1002520A0);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v7, v13, 0LL, 0LL);
  sub_10000FC68(v7, (uint64_t)v6, &qword_1002520A0);
  uint64_t v8 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0xE000000000000000LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0xE000000000000000LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0xE000000000000000LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0xE000000000000000LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 136) = 0LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v9 = a1 + *(int *)(v8 + 64);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_100041590((uint64_t)v6, &qword_1002520A0);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0xE000000000000000LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0xE000000000000000LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0xE000000000000000LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0xE000000000000000LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 136) = 0LL;
  uint64_t v2 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = a1 + *(int *)(v2 + 64);
  uint64_t v4 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t EscrowInformation.Metadata.clientMetadata.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_1002520A0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_10009EC08(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
  uint64_t v19 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_1002520A0);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  swift_beginAccess( v18 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_1002520A0);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EscrowInformation.Metadata.clientMetadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_1002520A0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_1002520A0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0u;
    v9[1] = 0u;
    *((void *)v9 + 4) = 0xE000000000000000LL;
    *((void *)v9 + 5) = 0LL;
    *((void *)v9 + 6) = 0xE000000000000000LL;
    *((void *)v9 + 7) = 0LL;
    *((void *)v9 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
    *((void *)v9 + 9) = 0LL;
    *((void *)v9 + 10) = 0xE000000000000000LL;
    *((void *)v9 + 11) = 0LL;
    *((void *)v9 + 12) = 0xE000000000000000LL;
    *((void *)v9 + 13) = 0LL;
    *((void *)v9 + 14) = 0xE000000000000000LL;
    *((void *)v9 + 15) = 0LL;
    *((void *)v9 + 16) = 0xE000000000000000LL;
    *((void *)v9 + 17) = 0LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 64);
    uint64_t v12 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100041590((uint64_t)v5, &qword_1002520A0);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
  }

  return sub_10007730C;
}

void sub_10007730C(uint64_t a1, char a2)
{
}

BOOL EscrowInformation.Metadata.hasClientMetadata.getter()
{
  return sub_100065DD4( &qword_1002520A0,  type metadata accessor for EscrowInformation.Metadata,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata,  type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
}

Swift::Void __swiftcall EscrowInformation.Metadata.clearClientMetadata()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_1002520A0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_10009EC08(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata;
  swift_beginAccess( v12 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__clientMetadata,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_1002520A0);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EscrowInformation.Metadata.secureBackupUsesMultipleIcscs.getter()
{
  return sub_100073F8C( type metadata accessor for EscrowInformation.Metadata,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
}

uint64_t EscrowInformation.Metadata.secureBackupUsesMultipleIcscs.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v7 = swift_retain(v5);
    uint64_t v8 = sub_10009EC08(v7);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v8;
    swift_release(v9);
  }

  uint64_t v10 = (void *)(*(void *)(v2 + v4)
                 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
  uint64_t result = swift_beginAccess(v10, v12, 1LL, 0LL);
  void *v10 = a1;
  return result;
}

void (*EscrowInformation.Metadata.secureBackupUsesMultipleIcscs.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupUsesMultipleIcscs);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  v3[9] = *v5;
  return sub_1000775C0;
}

void sub_1000775C0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = swift_retain(v9);
    uint64_t v12 = sub_10009EC08(v11);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v12;
    swift_release(v13);
  }

uint64_t EscrowInformation.Metadata.bottleID.getter()
{
  return sub_100078110(&OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
}

uint64_t EscrowInformation.Metadata.bottleID.setter(uint64_t a1, uint64_t a2)
{
  return sub_100078180( a1,  a2,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
}

void (*EscrowInformation.Metadata.bottleID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottleID);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_100077740;
}

void sub_100077740(uint64_t *a1, char a2)
{
}

uint64_t EscrowInformation.Metadata.secureBackupTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v7, v12, 0LL, 0LL);
  sub_10000FC68(v7, (uint64_t)v6, (uint64_t *)&unk_100256D30);
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  Google_Protobuf_Timestamp.init()();
  return sub_100041590((uint64_t)v6, (uint64_t *)&unk_100256D30);
}

uint64_t EscrowInformation.Metadata.secureBackupTimestamp.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v24[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_10009EC08(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  uint64_t v19 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v20 + 32))(v11, a1, v19);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v20 + 56))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_100256D30);
  uint64_t v21 = v18
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  swift_beginAccess( v18 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp,  v24,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v21, (uint64_t *)&unk_100256D30);
  swift_endAccess(v24);
  return swift_release(v18);
}

void (*EscrowInformation.Metadata.secureBackupTimestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  void v3[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[6] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[7] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[8] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, (uint64_t *)&unk_100256D30);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Google_Protobuf_Timestamp.init()();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256D30);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100077B14;
}

void sub_100077B14(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 56LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 64LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[5];
    uint64_t v6 = v2[6];
    uint64_t v7 = (void *)v2[4];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 56LL), v4, v5);
    EscrowInformation.Metadata.secureBackupTimestamp.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }

  else
  {
    uint64_t v7 = (void *)v2[4];
    EscrowInformation.Metadata.secureBackupTimestamp.setter(*(void *)(*(void *)a1 + 64LL));
  }

  free(v4);
  free(v3);
  free(v7);
  free(v2);
}

BOOL EscrowInformation.Metadata.hasSecureBackupTimestamp.getter()
{
  return sub_100065DD4( (uint64_t *)&unk_100256D30,  type metadata accessor for EscrowInformation.Metadata,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp,  (uint64_t (*)(void))&type metadata accessor for Google_Protobuf_Timestamp);
}

Swift::Void __swiftcall EscrowInformation.Metadata.clearSecureBackupTimestamp()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_10009EC08(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp;
  swift_beginAccess( v12 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__secureBackupTimestamp,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, (uint64_t *)&unk_100256D30);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EscrowInformation.Metadata.escrowedSpki.getter()
{
  return sub_100077DBC(&OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki);
}

uint64_t EscrowInformation.Metadata.escrowedSpki.setter(uint64_t a1, uint64_t a2)
{
  return sub_100077E30( a1,  a2,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowedSpki);
}

void (*EscrowInformation.Metadata.escrowedSpki.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  v3[9] = *v5;
  v3[10] = v7;
  sub_1000084E8(v6, v7);
  return sub_100077DA4;
}

void sub_100077DA4(uint64_t *a1, char a2)
{
}

uint64_t EscrowInformation.Metadata.peerInfo.getter()
{
  return sub_100077DBC(&OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo);
}

uint64_t sub_100077DBC(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20)) + *a1;
  swift_beginAccess(v2, v5, 0LL, 0LL);
  uint64_t v3 = *(void *)v2;
  sub_1000084E8(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t EscrowInformation.Metadata.peerInfo.setter(uint64_t a1, uint64_t a2)
{
  return sub_100077E30( a1,  a2,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peerInfo);
}

uint64_t sub_100077E30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t v10 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = swift_retain(v9);
    uint64_t v12 = sub_10009EC08(v11);
    uint64_t v13 = *(void *)(v5 + v8);
    *(void *)(v5 + v_Block_object_dispose(va, 8) = v12;
    swift_release(v13);
  }

  uint64_t v14 = (uint64_t *)(*(void *)(v5 + v8) + *a3);
  swift_beginAccess(v14, v18, 1LL, 0LL);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  *uint64_t v14 = a1;
  v14[1] = a2;
  return sub_10000852C(v15, v16);
}

void (*EscrowInformation.Metadata.peerInfo.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  v3[9] = *v5;
  v3[10] = v7;
  sub_1000084E8(v6, v7);
  return sub_100077F7C;
}

void sub_100077F7C(uint64_t *a1, char a2)
{
}

void sub_100077F88(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  uint64_t v6 = *(int *)(*a1 + 96);
  unint64_t v7 = *(void *)(*a1 + 80);
  uint64_t v8 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    sub_1000084E8(*(void *)(*a1 + 72), v7);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v8 + v6)) & 1) == 0)
    {
      uint64_t v9 = *(int *)(v4 + 96);
      uint64_t v10 = *(void *)(v4 + 88);
      uint64_t v11 = *(void *)(v10 + v9);
      uint64_t v12 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      uint64_t v13 = swift_retain(v11);
      uint64_t v14 = sub_10009EC08(v13);
      uint64_t v15 = *(void *)(v10 + v9);
      *(void *)(v10 + v9) = v14;
      swift_release(v15);
    }

    unint64_t v16 = (uint64_t *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess(v16, v4 + 24, 1LL, 0LL);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    *unint64_t v16 = v5;
    v16[1] = v7;
    sub_10000852C(v17, v18);
    uint64_t v19 = *(void *)(v4 + 72);
    unint64_t v20 = *(void *)(v4 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v8 + v6)) & 1) == 0)
    {
      uint64_t v21 = *(int *)(v4 + 96);
      uint64_t v22 = *(void *)(v4 + 88);
      uint64_t v23 = *(void *)(v22 + v21);
      uint64_t v24 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
      swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
      uint64_t v25 = swift_retain(v23);
      uint64_t v26 = sub_10009EC08(v25);
      uint64_t v27 = *(void *)(v22 + v21);
      *(void *)(v22 + v21) = v26;
      swift_release(v27);
    }

    uint64_t v28 = (uint64_t *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess(v28, v4 + 48, 1LL, 0LL);
    uint64_t v19 = *v28;
    unint64_t v20 = v28[1];
    *uint64_t v28 = v5;
    v28[1] = v7;
  }

  sub_10000852C(v19, v20);
  free((void *)v4);
}

uint64_t EscrowInformation.Metadata.serial.getter()
{
  return sub_100078110(&OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
}

uint64_t sub_100078110(void *a1)
{
  uint64_t v2 = (uint64_t *)(*(void *)(v1 + *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20)) + *a1);
  swift_beginAccess(v2, v5, 0LL, 0LL);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t EscrowInformation.Metadata.serial.setter(uint64_t a1, uint64_t a2)
{
  return sub_100078180( a1,  a2,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
}

uint64_t sub_100078180(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t v10 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = swift_retain(v9);
    uint64_t v12 = sub_10009EC08(v11);
    uint64_t v13 = *(void *)(v5 + v8);
    *(void *)(v5 + v_Block_object_dispose(va, 8) = v12;
    swift_release(v13);
  }

  uint64_t v14 = (void *)(*(void *)(v5 + v8) + *a3);
  swift_beginAccess(v14, v17, 1LL, 0LL);
  uint64_t v15 = v14[1];
  *uint64_t v14 = a1;
  v14[1] = a2;
  return swift_bridgeObjectRelease(v15);
}

void (*EscrowInformation.Metadata.serial.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__serial);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000782D0;
}

void sub_1000782D0(uint64_t *a1, char a2)
{
}

void sub_1000782DC(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  uint64_t v6 = *(int *)(*a1 + 96);
  uint64_t v7 = *(void *)(*a1 + 80);
  uint64_t v8 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v8 + v6)) & 1) == 0)
    {
      uint64_t v9 = *(int *)(v4 + 96);
      uint64_t v10 = *(void *)(v4 + 88);
      uint64_t v11 = *(void *)(v10 + v9);
      uint64_t v12 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      uint64_t v13 = swift_retain(v11);
      uint64_t v14 = sub_10009EC08(v13);
      uint64_t v15 = *(void *)(v10 + v9);
      *(void *)(v10 + v9) = v14;
      swift_release(v15);
    }

    unint64_t v16 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess(v16, v4 + 24, 1LL, 0LL);
    uint64_t v17 = v16[1];
    *unint64_t v16 = v5;
    v16[1] = v7;
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = *(void *)(v4 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v8 + v6)) & 1) == 0)
    {
      uint64_t v19 = *(int *)(v4 + 96);
      uint64_t v20 = *(void *)(v4 + 88);
      uint64_t v21 = *(void *)(v20 + v19);
      uint64_t v22 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      uint64_t v23 = swift_retain(v21);
      uint64_t v24 = sub_10009EC08(v23);
      uint64_t v25 = *(void *)(v20 + v19);
      *(void *)(v20 + v19) = v24;
      swift_release(v25);
    }

    uint64_t v26 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess(v26, v4 + 48, 1LL, 0LL);
    uint64_t v18 = v26[1];
    *uint64_t v26 = v5;
    v26[1] = v7;
  }

  swift_bridgeObjectRelease(v18);
  free((void *)v4);
}

uint64_t EscrowInformation.Metadata.build.getter()
{
  return sub_100078110(&OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
}

uint64_t EscrowInformation.Metadata.build.setter(uint64_t a1, uint64_t a2)
{
  return sub_100078180( a1,  a2,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
}

void (*EscrowInformation.Metadata.build.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__build);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000784F4;
}

void sub_1000784F4(uint64_t *a1, char a2)
{
}

uint64_t EscrowInformation.Metadata.passcodeGeneration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100007578(&qword_1002520E8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v7, v11, 0LL, 0LL);
  sub_10000FC68(v7, (uint64_t)v6, &qword_1002520E8);
  uint64_t v8 = type metadata accessor for PasscodeGeneration(0LL);
  *a1 = 0LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v6, &qword_1002520E8);
}

uint64_t EscrowInformation.Metadata.passcodeGeneration.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_1002520E8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v23[-v10 - 8];
  uint64_t v12 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v12)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + v12);
    uint64_t v14 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = swift_retain(v13);
    uint64_t v16 = sub_10009EC08(v15);
    uint64_t v17 = *(void *)(v2 + v12);
    *(void *)(v2 + v12) = v16;
    swift_release(v17);
  }

  uint64_t v18 = *(void *)(v2 + v12);
  sub_100041608(a1, (uint64_t)v11, type metadata accessor for PasscodeGeneration);
  uint64_t v19 = type metadata accessor for PasscodeGeneration(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v11, 0LL, 1LL, v19);
  sub_1000B669C((uint64_t)v11, (uint64_t)v8, &qword_1002520E8);
  uint64_t v20 = v18
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  swift_beginAccess( v18 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration,  v23,  33LL,  0LL);
  swift_retain(v18);
  sub_1000B66E0((uint64_t)v8, v20, &qword_1002520E8);
  swift_endAccess(v23);
  return swift_release(v18);
}

void (*EscrowInformation.Metadata.passcodeGeneration.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100007578(&qword_1002520E8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PasscodeGeneration(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000FC68(v10, (uint64_t)v5, &qword_1002520E8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_1002520E8);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for PasscodeGeneration);
  }

  return sub_1000788CC;
}

void sub_1000788CC(uint64_t a1, char a2)
{
}

void sub_1000788E0(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v7 = *(void **)(*(void *)a1 + 48LL);
  size_t v8 = *(void **)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    sub_10004164C(*(void *)(*(void *)a1 + 48LL), (uint64_t)v6, a4);
    a3(v6);
    sub_1000415CC((uint64_t)v7, a4);
  }

  else
  {
    a3(*(void **)(*(void *)a1 + 48LL));
  }

  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL EscrowInformation.Metadata.hasPasscodeGeneration.getter()
{
  return sub_100065DD4( &qword_1002520E8,  type metadata accessor for EscrowInformation.Metadata,  &OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration,  type metadata accessor for PasscodeGeneration);
}

Swift::Void __swiftcall EscrowInformation.Metadata.clearPasscodeGeneration()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007578(&qword_1002520E8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(int *)(type metadata accessor for EscrowInformation.Metadata(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v0 + v6);
    uint64_t v8 = type metadata accessor for EscrowInformation.Metadata._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_10009EC08(v9);
    uint64_t v11 = *(void *)(v1 + v6);
    *(void *)(v1 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = type metadata accessor for PasscodeGeneration(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v5, 1LL, 1LL, v13);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration;
  swift_beginAccess( v12 + OBJC_IVAR____TtCVV18TrustedPeersHelper17EscrowInformation8MetadataP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__passcodeGeneration,  v16,  33LL,  0LL);
  swift_retain(v12);
  sub_1000B66E0((uint64_t)v5, v14, &qword_1002520E8);
  swift_endAccess(v16);
  swift_release(v12);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.secureBackupMetadataTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  sub_10000FC68(v1 + *(int *)(v7 + 64), (uint64_t)v6, (uint64_t *)&unk_100256D30);
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  Google_Protobuf_Timestamp.init()();
  return sub_100041590((uint64_t)v6, (uint64_t *)&unk_100256D30);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.secureBackupMetadataTimestamp.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL) + 64);
  sub_100041590(v3, (uint64_t *)&unk_100256D30);
  uint64_t v4 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, a1, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v3, 0LL, 1LL, v4);
}

void (*EscrowInformation.Metadata.ClientMetadata.secureBackupMetadataTimestamp.modify( void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256D30);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL) + 64);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256D30);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Google_Protobuf_Timestamp.init()();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256D30);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100063C00;
}

BOOL EscrowInformation.Metadata.ClientMetadata.hasSecureBackupMetadataTimestamp.getter()
{
  uint64_t v1 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL);
  sub_10000FC68(v0 + *(int *)(v5 + 64), (uint64_t)v4, (uint64_t *)&unk_100256D30);
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v4, 1LL, v6) != 1;
  sub_100041590((uint64_t)v4, (uint64_t *)&unk_100256D30);
  return v7;
}

Swift::Void __swiftcall EscrowInformation.Metadata.ClientMetadata.clearSecureBackupMetadataTimestamp()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for EscrowInformation.Metadata.ClientMetadata(0LL) + 64);
  sub_100041590(v1, (uint64_t *)&unk_100256D30);
  uint64_t v2 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.secureBackupUsesComplexPassphrase.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.secureBackupUsesComplexPassphrase.setter(uint64_t result)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.secureBackupUsesNumericPassphrase.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.secureBackupUsesNumericPassphrase.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceEnclosureColor.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceEnclosureColor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 48));
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceMid.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceMid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 64));
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceModel.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain(*(void *)(v0 + 80));
  return v1;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceModel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 80));
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceModelClass.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain(*(void *)(v0 + 96));
  return v1;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceModelClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 96));
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 96) = a2;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceModelVersion.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain(*(void *)(v0 + 112));
  return v1;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceModelVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 112));
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = a2;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain(*(void *)(v0 + 128));
  return v1;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.deviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 128));
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.devicePlatform.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.devicePlatform.setter(uint64_t result)
{
  *(void *)(v1 + 136) = result;
  return result;
}

uint64_t (*EscrowInformation.Metadata.ClientMetadata.devicePlatform.modify())()
{
  return ResetReason.rawValue.getter;
}

uint64_t EscrowInformation.Metadata.ClientMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000790D8(type metadata accessor for EscrowInformation.Metadata.ClientMetadata, a1);
}

uint64_t sub_1000790D8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 60);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t EscrowInformation.Metadata.ClientMetadata.unknownFields.setter(uint64_t a1)
{
  return sub_100079130(a1, type metadata accessor for EscrowInformation.Metadata.ClientMetadata);
}

uint64_t sub_100079130(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 60);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*EscrowInformation.Metadata.ClientMetadata.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t PCSService.publicKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1000084E8(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t PCSService.publicKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000852C(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + _Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t PCSService.zone.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t PCSService.zone.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t PCSService.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100079270(type metadata accessor for PCSService, a1);
}

uint64_t sub_100079270@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t PCSService.unknownFields.setter(uint64_t a1)
{
  return sub_1000792C8(a1, type metadata accessor for PCSService);
}

uint64_t sub_1000792C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*PCSService.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t PCSService.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = xmmword_1001DE6F0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  type metadata accessor for PCSService(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t DirectPCSIdentityFetchRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for DirectPCSIdentityFetchRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*DirectPCSIdentityFetchRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for DirectPCSIdentityFetchRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL DirectPCSIdentityFetchRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for DirectPCSIdentityFetchRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall DirectPCSIdentityFetchRequest.clearMetrics()()
{
}

uint64_t DirectPCSIdentityFetchRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for DirectPCSIdentityFetchRequest, a1);
}

uint64_t DirectPCSIdentityFetchRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for DirectPCSIdentityFetchRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*DirectPCSIdentityFetchRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for DirectPCSIdentityFetchRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL DirectPCSIdentityFetchRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for DirectPCSIdentityFetchRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall DirectPCSIdentityFetchRequest.clearAccountInfo()()
{
}

uint64_t DirectPCSIdentityFetchRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for DirectPCSIdentityFetchRequest, a1);
}

uint64_t DirectPCSIdentityFetchRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for DirectPCSIdentityFetchRequest);
}

uint64_t (*DirectPCSIdentityFetchRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t DirectPCSIdentityFetchRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_100075BF4((uint64_t)_swiftEmptyArrayStorage, type metadata accessor for DirectPCSIdentityFetchRequest, a1);
}

uint64_t DirectPCSIdentity.item.setter(uint64_t a1)
{
  return sub_1000796E4(a1, type metadata accessor for DirectPCSIdentity);
}

uint64_t sub_1000796E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 20);
  sub_100041590(v4, &qword_1002517E0);
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, a1, v5);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
}

void (*DirectPCSIdentity.item.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_1002517E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for DirectPCSIdentity(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_1002517E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v5, &qword_1002517E0);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100066994;
}

BOOL DirectPCSIdentity.hasItem.getter()
{
  return sub_100068F74( &qword_1002517E0,  type metadata accessor for DirectPCSIdentity,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
}

Swift::Void __swiftcall DirectPCSIdentity.clearItem()()
{
}

uint64_t DirectPCSIdentity.pcsService.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for DirectPCSIdentity,  &qword_1002517F8,  type metadata accessor for PCSService);
}

void (*DirectPCSIdentity.pcsService.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_1002517F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for PCSService(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for DirectPCSIdentity(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_1002517F8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *(_DWORD *)uint64_t v9 = 0;
    *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = xmmword_1001DE6F0;
    *((void *)v9 + 3) = 0LL;
    *((void *)v9 + 4) = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_1002517F8);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for PCSService);
  }

  return sub_100079A08;
}

void sub_100079A08(uint64_t a1, char a2)
{
}

BOOL DirectPCSIdentity.hasPcsService.getter()
{
  return sub_100066CB0( &qword_1002517F8,  type metadata accessor for DirectPCSIdentity,  type metadata accessor for PCSService);
}

Swift::Void __swiftcall DirectPCSIdentity.clearPcsService()()
{
}

uint64_t DirectPCSIdentity.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100079A70( type metadata accessor for DirectPCSIdentity,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport,  type metadata accessor for PCSService,  a1);
}

uint64_t sub_100079A70@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0LL);
  uint64_t v9 = a4 + *(int *)(v8 + 20);
  uint64_t v10 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = a4 + *(int *)(v8 + 24);
  uint64_t v12 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( v11,  1LL,  1LL,  v12);
}

uint64_t DirectPCSIdentityFetchResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for DirectPCSIdentityFetchResponse, a1);
}

uint64_t DirectPCSIdentityFetchResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for DirectPCSIdentityFetchResponse);
}

uint64_t (*DirectPCSIdentityFetchResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t DirectPCSIdentityFetchResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_10007A2C8((void (*)(void))type metadata accessor for DirectPCSIdentityFetchResponse, a1);
}

uint64_t CurrentCKKSItemSpecifier.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for CurrentCKKSItemSpecifier, a1);
}

uint64_t CurrentCKKSItemSpecifier.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for CurrentCKKSItemSpecifier);
}

uint64_t (*CurrentCKKSItemSpecifier.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t CurrentCKKSItemSpecifier.init()@<X0>(void *a1@<X8>)
{
  return sub_100079BA4((void (*)(void))type metadata accessor for CurrentCKKSItemSpecifier, a1);
}

uint64_t sub_100079BA4@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  a1(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t CurrentItemFetchRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for CurrentItemFetchRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

void (*CurrentItemFetchRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CurrentItemFetchRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL CurrentItemFetchRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for CurrentItemFetchRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall CurrentItemFetchRequest.clearMetrics()()
{
}

uint64_t CurrentItemFetchRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for CurrentItemFetchRequest, a1);
}

uint64_t CurrentItemFetchRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for CurrentItemFetchRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

void (*CurrentItemFetchRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CurrentItemFetchRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

BOOL CurrentItemFetchRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for CurrentItemFetchRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall CurrentItemFetchRequest.clearAccountInfo()()
{
}

uint64_t CurrentItemFetchRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for CurrentItemFetchRequest, a1);
}

uint64_t CurrentItemFetchRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for CurrentItemFetchRequest);
}

uint64_t (*CurrentItemFetchRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t CurrentItemFetchRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_100075BF4((uint64_t)_swiftEmptyArrayStorage, type metadata accessor for CurrentItemFetchRequest, a1);
}

uint64_t CurrentCKKSItem.item.setter(uint64_t a1)
{
  return sub_1000796E4(a1, type metadata accessor for CurrentCKKSItem);
}

void (*CurrentCKKSItem.item.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_1002517E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CurrentCKKSItem(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_1002517E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_100041590((uint64_t)v5, &qword_1002517E0);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_100066994;
}

BOOL CurrentCKKSItem.hasItem.getter()
{
  return sub_100068F74( &qword_1002517E0,  type metadata accessor for CurrentCKKSItem,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
}

Swift::Void __swiftcall CurrentCKKSItem.clearItem()()
{
}

uint64_t CurrentCKKSItem.itemSpecifier.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for CurrentCKKSItem,  (uint64_t *)&unk_100256F50,  type metadata accessor for CurrentCKKSItemSpecifier);
}

void (*CurrentCKKSItem.itemSpecifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578((uint64_t *)&unk_100256F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CurrentCKKSItemSpecifier(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CurrentCKKSItem(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, (uint64_t *)&unk_100256F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, (uint64_t *)&unk_100256F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for CurrentCKKSItemSpecifier);
  }

  return sub_10007A1E4;
}

void sub_10007A1E4(uint64_t a1, char a2)
{
}

BOOL CurrentCKKSItem.hasItemSpecifier.getter()
{
  return sub_100066CB0( (uint64_t *)&unk_100256F50,  type metadata accessor for CurrentCKKSItem,  type metadata accessor for CurrentCKKSItemSpecifier);
}

Swift::Void __swiftcall CurrentCKKSItem.clearItemSpecifier()()
{
}

uint64_t CurrentCKKSItem.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100079A70( type metadata accessor for CurrentCKKSItem,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport,  type metadata accessor for CurrentCKKSItemSpecifier,  a1);
}

uint64_t CurrentItemFetchResponse.synckeys.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t CurrentItemFetchResponse.synckeys.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 8));
  *(void *)(v1 + _Block_object_dispose(va, 8) = a1;
  return result;
}

uint64_t CurrentItemFetchResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006364C(type metadata accessor for CurrentItemFetchResponse, a1);
}

uint64_t CurrentItemFetchResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000636A4(a1, type metadata accessor for CurrentItemFetchResponse);
}

uint64_t (*CurrentItemFetchResponse.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t CurrentItemFetchResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_10007A2C8((void (*)(void))type metadata accessor for CurrentItemFetchResponse, a1);
}

uint64_t sub_10007A2C8@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = _swiftEmptyArrayStorage;
  a2[1] = _swiftEmptyArrayStorage;
  a1(0LL);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t RemoveUnreadableCKServerDataRequest.metrics.setter(uint64_t a1)
{
  return sub_10007A324( a1,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  &qword_100257000,  type metadata accessor for Metrics);
}

uint64_t sub_10007A324( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 24);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*RemoveUnreadableCKServerDataRequest.metrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100257000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100257000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100257000);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for Metrics);
  }

  return sub_100068BF8;
}

BOOL RemoveUnreadableCKServerDataRequest.hasMetrics.getter()
{
  return sub_100066CB0( &qword_100257000,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  type metadata accessor for Metrics);
}

Swift::Void __swiftcall RemoveUnreadableCKServerDataRequest.clearMetrics()()
{
}

uint64_t RemoveUnreadableCKServerDataRequest.accountInfo.getter@<X0>(_DWORD *a1@<X8>)
{
  return sub_10007A50C(type metadata accessor for RemoveUnreadableCKServerDataRequest, a1);
}

uint64_t sub_10007A50C@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v5, v6);
  size_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1(0LL);
  sub_10000FC68(v2 + *(int *)(v9 + 28), (uint64_t)v8, &qword_100251F50);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  *a2 = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  return sub_100041590((uint64_t)v8, &qword_100251F50);
}

uint64_t RemoveUnreadableCKServerDataRequest.accountInfo.setter(uint64_t a1)
{
  return sub_10007A618( a1,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  &qword_100251F50,  type metadata accessor for AccountInfo);
}

uint64_t sub_10007A618( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 28);
  sub_100041590(v8, a3);
  sub_100041608(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*RemoveUnreadableCKServerDataRequest.accountInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000FC68(v1 + v10, (uint64_t)v5, &qword_100251F50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = 0;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    sub_100041590((uint64_t)v5, &qword_100251F50);
  }

  else
  {
    sub_100041608((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccountInfo);
  }

  return sub_100068940;
}

void sub_10007A7B4(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48LL);
  size_t v8 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v9 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v10 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v11 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v12 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v13 = **(void **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    sub_10004164C(*(void *)(*(void *)a1 + 40LL), (uint64_t)v8, a4);
    sub_100041590(v13, a3);
    sub_100041608((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
    sub_1000415CC((uint64_t)v9, a4);
  }

  else
  {
    sub_100041590(**(void **)a1 + v7, a3);
    sub_100041608((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
  }

  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL RemoveUnreadableCKServerDataRequest.hasAccountInfo.getter()
{
  return sub_100066F44( &qword_100251F50,  type metadata accessor for RemoveUnreadableCKServerDataRequest,  type metadata accessor for AccountInfo);
}

Swift::Void __swiftcall RemoveUnreadableCKServerDataRequest.clearAccountInfo()()
{
}

uint64_t RemoveUnreadableCKServerDataRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100065570(type metadata accessor for RemoveUnreadableCKServerDataRequest, a1);
}

uint64_t RemoveUnreadableCKServerDataRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000655C8(a1, type metadata accessor for RemoveUnreadableCKServerDataRequest);
}

uint64_t (*RemoveUnreadableCKServerDataRequest.unknownFields.modify())(void)
{
  return ResetReason.rawValue.getter;
}

uint64_t RemoveUnreadableCKServerDataRequest.init()@<X0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = type metadata accessor for RemoveUnreadableCKServerDataRequest(0LL);
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v3 = &a1[*(int *)(v2 + 24)];
  uint64_t v4 = type metadata accessor for Metrics(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = &a1[*(int *)(v2 + 28)];
  uint64_t v6 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvg_0@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvs_0( uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL))(v1, a1, v3);
}

uint64_t sub_10007AA30()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static ViewKeyClass._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static ViewKeyClass._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  size_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *size_t v8 = 0LL;
  *(void *)uint64_t v9 = "VIEW_KEY_CLASS_TLK";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "VIEW_KEY_CLASS_CLASS_A";
  *((void *)v13 + 1) = 22LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "VIEW_KEY_CLASS_CLASS_C";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 22LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ViewKeyClass._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C18, (uint64_t)static ViewKeyClass._protobuf_nameMap, (uint64_t)sub_10007AA30);
}

uint64_t static ViewKeyClass._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C18, (uint64_t)static ViewKeyClass._protobuf_nameMap, (uint64_t)sub_10007AA30, a1);
}

uint64_t sub_10007ABF4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C18, (uint64_t)static ViewKeyClass._protobuf_nameMap, (uint64_t)sub_10007AA30, a1);
}

uint64_t sub_10007AC10()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static ResetReason._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static ResetReason._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE700;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "RESET_REASON_UNKNOWN";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 20LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "RESET_REASON_USER_INITIATED_RESET";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 33LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "RESET_REASON_HEALTH_CHECK";
  *((void *)v15 + 1) = 25LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "RESET_REASON_NO_BOTTLE_DURING_ESCROW_RECOVERY";
  *((void *)v17 + 1) = 45LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "RESET_REASON_LEGACY_JOIN_CIRCLE";
  *((void *)v19 + 1) = 31LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 5LL;
  *(void *)uint64_t v21 = "RESET_REASON_RECOVERY_KEY";
  *((void *)v21 + 1) = 25LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 6LL;
  *(void *)uint64_t v23 = "RESET_REASON_TEST_GENERATED";
  *((void *)v23 + 1) = 27LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 7LL;
  *(void *)uint64_t v25 = "RESET_REASON_SUPPORT_APP_INITIATED_RESET";
  *((void *)v25 + 1) = 40LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ResetReason._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C20, (uint64_t)static ResetReason._protobuf_nameMap, (uint64_t)sub_10007AC10);
}

uint64_t sub_10007AED4(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for _NameMap(0LL);
  return sub_100006BAC(v4, a2);
}

uint64_t static ResetReason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C20, (uint64_t)static ResetReason._protobuf_nameMap, (uint64_t)sub_10007AC10, a1);
}

uint64_t sub_10007AF30@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_100006BAC(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_10007AF98@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C20, (uint64_t)static ResetReason._protobuf_nameMap, (uint64_t)sub_10007AC10, a1);
}

uint64_t sub_10007AFB4@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_100006BAC(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_10007B020()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static AccountFlags._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static AccountFlags._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC30;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "ACCOUNT_FLAGS_UNKNOWN";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 21LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "ACCOUNT_FLAGS_INTERNAL";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 22LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "ACCOUNT_FLAGS_DEMO";
  *((void *)v15 + 1) = 18LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "ACCOUNT_FLAGS_DBR";
  *((void *)v17 + 1) = 17LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 8LL;
  *(void *)uint64_t v19 = "ACCOUNT_FLAGS_SA_OR_2FAFA";
  *((void *)v19 + 1) = 25LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 16LL;
  *(void *)uint64_t v21 = "ACCOUNT_FLAGS_CDP";
  *((void *)v21 + 1) = 17LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t AccountFlags._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C28, (uint64_t)static AccountFlags._protobuf_nameMap, (uint64_t)sub_10007B020);
}

uint64_t static AccountFlags._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C28, (uint64_t)static AccountFlags._protobuf_nameMap, (uint64_t)sub_10007B020, a1);
}

uint64_t sub_10007B28C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C28, (uint64_t)static AccountFlags._protobuf_nameMap, (uint64_t)sub_10007B020, a1);
}

uint64_t sub_10007B2A8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static FilteringRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static FilteringRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "FILTERING_REQUEST_UNKNOWN";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 25LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "FILTERING_REQUEST_BY_OCTAGON_ONLY";
  *((void *)v13 + 1) = 33LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t FilteringRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C30, (uint64_t)static FilteringRequest._protobuf_nameMap, (uint64_t)sub_10007B2A8);
}

uint64_t static FilteringRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C30, (uint64_t)static FilteringRequest._protobuf_nameMap, (uint64_t)sub_10007B2A8, a1);
}

uint64_t sub_10007B430@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C30, (uint64_t)static FilteringRequest._protobuf_nameMap, (uint64_t)sub_10007B2A8, a1);
}

uint64_t sub_10007B44C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static RepairAction._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static RepairAction._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC30;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "REPAIR_ACTION_NO_ACTION";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 23LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "REPAIR_ACTION_POST_REPAIR_ACCOUNT";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 33LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "REPAIR_ACTION_POST_REPAIR_ESCROW";
  *((void *)v15 + 1) = 32LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "REPAIR_ACTION_RESET_OCTAGON";
  *((void *)v17 + 1) = 27LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "REPAIR_ACTION_LEAVE_TRUST";
  *((void *)v19 + 1) = 25LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 5LL;
  *(void *)uint64_t v21 = "REPAIR_ACTION_REROLL";
  *((void *)v21 + 1) = 20LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t RepairAction._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C38, (uint64_t)static RepairAction._protobuf_nameMap, (uint64_t)sub_10007B44C);
}

uint64_t static RepairAction._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C38, (uint64_t)static RepairAction._protobuf_nameMap, (uint64_t)sub_10007B44C, a1);
}

uint64_t sub_10007B6B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C38, (uint64_t)static RepairAction._protobuf_nameMap, (uint64_t)sub_10007B44C, a1);
}

uint64_t sub_10007B6D0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SupportAppDeviceStatus._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SupportAppDeviceStatus._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "SUPPORT_APP_DEVICE_STATUS_HEALTHY";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 33LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SUPPORT_APP_DEVICE_STATUS_BROKEN";
  *((void *)v13 + 1) = 32LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SupportAppDeviceStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250C40,  (uint64_t)static SupportAppDeviceStatus._protobuf_nameMap,  (uint64_t)sub_10007B6D0);
}

uint64_t static SupportAppDeviceStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250C40,  (uint64_t)static SupportAppDeviceStatus._protobuf_nameMap,  (uint64_t)sub_10007B6D0,  a1);
}

uint64_t sub_10007B858@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250C40,  (uint64_t)static SupportAppDeviceStatus._protobuf_nameMap,  (uint64_t)sub_10007B6D0,  a1);
}

uint64_t sub_10007B874()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static RecordStatus._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static RecordStatus._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "RECORD_STATUS_VALID";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "RECORD_STATUS_INVALID";
  *((void *)v13 + 1) = 21LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t RecordStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C48, (uint64_t)static RecordStatus._protobuf_nameMap, (uint64_t)sub_10007B874);
}

uint64_t static RecordStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C48, (uint64_t)static RecordStatus._protobuf_nameMap, (uint64_t)sub_10007B874, a1);
}

uint64_t sub_10007B9FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C48, (uint64_t)static RecordStatus._protobuf_nameMap, (uint64_t)sub_10007B874, a1);
}

uint64_t sub_10007BA18()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SOSViability._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SOSViability._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "SOS_VIABLE_UNKNOWN";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SOS_VIABLE";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "SOS_NOT_VIABLE";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 14LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SOSViability._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C50, (uint64_t)static SOSViability._protobuf_nameMap, (uint64_t)sub_10007BA18);
}

uint64_t static SOSViability._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C50, (uint64_t)static SOSViability._protobuf_nameMap, (uint64_t)sub_10007BA18, a1);
}

uint64_t sub_10007BBE0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C50, (uint64_t)static SOSViability._protobuf_nameMap, (uint64_t)sub_10007BA18, a1);
}

void *SignedPeerPermanentInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static SignedPeerPermanentInfo.protoMessageName;
}

unint64_t static SignedPeerPermanentInfo.protoMessageName.getter()
{
  return 0xD000000000000017LL;
}

uint64_t sub_10007BC24()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SignedPeerPermanentInfo._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SignedPeerPermanentInfo._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "peer_permanent_info";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sig";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SignedPeerPermanentInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250C58,  (uint64_t)static SignedPeerPermanentInfo._protobuf_nameMap,  (uint64_t)sub_10007BC24);
}

uint64_t static SignedPeerPermanentInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250C58,  (uint64_t)static SignedPeerPermanentInfo._protobuf_nameMap,  (uint64_t)sub_10007BC24,  a1);
}

uint64_t SignedCustodianRecoveryKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A35D8( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularBytesField(value:));
}

void SignedPeerPermanentInfo.traverse<A>(visitor:)()
{
}

Swift::Int SignedPeerPermanentInfo.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SignedPeerPermanentInfo,  &qword_1002520F8,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
}

uint64_t (*sub_10007BE14())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_10007BE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SignedCustodianRecoveryKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void sub_10007BE3C()
{
}

uint64_t sub_10007BE54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002563C8,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007BEA8@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250C58,  (uint64_t)static SignedPeerPermanentInfo._protobuf_nameMap,  (uint64_t)sub_10007BC24,  a1);
}

uint64_t sub_10007BEC4(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252500,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007BF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252500,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
  return Message.hash(into:)(a1, a2, v4);
}

void *SignedPeerStableInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static SignedPeerStableInfo.protoMessageName;
}

unint64_t static SignedPeerStableInfo.protoMessageName.getter()
{
  return 0xD000000000000014LL;
}

uint64_t sub_10007BF84()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SignedPeerStableInfo._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SignedPeerStableInfo._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "peer_stable_info";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sig";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SignedPeerStableInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C60, (uint64_t)static SignedPeerStableInfo._protobuf_nameMap, (uint64_t)sub_10007BF84);
}

uint64_t static SignedPeerStableInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250C60,  (uint64_t)static SignedPeerStableInfo._protobuf_nameMap,  (uint64_t)sub_10007BF84,  a1);
}

void SignedPeerStableInfo.traverse<A>(visitor:)()
{
}

void sub_10007C130()
{
  __asm { BR              X10 }

uint64_t sub_10007C180(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v2))
  {
    __asm { BR              X10 }
  }

  return result;
}

Swift::Int SignedPeerStableInfo.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SignedPeerStableInfo,  &qword_100252100,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
}

void sub_10007C298()
{
}

uint64_t sub_10007C2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002563C0,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007C300@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250C60,  (uint64_t)static SignedPeerStableInfo._protobuf_nameMap,  (uint64_t)sub_10007BF84,  a1);
}

uint64_t sub_10007C31C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007C35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  return Message.hash(into:)(a1, a2, v4);
}

void *SignedPeerDynamicInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static SignedPeerDynamicInfo.protoMessageName;
}

unint64_t static SignedPeerDynamicInfo.protoMessageName.getter()
{
  return 0xD000000000000015LL;
}

uint64_t sub_10007C3D4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SignedPeerDynamicInfo._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SignedPeerDynamicInfo._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "peer_dynamic_info";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sig";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SignedPeerDynamicInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250C68,  (uint64_t)static SignedPeerDynamicInfo._protobuf_nameMap,  (uint64_t)sub_10007C3D4);
}

uint64_t static SignedPeerDynamicInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250C68,  (uint64_t)static SignedPeerDynamicInfo._protobuf_nameMap,  (uint64_t)sub_10007C3D4,  a1);
}

void SignedPeerDynamicInfo.traverse<A>(visitor:)()
{
}

Swift::Int SignedPeerDynamicInfo.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SignedPeerDynamicInfo,  &qword_100252108,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
}

void sub_10007C59C()
{
}

uint64_t sub_10007C5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002563B8,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007C604@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250C68,  (uint64_t)static SignedPeerDynamicInfo._protobuf_nameMap,  (uint64_t)sub_10007C3D4,  a1);
}

uint64_t sub_10007C620(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252530,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007C660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252530,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
  return Message.hash(into:)(a1, a2, v4);
}

const char *SignedVoucher.protoMessageName.unsafeMutableAddressor()
{
  return "SignedVoucher";
}

uint64_t static SignedVoucher.protoMessageName.getter()
{
  return 0x6F5664656E676953LL;
}

uint64_t sub_10007C6E0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SignedVoucher._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SignedVoucher._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "voucher";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sig";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SignedVoucher._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C70, (uint64_t)static SignedVoucher._protobuf_nameMap, (uint64_t)sub_10007C6E0);
}

uint64_t static SignedVoucher._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C70, (uint64_t)static SignedVoucher._protobuf_nameMap, (uint64_t)sub_10007C6E0, a1);
}

void SignedVoucher.traverse<A>(visitor:)()
{
}

Swift::Int SignedVoucher.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SignedVoucher,  &qword_100252110,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
}

uint64_t sub_10007C8A0@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1001DE6F0;
  a1[1] = xmmword_1001DE6F0;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

void sub_10007C8C8()
{
}

uint64_t sub_10007C8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002563B0,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007C930@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C70, (uint64_t)static SignedVoucher._protobuf_nameMap, (uint64_t)sub_10007C6E0, a1);
}

uint64_t sub_10007C94C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100257010,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007C98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100257010,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
  return Message.hash(into:)(a1, a2, v4);
}

void *SignedRecoveryVoucher.protoMessageName.unsafeMutableAddressor()
{
  return &static SignedRecoveryVoucher.protoMessageName;
}

unint64_t static SignedRecoveryVoucher.protoMessageName.getter()
{
  return 0xD000000000000015LL;
}

uint64_t sub_10007CA04()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SignedRecoveryVoucher._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SignedRecoveryVoucher._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "recovery_voucher";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sig";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SignedRecoveryVoucher._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250C78,  (uint64_t)static SignedRecoveryVoucher._protobuf_nameMap,  (uint64_t)sub_10007CA04);
}

uint64_t static SignedRecoveryVoucher._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250C78,  (uint64_t)static SignedRecoveryVoucher._protobuf_nameMap,  (uint64_t)sub_10007CA04,  a1);
}

void SignedRecoveryVoucher.traverse<A>(visitor:)()
{
}

Swift::Int SignedRecoveryVoucher.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SignedRecoveryVoucher,  &qword_100252118,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
}

void sub_10007CBCC()
{
}

uint64_t sub_10007CBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002563A8,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007CC34@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250C78,  (uint64_t)static SignedRecoveryVoucher._protobuf_nameMap,  (uint64_t)sub_10007CA04,  a1);
}

uint64_t sub_10007CC50(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252558,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007CC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252558,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
  return Message.hash(into:)(a1, a2, v4);
}

void *SignedCustodianRecoveryKey.protoMessageName.unsafeMutableAddressor()
{
  return &static SignedCustodianRecoveryKey.protoMessageName;
}

unint64_t static SignedCustodianRecoveryKey.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10007CD08()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SignedCustodianRecoveryKey._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SignedCustodianRecoveryKey._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "custodian_recovery_key";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 22LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sig";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SignedCustodianRecoveryKey._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250C80,  (uint64_t)static SignedCustodianRecoveryKey._protobuf_nameMap,  (uint64_t)sub_10007CD08);
}

uint64_t static SignedCustodianRecoveryKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250C80,  (uint64_t)static SignedCustodianRecoveryKey._protobuf_nameMap,  (uint64_t)sub_10007CD08,  a1);
}

void SignedCustodianRecoveryKey.traverse<A>(visitor:)()
{
}

uint64_t static SignedCustodianRecoveryKey.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1000B2874(a1, a2, type metadata accessor for SignedCustodianRecoveryKey) & 1;
}

Swift::Int SignedCustodianRecoveryKey.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SignedCustodianRecoveryKey,  &qword_100252120,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
}

void sub_10007CEF0()
{
}

uint64_t sub_10007CF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002563A0,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007CF58@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250C80,  (uint64_t)static SignedCustodianRecoveryKey._protobuf_nameMap,  (uint64_t)sub_10007CD08,  a1);
}

uint64_t sub_10007CF74(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252570,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007CFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252570,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
  return Message.hash(into:)(a1, a2, v4);
}

void *IdmsTrustedDevicesVersion.protoMessageName.unsafeMutableAddressor()
{
  return &static IdmsTrustedDevicesVersion.protoMessageName;
}

unint64_t static IdmsTrustedDevicesVersion.protoMessageName.getter()
{
  return 0xD000000000000019LL;
}

uint64_t sub_10007D02C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static IdmsTrustedDevicesVersion._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static IdmsTrustedDevicesVersion._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "IdmsTrustedDevicesVersionString";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 31LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "timestamp";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t IdmsTrustedDevicesVersion._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250C88,  (uint64_t)static IdmsTrustedDevicesVersion._protobuf_nameMap,  (uint64_t)sub_10007D02C);
}

uint64_t static IdmsTrustedDevicesVersion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250C88,  (uint64_t)static IdmsTrustedDevicesVersion._protobuf_nameMap,  (uint64_t)sub_10007D02C,  a1);
}

uint64_t IdmsTrustedDevicesVersion.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1000A50A4( a1,  v5,  a2,  a3,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  &qword_100256418,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
      }

      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v5, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t IdmsTrustedDevicesVersion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = sub_10007D34C((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for IdmsTrustedDevicesVersion(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_10007D34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t *)&unk_100256D30);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v17 = sub_1000077B8( &qword_100256418,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

Swift::Int IdmsTrustedDevicesVersion.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for IdmsTrustedDevicesVersion,  &qword_100252128,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
}

uint64_t sub_10007D4E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t (*sub_10007D548())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_10007D55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IdmsTrustedDevicesVersion.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10007D570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IdmsTrustedDevicesVersion.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10007D584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256398,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007D5D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250C88,  (uint64_t)static IdmsTrustedDevicesVersion._protobuf_nameMap,  (uint64_t)sub_10007D02C,  a1);
}

uint64_t sub_10007D5F0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  return Message.hash(into:)(a1, a2, v4);
}

const char *Peer.protoMessageName.unsafeMutableAddressor()
{
  return "Peer";
}

uint64_t static Peer.protoMessageName.getter()
{
  return 1919247696LL;
}

uint64_t sub_10007D69C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static Peer._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static Peer._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC40;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "peer_id";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "permanent_info_and_sig";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 22LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "stable_info_and_sig";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "dynamic_info_and_sig";
  *((void *)v17 + 1) = 20LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "vouchers";
  *((void *)v19 + 1) = 8LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "recovery_voucher";
  *((void *)v21 + 1) = 16LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "custodian_recovery_key_and_sig";
  *((void *)v23 + 1) = 30LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Peer._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C90, (uint64_t)static Peer._protobuf_nameMap, (uint64_t)sub_10007D69C);
}

uint64_t static Peer._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C90, (uint64_t)static Peer._protobuf_nameMap, (uint64_t)sub_10007D69C, a1);
}

uint64_t Peer.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v5, a2, a3);
          break;
        case 2LL:
          sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for Peer,  type metadata accessor for SignedPeerPermanentInfo,  &qword_100252500,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
          break;
        case 3LL:
          sub_100098160( a1,  v5,  a2,  a3,  type metadata accessor for Peer,  type metadata accessor for SignedPeerStableInfo,  &qword_100252518,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
          break;
        case 4LL:
          sub_1000976DC( a1,  v5,  a2,  a3,  type metadata accessor for Peer,  type metadata accessor for SignedPeerDynamicInfo,  &qword_100252530,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
          break;
        case 5LL:
          uint64_t v11 = type metadata accessor for SignedVoucher(0LL);
          uint64_t v12 = sub_1000077B8( &qword_100257010,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v5 + 16, v11, v12, a2, a3);
          break;
        case 6LL:
          sub_10009CB08( a1,  v5,  a2,  a3,  type metadata accessor for Peer,  type metadata accessor for SignedRecoveryVoucher,  &qword_100252558,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
          break;
        case 7LL:
          sub_10009CBAC( a1,  v5,  a2,  a3,  type metadata accessor for Peer,  type metadata accessor for SignedCustodianRecoveryKey,  &qword_100252570,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Peer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = sub_10007DD50((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      sub_10007DEC4((uint64_t)v3, a1, a2, a3);
      sub_10007E038((uint64_t)v3, a1, a2, a3);
      uint64_t v11 = v3[2];
      if (*(void *)(v11 + 16))
      {
        uint64_t v12 = type metadata accessor for SignedVoucher(0LL);
        uint64_t v13 = sub_1000077B8( &qword_100257010,  type metadata accessor for SignedVoucher,  (uint64_t)&protocol conformance descriptor for SignedVoucher);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v11, 5LL, v12, v13, a2, a3);
      }

      sub_10007E1AC((uint64_t)v3, a1, a2, a3);
      sub_10007E320((uint64_t)v3, a1, a2, a3);
      type metadata accessor for Peer(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_10007DD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100256F80);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Peer(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 28), (uint64_t)v9, &qword_100256F80);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerPermanentInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252500,  type metadata accessor for SignedPeerPermanentInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerPermanentInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerPermanentInfo);
}

uint64_t sub_10007DEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Peer(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 32), (uint64_t)v9, &qword_100251F18);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
}

uint64_t sub_10007E038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Peer(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 36), (uint64_t)v9, &qword_100256CA0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252530,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
}

uint64_t sub_10007E1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F20);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedRecoveryVoucher(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Peer(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 40), (uint64_t)v9, &qword_100251F20);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedRecoveryVoucher);
  uint64_t v17 = sub_1000077B8( &qword_100252558,  type metadata accessor for SignedRecoveryVoucher,  (uint64_t)&protocol conformance descriptor for SignedRecoveryVoucher);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedRecoveryVoucher);
}

uint64_t sub_10007E320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F28);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Peer(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 44), (uint64_t)v9, &qword_100251F28);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedCustodianRecoveryKey);
  uint64_t v17 = sub_1000077B8( &qword_100252570,  type metadata accessor for SignedCustodianRecoveryKey,  (uint64_t)&protocol conformance descriptor for SignedCustodianRecoveryKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 7LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedCustodianRecoveryKey);
}

Swift::Int Peer.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for Peer,  &qword_100252130,  (uint64_t)&protocol conformance descriptor for Peer);
}

uint64_t sub_10007E4B0@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = _swiftEmptyArrayStorage;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + a1[7];
  uint64_t v5 = type metadata accessor for SignedPeerPermanentInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + a1[8];
  uint64_t v7 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = (char *)a2 + a1[9];
  uint64_t v9 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = (char *)a2 + a1[10];
  uint64_t v11 = type metadata accessor for SignedRecoveryVoucher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = (char *)a2 + a1[11];
  uint64_t v13 = type metadata accessor for SignedCustodianRecoveryKey(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( v12,  1LL,  1LL,  v13);
}

uint64_t sub_10007E5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Peer.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10007E5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Peer.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10007E5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256390,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007E648@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C90, (uint64_t)static Peer._protobuf_nameMap, (uint64_t)sub_10007D69C, a1);
}

uint64_t sub_10007E664(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  return Message.hash(into:)(a1, a2, v4);
}

const char *PeerDifference.protoMessageName.unsafeMutableAddressor()
{
  return "PeerDifference";
}

uint64_t static PeerDifference.protoMessageName.getter()
{
  return 0x6666694472656550LL;
}

uint64_t sub_10007E728()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static PeerDifference._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static PeerDifference._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "add";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 3LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "remove";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "update";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t PeerDifference._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250C98, (uint64_t)static PeerDifference._protobuf_nameMap, (uint64_t)sub_10007E728);
}

uint64_t static PeerDifference._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250C98, (uint64_t)static PeerDifference._protobuf_nameMap, (uint64_t)sub_10007E728, a1);
}

uint64_t PeerDifference.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v4 || (v12 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        sub_10007F228(v5, a1, a2, a3);
        break;
      case 2LL:
        sub_10007EDE4(v5, a1, a2, a3);
        break;
      case 1LL:
        sub_10007E9A4(v5, a1, a2, a3);
        break;
    }

    uint64_t v9 = a2;
  }

  return result;
}

uint64_t sub_10007E9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v58 = a2;
  uint64_t v5 = type metadata accessor for Peer(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v50 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8, v10);
  id v53 = &v46[-v11];
  uint64_t v12 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = &v46[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v19, v22);
  uint64_t v24 = &v46[-v23];
  uint64_t v25 = sub_100007578(&qword_100251F58);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v51 = &v46[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v27, v29);
  uint64_t v31 = &v46[-v30];
  uint64_t v52 = v6;
  uint64_t v32 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v54 = v5;
  v32(&v46[-v30], 1LL, 1LL, v5);
  uint64_t v49 = a1;
  sub_10000FC68(a1, (uint64_t)v15, &qword_100251658);
  uint64_t v48 = v17;
  int v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  int v34 = v33;
  if (v33 == 1)
  {
    sub_100041590((uint64_t)v15, &qword_100251658);
    uint64_t v36 = v56;
    uint64_t v35 = v57;
    uint64_t v37 = v16;
    uint64_t v39 = v54;
    uint64_t v38 = v55;
  }

  else
  {
    int v47 = v33;
    uint64_t v40 = (uint64_t)v53;
    sub_100041608((uint64_t)v15, (uint64_t)v24, type metadata accessor for PeerDifference.OneOf_Operation);
    sub_100041608((uint64_t)v24, (uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
    uint64_t v37 = v16;
    if (swift_getEnumCaseMultiPayload(v21, v16))
    {
      sub_1000415CC((uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
      uint64_t v36 = v56;
      uint64_t v35 = v57;
      uint64_t v39 = v54;
      uint64_t v38 = v55;
    }

    else
    {
      sub_100041590((uint64_t)v31, &qword_100251F58);
      sub_100041608((uint64_t)v21, v40, type metadata accessor for Peer);
      sub_100041608(v40, (uint64_t)v31, type metadata accessor for Peer);
      uint64_t v39 = v54;
      v32(v31, 0LL, 1LL, v54);
      uint64_t v36 = v56;
      uint64_t v35 = v57;
      uint64_t v38 = v55;
    }

    int v34 = v47;
  }

  uint64_t v41 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v31, v39, v41, v36, v35);
  if (v38) {
    return sub_100041590((uint64_t)v31, &qword_100251F58);
  }
  uint64_t v43 = v51;
  sub_10000FC68((uint64_t)v31, (uint64_t)v51, &qword_100251F58);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v52 + 48))(v43, 1LL, v39) == 1)
  {
    sub_100041590((uint64_t)v31, &qword_100251F58);
    return sub_100041590((uint64_t)v43, &qword_100251F58);
  }

  else
  {
    unsigned __int8 v44 = v50;
    sub_100041608((uint64_t)v43, (uint64_t)v50, type metadata accessor for Peer);
    if (v34 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v36, v35);
    }
    sub_100041590((uint64_t)v31, &qword_100251F58);
    uint64_t v45 = v49;
    sub_100041590(v49, &qword_100251658);
    sub_100041608((uint64_t)v44, v45, type metadata accessor for Peer);
    swift_storeEnumTagMultiPayload(v45, v37, 0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v37);
  }

uint64_t sub_10007EDE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v58 = a2;
  uint64_t v5 = type metadata accessor for Peer(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v50 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8, v10);
  id v53 = &v46[-v11];
  uint64_t v12 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = &v46[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v19, v22);
  uint64_t v24 = &v46[-v23];
  uint64_t v25 = sub_100007578(&qword_100251F58);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v51 = &v46[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v27, v29);
  uint64_t v31 = &v46[-v30];
  uint64_t v52 = v6;
  uint64_t v32 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v54 = v5;
  v32(&v46[-v30], 1LL, 1LL, v5);
  uint64_t v49 = a1;
  sub_10000FC68(a1, (uint64_t)v15, &qword_100251658);
  uint64_t v48 = v17;
  int v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  int v34 = v33;
  if (v33 == 1)
  {
    sub_100041590((uint64_t)v15, &qword_100251658);
    uint64_t v36 = v56;
    uint64_t v35 = v57;
    uint64_t v37 = v16;
    uint64_t v39 = v54;
    uint64_t v38 = v55;
  }

  else
  {
    int v47 = v33;
    uint64_t v40 = (uint64_t)v53;
    sub_100041608((uint64_t)v15, (uint64_t)v24, type metadata accessor for PeerDifference.OneOf_Operation);
    sub_100041608((uint64_t)v24, (uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
    uint64_t v37 = v16;
    if (swift_getEnumCaseMultiPayload(v21, v16) == 1)
    {
      sub_100041590((uint64_t)v31, &qword_100251F58);
      sub_100041608((uint64_t)v21, v40, type metadata accessor for Peer);
      sub_100041608(v40, (uint64_t)v31, type metadata accessor for Peer);
      uint64_t v39 = v54;
      v32(v31, 0LL, 1LL, v54);
      uint64_t v36 = v56;
      uint64_t v35 = v57;
    }

    else
    {
      sub_1000415CC((uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
      uint64_t v36 = v56;
      uint64_t v35 = v57;
      uint64_t v39 = v54;
    }

    uint64_t v38 = v55;
    int v34 = v47;
  }

  uint64_t v41 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v31, v39, v41, v36, v35);
  if (v38) {
    return sub_100041590((uint64_t)v31, &qword_100251F58);
  }
  uint64_t v43 = v51;
  sub_10000FC68((uint64_t)v31, (uint64_t)v51, &qword_100251F58);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v52 + 48))(v43, 1LL, v39) == 1)
  {
    sub_100041590((uint64_t)v31, &qword_100251F58);
    return sub_100041590((uint64_t)v43, &qword_100251F58);
  }

  else
  {
    unsigned __int8 v44 = v50;
    sub_100041608((uint64_t)v43, (uint64_t)v50, type metadata accessor for Peer);
    if (v34 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v36, v35);
    }
    sub_100041590((uint64_t)v31, &qword_100251F58);
    uint64_t v45 = v49;
    sub_100041590(v49, &qword_100251658);
    sub_100041608((uint64_t)v44, v45, type metadata accessor for Peer);
    swift_storeEnumTagMultiPayload(v45, v37, 1LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v37);
  }

uint64_t sub_10007F228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v58 = a2;
  uint64_t v5 = type metadata accessor for Peer(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v50 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8, v10);
  id v53 = &v46[-v11];
  uint64_t v12 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = &v46[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v19, v22);
  uint64_t v24 = &v46[-v23];
  uint64_t v25 = sub_100007578(&qword_100251F58);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v51 = &v46[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v27, v29);
  uint64_t v31 = &v46[-v30];
  uint64_t v52 = v6;
  uint64_t v32 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v54 = v5;
  v32(&v46[-v30], 1LL, 1LL, v5);
  uint64_t v49 = a1;
  sub_10000FC68(a1, (uint64_t)v15, &qword_100251658);
  uint64_t v48 = v17;
  int v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  int v34 = v33;
  if (v33 == 1)
  {
    sub_100041590((uint64_t)v15, &qword_100251658);
    uint64_t v36 = v56;
    uint64_t v35 = v57;
    uint64_t v37 = v16;
    uint64_t v39 = v54;
    uint64_t v38 = v55;
  }

  else
  {
    int v47 = v33;
    uint64_t v40 = (uint64_t)v53;
    sub_100041608((uint64_t)v15, (uint64_t)v24, type metadata accessor for PeerDifference.OneOf_Operation);
    sub_100041608((uint64_t)v24, (uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
    uint64_t v37 = v16;
    if (swift_getEnumCaseMultiPayload(v21, v16) == 2)
    {
      sub_100041590((uint64_t)v31, &qword_100251F58);
      sub_100041608((uint64_t)v21, v40, type metadata accessor for Peer);
      sub_100041608(v40, (uint64_t)v31, type metadata accessor for Peer);
      uint64_t v39 = v54;
      v32(v31, 0LL, 1LL, v54);
      uint64_t v36 = v56;
      uint64_t v35 = v57;
    }

    else
    {
      sub_1000415CC((uint64_t)v21, type metadata accessor for PeerDifference.OneOf_Operation);
      uint64_t v36 = v56;
      uint64_t v35 = v57;
      uint64_t v39 = v54;
    }

    uint64_t v38 = v55;
    int v34 = v47;
  }

  uint64_t v41 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v31, v39, v41, v36, v35);
  if (v38) {
    return sub_100041590((uint64_t)v31, &qword_100251F58);
  }
  uint64_t v43 = v51;
  sub_10000FC68((uint64_t)v31, (uint64_t)v51, &qword_100251F58);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v52 + 48))(v43, 1LL, v39) == 1)
  {
    sub_100041590((uint64_t)v31, &qword_100251F58);
    return sub_100041590((uint64_t)v43, &qword_100251F58);
  }

  else
  {
    unsigned __int8 v44 = v50;
    sub_100041608((uint64_t)v43, (uint64_t)v50, type metadata accessor for Peer);
    if (v34 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v36, v35);
    }
    sub_100041590((uint64_t)v31, &qword_100251F58);
    uint64_t v45 = v49;
    sub_100041590(v49, &qword_100251658);
    sub_100041608((uint64_t)v44, v45, type metadata accessor for Peer);
    swift_storeEnumTagMultiPayload(v45, v37, 2LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v37);
  }

uint64_t PeerDifference.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(v3, (uint64_t)v11, &qword_100251658);
  uint64_t v12 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      sub_10007F974(v3, a1, a2, a3);
    }
    else {
      sub_10007FB14(v3, a1, a2, a3);
    }
  }

  else
  {
    sub_10007F7D8(v3, a1, a2, a3);
  }

  uint64_t result = sub_1000415CC((uint64_t)v11, type metadata accessor for PeerDifference.OneOf_Operation);
  if (!v4)
  {
LABEL_8:
    type metadata accessor for PeerDifference(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10007F7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(a1, (uint64_t)v10, &qword_100251658);
  uint64_t v15 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v10, 1LL, v15) == 1)
  {
    sub_100041590((uint64_t)v10, &qword_100251658);
    __break(1u);
  }

  else if (!swift_getEnumCaseMultiPayload(v10, v15))
  {
    sub_100041608((uint64_t)v10, (uint64_t)v14, type metadata accessor for Peer);
    uint64_t v16 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v11, v16, a3, a4);
    return sub_1000415CC((uint64_t)v14, type metadata accessor for Peer);
  }

  uint64_t result = sub_1000415CC((uint64_t)v10, type metadata accessor for PeerDifference.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t sub_10007F974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(a1, (uint64_t)v10, &qword_100251658);
  uint64_t v15 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v10, 1LL, v15) == 1)
  {
    sub_100041590((uint64_t)v10, &qword_100251658);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v10, v15) == 1)
  {
    sub_100041608((uint64_t)v10, (uint64_t)v14, type metadata accessor for Peer);
    uint64_t v16 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v11, v16, a3, a4);
    return sub_1000415CC((uint64_t)v14, type metadata accessor for Peer);
  }

  uint64_t result = sub_1000415CC((uint64_t)v10, type metadata accessor for PeerDifference.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t sub_10007FB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100007578(&qword_100251658);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Peer(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000FC68(a1, (uint64_t)v10, &qword_100251658);
  uint64_t v15 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v10, 1LL, v15) == 1)
  {
    sub_100041590((uint64_t)v10, &qword_100251658);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v10, v15) == 2)
  {
    sub_100041608((uint64_t)v10, (uint64_t)v14, type metadata accessor for Peer);
    uint64_t v16 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v11, v16, a3, a4);
    return sub_1000415CC((uint64_t)v14, type metadata accessor for Peer);
  }

  uint64_t result = sub_1000415CC((uint64_t)v10, type metadata accessor for PeerDifference.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int PeerDifference.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for PeerDifference,  &qword_100252138,  (uint64_t)&protocol conformance descriptor for PeerDifference);
}

uint64_t sub_10007FCD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PeerDifference.OneOf_Operation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_10007FD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PeerDifference.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10007FD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PeerDifference.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10007FD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256388,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007FD98@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250C98, (uint64_t)static PeerDifference._protobuf_nameMap, (uint64_t)sub_10007E728, a1);
}

uint64_t sub_10007FDB4(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252178,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007FDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252178,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
  return Message.hash(into:)(a1, a2, v4);
}

const char *TLKShare.protoMessageName.unsafeMutableAddressor()
{
  return "TLKShare";
}

uint64_t static TLKShare.protoMessageName.getter()
{
  return 0x65726168534B4C54LL;
}

uint64_t sub_10007FE68()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static TLKShare._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static TLKShare._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1001DEC50;
  uint64_t v7 = v31 + v6;
  uint64_t v8 = v31 + v6 + *(int *)(v2 + 48);
  *(void *)(v31 + v6) = 1LL;
  *(void *)uint64_t v8 = "view";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v31 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "curve";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 5LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v31 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "epoch";
  *((void *)v14 + 1) = 5LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v31 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)uint64_t v16 = "key_uuid";
  *((void *)v16 + 1) = 8LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v31 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "poisoned";
  *((void *)v18 + 1) = 8LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v31 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "receiver";
  *((void *)v20 + 1) = 8LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v31 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "receiver_public_encryption_key";
  *((void *)v22 + 1) = 30LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v31 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "sender";
  *((void *)v24 + 1) = 6LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v31 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "signature";
  *(void *)(v25 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v31 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *uint64_t v26 = 10LL;
  *(void *)uint64_t v27 = "version";
  *((void *)v27 + 1) = 7LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v31 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "wrappedkey";
  *((void *)v29 + 1) = 10LL;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t TLKShare._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CA0, (uint64_t)static TLKShare._protobuf_nameMap, (uint64_t)sub_10007FE68);
}

uint64_t static TLKShare._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CA0, (uint64_t)static TLKShare._protobuf_nameMap, (uint64_t)sub_10007FE68, a1);
}

uint64_t TLKShare.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v10 = v3 + 16;
          goto LABEL_19;
        case 3LL:
          uint64_t v10 = v3 + 24;
          goto LABEL_19;
        case 4LL:
          uint64_t v9 = v3 + 32;
          goto LABEL_5;
        case 5LL:
          uint64_t v10 = v3 + 48;
          goto LABEL_19;
        case 6LL:
          uint64_t v9 = v3 + 56;
          goto LABEL_5;
        case 7LL:
          uint64_t v9 = v3 + 72;
          goto LABEL_5;
        case 8LL:
          uint64_t v9 = v3 + 88;
          goto LABEL_5;
        case 9LL:
          uint64_t v9 = v3 + 104;
          goto LABEL_5;
        case 10LL:
          uint64_t v10 = v3 + 120;
LABEL_19:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v10, a2, a3);
          break;
        case 11LL:
          uint64_t v9 = v3 + 128;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t TLKShare.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v12 = v5[2];
    if (!v12 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v12, 2LL, a2, a3), !v4))
    {
      uint64_t v13 = v5[3];
      if (!v13
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v13, 3LL, a2, a3), !v4))
      {
        unint64_t v14 = v5[5];
        uint64_t v15 = HIBYTE(v14) & 0xF;
        if ((v14 & 0x2000000000000000LL) == 0) {
          uint64_t v15 = v5[4] & 0xFFFFFFFFFFFFLL;
        }
        if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
        {
          uint64_t v16 = v5[6];
          if (!v16
            || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v16, 5LL, a2, a3), !v4))
          {
            unint64_t v17 = v5[8];
            uint64_t v18 = HIBYTE(v17) & 0xF;
            if ((v17 & 0x2000000000000000LL) == 0) {
              uint64_t v18 = v5[7] & 0xFFFFFFFFFFFFLL;
            }
            if (!v18 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
            {
              unint64_t v19 = v5[10];
              uint64_t v20 = HIBYTE(v19) & 0xF;
              if ((v19 & 0x2000000000000000LL) == 0) {
                uint64_t v20 = v5[9] & 0xFFFFFFFFFFFFLL;
              }
              if (!v20 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
              {
                unint64_t v21 = v5[12];
                uint64_t v22 = HIBYTE(v21) & 0xF;
                if ((v21 & 0x2000000000000000LL) == 0) {
                  uint64_t v22 = v5[11] & 0xFFFFFFFFFFFFLL;
                }
                if (!v22 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
                {
                  unint64_t v23 = v5[14];
                  uint64_t v24 = HIBYTE(v23) & 0xF;
                  if ((v23 & 0x2000000000000000LL) == 0) {
                    uint64_t v24 = v5[13] & 0xFFFFFFFFFFFFLL;
                  }
                  if (!v24 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
                  {
                    uint64_t v25 = v5[15];
                    if (!v25
                      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)( v25,  10LL,  a2,  a3),  !v4))
                    {
                      unint64_t v26 = v5[17];
                      uint64_t v27 = HIBYTE(v26) & 0xF;
                      if ((v26 & 0x2000000000000000LL) == 0) {
                        uint64_t v27 = v5[16] & 0xFFFFFFFFFFFFLL;
                      }
                      if (!v27
                        || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
                      {
                        type metadata accessor for TLKShare(0LL);
                        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int TLKShare.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for TLKShare,  &qword_100252140,  (uint64_t)&protocol conformance descriptor for TLKShare);
}

uint64_t sub_1000805A4@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0xE000000000000000LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  a1[8] = 0xE000000000000000LL;
  a1[9] = 0LL;
  a1[10] = 0xE000000000000000LL;
  a1[11] = 0LL;
  a1[12] = 0xE000000000000000LL;
  a1[13] = 0LL;
  a1[14] = 0xE000000000000000LL;
  a1[15] = 0LL;
  a1[16] = 0LL;
  a1[17] = 0xE000000000000000LL;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t (*sub_1000805F4())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_100080608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TLKShare.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008061C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TLKShare.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100080630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256380,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100080680@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CA0, (uint64_t)static TLKShare._protobuf_nameMap, (uint64_t)sub_10007FE68, a1);
}

uint64_t sub_10008069C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000806DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
  return Message.hash(into:)(a1, a2, v4);
}

const char *ViewKey.protoMessageName.unsafeMutableAddressor()
{
  return "ViewKey";
}

uint64_t static ViewKey.protoMessageName.getter()
{
  return 0x79654B77656956LL;
}

uint64_t sub_100080754()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static ViewKey._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static ViewKey._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC60;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "uuid";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "parentkey_uuid";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 14LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "keyclass";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)unint64_t v17 = "wrappedkey_base64";
  *((void *)v17 + 1) = 17LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "upload_os_version";
  *(void *)(v18 + _Block_object_dispose(va, 8) = 17LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ViewKey._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CA8, (uint64_t)static ViewKey._protobuf_nameMap, (uint64_t)sub_100080754);
}

uint64_t static ViewKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CA8, (uint64_t)static ViewKey._protobuf_nameMap, (uint64_t)sub_100080754, a1);
}

uint64_t ViewKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = v3 + 16;
          goto LABEL_5;
        case 3LL:
          unint64_t v10 = sub_1000B674C();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3 + 32,  &type metadata for ViewKeyClass,  v10,  a2,  a3);
          break;
        case 4LL:
          uint64_t v9 = v3 + 48;
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = v3 + 64;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t ViewKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:))(), !v4))
  {
    unint64_t v12 = *(void *)(v5 + 24);
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = *(void *)(v5 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v13
      || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:))(), !v4))
    {
      if (!*(void *)(v5 + 32)
        || (char v14 = *(_BYTE *)(v5 + 40),
            uint64_t v22 = *(void *)(v5 + 32),
            char v23 = v14,
            unint64_t v15 = sub_1000B674C(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v22,  3LL,  &type metadata for ViewKeyClass,  v15,  a2,  a3),  !v4))
      {
        uint64_t v16 = *(void *)(v5 + 48);
        unint64_t v17 = *(void *)(v5 + 56);
        uint64_t v18 = HIBYTE(v17) & 0xF;
        if ((v17 & 0x2000000000000000LL) == 0) {
          uint64_t v18 = v16 & 0xFFFFFFFFFFFFLL;
        }
        if (!v18 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v16, v17), !v4))
        {
          uint64_t v19 = *(void *)(v5 + 64);
          unint64_t v20 = *(void *)(v5 + 72);
          uint64_t v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000LL) == 0) {
            uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
          }
          if (!v21 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v19, v20), !v4))
          {
            type metadata accessor for ViewKey(0LL);
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }

  return result;
}

Swift::Int ViewKey.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for ViewKey,  &qword_100252150,  (uint64_t)&protocol conformance descriptor for ViewKey);
}

uint64_t sub_100080C60@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = 0xE000000000000000LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t (*sub_100080CA4())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_100080CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100080CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100080CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256378,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100080D30@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CA8, (uint64_t)static ViewKey._protobuf_nameMap, (uint64_t)sub_100080754, a1);
}

uint64_t sub_100080D4C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&qword_1002517F0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100080D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&qword_1002517F0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
  return Message.hash(into:)(a1, a2, v4);
}

const char *ViewKeys.protoMessageName.unsafeMutableAddressor()
{
  return "ViewKeys";
}

uint64_t static ViewKeys.protoMessageName.getter()
{
  return 0x7379654B77656956LL;
}

uint64_t sub_100080E04()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static ViewKeys._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static ViewKeys._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC60;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "view";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "new_tlk";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  char v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *char v14 = 3LL;
  *(void *)unint64_t v15 = "new_class_a";
  *((void *)v15 + 1) = 11LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)unint64_t v17 = "new_class_c";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "old_tlk";
  *(void *)(v18 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ViewKeys._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CB0, (uint64_t)static ViewKeys._protobuf_nameMap, (uint64_t)sub_100080E04);
}

uint64_t static ViewKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CB0, (uint64_t)static ViewKeys._protobuf_nameMap, (uint64_t)sub_100080E04, a1);
}

uint64_t sub_100081050()
{
  uint64_t v0 = type metadata accessor for ViewKeys._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0xE000000000000000LL;
  uint64_t v2 = v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
  uint64_t v3 = type metadata accessor for ViewKey(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  v4( v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  1LL,  1LL,  v3);
  v4( v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  1LL,  1LL,  v3);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)( v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  1LL,  1LL,  v3);
  qword_100251EA8 = v1;
  return result;
}

uint64_t sub_100081120(uint64_t a1)
{
  uint64_t v3 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0xE000000000000000LL;
  uint64_t v7 = v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
  uint64_t v8 = type metadata accessor for ViewKey(0LL);
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(v7, 1LL, 1LL, v8);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)( v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  1LL,  1LL,  v8);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)( v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  1LL,  1LL,  v8);
  uint64_t v22 = v1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
  v9();
  swift_beginAccess(a1 + 16, v29, 0LL, 0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  swift_beginAccess(v1 + 16, v28, 1LL, 0LL);
  uint64_t v14 = *(void *)(v1 + 24);
  *(void *)(v1 + 16) = v12;
  *(void *)(v1 + 24) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk,  v27,  0LL,  0LL);
  sub_10000FC68(v15, (uint64_t)v6, &qword_100251EE0);
  swift_beginAccess(v7, v26, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v6, v7, &qword_100251EE0);
  swift_endAccess(v26);
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  v26,  0LL,  0LL);
  sub_10000FC68(v16, (uint64_t)v6, &qword_100251EE0);
  swift_beginAccess(v10, v25, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v6, v10, &qword_100251EE0);
  swift_endAccess(v25);
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  v25,  0LL,  0LL);
  sub_10000FC68(v17, (uint64_t)v6, &qword_100251EE0);
  swift_beginAccess(v11, v24, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v6, v11, &qword_100251EE0);
  swift_endAccess(v24);
  uint64_t v18 = a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  v24,  0LL,  0LL);
  sub_10000FC68(v18, (uint64_t)v6, &qword_100251EE0);
  swift_release(a1);
  uint64_t v19 = v22;
  swift_beginAccess(v22, v23, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v6, v19, &qword_100251EE0);
  swift_endAccess(v23);
  return v1;
}

uint64_t sub_100081418()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t ViewKeys.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100083EF8( a1,  a2,  a3,  type metadata accessor for ViewKeys,  type metadata accessor for ViewKeys._StorageClass,  sub_100081120,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000814D4);
}

uint64_t sub_1000814D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_10009F514( a2,  a1,  a3,  a4,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:));
          break;
        case 2LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
          goto LABEL_5;
        case 4LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
          goto LABEL_5;
        case 5LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
LABEL_5:
          sub_10009F698( v11,  v12,  v13,  v14,  v15,  type metadata accessor for ViewKey,  (unint64_t *)&qword_1002517F0,  (uint64_t)&protocol conformance descriptor for ViewKey);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
    }
  }

  return result;
}

uint64_t ViewKeys.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100084134( a1,  a2,  a3,  type metadata accessor for ViewKeys,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10008164C);
}

uint64_t sub_10008164C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12
    || (swift_bridgeObjectRetain(*(void *)(a1 + 24)),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v10, v11),
        uint64_t result = swift_bridgeObjectRelease(v11),
        !v5))
  {
    uint64_t result = sub_100081770(a1, a2, a3, a4);
    if (!v5)
    {
      sub_1000818FC(a1, a2, a3, a4);
      sub_100081A88(a1, a2, a3, a4);
      return sub_100081C14(a1, a2, a3, a4);
    }
  }

  return result;
}

uint64_t sub_100081770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for ViewKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251EE0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for ViewKey);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&qword_1002517F0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for ViewKey);
}

uint64_t sub_1000818FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for ViewKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251EE0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for ViewKey);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&qword_1002517F0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for ViewKey);
}

uint64_t sub_100081A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for ViewKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251EE0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for ViewKey);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&qword_1002517F0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for ViewKey);
}

uint64_t sub_100081C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251EE0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for ViewKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251EE0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for ViewKey);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&qword_1002517F0,  type metadata accessor for ViewKey,  (uint64_t)&protocol conformance descriptor for ViewKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for ViewKey);
}

BOOL sub_100081DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v100 = type metadata accessor for ViewKey(0LL);
  uint64_t v4 = *(void *)(v100 - 8);
  __chkstk_darwin(v100, v5);
  uint64_t v99 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = sub_100007578(&qword_100256460);
  uint64_t v8 = __chkstk_darwin(v101, v7);
  uint64_t v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v94 = (uint64_t)&v89 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v98 = (uint64_t)&v89 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v89 - v18;
  uint64_t v20 = sub_100007578(&qword_100251EE0);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  id v92 = (uint64_t *)((char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = __chkstk_darwin(v22, v24);
  unint64_t v95 = (char *)&v89 - v26;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v93 = (uint64_t *)((char *)&v89 - v29);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v97 = (uint64_t)&v89 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  unint64_t v96 = (uint64_t *)((char *)&v89 - v35);
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v39 = (char *)&v89 - v38;
  uint64_t v41 = __chkstk_darwin(v37, v40);
  uint64_t v43 = (uint64_t *)((char *)&v89 - v42);
  __chkstk_darwin(v41, v44);
  id v46 = (char *)&v89 - v45;
  swift_beginAccess(a1 + 16, v111, 0LL, 0LL);
  uint64_t v48 = *(void *)(a1 + 16);
  uint64_t v47 = *(void *)(a1 + 24);
  swift_beginAccess(a2 + 16, v110, 0LL, 0LL);
  uint64_t v49 = *(void *)(a2 + 16);
  uint64_t v50 = *(void *)(a2 + 24);
  if (v48 == v49 && v47 == v50
    || (v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v47, v49, v50, 0LL), BOOL result = 0LL, (v51 & 1) != 0))
  {
    os_log_type_t v91 = v10;
    uint64_t v53 = a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
    swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk,  v109,  0LL,  0LL);
    sub_10000FC68(v53, (uint64_t)v46, &qword_100251EE0);
    uint64_t v54 = a2 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk;
    swift_beginAccess( a2 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newTlk,  v108,  0LL,  0LL);
    uint64_t v55 = (uint64_t)&v19[*(int *)(v101 + 48)];
    sub_10000FC68((uint64_t)v46, (uint64_t)v19, &qword_100251EE0);
    sub_10000FC68(v54, v55, &qword_100251EE0);
    uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    uint64_t v57 = v100;
    if (v56((uint64_t)v19, 1LL, v100) == 1)
    {
      swift_retain(a1);
      swift_retain(a2);
      sub_100041590((uint64_t)v46, &qword_100251EE0);
      if (v56(v55, 1LL, v57) == 1)
      {
        unint64_t v90 = v56;
        sub_100041590((uint64_t)v19, &qword_100251EE0);
        goto LABEL_11;
      }
    }

    else
    {
      sub_10000FC68((uint64_t)v19, (uint64_t)v43, &qword_100251EE0);
      if (v56(v55, 1LL, v57) != 1)
      {
        unint64_t v90 = v56;
        uint64_t v59 = v99;
        sub_100041608(v55, v99, type metadata accessor for ViewKey);
        swift_retain(a1);
        swift_retain(a2);
        char v60 = _s18TrustedPeersHelper7ViewKeyV2eeoiySbAC_ACtFZ_0(v43, v59);
        sub_1000415CC(v59, type metadata accessor for ViewKey);
        sub_100041590((uint64_t)v46, &qword_100251EE0);
        sub_1000415CC((uint64_t)v43, type metadata accessor for ViewKey);
        sub_100041590((uint64_t)v19, &qword_100251EE0);
        if ((v60 & 1) == 0) {
          goto LABEL_25;
        }
LABEL_11:
        uint64_t v61 = a1
            + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
        swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  v107,  0LL,  0LL);
        sub_10000FC68(v61, (uint64_t)v39, &qword_100251EE0);
        uint64_t v62 = a2
            + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA;
        swift_beginAccess( a2 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassA,  v106,  0LL,  0LL);
        uint64_t v63 = v98;
        uint64_t v64 = v98 + *(int *)(v101 + 48);
        sub_10000FC68((uint64_t)v39, v98, &qword_100251EE0);
        sub_10000FC68(v62, v64, &qword_100251EE0);
        uint64_t v65 = v100;
        uint64_t v66 = v90;
        if (v90(v63, 1LL, v100) == 1)
        {
          sub_100041590((uint64_t)v39, &qword_100251EE0);
          if (v66(v64, 1LL, v65) != 1)
          {
LABEL_23:
            uint64_t v58 = v63;
            goto LABEL_24;
          }

          sub_100041590(v63, &qword_100251EE0);
        }

        else
        {
          uint64_t v67 = v96;
          sub_10000FC68(v63, (uint64_t)v96, &qword_100251EE0);
          if (v66(v64, 1LL, v65) == 1)
          {
            uint64_t v68 = (uint64_t)v39;
LABEL_22:
            sub_100041590(v68, &qword_100251EE0);
            sub_1000415CC((uint64_t)v67, type metadata accessor for ViewKey);
            goto LABEL_23;
          }

          uint64_t v69 = v99;
          sub_100041608(v64, v99, type metadata accessor for ViewKey);
          char v70 = _s18TrustedPeersHelper7ViewKeyV2eeoiySbAC_ACtFZ_0(v67, v69);
          sub_1000415CC(v69, type metadata accessor for ViewKey);
          sub_100041590((uint64_t)v39, &qword_100251EE0);
          sub_1000415CC((uint64_t)v67, type metadata accessor for ViewKey);
          uint64_t v65 = v100;
          sub_100041590(v63, &qword_100251EE0);
          if ((v70 & 1) == 0)
          {
LABEL_25:
            swift_release(a1);
            swift_release(a2);
            return 0LL;
          }
        }

        uint64_t v71 = a1
            + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
        swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  v105,  0LL,  0LL);
        uint64_t v72 = v97;
        sub_10000FC68(v71, v97, &qword_100251EE0);
        uint64_t v73 = a2
            + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC;
        swift_beginAccess( a2 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__newClassC,  v104,  0LL,  0LL);
        uint64_t v63 = v94;
        uint64_t v74 = v94 + *(int *)(v101 + 48);
        sub_10000FC68(v72, v94, &qword_100251EE0);
        sub_10000FC68(v73, v74, &qword_100251EE0);
        uint64_t v75 = v66;
        if (v66(v63, 1LL, v65) == 1)
        {
          sub_100041590(v72, &qword_100251EE0);
          unsigned int v76 = v66(v74, 1LL, v65);
          uint64_t v77 = (uint64_t)v91;
          uint64_t v78 = (uint64_t)v95;
          if (v76 == 1)
          {
            unint64_t v90 = v75;
            sub_100041590(v63, &qword_100251EE0);
LABEL_29:
            uint64_t v82 = a1
                + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
            swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  v103,  0LL,  0LL);
            sub_10000FC68(v82, v78, &qword_100251EE0);
            uint64_t v83 = a2
                + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk;
            swift_beginAccess( a2 + OBJC_IVAR____TtCV18TrustedPeersHelper8ViewKeysP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__oldTlk,  v102,  0LL,  0LL);
            uint64_t v84 = v77 + *(int *)(v101 + 48);
            sub_10000FC68(v78, v77, &qword_100251EE0);
            sub_10000FC68(v83, v84, &qword_100251EE0);
            id v85 = v90;
            if (v90(v77, 1LL, v65) == 1)
            {
              swift_release(a1);
              swift_release(a2);
              sub_100041590(v78, &qword_100251EE0);
              if (v85(v84, 1LL, v65) == 1)
              {
                sub_100041590(v77, &qword_100251EE0);
                return 1LL;
              }
            }

            else
            {
              id v86 = v92;
              sub_10000FC68(v77, (uint64_t)v92, &qword_100251EE0);
              if (v85(v84, 1LL, v65) != 1)
              {
                uint64_t v87 = v99;
                sub_100041608(v84, v99, type metadata accessor for ViewKey);
                char v88 = _s18TrustedPeersHelper7ViewKeyV2eeoiySbAC_ACtFZ_0(v86, v87);
                swift_release(a1);
                swift_release(a2);
                sub_1000415CC(v87, type metadata accessor for ViewKey);
                sub_100041590(v78, &qword_100251EE0);
                sub_1000415CC((uint64_t)v86, type metadata accessor for ViewKey);
                sub_100041590(v77, &qword_100251EE0);
                return (v88 & 1) != 0;
              }

              swift_release(a1);
              swift_release(a2);
              sub_100041590(v78, &qword_100251EE0);
              sub_1000415CC((uint64_t)v86, type metadata accessor for ViewKey);
            }

            sub_100041590(v77, &qword_100256460);
            return 0LL;
          }

          goto LABEL_23;
        }

        uint64_t v67 = v93;
        sub_10000FC68(v63, (uint64_t)v93, &qword_100251EE0);
        unsigned int v79 = v66(v74, 1LL, v65);
        uint64_t v77 = (uint64_t)v91;
        uint64_t v78 = (uint64_t)v95;
        if (v79 == 1)
        {
          uint64_t v68 = v97;
          goto LABEL_22;
        }

        unint64_t v90 = v75;
        uint64_t v80 = v99;
        sub_100041608(v74, v99, type metadata accessor for ViewKey);
        char v81 = _s18TrustedPeersHelper7ViewKeyV2eeoiySbAC_ACtFZ_0(v67, v80);
        sub_1000415CC(v80, type metadata accessor for ViewKey);
        sub_100041590(v97, &qword_100251EE0);
        sub_1000415CC((uint64_t)v67, type metadata accessor for ViewKey);
        sub_100041590(v63, &qword_100251EE0);
        if ((v81 & 1) != 0) {
          goto LABEL_29;
        }
        goto LABEL_25;
      }

      swift_retain(a1);
      swift_retain(a2);
      sub_100041590((uint64_t)v46, &qword_100251EE0);
      sub_1000415CC((uint64_t)v43, type metadata accessor for ViewKey);
    }

    uint64_t v58 = (uint64_t)v19;
LABEL_24:
    sub_100041590(v58, &qword_100256460);
    goto LABEL_25;
  }

  return result;
}

Swift::Int ViewKeys.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for ViewKeys,  &qword_100252158,  (uint64_t)&protocol conformance descriptor for ViewKeys);
}

uint64_t sub_100082800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0D0C(a1, &qword_100250CB8, &qword_100251EA8, (uint64_t)sub_100081050, a2);
}

uint64_t sub_10008281C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewKeys.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100082830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewKeys.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100082844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256370,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100082894(uint64_t a1)
{
  return sub_1000B52B8( v1,  a1,  type metadata accessor for ViewKeys,  (uint64_t (*)(uint64_t, uint64_t))sub_100081DA0) & 1;
}

uint64_t sub_1000828C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CB0, (uint64_t)static ViewKeys._protobuf_nameMap, (uint64_t)sub_100080E04, a1);
}

uint64_t sub_1000828E0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100082920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
  return Message.hash(into:)(a1, a2, v4);
}

void *ViewKeysRecords.protoMessageName.unsafeMutableAddressor()
{
  return &static ViewKeysRecords.protoMessageName;
}

uint64_t static ViewKeysRecords.protoMessageName.getter()
{
  return 0x7379654B77656956LL;
}

uint64_t sub_1000829A0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static ViewKeysRecords._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static ViewKeysRecords._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "tlk";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 3LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "class_a";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "class_c";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ViewKeysRecords._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CC0, (uint64_t)static ViewKeysRecords._protobuf_nameMap, (uint64_t)sub_1000829A0);
}

uint64_t static ViewKeysRecords._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CC0, (uint64_t)static ViewKeysRecords._protobuf_nameMap, (uint64_t)sub_1000829A0, a1);
}

uint64_t ViewKeysRecords.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  &qword_1002521C8,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
          break;
        case 2LL:
          sub_1000A50A4( a1,  v5,  a2,  a3,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  &qword_1002521C8,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
          break;
        case 1LL:
          sub_1000A41D4( a1,  v5,  a2,  a3,  type metadata accessor for ViewKeysRecords,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  &qword_1002521C8,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t ViewKeysRecords.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000A429C(v3, a1, a2, a3, type metadata accessor for ViewKeysRecords);
  if (!v4)
  {
    sub_100082D20(v3, a1, a2, a3);
    sub_100082E98(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100082D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_1002517E0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ViewKeysRecords(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, &qword_1002517E0);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v17 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_100082E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_1002517E0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ViewKeysRecords(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 28), (uint64_t)v9, &qword_1002517E0);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v17 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

Swift::Int ViewKeysRecords.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for ViewKeysRecords,  &qword_100252160,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
}

uint64_t sub_100083030@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v7(v4, 1LL, 1LL, v5);
  v7(a2 + a1[6], 1LL, 1LL, v5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(a2 + a1[7], 1LL, 1LL, v5);
}

uint64_t sub_1000830D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewKeysRecords.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000830E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewKeysRecords.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000830F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256368,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100083148@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CC0, (uint64_t)static ViewKeysRecords._protobuf_nameMap, (uint64_t)sub_1000829A0, a1);
}

uint64_t sub_100083164(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002525F0,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000831A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002525F0,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
  return Message.hash(into:)(a1, a2, v4);
}

const char *Bottle.protoMessageName.unsafeMutableAddressor()
{
  return "Bottle";
}

uint64_t static Bottle.protoMessageName.getter()
{
  return 0x656C74746F42LL;
}

uint64_t sub_100083214()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static Bottle._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static Bottle._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC30;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 2LL;
  *(void *)uint64_t v9 = "contents";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 8LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 3LL;
  *(void *)uint64_t v13 = "escrowed_signing_spki";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 21LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "signature_using_escrow_key";
  *((void *)v15 + 1) = 26LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 5LL;
  *(void *)uint64_t v17 = "signature_using_peer_key";
  *((void *)v17 + 1) = 24LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 6LL;
  *(void *)uint64_t v19 = "peer_id";
  *((void *)v19 + 1) = 7LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 7LL;
  *(void *)uint64_t v21 = "bottle_id";
  *((void *)v21 + 1) = 9LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Bottle._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CC8, (uint64_t)static Bottle._protobuf_nameMap, (uint64_t)sub_100083214);
}

uint64_t static Bottle._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CC8, (uint64_t)static Bottle._protobuf_nameMap, (uint64_t)sub_100083214, a1);
}

uint64_t Bottle.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 2LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = v3 + 16;
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = v3 + 32;
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = v3 + 48;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v9, a2, a3);
          break;
        case 6LL:
          uint64_t v10 = v3 + 64;
          goto LABEL_14;
        case 7LL:
          uint64_t v10 = v3 + 80;
LABEL_14:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

void Bottle.traverse<A>(visitor:)()
{
  __asm { BR              X10 }

uint64_t sub_1000835CC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = ((uint64_t (*)(void))dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:))(), !v3))
  {
    __asm { BR              X10 }
  }

  return result;
}

Swift::Int Bottle.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for Bottle,  &qword_100252168,  (uint64_t)&protocol conformance descriptor for Bottle);
}

uint64_t sub_100083814@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 16) = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 32) = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = xmmword_1001DE6F0;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t (*sub_100083854())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_100083868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Bottle.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void sub_10008387C()
{
}

uint64_t sub_100083890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256360,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000838E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CC8, (uint64_t)static Bottle._protobuf_nameMap, (uint64_t)sub_100083214, a1);
}

uint64_t sub_1000838FC(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008393C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
  return Message.hash(into:)(a1, a2, v4);
}

const char *EscrowPair.protoMessageName.unsafeMutableAddressor()
{
  return "EscrowPair";
}

uint64_t static EscrowPair.protoMessageName.getter()
{
  return 0x6150776F72637345LL;
}

uint64_t sub_1000839B8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static EscrowPair._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static EscrowPair._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "escrow_record_id";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "bottle";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 4LL;
  *(void *)uint64_t v14 = "record";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t EscrowPair._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CD0, (uint64_t)static EscrowPair._protobuf_nameMap, (uint64_t)sub_1000839B8);
}

uint64_t static EscrowPair._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CD0, (uint64_t)static EscrowPair._protobuf_nameMap, (uint64_t)sub_1000839B8, a1);
}

uint64_t sub_100083B8C()
{
  uint64_t v0 = type metadata accessor for EscrowPair._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0xE000000000000000LL;
  uint64_t v2 = v1 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  uint64_t v3 = type metadata accessor for Bottle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  uint64_t v5 = type metadata accessor for EscrowInformation(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  qword_100251EB0 = v1;
  return result;
}

uint64_t sub_100083C2C(uint64_t a1)
{
  uint64_t v3 = sub_100007578((uint64_t *)&unk_100257060);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0xE000000000000000LL;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  uint64_t v12 = type metadata accessor for Bottle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  uint64_t v14 = type metadata accessor for EscrowInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  swift_beginAccess(a1 + 16, v26, 0LL, 0LL);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  swift_beginAccess(v1 + 16, v25, 1LL, 0LL);
  uint64_t v17 = *(void *)(v1 + 24);
  *(void *)(v1 + 16) = v15;
  *(void *)(v1 + 24) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v24,  0LL,  0LL);
  sub_10000FC68(v18, (uint64_t)v10, &qword_100251F38);
  swift_beginAccess(v11, v23, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v10, v11, &qword_100251F38);
  swift_endAccess(v23);
  uint64_t v19 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  v23,  0LL,  0LL);
  sub_10000FC68(v19, (uint64_t)v6, (uint64_t *)&unk_100257060);
  swift_release(a1);
  swift_beginAccess(v13, v22, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v6, v13, (uint64_t *)&unk_100257060);
  swift_endAccess(v22);
  return v1;
}

uint64_t sub_100083E6C()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t EscrowPair.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100083EF8( a1,  a2,  a3,  type metadata accessor for EscrowPair,  type metadata accessor for EscrowPair._StorageClass,  sub_100083C2C,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100083FD8);
}

uint64_t sub_100083EF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v7;
  uint64_t v14 = *(int *)(a4(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v7 + v14)) & 1) == 0)
  {
    uint64_t v15 = *(void *)(v7 + v14);
    uint64_t v16 = a5(0LL);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v17 = swift_retain(v15);
    uint64_t v18 = a6(v17);
    uint64_t v19 = *(void *)(v10 + v14);
    *(void *)(v10 + v14) = v18;
    swift_release(v19);
  }

  uint64_t v20 = *(void *)(v10 + v14);
  uint64_t v21 = swift_retain(v20);
  a7(v21, a1, a2, a3);
  return swift_release(v20);
}

uint64_t sub_100083FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 4LL:
          sub_10009F698( a2,  a1,  a3,  a4,  &OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  type metadata accessor for EscrowInformation,  &qword_100252268,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
          break;
        case 2LL:
          sub_10009F698( a2,  a1,  a3,  a4,  &OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  type metadata accessor for Bottle,  (unint64_t *)&unk_100256EA0,  (uint64_t)&protocol conformance descriptor for Bottle);
          break;
        case 1LL:
          sub_10009F514( a2,  a1,  a3,  a4,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:));
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
    }
  }

  return result;
}

uint64_t EscrowPair.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100084134( a1,  a2,  a3,  type metadata accessor for EscrowPair,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000841C8);
}

uint64_t sub_100084134( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = *(void *)(v5 + *(int *)(a4(0LL) + 20));
  uint64_t v12 = swift_retain(v11);
  a5(v12, a1, a2, a3);
  uint64_t result = swift_release(v11);
  if (!v6) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000841C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12
    || (swift_bridgeObjectRetain(*(void *)(a1 + 24)),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v10, v11),
        uint64_t result = swift_bridgeObjectRelease(v11),
        !v5))
  {
    uint64_t result = sub_1000842AC(a1, a2, a3, a4);
    if (!v5) {
      return sub_100084438(a1, a2, a3, a4);
    }
  }

  return result;
}

uint64_t sub_1000842AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Bottle(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F38);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Bottle);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Bottle);
}

uint64_t sub_100084438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100257060);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for EscrowInformation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, (uint64_t *)&unk_100257060);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for EscrowInformation);
  uint64_t v17 = sub_1000077B8( &qword_100252268,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for EscrowInformation);
}

BOOL sub_1000845C4(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = type metadata accessor for EscrowInformation(0LL);
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v4);
  uint64_t v54 = (void **)((char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v57 = sub_100007578(&qword_100256498);
  __chkstk_darwin(v57, v6);
  uint64_t v61 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100007578((uint64_t *)&unk_100257060);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v55 = (void **)((char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10, v12);
  uint64_t v59 = (uint64_t)&v54 - v13;
  uint64_t v14 = type metadata accessor for Bottle(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v56 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100007578(&qword_100256488);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100007578(&qword_100251F38);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v26 = (uint64_t *)((char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v54 - v28;
  swift_beginAccess(a1 + 16, v68, 0LL, 0LL);
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 24);
  swift_beginAccess(a2 + 16, v67, 0LL, 0LL);
  uint64_t v32 = *(void *)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 24);
  if (v30 == v32 && v31 == v33
    || (v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL), BOOL result = 0LL, (v34 & 1) != 0))
  {
    uint64_t v62 = a2;
    uint64_t v36 = a1
        + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
    swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v66,  0LL,  0LL);
    sub_10000FC68(v36, (uint64_t)v29, &qword_100251F38);
    uint64_t v37 = v62;
    uint64_t v38 = v62
        + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
    swift_beginAccess( v62 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v65,  0LL,  0LL);
    uint64_t v39 = (uint64_t)&v21[*(int *)(v18 + 48)];
    sub_10000FC68((uint64_t)v29, (uint64_t)v21, &qword_100251F38);
    sub_10000FC68(v38, v39, &qword_100251F38);
    uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (v40((uint64_t)v21, 1LL, v14) == 1)
    {
      swift_retain(a1);
      swift_retain(v37);
      sub_100041590((uint64_t)v29, &qword_100251F38);
      if (v40(v39, 1LL, v14) == 1)
      {
        sub_100041590((uint64_t)v21, &qword_100251F38);
LABEL_12:
        uint64_t v43 = a1
            + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
        swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  v64,  0LL,  0LL);
        uint64_t v44 = v59;
        sub_10000FC68(v43, v59, (uint64_t *)&unk_100257060);
        uint64_t v45 = v62;
        uint64_t v46 = v62
            + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record;
        swift_beginAccess( v62 + OBJC_IVAR____TtCV18TrustedPeersHelper10EscrowPairP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__record,  v63,  0LL,  0LL);
        uint64_t v47 = v61;
        uint64_t v48 = v61 + *(int *)(v57 + 48);
        sub_10000FC68(v44, v61, (uint64_t *)&unk_100257060);
        sub_10000FC68(v46, v48, (uint64_t *)&unk_100257060);
        uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
        uint64_t v50 = v60;
        if (v49(v47, 1LL, v60) == 1)
        {
          swift_release(a1);
          swift_release(v45);
          sub_100041590(v44, (uint64_t *)&unk_100257060);
          if (v49(v48, 1LL, v50) == 1)
          {
            sub_100041590(v47, (uint64_t *)&unk_100257060);
            return 1LL;
          }
        }

        else
        {
          char v51 = v55;
          sub_10000FC68(v47, (uint64_t)v55, (uint64_t *)&unk_100257060);
          if (v49(v48, 1LL, v50) != 1)
          {
            uint64_t v52 = v54;
            sub_100041608(v48, (uint64_t)v54, type metadata accessor for EscrowInformation);
            char v53 = _s18TrustedPeersHelper17EscrowInformationV2eeoiySbAC_ACtFZ_0(v51, v52);
            swift_release(a1);
            swift_release(v45);
            sub_1000415CC((uint64_t)v52, type metadata accessor for EscrowInformation);
            sub_100041590(v44, (uint64_t *)&unk_100257060);
            sub_1000415CC((uint64_t)v51, type metadata accessor for EscrowInformation);
            sub_100041590(v47, (uint64_t *)&unk_100257060);
            return (v53 & 1) != 0;
          }

          swift_release(a1);
          swift_release(v45);
          sub_100041590(v44, (uint64_t *)&unk_100257060);
          sub_1000415CC((uint64_t)v51, type metadata accessor for EscrowInformation);
        }

        sub_100041590(v47, &qword_100256498);
        return 0LL;
      }
    }

    else
    {
      sub_10000FC68((uint64_t)v21, (uint64_t)v26, &qword_100251F38);
      if (v40(v39, 1LL, v14) != 1)
      {
        uint64_t v41 = v56;
        sub_100041608(v39, (uint64_t)v56, type metadata accessor for Bottle);
        swift_retain(a1);
        swift_retain(v37);
        char v42 = _s18TrustedPeersHelper6BottleV2eeoiySbAC_ACtFZ_0(v26, v41);
        sub_1000415CC((uint64_t)v41, type metadata accessor for Bottle);
        sub_100041590((uint64_t)v29, &qword_100251F38);
        sub_1000415CC((uint64_t)v26, type metadata accessor for Bottle);
        sub_100041590((uint64_t)v21, &qword_100251F38);
        if ((v42 & 1) != 0) {
          goto LABEL_12;
        }
LABEL_10:
        swift_release(a1);
        swift_release(v37);
        return 0LL;
      }

      swift_retain(a1);
      swift_retain(v37);
      sub_100041590((uint64_t)v29, &qword_100251F38);
      sub_1000415CC((uint64_t)v26, type metadata accessor for Bottle);
    }

    sub_100041590((uint64_t)v21, &qword_100256488);
    goto LABEL_10;
  }

  return result;
}

Swift::Int EscrowPair.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for EscrowPair,  &qword_100252170,  (uint64_t)&protocol conformance descriptor for EscrowPair);
}

uint64_t sub_100084C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0D0C(a1, &qword_100250CD8, &qword_100251EB0, (uint64_t)sub_100083B8C, a2);
}

uint64_t sub_100084C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowPair.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100084C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowPair.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100084C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256358,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100084CC4(uint64_t a1)
{
  return sub_1000B52B8( v1,  a1,  type metadata accessor for EscrowPair,  (uint64_t (*)(uint64_t, uint64_t))sub_1000845C4) & 1;
}

uint64_t sub_100084CF4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CD0, (uint64_t)static EscrowPair._protobuf_nameMap, (uint64_t)sub_1000839B8, a1);
}

uint64_t sub_100084D10(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252260,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100084D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252260,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
  return Message.hash(into:)(a1, a2, v4);
}

const char *Changes.protoMessageName.unsafeMutableAddressor()
{
  return "Changes";
}

uint64_t static Changes.protoMessageName.getter()
{
  return 0x7365676E616843LL;
}

uint64_t sub_100084DC4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static Changes._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static Changes._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC60;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "change_token";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "differences";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "recovery_signing_pub_key";
  *((void *)v15 + 1) = 24LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "recovery_encryption_pub_key";
  *((void *)v17 + 1) = 27LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "more";
  *(void *)(v18 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Changes._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CE0, (uint64_t)static Changes._protobuf_nameMap, (uint64_t)sub_100084DC4);
}

uint64_t static Changes._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CE0, (uint64_t)static Changes._protobuf_nameMap, (uint64_t)sub_100084DC4, a1);
}

uint64_t Changes.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
          goto LABEL_6;
        case 2LL:
          uint64_t v12 = type metadata accessor for PeerDifference(0LL);
          uint64_t v13 = sub_1000077B8( &qword_100252178,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3 + 16, v12, v13, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v10 = v3 + 24;
          goto LABEL_5;
        case 4LL:
          uint64_t v10 = v3 + 40;
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v10, a2, a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + 56, a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Changes.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = v3[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v7), !v4))
  {
    uint64_t v10 = v3[2];
    if (!*(void *)(v10 + 16)
      || (uint64_t v11 = type metadata accessor for PeerDifference(0LL),
          v12 = sub_1000077B8( &qword_100252178,  type metadata accessor for PeerDifference,  (uint64_t)&protocol conformance descriptor for PeerDifference),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v10,  2LL,  v11,  v12,  a2,  a3),  !v4))
    {
      __asm { BR              X10 }
    }
  }

  return result;
}

Swift::Int Changes.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for Changes,  &qword_100252180,  (uint64_t)&protocol conformance descriptor for Changes);
}

uint64_t sub_10008538C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + 24) = xmmword_1001DE6F0;
  *(_OWORD *)(a1 + 40) = xmmword_1001DE6F0;
  *(_BYTE *)(a1 + 56) = 0;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_1000853D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Changes.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000853E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Changes.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000853F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256350,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008544C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CE0, (uint64_t)static Changes._protobuf_nameMap, (uint64_t)sub_100084DC4, a1);
}

uint64_t sub_100085468(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000854A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  return Message.hash(into:)(a1, a2, v4);
}

void *PolicyDocumentKey.protoMessageName.unsafeMutableAddressor()
{
  return &static PolicyDocumentKey.protoMessageName;
}

unint64_t static PolicyDocumentKey.protoMessageName.getter()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100085524()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static PolicyDocumentKey._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static PolicyDocumentKey._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "version";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "hash";
  *((void *)v13 + 1) = 4LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t PolicyDocumentKey._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CE8, (uint64_t)static PolicyDocumentKey._protobuf_nameMap, (uint64_t)sub_100085524);
}

uint64_t static PolicyDocumentKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250CE8,  (uint64_t)static PolicyDocumentKey._protobuf_nameMap,  (uint64_t)sub_100085524,  a1);
}

uint64_t PolicyDocumentKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + 8, a2, a3);
      }

      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t PolicyDocumentKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v3, 1LL, a2, a3), !v4))
  {
    uint64_t v9 = v3[1];
    unint64_t v10 = v3[2];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v9, v10), !v4))
    {
      type metadata accessor for PolicyDocumentKey(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int PolicyDocumentKey.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for PolicyDocumentKey,  &qword_100252188,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
}

uint64_t sub_100085830@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0xE000000000000000LL;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_100085858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PolicyDocumentKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008586C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PolicyDocumentKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100085880(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256348,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000858D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250CE8,  (uint64_t)static PolicyDocumentKey._protobuf_nameMap,  (uint64_t)sub_100085524,  a1);
}

uint64_t sub_1000858F0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252298,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100085930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252298,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
  return Message.hash(into:)(a1, a2, v4);
}

void *PolicyDocumentMapEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static PolicyDocumentMapEntry.protoMessageName;
}

unint64_t static PolicyDocumentMapEntry.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000859A8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static PolicyDocumentMapEntry._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static PolicyDocumentMapEntry._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "key";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 3LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "value";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t PolicyDocumentMapEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250CF0,  (uint64_t)static PolicyDocumentMapEntry._protobuf_nameMap,  (uint64_t)sub_1000859A8);
}

uint64_t static PolicyDocumentMapEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250CF0,  (uint64_t)static PolicyDocumentMapEntry._protobuf_nameMap,  (uint64_t)sub_1000859A8,  a1);
}

uint64_t PolicyDocumentMapEntry.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v5, a2, a3);
      }

      else if (result == 1)
      {
        sub_1000A50A4( a1,  v5,  a2,  a3,  type metadata accessor for PolicyDocumentMapEntry,  type metadata accessor for PolicyDocumentKey,  &qword_100252298,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t PolicyDocumentMapEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100085CF4(v3, a1, a2, a3);
  if (!v4) {
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_100085CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251668);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PolicyDocumentKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for PolicyDocumentMapEntry(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, &qword_100251668);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for PolicyDocumentKey);
  uint64_t v17 = sub_1000077B8( &qword_100252298,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for PolicyDocumentKey);
}

Swift::Int PolicyDocumentMapEntry.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for PolicyDocumentMapEntry,  &qword_100252190,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
}

uint64_t sub_100085E84@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1001DE6F0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for PolicyDocumentKey(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_100085EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PolicyDocumentMapEntry.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100085EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PolicyDocumentMapEntry.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100085F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256340,  type metadata accessor for PolicyDocumentMapEntry,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100085F5C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250CF0,  (uint64_t)static PolicyDocumentMapEntry._protobuf_nameMap,  (uint64_t)sub_1000859A8,  a1);
}

uint64_t sub_100085F78(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002522A8,  type metadata accessor for PolicyDocumentMapEntry,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100085FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002522A8,  type metadata accessor for PolicyDocumentMapEntry,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
  return Message.hash(into:)(a1, a2, v4);
}

const char *AccountInfo.protoMessageName.unsafeMutableAddressor()
{
  return "AccountInfo";
}

uint64_t static AccountInfo.protoMessageName.getter()
{
  return 0x49746E756F636341LL;
}

uint64_t sub_100086034(uint64_t a1)
{
  return sub_10009D55C(a1, static AccountInfo._protobuf_nameMap, (uint64_t)"flags", 5LL);
}

uint64_t AccountInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250CF8, (uint64_t)static AccountInfo._protobuf_nameMap, (uint64_t)sub_100086034);
}

uint64_t static AccountInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250CF8, (uint64_t)static AccountInfo._protobuf_nameMap, (uint64_t)sub_100086034, a1);
}

uint64_t AccountInfo.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3, a2, a3);
    }
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t AccountInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  if (!(_DWORD)v8
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v8, 1LL, a2, a3), !v4))
  {
    type metadata accessor for AccountInfo(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int AccountInfo.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for AccountInfo,  &qword_100252198,  (uint64_t)&protocol conformance descriptor for AccountInfo);
}

uint64_t sub_1000861A0@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_1000861C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AccountInfo.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000861D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AccountInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000861E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256338,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100086238@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250CF8, (uint64_t)static AccountInfo._protobuf_nameMap, (uint64_t)sub_100086034, a1);
}

uint64_t sub_100086254(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100086294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  return Message.hash(into:)(a1, a2, v4);
}

const char *Metrics.protoMessageName.unsafeMutableAddressor()
{
  return "Metrics";
}

uint64_t static Metrics.protoMessageName.getter()
{
  return 0x7363697274654DLL;
}

uint64_t sub_100086308()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static Metrics._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static Metrics._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "flow_id";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "device_session_id";
  *((void *)v13 + 1) = 17LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Metrics._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250D00, (uint64_t)static Metrics._protobuf_nameMap, (uint64_t)sub_100086308);
}

uint64_t static Metrics._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250D00, (uint64_t)static Metrics._protobuf_nameMap, (uint64_t)sub_100086308, a1);
}

uint64_t Metrics.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A35D8( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:));
}

uint64_t Metrics.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A3688(a1, a2, a3, (void (*)(void))type metadata accessor for Metrics);
}

uint64_t static Metrics.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000AD400(a1, a2, type metadata accessor for Metrics) & 1;
}

Swift::Int Metrics.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for Metrics,  &qword_1002521A0,  (uint64_t)&protocol conformance descriptor for Metrics);
}

uint64_t sub_100086508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Metrics.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008651C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Metrics.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100086530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256330,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100086580@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250D00, (uint64_t)static Metrics._protobuf_nameMap, (uint64_t)sub_100086308, a1);
}

uint64_t sub_10008659C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000865DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  return Message.hash(into:)(a1, a2, v4);
}

const char *ResetRequest.protoMessageName.unsafeMutableAddressor()
{
  return "ResetRequest";
}

uint64_t static ResetRequest.protoMessageName.getter()
{
  return 0x7165527465736552LL;
}

uint64_t sub_10008665C(uint64_t a1)
{
  return sub_10009C6A0(a1, static ResetRequest._protobuf_nameMap);
}

uint64_t ResetRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250D08, (uint64_t)static ResetRequest._protobuf_nameMap, (uint64_t)sub_10008665C);
}

uint64_t static ResetRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250D08, (uint64_t)static ResetRequest._protobuf_nameMap, (uint64_t)sub_10008665C, a1);
}

uint64_t ResetRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009C964(a1, a2, a3, type metadata accessor for ResetRequest);
}

uint64_t ResetRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009CC7C( a1,  a2,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_1000866E8,  (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_10008685C,  (void (*)(void))type metadata accessor for ResetRequest);
}

uint64_t sub_1000866E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ResetRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 40), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

uint64_t sub_10008685C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ResetRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 44), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

Swift::Int ResetRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for ResetRequest,  &qword_1002521B0,  (uint64_t)&protocol conformance descriptor for ResetRequest);
}

uint64_t sub_1000869F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100086A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100086A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256328,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100086A68@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250D08, (uint64_t)static ResetRequest._protobuf_nameMap, (uint64_t)sub_10008665C, a1);
}

uint64_t sub_100086A84(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100257080,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100086AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100257080,  type metadata accessor for ResetRequest,  (uint64_t)&protocol conformance descriptor for ResetRequest);
  return Message.hash(into:)(a1, a2, v4);
}

const char *ResetResponse.protoMessageName.unsafeMutableAddressor()
{
  return "ResetResponse";
}

uint64_t static ResetResponse.protoMessageName.getter()
{
  return 0x7365527465736552LL;
}

uint64_t sub_100086B44(uint64_t a1)
{
  return sub_10009D55C(a1, static ResetResponse._protobuf_nameMap, (uint64_t)"changes", 7LL);
}

uint64_t ResetResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250D10, (uint64_t)static ResetResponse._protobuf_nameMap, (uint64_t)sub_100086B44);
}

uint64_t static ResetResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250D10, (uint64_t)static ResetResponse._protobuf_nameMap, (uint64_t)sub_100086B44, a1);
}

uint64_t ResetResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FA48(a1, a2, a3, type metadata accessor for ResetResponse);
}

uint64_t ResetResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FB1C(a1, a2, a3, type metadata accessor for ResetResponse);
}

Swift::Int ResetResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for ResetResponse,  &qword_1002521B8,  (uint64_t)&protocol conformance descriptor for ResetResponse);
}

uint64_t sub_100086BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100086C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100086C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256320,  type metadata accessor for ResetResponse,  (uint64_t)&protocol conformance descriptor for ResetResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100086C64@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250D10, (uint64_t)static ResetResponse._protobuf_nameMap, (uint64_t)sub_100086B44, a1);
}

uint64_t sub_100086C80(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252690,  type metadata accessor for ResetResponse,  (uint64_t)&protocol conformance descriptor for ResetResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100086CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252690,  type metadata accessor for ResetResponse,  (uint64_t)&protocol conformance descriptor for ResetResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *EstablishRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static EstablishRequest.protoMessageName;
}

unint64_t static EstablishRequest.protoMessageName.getter()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100086D38()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static EstablishRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static EstablishRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC30;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "peer";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "bottle";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "view_keys";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "tlk_shares";
  *((void *)v17 + 1) = 10LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "metrics";
  *((void *)v19 + 1) = 7LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "accountInfo";
  *((void *)v21 + 1) = 11LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t EstablishRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250D18, (uint64_t)static EstablishRequest._protobuf_nameMap, (uint64_t)sub_100086D38);
}

uint64_t static EstablishRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250D18, (uint64_t)static EstablishRequest._protobuf_nameMap, (uint64_t)sub_100086D38, a1);
}

uint64_t sub_100086FB8()
{
  uint64_t v0 = type metadata accessor for EstablishRequest._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  uint64_t v3 = type metadata accessor for Peer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  uint64_t v5 = type metadata accessor for Bottle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys) = _swiftEmptyArrayStorage;
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares) = _swiftEmptyArrayStorage;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v9 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( v8,  1LL,  1LL,  v9);
  qword_100251EB8 = v1;
  return result;
}

uint64_t sub_1000870D0(uint64_t a1)
{
  uint64_t v3 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v3, v4);
  uint64_t v44 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v43 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  uint64_t v18 = type metadata accessor for Peer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  uint64_t v20 = type metadata accessor for Bottle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys) = _swiftEmptyArrayStorage;
  uint64_t v22 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares) = _swiftEmptyArrayStorage;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v24 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v23, 1LL, 1LL, v24);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v42 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v26 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v25, 1LL, 1LL, v26);
  uint64_t v27 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v53,  0LL,  0LL);
  sub_10000FC68(v27, (uint64_t)v16, &qword_100251F58);
  swift_beginAccess(v17, v52, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v16, v17, &qword_100251F58);
  swift_endAccess(v52);
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v52,  0LL,  0LL);
  sub_10000FC68(v28, (uint64_t)v12, &qword_100251F38);
  swift_beginAccess(v19, v51, 33LL, 0LL);
  sub_1000B66E0((uint64_t)v12, v19, &qword_100251F38);
  swift_endAccess(v51);
  uint64_t v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  v51,  0LL,  0LL);
  uint64_t v30 = *v29;
  swift_beginAccess(v21, v50, 1LL, 0LL);
  uint64_t v31 = *v21;
  *uint64_t v21 = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  v49,  0LL,  0LL);
  uint64_t v33 = *v32;
  swift_beginAccess(v22, v48, 1LL, 0LL);
  uint64_t v34 = *v22;
  *uint64_t v22 = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v47,  0LL,  0LL);
  uint64_t v36 = v43;
  sub_10000FC68(v35, v43, &qword_100257000);
  swift_beginAccess(v23, v46, 33LL, 0LL);
  sub_1000B66E0(v36, v23, &qword_100257000);
  swift_endAccess(v46);
  uint64_t v37 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v46,  0LL,  0LL);
  uint64_t v38 = v44;
  sub_10000FC68(v37, v44, &qword_100251F50);
  swift_release(a1);
  uint64_t v39 = v42;
  swift_beginAccess(v42, v45, 33LL, 0LL);
  sub_1000B66E0(v38, v39, &qword_100251F50);
  swift_endAccess(v45);
  return v1;
}

uint64_t sub_100087548()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares));
  sub_100041590( v0 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &qword_100257000);
  sub_100041590( v0 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &qword_100251F50);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t EstablishRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100083EF8( a1,  a2,  a3,  type metadata accessor for EstablishRequest,  type metadata accessor for EstablishRequest._StorageClass,  sub_1000870D0,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10008761C);
}

uint64_t sub_10008761C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
          uint64_t v16 = type metadata accessor for Peer;
          uint64_t v17 = (unint64_t *)&unk_100256E10;
          uint64_t v18 = &protocol conformance descriptor for Peer;
          goto LABEL_5;
        case 2LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
          uint64_t v16 = type metadata accessor for Bottle;
          uint64_t v17 = (unint64_t *)&unk_100256EA0;
          uint64_t v18 = &protocol conformance descriptor for Bottle;
          goto LABEL_5;
        case 3LL:
          sub_1000914DC( a2,  a1,  a3,  a4,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  type metadata accessor for ViewKeys,  &qword_1002521E8,  (uint64_t)&protocol conformance descriptor for ViewKeys);
          break;
        case 4LL:
          sub_1000914DC( a2,  a1,  a3,  a4,  &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  type metadata accessor for TLKShare,  &qword_100256D60,  (uint64_t)&protocol conformance descriptor for TLKShare);
          break;
        case 5LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
          uint64_t v16 = type metadata accessor for Metrics;
          uint64_t v17 = (unint64_t *)&unk_100256FE0;
          uint64_t v18 = &protocol conformance descriptor for Metrics;
          goto LABEL_5;
        case 6LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
          uint64_t v16 = type metadata accessor for AccountInfo;
          uint64_t v17 = (unint64_t *)&unk_100256CE0;
          uint64_t v18 = &protocol conformance descriptor for AccountInfo;
LABEL_5:
          sub_10009F698(v11, v12, v13, v14, v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
    }
  }

  return result;
}

uint64_t EstablishRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100084134( a1,  a2,  a3,  type metadata accessor for EstablishRequest,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100087830);
}

uint64_t sub_100087830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_100087A00(a1, a2, a3, a4);
  if (!v4)
  {
    sub_100087B8C(a1, a2, a3, a4);
    char v10 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
    swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  v21,  0LL,  0LL);
    uint64_t v11 = *v10;
    if (*(void *)(v11 + 16))
    {
      uint64_t v12 = type metadata accessor for ViewKeys(0LL);
      uint64_t v13 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
      uint64_t v14 = swift_bridgeObjectRetain(v11);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v14, 3LL, v12, v13, a3, a4);
      swift_bridgeObjectRelease(v11);
    }

    uint64_t v15 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
    swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  &v20,  0LL,  0LL);
    uint64_t v16 = *v15;
    if (*(void *)(v16 + 16))
    {
      uint64_t v17 = type metadata accessor for TLKShare(0LL);
      uint64_t v18 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
      uint64_t v19 = swift_bridgeObjectRetain(v16);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v19, 4LL, v17, v18, a3, a4);
      swift_bridgeObjectRelease(v16);
    }

    sub_100087D18(a1, a2, a3, a4);
    return sub_100087EA4(a1, a2, a3, a4);
  }

  return result;
}

uint64_t sub_100087A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Peer(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F58);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Peer);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Peer);
}

uint64_t sub_100087B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Bottle(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F38);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Bottle);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Bottle);
}

uint64_t sub_100087D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_100087EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

BOOL sub_100088030(uint64_t a1, uint64_t a2)
{
  uint64_t v146 = a2;
  uint64_t v129 = type metadata accessor for AccountInfo(0LL);
  uint64_t v127 = *(void *)(v129 - 8);
  __chkstk_darwin(v129, v3);
  id v123 = (_DWORD *)((char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v126 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v126, v5);
  uint64_t v128 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100007578(&qword_100251F50);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v124 = (_DWORD *)((char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v9, v11);
  unint64_t v143 = (char *)&v122 - v12;
  uint64_t v134 = type metadata accessor for Metrics(0LL);
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin(v134, v13);
  uint64_t v125 = (uint64_t *)((char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v131 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v131, v15);
  uint64_t v133 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100007578(&qword_100257000);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  unint64_t v130 = (uint64_t *)((char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v19, v21);
  id v142 = (char *)&v122 - v22;
  uint64_t v23 = type metadata accessor for Bottle(0LL);
  uint64_t v139 = *(void *)(v23 - 8);
  uint64_t v140 = v23;
  __chkstk_darwin(v23, v24);
  uint64_t v135 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = sub_100007578(&qword_100256488);
  __chkstk_darwin(v138, v26);
  uint64_t v141 = (uint64_t)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100007578(&qword_100251F38);
  uint64_t v30 = __chkstk_darwin(v28, v29);
  uint64_t v136 = (uint64_t *)((char *)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v30, v32);
  uint64_t v145 = (uint64_t)&v122 - v33;
  uint64_t v34 = type metadata accessor for Peer(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v36);
  uint64_t v137 = (uint64_t *)((char *)&v122 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v38 = sub_100007578(&qword_100256458);
  __chkstk_darwin(v38, v39);
  uint64_t v41 = (char *)&v122 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_100007578(&qword_100251F58);
  uint64_t v44 = __chkstk_darwin(v42, v43);
  uint64_t v144 = (uint64_t *)((char *)&v122 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v44, v46);
  uint64_t v48 = (char *)&v122 - v47;
  uint64_t v49 = a1;
  uint64_t v50 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess(v50, v158, 0LL, 0LL);
  sub_10000FC68(v50, (uint64_t)v48, &qword_100251F58);
  uint64_t v51 = v146;
  uint64_t v52 = v146
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( v146 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v157,  0LL,  0LL);
  uint64_t v53 = (uint64_t)&v41[*(int *)(v38 + 48)];
  sub_10000FC68((uint64_t)v48, (uint64_t)v41, &qword_100251F58);
  sub_10000FC68(v52, v53, &qword_100251F58);
  uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v54((uint64_t)v41, 1LL, v34) == 1)
  {
    swift_retain(v49);
    swift_retain(v51);
    sub_100041590((uint64_t)v48, &qword_100251F58);
    uint64_t v55 = v51;
    uint64_t v56 = v49;
    if (v54(v53, 1LL, v34) == 1)
    {
      sub_100041590((uint64_t)v41, &qword_100251F58);
      goto LABEL_8;
    }

LABEL_6:
    uint64_t v58 = &qword_100256458;
    uint64_t v59 = (uint64_t)v41;
LABEL_14:
    sub_100041590(v59, v58);
    goto LABEL_15;
  }

  uint64_t v56 = v49;
  uint64_t v57 = v144;
  sub_10000FC68((uint64_t)v41, (uint64_t)v144, &qword_100251F58);
  if (v54(v53, 1LL, v34) == 1)
  {
    swift_retain(v56);
    uint64_t v55 = v51;
    swift_retain(v51);
    sub_100041590((uint64_t)v48, &qword_100251F58);
    sub_1000415CC((uint64_t)v57, type metadata accessor for Peer);
    goto LABEL_6;
  }

  uint64_t v60 = v137;
  sub_100041608(v53, (uint64_t)v137, type metadata accessor for Peer);
  swift_retain(v56);
  uint64_t v55 = v51;
  swift_retain(v51);
  char v61 = _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(v57, v60);
  sub_1000415CC((uint64_t)v60, type metadata accessor for Peer);
  sub_100041590((uint64_t)v48, &qword_100251F58);
  sub_1000415CC((uint64_t)v57, type metadata accessor for Peer);
  sub_100041590((uint64_t)v41, &qword_100251F58);
  if ((v61 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v62 = v56
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v56 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v156,  0LL,  0LL);
  uint64_t v63 = v145;
  sub_10000FC68(v62, v145, &qword_100251F38);
  uint64_t v64 = v55
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v155,  0LL,  0LL);
  uint64_t v65 = v141;
  uint64_t v66 = v141 + *(int *)(v138 + 48);
  sub_10000FC68(v63, v141, &qword_100251F38);
  sub_10000FC68(v64, v66, &qword_100251F38);
  uint64_t v67 = v140;
  uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v139 + 48);
  if (v68(v65, 1LL, v140) == 1)
  {
    sub_100041590(v63, &qword_100251F38);
    int v69 = v68(v66, 1LL, v67);
    uint64_t v70 = (uint64_t)v142;
    uint64_t v71 = (uint64_t)v143;
    if (v69 == 1)
    {
      sub_100041590(v65, &qword_100251F38);
      goto LABEL_19;
    }

    goto LABEL_13;
  }

  uint64_t v72 = v136;
  sub_10000FC68(v65, (uint64_t)v136, &qword_100251F38);
  int v73 = v68(v66, 1LL, v67);
  uint64_t v70 = (uint64_t)v142;
  uint64_t v71 = (uint64_t)v143;
  if (v73 == 1)
  {
    sub_100041590(v145, &qword_100251F38);
    sub_1000415CC((uint64_t)v72, type metadata accessor for Bottle);
LABEL_13:
    uint64_t v58 = &qword_100256488;
    uint64_t v59 = v65;
    goto LABEL_14;
  }

  uint64_t v75 = v135;
  sub_100041608(v66, (uint64_t)v135, type metadata accessor for Bottle);
  char v76 = _s18TrustedPeersHelper6BottleV2eeoiySbAC_ACtFZ_0(v72, v75);
  sub_1000415CC((uint64_t)v75, type metadata accessor for Bottle);
  sub_100041590(v145, &qword_100251F38);
  sub_1000415CC((uint64_t)v72, type metadata accessor for Bottle);
  sub_100041590(v65, &qword_100251F38);
  if ((v76 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v77 = (uint64_t *)(v56
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess( v56 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  v154,  0LL,  0LL);
  uint64_t v78 = *v77;
  unsigned int v79 = (uint64_t *)(v55
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess( v55 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  v153,  0LL,  0LL);
  uint64_t v80 = *v79;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v80);
  char v81 = sub_10003F644(v78, v80);
  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease(v80);
  if ((v81 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v82 = (uint64_t *)(v56
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess( v56 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  v152,  0LL,  0LL);
  uint64_t v83 = *v82;
  uint64_t v84 = (uint64_t *)(v55
                  + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess( v55 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  &v151,  0LL,  0LL);
  uint64_t v85 = *v84;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v85);
  char v86 = sub_10003F630(v83, v85);
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease(v85);
  if ((v86 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v87 = v56
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v56 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &v150,  0LL,  0LL);
  sub_10000FC68(v87, v70, &qword_100257000);
  uint64_t v88 = v55
      + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &v149,  0LL,  0LL);
  uint64_t v89 = v133;
  uint64_t v90 = v133 + *(int *)(v131 + 48);
  sub_10000FC68(v70, v133, &qword_100257000);
  sub_10000FC68(v88, v90, &qword_100257000);
  os_log_type_t v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48);
  uint64_t v92 = v134;
  if (v91(v89, 1LL, v134) != 1)
  {
    uint64_t v93 = v130;
    sub_10000FC68(v89, (uint64_t)v130, &qword_100257000);
    if (v91(v90, 1LL, v92) == 1)
    {
      sub_100041590(v70, &qword_100257000);
      sub_1000415CC((uint64_t)v93, type metadata accessor for Metrics);
      goto LABEL_26;
    }

    uint64_t v94 = v125;
    sub_100041608(v90, (uint64_t)v125, type metadata accessor for Metrics);
    uint64_t v95 = v93[1];
    uint64_t v96 = v94[1];
    if ((*v93 != *v94 || v95 != v96)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(*v93, v95, *v94, v96, 0LL) & 1) == 0
      || ((uint64_t v97 = v93[2], v98 = v93[3], v99 = v94[2], v100 = v94[3], v97 != v99) || v98 != v100)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, v99, v100, 0LL) & 1) == 0)
    {
      sub_1000415CC((uint64_t)v94, type metadata accessor for Metrics);
      sub_100041590(v70, &qword_100257000);
      sub_1000415CC((uint64_t)v93, type metadata accessor for Metrics);
      uint64_t v59 = v89;
      uint64_t v58 = &qword_100257000;
      goto LABEL_14;
    }

    uint64_t v101 = *(int *)(v134 + 24);
    unint64_t v102 = (char *)v93 + v101;
    uint64_t v103 = (char *)v94 + v101;
    uint64_t v104 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v105 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v102) = dispatch thunk of static Equatable.== infix(_:_:)(v102, v103, v104, v105);
    sub_1000415CC((uint64_t)v94, type metadata accessor for Metrics);
    sub_100041590(v70, &qword_100257000);
    sub_1000415CC((uint64_t)v130, type metadata accessor for Metrics);
    sub_100041590(v89, &qword_100257000);
LABEL_15:
    swift_release(v56);
    swift_release(v55);
    return 0LL;
  }

  sub_100041590(v70, &qword_100257000);
  if (v91(v90, 1LL, v92) != 1)
  {
LABEL_26:
    uint64_t v58 = &qword_1002563E8;
    uint64_t v59 = v89;
    goto LABEL_14;
  }

  sub_100041590(v89, &qword_100257000);
LABEL_34:
  uint64_t v106 = v56
       + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v56 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &v148,  0LL,  0LL);
  sub_10000FC68(v106, v71, &qword_100251F50);
  uint64_t v107 = v55
       + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV18TrustedPeersHelper16EstablishRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &v147,  0LL,  0LL);
  uint64_t v108 = v128;
  uint64_t v109 = v128 + *(int *)(v126 + 48);
  sub_10000FC68(v71, v128, &qword_100251F50);
  sub_10000FC68(v107, v109, &qword_100251F50);
  uint64_t v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
  uint64_t v111 = v129;
  if (v110(v108, 1LL, v129) == 1)
  {
    swift_release(v56);
    swift_release(v55);
    sub_100041590(v71, &qword_100251F50);
    if (v110(v109, 1LL, v111) == 1)
    {
      sub_100041590(v108, &qword_100251F50);
      return 1LL;
    }

    goto LABEL_40;
  }

  uint64_t v112 = v124;
  sub_10000FC68(v108, (uint64_t)v124, &qword_100251F50);
  if (v110(v109, 1LL, v111) == 1)
  {
    swift_release(v56);
    swift_release(v55);
    sub_100041590(v71, &qword_100251F50);
    sub_1000415CC((uint64_t)v112, type metadata accessor for AccountInfo);
LABEL_40:
    uint64_t v113 = &qword_1002563E0;
    uint64_t v114 = v108;
LABEL_41:
    sub_100041590(v114, v113);
    return 0LL;
  }

  uint64_t v115 = v123;
  sub_100041608(v109, (uint64_t)v123, type metadata accessor for AccountInfo);
  if (*v112 != *v115)
  {
    swift_release(v56);
    swift_release(v55);
    sub_1000415CC((uint64_t)v115, type metadata accessor for AccountInfo);
    sub_100041590(v71, &qword_100251F50);
    sub_1000415CC((uint64_t)v112, type metadata accessor for AccountInfo);
    uint64_t v114 = v108;
    uint64_t v113 = &qword_100251F50;
    goto LABEL_41;
  }

  uint64_t v116 = *(int *)(v129 + 20);
  uint64_t v117 = (char *)v112 + v116;
  uint64_t v118 = (char *)v115 + v116;
  uint64_t v119 = (uint64_t)v112;
  uint64_t v120 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v121 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v117) = dispatch thunk of static Equatable.== infix(_:_:)(v117, v118, v120, v121);
  swift_release(v56);
  swift_release(v55);
  sub_1000415CC((uint64_t)v115, type metadata accessor for AccountInfo);
  sub_100041590(v71, &qword_100251F50);
  sub_1000415CC(v119, type metadata accessor for AccountInfo);
  sub_100041590(v108, &qword_100251F50);
  return (v117 & 1) != 0;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v12 = v11;
    sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for FetchViableBottlesRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
LABEL_5:
    uint64_t v11 = v12;
    goto LABEL_6;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v13 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
    uint64_t v14 = v11;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v5 + 16, v12, v13, a2, a3);
LABEL_5:
    uint64_t v11 = v14;
    goto LABEL_6;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v11 = v4 + 16;
LABEL_5:
    a4(v11, a2, a3);
    goto LABEL_6;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v15 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v16 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
    uint64_t v17 = v6 + 8;
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v17, v15, v16, a2, a3);
    goto LABEL_6;
  }

  return result;
}

    uint64_t v44 = &qword_1002563E8;
    uint64_t v45 = (uint64_t)v28;
LABEL_26:
    sub_100041590(v45, v44);
    goto LABEL_27;
  }

  sub_10000FC68((uint64_t)v28, (uint64_t)v33, &qword_100257000);
  if (v43(v42, 1LL, v20) == 1)
  {
    sub_100041590((uint64_t)v37, &qword_100257000);
    sub_100041590((uint64_t)v40, &qword_100257000);
    sub_1000415CC((uint64_t)v33, type metadata accessor for Metrics);
    goto LABEL_6;
  }

  sub_100041608(v42, (uint64_t)v24, type metadata accessor for Metrics);
  uint64_t v46 = v33[1];
  uint64_t v47 = v24[1];
  if ((*v33 != *v24 || v46 != v47) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v33, v46, *v24, v47, 0LL) & 1) == 0
    || ((uint64_t v48 = v33[2], v49 = v33[3], v50 = v24[2], v51 = v24[3], v48 != v50) || v49 != v51)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v50, v51, 0LL) & 1) == 0)
  {
    sub_1000415CC((uint64_t)v24, type metadata accessor for Metrics);
    sub_100041590((uint64_t)v37, &qword_100257000);
    sub_100041590((uint64_t)v40, &qword_100257000);
    sub_1000415CC((uint64_t)v33, type metadata accessor for Metrics);
    uint64_t v45 = (uint64_t)v28;
    uint64_t v44 = &qword_100257000;
    goto LABEL_26;
  }

  uint64_t v52 = *(int *)(v20 + 24);
  uint64_t v53 = (char *)v33 + v52;
  uint64_t v54 = (char *)v24 + v52;
  uint64_t v55 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v53) = dispatch thunk of static Equatable.== infix(_:_:)(v53, v54, v86, v55);
  sub_1000415CC((uint64_t)v24, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v37, &qword_100257000);
  sub_100041590((uint64_t)v40, &qword_100257000);
  sub_1000415CC((uint64_t)v33, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v28, &qword_100257000);
LABEL_14:
  uint64_t v56 = v87;
  uint64_t v57 = v94;
  uint64_t v58 = v91;
  sub_10000FC68(v94 + *(int *)(v87 + 24), v91, &qword_100251F50);
  uint64_t v59 = v95;
  uint64_t v60 = v90;
  sub_10000FC68(v95 + *(int *)(v56 + 24), v90, &qword_100251F50);
  char v61 = v93;
  uint64_t v62 = v93 + *(int *)(v88 + 48);
  sub_10000FC68(v58, v93, &qword_100251F50);
  sub_10000FC68(v60, v62, &qword_100251F50);
  uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  uint64_t v64 = v92;
  if (v63(v61, 1LL, v92) != 1)
  {
    int v73 = v85;
    sub_10000FC68(v61, (uint64_t)v85, &qword_100251F50);
    if (v63(v62, 1LL, v64) == 1)
    {
      sub_100041590(v60, &qword_100251F50);
      sub_100041590(v58, &qword_100251F50);
      sub_1000415CC((uint64_t)v73, type metadata accessor for AccountInfo);
      goto LABEL_20;
    }

    uint64_t v74 = v81;
    sub_100041608(v62, (uint64_t)v81, type metadata accessor for AccountInfo);
    if (*v73 != *v74)
    {
      sub_1000415CC((uint64_t)v74, type metadata accessor for AccountInfo);
      sub_100041590(v60, &qword_100251F50);
      sub_100041590(v58, &qword_100251F50);
      sub_1000415CC((uint64_t)v73, type metadata accessor for AccountInfo);
      uint64_t v45 = v61;
      uint64_t v44 = &qword_100251F50;
      goto LABEL_26;
    }

    uint64_t v75 = *(int *)(v64 + 20);
    char v76 = (char *)v73 + v75;
    uint64_t v77 = (char *)v74 + v75;
    uint64_t v78 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v76) = dispatch thunk of static Equatable.== infix(_:_:)(v76, v77, v86, v78);
    sub_1000415CC((uint64_t)v74, type metadata accessor for AccountInfo);
    sub_100041590(v60, &qword_100251F50);
    sub_100041590(v58, &qword_100251F50);
    sub_1000415CC((uint64_t)v73, type metadata accessor for AccountInfo);
    sub_100041590(v61, &qword_100251F50);
LABEL_27:
    uint64_t v71 = 0;
    return v71 & 1;
  }

  sub_100041590(v60, &qword_100251F50);
  sub_100041590(v58, &qword_100251F50);
  if (v63(v62, 1LL, v64) != 1)
  {
LABEL_20:
    uint64_t v44 = &qword_1002563E0;
    uint64_t v45 = v61;
    goto LABEL_26;
  }

  sub_100041590(v61, &qword_100251F50);
LABEL_17:
  uint64_t v65 = v84;
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
  uint64_t v67 = v82;
  uint64_t v68 = v86;
  v66(v82, v57, v86);
  int v69 = v83;
  v66(v83, v59, v68);
  uint64_t v70 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  uint64_t v71 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v69, v68, v70);
  uint64_t v72 = *(void (**)(char *, uint64_t))(v65 + 8);
  v72(v69, v68);
  v72(v67, v68);
  return v71 & 1;
}

    uint64_t v44 = &qword_1002563E8;
    uint64_t v45 = (uint64_t)v28;
LABEL_27:
    sub_100041590(v45, v44);
    goto LABEL_28;
  }

  sub_10000FC68((uint64_t)v28, (uint64_t)v33, &qword_100257000);
  if (v43(v42, 1LL, v20) == 1)
  {
    sub_100041590((uint64_t)v37, &qword_100257000);
    sub_100041590((uint64_t)v40, &qword_100257000);
    sub_1000415CC((uint64_t)v33, type metadata accessor for Metrics);
    goto LABEL_6;
  }

  sub_100041608(v42, (uint64_t)v24, type metadata accessor for Metrics);
  uint64_t v46 = v33[1];
  uint64_t v47 = v24[1];
  if ((*v33 != *v24 || v46 != v47) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v33, v46, *v24, v47, 0LL) & 1) == 0
    || ((uint64_t v48 = v33[2], v49 = v33[3], v50 = v24[2], v51 = v24[3], v48 != v50) || v49 != v51)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v50, v51, 0LL) & 1) == 0)
  {
    sub_1000415CC((uint64_t)v24, type metadata accessor for Metrics);
    sub_100041590((uint64_t)v37, &qword_100257000);
    sub_100041590((uint64_t)v40, &qword_100257000);
    sub_1000415CC((uint64_t)v33, type metadata accessor for Metrics);
    uint64_t v45 = (uint64_t)v28;
    uint64_t v44 = &qword_100257000;
    goto LABEL_27;
  }

  uint64_t v52 = *(int *)(v20 + 24);
  uint64_t v53 = (char *)v33 + v52;
  uint64_t v54 = (char *)v24 + v52;
  uint64_t v55 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v53) = dispatch thunk of static Equatable.== infix(_:_:)(v53, v54, v89, v55);
  sub_1000415CC((uint64_t)v24, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v37, &qword_100257000);
  sub_100041590((uint64_t)v40, &qword_100257000);
  sub_1000415CC((uint64_t)v33, type metadata accessor for Metrics);
  sub_100041590((uint64_t)v28, &qword_100257000);
  if ((v53 & 1) == 0)
  {
LABEL_28:
    uint64_t v74 = 0;
    return v74 & 1;
  }

    uint64_t v45 = &qword_100251638;
    uint64_t v46 = (uint64_t)v29;
LABEL_7:
    sub_100041590(v46, v45);
    goto LABEL_44;
  }

  sub_10000FC68((uint64_t)v29, (uint64_t)v34, (uint64_t *)&unk_100256D30);
  if (v44(v43, 1LL, v21) == 1)
  {
    sub_100041590((uint64_t)v38, (uint64_t *)&unk_100256D30);
    sub_100041590((uint64_t)v41, (uint64_t *)&unk_100256D30);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v34, v21);
    goto LABEL_6;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v25, v43, v21);
  uint64_t v47 = sub_1000077B8( &qword_100251640,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  uint64_t v48 = dispatch thunk of static Equatable.== infix(_:_:)(v34, v25, v21, v47);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v22 + 8);
  v49(v25, v21);
  sub_100041590((uint64_t)v38, (uint64_t *)&unk_100256D30);
  sub_100041590((uint64_t)v41, (uint64_t *)&unk_100256D30);
  v49(v34, v21);
  sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
  if ((v48 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_9:
  uint64_t v51 = v103;
  uint64_t v50 = v104;
  if (*v103 != *v104) {
    goto LABEL_44;
  }
  uint64_t v52 = v96;
  uint64_t v53 = v99;
  sub_10000FC68((uint64_t)v103 + *(int *)(v96 + 52), v99, &qword_100252098);
  uint64_t v54 = v102;
  sub_10000FC68((uint64_t)v50 + *(int *)(v52 + 52), v102, &qword_100252098);
  uint64_t v55 = v101;
  uint64_t v56 = v101 + *(int *)(v97 + 48);
  sub_10000FC68(v53, v101, &qword_100252098);
  sub_10000FC68(v54, v56, &qword_100252098);
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  uint64_t v58 = v100;
  if (v57(v55, 1LL, v100) == 1)
  {
    sub_100041590(v54, &qword_100252098);
    sub_100041590(v53, &qword_100252098);
    if (v57(v56, 1LL, v58) == 1)
    {
      sub_100041590(v55, &qword_100252098);
      goto LABEL_17;
    }

    goto LABEL_15;
  }

  uint64_t v59 = v95;
  sub_10000FC68(v55, v95, &qword_100252098);
  if (v57(v56, 1LL, v58) == 1)
  {
    sub_100041590(v102, &qword_100252098);
    sub_100041590(v53, &qword_100252098);
    sub_1000415CC(v59, type metadata accessor for EscrowInformation.Metadata);
LABEL_15:
    uint64_t v45 = &qword_100256430;
    uint64_t v46 = v55;
    goto LABEL_7;
  }

  uint64_t v60 = v94;
  sub_100041608(v56, v94, type metadata accessor for EscrowInformation.Metadata);
  char v61 = sub_1000B52B8( v59,  v60,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t (*)(uint64_t, uint64_t))sub_1000A0064);
  sub_1000415CC(v60, type metadata accessor for EscrowInformation.Metadata);
  sub_100041590(v102, &qword_100252098);
  sub_100041590(v53, &qword_100252098);
  sub_1000415CC(v59, type metadata accessor for EscrowInformation.Metadata);
  sub_100041590(v55, &qword_100252098);
  if ((v61 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_17:
  uint64_t v62 = v51[1];
  uint64_t v63 = v51[2];
  uint64_t v64 = v50[1];
  uint64_t v65 = v50[2];
  if (v62 != v64 || v63 != v65)
  {
    uint64_t v66 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v64, v65, 0LL) & 1) == 0) {
      return v66 & 1;
    }
  }

  if (v51[3] != v50[3]) {
    goto LABEL_44;
  }
  uint64_t v67 = v51[4];
  uint64_t v68 = v50[4];
  if (*((_BYTE *)v51 + 40)) {
    uint64_t v67 = v67 != 0;
  }
  if (*((_BYTE *)v50 + 40) == 1)
  {
    if (v68)
    {
      if (v67 != 1) {
        goto LABEL_44;
      }
    }

    else if (v67)
    {
      goto LABEL_44;
    }
  }

  else if (v67 != v68)
  {
    goto LABEL_44;
  }

  int v69 = v51[6];
  uint64_t v70 = v50[6];
  if (*((_BYTE *)v50 + 56) != 1)
  {
    if (v69 == v70) {
      goto LABEL_36;
    }
    goto LABEL_44;
  }

  if (!v70)
  {
    if (!v69) {
      goto LABEL_36;
    }
    goto LABEL_44;
  }

  if (v70 == 1)
  {
    if (v69 == 1) {
      goto LABEL_36;
    }
LABEL_44:
    uint64_t v66 = 0;
    return v66 & 1;
  }

  if (v69 != 2) {
    goto LABEL_44;
  }
LABEL_36:
  uint64_t v71 = v51[8];
  uint64_t v72 = v51[9];
  int v73 = v50[8];
  uint64_t v74 = v50[9];
  if (v71 == v73 && v72 == v74
    || (uint64_t v66 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v73, v74, 0LL) & 1) != 0))
  {
    uint64_t v75 = v51[10];
    char v76 = v51[11];
    uint64_t v77 = v50[10];
    uint64_t v78 = v50[11];
    if (v75 == v77 && v76 == v78
      || (uint64_t v66 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v77, v78, 0LL) & 1) != 0))
    {
      unsigned int v79 = (char *)v51 + *(int *)(v52 + 44);
      char v81 = v92;
      uint64_t v80 = v93;
      uint64_t v82 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
      uint64_t v83 = v90;
      v82(v90, v79, v93);
      uint64_t v84 = (char *)v50 + *(int *)(v52 + 44);
      uint64_t v85 = v91;
      v82(v91, v84, v80);
      char v86 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v66 = dispatch thunk of static Equatable.== infix(_:_:)(v83, v85, v80, v86);
      uint64_t v87 = *(void (**)(char *, uint64_t))(v81 + 8);
      v87(v85, v80);
      v87(v83, v80);
    }
  }

  return v66 & 1;
}

    sub_100041590((uint64_t)v18, &qword_100251638);
    goto LABEL_34;
  }

  sub_10000FC68((uint64_t)v18, v88, (uint64_t *)&unk_100256D30);
  if (v36(v35, 1LL, v10) == 1)
  {
    sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
    sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v88, v10);
    goto LABEL_6;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, v35, v10);
  uint64_t v37 = sub_1000077B8( &qword_100251640,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  uint64_t v38 = v88;
  uint64_t v39 = dispatch thunk of static Equatable.== infix(_:_:)(v88, v14, v10, v37);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v40(v14, v10);
  sub_100041590((uint64_t)v26, (uint64_t *)&unk_100256D30);
  sub_100041590((uint64_t)v29, (uint64_t *)&unk_100256D30);
  v40((char *)v38, v10);
  sub_100041590((uint64_t)v18, (uint64_t *)&unk_100256D30);
  if ((v39 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_8:
  uint64_t v42 = v86;
  uint64_t v41 = v87;
  if (*v86 != *(void *)v87 || v86[1] != *((void *)v87 + 1) || v86[2] != *((void *)v87 + 2)) {
    goto LABEL_34;
  }
  uint64_t v43 = v86[3];
  uint64_t v44 = v86[4];
  uint64_t v45 = *((void *)v87 + 3);
  uint64_t v46 = *((void *)v87 + 4);
  if (v43 == v45 && v44 == v46
    || (uint64_t v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v45, v46, 0LL) & 1) != 0))
  {
    if ((uint64_t v48 = v42[5], v49 = v42[6], v50 = *((void *)v41 + 5), v51 = *((void *)v41 + 6), v48 == v50) && v49 == v51
      || (uint64_t v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v50, v51, 0LL) & 1) != 0))
    {
      if ((uint64_t v52 = v42[7], v53 = v42[8], v54 = *((void *)v41 + 7), v55 = *((void *)v41 + 8), v52 == v54)
        && v53 == v55
        || (uint64_t v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v54, v55, 0LL) & 1) != 0))
      {
        if ((v56 = v42[9], uint64_t v57 = v42[10], v58 = *((void *)v41 + 9), v59 = *((void *)v41 + 10), v56 == v58)
          && v57 == v59
          || (uint64_t v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, v58, v59, 0LL) & 1) != 0))
        {
          if ((uint64_t v60 = v42[11], v61 = v42[12], v62 = *((void *)v41 + 11), v63 = *((void *)v41 + 12), v60 == v62)
            && v61 == v63
            || (uint64_t v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, v62, v63, 0LL) & 1) != 0))
          {
            if ((uint64_t v64 = v42[13], v65 = v42[14], v66 = *((void *)v41 + 13), v67 = *((void *)v41 + 14), v64 == v66)
              && v65 == v67
              || (uint64_t v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, v66, v67, 0LL) & 1) != 0))
            {
              if ((uint64_t v68 = v42[15], v69 = v42[16], v70 = *((void *)v41 + 15), v71 = *((void *)v41 + 16), v68 == v70)
                && v69 == v71
                || (uint64_t v47 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, v70, v71, 0LL) & 1) != 0))
              {
                if (v42[17] == *((void *)v41 + 17))
                {
                  uint64_t v72 = (char *)v42 + *(int *)(v33 + 60);
                  uint64_t v74 = v84;
                  int v73 = v85;
                  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
                  char v76 = v82;
                  v75(v82, v72, v85);
                  uint64_t v77 = v83;
                  v75(v83, &v41[*(int *)(v33 + 60)], v73);
                  uint64_t v78 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                  uint64_t v47 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v77, v73, v78);
                  unsigned int v79 = *(void (**)(char *, uint64_t))(v74 + 8);
                  v79(v77, v73);
                  v79(v76, v73);
                  return v47 & 1;
                }

    uint64_t v59 = (uint64_t)v22;
LABEL_21:
    sub_100041590(v59, &qword_100256408);
    goto LABEL_22;
  }

  sub_10000FC68((uint64_t)v22, (uint64_t)v45, &qword_1002517E0);
  if (v58(v57, 1LL, v9) == 1)
  {
    sub_100041590((uint64_t)v49, &qword_1002517E0);
    sub_100041590((uint64_t)v52, &qword_1002517E0);
    (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v45, v9);
    goto LABEL_6;
  }

  uint64_t v60 = v120;
  char v61 = v116;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v120 + 32))(v116, v57, v9);
  uint64_t v62 = sub_1000077B8( &qword_100251630,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
  uint64_t v63 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v61, v9, v62);
  uint64_t v64 = *(void (**)(_BYTE *, uint64_t))(v60 + 8);
  v64(v61, v56);
  sub_100041590((uint64_t)v49, &qword_1002517E0);
  sub_100041590((uint64_t)v52, &qword_1002517E0);
  v64(v45, v56);
  sub_100041590((uint64_t)v22, &qword_1002517E0);
  if ((v63 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_8:
  uint64_t v66 = v117;
  uint64_t v65 = v118;
  uint64_t v67 = v115;
  sub_10000FC68(v115 + *(int *)(v118 + 24), (uint64_t)v117, &qword_1002517E0);
  uint64_t v68 = v121;
  int v69 = v119;
  sub_10000FC68(v121 + *(int *)(v65 + 24), (uint64_t)v119, &qword_1002517E0);
  uint64_t v70 = v113;
  uint64_t v71 = v114;
  uint64_t v72 = (uint64_t)&v113[*(int *)(v114 + 48)];
  sub_10000FC68((uint64_t)v66, (uint64_t)v113, &qword_1002517E0);
  sub_10000FC68((uint64_t)v69, v72, &qword_1002517E0);
  if (v58((uint64_t)v70, 1LL, v56) == 1)
  {
    sub_100041590((uint64_t)v69, &qword_1002517E0);
    sub_100041590((uint64_t)v66, &qword_1002517E0);
    if (v58(v72, 1LL, v56) != 1)
    {
LABEL_20:
      uint64_t v59 = (uint64_t)v70;
      goto LABEL_21;
    }

    sub_100041590((uint64_t)v70, &qword_1002517E0);
LABEL_14:
    uint64_t v83 = v118;
    uint64_t v66 = v109;
    sub_10000FC68(v67 + *(int *)(v118 + 28), (uint64_t)v109, &qword_1002517E0);
    uint64_t v84 = v112;
    sub_10000FC68(v68 + *(int *)(v83 + 28), (uint64_t)v112, &qword_1002517E0);
    uint64_t v70 = v110;
    uint64_t v85 = (uint64_t)&v110[*(int *)(v71 + 48)];
    sub_10000FC68((uint64_t)v66, (uint64_t)v110, &qword_1002517E0);
    sub_10000FC68((uint64_t)v84, v85, &qword_1002517E0);
    if (v58((uint64_t)v70, 1LL, v56) == 1)
    {
      sub_100041590((uint64_t)v84, &qword_1002517E0);
      sub_100041590((uint64_t)v66, &qword_1002517E0);
      if (v58(v85, 1LL, v56) == 1)
      {
        sub_100041590((uint64_t)v70, &qword_1002517E0);
LABEL_25:
        uint64_t v96 = v106;
        uint64_t v95 = v107;
        uint64_t v97 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v106 + 16);
        uint64_t v98 = v104;
        v97(v104, v67, v107);
        uint64_t v99 = v105;
        v97(v105, v68, v95);
        uint64_t v100 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v86 = dispatch thunk of static Equatable.== infix(_:_:)(v98, v99, v95, v100);
        uint64_t v101 = *(void (**)(_BYTE *, uint64_t))(v96 + 8);
        v101(v99, v95);
        v101(v98, v95);
        return v86 & 1;
      }

      goto LABEL_20;
    }

    int v73 = v108;
    sub_10000FC68((uint64_t)v70, (uint64_t)v108, &qword_1002517E0);
    if (v58(v85, 1LL, v56) == 1)
    {
      uint64_t v74 = v112;
      goto LABEL_19;
    }

    uint64_t v88 = v120;
    uint64_t v89 = (uint64_t)v66;
    uint64_t v90 = v116;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v120 + 32))(v116, v85, v56);
    os_log_type_t v91 = sub_1000077B8( &qword_100251630,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
    uint64_t v92 = dispatch thunk of static Equatable.== infix(_:_:)(v73, v90, v56, v91);
    uint64_t v93 = v73;
    uint64_t v94 = *(void (**)(_BYTE *, uint64_t))(v88 + 8);
    v94(v90, v56);
    sub_100041590((uint64_t)v112, &qword_1002517E0);
    sub_100041590(v89, &qword_1002517E0);
    v94(v93, v56);
    sub_100041590((uint64_t)v70, &qword_1002517E0);
    if ((v92 & 1) != 0) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }

  int v73 = v111;
  sub_10000FC68((uint64_t)v70, (uint64_t)v111, &qword_1002517E0);
  if (v58(v72, 1LL, v56) == 1)
  {
    uint64_t v74 = v119;
LABEL_19:
    sub_100041590((uint64_t)v74, &qword_1002517E0);
    sub_100041590((uint64_t)v66, &qword_1002517E0);
    (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v73, v56);
    goto LABEL_20;
  }

  uint64_t v75 = v120;
  char v76 = v116;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v120 + 32))(v116, v72, v56);
  uint64_t v77 = sub_1000077B8( &qword_100251630,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
  uint64_t v103 = dispatch thunk of static Equatable.== infix(_:_:)(v73, v76, v56, v77);
  uint64_t v78 = v68;
  unsigned int v79 = v67;
  uint64_t v80 = v73;
  char v81 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
  v81(v76, v56);
  sub_100041590((uint64_t)v119, &qword_1002517E0);
  sub_100041590((uint64_t)v117, &qword_1002517E0);
  uint64_t v82 = v80;
  uint64_t v67 = v79;
  uint64_t v68 = v78;
  v81(v82, v56);
  sub_100041590((uint64_t)v70, &qword_1002517E0);
  if ((v103 & 1) != 0) {
    goto LABEL_14;
  }
LABEL_22:
  char v86 = 0;
  return v86 & 1;
}

    uint64_t v9 = *(void **)&a2[OBJC_IVAR____TtC18TrustedPeersHelper9Container_moc];
    uint64_t v30 = swift_allocObject(&unk_100238960, 48LL, 7LL);
    *(void *)(v30 + 16) = a2;
    *(void *)(v30 + 24) = isEscapingClosureAtFileLocation;
    *(void *)(v30 + 32) = a4;
    *(void *)(v30 + 40) = a5;
    uint64_t v31 = (_TtC18TrustedPeersHelper6Client *)swift_allocObject(&unk_100238988, 32LL, 7LL);
    *(void *)v31->endpoint = sub_100176C00;
    *(void *)v31->containerMap = v30;
    aBlock[4] = (uint64_t)sub_100176BD4;
    uint64_t v67 = v31;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000DC9F8;
    aBlock[3] = (uint64_t)&unk_1002389A0;
    uint64_t v32 = _Block_copy(aBlock);
    uint64_t v33 = v67;
    swift_bridgeObjectRetain(a5);
    swift_retain(v31);
    uint64_t v34 = a2;
    swift_retain(a4);
    swift_release(v33, v35, v36, v37, v38, v39, v40, v41, v56, v59, v62, v65);
    [v9 performBlockAndWait:v32];
    _Block_release(v32);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v31, "", 108LL, 6054LL, 41LL, 1LL);
    swift_release((_TtC18TrustedPeersHelper6Client *)v30, v42, v43, v44, v45, v46, v47, v48, v57, v60, v63, v65);
    swift_release(v31, v49, v50, v51, v52, v53, v54, v55, v58, v61, v64, v65);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_8:
    swift_once(&qword_100250EB8, sub_1000DD078);
  }
}

  deviceColor = self->_deviceColor;
  if (deviceColor) {
    [v3 setObject:deviceColor forKey:@"device_color"];
  }
  deviceEnclosureColor = self->_deviceEnclosureColor;
  if (deviceEnclosureColor) {
    [v3 setObject:deviceEnclosureColor forKey:@"device_enclosure_color"];
  }
  deviceMid = self->_deviceMid;
  if (deviceMid) {
    [v3 setObject:deviceMid forKey:@"device_mid"];
  }
  deviceModel = self->_deviceModel;
  if (deviceModel) {
    [v3 setObject:deviceModel forKey:@"device_model"];
  }
  deviceModelClass = self->_deviceModelClass;
  if (deviceModelClass) {
    [v3 setObject:deviceModelClass forKey:@"device_model_class"];
  }
  deviceModelVersion = self->_deviceModelVersion;
  if (deviceModelVersion) {
    [v3 setObject:deviceModelVersion forKey:@"device_model_version"];
  }
  deviceName = self->_deviceName;
  if (deviceName) {
    [v3 setObject:deviceName forKey:@"device_name"];
  }
  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_devicePlatform));
    [v3 setObject:v13 forKey:@"device_platform"];
  }

  return v3;
}

  uint64_t v6 = v4;
  if (self->_deviceColor)
  {
    objc_msgSend(v4, "setDeviceColor:");
    uint64_t v4 = v6;
  }

  if (self->_deviceEnclosureColor)
  {
    objc_msgSend(v6, "setDeviceEnclosureColor:");
    uint64_t v4 = v6;
  }

  if (self->_deviceMid)
  {
    objc_msgSend(v6, "setDeviceMid:");
    uint64_t v4 = v6;
  }

  if (self->_deviceModel)
  {
    objc_msgSend(v6, "setDeviceModel:");
    uint64_t v4 = v6;
  }

  if (self->_deviceModelClass)
  {
    objc_msgSend(v6, "setDeviceModelClass:");
    uint64_t v4 = v6;
  }

  if (self->_deviceModelVersion)
  {
    objc_msgSend(v6, "setDeviceModelVersion:");
    uint64_t v4 = v6;
  }

  if (self->_deviceName)
  {
    objc_msgSend(v6, "setDeviceName:");
    uint64_t v4 = v6;
  }

  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    v4[1] = self->_devicePlatform;
    *((_BYTE *)v4 + 104) |= 1u;
  }
}

  uint64_t v8 = -[NSString copyWithZone:](self->_deviceColor, "copyWithZone:", a3);
  uint64_t v9 = (void *)v6[6];
  v6[6] = v8;

  uint64_t v10 = -[NSString copyWithZone:](self->_deviceEnclosureColor, "copyWithZone:", a3);
  uint64_t v11 = (void *)v6[7];
  v6[7] = v10;

  uint64_t v12 = -[NSString copyWithZone:](self->_deviceMid, "copyWithZone:", a3);
  uint64_t v13 = (void *)v6[8];
  v6[8] = v12;

  uint64_t v14 = -[NSString copyWithZone:](self->_deviceModel, "copyWithZone:", a3);
  uint64_t v15 = (void *)v6[9];
  void v6[9] = v14;

  uint64_t v16 = -[NSString copyWithZone:](self->_deviceModelClass, "copyWithZone:", a3);
  uint64_t v17 = (void *)v6[10];
  v6[10] = v16;

  uint64_t v18 = -[NSString copyWithZone:](self->_deviceModelVersion, "copyWithZone:", a3);
  uint64_t v19 = (void *)v6[11];
  v6[11] = v18;

  uint64_t v20 = -[NSString copyWithZone:](self->_deviceName, "copyWithZone:", a3);
  uint64_t v21 = (void *)v6[12];
  v6[12] = v20;

  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    v6[1] = self->_devicePlatform;
    *((_BYTE *)v6 + 104) |= 1u;
  }

  return v6;
}

  uint64_t v6 = v4;
  if (*((void *)v4 + 6))
  {
    -[OTEscrowRecordMetadataClientMetadata setDeviceColor:](self, "setDeviceColor:");
    uint64_t v4 = v6;
  }

  if (*((void *)v4 + 7))
  {
    -[OTEscrowRecordMetadataClientMetadata setDeviceEnclosureColor:](self, "setDeviceEnclosureColor:");
    uint64_t v4 = v6;
  }

  if (*((void *)v4 + 8))
  {
    -[OTEscrowRecordMetadataClientMetadata setDeviceMid:](self, "setDeviceMid:");
    uint64_t v4 = v6;
  }

  if (*((void *)v4 + 9))
  {
    -[OTEscrowRecordMetadataClientMetadata setDeviceModel:](self, "setDeviceModel:");
    uint64_t v4 = v6;
  }

  if (*((void *)v4 + 10))
  {
    -[OTEscrowRecordMetadataClientMetadata setDeviceModelClass:](self, "setDeviceModelClass:");
    uint64_t v4 = v6;
  }

  if (*((void *)v4 + 11))
  {
    -[OTEscrowRecordMetadataClientMetadata setDeviceModelVersion:](self, "setDeviceModelVersion:");
    uint64_t v4 = v6;
  }

  if (*((void *)v4 + 12))
  {
    -[OTEscrowRecordMetadataClientMetadata setDeviceName:](self, "setDeviceName:");
    uint64_t v4 = v6;
  }

  if ((*((_BYTE *)v4 + 104) & 1) != 0)
  {
    self->_devicePlatform = *((void *)v4 + 1);
    *(_BYTE *)&self->_has |= 1u;
  }
}

Swift::Int EstablishRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for EstablishRequest,  &qword_1002521C0,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
}

uint64_t sub_100088DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0D0C(a1, &qword_100250D20, &qword_100251EB8, (uint64_t)sub_100086FB8, a2);
}

uint64_t sub_100088DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EstablishRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100088DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EstablishRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100088DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256318,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100088E3C(uint64_t a1)
{
  return sub_1000B52B8( v1,  a1,  type metadata accessor for EstablishRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_100088030) & 1;
}

uint64_t sub_100088E6C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250D18, (uint64_t)static EstablishRequest._protobuf_nameMap, (uint64_t)sub_100086D38, a1);
}

uint64_t sub_100088E88(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002526A8,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100088EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002526A8,  type metadata accessor for EstablishRequest,  (uint64_t)&protocol conformance descriptor for EstablishRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *EstablishResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static EstablishResponse.protoMessageName;
}

unint64_t static EstablishResponse.protoMessageName.getter()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100088F40()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static EstablishResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static EstablishResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "changes";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "zone_key_hierarchy_records";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t EstablishResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250D28, (uint64_t)static EstablishResponse._protobuf_nameMap, (uint64_t)sub_100088F40);
}

uint64_t static EstablishResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D28,  (uint64_t)static EstablishResponse._protobuf_nameMap,  (uint64_t)sub_100088F40,  a1);
}

uint64_t EstablishResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008BF60(a1, a2, a3, type metadata accessor for EstablishResponse);
}

uint64_t EstablishResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100093548( a1,  a2,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_100089110,  (void (*)(void))type metadata accessor for EstablishResponse);
}

uint64_t sub_100089110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for EstablishResponse(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t *)&unk_100256C90);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Changes);
  uint64_t v17 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Changes);
}

Swift::Int EstablishResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for EstablishResponse,  &qword_1002521D0,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
}

uint64_t sub_1000892A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EstablishResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000892B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EstablishResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000892CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256310,  type metadata accessor for EstablishResponse,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008931C(uint64_t *a1)
{
  return sub_1000AF178(v1, a1, (uint64_t *)type metadata accessor for EstablishResponse) & 1;
}

uint64_t sub_100089344@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D28,  (uint64_t)static EstablishResponse._protobuf_nameMap,  (uint64_t)sub_100088F40,  a1);
}

uint64_t sub_100089360(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002526C0,  type metadata accessor for EstablishResponse,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000893A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002526C0,  type metadata accessor for EstablishResponse,  (uint64_t)&protocol conformance descriptor for EstablishResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *JoinWithVoucherRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static JoinWithVoucherRequest.protoMessageName;
}

unint64_t static JoinWithVoucherRequest.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_100089418()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static JoinWithVoucherRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static JoinWithVoucherRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1001DE700;
  uint64_t v7 = v26 + v6;
  uint64_t v8 = v26 + v6 + *(int *)(v2 + 48);
  *(void *)(v26 + v6) = 1LL;
  *(void *)uint64_t v8 = "change_token";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "peer";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "bottle";
  *((void *)v14 + 1) = 6LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)uint64_t v16 = "tlk_shares";
  *((void *)v16 + 1) = 10LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "view_keys";
  *((void *)v18 + 1) = 9LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "trusted_devices_version";
  *((void *)v20 + 1) = 23LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "metrics";
  *((void *)v22 + 1) = 7LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "accountInfo";
  *((void *)v24 + 1) = 11LL;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t JoinWithVoucherRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D30,  (uint64_t)static JoinWithVoucherRequest._protobuf_nameMap,  (uint64_t)sub_100089418);
}

uint64_t static JoinWithVoucherRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D30,  (uint64_t)static JoinWithVoucherRequest._protobuf_nameMap,  (uint64_t)sub_100089418,  a1);
}

uint64_t sub_100089700()
{
  uint64_t v0 = type metadata accessor for JoinWithVoucherRequest._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0xE000000000000000LL;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  uint64_t v3 = type metadata accessor for Peer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  uint64_t v5 = type metadata accessor for Bottle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares) = _swiftEmptyArrayStorage;
  *(void *)(v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys) = _swiftEmptyArrayStorage;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
  uint64_t v7 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v9 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
  qword_100251EC0 = v1;
  return result;
}

uint64_t sub_100089850(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v4, v5);
  uint64_t v64 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v7, v8);
  uint64_t v63 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v10, v11);
  uint64_t v62 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v13, v14);
  uint64_t v58 = (uint64_t)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v16, v17);
  uint64_t v56 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = 0LL;
  uint64_t v19 = (void *)(v1 + 16);
  *(void *)(v2 + 24) = 0xE000000000000000LL;
  uint64_t v20 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  uint64_t v21 = type metadata accessor for Peer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  uint64_t v22 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  uint64_t v57 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  uint64_t v23 = type metadata accessor for Bottle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  uint64_t v24 = (uint64_t *)(v2
                  + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  *(void *)(v2
            + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares) = _swiftEmptyArrayStorage;
  uint64_t v25 = (uint64_t *)(v2
                  + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  *(void *)(v2
            + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys) = _swiftEmptyArrayStorage;
  uint64_t v26 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
  uint64_t v59 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
  uint64_t v27 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 1LL, 1LL, v27);
  uint64_t v28 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v60 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v29 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v28, 1LL, 1LL, v29);
  uint64_t v30 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v61 = v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v31 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v30, 1LL, 1LL, v31);
  swift_beginAccess(a1 + 16, v76, 0LL, 0LL);
  uint64_t v33 = *(void *)(a1 + 16);
  uint64_t v32 = *(void *)(a1 + 24);
  swift_beginAccess(v19, v75, 1LL, 0LL);
  uint64_t v34 = *(void *)(v2 + 24);
  *uint64_t v19 = v33;
  *(void *)(v2 + 24) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v74,  0LL,  0LL);
  uint64_t v36 = v56;
  sub_10000FC68(v35, v56, &qword_100251F58);
  swift_beginAccess(v20, v73, 33LL, 0LL);
  sub_1000B66E0(v36, v20, &qword_100251F58);
  swift_endAccess(v73);
  uint64_t v37 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v73,  0LL,  0LL);
  uint64_t v38 = v58;
  sub_10000FC68(v37, v58, &qword_100251F38);
  uint64_t v39 = v57;
  swift_beginAccess(v57, v72, 33LL, 0LL);
  sub_1000B66E0(v38, v39, &qword_100251F38);
  swift_endAccess(v72);
  uint64_t v40 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  v72,  0LL,  0LL);
  uint64_t v41 = *v40;
  swift_beginAccess(v24, &v71, 1LL, 0LL);
  uint64_t v42 = *v24;
  *uint64_t v24 = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  &v70,  0LL,  0LL);
  uint64_t v44 = *v43;
  swift_beginAccess(v25, &v69, 1LL, 0LL);
  uint64_t v45 = *v25;
  uint64_t *v25 = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion,  &v68,  0LL,  0LL);
  uint64_t v47 = v62;
  sub_10000FC68(v46, v62, &qword_100256D20);
  uint64_t v48 = v59;
  swift_beginAccess(v59, v67, 33LL, 0LL);
  sub_1000B66E0(v47, v48, &qword_100256D20);
  swift_endAccess(v67);
  uint64_t v49 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v67,  0LL,  0LL);
  uint64_t v50 = v63;
  sub_10000FC68(v49, v63, &qword_100257000);
  uint64_t v51 = v60;
  swift_beginAccess(v60, v66, 33LL, 0LL);
  sub_1000B66E0(v50, v51, &qword_100257000);
  swift_endAccess(v66);
  uint64_t v52 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v66,  0LL,  0LL);
  uint64_t v53 = v64;
  sub_10000FC68(v52, v64, &qword_100251F50);
  swift_release(a1);
  uint64_t v54 = v61;
  swift_beginAccess(v61, v65, 33LL, 0LL);
  sub_1000B66E0(v53, v54, &qword_100251F50);
  swift_endAccess(v65);
  return v2;
}

uint64_t sub_100089E08()
{
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares));
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys));
  sub_100041590( (uint64_t)v0 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion,  &qword_100256D20);
  sub_100041590( (uint64_t)v0 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &qword_100257000);
  sub_100041590( (uint64_t)v0 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &qword_100251F50);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t JoinWithVoucherRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100083EF8( a1,  a2,  a3,  type metadata accessor for JoinWithVoucherRequest,  type metadata accessor for JoinWithVoucherRequest._StorageClass,  sub_100089850,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100089EFC);
}

uint64_t sub_100089EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_10009F514( a2,  a1,  a3,  a4,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:));
          break;
        case 2LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
          uint64_t v16 = type metadata accessor for Peer;
          uint64_t v17 = (unint64_t *)&unk_100256E10;
          uint64_t v18 = &protocol conformance descriptor for Peer;
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
          uint64_t v16 = type metadata accessor for Bottle;
          uint64_t v17 = (unint64_t *)&unk_100256EA0;
          uint64_t v18 = &protocol conformance descriptor for Bottle;
          goto LABEL_5;
        case 4LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares;
          uint64_t v24 = type metadata accessor for TLKShare;
          uint64_t v25 = &qword_100256D60;
          uint64_t v26 = &protocol conformance descriptor for TLKShare;
          goto LABEL_13;
        case 5LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys;
          uint64_t v24 = type metadata accessor for ViewKeys;
          uint64_t v25 = &qword_1002521E8;
          uint64_t v26 = &protocol conformance descriptor for ViewKeys;
LABEL_13:
          sub_1000914DC(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26);
          break;
        case 6LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
          uint64_t v16 = type metadata accessor for IdmsTrustedDevicesVersion;
          uint64_t v17 = &qword_100252588;
          uint64_t v18 = &protocol conformance descriptor for IdmsTrustedDevicesVersion;
          goto LABEL_5;
        case 7LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
          uint64_t v16 = type metadata accessor for Metrics;
          uint64_t v17 = (unint64_t *)&unk_100256FE0;
          uint64_t v18 = &protocol conformance descriptor for Metrics;
          goto LABEL_5;
        case 8LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
          uint64_t v16 = type metadata accessor for AccountInfo;
          uint64_t v17 = (unint64_t *)&unk_100256CE0;
          uint64_t v18 = &protocol conformance descriptor for AccountInfo;
LABEL_5:
          sub_10009F698(v11, v12, v13, v14, v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
    }
  }

  return result;
}

uint64_t JoinWithVoucherRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100084134( a1,  a2,  a3,  type metadata accessor for JoinWithVoucherRequest,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10008A160);
}

uint64_t sub_10008A160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_beginAccess(a1 + 16, v26, 0LL, 0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12
    || (swift_bridgeObjectRetain(*(void *)(a1 + 24)),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v10, v11),
        uint64_t result = swift_bridgeObjectRelease(v11),
        !v5))
  {
    uint64_t result = sub_10008A3C8(a1, a2, a3, a4);
    if (!v5)
    {
      sub_10008A554(a1, a2, a3, a4);
      uint64_t v14 = (uint64_t *)(a1
                      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  v25,  0LL,  0LL);
      uint64_t v15 = *v14;
      if (*(void *)(v15 + 16))
      {
        uint64_t v16 = type metadata accessor for TLKShare(0LL);
        uint64_t v17 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
        uint64_t v18 = swift_bridgeObjectRetain(v15);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v18, 4LL, v16, v17, a3, a4);
        swift_bridgeObjectRelease(v15);
      }

      uint64_t v19 = (uint64_t *)(a1
                      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  v24,  0LL,  0LL);
      uint64_t v20 = *v19;
      if (*(void *)(v20 + 16))
      {
        uint64_t v21 = type metadata accessor for ViewKeys(0LL);
        uint64_t v22 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
        uint64_t v23 = swift_bridgeObjectRetain(v20);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v23, 5LL, v21, v22, a3, a4);
        swift_bridgeObjectRelease(v20);
      }

      sub_10008A6E0(a1, a2, a3, a4);
      sub_10008A86C(a1, a2, a3, a4);
      return sub_10008A9F8(a1, a2, a3, a4);
    }
  }

  return result;
}

uint64_t sub_10008A3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Peer(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F58);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Peer);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Peer);
}

uint64_t sub_10008A554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F38);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Bottle(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F38);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Bottle);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256EA0,  type metadata accessor for Bottle,  (uint64_t)&protocol conformance descriptor for Bottle);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Bottle);
}

uint64_t sub_10008A6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100256D20);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for IdmsTrustedDevicesVersion);
  uint64_t v17 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for IdmsTrustedDevicesVersion);
}

uint64_t sub_10008A86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 7LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_10008A9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 8LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

BOOL sub_10008AB84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountInfo(0LL);
  uint64_t v170 = *(void *)(v4 - 8);
  uint64_t v171 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v166 = (_DWORD *)((char *)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v169 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v169, v7);
  uint64_t v9 = (char *)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100007578(&qword_100251F50);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  id v167 = (_DWORD *)((char *)&v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v12, v14);
  uint64_t v182 = (uint64_t)&v164 - v15;
  uint64_t v177 = type metadata accessor for Metrics(0LL);
  uint64_t v175 = *(void *)(v177 - 8);
  __chkstk_darwin(v177, v16);
  uint64_t v168 = (uint64_t *)((char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v174 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v174, v18);
  uint64_t v176 = (uint64_t)&v164 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100007578(&qword_100257000);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  id v172 = (uint64_t *)((char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v22, v24);
  uint64_t v191 = (uint64_t)&v164 - v25;
  uint64_t v26 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v179 = *(void *)(v26 - 8);
  uint64_t v180 = v26;
  __chkstk_darwin(v26, v27);
  uint64_t v173 = (char *)&v164 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v178 = sub_100007578(&qword_100256490);
  __chkstk_darwin(v178, v29);
  uint64_t v181 = (uint64_t)&v164 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100007578(&qword_100256D20);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  unint64_t v190 = (char *)&v164 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33, v35);
  uint64_t v183 = (uint64_t)&v164 - v36;
  uint64_t v37 = type metadata accessor for Bottle(0LL);
  uint64_t v187 = *(void *)(v37 - 8);
  uint64_t v188 = v37;
  __chkstk_darwin(v37, v38);
  unint64_t v184 = (char *)&v164 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v186 = sub_100007578(&qword_100256488);
  __chkstk_darwin(v186, v40);
  uint64_t v189 = (uint64_t)&v164 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_100007578(&qword_100251F38);
  uint64_t v44 = __chkstk_darwin(v42, v43);
  os_log_type_t v194 = (uint64_t *)((char *)&v164 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v44, v46);
  uint64_t v193 = (uint64_t)&v164 - v47;
  uint64_t v48 = type metadata accessor for Peer(0LL);
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v50);
  uint64_t v185 = (uint64_t *)((char *)&v164 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v52 = sub_100007578(&qword_100256458);
  __chkstk_darwin(v52, v53);
  uint64_t v55 = (char *)&v164 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = sub_100007578(&qword_100251F58);
  uint64_t v58 = __chkstk_darwin(v56, v57);
  uint64_t v192 = (uint64_t *)((char *)&v164 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v58, v60);
  uint64_t v62 = (char *)&v164 - v61;
  swift_beginAccess(a1 + 16, v212, 0LL, 0LL);
  uint64_t v196 = a1;
  uint64_t v63 = *(void *)(a1 + 16);
  uint64_t v64 = *(void *)(a1 + 24);
  swift_beginAccess(a2 + 16, v211, 0LL, 0LL);
  uint64_t v65 = *(void *)(a2 + 16);
  uint64_t v66 = *(void *)(a2 + 24);
  if (v63 == v65 && v64 == v66
    || (v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v65, v66, 0LL), BOOL result = 0LL, (v67 & 1) != 0))
  {
    uint64_t v165 = v9;
    uint64_t v195 = a2;
    uint64_t v69 = v196;
    uint64_t v70 = v196
        + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
    swift_beginAccess( v196 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v210,  0LL,  0LL);
    sub_10000FC68(v70, (uint64_t)v62, &qword_100251F58);
    uint64_t v71 = v195;
    uint64_t v72 = v195
        + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
    swift_beginAccess( v195 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v209,  0LL,  0LL);
    uint64_t v73 = (uint64_t)&v55[*(int *)(v52 + 48)];
    sub_10000FC68((uint64_t)v62, (uint64_t)v55, &qword_100251F58);
    sub_10000FC68(v72, v73, &qword_100251F58);
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    if (v74((uint64_t)v55, 1LL, v48) == 1)
    {
      swift_retain(v69);
      swift_retain(v71);
      sub_100041590((uint64_t)v62, &qword_100251F58);
      int v75 = v74(v73, 1LL, v48);
      char v76 = v194;
      if (v75 == 1)
      {
        sub_100041590((uint64_t)v55, &qword_100251F58);
        uint64_t v77 = v71;
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v78 = v192;
      sub_10000FC68((uint64_t)v55, (uint64_t)v192, &qword_100251F58);
      int v79 = v74(v73, 1LL, v48);
      char v76 = v194;
      if (v79 != 1)
      {
        uint64_t v81 = v73;
        uint64_t v82 = v185;
        sub_100041608(v81, (uint64_t)v185, type metadata accessor for Peer);
        uint64_t v69 = v196;
        swift_retain(v196);
        swift_retain(v71);
        char v83 = _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(v78, v82);
        sub_1000415CC((uint64_t)v82, type metadata accessor for Peer);
        uint64_t v77 = v71;
        sub_100041590((uint64_t)v62, &qword_100251F58);
        sub_1000415CC((uint64_t)v78, type metadata accessor for Peer);
        sub_100041590((uint64_t)v55, &qword_100251F58);
        if ((v83 & 1) == 0) {
          goto LABEL_25;
        }
LABEL_11:
        uint64_t v84 = v69
            + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
        swift_beginAccess( v69 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v208,  0LL,  0LL);
        uint64_t v85 = v193;
        sub_10000FC68(v84, v193, &qword_100251F38);
        uint64_t v86 = v77
            + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle;
        swift_beginAccess( v77 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__bottle,  v207,  0LL,  0LL);
        uint64_t v87 = v189;
        uint64_t v88 = v189 + *(int *)(v186 + 48);
        sub_10000FC68(v85, v189, &qword_100251F38);
        sub_10000FC68(v86, v88, &qword_100251F38);
        uint64_t v89 = v188;
        uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48);
        if (v90(v87, 1LL, v188) == 1)
        {
          sub_100041590(v85, &qword_100251F38);
          int v91 = v90(v88, 1LL, v89);
          uint64_t v92 = (uint64_t)v190;
          uint64_t v93 = v191;
          if (v91 == 1)
          {
            sub_100041590(v87, &qword_100251F38);
            goto LABEL_20;
          }
        }

        else
        {
          sub_10000FC68(v87, (uint64_t)v76, &qword_100251F38);
          int v94 = v90(v88, 1LL, v89);
          uint64_t v92 = (uint64_t)v190;
          uint64_t v93 = v191;
          if (v94 != 1)
          {
            uint64_t v97 = v184;
            sub_100041608(v88, (uint64_t)v184, type metadata accessor for Bottle);
            char v98 = _s18TrustedPeersHelper6BottleV2eeoiySbAC_ACtFZ_0(v76, v97);
            sub_1000415CC((uint64_t)v97, type metadata accessor for Bottle);
            sub_100041590(v193, &qword_100251F38);
            sub_1000415CC((uint64_t)v76, type metadata accessor for Bottle);
            sub_100041590(v87, &qword_100251F38);
            if ((v98 & 1) == 0) {
              goto LABEL_18;
            }
LABEL_20:
            uint64_t v99 = (uint64_t *)(v69
                            + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
            swift_beginAccess( v69 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  v206,  0LL,  0LL);
            uint64_t v100 = *v99;
            uint64_t v77 = v195;
            uint64_t v101 = (uint64_t *)(v195
                             + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
            swift_beginAccess( v195 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  &v205,  0LL,  0LL);
            uint64_t v102 = *v101;
            swift_bridgeObjectRetain(v100);
            swift_bridgeObjectRetain(v102);
            char v103 = sub_10003F630(v100, v102);
            swift_bridgeObjectRelease(v100);
            swift_bridgeObjectRelease(v102);
            if ((v103 & 1) != 0)
            {
              uint64_t v104 = (uint64_t *)(v69
                               + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
              swift_beginAccess( v69 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  &v204,  0LL,  0LL);
              uint64_t v105 = *v104;
              uint64_t v106 = (uint64_t *)(v77
                               + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
              swift_beginAccess( v77 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  &v203,  0LL,  0LL);
              uint64_t v107 = *v106;
              swift_bridgeObjectRetain(v105);
              swift_bridgeObjectRetain(v107);
              char v108 = sub_10003F644(v105, v107);
              swift_bridgeObjectRelease(v105);
              swift_bridgeObjectRelease(v107);
              if ((v108 & 1) != 0)
              {
                uint64_t v109 = v69
                     + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
                swift_beginAccess( v69 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion,  &v202,  0LL,  0LL);
                uint64_t v110 = v183;
                sub_10000FC68(v109, v183, &qword_100256D20);
                uint64_t v111 = v77
                     + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion;
                swift_beginAccess( v77 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedDevicesVersion,  &v201,  0LL,  0LL);
                uint64_t v112 = v181;
                uint64_t v113 = v181 + *(int *)(v178 + 48);
                sub_10000FC68(v110, v181, &qword_100256D20);
                uint64_t v114 = v111;
                uint64_t v115 = v112;
                sub_10000FC68(v114, v113, &qword_100256D20);
                uint64_t v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48);
                uint64_t v117 = v112;
                uint64_t v118 = v180;
                if (v116(v117, 1LL, v180) == 1)
                {
                  sub_100041590(v110, &qword_100256D20);
                  int v119 = v116(v113, 1LL, v118);
                  uint64_t v120 = v182;
                  if (v119 == 1)
                  {
                    sub_100041590(v115, &qword_100256D20);
LABEL_33:
                    uint64_t v125 = v69
                         + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
                    swift_beginAccess( v69 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &v200,  0LL,  0LL);
                    sub_10000FC68(v125, v93, &qword_100257000);
                    uint64_t v126 = v195
                         + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
                    swift_beginAccess( v195 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &v199,  0LL,  0LL);
                    uint64_t v127 = v176;
                    uint64_t v128 = v176 + *(int *)(v174 + 48);
                    sub_10000FC68(v93, v176, &qword_100257000);
                    uint64_t v129 = v126;
                    uint64_t v115 = v127;
                    sub_10000FC68(v129, v128, &qword_100257000);
                    unint64_t v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v175 + 48);
                    uint64_t v131 = v127;
                    uint64_t v132 = v177;
                    if (v130(v131, 1LL, v177) == 1)
                    {
                      sub_100041590(v93, &qword_100257000);
                      if (v130(v128, 1LL, v132) == 1)
                      {
                        sub_100041590(v115, &qword_100257000);
                        goto LABEL_47;
                      }
                    }

                    else
                    {
                      uint64_t v133 = v172;
                      sub_10000FC68(v115, (uint64_t)v172, &qword_100257000);
                      if (v130(v128, 1LL, v132) != 1)
                      {
                        uint64_t v134 = v168;
                        sub_100041608(v128, (uint64_t)v168, type metadata accessor for Metrics);
                        uint64_t v135 = v133[1];
                        uint64_t v136 = v134[1];
                        if (*v133 == *v134 && v135 == v136
                          || (_stringCompareWithSmolCheck(_:_:expecting:)(*v133, v135, *v134, v136, 0LL) & 1) != 0)
                        {
                          if ((uint64_t v137 = v133[2], v138 = v133[3], v139 = v134[2], v140 = v134[3], v137 == v139)
                            && v138 == v140
                            || (_stringCompareWithSmolCheck(_:_:expecting:)(v137, v138, v139, v140, 0LL) & 1) != 0)
                          {
                            uint64_t v141 = *(int *)(v177 + 24);
                            id v142 = (char *)v133 + v141;
                            unint64_t v143 = (char *)v134 + v141;
                            uint64_t v144 = v115;
                            uint64_t v145 = type metadata accessor for UnknownStorage(0LL);
                            uint64_t v146 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                            LOBYTE(v142) = dispatch thunk of static Equatable.== infix(_:_:)(v142, v143, v145, v146);
                            sub_1000415CC((uint64_t)v134, type metadata accessor for Metrics);
                            sub_100041590(v191, &qword_100257000);
                            sub_1000415CC((uint64_t)v133, type metadata accessor for Metrics);
                            sub_100041590(v144, &qword_100257000);
                            if ((v142 & 1) != 0)
                            {
LABEL_47:
                              uint64_t v147 = v69
                                   + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
                              swift_beginAccess( v69 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &v198,  0LL,  0LL);
                              sub_10000FC68(v147, v120, &qword_100251F50);
                              uint64_t v148 = v120;
                              uint64_t v149 = v195;
                              uint64_t v150 = v195
                                   + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
                              swift_beginAccess( v195 + OBJC_IVAR____TtCV18TrustedPeersHelper22JoinWithVoucherRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &v197,  0LL,  0LL);
                              uint64_t v151 = (uint64_t)v165;
                              uint64_t v152 = (uint64_t)&v165[*(int *)(v169 + 48)];
                              sub_10000FC68(v148, (uint64_t)v165, &qword_100251F50);
                              sub_10000FC68(v150, v152, &qword_100251F50);
                              uint64_t v153 = v171;
                              uint64_t v154 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48);
                              if (v154(v151, 1LL, v171) == 1)
                              {
                                swift_release(v69);
                                swift_release(v149);
                                sub_100041590(v148, &qword_100251F50);
                                if (v154(v152, 1LL, v153) == 1)
                                {
                                  sub_100041590((uint64_t)v165, &qword_100251F50);
                                  return 1LL;
                                }
                              }

                              else
                              {
                                BOOL v155 = v167;
                                sub_10000FC68(v151, (uint64_t)v167, &qword_100251F50);
                                if (v154(v152, 1LL, v153) != 1)
                                {
                                  unint64_t v158 = v166;
                                  sub_100041608(v152, (uint64_t)v166, type metadata accessor for AccountInfo);
                                  if (*v155 == *v158)
                                  {
                                    uint64_t v159 = *(int *)(v153 + 20);
                                    uint64_t v160 = (char *)v155 + v159;
                                    id v161 = (char *)v158 + v159;
                                    uint64_t v162 = type metadata accessor for UnknownStorage(0LL);
                                    uint64_t v163 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                                    LOBYTE(v160) = dispatch thunk of static Equatable.== infix(_:_:)( v160,  v161,  v162,  v163);
                                    swift_release(v69);
                                    swift_release(v195);
                                    sub_1000415CC((uint64_t)v158, type metadata accessor for AccountInfo);
                                    sub_100041590(v182, &qword_100251F50);
                                    sub_1000415CC((uint64_t)v155, type metadata accessor for AccountInfo);
                                    sub_100041590((uint64_t)v165, &qword_100251F50);
                                    return (v160 & 1) != 0;
                                  }

                                  swift_release(v69);
                                  swift_release(v195);
                                  sub_1000415CC((uint64_t)v158, type metadata accessor for AccountInfo);
                                  sub_100041590(v182, &qword_100251F50);
                                  sub_1000415CC((uint64_t)v155, type metadata accessor for AccountInfo);
                                  uint64_t v157 = (uint64_t)v165;
                                  id v156 = &qword_100251F50;
                                  goto LABEL_54;
                                }

                                swift_release(v69);
                                swift_release(v195);
                                sub_100041590(v182, &qword_100251F50);
                                sub_1000415CC((uint64_t)v155, type metadata accessor for AccountInfo);
                              }

                              id v156 = &qword_1002563E0;
                              uint64_t v157 = (uint64_t)v165;
LABEL_54:
                              sub_100041590(v157, v156);
                              return 0LL;
                            }

                            goto LABEL_18;
                          }
                        }

                        sub_1000415CC((uint64_t)v134, type metadata accessor for Metrics);
                        sub_100041590(v191, &qword_100257000);
                        sub_1000415CC((uint64_t)v133, type metadata accessor for Metrics);
                        uint64_t v96 = v115;
                        uint64_t v95 = &qword_100257000;
                        goto LABEL_17;
                      }

                      sub_100041590(v191, &qword_100257000);
                      sub_1000415CC((uint64_t)v133, type metadata accessor for Metrics);
                    }

                    uint64_t v95 = &qword_1002563E8;
                    goto LABEL_39;
                  }
                }

                else
                {
                  sub_10000FC68(v115, v92, &qword_100256D20);
                  int v121 = v116(v113, 1LL, v118);
                  uint64_t v120 = v182;
                  if (v121 != 1)
                  {
                    uint64_t v122 = (char *)v92;
                    id v123 = v173;
                    sub_100041608(v113, (uint64_t)v173, type metadata accessor for IdmsTrustedDevicesVersion);
                    char v124 = _s18TrustedPeersHelper04IdmsA14DevicesVersionV2eeoiySbAC_ACtFZ_0(v122, v123);
                    sub_1000415CC((uint64_t)v123, type metadata accessor for IdmsTrustedDevicesVersion);
                    sub_100041590(v183, &qword_100256D20);
                    sub_1000415CC((uint64_t)v122, type metadata accessor for IdmsTrustedDevicesVersion);
                    sub_100041590(v115, &qword_100256D20);
                    if ((v124 & 1) == 0) {
                      goto LABEL_18;
                    }
                    goto LABEL_33;
                  }

                  sub_100041590(v183, &qword_100256D20);
                  sub_1000415CC(v92, type metadata accessor for IdmsTrustedDevicesVersion);
                }

                uint64_t v95 = &qword_100256490;
LABEL_39:
                uint64_t v96 = v115;
                goto LABEL_17;
              }
            }

LABEL_25:
            swift_release(v69);
            uint64_t v80 = v77;
            goto LABEL_26;
          }

          sub_100041590(v193, &qword_100251F38);
          sub_1000415CC((uint64_t)v76, type metadata accessor for Bottle);
        }

        uint64_t v95 = &qword_100256488;
        uint64_t v96 = v87;
LABEL_17:
        sub_100041590(v96, v95);
LABEL_18:
        swift_release(v69);
        uint64_t v80 = v195;
        goto LABEL_26;
      }

      uint64_t v69 = v196;
      swift_retain(v196);
      swift_retain(v71);
      sub_100041590((uint64_t)v62, &qword_100251F58);
      sub_1000415CC((uint64_t)v78, type metadata accessor for Peer);
    }

    sub_100041590((uint64_t)v55, &qword_100256458);
    swift_release(v69);
    uint64_t v80 = v71;
LABEL_26:
    swift_release(v80);
    return 0LL;
  }

  return result;
}

  __break(1u);
}

    uint64_t v6 = (v11 - 1) & v11;
    uint64_t v33 = v12;
    uint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)(v34);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v34, v17, v16);
    uint64_t v18 = Hasher._finalize()();
    uint64_t v19 = -1LL << *(_BYTE *)(a2 + 32);
    uint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    uint64_t v23 = v22[1];
    uint64_t v24 = *v22 == v17 && v23 == v16;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0LL) & 1) == 0)
    {
      uint64_t v25 = ~v19;
      for (uint64_t i = v20 + 1; ; uint64_t i = v27 + 1)
      {
        uint64_t v27 = i & v25;
        uint64_t v28 = (void *)(v21 + 16 * v27);
        uint64_t v29 = v28[1];
        uint64_t v30 = *v28 == v17 && v29 == v16;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v17, v16, 0LL) & 1) != 0) {
          goto LABEL_7;
        }
      }

    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_100061664(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100008570(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    BOOL result = v17;
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100061664(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100008570(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    BOOL result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    BOOL result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 32 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = v17[2];
    uint64_t v20 = v17[3];
    uint64_t v21 = 8 * v15;
    uint64_t v22 = *(void **)(*(void *)(v2 + 56) + v21);
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = *v17;
    v23[1] = v18;
    v23[2] = v19;
    v23[3] = v20;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    BOOL result = v22;
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    uint64_t v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v22 - 1) & v22;
    uint64_t v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    uint64_t v18 = *(void *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v18, v1);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void **)(*(void *)(v6 + 56) + v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v18, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v19) = v20;
    BOOL result = v20;
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v27) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v26 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    BOOL result = (void *)swift_bridgeObjectRetain(v22);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10000DE70(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100061664(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    BOOL result = sub_100008570(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    BOOL result = v18;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    BOOL result = v21;
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    BOOL result = (void *)swift_bridgeObjectRetain(v21);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_secureBackupUsesComplexPassphrase));
  [v3 setObject:v17 forKey:@"secure_backup_uses_complex_passphrase"];

  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_5:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_secureBackupUsesNumericPassphrase));
    [v3 setObject:v5 forKey:@"secure_backup_uses_numeric_passphrase"];
  }

  PBDataWriterWriteUint64Field(v12, self->_secureBackupUsesComplexPassphrase, 3LL);
  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
LABEL_5:
  }
    PBDataWriterWriteUint64Field(v12, self->_secureBackupUsesNumericPassphrase, 4LL);
LABEL_6:
  deviceColor = self->_deviceColor;
  if (deviceColor) {
    PBDataWriterWriteStringField(v12, deviceColor, 5LL);
  }
  deviceEnclosureColor = self->_deviceEnclosureColor;
  if (deviceEnclosureColor) {
    PBDataWriterWriteStringField(v12, deviceEnclosureColor, 6LL);
  }
  deviceMid = self->_deviceMid;
  if (deviceMid) {
    PBDataWriterWriteStringField(v12, deviceMid, 7LL);
  }
  deviceModel = self->_deviceModel;
  if (deviceModel) {
    PBDataWriterWriteStringField(v12, deviceModel, 8LL);
  }
  deviceModelClass = self->_deviceModelClass;
  if (deviceModelClass) {
    PBDataWriterWriteStringField(v12, deviceModelClass, 9LL);
  }
  deviceModelVersion = self->_deviceModelVersion;
  if (deviceModelVersion) {
    PBDataWriterWriteStringField(v12, deviceModelVersion, 10LL);
  }
  deviceName = self->_deviceName;
  if (deviceName) {
    PBDataWriterWriteStringField(v12, deviceName, 11LL);
  }
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    PBDataWriterWriteUint64Field(v12, self->_devicePlatform, 12LL);
  }
}

  v4[4] = self->_secureBackupUsesComplexPassphrase;
  *((_BYTE *)v4 + 104) |= 8u;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_5:
    v4[5] = self->_secureBackupUsesNumericPassphrase;
    *((_BYTE *)v4 + 104) |= 0x10u;
  }

  self->_secureBackupUsesComplexPassphrase = *((void *)v4 + 4);
  *(_BYTE *)&self->_has |= 8u;
  if ((*((_BYTE *)v4 + 104) & 0x10) != 0)
  {
LABEL_5:
    self->_secureBackupUsesNumericPassphrase = *((void *)v4 + 5);
    *(_BYTE *)&self->_has |= 0x10u;
  }

Swift::Int JoinWithVoucherRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for JoinWithVoucherRequest,  &qword_1002521D8,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
}

uint64_t sub_10008BC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0D0C(a1, &qword_100250D38, &qword_100251EC0, (uint64_t)sub_100089700, a2);
}

uint64_t sub_10008BC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JoinWithVoucherRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008BC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JoinWithVoucherRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10008BC60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256308,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008BCB0(uint64_t a1)
{
  return sub_1000B52B8( v1,  a1,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_10008AB84) & 1;
}

uint64_t sub_10008BCE0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D30,  (uint64_t)static JoinWithVoucherRequest._protobuf_nameMap,  (uint64_t)sub_100089418,  a1);
}

uint64_t sub_10008BCFC(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002526D8,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008BD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002526D8,  type metadata accessor for JoinWithVoucherRequest,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *JoinWithVoucherResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static JoinWithVoucherResponse.protoMessageName;
}

unint64_t static JoinWithVoucherResponse.protoMessageName.getter()
{
  return 0xD000000000000017LL;
}

uint64_t sub_10008BDB4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static JoinWithVoucherResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static JoinWithVoucherResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "changes";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "zone_key_hierarchy_records";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t JoinWithVoucherResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D40,  (uint64_t)static JoinWithVoucherResponse._protobuf_nameMap,  (uint64_t)sub_10008BDB4);
}

uint64_t static JoinWithVoucherResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D40,  (uint64_t)static JoinWithVoucherResponse._protobuf_nameMap,  (uint64_t)sub_10008BDB4,  a1);
}

uint64_t JoinWithVoucherResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008BF60(a1, a2, a3, type metadata accessor for JoinWithVoucherResponse);
}

uint64_t sub_10008BF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v12 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v13 = type metadata accessor for Ckcode_RecordTransport(0LL);
        uint64_t v14 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v7, v13, v14, a2, a3);
      }

      else if (result == 1)
      {
        sub_1000A50A4( a1,  v7,  a2,  a3,  a4,  type metadata accessor for Changes,  &qword_100252628,  (uint64_t)&protocol conformance descriptor for Changes);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t JoinWithVoucherResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100093548( a1,  a2,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_10008C0B0,  (void (*)(void))type metadata accessor for JoinWithVoucherResponse);
}

uint64_t sub_10008C0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for JoinWithVoucherResponse(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t *)&unk_100256C90);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Changes);
  uint64_t v17 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Changes);
}

Swift::Int JoinWithVoucherResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for JoinWithVoucherResponse,  &qword_1002521E0,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
}

uint64_t sub_10008C240@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = _swiftEmptyArrayStorage;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Changes(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_10008C2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JoinWithVoucherResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008C2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JoinWithVoucherResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10008C2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256300,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008C318(uint64_t *a1)
{
  return sub_1000AF178(v1, a1, (uint64_t *)type metadata accessor for JoinWithVoucherResponse) & 1;
}

uint64_t sub_10008C340@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D40,  (uint64_t)static JoinWithVoucherResponse._protobuf_nameMap,  (uint64_t)sub_10008BDB4,  a1);
}

uint64_t sub_10008C35C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002526F0,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008C39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002526F0,  type metadata accessor for JoinWithVoucherResponse,  (uint64_t)&protocol conformance descriptor for JoinWithVoucherResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *UpdateTrustRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static UpdateTrustRequest.protoMessageName;
}

unint64_t static UpdateTrustRequest.protoMessageName.getter()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10008C414()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static UpdateTrustRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static UpdateTrustRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1001DEC70;
  uint64_t v7 = v27 + v6;
  uint64_t v8 = v27 + v6 + *(int *)(v2 + 48);
  *(void *)(v27 + v6) = 1LL;
  *(void *)uint64_t v8 = "change_token";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "peer_id";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "stable_info_and_sig";
  *((void *)v14 + 1) = 19LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)uint64_t v16 = "dynamic_info_and_sig";
  *((void *)v16 + 1) = 20LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "tlk_shares";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "view_keys";
  *((void *)v20 + 1) = 9LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "trusted_devices_version";
  *((void *)v22 + 1) = 23LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "metrics";
  *((void *)v24 + 1) = 7LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "accountInfo";
  *(void *)(v25 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t UpdateTrustRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250D48, (uint64_t)static UpdateTrustRequest._protobuf_nameMap, (uint64_t)sub_10008C414);
}

uint64_t static UpdateTrustRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D48,  (uint64_t)static UpdateTrustRequest._protobuf_nameMap,  (uint64_t)sub_10008C414,  a1);
}

uint64_t UpdateTrustRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = v5;
          goto LABEL_7;
        case 2LL:
          uint64_t v11 = v5 + 16;
LABEL_7:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v11, a2, a3);
          break;
        case 3LL:
          sub_1000976DC( a1,  v5,  a2,  a3,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for SignedPeerStableInfo,  &qword_100252518,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
          break;
        case 4LL:
          sub_10009CB08( a1,  v5,  a2,  a3,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for SignedPeerDynamicInfo,  &qword_100252530,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
          break;
        case 5LL:
          uint64_t v12 = type metadata accessor for TLKShare(0LL);
          uint64_t v13 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
          uint64_t v14 = v5 + 32;
          goto LABEL_12;
        case 6LL:
          uint64_t v12 = type metadata accessor for ViewKeys(0LL);
          uint64_t v13 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
          uint64_t v14 = v5 + 40;
LABEL_12:
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v14, v12, v13, a2, a3);
          break;
        case 7LL:
          sub_10009CBAC( a1,  v5,  a2,  a3,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for IdmsTrustedDevicesVersion,  &qword_100252588,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
          break;
        case 8LL:
          sub_10009DE10( a1,  v5,  a2,  a3,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
        case 9LL:
          sub_10009DEB4( a1,  v5,  a2,  a3,  type metadata accessor for UpdateTrustRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t UpdateTrustRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v5, v9), !v4))
  {
    uint64_t v12 = v5[2];
    unint64_t v13 = v5[3];
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v12, v13), !v4))
    {
      uint64_t result = sub_10008CC2C((uint64_t)v5, a1, a2, a3);
      if (!v4)
      {
        sub_10008CDA0((uint64_t)v5, a1, a2, a3);
        uint64_t v15 = v5[4];
        if (*(void *)(v15 + 16))
        {
          uint64_t v16 = type metadata accessor for TLKShare(0LL);
          uint64_t v17 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v15, 5LL, v16, v17, a2, a3);
        }

        uint64_t v18 = v5[5];
        if (*(void *)(v18 + 16))
        {
          uint64_t v19 = type metadata accessor for ViewKeys(0LL);
          uint64_t v20 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v18, 6LL, v19, v20, a2, a3);
        }

        sub_10008CF14((uint64_t)v5, a1, a2, a3);
        sub_10008E1B0((uint64_t)v5, a1, a2, a3, type metadata accessor for UpdateTrustRequest, 8LL);
        sub_10008E32C((uint64_t)v5, a1, a2, a3, type metadata accessor for UpdateTrustRequest, 9LL);
        type metadata accessor for UpdateTrustRequest(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

uint64_t sub_10008CC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  sub_10000FC68(a1 + *(int *)(updated + 36), (uint64_t)v9, &qword_100251F18);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
}

uint64_t sub_10008CDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  sub_10000FC68(a1 + *(int *)(updated + 40), (uint64_t)v9, &qword_100256CA0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252530,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
}

uint64_t sub_10008CF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100256D20);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for UpdateTrustRequest(0LL);
  sub_10000FC68(a1 + *(int *)(updated + 44), (uint64_t)v9, &qword_100256D20);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for IdmsTrustedDevicesVersion);
  uint64_t v17 = sub_1000077B8( &qword_100252588,  type metadata accessor for IdmsTrustedDevicesVersion,  (uint64_t)&protocol conformance descriptor for IdmsTrustedDevicesVersion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 7LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for IdmsTrustedDevicesVersion);
}

Swift::Int UpdateTrustRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for UpdateTrustRequest,  &qword_1002521F0,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
}

uint64_t sub_10008D0A4@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  a2[4] = _swiftEmptyArrayStorage;
  a2[5] = _swiftEmptyArrayStorage;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + a1[9];
  uint64_t v5 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + a1[10];
  uint64_t v7 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = (char *)a2 + a1[11];
  uint64_t v9 = type metadata accessor for IdmsTrustedDevicesVersion(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = (char *)a2 + a1[12];
  uint64_t v11 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = (char *)a2 + a1[13];
  uint64_t v13 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( v12,  1LL,  1LL,  v13);
}

uint64_t (*sub_10008D1D0())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_10008D1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UpdateTrustRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008D1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UpdateTrustRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10008D20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562F8,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008D25C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D48,  (uint64_t)static UpdateTrustRequest._protobuf_nameMap,  (uint64_t)sub_10008C414,  a1);
}

uint64_t sub_10008D278(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008D2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252708,  type metadata accessor for UpdateTrustRequest,  (uint64_t)&protocol conformance descriptor for UpdateTrustRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *UpdateTrustResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static UpdateTrustResponse.protoMessageName;
}

unint64_t static UpdateTrustResponse.protoMessageName.getter()
{
  return 0xD000000000000013LL;
}

uint64_t sub_10008D330()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static UpdateTrustResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static UpdateTrustResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "changes";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "zone_key_hierarchy_records";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t UpdateTrustResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250D50, (uint64_t)static UpdateTrustResponse._protobuf_nameMap, (uint64_t)sub_10008D330);
}

uint64_t static UpdateTrustResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D50,  (uint64_t)static UpdateTrustResponse._protobuf_nameMap,  (uint64_t)sub_10008D330,  a1);
}

uint64_t UpdateTrustResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008BF60(a1, a2, a3, type metadata accessor for UpdateTrustResponse);
}

uint64_t UpdateTrustResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100093548( a1,  a2,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_10008D500,  (void (*)(void))type metadata accessor for UpdateTrustResponse);
}

uint64_t sub_10008D500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for UpdateTrustResponse(0LL);
  sub_10000FC68(a1 + *(int *)(updated + 24), (uint64_t)v9, (uint64_t *)&unk_100256C90);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Changes);
  uint64_t v17 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Changes);
}

Swift::Int UpdateTrustResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for UpdateTrustResponse,  &qword_1002521F8,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
}

uint64_t sub_10008D690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UpdateTrustResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008D6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UpdateTrustResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10008D6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562F0,  type metadata accessor for UpdateTrustResponse,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008D708(uint64_t *a1)
{
  return sub_1000AF178(v1, a1, (uint64_t *)type metadata accessor for UpdateTrustResponse) & 1;
}

uint64_t sub_10008D730@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D50,  (uint64_t)static UpdateTrustResponse._protobuf_nameMap,  (uint64_t)sub_10008D330,  a1);
}

uint64_t sub_10008D74C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252720,  type metadata accessor for UpdateTrustResponse,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008D78C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252720,  type metadata accessor for UpdateTrustResponse,  (uint64_t)&protocol conformance descriptor for UpdateTrustResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *SetRecoveryKeyRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static SetRecoveryKeyRequest.protoMessageName;
}

unint64_t static SetRecoveryKeyRequest.protoMessageName.getter()
{
  return 0xD000000000000015LL;
}

uint64_t sub_10008D804()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SetRecoveryKeyRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SetRecoveryKeyRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC70;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "change_token";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "peer_id";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "recovery_signing_pub_key";
  *((void *)v15 + 1) = 24LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "recovery_encryption_pub_key";
  *((void *)v17 + 1) = 27LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "stable_info_and_sig";
  *((void *)v19 + 1) = 19LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "tlk_shares";
  *((void *)v21 + 1) = 10LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "metrics";
  *((void *)v23 + 1) = 7LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 8LL;
  *(void *)uint64_t v25 = "accountInfo";
  *((void *)v25 + 1) = 11LL;
  v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 9LL;
  *(void *)uint64_t v26 = "view_keys";
  *(void *)(v26 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SetRecoveryKeyRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D58,  (uint64_t)static SetRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_10008D804);
}

uint64_t static SetRecoveryKeyRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D58,  (uint64_t)static SetRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_10008D804,  a1);
}

uint64_t SetRecoveryKeyRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = v5;
          goto LABEL_7;
        case 2LL:
          uint64_t v12 = v5 + 16;
LABEL_7:
          uint64_t v13 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v12, a2, a3);
          goto LABEL_17;
        case 3LL:
          uint64_t v14 = v5 + 32;
          goto LABEL_10;
        case 4LL:
          uint64_t v14 = v5 + 48;
LABEL_10:
          uint64_t v13 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v14, a2, a3);
          goto LABEL_17;
        case 5LL:
          uint64_t v13 = v11;
          sub_10009CBAC( a1,  v5,  a2,  a3,  type metadata accessor for SetRecoveryKeyRequest,  type metadata accessor for SignedPeerStableInfo,  &qword_100252518,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
          goto LABEL_17;
        case 6LL:
          uint64_t v15 = type metadata accessor for TLKShare(0LL);
          uint64_t v16 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
          uint64_t v17 = v5 + 64;
          goto LABEL_16;
        case 7LL:
          uint64_t v13 = v11;
          sub_10009DE10( a1,  v5,  a2,  a3,  type metadata accessor for SetRecoveryKeyRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          goto LABEL_17;
        case 8LL:
          uint64_t v13 = v11;
          sub_10009DEB4( a1,  v5,  a2,  a3,  type metadata accessor for SetRecoveryKeyRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          goto LABEL_17;
        case 9LL:
          uint64_t v15 = type metadata accessor for ViewKeys(0LL);
          uint64_t v16 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
          uint64_t v17 = v5 + 72;
LABEL_16:
          uint64_t v13 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v17, v15, v16, a2, a3);
LABEL_17:
          uint64_t v11 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t SetRecoveryKeyRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v0, v2), !v1))
  {
    uint64_t v5 = v0[2];
    unint64_t v6 = v0[3];
    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v5, v6), !v1)) {
      __asm { BR              X10 }
    }
  }

  return result;
}

uint64_t sub_10008E03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SetRecoveryKeyRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 44), (uint64_t)v9, &qword_100251F18);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
}

uint64_t sub_10008E1B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v8 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Metrics(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a5(0LL);
  sub_10000FC68(a1 + *(int *)(v17 + 48), (uint64_t)v11, &qword_100257000);
  sub_100041608((uint64_t)v11, (uint64_t)v16, type metadata accessor for Metrics);
  uint64_t v19 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v16, v20, v12, v19, v21, v22);
  return sub_1000415CC((uint64_t)v16, type metadata accessor for Metrics);
}

uint64_t sub_10008E32C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v8 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AccountInfo(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a5(0LL);
  sub_10000FC68(a1 + *(int *)(v17 + 52), (uint64_t)v11, &qword_100251F50);
  sub_100041608((uint64_t)v11, (uint64_t)v16, type metadata accessor for AccountInfo);
  uint64_t v19 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v16, v20, v12, v19, v21, v22);
  return sub_1000415CC((uint64_t)v16, type metadata accessor for AccountInfo);
}

Swift::Int SetRecoveryKeyRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SetRecoveryKeyRequest,  &qword_100252200,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
}

uint64_t sub_10008E4C4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0xE000000000000000LL;
  *(_OWORD *)(a2 + 32) = xmmword_1001DE6F0;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = xmmword_1001DE6F0;
  *(void *)(a2 + 64) = _swiftEmptyArrayStorage;
  *(void *)(a2 + 72) = _swiftEmptyArrayStorage;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + a1[11];
  uint64_t v5 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + a1[12];
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a2 + a1[13];
  uint64_t v9 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_10008E59C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10008E5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_10008E61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SetRecoveryKeyRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008E630()
{
  return SetRecoveryKeyRequest.traverse<A>(visitor:)();
}

uint64_t sub_10008E644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562E8,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008E694@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D58,  (uint64_t)static SetRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_10008D804,  a1);
}

uint64_t sub_10008E6B0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256D40,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008E6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256D40,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *SetRecoveryKeyResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static SetRecoveryKeyResponse.protoMessageName;
}

unint64_t static SetRecoveryKeyResponse.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_10008E768()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SetRecoveryKeyResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SetRecoveryKeyResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "changes";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "zone_key_hierarchy_records";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SetRecoveryKeyResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D60,  (uint64_t)static SetRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_10008E768);
}

uint64_t static SetRecoveryKeyResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D60,  (uint64_t)static SetRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_10008E768,  a1);
}

uint64_t SetRecoveryKeyResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008BF60(a1, a2, a3, type metadata accessor for SetRecoveryKeyResponse);
}

uint64_t SetRecoveryKeyResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100093548( a1,  a2,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_10008E938,  (void (*)(void))type metadata accessor for SetRecoveryKeyResponse);
}

uint64_t sub_10008E938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SetRecoveryKeyResponse(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t *)&unk_100256C90);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Changes);
  uint64_t v17 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Changes);
}

Swift::Int SetRecoveryKeyResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SetRecoveryKeyResponse,  &qword_100252208,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
}

uint64_t sub_10008EAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SetRecoveryKeyResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008EADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SetRecoveryKeyResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10008EAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562E0,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008EB40(uint64_t *a1)
{
  return sub_1000AF178(v1, a1, (uint64_t *)type metadata accessor for SetRecoveryKeyResponse) & 1;
}

uint64_t sub_10008EB68@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D60,  (uint64_t)static SetRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_10008E768,  a1);
}

uint64_t sub_10008EB84(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252748,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008EBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252748,  type metadata accessor for SetRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *RemoveRecoveryKeyRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static RemoveRecoveryKeyRequest.protoMessageName;
}

unint64_t static RemoveRecoveryKeyRequest.protoMessageName.getter()
{
  return 0xD000000000000018LL;
}

uint64_t sub_10008EC3C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static RemoveRecoveryKeyRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static RemoveRecoveryKeyRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC30;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "change_token";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "peer_id";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "stable_info_and_sig";
  *((void *)v14 + 1) = 19LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)uint64_t v16 = "dynamic_info_and_sig";
  *((void *)v16 + 1) = 20LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "metrics";
  *((void *)v18 + 1) = 7LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "accountInfo";
  *((void *)v20 + 1) = 11LL;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t RemoveRecoveryKeyRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D68,  (uint64_t)static RemoveRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_10008EC3C);
}

uint64_t static RemoveRecoveryKeyRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D68,  (uint64_t)static RemoveRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_10008EC3C,  a1);
}

uint64_t RemoveRecoveryKeyRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = v5;
          goto LABEL_5;
        case 2LL:
          uint64_t v11 = v5 + 16;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v11, a2, a3);
          break;
        case 3LL:
          sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for SignedPeerStableInfo,  &qword_100252518,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
          break;
        case 4LL:
          sub_100098160( a1,  v5,  a2,  a3,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for SignedPeerDynamicInfo,  &qword_100252530,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
          break;
        case 5LL:
          sub_1000976DC( a1,  v5,  a2,  a3,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
        case 6LL:
          sub_10009CB08( a1,  v5,  a2,  a3,  type metadata accessor for RemoveRecoveryKeyRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t RemoveRecoveryKeyRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v8), !v4))
  {
    uint64_t v11 = v3[2];
    unint64_t v12 = v3[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12), !v4))
    {
      uint64_t result = sub_10008F1B4((uint64_t)v3, a1, a2, a3);
      if (!v4)
      {
        sub_10008F328((uint64_t)v3, a1, a2, a3);
        sub_10008F49C((uint64_t)v3, a1, a2, a3);
        sub_10008F610((uint64_t)v3, a1, a2, a3);
        type metadata accessor for RemoveRecoveryKeyRequest(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

uint64_t sub_10008F1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 28), (uint64_t)v9, &qword_100251F18);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
}

uint64_t sub_10008F328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 32), (uint64_t)v9, &qword_100256CA0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252530,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
}

uint64_t sub_10008F49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 36), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_10008F610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RemoveRecoveryKeyRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 40), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int RemoveRecoveryKeyRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for RemoveRecoveryKeyRequest,  &qword_100252210,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
}

uint64_t sub_10008F7A4@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + a1[7];
  uint64_t v5 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + a1[8];
  uint64_t v7 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = (char *)a2 + a1[9];
  uint64_t v9 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = (char *)a2 + a1[10];
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_10008F890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoveRecoveryKeyRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008F8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoveRecoveryKeyRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10008F8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562D8,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008F908@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D68,  (uint64_t)static RemoveRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_10008EC3C,  a1);
}

uint64_t sub_10008F924(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256C80,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008F964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256C80,  type metadata accessor for RemoveRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *RemoveRecoveryKeyResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static RemoveRecoveryKeyResponse.protoMessageName;
}

unint64_t static RemoveRecoveryKeyResponse.protoMessageName.getter()
{
  return 0xD000000000000019LL;
}

uint64_t sub_10008F9DC(uint64_t a1)
{
  return sub_10009D55C(a1, static RemoveRecoveryKeyResponse._protobuf_nameMap, (uint64_t)"changes", 7LL);
}

uint64_t RemoveRecoveryKeyResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D70,  (uint64_t)static RemoveRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_10008F9DC);
}

uint64_t static RemoveRecoveryKeyResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D70,  (uint64_t)static RemoveRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_10008F9DC,  a1);
}

uint64_t RemoveRecoveryKeyResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FA48(a1, a2, a3, type metadata accessor for RemoveRecoveryKeyResponse);
}

uint64_t sub_10008FA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v12 & 1) == 0)
    {
      if (result == 1) {
        sub_1000A41D4( a1,  v7,  a2,  a3,  a4,  type metadata accessor for Changes,  &qword_100252628,  (uint64_t)&protocol conformance descriptor for Changes);
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t RemoveRecoveryKeyResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FB1C(a1, a2, a3, type metadata accessor for RemoveRecoveryKeyResponse);
}

uint64_t sub_10008FB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = sub_100094038(v4, a1, a2, a3, a4);
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t static RemoveRecoveryKeyResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000AD020(a1, a2, type metadata accessor for RemoveRecoveryKeyResponse) & 1;
}

Swift::Int RemoveRecoveryKeyResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for RemoveRecoveryKeyResponse,  &qword_100252218,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
}

uint64_t sub_10008FBB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Changes(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_10008FBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoveRecoveryKeyResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10008FC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoveRecoveryKeyResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10008FC24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562D0,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10008FC74@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D70,  (uint64_t)static RemoveRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_10008F9DC,  a1);
}

uint64_t sub_10008FC90(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252770,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10008FCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252770,  type metadata accessor for RemoveRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for RemoveRecoveryKeyResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *PerformATOPRVActionsRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static PerformATOPRVActionsRequest.protoMessageName;
}

unint64_t static PerformATOPRVActionsRequest.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10008FD48()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static PerformATOPRVActionsRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static PerformATOPRVActionsRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "metrics";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  char v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "accountInfo";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t PerformATOPRVActionsRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D78,  (uint64_t)static PerformATOPRVActionsRequest._protobuf_nameMap,  (uint64_t)sub_10008FD48);
}

uint64_t static PerformATOPRVActionsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D78,  (uint64_t)static PerformATOPRVActionsRequest._protobuf_nameMap,  (uint64_t)sub_10008FD48,  a1);
}

uint64_t PerformATOPRVActionsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1000A50A4( a1,  v5,  a2,  a3,  type metadata accessor for PerformATOPRVActionsRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
      }

      else if (result == 1)
      {
        sub_1000A41D4( a1,  v5,  a2,  a3,  type metadata accessor for PerformATOPRVActionsRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t PerformATOPRVActionsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100090040(v3, a1, a2, a3);
  if (!v4)
  {
    sub_1000901B4(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100090040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 20), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_1000901B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for PerformATOPRVActionsRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int PerformATOPRVActionsRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for PerformATOPRVActionsRequest,  &qword_100252220,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
}

uint64_t sub_100090348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A2EF4(a1, type metadata accessor for Metrics, type metadata accessor for AccountInfo, a2);
}

uint64_t sub_10009035C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PerformATOPRVActionsRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100090370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PerformATOPRVActionsRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100090384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562C8,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000903D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D78,  (uint64_t)static PerformATOPRVActionsRequest._protobuf_nameMap,  (uint64_t)sub_10008FD48,  a1);
}

uint64_t sub_1000903F0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252788,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100090430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252788,  type metadata accessor for PerformATOPRVActionsRequest,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *PerformATOPRVActionsResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static PerformATOPRVActionsResponse.protoMessageName;
}

unint64_t static PerformATOPRVActionsResponse.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1000904A8(uint64_t a1)
{
  return sub_1000A5830(a1, static PerformATOPRVActionsResponse._protobuf_nameMap);
}

uint64_t PerformATOPRVActionsResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D80,  (uint64_t)static PerformATOPRVActionsResponse._protobuf_nameMap,  (uint64_t)sub_1000904A8);
}

uint64_t static PerformATOPRVActionsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D80,  (uint64_t)static PerformATOPRVActionsResponse._protobuf_nameMap,  (uint64_t)sub_1000904A8,  a1);
}

uint64_t RemoveUnreadableCKServerDataResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A58AC(a1, a2, a3);
}

uint64_t PerformATOPRVActionsResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

Swift::Int PerformATOPRVActionsResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for PerformATOPRVActionsResponse,  &qword_100252228,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
}

uint64_t sub_100090534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoveUnreadableCKServerDataResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t RemoveUnreadableCKServerDataResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PerformATOPRVActionsResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009055C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562C0,  type metadata accessor for PerformATOPRVActionsResponse,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000905AC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D80,  (uint64_t)static PerformATOPRVActionsResponse._protobuf_nameMap,  (uint64_t)sub_1000904A8,  a1);
}

uint64_t sub_1000905C8(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002527A0,  type metadata accessor for PerformATOPRVActionsResponse,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100090608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002527A0,  type metadata accessor for PerformATOPRVActionsResponse,  (uint64_t)&protocol conformance descriptor for PerformATOPRVActionsResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *AddCustodianRecoveryKeyRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AddCustodianRecoveryKeyRequest.protoMessageName;
}

unint64_t static AddCustodianRecoveryKeyRequest.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_100090680()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static AddCustodianRecoveryKeyRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static AddCustodianRecoveryKeyRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1001DEC70;
  uint64_t v7 = v27 + v6;
  uint64_t v8 = v27 + v6 + *(int *)(v2 + 48);
  *(void *)(v27 + v6) = 1LL;
  *(void *)uint64_t v8 = "change_token";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "peer_id";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "peer";
  *((void *)v14 + 1) = 4LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)uint64_t v16 = "stable_info_and_sig";
  *((void *)v16 + 1) = 19LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "tlk_shares";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "dynamic_info_and_sig";
  *((void *)v20 + 1) = 20LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "metrics";
  *((void *)v22 + 1) = 7LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "accountInfo";
  *((void *)v24 + 1) = 11LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "view_keys";
  *(void *)(v25 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t AddCustodianRecoveryKeyRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D88,  (uint64_t)static AddCustodianRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_100090680);
}

uint64_t static AddCustodianRecoveryKeyRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D88,  (uint64_t)static AddCustodianRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_100090680,  a1);
}

uint64_t sub_10009099C()
{
  uint64_t v0 = type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass(0LL);
  uint64_t v1 = (void *)swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1[2] = 0LL;
  v1[3] = 0xE000000000000000LL;
  v1[4] = 0LL;
  v1[5] = 0xE000000000000000LL;
  uint64_t v2 = (char *)v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  uint64_t v3 = type metadata accessor for Peer(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = (char *)v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
  uint64_t v5 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *(void *)((char *)v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares) = _swiftEmptyArrayStorage;
  uint64_t v6 = (char *)v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
  uint64_t v7 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = (char *)v1
     + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v9 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = (char *)v1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v11 = type metadata accessor for AccountInfo(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
  *(void *)((char *)v1
            + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys) = _swiftEmptyArrayStorage;
  qword_100251EC8 = (uint64_t)v1;
  return result;
}

void *sub_100090AF8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v4, v5);
  uint64_t v68 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v7, v8);
  uint64_t v67 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v10, v11);
  uint64_t v66 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v13, v14);
  uint64_t v62 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v16, v17);
  uint64_t v59 = (uint64_t)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = 0LL;
  uint64_t v19 = v1 + 2;
  v2[3] = 0xE000000000000000LL;
  v2[4] = 0LL;
  v2[5] = 0xE000000000000000LL;
  uint64_t v20 = (uint64_t)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  uint64_t v21 = type metadata accessor for Peer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  uint64_t v22 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
  uint64_t v60 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
  uint64_t v23 = type metadata accessor for SignedPeerStableInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  uint64_t v24 = (void *)((char *)v2
                 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  *(void *)((char *)v2
            + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares) = _swiftEmptyArrayStorage;
  uint64_t v25 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
  uint64_t v61 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
  uint64_t v26 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v25, 1LL, 1LL, v26);
  uint64_t v27 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v63 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  uint64_t v28 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v27, 1LL, 1LL, v28);
  uint64_t v29 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v64 = (char *)v2
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  uint64_t v30 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v29, 1LL, 1LL, v30);
  uint64_t v65 = (void *)((char *)v2
                 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  *(void *)((char *)v2
            + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys) = _swiftEmptyArrayStorage;
  swift_beginAccess(a1 + 2, v81, 0LL, 0LL);
  uint64_t v31 = a1[2];
  uint64_t v32 = a1[3];
  swift_beginAccess(v19, v80, 1LL, 0LL);
  uint64_t v33 = v2[3];
  *uint64_t v19 = v31;
  v2[3] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  swift_beginAccess(a1 + 4, v79, 0LL, 0LL);
  uint64_t v35 = a1[4];
  uint64_t v34 = a1[5];
  swift_beginAccess(v2 + 4, v78, 1LL, 0LL);
  uint64_t v36 = v2[5];
  v2[4] = v35;
  v2[5] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = (uint64_t)a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v77,  0LL,  0LL);
  uint64_t v38 = v59;
  sub_10000FC68(v37, v59, &qword_100251F58);
  swift_beginAccess(v20, v76, 33LL, 0LL);
  sub_1000B66E0(v38, v20, &qword_100251F58);
  swift_endAccess(v76);
  uint64_t v39 = (uint64_t)a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig,  v76,  0LL,  0LL);
  uint64_t v40 = v62;
  sub_10000FC68(v39, v62, &qword_100251F18);
  uint64_t v41 = (uint64_t)v60;
  swift_beginAccess(v60, v75, 33LL, 0LL);
  sub_1000B66E0(v40, v41, &qword_100251F18);
  swift_endAccess(v75);
  uint64_t v42 = (void *)((char *)a1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  v75,  0LL,  0LL);
  uint64_t v43 = *v42;
  swift_beginAccess(v24, &v74, 1LL, 0LL);
  uint64_t v44 = *v24;
  *uint64_t v24 = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = (uint64_t)a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  &v73,  0LL,  0LL);
  uint64_t v46 = v66;
  sub_10000FC68(v45, v66, &qword_100256CA0);
  uint64_t v47 = (uint64_t)v61;
  swift_beginAccess(v61, v72, 33LL, 0LL);
  sub_1000B66E0(v46, v47, &qword_100256CA0);
  swift_endAccess(v72);
  uint64_t v48 = (uint64_t)a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  v72,  0LL,  0LL);
  uint64_t v49 = v67;
  sub_10000FC68(v48, v67, &qword_100257000);
  uint64_t v50 = (uint64_t)v63;
  swift_beginAccess(v63, v71, 33LL, 0LL);
  sub_1000B66E0(v49, v50, &qword_100257000);
  swift_endAccess(v71);
  uint64_t v51 = (uint64_t)a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  v71,  0LL,  0LL);
  uint64_t v52 = v68;
  sub_10000FC68(v51, v68, &qword_100251F50);
  uint64_t v53 = (uint64_t)v64;
  swift_beginAccess(v64, v70, 33LL, 0LL);
  sub_1000B66E0(v52, v53, &qword_100251F50);
  swift_endAccess(v70);
  uint64_t v54 = (void *)((char *)a1
                 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  v70,  0LL,  0LL);
  uint64_t v55 = *v54;
  swift_bridgeObjectRetain(v55);
  swift_release(a1);
  uint64_t v56 = v65;
  swift_beginAccess(v65, &v69, 1LL, 0LL);
  uint64_t v57 = *v56;
  *uint64_t v56 = v55;
  swift_bridgeObjectRelease(v57);
  return v2;
}

uint64_t sub_100091108()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares));
  sub_100041590( v0 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  &qword_100256CA0);
  sub_100041590( v0 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &qword_100257000);
  sub_100041590( v0 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &qword_100251F50);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys));
  return v0;
}

uint64_t sub_1000911C4()
{
  return sub_10009F290(sub_100091108);
}

uint64_t AddCustodianRecoveryKeyRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100083EF8( a1,  a2,  a3,  type metadata accessor for AddCustodianRecoveryKeyRequest,  type metadata accessor for AddCustodianRecoveryKeyRequest._StorageClass,  (uint64_t (*)(uint64_t))sub_100090AF8,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100091204);
}

uint64_t sub_100091204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_10009F514( a2,  a1,  a3,  a4,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:));
          break;
        case 2LL:
          sub_100091460(a2, a1, a3, a4);
          break;
        case 3LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
          uint64_t v16 = type metadata accessor for Peer;
          uint64_t v17 = (unint64_t *)&unk_100256E10;
          uint64_t v18 = &protocol conformance descriptor for Peer;
          goto LABEL_5;
        case 4LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
          uint64_t v16 = type metadata accessor for SignedPeerStableInfo;
          uint64_t v17 = &qword_100252518;
          uint64_t v18 = &protocol conformance descriptor for SignedPeerStableInfo;
          goto LABEL_5;
        case 5LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares;
          uint64_t v24 = type metadata accessor for TLKShare;
          uint64_t v25 = &qword_100256D60;
          uint64_t v26 = &protocol conformance descriptor for TLKShare;
          goto LABEL_17;
        case 6LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
          uint64_t v16 = type metadata accessor for SignedPeerDynamicInfo;
          uint64_t v17 = &qword_100252530;
          uint64_t v18 = &protocol conformance descriptor for SignedPeerDynamicInfo;
          goto LABEL_5;
        case 7LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
          uint64_t v16 = type metadata accessor for Metrics;
          uint64_t v17 = (unint64_t *)&unk_100256FE0;
          uint64_t v18 = &protocol conformance descriptor for Metrics;
          goto LABEL_5;
        case 8LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
          uint64_t v16 = type metadata accessor for AccountInfo;
          uint64_t v17 = (unint64_t *)&unk_100256CE0;
          uint64_t v18 = &protocol conformance descriptor for AccountInfo;
LABEL_5:
          sub_10009F698(v11, v12, v13, v14, v15, v16, v17, (uint64_t)v18);
          break;
        case 9LL:
          uint64_t v19 = a2;
          uint64_t v20 = a1;
          uint64_t v21 = a3;
          uint64_t v22 = a4;
          uint64_t v23 = &OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys;
          uint64_t v24 = type metadata accessor for ViewKeys;
          uint64_t v25 = &qword_1002521E8;
          uint64_t v26 = &protocol conformance descriptor for ViewKeys;
LABEL_17:
          sub_1000914DC(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
    }
  }

  return result;
}

uint64_t sub_100091460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + 32;
  swift_beginAccess(a2 + 32, v8, 33LL, 0LL);
  dispatch thunk of Decoder.decodeSingularStringField(value:)(v6, a3, a4);
  return swift_endAccess(v8);
}

uint64_t sub_1000914DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *a5;
  swift_beginAccess(v13, v17, 33LL, 0LL);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v13, v14, v15, a3, a4);
  return swift_endAccess(v17);
}

uint64_t AddCustodianRecoveryKeyRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100084134( a1,  a2,  a3,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000915C4);
}

uint64_t sub_1000915C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_beginAccess(a1 + 2, v30, 0LL, 0LL);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12
    || (swift_bridgeObjectRetain(a1[3]),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v10, v11),
        uint64_t result = swift_bridgeObjectRelease(v11),
        !v5))
  {
    swift_beginAccess(a1 + 4, v29, 0LL, 0LL);
    uint64_t v14 = a1[4];
    unint64_t v15 = a1[5];
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000LL) == 0) {
      uint64_t v16 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (!v16
      || (swift_bridgeObjectRetain(a1[5]),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v14, v15),
          uint64_t result = swift_bridgeObjectRelease(v15),
          !v5))
    {
      uint64_t result = sub_10009188C((uint64_t)a1, a2, a3, a4);
      if (!v5)
      {
        sub_100091A18((uint64_t)a1, a2, a3, a4);
        uint64_t v17 = (void *)((char *)a1
                       + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
        swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  v28,  0LL,  0LL);
        uint64_t v18 = *v17;
        if (*(void *)(v18 + 16))
        {
          uint64_t v19 = type metadata accessor for TLKShare(0LL);
          uint64_t v20 = sub_1000077B8( &qword_100256D60,  type metadata accessor for TLKShare,  (uint64_t)&protocol conformance descriptor for TLKShare);
          uint64_t v21 = swift_bridgeObjectRetain(v18);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v21, 5LL, v19, v20, a3, a4);
          swift_bridgeObjectRelease(v18);
        }

        sub_100091BA4((uint64_t)a1, a2, a3, a4);
        sub_100091D30((uint64_t)a1, a2, a3, a4);
        sub_100091EBC((uint64_t)a1, a2, a3, a4);
        uint64_t v22 = (void *)((char *)a1
                       + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
        uint64_t result = swift_beginAccess(v22, &v27, 0LL, 0LL);
        uint64_t v23 = *v22;
        if (*(void *)(v23 + 16))
        {
          uint64_t v24 = type metadata accessor for ViewKeys(0LL);
          uint64_t v25 = sub_1000077B8( &qword_1002521E8,  type metadata accessor for ViewKeys,  (uint64_t)&protocol conformance descriptor for ViewKeys);
          uint64_t v26 = swift_bridgeObjectRetain(v23);
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v26, 9LL, v24, v25, a3, a4);
          return swift_bridgeObjectRelease(v23);
        }
      }
    }
  }

  return result;
}

uint64_t sub_10009188C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F58);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Peer(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F58);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Peer);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256E10,  type metadata accessor for Peer,  (uint64_t)&protocol conformance descriptor for Peer);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Peer);
}

uint64_t sub_100091A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F18);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F18);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252518,  type metadata accessor for SignedPeerStableInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerStableInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerStableInfo);
}

uint64_t sub_100091BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100256CA0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100256CA0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
  uint64_t v17 = sub_1000077B8( &qword_100252530,  type metadata accessor for SignedPeerDynamicInfo,  (uint64_t)&protocol conformance descriptor for SignedPeerDynamicInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for SignedPeerDynamicInfo);
}

uint64_t sub_100091D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 7LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_100091EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 8LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

uint64_t static AddCustodianRecoveryKeyRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8( a1,  a2,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_100092070) & 1;
}

uint64_t sub_100092070(uint64_t a1, void *a2)
{
  uint64_t v184 = type metadata accessor for AccountInfo(0LL);
  uint64_t v182 = *(void *)(v184 - 8);
  __chkstk_darwin(v184, v4);
  uint64_t v178 = (_DWORD *)((char *)&v177 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v181 = sub_100007578(&qword_1002563E0);
  __chkstk_darwin(v181, v6);
  uint64_t v183 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100007578(&qword_100251F50);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v179 = (_DWORD *)((char *)&v177 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10, v12);
  uint64_t v198 = (char *)&v177 - v13;
  uint64_t v14 = type metadata accessor for Metrics(0LL);
  uint64_t v188 = *(void *)(v14 - 8);
  uint64_t v189 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v180 = (uint64_t *)((char *)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v187 = sub_100007578(&qword_1002563E8);
  __chkstk_darwin(v187, v17);
  uint64_t v190 = (uint64_t)&v177 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100007578(&qword_100257000);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v185 = (uint64_t *)((char *)&v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v21, v23);
  uint64_t v200 = (char *)&v177 - v24;
  uint64_t v25 = type metadata accessor for SignedPeerDynamicInfo(0LL);
  uint64_t v193 = *(void *)(v25 - 8);
  uint64_t v194 = v25;
  __chkstk_darwin(v25, v26);
  uint64_t v186 = (uint64_t)&v177 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v192 = sub_100007578(&qword_100256448);
  __chkstk_darwin(v192, v28);
  uint64_t v195 = (uint64_t)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100007578(&qword_100256CA0);
  uint64_t v32 = __chkstk_darwin(v30, v31);
  uint64_t v191 = (uint64_t *)((char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v32, v34);
  uint64_t v205 = (uint64_t)&v177 - v35;
  uint64_t v204 = type metadata accessor for SignedPeerStableInfo(0LL);
  uint64_t v202 = *(void *)(v204 - 8);
  __chkstk_darwin(v204, v36);
  uint64_t v196 = (uint64_t)&v177 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v201 = sub_100007578(&qword_100256450);
  __chkstk_darwin(v201, v38);
  uint64_t v203 = (uint64_t)&v177 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_100007578(&qword_100251F18);
  uint64_t v42 = __chkstk_darwin(v40, v41);
  uint64_t v197 = (uint64_t *)((char *)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v42, v44);
  uint64_t v208 = (uint64_t)&v177 - v45;
  uint64_t v46 = type metadata accessor for Peer(0LL);
  uint64_t v209 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v47);
  uint64_t v199 = (uint64_t *)((char *)&v177 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v49 = sub_100007578(&qword_100256458);
  __chkstk_darwin(v49, v50);
  uint64_t v52 = (char *)&v177 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100007578(&qword_100251F58);
  uint64_t v55 = __chkstk_darwin(v53, v54);
  id v207 = (uint64_t *)((char *)&v177 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v55, v57);
  uint64_t v59 = (char *)&v177 - v58;
  swift_beginAccess(a1 + 16, v227, 0LL, 0LL);
  uint64_t v60 = a1;
  uint64_t v61 = *(void *)(a1 + 16);
  uint64_t v62 = *(void *)(a1 + 24);
  swift_beginAccess(a2 + 2, v226, 0LL, 0LL);
  uint64_t v63 = a2[2];
  uint64_t v64 = a2[3];
  if (v61 == v63 && v62 == v64
    || (char v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, v63, v64, 0LL), v66 = 0, (v65 & 1) != 0))
  {
    swift_beginAccess(v60 + 32, v225, 0LL, 0LL);
    uint64_t v67 = *(void *)(v60 + 32);
    uint64_t v68 = *(void *)(v60 + 40);
    swift_beginAccess(a2 + 4, v224, 0LL, 0LL);
    uint64_t v69 = a2[4];
    uint64_t v70 = a2[5];
    if (v67 == v69 && v68 == v70) {
      goto LABEL_7;
    }
    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, v69, v70, 0LL);
    char v66 = 0;
    if ((v71 & 1) != 0)
    {
LABEL_7:
      id v206 = a2;
      uint64_t v72 = v60;
      uint64_t v73 = v60
          + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
      swift_beginAccess( v60 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v223,  0LL,  0LL);
      sub_10000FC68(v73, (uint64_t)v59, &qword_100251F58);
      uint64_t v74 = v206;
      uint64_t v75 = (uint64_t)v206
          + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer;
      swift_beginAccess( (char *)v206 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peer,  v222,  0LL,  0LL);
      uint64_t v76 = (uint64_t)&v52[*(int *)(v49 + 48)];
      sub_10000FC68((uint64_t)v59, (uint64_t)v52, &qword_100251F58);
      sub_10000FC68(v75, v76, &qword_100251F58);
      uint64_t v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v77((uint64_t)v52, 1LL, v46) == 1)
      {
        swift_retain(v60);
        swift_retain(v74);
        sub_100041590((uint64_t)v59, &qword_100251F58);
        if (v77(v76, 1LL, v46) == 1)
        {
          sub_100041590((uint64_t)v52, &qword_100251F58);
          goto LABEL_14;
        }
      }

      else
      {
        uint64_t v78 = v207;
        sub_10000FC68((uint64_t)v52, (uint64_t)v207, &qword_100251F58);
        if (v77(v76, 1LL, v46) != 1)
        {
          uint64_t v81 = v199;
          sub_100041608(v76, (uint64_t)v199, type metadata accessor for Peer);
          uint64_t v72 = v60;
          swift_retain(v60);
          swift_retain(v74);
          char v82 = _s18TrustedPeersHelper4PeerV2eeoiySbAC_ACtFZ_0(v78, v81);
          sub_1000415CC((uint64_t)v81, type metadata accessor for Peer);
          sub_100041590((uint64_t)v59, &qword_100251F58);
          sub_1000415CC((uint64_t)v78, type metadata accessor for Peer);
          uint64_t v74 = v206;
          sub_100041590((uint64_t)v52, &qword_100251F58);
          if ((v82 & 1) == 0) {
            goto LABEL_35;
          }
LABEL_14:
          uint64_t v83 = v72
              + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
          swift_beginAccess( v72 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig,  v221,  0LL,  0LL);
          uint64_t v84 = v208;
          sub_10000FC68(v83, v208, &qword_100251F18);
          uint64_t v85 = (uint64_t)v74
              + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig;
          swift_beginAccess( (char *)v74 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__stableInfoAndSig,  &v220,  0LL,  0LL);
          uint64_t v86 = v203;
          uint64_t v87 = v203 + *(int *)(v201 + 48);
          sub_10000FC68(v84, v203, &qword_100251F18);
          uint64_t v88 = v85;
          uint64_t v89 = v86;
          sub_10000FC68(v88, v87, &qword_100251F18);
          uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 48);
          uint64_t v91 = v86;
          uint64_t v92 = v204;
          if (v90(v91, 1LL, v204) == 1)
          {
            sub_100041590(v84, &qword_100251F18);
            int v93 = v90(v87, 1LL, v92);
            uint64_t v94 = (uint64_t)v198;
            uint64_t v95 = (uint64_t)v200;
            uint64_t v96 = v205;
            if (v93 == 1)
            {
              sub_100041590(v89, &qword_100251F18);
LABEL_17:
              uint64_t v97 = (uint64_t *)(v72
                              + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
              swift_beginAccess( v72 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  &v219,  0LL,  0LL);
              uint64_t v98 = *v97;
              uint64_t v99 = (void *)((char *)v74
                             + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares);
              swift_beginAccess( (char *)v74 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShares,  &v218,  0LL,  0LL);
              uint64_t v100 = *v99;
              swift_bridgeObjectRetain(v98);
              swift_bridgeObjectRetain(v100);
              char v101 = sub_10003F630(v98, v100);
              swift_bridgeObjectRelease(v98);
              swift_bridgeObjectRelease(v100);
              if ((v101 & 1) == 0) {
                goto LABEL_35;
              }
              uint64_t v102 = v72
                   + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
              swift_beginAccess( v72 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  &v217,  0LL,  0LL);
              sub_10000FC68(v102, v96, &qword_100256CA0);
              uint64_t v103 = (uint64_t)v74
                   + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig;
              swift_beginAccess( (char *)v74 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__dynamicInfoAndSig,  &v216,  0LL,  0LL);
              uint64_t v104 = v96;
              uint64_t v105 = v195;
              uint64_t v106 = v195 + *(int *)(v192 + 48);
              sub_10000FC68(v104, v195, &qword_100256CA0);
              uint64_t v107 = v103;
              uint64_t v89 = v105;
              sub_10000FC68(v107, v106, &qword_100256CA0);
              char v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v193 + 48);
              uint64_t v109 = v105;
              uint64_t v110 = v194;
              if (v108(v109, 1LL, v194) == 1)
              {
                sub_100041590(v104, &qword_100256CA0);
                if (v108(v106, 1LL, v110) == 1)
                {
                  sub_100041590(v89, &qword_100256CA0);
                  goto LABEL_21;
                }
              }

              else
              {
                uint64_t v133 = v110;
                uint64_t v134 = v191;
                sub_10000FC68(v89, (uint64_t)v191, &qword_100256CA0);
                if (v108(v106, 1LL, v133) != 1)
                {
                  uint64_t v135 = v186;
                  sub_100041608(v106, v186, type metadata accessor for SignedPeerDynamicInfo);
                  sub_100041318(*v134, v134[1]);
                  if ((v136 & 1) == 0 || (sub_100041318(v134[2], v134[3]), (v137 & 1) == 0))
                  {
                    uint64_t v129 = type metadata accessor for SignedPeerDynamicInfo;
                    sub_1000415CC(v135, type metadata accessor for SignedPeerDynamicInfo);
                    unint64_t v130 = &qword_100256CA0;
                    uint64_t v143 = v205;
                    goto LABEL_46;
                  }

                  uint64_t v138 = *(int *)(v194 + 24);
                  uint64_t v139 = (char *)v134 + v138;
                  uint64_t v140 = v135 + v138;
                  uint64_t v141 = type metadata accessor for UnknownStorage(0LL);
                  uint64_t v142 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                  LOBYTE(v139) = dispatch thunk of static Equatable.== infix(_:_:)(v139, v140, v141, v142);
                  sub_1000415CC(v135, type metadata accessor for SignedPeerDynamicInfo);
                  sub_100041590(v205, &qword_100256CA0);
                  sub_1000415CC((uint64_t)v134, type metadata accessor for SignedPeerDynamicInfo);
                  sub_100041590(v195, &qword_100256CA0);
LABEL_21:
                  uint64_t v111 = v72
                       + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
                  swift_beginAccess( v72 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &v215,  0LL,  0LL);
                  sub_10000FC68(v111, v95, &qword_100257000);
                  uint64_t v112 = (uint64_t)v74
                       + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics;
                  swift_beginAccess( (char *)v74 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__metrics,  &v214,  0LL,  0LL);
                  uint64_t v113 = v190;
                  uint64_t v114 = v190 + *(int *)(v187 + 48);
                  sub_10000FC68(v95, v190, &qword_100257000);
                  uint64_t v115 = v112;
                  uint64_t v89 = v113;
                  sub_10000FC68(v115, v114, &qword_100257000);
                  uint64_t v116 = v189;
                  uint64_t v117 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
                  if (v117(v113, 1LL, v189) == 1)
                  {
                    sub_100041590(v95, &qword_100257000);
                    if (v117(v114, 1LL, v116) == 1)
                    {
                      sub_100041590(v113, &qword_100257000);
LABEL_57:
                      uint64_t v157 = v72
                           + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
                      swift_beginAccess( v72 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &v213,  0LL,  0LL);
                      sub_10000FC68(v157, v94, &qword_100251F50);
                      uint64_t v158 = (uint64_t)v74
                           + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo;
                      swift_beginAccess( (char *)v74 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__accountInfo,  &v212,  0LL,  0LL);
                      uint64_t v159 = v183;
                      uint64_t v160 = v183 + *(int *)(v181 + 48);
                      sub_10000FC68(v94, v183, &qword_100251F50);
                      uint64_t v161 = v158;
                      uint64_t v89 = v159;
                      sub_10000FC68(v161, v160, &qword_100251F50);
                      uint64_t v162 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48);
                      uint64_t v163 = v159;
                      uint64_t v164 = v184;
                      if (v162(v163, 1LL, v184) == 1)
                      {
                        sub_100041590(v94, &qword_100251F50);
                        if (v162(v160, 1LL, v164) == 1)
                        {
                          sub_100041590(v89, &qword_100251F50);
LABEL_60:
                          uint64_t v165 = (uint64_t *)(v72
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
                          swift_beginAccess( v72 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  &v211,  0LL,  0LL);
                          uint64_t v166 = *v165;
                          id v167 = (void *)((char *)v74
                                          + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys);
                          swift_beginAccess( (char *)v74 + OBJC_IVAR____TtCV18TrustedPeersHelper30AddCustodianRecoveryKeyRequestP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__viewKeys,  &v210,  0LL,  0LL);
                          uint64_t v168 = *v167;
                          swift_bridgeObjectRetain(v166);
                          swift_bridgeObjectRetain(v168);
                          char v66 = sub_10003F644(v166, v168);
                          swift_bridgeObjectRelease(v166);
                          swift_bridgeObjectRelease(v168);
                          goto LABEL_36;
                        }

                        goto LABEL_63;
                      }

                      uint64_t v169 = v179;
                      sub_10000FC68(v89, (uint64_t)v179, &qword_100251F50);
                      if (v162(v160, 1LL, v164) == 1)
                      {
                        sub_100041590(v94, &qword_100251F50);
                        sub_1000415CC((uint64_t)v169, type metadata accessor for AccountInfo);
LABEL_63:
                        int v79 = &qword_1002563E0;
                        goto LABEL_27;
                      }

                      uint64_t v170 = v178;
                      sub_100041608(v160, (uint64_t)v178, type metadata accessor for AccountInfo);
                      if (*v169 == *v170)
                      {
                        uint64_t v171 = *(int *)(v184 + 20);
                        id v172 = (char *)v169 + v171;
                        uint64_t v173 = (char *)v170 + v171;
                        uint64_t v174 = v89;
                        uint64_t v175 = type metadata accessor for UnknownStorage(0LL);
                        uint64_t v176 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                        LOBYTE(v172) = dispatch thunk of static Equatable.== infix(_:_:)(v172, v173, v175, v176);
                        sub_1000415CC((uint64_t)v170, type metadata accessor for AccountInfo);
                        sub_100041590(v94, &qword_100251F50);
                        sub_1000415CC((uint64_t)v169, type metadata accessor for AccountInfo);
                        sub_100041590(v174, &qword_100251F50);
LABEL_35:
                        char v66 = 0;
LABEL_36:
                        swift_release(v72);
                        swift_release(v74);
                        return v66 & 1;
                      }

                      uint64_t v129 = type metadata accessor for AccountInfo;
                      sub_1000415CC((uint64_t)v170, type metadata accessor for AccountInfo);
                      unint64_t v130 = &qword_100251F50;
                      sub_100041590(v94, &qword_100251F50);
                      uint64_t v131 = (uint64_t)v169;
LABEL_33:
                      sub_1000415CC(v131, v129);
                      uint64_t v80 = v89;
                      int v79 = v130;
                      goto LABEL_34;
                    }

                    goto LABEL_49;
                  }

                  uint64_t v144 = v113;
                  uint64_t v134 = v185;
                  sub_10000FC68(v144, (uint64_t)v185, &qword_100257000);
                  if (v117(v114, 1LL, v116) == 1)
                  {
                    sub_100041590(v95, &qword_100257000);
                    sub_1000415CC((uint64_t)v134, type metadata accessor for Metrics);
LABEL_49:
                    int v79 = &qword_1002563E8;
                    goto LABEL_27;
                  }

                  uint64_t v145 = v180;
                  sub_100041608(v114, (uint64_t)v180, type metadata accessor for Metrics);
                  uint64_t v146 = v134[1];
                  uint64_t v147 = v145[1];
                  if (*v134 == *v145 && v146 == v147
                    || (_stringCompareWithSmolCheck(_:_:expecting:)(*v134, v146, *v145, v147, 0LL) & 1) != 0)
                  {
                    if ((uint64_t v148 = v134[2], v149 = v134[3], v150 = v145[2], v151 = v145[3], v148 == v150) && v149 == v151
                      || (_stringCompareWithSmolCheck(_:_:expecting:)(v148, v149, v150, v151, 0LL) & 1) != 0)
                    {
                      uint64_t v152 = *(int *)(v189 + 24);
                      uint64_t v153 = (char *)v134 + v152;
                      uint64_t v154 = (char *)v145 + v152;
                      uint64_t v155 = type metadata accessor for UnknownStorage(0LL);
                      uint64_t v156 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                      LOBYTE(v153) = dispatch thunk of static Equatable.== infix(_:_:)(v153, v154, v155, v156);
                      sub_1000415CC((uint64_t)v145, type metadata accessor for Metrics);
                      sub_100041590(v95, &qword_100257000);
                      sub_1000415CC((uint64_t)v134, type metadata accessor for Metrics);
                      sub_100041590(v190, &qword_100257000);
                      goto LABEL_57;
                    }
                  }

                  uint64_t v129 = type metadata accessor for Metrics;
                  sub_1000415CC((uint64_t)v145, type metadata accessor for Metrics);
                  unint64_t v130 = &qword_100257000;
                  uint64_t v143 = v95;
LABEL_46:
                  sub_100041590(v143, v130);
                  uint64_t v131 = (uint64_t)v134;
                  goto LABEL_33;
                }

                sub_100041590(v205, &qword_100256CA0);
                sub_1000415CC((uint64_t)v134, type metadata accessor for SignedPeerDynamicInfo);
              }

              int v79 = &qword_100256448;
LABEL_27:
              uint64_t v80 = v89;
              goto LABEL_34;
            }
          }

          else
          {
            uint64_t v118 = v197;
            sub_10000FC68(v89, (uint64_t)v197, &qword_100251F18);
            int v119 = v90(v87, 1LL, v92);
            uint64_t v95 = (uint64_t)v200;
            uint64_t v96 = v205;
            if (v119 != 1)
            {
              uint64_t v120 = v196;
              sub_100041608(v87, v196, type metadata accessor for SignedPeerStableInfo);
              sub_100041318(*v118, v118[1]);
              if ((v121 & 1) == 0 || (sub_100041318(v118[2], v118[3]), (v122 & 1) == 0))
              {
                uint64_t v129 = type metadata accessor for SignedPeerStableInfo;
                sub_1000415CC(v120, type metadata accessor for SignedPeerStableInfo);
                unint64_t v130 = &qword_100251F18;
                sub_100041590(v208, &qword_100251F18);
                uint64_t v131 = (uint64_t)v118;
                goto LABEL_33;
              }

              uint64_t v123 = *(int *)(v204 + 24);
              char v124 = (char *)v118 + v123;
              uint64_t v125 = v120 + v123;
              uint64_t v126 = v89;
              uint64_t v127 = type metadata accessor for UnknownStorage(0LL);
              uint64_t v128 = sub_1000077B8( &qword_100251628,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              LOBYTE(v124) = dispatch thunk of static Equatable.== infix(_:_:)(v124, v125, v127, v128);
              sub_1000415CC(v120, type metadata accessor for SignedPeerStableInfo);
              sub_100041590(v208, &qword_100251F18);
              uint64_t v94 = (uint64_t)v198;
              sub_1000415CC((uint64_t)v197, type metadata accessor for SignedPeerStableInfo);
              sub_100041590(v126, &qword_100251F18);
              goto LABEL_17;
            }

            sub_100041590(v208, &qword_100251F18);
            sub_1000415CC((uint64_t)v118, type metadata accessor for SignedPeerStableInfo);
          }

          int v79 = &qword_100256450;
          goto LABEL_27;
        }

        uint64_t v72 = v60;
        swift_retain(v60);
        swift_retain(v74);
        sub_100041590((uint64_t)v59, &qword_100251F58);
        sub_1000415CC((uint64_t)v78, type metadata accessor for Peer);
      }

      int v79 = &qword_100256458;
      uint64_t v80 = (uint64_t)v52;
LABEL_34:
      sub_100041590(v80, v79);
      goto LABEL_35;
    }
  }

  return v66 & 1;
}

Swift::Int AddCustodianRecoveryKeyRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for AddCustodianRecoveryKeyRequest,  &qword_100252230,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
}

uint64_t sub_100093210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0D0C(a1, &qword_100250D90, &qword_100251EC8, (uint64_t)sub_10009099C, a2);
}

uint64_t sub_10009322C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AddCustodianRecoveryKeyRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100093240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AddCustodianRecoveryKeyRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100093254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562B8,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000932A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D88,  (uint64_t)static AddCustodianRecoveryKeyRequest._protobuf_nameMap,  (uint64_t)sub_100090680,  a1);
}

uint64_t sub_1000932C0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100257070,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100093300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100257070,  type metadata accessor for AddCustodianRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *AddCustodianRecoveryKeyResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AddCustodianRecoveryKeyResponse.protoMessageName;
}

unint64_t static AddCustodianRecoveryKeyResponse.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_100093378()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static AddCustodianRecoveryKeyResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static AddCustodianRecoveryKeyResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE420;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "changes";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "zone_key_hierarchy_records";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t AddCustodianRecoveryKeyResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250D98,  (uint64_t)static AddCustodianRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_100093378);
}

uint64_t static AddCustodianRecoveryKeyResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250D98,  (uint64_t)static AddCustodianRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_100093378,  a1);
}

uint64_t AddCustodianRecoveryKeyResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008BF60(a1, a2, a3, type metadata accessor for AddCustodianRecoveryKeyResponse);
}

uint64_t AddCustodianRecoveryKeyResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100093548( a1,  a2,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_100093640,  (void (*)(void))type metadata accessor for AddCustodianRecoveryKeyResponse);
}

uint64_t sub_100093548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t, uint64_t), void (*a5)(void))
{
  uint64_t result = a4(v5, a1, a2, a3);
  if (!v6)
  {
    uint64_t v12 = *v5;
    if (*(void *)(*v5 + 16))
    {
      uint64_t v13 = type metadata accessor for Ckcode_RecordTransport(0LL);
      uint64_t v14 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v12, 2LL, v13, v14, a2, a3);
    }

    a5(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100093640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Changes(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for AddCustodianRecoveryKeyResponse(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t *)&unk_100256C90);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Changes);
  uint64_t v17 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Changes);
}

uint64_t static AddCustodianRecoveryKeyResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AF178(a1, a2, (uint64_t *)type metadata accessor for AddCustodianRecoveryKeyResponse) & 1;
}

Swift::Int AddCustodianRecoveryKeyResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for AddCustodianRecoveryKeyResponse,  &qword_100252238,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
}

uint64_t sub_1000937F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AddCustodianRecoveryKeyResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100093804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AddCustodianRecoveryKeyResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100093818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562B0,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100093868@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250D98,  (uint64_t)static AddCustodianRecoveryKeyResponse._protobuf_nameMap,  (uint64_t)sub_100093378,  a1);
}

uint64_t sub_100093884(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002527C8,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000938C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002527C8,  type metadata accessor for AddCustodianRecoveryKeyResponse,  (uint64_t)&protocol conformance descriptor for AddCustodianRecoveryKeyResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchChangesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchChangesRequest.protoMessageName;
}

unint64_t static FetchChangesRequest.protoMessageName.getter()
{
  return 0xD000000000000013LL;
}

uint64_t sub_10009393C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static FetchChangesRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static FetchChangesRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "change_token";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "metrics";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "accountInfo";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t FetchChangesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250DA0, (uint64_t)static FetchChangesRequest._protobuf_nameMap, (uint64_t)sub_10009393C);
}

uint64_t static FetchChangesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DA0,  (uint64_t)static FetchChangesRequest._protobuf_nameMap,  (uint64_t)sub_10009393C,  a1);
}

uint64_t FetchChangesRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100095668(a1, a2, a3, type metadata accessor for FetchChangesRequest);
}

uint64_t FetchChangesRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000957B4( a1,  a2,  a3,  (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))sub_100093B5C,  (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_100093CD0,  (void (*)(void))type metadata accessor for FetchChangesRequest);
}

uint64_t sub_100093B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  sub_10000FC68(a1 + *(int *)(ChangesRequest + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_100093CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ChangesRequest = type metadata accessor for FetchChangesRequest(0LL);
  sub_10000FC68(a1 + *(int *)(ChangesRequest + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int FetchChangesRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchChangesRequest,  &qword_100252240,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
}

uint64_t sub_100093E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchChangesRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100093E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchChangesRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100093E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562A8,  type metadata accessor for FetchChangesRequest,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100093EDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DA0,  (uint64_t)static FetchChangesRequest._protobuf_nameMap,  (uint64_t)sub_10009393C,  a1);
}

uint64_t sub_100093EF8(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100256FB0,  type metadata accessor for FetchChangesRequest,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100093F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100256FB0,  type metadata accessor for FetchChangesRequest,  (uint64_t)&protocol conformance descriptor for FetchChangesRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchChangesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchChangesResponse.protoMessageName;
}

unint64_t static FetchChangesResponse.protoMessageName.getter()
{
  return 0xD000000000000014LL;
}

uint64_t sub_100093FB0(uint64_t a1)
{
  return sub_10009D55C(a1, static FetchChangesResponse._protobuf_nameMap, (uint64_t)"changes", 7LL);
}

uint64_t FetchChangesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250DA8, (uint64_t)static FetchChangesResponse._protobuf_nameMap, (uint64_t)sub_100093FB0);
}

uint64_t static FetchChangesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DA8,  (uint64_t)static FetchChangesResponse._protobuf_nameMap,  (uint64_t)sub_100093FB0,  a1);
}

uint64_t FetchChangesResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FA48(a1, a2, a3, type metadata accessor for FetchChangesResponse);
}

uint64_t FetchChangesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FB1C(a1, a2, a3, type metadata accessor for FetchChangesResponse);
}

uint64_t sub_100094038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v21 = a4;
  uint64_t v20 = a3;
  uint64_t v7 = sub_100007578((uint64_t *)&unk_100256C90);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Changes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a5(0LL);
  sub_10000FC68(a1 + *(int *)(v16 + 20), (uint64_t)v10, (uint64_t *)&unk_100256C90);
  sub_100041608((uint64_t)v10, (uint64_t)v15, type metadata accessor for Changes);
  uint64_t v18 = sub_1000077B8( &qword_100252628,  type metadata accessor for Changes,  (uint64_t)&protocol conformance descriptor for Changes);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 1LL, v11, v18, v20, v21);
  return sub_1000415CC((uint64_t)v15, type metadata accessor for Changes);
}

Swift::Int FetchChangesResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchChangesResponse,  &qword_100252248,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
}

uint64_t sub_1000941D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchChangesResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000941E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchChangesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000941F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002562A0,  type metadata accessor for FetchChangesResponse,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100094248(uint64_t a1)
{
  return sub_1000AD020(v1, a1, type metadata accessor for FetchChangesResponse) & 1;
}

uint64_t sub_100094270@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DA8,  (uint64_t)static FetchChangesResponse._protobuf_nameMap,  (uint64_t)sub_100093FB0,  a1);
}

uint64_t sub_10009428C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002527F0,  type metadata accessor for FetchChangesResponse,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000942CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002527F0,  type metadata accessor for FetchChangesResponse,  (uint64_t)&protocol conformance descriptor for FetchChangesResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchViableBottlesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchViableBottlesRequest.protoMessageName;
}

unint64_t static FetchViableBottlesRequest.protoMessageName.getter()
{
  return 0xD000000000000019LL;
}

uint64_t sub_100094344()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static FetchViableBottlesRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static FetchViableBottlesRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "filter_request";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "metrics";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "accountInfo";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t FetchViableBottlesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DB0,  (uint64_t)static FetchViableBottlesRequest._protobuf_nameMap,  (uint64_t)sub_100094344);
}

uint64_t static FetchViableBottlesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DB0,  (uint64_t)static FetchViableBottlesRequest._protobuf_nameMap,  (uint64_t)sub_100094344,  a1);
}

uint64_t FetchViableBottlesRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v12 = v11;
        sub_1000A50A4( a1,  v5,  a2,  a3,  type metadata accessor for FetchViableBottlesRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
        goto LABEL_5;
      }

      if (result == 1)
      {
        unint64_t v13 = sub_1000B67E8();
        uint64_t v12 = v11;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v5,  &type metadata for FilteringRequest,  v13,  a2,  a3);
        goto LABEL_5;
      }

uint64_t FetchViableBottlesRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)v3
    || (char v8 = *(_BYTE *)(v3 + 8),
        uint64_t v11 = *(void *)v3,
        char v12 = v8,
        unint64_t v9 = sub_1000B67E8(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v11,  1LL,  &type metadata for FilteringRequest,  v9,  a2,  a3),  !v4))
  {
    uint64_t result = sub_10009475C(v3, a1, a2, a3);
    if (!v4)
    {
      sub_1000948D0(v3, a1, a2, a3);
      type metadata accessor for FetchViableBottlesRequest(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_10009475C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ViableBottlesRequest = type metadata accessor for FetchViableBottlesRequest(0LL);
  sub_10000FC68(a1 + *(int *)(ViableBottlesRequest + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_1000948D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ViableBottlesRequest = type metadata accessor for FetchViableBottlesRequest(0LL);
  sub_10000FC68(a1 + *(int *)(ViableBottlesRequest + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int FetchViableBottlesRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchViableBottlesRequest,  &qword_100252258,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
}

uint64_t sub_100094A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 1;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_100094AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchViableBottlesRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100094B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchViableBottlesRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100094B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256298,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100094B6C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DB0,  (uint64_t)static FetchViableBottlesRequest._protobuf_nameMap,  (uint64_t)sub_100094344,  a1);
}

uint64_t sub_100094B88(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( (unint64_t *)&unk_100257020,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100094BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( (unint64_t *)&unk_100257020,  type metadata accessor for FetchViableBottlesRequest,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchViableBottlesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchViableBottlesResponse.protoMessageName;
}

unint64_t static FetchViableBottlesResponse.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_100094C40()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static FetchViableBottlesResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static FetchViableBottlesResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC40;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "viable_bottles";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "partial_bottles";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 15LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "legacy_records";
  *((void *)v15 + 1) = 14LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "total_escrow_records";
  *((void *)v17 + 1) = 20LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "total_escrow_records_fully_viable";
  *((void *)v19 + 1) = 33LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "total_escrow_records_partially_viable";
  *((void *)v21 + 1) = 37LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "total_escrow_records_legacy";
  *((void *)v23 + 1) = 27LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t FetchViableBottlesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DB8,  (uint64_t)static FetchViableBottlesResponse._protobuf_nameMap,  (uint64_t)sub_100094C40);
}

uint64_t static FetchViableBottlesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DB8,  (uint64_t)static FetchViableBottlesResponse._protobuf_nameMap,  (uint64_t)sub_100094C40,  a1);
}

uint64_t FetchViableBottlesResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = type metadata accessor for EscrowPair(0LL);
          uint64_t v10 = sub_1000077B8( &qword_100252260,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
          uint64_t v11 = v3;
          goto LABEL_8;
        case 2LL:
          uint64_t v9 = type metadata accessor for EscrowPair(0LL);
          uint64_t v10 = sub_1000077B8( &qword_100252260,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair);
          uint64_t v11 = v3 + 8;
          goto LABEL_8;
        case 3LL:
          uint64_t v9 = type metadata accessor for EscrowInformation(0LL);
          uint64_t v10 = sub_1000077B8( &qword_100252268,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
          uint64_t v11 = v3 + 16;
LABEL_8:
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v11, v9, v10, a2, a3);
          break;
        case 4LL:
          uint64_t v12 = v3 + 24;
          goto LABEL_13;
        case 5LL:
          uint64_t v12 = v3 + 32;
          goto LABEL_13;
        case 6LL:
          uint64_t v12 = v3 + 40;
          goto LABEL_13;
        case 7LL:
          uint64_t v12 = v3 + 48;
LABEL_13:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v12, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t FetchViableBottlesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *v5;
  if (!*(void *)(*v5 + 16LL)
    || (uint64_t v10 = type metadata accessor for EscrowPair(0LL),
        v11 = sub_1000077B8( &qword_100252260,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 1LL, v10, v11, a2, a3),  !v4))
  {
    uint64_t v13 = v5[1];
    if (!*(void *)(v13 + 16)
      || (uint64_t v14 = type metadata accessor for EscrowPair(0LL),
          v15 = sub_1000077B8( &qword_100252260,  type metadata accessor for EscrowPair,  (uint64_t)&protocol conformance descriptor for EscrowPair),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v13,  2LL,  v14,  v15,  a2,  a3),  !v4))
    {
      uint64_t v16 = v5[2];
      if (!*(void *)(v16 + 16)
        || (uint64_t v17 = type metadata accessor for EscrowInformation(0LL),
            v18 = sub_1000077B8( &qword_100252268,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v16,  3LL,  v17,  v18,  a2,  a3),  !v4))
      {
        uint64_t v19 = v5[3];
        if (!v19
          || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v19, 4LL, a2, a3), !v4))
        {
          uint64_t v20 = v5[4];
          if (!v20
            || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v20, 5LL, a2, a3), !v4))
          {
            uint64_t v21 = v5[5];
            if (!v21
              || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v21, 6LL, a2, a3), !v4))
            {
              uint64_t v22 = v5[6];
              if (!v22
                || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v22, 7LL, a2, a3),
                    !v4))
              {
                type metadata accessor for FetchViableBottlesResponse(0LL);
                return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int FetchViableBottlesResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchViableBottlesResponse,  &qword_100252270,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
}

uint64_t sub_1000952D4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = _swiftEmptyArrayStorage;
  *(void *)(a1 + _Block_object_dispose(va, 8) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 16) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t (*sub_100095314())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_100095328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchViableBottlesResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009533C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchViableBottlesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100095350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256290,  type metadata accessor for FetchViableBottlesResponse,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000953A0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DB8,  (uint64_t)static FetchViableBottlesResponse._protobuf_nameMap,  (uint64_t)sub_100094C40,  a1);
}

uint64_t sub_1000953BC(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252818,  type metadata accessor for FetchViableBottlesResponse,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000953FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252818,  type metadata accessor for FetchViableBottlesResponse,  (uint64_t)&protocol conformance descriptor for FetchViableBottlesResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchRecoverableTLKSharesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchRecoverableTLKSharesRequest.protoMessageName;
}

unint64_t static FetchRecoverableTLKSharesRequest.protoMessageName.getter()
{
  return 0xD000000000000020LL;
}

uint64_t sub_100095474()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static FetchRecoverableTLKSharesRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static FetchRecoverableTLKSharesRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "peer_id";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "metrics";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "accountInfo";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t FetchRecoverableTLKSharesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DC0,  (uint64_t)static FetchRecoverableTLKSharesRequest._protobuf_nameMap,  (uint64_t)sub_100095474);
}

uint64_t static FetchRecoverableTLKSharesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DC0,  (uint64_t)static FetchRecoverableTLKSharesRequest._protobuf_nameMap,  (uint64_t)sub_100095474,  a1);
}

uint64_t FetchRecoverableTLKSharesRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100095668(a1, a2, a3, type metadata accessor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_100095668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v12 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          sub_1000A5148( a1,  v7,  a2,  a3,  a4,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          break;
        case 2LL:
          sub_1000A50A4( a1,  v7,  a2,  a3,  a4,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
        case 1LL:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v7, a2, a3);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t FetchRecoverableTLKSharesRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000957B4( a1,  a2,  a3,  (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))sub_1000958B0,  (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_100095A24,  (void (*)(void))type metadata accessor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_1000957B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t), void (*a5)(void *, uint64_t, uint64_t, uint64_t), void (*a6)(void))
{
  unint64_t v14 = v6[1];
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v15 = *v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v7))
  {
    uint64_t result = a4(v6, a1, a2, a3);
    if (!v7)
    {
      a5(v6, a1, a2, a3);
      a6(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000958B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecoverableTLKSharesRequest = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  sub_10000FC68(a1 + *(int *)(RecoverableTLKSharesRequest + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_100095A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecoverableTLKSharesRequest = type metadata accessor for FetchRecoverableTLKSharesRequest(0LL);
  sub_10000FC68(a1 + *(int *)(RecoverableTLKSharesRequest + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int FetchRecoverableTLKSharesRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchRecoverableTLKSharesRequest,  &qword_100252278,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
}

uint64_t sub_100095BB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_100095C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchRecoverableTLKSharesRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100095C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchRecoverableTLKSharesRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100095C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256288,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100095CC0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DC0,  (uint64_t)static FetchRecoverableTLKSharesRequest._protobuf_nameMap,  (uint64_t)sub_100095474,  a1);
}

uint64_t sub_100095CDC(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252830,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100095D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252830,  type metadata accessor for FetchRecoverableTLKSharesRequest,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchRecoverableTLKSharesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchRecoverableTLKSharesResponse.protoMessageName;
}

unint64_t static FetchRecoverableTLKSharesResponse.protoMessageName.getter()
{
  return 0xD000000000000021LL;
}

uint64_t sub_100095D94(uint64_t a1)
{
  return sub_10009D55C(a1, static FetchRecoverableTLKSharesResponse._protobuf_nameMap, (uint64_t)"views", 5LL);
}

uint64_t FetchRecoverableTLKSharesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DC8,  (uint64_t)static FetchRecoverableTLKSharesResponse._protobuf_nameMap,  (uint64_t)sub_100095D94);
}

uint64_t static FetchRecoverableTLKSharesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DC8,  (uint64_t)static FetchRecoverableTLKSharesResponse._protobuf_nameMap,  (uint64_t)sub_100095D94,  a1);
}

uint64_t FetchRecoverableTLKSharesResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100096F74( a1,  a2,  a3,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  &qword_100252280,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t FetchRecoverableTLKSharesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100097070( a1,  a2,  a3,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  &qword_100252280,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View,  (void (*)(void))type metadata accessor for FetchRecoverableTLKSharesResponse);
}

uint64_t static FetchRecoverableTLKSharesResponse.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000A7990(a1, a2, sub_10003D5BC, type metadata accessor for FetchRecoverableTLKSharesResponse) & 1;
}

Swift::Int FetchRecoverableTLKSharesResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchRecoverableTLKSharesResponse,  &qword_100252288,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
}

uint64_t sub_100095E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchRecoverableTLKSharesResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100095E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchRecoverableTLKSharesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100095EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256280,  type metadata accessor for FetchRecoverableTLKSharesResponse,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100095F00@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DC8,  (uint64_t)static FetchRecoverableTLKSharesResponse._protobuf_nameMap,  (uint64_t)sub_100095D94,  a1);
}

uint64_t sub_100095F1C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252848,  type metadata accessor for FetchRecoverableTLKSharesResponse,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100095F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252848,  type metadata accessor for FetchRecoverableTLKSharesResponse,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchRecoverableTLKSharesResponse.View.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchRecoverableTLKSharesResponse.View.protoMessageName;
}

unint64_t static FetchRecoverableTLKSharesResponse.View.protoMessageName.getter()
{
  return 0xD000000000000026LL;
}

uint64_t sub_100095FD4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static FetchRecoverableTLKSharesResponse.View._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static FetchRecoverableTLKSharesResponse.View._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "view";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "keys";
  *((void *)v13 + 1) = 4LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "tlk_shares";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 10LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t FetchRecoverableTLKSharesResponse.View._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DD0,  (uint64_t)static FetchRecoverableTLKSharesResponse.View._protobuf_nameMap,  (uint64_t)sub_100095FD4);
}

uint64_t static FetchRecoverableTLKSharesResponse.View._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DD0,  (uint64_t)static FetchRecoverableTLKSharesResponse.View._protobuf_nameMap,  (uint64_t)sub_100095FD4,  a1);
}

uint64_t FetchRecoverableTLKSharesResponse.View.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v14 = v11;
        sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  type metadata accessor for ViewKeysRecords,  &qword_1002525F0,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v14 = v11;
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v5, a2, a3);
        goto LABEL_5;
      }

uint64_t FetchRecoverableTLKSharesResponse.View.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v8), !v4))
  {
    uint64_t result = sub_100096414((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      uint64_t v11 = v3[2];
      if (*(void *)(v11 + 16))
      {
        uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
        uint64_t v13 = sub_1000077B8( &qword_1002521C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v11, 3LL, v12, v13, a2, a3);
      }

      type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_100096414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251648);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ViewKeysRecords(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecoverableTLKShares = type metadata accessor for FetchRecoverableTLKSharesResponse.View(0LL);
  sub_10000FC68(a1 + *(int *)(RecoverableTLKShares + 28), (uint64_t)v9, &qword_100251648);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for ViewKeysRecords);
  uint64_t v17 = sub_1000077B8( &qword_1002525F0,  type metadata accessor for ViewKeysRecords,  (uint64_t)&protocol conformance descriptor for ViewKeysRecords);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for ViewKeysRecords);
}

Swift::Int FetchRecoverableTLKSharesResponse.View.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchRecoverableTLKSharesResponse.View,  &qword_100252290,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
}

uint64_t sub_1000965A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = _swiftEmptyArrayStorage;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for ViewKeysRecords(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_100096610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchRecoverableTLKSharesResponse.View.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100096624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchRecoverableTLKSharesResponse.View.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100096638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256278,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100096688@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DD0,  (uint64_t)static FetchRecoverableTLKSharesResponse.View._protobuf_nameMap,  (uint64_t)sub_100095FD4,  a1);
}

uint64_t sub_1000966A4(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252280,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000966E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252280,  type metadata accessor for FetchRecoverableTLKSharesResponse.View,  (uint64_t)&protocol conformance descriptor for FetchRecoverableTLKSharesResponse.View);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchPolicyDocumentsRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchPolicyDocumentsRequest.protoMessageName;
}

unint64_t static FetchPolicyDocumentsRequest.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10009675C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static FetchPolicyDocumentsRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static FetchPolicyDocumentsRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "keys";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "metrics";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "accountInfo";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t FetchPolicyDocumentsRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DD8,  (uint64_t)static FetchPolicyDocumentsRequest._protobuf_nameMap,  (uint64_t)sub_10009675C);
}

uint64_t static FetchPolicyDocumentsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DD8,  (uint64_t)static FetchPolicyDocumentsRequest._protobuf_nameMap,  (uint64_t)sub_10009675C,  a1);
}

uint64_t FetchPolicyDocumentsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A23D4( a1,  a2,  a3,  type metadata accessor for PolicyDocumentKey,  &qword_100252298,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey,  type metadata accessor for FetchPolicyDocumentsRequest);
}

uint64_t FetchPolicyDocumentsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)v3;
  if (!*(void *)(*(void *)v3 + 16LL)
    || (uint64_t v9 = type metadata accessor for PolicyDocumentKey(0LL),
        v10 = sub_1000077B8( &qword_100252298,  type metadata accessor for PolicyDocumentKey,  (uint64_t)&protocol conformance descriptor for PolicyDocumentKey),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1LL, v9, v10, a2, a3),  !v4))
  {
    uint64_t result = sub_100096A6C(v3, a1, a2, a3);
    if (!v4)
    {
      sub_100096BE0(v3, a1, a2, a3);
      type metadata accessor for FetchPolicyDocumentsRequest(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_100096A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t PolicyDocumentsRequest = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  sub_10000FC68(a1 + *(int *)(PolicyDocumentsRequest + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_100096BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t PolicyDocumentsRequest = type metadata accessor for FetchPolicyDocumentsRequest(0LL);
  sub_10000FC68(a1 + *(int *)(PolicyDocumentsRequest + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int FetchPolicyDocumentsRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchPolicyDocumentsRequest,  &qword_1002522A0,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
}

uint64_t sub_100096D70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10009BE08(a1, (uint64_t)_swiftEmptyArrayStorage, a2);
}

uint64_t sub_100096D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchPolicyDocumentsRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100096D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchPolicyDocumentsRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100096DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256270,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100096DF4(char *a1)
{
  return sub_1000AAC5C(v1, a1, (uint64_t)sub_10003EE24, (char *)type metadata accessor for FetchPolicyDocumentsRequest) & 1;
}

uint64_t sub_100096E24@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DD8,  (uint64_t)static FetchPolicyDocumentsRequest._protobuf_nameMap,  (uint64_t)sub_10009675C,  a1);
}

uint64_t sub_100096E40(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100096E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256DA0,  type metadata accessor for FetchPolicyDocumentsRequest,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *FetchPolicyDocumentsResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static FetchPolicyDocumentsResponse.protoMessageName;
}

unint64_t static FetchPolicyDocumentsResponse.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100096EF8(uint64_t a1)
{
  return sub_10009D55C(a1, static FetchPolicyDocumentsResponse._protobuf_nameMap, (uint64_t)"entries", 7LL);
}

uint64_t FetchPolicyDocumentsResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DE0,  (uint64_t)static FetchPolicyDocumentsResponse._protobuf_nameMap,  (uint64_t)sub_100096EF8);
}

uint64_t static FetchPolicyDocumentsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DE0,  (uint64_t)static FetchPolicyDocumentsResponse._protobuf_nameMap,  (uint64_t)sub_100096EF8,  a1);
}

uint64_t FetchPolicyDocumentsResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100096F74( a1,  a2,  a3,  type metadata accessor for PolicyDocumentMapEntry,  &qword_1002522A8,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry);
}

uint64_t sub_100096F74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v13 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v13, i);
    if (v7 || (v16 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v17 = a4(0LL);
      uint64_t v18 = sub_1000077B8(a5, a4, a6);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v6, v17, v18, a2, a3);
    }

    uint64_t v7 = 0LL;
    uint64_t v13 = a2;
  }

  return result;
}

uint64_t FetchPolicyDocumentsResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100097070( a1,  a2,  a3,  type metadata accessor for PolicyDocumentMapEntry,  &qword_1002522A8,  (uint64_t)&protocol conformance descriptor for PolicyDocumentMapEntry,  (void (*)(void))type metadata accessor for FetchPolicyDocumentsResponse);
}

uint64_t sub_100097070( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v9 = v7;
  uint64_t v10 = a3;
  uint64_t v13 = *v9;
  if (*(void *)(*v9 + 16))
  {
    uint64_t v23 = a7;
    uint64_t v17 = a4(0LL);
    uint64_t v18 = sub_1000077B8(a5, a4, a6);
    uint64_t v19 = v17;
    uint64_t v10 = a3;
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v13, 1LL, v19, v18, a2, a3);
    a7 = v23;
    uint64_t v21 = a1;
    if (v8) {
      return result;
    }
  }

  else
  {
    uint64_t v21 = a1;
  }

  a7(0LL);
  return UnknownStorage.traverse<A>(visitor:)(v21, a2, v10);
}

Swift::Int FetchPolicyDocumentsResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for FetchPolicyDocumentsResponse,  &qword_1002522B0,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
}

uint64_t sub_100097184@<X0>(void *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_1000971AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchPolicyDocumentsResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000971C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FetchPolicyDocumentsResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000971D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256268,  type metadata accessor for FetchPolicyDocumentsResponse,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100097228@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DE0,  (uint64_t)static FetchPolicyDocumentsResponse._protobuf_nameMap,  (uint64_t)sub_100096EF8,  a1);
}

uint64_t sub_100097244(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252880,  type metadata accessor for FetchPolicyDocumentsResponse,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100097284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252880,  type metadata accessor for FetchPolicyDocumentsResponse,  (uint64_t)&protocol conformance descriptor for FetchPolicyDocumentsResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *GetRepairActionRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static GetRepairActionRequest.protoMessageName;
}

unint64_t static GetRepairActionRequest.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000972FC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static GetRepairActionRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static GetRepairActionRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC30;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "peer_id";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "requires_escrow_check";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 21LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "known_federations";
  *((void *)v14 + 1) = 17LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  char v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)char v16 = "perform_cleanup";
  *((void *)v16 + 1) = 15LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "metrics";
  *((void *)v18 + 1) = 7LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "accountInfo";
  *((void *)v20 + 1) = 11LL;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t GetRepairActionRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DE8,  (uint64_t)static GetRepairActionRequest._protobuf_nameMap,  (uint64_t)sub_1000972FC);
}

uint64_t static GetRepairActionRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DE8,  (uint64_t)static GetRepairActionRequest._protobuf_nameMap,  (uint64_t)sub_1000972FC,  a1);
}

uint64_t GetRepairActionRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v5, a2, a3);
          break;
        case 2LL:
          uint64_t v11 = v5 + 16;
          goto LABEL_5;
        case 3LL:
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)(v5 + 24, a2, a3);
          break;
        case 4LL:
          uint64_t v11 = v5 + 32;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v11, a2, a3);
          break;
        case 5LL:
          sub_1000976DC( a1,  v5,  a2,  a3,  type metadata accessor for GetRepairActionRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
        case 6LL:
          sub_10009CB08( a1,  v5,  a2,  a3,  type metadata accessor for GetRepairActionRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000976DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 36);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t GetRepairActionRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v5, v9), !v4))
  {
    if (*(_BYTE *)(v5 + 16) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 2LL, a2, a3), !v4))
    {
      if (!*(void *)(*(void *)(v5 + 24) + 16LL)
        || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v4))
      {
        if (*(_BYTE *)(v5 + 32) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 4LL, a2, a3), !v4))
        {
          uint64_t result = sub_1000978E0(v5, a1, a2, a3);
          if (!v4)
          {
            sub_100097A54(v5, a1, a2, a3);
            type metadata accessor for GetRepairActionRequest(0LL);
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000978E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  sub_10000FC68(a1 + *(int *)(RepairActionRequest + 36), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_100097A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RepairActionRequest = type metadata accessor for GetRepairActionRequest(0LL);
  sub_10000FC68(a1 + *(int *)(RepairActionRequest + 40), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int GetRepairActionRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for GetRepairActionRequest,  &qword_1002522B8,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
}

uint64_t sub_100097BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(_BYTE *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 32) = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Metrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 40);
  uint64_t v7 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_100097C8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100097CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_100097D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetRepairActionRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100097D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetRepairActionRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100097D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256260,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100097D84@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DE8,  (uint64_t)static GetRepairActionRequest._protobuf_nameMap,  (uint64_t)sub_1000972FC,  a1);
}

uint64_t sub_100097DA0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252898,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100097DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252898,  type metadata accessor for GetRepairActionRequest,  (uint64_t)&protocol conformance descriptor for GetRepairActionRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *EscrowProxyFederationMoveRecordRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static EscrowProxyFederationMoveRecordRequest.protoMessageName;
}

unint64_t static EscrowProxyFederationMoveRecordRequest.protoMessageName.getter()
{
  return 0xD000000000000026LL;
}

uint64_t sub_100097E58()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static EscrowProxyFederationMoveRecordRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static EscrowProxyFederationMoveRecordRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC80;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "escrow_record_label";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 19LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "current_federation";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 18LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "intended_federation";
  *((void *)v14 + 1) = 19LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  char v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)char v16 = "metrics";
  *((void *)v16 + 1) = 7LL;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t EscrowProxyFederationMoveRecordRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DF0,  (uint64_t)static EscrowProxyFederationMoveRecordRequest._protobuf_nameMap,  (uint64_t)sub_100097E58);
}

uint64_t static EscrowProxyFederationMoveRecordRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DF0,  (uint64_t)static EscrowProxyFederationMoveRecordRequest._protobuf_nameMap,  (uint64_t)sub_100097E58,  a1);
}

uint64_t EscrowProxyFederationMoveRecordRequest.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = v5;
          goto LABEL_5;
        case 2LL:
          uint64_t v11 = v5 + 16;
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = v5 + 32;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v11, a2, a3);
          break;
        case 4LL:
          sub_100098160( a1,  v5,  a2,  a3,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100098160( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 32);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t EscrowProxyFederationMoveRecordRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v5, v9), !v4))
  {
    uint64_t v12 = v5[2];
    unint64_t v13 = v5[3];
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v12, v13), !v4))
    {
      uint64_t v15 = v5[4];
      unint64_t v16 = v5[5];
      uint64_t v17 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000LL) == 0) {
        uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
      }
      if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v15, v16), !v4))
      {
        uint64_t result = sub_10009832C((uint64_t)v5, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }

  return result;
}

uint64_t sub_10009832C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 32), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

Swift::Int EscrowProxyFederationMoveRecordRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for EscrowProxyFederationMoveRecordRequest,  &qword_1002522C0,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t sub_1000984C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  a2[4] = 0LL;
  a2[5] = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for Metrics(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t (*sub_10009852C())()
{
  return ResetReason.rawValue.getter;
}

uint64_t sub_100098540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowProxyFederationMoveRecordRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100098554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowProxyFederationMoveRecordRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100098568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256258,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000985B8@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DF0,  (uint64_t)static EscrowProxyFederationMoveRecordRequest._protobuf_nameMap,  (uint64_t)sub_100097E58,  a1);
}

uint64_t sub_1000985D4(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002528B0,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100098614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002528B0,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *GetRepairActionResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static GetRepairActionResponse.protoMessageName;
}

unint64_t static GetRepairActionResponse.protoMessageName.getter()
{
  return 0xD000000000000017LL;
}

uint64_t sub_100098690()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static GetRepairActionResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static GetRepairActionResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v54 = swift_allocObject(v1, v6 + 23 * v4, v5 | 7);
  *(_OWORD *)(v54 + 16) = xmmword_1001DEC90;
  uint64_t v7 = v54 + v6;
  uint64_t v8 = v54 + v6 + *(int *)(v2 + 48);
  *(void *)(v54 + v6) = 1LL;
  *(void *)uint64_t v8 = "repair_action";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 13LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v54 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "escrow_record_move_request";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 26LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v54 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "total_escrow_records";
  *((void *)v14 + 1) = 20LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v54 + v6 + 3 * v4);
  unint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)unint64_t v16 = "collectable_escrow_records";
  *((void *)v16 + 1) = 26LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v54 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "collected_escrow_records";
  *((void *)v18 + 1) = 24LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v54 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "escrow_record_garbage_collection_enabled";
  *((void *)v20 + 1) = 40LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v54 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "total_tlk_shares";
  *((void *)v22 + 1) = 16LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v54 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "collectable_tlk_shares";
  *((void *)v24 + 1) = 22LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v54 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "collected_tlk_shares";
  *(void *)(v25 + _Block_object_dispose(va, 8) = 20LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v54 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *uint64_t v26 = 10LL;
  *(void *)uint64_t v27 = "tlk_share_garbage_collection_enabled";
  *((void *)v27 + 1) = 36LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v54 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "total_peers";
  *((void *)v29 + 1) = 11LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v54 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *uint64_t v30 = 12LL;
  *(void *)uint64_t v31 = "trusted_peers";
  *((void *)v31 + 1) = 13LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v54 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  void *v32 = 13LL;
  *(void *)uint64_t v33 = "superfluous_peers";
  *((void *)v33 + 1) = 17LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v54 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "peers_cleanedup";
  *((void *)v35 + 1) = 15LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v54 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  *uint64_t v36 = 15LL;
  *(void *)uint64_t v37 = "superfluous_peers_cleanup_enabled";
  *((void *)v37 + 1) = 33LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v54 + v6 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  void *v38 = 16LL;
  *(void *)uint64_t v39 = "duplicate_escrow_records";
  *((void *)v39 + 1) = 24LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v54 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 17LL;
  *(void *)uint64_t v40 = "unsetHMACpeers";
  *(void *)(v40 + _Block_object_dispose(va, 8) = 14LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  uint64_t v41 = (void *)(v54 + v6 + 17 * v4);
  uint64_t v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 18LL;
  *(void *)uint64_t v42 = "updatedHMACpeers";
  *((void *)v42 + 1) = 16LL;
  v42[16] = 2;
  v11();
  uint64_t v43 = (void *)(v54 + v6 + 18 * v4);
  uint64_t v44 = (char *)v43 + *(int *)(v2 + 48);
  void *v43 = 19LL;
  *(void *)uint64_t v44 = "total_device_state_records";
  *((void *)v44 + 1) = 26LL;
  v44[16] = 2;
  v11();
  uint64_t v45 = (void *)(v54 + v6 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  *uint64_t v45 = 20LL;
  *(void *)uint64_t v46 = "collectable_device_state_records";
  *((void *)v46 + 1) = 32LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v54 + v6 + 20 * v4);
  uint64_t v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 21LL;
  *(void *)uint64_t v48 = "collected_device_state_records";
  *((void *)v48 + 1) = 30LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v54 + v6 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  *uint64_t v49 = 22LL;
  *(void *)uint64_t v50 = "tlk_share_deletion_failed";
  *((void *)v50 + 1) = 25LL;
  v50[16] = 2;
  v11();
  uint64_t v51 = (void *)(v54 + v6 + 22 * v4);
  uint64_t v52 = (char *)v51 + *(int *)(v2 + 48);
  *uint64_t v51 = 23LL;
  *(void *)uint64_t v52 = "device_state_record_deletion_failed";
  *((void *)v52 + 1) = 35LL;
  v52[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v54);
}

uint64_t GetRepairActionResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250DF8,  (uint64_t)static GetRepairActionResponse._protobuf_nameMap,  (uint64_t)sub_100098690);
}

uint64_t static GetRepairActionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250DF8,  (uint64_t)static GetRepairActionResponse._protobuf_nameMap,  (uint64_t)sub_100098690,  a1);
}

uint64_t sub_100098C80(uint64_t a1)
{
  return sub_10009EA98( a1,  type metadata accessor for GetRepairActionResponse._StorageClass,  sub_100098C9C,  &qword_100251ED0);
}

uint64_t sub_100098C9C()
{
  *(void *)(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  uint64_t v2 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords) = 0LL;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares) = 0LL;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup) = 0LL;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords) = 0LL;
  *(void *)(v0
            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords) = 0LL;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed) = 0;
  return v0;
}

uint64_t sub_100098DF0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t GetRepairActionResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for GetRepairActionResponse(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t RepairAction = type metadata accessor for GetRepairActionResponse._StorageClass(0LL);
    swift_allocObject(RepairAction, *(unsigned int *)(RepairAction + 48), *(unsigned __int16 *)(RepairAction + 52));
    uint64_t v11 = swift_retain(v9);
    uint64_t v12 = sub_1000B5DF0(v11);
    swift_release(v9);
    uint64_t v13 = *(void *)(v4 + v8);
    *(void *)(v4 + v_Block_object_dispose(va, 8) = v12;
    swift_release(v13);
  }

  uint64_t v14 = *(void *)(v4 + v8);
  uint64_t v15 = swift_retain(v14);
  sub_100098EF4(v15, a1, a2, a3);
  return swift_release(v14);
}

uint64_t sub_100098EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_100099248(a2, a1, a3, a4);
          break;
        case 2LL:
          sub_10009F698( a2,  a1,  a3,  a4,  &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  &qword_1002528B0,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
          break;
        case 3LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords;
          goto LABEL_5;
        case 4LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords;
          goto LABEL_5;
        case 5LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords;
          goto LABEL_5;
        case 6LL:
          uint64_t v16 = a2;
          uint64_t v17 = a1;
          uint64_t v18 = a3;
          uint64_t v19 = a4;
          uint64_t v20 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled;
          goto LABEL_31;
        case 7LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares;
          goto LABEL_5;
        case 8LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares;
          goto LABEL_5;
        case 9LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares;
          goto LABEL_5;
        case 10LL:
          uint64_t v16 = a2;
          uint64_t v17 = a1;
          uint64_t v18 = a3;
          uint64_t v19 = a4;
          uint64_t v20 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled;
          goto LABEL_31;
        case 11LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers;
          goto LABEL_5;
        case 12LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers;
          goto LABEL_5;
        case 13LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers;
          goto LABEL_5;
        case 14LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup;
          goto LABEL_5;
        case 15LL:
          uint64_t v16 = a2;
          uint64_t v17 = a1;
          uint64_t v18 = a3;
          uint64_t v19 = a4;
          uint64_t v20 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled;
          goto LABEL_31;
        case 16LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords;
          goto LABEL_5;
        case 17LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers;
          goto LABEL_5;
        case 18LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers;
          goto LABEL_5;
        case 19LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords;
          goto LABEL_5;
        case 20LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords;
          goto LABEL_5;
        case 21LL:
          uint64_t v11 = a2;
          uint64_t v12 = a1;
          uint64_t v13 = a3;
          uint64_t v14 = a4;
          uint64_t v15 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords;
LABEL_5:
          sub_10009F594(v11, v12, v13, v14, v15);
          break;
        case 22LL:
          uint64_t v16 = a2;
          uint64_t v17 = a1;
          uint64_t v18 = a3;
          uint64_t v19 = a4;
          uint64_t v20 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed;
          goto LABEL_31;
        case 23LL:
          uint64_t v16 = a2;
          uint64_t v17 = a1;
          uint64_t v18 = a3;
          uint64_t v19 = a4;
          uint64_t v20 = &OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed;
LABEL_31:
          sub_1000992D4(v16, v17, v18, v19, v20);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
    }
  }

  return result;
}

uint64_t sub_100099248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 33LL, 0LL);
  unint64_t v7 = sub_1000DBE84();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v6, &type metadata for RepairAction, v7, a3, a4);
  return swift_endAccess(v9);
}

uint64_t sub_1000992D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a2 + *a5;
  swift_beginAccess(v7, v9, 33LL, 0LL);
  dispatch thunk of Decoder.decodeSingularBoolField(value:)(v7, a3, a4);
  return swift_endAccess(v9);
}

uint64_t GetRepairActionResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100084134( a1,  a2,  a3,  type metadata accessor for GetRepairActionResponse,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100099378);
}

uint64_t sub_100099378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a1 + 16)
    || (char v9 = *(_BYTE *)(a1 + 24),
        uint64_t v53 = *(void *)(a1 + 16),
        char v54 = v9,
        unint64_t v10 = sub_1000DBE84(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v53,  1LL,  &type metadata for RepairAction,  v10,  a3,  a4),  !v4))
  {
    uint64_t result = sub_1000999FC(a1, a2, a3, a4);
    if (!v4)
    {
      uint64_t v12 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords,  &v53,  0LL,  0LL);
      if (*v12) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v12, 3LL, a3, a4);
      }
      uint64_t v13 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords,  v52,  0LL,  0LL);
      if (*v13) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v13, 4LL, a3, a4);
      }
      uint64_t v14 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords,  v51,  0LL,  0LL);
      if (*v14) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v14, 5LL, a3, a4);
      }
      uint64_t v15 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled,  v50,  0LL,  0LL);
      if (*v15 == 1) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 6LL, a3, a4);
      }
      uint64_t v16 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares,  v49,  0LL,  0LL);
      if (*v16) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v16, 7LL, a3, a4);
      }
      uint64_t v17 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares,  v48,  0LL,  0LL);
      if (*v17) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v17, 8LL, a3, a4);
      }
      uint64_t v18 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares,  v47,  0LL,  0LL);
      if (*v18) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v18, 9LL, a3, a4);
      }
      uint64_t v19 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled,  v46,  0LL,  0LL);
      if (*v19 == 1) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 10LL, a3, a4);
      }
      uint64_t v20 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers,  v45,  0LL,  0LL);
      if (*v20) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v20, 11LL, a3, a4);
      }
      uint64_t v21 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers,  v44,  0LL,  0LL);
      if (*v21) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v21, 12LL, a3, a4);
      }
      uint64_t v22 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers,  v43,  0LL,  0LL);
      if (*v22) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v22, 13LL, a3, a4);
      }
      uint64_t v23 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup,  v42,  0LL,  0LL);
      if (*v23) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v23, 14LL, a3, a4);
      }
      uint64_t v24 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled,  v41,  0LL,  0LL);
      if (*v24 == 1) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 15LL, a3, a4);
      }
      uint64_t v25 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords,  v40,  0LL,  0LL);
      if (*v25) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v25, 16LL, a3, a4);
      }
      uint64_t v26 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers,  v39,  0LL,  0LL);
      if (*v26) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v26, 17LL, a3, a4);
      }
      uint64_t v27 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers,  v38,  0LL,  0LL);
      if (*v27) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v27, 18LL, a3, a4);
      }
      uint64_t v28 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords,  v37,  0LL,  0LL);
      if (*v28) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v28, 19LL, a3, a4);
      }
      uint64_t v29 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords,  v36,  0LL,  0LL);
      if (*v29) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v29, 20LL, a3, a4);
      }
      uint64_t v30 = (void *)(a1
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords,  v35,  0LL,  0LL);
      if (*v30) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v30, 21LL, a3, a4);
      }
      uint64_t v31 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed,  v34,  0LL,  0LL);
      if (*v31 == 1) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 22LL, a3, a4);
      }
      uint64_t v32 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
      uint64_t result = swift_beginAccess(v32, &v33, 0LL, 0LL);
      if (*v32 == 1) {
        return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 23LL, a3, a4);
      }
    }
  }

  return result;
}

uint64_t sub_1000999FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256FF0);
  __chkstk_darwin(v6, v7);
  char v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  swift_beginAccess(v15, v19, 0LL, 0LL);
  sub_10000FC68(v15, (uint64_t)v9, (uint64_t *)&unk_100256FF0);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
  uint64_t v17 = sub_1000077B8( &qword_1002528B0,  type metadata accessor for EscrowProxyFederationMoveRecordRequest,  (uint64_t)&protocol conformance descriptor for EscrowProxyFederationMoveRecordRequest);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v20);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
}

uint64_t static GetRepairActionResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B52B8(a1, a2, type metadata accessor for GetRepairActionResponse, sub_100099BB0) & 1;
}

uint64_t sub_100099BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EscrowProxyFederationMoveRecordRequest(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100007578(&qword_100256438);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100007578((uint64_t *)&unk_100256FF0);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  char v101 = (void **)((char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v99 - v18;
  swift_beginAccess(a1 + 16, v147, 0LL, 0LL);
  uint64_t v20 = *(void *)(a1 + 16);
  swift_beginAccess(a2 + 16, v146, 0LL, 0LL);
  uint64_t v21 = *(void *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1) {
    __asm { BR              X10 }
  }

  if (v20 != v21) {
    goto LABEL_34;
  }
  uint64_t v99 = v8;
  uint64_t v100 = a2;
  uint64_t v22 = a1;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  swift_beginAccess(v23, v145, 0LL, 0LL);
  sub_10000FC68(v23, (uint64_t)v19, (uint64_t *)&unk_100256FF0);
  uint64_t v24 = v100;
  uint64_t v25 = v100
      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest;
  swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordMoveRequest,  v144,  0LL,  0LL);
  uint64_t v26 = (uint64_t)&v12[*(int *)(v9 + 48)];
  sub_10000FC68((uint64_t)v19, (uint64_t)v12, (uint64_t *)&unk_100256FF0);
  sub_10000FC68(v25, v26, (uint64_t *)&unk_100256FF0);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v27((uint64_t)v12, 1LL, v4) != 1)
  {
    uint64_t v28 = v101;
    sub_10000FC68((uint64_t)v12, (uint64_t)v101, (uint64_t *)&unk_100256FF0);
    if (v27(v26, 1LL, v4) != 1)
    {
      uint64_t v29 = v99;
      sub_100041608(v26, (uint64_t)v99, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
      swift_retain(v22);
      swift_retain(v24);
      char v30 = _s18TrustedPeersHelper38EscrowProxyFederationMoveRecordRequestV2eeoiySbAC_ACtFZ_0(v28, v29);
      sub_1000415CC((uint64_t)v29, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
      sub_100041590((uint64_t)v19, (uint64_t *)&unk_100256FF0);
      sub_1000415CC((uint64_t)v28, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
      uint64_t v24 = v100;
      sub_100041590((uint64_t)v12, (uint64_t *)&unk_100256FF0);
      if ((v30 & 1) == 0) {
        goto LABEL_32;
      }
      goto LABEL_11;
    }

    swift_retain(v22);
    swift_retain(v24);
    sub_100041590((uint64_t)v19, (uint64_t *)&unk_100256FF0);
    sub_1000415CC((uint64_t)v28, type metadata accessor for EscrowProxyFederationMoveRecordRequest);
LABEL_9:
    sub_100041590((uint64_t)v12, &qword_100256438);
    goto LABEL_32;
  }

  swift_retain(v22);
  swift_retain(v24);
  sub_100041590((uint64_t)v19, (uint64_t *)&unk_100256FF0);
  if (v27(v26, 1LL, v4) != 1) {
    goto LABEL_9;
  }
  sub_100041590((uint64_t)v12, (uint64_t *)&unk_100256FF0);
LABEL_11:
  uint64_t v31 = (uint64_t *)(v22
                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
  swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords,  v143,  0LL,  0LL);
  uint64_t v32 = *v31;
  uint64_t v33 = (void *)(v24
                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords);
  swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalEscrowRecords,  v142,  0LL,  0LL);
  if (v32 == *v33)
  {
    uint64_t v34 = (uint64_t *)(v22
                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
    swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords,  v141,  0LL,  0LL);
    uint64_t v35 = *v34;
    uint64_t v36 = (void *)(v24
                   + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords);
    swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableEscrowRecords,  &v140,  0LL,  0LL);
    if (v35 == *v36)
    {
      uint64_t v37 = (uint64_t *)(v22
                      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
      swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords,  &v139,  0LL,  0LL);
      uint64_t v38 = *v37;
      uint64_t v39 = (void *)(v24
                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords);
      swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedEscrowRecords,  &v138,  0LL,  0LL);
      if (v38 == *v39)
      {
        uint64_t v40 = (unsigned __int8 *)(v22
                                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
        swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled,  &v137,  0LL,  0LL);
        int v41 = *v40;
        uint64_t v42 = (unsigned __int8 *)(v24
                                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled);
        swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__escrowRecordGarbageCollectionEnabled,  &v136,  0LL,  0LL);
        if (v41 == *v42)
        {
          uint64_t v43 = (uint64_t *)(v22
                          + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
          swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares,  &v135,  0LL,  0LL);
          uint64_t v44 = *v43;
          uint64_t v45 = (void *)(v24
                         + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares);
          swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalTlkShares,  &v134,  0LL,  0LL);
          if (v44 == *v45)
          {
            uint64_t v46 = (uint64_t *)(v22
                            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
            swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares,  &v133,  0LL,  0LL);
            uint64_t v47 = *v46;
            uint64_t v48 = (void *)(v24
                           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares);
            swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableTlkShares,  &v132,  0LL,  0LL);
            if (v47 == *v48)
            {
              uint64_t v49 = (uint64_t *)(v22
                              + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
              swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares,  &v131,  0LL,  0LL);
              uint64_t v50 = *v49;
              uint64_t v51 = (void *)(v24
                             + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares);
              swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedTlkShares,  &v130,  0LL,  0LL);
              if (v50 == *v51)
              {
                uint64_t v52 = (unsigned __int8 *)(v22
                                        + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
                swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled,  &v129,  0LL,  0LL);
                int v53 = *v52;
                char v54 = (unsigned __int8 *)(v24
                                        + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled);
                swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareGarbageCollectionEnabled,  &v128,  0LL,  0LL);
                if (v53 == *v54)
                {
                  uint64_t v55 = (uint64_t *)(v22
                                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
                  swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers,  &v127,  0LL,  0LL);
                  uint64_t v56 = *v55;
                  uint64_t v57 = (void *)(v24
                                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers);
                  swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalPeers,  &v126,  0LL,  0LL);
                  if (v56 == *v57)
                  {
                    uint64_t v58 = (uint64_t *)(v22
                                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
                    swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers,  &v125,  0LL,  0LL);
                    uint64_t v59 = *v58;
                    uint64_t v60 = (void *)(v24
                                   + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers);
                    swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__trustedPeers,  &v124,  0LL,  0LL);
                    if (v59 == *v60)
                    {
                      uint64_t v61 = (uint64_t *)(v22
                                      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
                      swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers,  &v123,  0LL,  0LL);
                      uint64_t v62 = *v61;
                      uint64_t v63 = (void *)(v24
                                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers);
                      swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeers,  &v122,  0LL,  0LL);
                      if (v62 == *v63)
                      {
                        uint64_t v64 = (uint64_t *)(v22
                                        + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
                        swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup,  &v121,  0LL,  0LL);
                        uint64_t v65 = *v64;
                        char v66 = (void *)(v24
                                       + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup);
                        swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__peersCleanedup,  &v120,  0LL,  0LL);
                        if (v65 == *v66)
                        {
                          uint64_t v67 = (unsigned __int8 *)(v22
                                                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
                          swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled,  &v119,  0LL,  0LL);
                          int v68 = *v67;
                          uint64_t v69 = (unsigned __int8 *)(v24
                                                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled);
                          swift_beginAccess( v24 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__superfluousPeersCleanupEnabled,  &v118,  0LL,  0LL);
                          if (v68 == *v69)
                          {
                            uint64_t v70 = (uint64_t *)(v22
                                            + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
                            swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords,  &v117,  0LL,  0LL);
                            uint64_t v71 = *v70;
                            uint64_t v72 = (void *)(v100
                                           + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords);
                            swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__duplicateEscrowRecords,  &v116,  0LL,  0LL);
                            if (v71 == *v72)
                            {
                              uint64_t v73 = (uint64_t *)(v22
                                              + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
                              swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers,  &v115,  0LL,  0LL);
                              uint64_t v74 = *v73;
                              uint64_t v75 = (void *)(v100
                                             + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers);
                              swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__unsetHmacpeers,  &v114,  0LL,  0LL);
                              if (v74 == *v75)
                              {
                                uint64_t v76 = (uint64_t *)(v22
                                                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
                                swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers,  &v113,  0LL,  0LL);
                                uint64_t v77 = *v76;
                                uint64_t v78 = (void *)(v100
                                               + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers);
                                swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__updatedHmacpeers,  &v112,  0LL,  0LL);
                                if (v77 == *v78)
                                {
                                  int v79 = (uint64_t *)(v22
                                                  + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
                                  swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords,  &v111,  0LL,  0LL);
                                  uint64_t v80 = *v79;
                                  uint64_t v81 = (void *)(v100
                                                 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords);
                                  swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__totalDeviceStateRecords,  &v110,  0LL,  0LL);
                                  if (v80 == *v81)
                                  {
                                    char v82 = (uint64_t *)(v22
                                                    + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
                                    swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords,  &v109,  0LL,  0LL);
                                    uint64_t v83 = *v82;
                                    uint64_t v84 = (void *)(v100
                                                   + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords);
                                    swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectableDeviceStateRecords,  &v108,  0LL,  0LL);
                                    if (v83 == *v84)
                                    {
                                      uint64_t v85 = (uint64_t *)(v22
                                                      + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
                                      swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords,  &v107,  0LL,  0LL);
                                      uint64_t v86 = *v85;
                                      uint64_t v87 = (void *)(v100
                                                     + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords);
                                      swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__collectedDeviceStateRecords,  &v106,  0LL,  0LL);
                                      if (v86 == *v87)
                                      {
                                        uint64_t v88 = (unsigned __int8 *)(v22
                                                                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
                                        swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed,  &v105,  0LL,  0LL);
                                        int v89 = *v88;
                                        uint64_t v90 = (unsigned __int8 *)(v100
                                                                + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed);
                                        swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__tlkShareDeletionFailed,  &v104,  0LL,  0LL);
                                        if (v89 == *v90)
                                        {
                                          uint64_t v94 = (char *)(v22
                                                       + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
                                          swift_beginAccess( v22 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed,  &v103,  0LL,  0LL);
                                          char v95 = *v94;
                                          swift_release(v22);
                                          uint64_t v96 = v100;
                                          uint64_t v97 = (char *)(v100
                                                       + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed);
                                          swift_beginAccess( v100 + OBJC_IVAR____TtCV18TrustedPeersHelper23GetRepairActionResponseP33_34B9299B76A248B7A76BCBE38D1FA2CF13_StorageClass__deviceStateRecordDeletionFailed,  &v102,  0LL,  0LL);
                                          char v98 = *v97;
                                          swift_release(v96);
                                          char v92 = v95 ^ v98 ^ 1;
                                          return v92 & 1;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }

                          swift_release(v22);
                          uint64_t v91 = v100;
                          goto LABEL_33;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

LABEL_32:
  swift_release(v22);
  uint64_t v91 = v24;
LABEL_33:
  swift_release(v91);
LABEL_34:
  char v92 = 0;
  return v92 & 1;
}

    uint64_t v9 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v8 << 6);
    goto LABEL_33;
  }

  __break(1u);
}

  __break(1u);
LABEL_33:
  swift_once(&qword_100250BB0, sub_10000FFE0);
LABEL_14:
  uint64_t v153 = (id)qword_100258268;
  uint64_t v45 = -[Client version](v27, "version");
  uint64_t v46 = [v14 policySecrets];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v145 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v46,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
  }

  else
  {
    uint64_t v145 = 0LL;
  }

  uint64_t v146 = [v14 syncUserControllableViews];
  uint64_t v150 = [v14 secureElementIdentity];
  uint64_t v149 = [v14 walrusSetting];
  uint64_t v148 = [v14 webAccess];
  uint64_t v48 = [v14 deviceName];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v142 = v50;
  }

  else
  {
    uint64_t v143 = 0LL;
    uint64_t v142 = 0LL;
  }

  uint64_t v154 = (_TtC18TrustedPeersHelper6Client *)v25;
  uint64_t v163 = (_TtC18TrustedPeersHelper6Client *)a9;
  uint64_t v164 = a10;
  uint64_t v51 = [v14 serialNumber];
  uint64_t v155 = v27;
  uint64_t v152 = v45;
  uint64_t v144 = a2;
  if (v51)
  {
    uint64_t v52 = v51;
    uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v140 = v53;
  }

  else
  {
    uint64_t v141 = 0LL;
    uint64_t v140 = 0LL;
  }

  char v54 = v165;
  uint64_t v55 = [v165 osVersion];
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v58 = v57;

  LOBYTE(v55) = [v54 isInheritedAccount];
  uint64_t v59 = objc_allocWithZone(&OBJC_CLASS___TPPeerStableInfo);
  uint64_t v60 = v163;
  uint64_t v61 = v164;
  sub_1000084E8((uint64_t)v163, v164);
  uint64_t v62 = v162;
  sub_1000084E8(a7, v162);
  uint64_t v63 = v161;
  uint64_t v64 = a7;
  uint64_t v65 = v63;
  uint64_t v138 = (char)v55;
  uint64_t v136 = v60;
  uint64_t v137 = v61;
  uint64_t v135 = (void *)v62;
  char v66 = v64;
  uint64_t v132 = v58;
  uint64_t v131 = v56;
  uint64_t v67 = v152;
  int v68 = v153;
  uint64_t v69 = v149;
  uint64_t v70 = v150;
  uint64_t v71 = v148;
  uint64_t v72 = sub_10016AD4C( v151,  (uint64_t)v153,  (uint64_t)v152,  v145,  v146,  (uint64_t)v150,  (uint64_t)v149,  (uint64_t)v148,  v143,  v142,  v141,  v140,  v131,  v132,  (uint64_t)v63,  v64,  (unint64_t)v135,  (uint64_t)v136,  v137,  v138);
  if (a3)
  {
    swift_bridgeObjectRelease(v154, v73, v74, v75, v76, v77, v78, v79);

    uint64_t v80 = v147;
    swift_errorRetain(a3);
    v80(0LL, a3);
    swift_errorRelease();
    return swift_errorRelease();
  }

  else
  {
    uint64_t v165 = a12;
    char v82 = v70;
    uint64_t v161 = a11;
    uint64_t v83 = v72;

    uint64_t v84 = a5;
    uint64_t v85 = v159;
    uint64_t v86 = v83;
    _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
    uint64_t v87 = [v86 data];
    uint64_t v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
    uint64_t v90 = v89;

    *uint64_t v85 = v88;
    v85[1] = v90;
    uint64_t v91 = [v86 sig];
    char v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
    uint64_t v94 = v93;

    v85[2] = v92;
    v85[3] = v94;
    __chkstk_darwin(v95, v96);
    v130[2] = v161;
    v130[3] = v165;
    uint64_t v131 = v66;
    uint64_t v132 = v162;
    uint64_t v133 = (uint64_t)v163;
    uint64_t v134 = v164;
    uint64_t v97 = v154;
    uint64_t v135 = v85;
    uint64_t v136 = v154;
    uint64_t v137 = (unint64_t)v84;
    char v98 = sub_1000077B8( (unint64_t *)&unk_100256D40,  type metadata accessor for SetRecoveryKeyRequest,  (uint64_t)&protocol conformance descriptor for SetRecoveryKeyRequest);
    static Message.with(_:)(sub_10017154C, v130, v158, v98);
    swift_bridgeObjectRelease(v97, v99, v100, v101, v102, v103, v104, v105);
    uint64_t v106 = *(void *)&v84[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 24];
    uint64_t v107 = *(void *)&v84[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish + 32];
    sub_1000084C4(&v84[OBJC_IVAR____TtC18TrustedPeersHelper9Container_cuttlefish], v106);
    uint64_t v108 = swift_allocObject(&unk_100238230, 48LL, 7LL);
    *(void *)(v108 + 16) = v84;
    *(void *)(v108 + 24) = v86;
    uint64_t v109 = v144;
    *(void *)(v108 + 32) = v147;
    *(void *)(v108 + 40) = v109;
    uint64_t v110 = *(void *)(v107 + 16);
    uint64_t v111 = *(void (**)(char *, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v110 + 40);
    uint64_t v112 = v86;
    uint64_t v113 = v84;
    swift_retain(v109);
    uint64_t v114 = (uint64_t)v160;
    v111(v160, sub_1001715B8, v108, v106, v110);

    swift_release((_TtC18TrustedPeersHelper6Client *)v108, v115, v116, v117, v118, v119, v120, v121);
    sub_1000415CC(v114, type metadata accessor for SetRecoveryKeyRequest);
    return sub_1000415CC((uint64_t)v85, type metadata accessor for SignedPeerStableInfo);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

          sub_100172694(v1);
          return (unint64_t)v3;
        }
      }
    }
  }

          sub_100172694(a1);
          return (unint64_t)v3;
        }
      }
    }
  }

    uint64_t v35 = (v47 - 1) & v47;
    uint64_t v45 = __clz(__rbit64(v47)) + (v22 << 6);
LABEL_33:
    uint64_t v49 = v23;
    uint64_t v50 = (uint64_t *)(v23[6] + 16 * v45);
    uint64_t v52 = *v50;
    uint64_t v51 = v50[1];
    int v53 = p_vtable[475];
    swift_bridgeObjectRetain(v51);
    char v54 = type metadata accessor for Logger(0LL);
    sub_100006BAC(v54, (uint64_t)qword_100257C18);
    uint64_t v55 = swift_bridgeObjectRetain_n(v51, 2LL);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    uint64_t v57 = static os_log_type_t.info.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc(12LL, -1LL);
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      v121[0] = v59;
      *(_DWORD *)uint64_t v58 = v109;
      swift_bridgeObjectRetain(v51);
      *(void *)(v58 + 4) = sub_10017C4C4(v52, v51, v121);
      swift_bridgeObjectRelease_n(v51, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Peer machineID is unknown, beginning grace period: %{public}s",  (uint8_t *)v58,  0xCu);
      swift_arrayDestroy(v59, 1LL, v108);
      uint64_t v60 = v59;
      p_vtable = (void **)(&OBJC_CLASS___VoucherMO + 24);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v51, 2LL);
    }

    uint64_t v36 = type metadata accessor for MachineMO();
    uint64_t v37 = *(void *)&v114[v113];
    uint64_t v38 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v36));
    uint64_t v39 = objc_msgSend(v38, "initWithContext:", v37, v107);
    uint64_t v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51);
    [v39 setMachineID:v40];

    uint64_t v42 = v117;
    int v41 = v118;
    [v39 setContainer:*(void *)&v118[v117]];
    Date.init()([v39 setSeenOnFullList:0]);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    v115[1](v6, v116);
    [v39 setModified:isa];

    [v39 setStatus:0];
    [*(id *)&v41[v42] addMachinesObject:v39];

    uint64_t v23 = v49;
  }

  uint64_t v48 = v46 + 3;
  if (v48 >= v111)
  {
LABEL_37:
    char v30 = (void *)swift_release(v23);
    uint64_t v22 = (uint64_t)&type metadata for Any;
    goto LABEL_38;
  }

  uint64_t v47 = *(void *)(v110 + 8 * v48);
  if (v47)
  {
    uint64_t v22 = v48;
    goto LABEL_32;
  }

  while (1)
  {
    uint64_t v22 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v22 >= v111) {
      goto LABEL_37;
    }
    uint64_t v47 = *(void *)(v110 + 8 * v22);
    ++v48;
    if (v47) {
      goto LABEL_32;
    }
  }

        if (a4) {
          *a4 = 1;
        }
        uint64_t v20 = v24;
        uint64_t v21 = v20;
        uint64_t v23 = 0LL;
        goto LABEL_5;
      }

      uint64_t v23 = v33;
      if ([v33 code] != (id)-25300)
      {
        if (v61)
        {
          uint64_t v51 = v61;
          uint64_t v52 = [v23 code];
          v72[0] = NSLocalizedDescriptionKey;
          int v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v23 code]));
          v72[1] = NSUnderlyingErrorKey;
          v73[0] = v53;
          v73[1] = v23;
          char v54 = v73;
          uint64_t v55 = v72;
LABEL_37:
          uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v54,  v55,  2LL));
          *uint64_t v51 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"securityd",  v52,  v57));
        }

Swift::Int GetRepairActionResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for GetRepairActionResponse,  &qword_1002522C8,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
}

uint64_t sub_10009A600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0D0C(a1, &qword_100250E00, &qword_100251ED0, (uint64_t)sub_100098C80, a2);
}

uint64_t sub_10009A61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetRepairActionResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009A630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetRepairActionResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009A644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256250,  type metadata accessor for GetRepairActionResponse,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009A694@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250DF8,  (uint64_t)static GetRepairActionResponse._protobuf_nameMap,  (uint64_t)sub_100098690,  a1);
}

uint64_t sub_10009A6B0(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002528C8,  type metadata accessor for GetRepairActionResponse,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002528C8,  type metadata accessor for GetRepairActionResponse,  (uint64_t)&protocol conformance descriptor for GetRepairActionResponse);
  return Message.hash(into:)(a1, a2, v4);
}

const char *SupportAppView.protoMessageName.unsafeMutableAddressor()
{
  return "SupportAppView";
}

uint64_t static SupportAppView.protoMessageName.getter()
{
  return 0x4174726F70707553LL;
}

uint64_t sub_10009A770()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SupportAppView._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SupportAppView._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "name";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "last_report";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "enabled";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t SupportAppView._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250E08, (uint64_t)static SupportAppView._protobuf_nameMap, (uint64_t)sub_10009A770);
}

uint64_t static SupportAppView._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250E08, (uint64_t)static SupportAppView._protobuf_nameMap, (uint64_t)sub_10009A770, a1);
}

uint64_t SupportAppView.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v5 + 16, a2, a3);
          break;
        case 2LL:
          sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for SupportAppView,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  &qword_100256418,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
          break;
        case 1LL:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v5, a2, a3);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t SupportAppView.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = *(void *)(v3 + 8);
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v3, v8), !v4))
  {
    uint64_t result = sub_10009AB38(v3, a1, a2, a3);
    if (!v4)
    {
      if (*(_BYTE *)(v3 + 16) == 1) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 3LL, a2, a3);
      }
      type metadata accessor for SupportAppView(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_10009AB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SupportAppView(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 28), (uint64_t)v9, (uint64_t *)&unk_100256D30);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v17 = sub_1000077B8( &qword_100256418,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

Swift::Int SupportAppView.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SupportAppView,  &qword_1002522D0,  (uint64_t)&protocol conformance descriptor for SupportAppView);
}

uint64_t sub_10009ACD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0xE000000000000000LL;
  *(_BYTE *)(a2 + 16) = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_10009AD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SupportAppView.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009AD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SupportAppView.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009AD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256248,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009ADA8@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250E08, (uint64_t)static SupportAppView._protobuf_nameMap, (uint64_t)sub_10009A770, a1);
}

uint64_t sub_10009ADC4(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002522D8,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009AE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002522D8,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
  return Message.hash(into:)(a1, a2, v4);
}

void *SupportAppDevice.protoMessageName.unsafeMutableAddressor()
{
  return &static SupportAppDevice.protoMessageName;
}

unint64_t static SupportAppDevice.protoMessageName.getter()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10009AE7C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static SupportAppDevice._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static SupportAppDevice._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1001DE700;
  uint64_t v7 = v26 + v6;
  uint64_t v8 = v26 + v6 + *(int *)(v2 + 48);
  *(void *)(v26 + v6) = 1LL;
  *(void *)uint64_t v8 = "sos";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 3LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "octagon";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "escrow";
  *((void *)v14 + 1) = 6LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)uint64_t v16 = "serial_number";
  *((void *)v16 + 1) = 13LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "views";
  *((void *)v18 + 1) = 5LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "last_health_report";
  *((void *)v20 + 1) = 18LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "status";
  *((void *)v22 + 1) = 6LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "model_id";
  *((void *)v24 + 1) = 8LL;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t SupportAppDevice._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250E10, (uint64_t)static SupportAppDevice._protobuf_nameMap, (uint64_t)sub_10009AE7C);
}

uint64_t static SupportAppDevice._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30(&qword_100250E10, (uint64_t)static SupportAppDevice._protobuf_nameMap, (uint64_t)sub_10009AE7C, a1);
}

uint64_t SupportAppDevice.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = v5;
          goto LABEL_8;
        case 2LL:
          uint64_t v12 = v5 + 1;
          goto LABEL_8;
        case 3LL:
          uint64_t v12 = v5 + 2;
LABEL_8:
          uint64_t v13 = v11;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v12, a2, a3);
          goto LABEL_15;
        case 4LL:
          uint64_t v14 = v5 + 8;
          goto LABEL_14;
        case 5LL:
          uint64_t v15 = type metadata accessor for SupportAppView(0LL);
          uint64_t v16 = sub_1000077B8( &qword_1002522D8,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView);
          uint64_t v13 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v5 + 24, v15, v16, a2, a3);
          goto LABEL_15;
        case 6LL:
          uint64_t v13 = v11;
          sub_10009DE10( a1,  v5,  a2,  a3,  type metadata accessor for SupportAppDevice,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  &qword_100256418,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
          goto LABEL_15;
        case 7LL:
          unint64_t v17 = sub_1000B682C();
          uint64_t v13 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v5 + 32,  &type metadata for SupportAppDeviceStatus,  v17,  a2,  a3);
          goto LABEL_15;
        case 8LL:
          uint64_t v14 = v5 + 48;
LABEL_14:
          uint64_t v13 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v14, a2, a3);
LABEL_15:
          uint64_t v11 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t SupportAppDevice.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (*(_BYTE *)v5 != 1
    || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 1LL, a2, a3), !v4))
  {
    if (*(_BYTE *)(v5 + 1) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 2LL, a2, a3), !v4))
    {
      if (*(_BYTE *)(v5 + 2) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 3LL, a2, a3), !v4))
      {
        uint64_t v10 = *(void *)(v5 + 8);
        unint64_t v11 = *(void *)(v5 + 16);
        uint64_t v12 = HIBYTE(v11) & 0xF;
        if ((v11 & 0x2000000000000000LL) == 0) {
          uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
        }
        if (!v12 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v10, v11), !v4))
        {
          uint64_t v13 = *(void *)(v5 + 24);
          if (!*(void *)(v13 + 16)
            || (uint64_t v14 = type metadata accessor for SupportAppView(0LL),
                v15 = sub_1000077B8( &qword_1002522D8,  type metadata accessor for SupportAppView,  (uint64_t)&protocol conformance descriptor for SupportAppView),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v13,  5LL,  v14,  v15,  a2,  a3),  !v4))
          {
            uint64_t result = sub_10009E198(v5, a1, a2, a3, type metadata accessor for SupportAppDevice, 6LL);
            if (!v4)
            {
              if (*(void *)(v5 + 32))
              {
                char v16 = *(_BYTE *)(v5 + 40);
                uint64_t v21 = *(void *)(v5 + 32);
                char v22 = v16;
                unint64_t v17 = sub_1000B682C();
                dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v21,  7LL,  &type metadata for SupportAppDeviceStatus,  v17,  a2,  a3);
              }

              uint64_t v18 = *(void *)(v5 + 48);
              unint64_t v19 = *(void *)(v5 + 56);
              uint64_t v20 = HIBYTE(v19) & 0xF;
              if ((v19 & 0x2000000000000000LL) == 0) {
                uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
              }
              if (v20) {
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v18, v19);
              }
              type metadata accessor for SupportAppDevice(0LL);
              return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int SupportAppDevice.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for SupportAppDevice,  &qword_1002522E8,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
}

uint64_t sub_10009B578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 0;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0xE000000000000000LL;
  *(void *)(a2 + 24) = _swiftEmptyArrayStorage;
  *(void *)(a2 + 32) = 0LL;
  *(_BYTE *)(a2 + 40) = 1;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_10009B5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SupportAppDevice.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009B608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SupportAppDevice.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009B61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256240,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009B66C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4(&qword_100250E10, (uint64_t)static SupportAppDevice._protobuf_nameMap, (uint64_t)sub_10009AE7C, a1);
}

uint64_t sub_10009B688(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_1002522F8,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009B6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_1002522F8,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
  return Message.hash(into:)(a1, a2, v4);
}

void *GetSupportAppInfoRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static GetSupportAppInfoRequest.protoMessageName;
}

unint64_t static GetSupportAppInfoRequest.protoMessageName.getter()
{
  return 0xD000000000000018LL;
}

uint64_t sub_10009B740()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static GetSupportAppInfoRequest._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static GetSupportAppInfoRequest._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DE9D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "metrics";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "accountInfo";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "page";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t GetSupportAppInfoRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E18,  (uint64_t)static GetSupportAppInfoRequest._protobuf_nameMap,  (uint64_t)sub_10009B740);
}

uint64_t static GetSupportAppInfoRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E18,  (uint64_t)static GetSupportAppInfoRequest._protobuf_nameMap,  (uint64_t)sub_10009B740,  a1);
}

uint64_t GetSupportAppInfoRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v5, a2, a3);
          break;
        case 2LL:
          sub_1000A5148( a1,  v5,  a2,  a3,  type metadata accessor for GetSupportAppInfoRequest,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          break;
        case 1LL:
          sub_1000A50A4( a1,  v5,  a2,  a3,  type metadata accessor for GetSupportAppInfoRequest,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t GetSupportAppInfoRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10009BAF8((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    sub_10009BC6C((uint64_t)v3, a1, a2, a3);
    if (*v3) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v3, 3LL, a2, a3);
    }
    type metadata accessor for GetSupportAppInfoRequest(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10009BAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t SupportAppInfoRequest = type metadata accessor for GetSupportAppInfoRequest(0LL);
  sub_10000FC68(a1 + *(int *)(SupportAppInfoRequest + 24), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

uint64_t sub_10009BC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t SupportAppInfoRequest = type metadata accessor for GetSupportAppInfoRequest(0LL);
  sub_10000FC68(a1 + *(int *)(SupportAppInfoRequest + 28), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 2LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

Swift::Int GetSupportAppInfoRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for GetSupportAppInfoRequest,  &qword_1002522F0,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
}

uint64_t sub_10009BE00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10009BE08(a1, 0LL, a2);
}

uint64_t sub_10009BE08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = a2;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v5 = (char *)a3 + *(int *)(a1 + 24);
  uint64_t v6 = type metadata accessor for Metrics(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = (char *)a3 + *(int *)(a1 + 28);
  uint64_t v8 = type metadata accessor for AccountInfo(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
}

uint64_t sub_10009BE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetSupportAppInfoRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009BEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetSupportAppInfoRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009BEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256238,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009BF0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E18,  (uint64_t)static GetSupportAppInfoRequest._protobuf_nameMap,  (uint64_t)sub_10009B740,  a1);
}

uint64_t sub_10009BF28(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252900,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009BF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252900,  type metadata accessor for GetSupportAppInfoRequest,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *GetSupportAppInfoResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static GetSupportAppInfoResponse.protoMessageName;
}

unint64_t static GetSupportAppInfoResponse.protoMessageName.getter()
{
  return 0xD000000000000019LL;
}

uint64_t sub_10009BFE0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static GetSupportAppInfoResponse._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static GetSupportAppInfoResponse._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC60;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "devices";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "passwordKeychainItemCount";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 25LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "totalDevices";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 4LL;
  *(void *)uint64_t v17 = "paginationToken";
  *((void *)v17 + 1) = 15LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "more";
  *(void *)(v18 + _Block_object_dispose(va, 8) = 4LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t GetSupportAppInfoResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E20,  (uint64_t)static GetSupportAppInfoResponse._protobuf_nameMap,  (uint64_t)sub_10009BFE0);
}

uint64_t static GetSupportAppInfoResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E20,  (uint64_t)static GetSupportAppInfoResponse._protobuf_nameMap,  (uint64_t)sub_10009BFE0,  a1);
}

uint64_t GetSupportAppInfoResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = type metadata accessor for SupportAppDevice(0LL);
          uint64_t v13 = sub_1000077B8( &qword_1002522F8,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v12, v13, a2, a3);
          goto LABEL_6;
        case 2LL:
          uint64_t v10 = v3 + 8;
          goto LABEL_5;
        case 3LL:
          uint64_t v10 = v3 + 16;
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v10, a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + 24, a2, a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + 40, a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t GetSupportAppInfoResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *v5;
  if (!*(void *)(*v5 + 16)
    || (uint64_t v10 = type metadata accessor for SupportAppDevice(0LL),
        v11 = sub_1000077B8( &qword_1002522F8,  type metadata accessor for SupportAppDevice,  (uint64_t)&protocol conformance descriptor for SupportAppDevice),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 1LL, v10, v11, a2, a3),  !v4))
  {
    uint64_t v13 = v5[1];
    if (!v13
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v13, 2LL, a2, a3), !v4))
    {
      uint64_t v14 = v5[2];
      if (!v14
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v14, 3LL, a2, a3), !v4))
      {
        uint64_t v15 = v5[3];
        unint64_t v16 = v5[4];
        uint64_t v17 = HIBYTE(v16) & 0xF;
        if ((v16 & 0x2000000000000000LL) == 0) {
          uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
        }
        if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v15, v16), !v4))
        {
          if (*((_BYTE *)v5 + 40) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 5LL, a2, a3), !v4))
          {
            type metadata accessor for GetSupportAppInfoResponse(0LL);
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }

  return result;
}

Swift::Int GetSupportAppInfoResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for GetSupportAppInfoResponse,  &qword_100252300,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
}

uint64_t sub_10009C510@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = _swiftEmptyArrayStorage;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 40) = 0;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_10009C548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetSupportAppInfoResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009C55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GetSupportAppInfoResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009C570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256230,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009C5C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E20,  (uint64_t)static GetSupportAppInfoResponse._protobuf_nameMap,  (uint64_t)sub_10009BFE0,  a1);
}

uint64_t sub_10009C5DC(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252918,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009C61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252918,  type metadata accessor for GetSupportAppInfoResponse,  (uint64_t)&protocol conformance descriptor for GetSupportAppInfoResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *ResetAccountCDPContentsRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static ResetAccountCDPContentsRequest.protoMessageName;
}

unint64_t static ResetAccountCDPContentsRequest.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10009C694(uint64_t a1)
{
  return sub_10009C6A0(a1, static ResetAccountCDPContentsRequest._protobuf_nameMap);
}

uint64_t sub_10009C6A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v3, a2);
  sub_100006BAC(v3, (uint64_t)a2);
  uint64_t v4 = sub_100007578(&qword_1002563F0);
  uint64_t v5 = sub_100007578(&qword_1002563F8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(v4, v9 - v7 + 8 * v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001DEC40;
  uint64_t v11 = v10 + v9 + *(int *)(v5 + 48);
  *(void *)(v10 + v9) = 1LL;
  *(void *)uint64_t v11 = "reset_reason";
  *(void *)(v11 + _Block_object_dispose(va, 8) = 12LL;
  *(_BYTE *)(v11 + 16) = 2;
  uint64_t v12 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v11, v12, v13);
  uint64_t v15 = v10 + v9 + v7 + *(int *)(v5 + 48);
  *(void *)(v10 + v9 + v7) = 2LL;
  *(void *)uint64_t v15 = "idmsTargetContext";
  *(void *)(v15 + _Block_object_dispose(va, 8) = 17LL;
  *(_BYTE *)(v15 + 16) = 2;
  v14();
  unint64_t v16 = (void *)(v10 + v9 + 2 * v7);
  uint64_t v17 = (char *)v16 + *(int *)(v5 + 48);
  *unint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "idmsCuttlefishPassword";
  *((void *)v17 + 1) = 22LL;
  v17[16] = 2;
  v14();
  uint64_t v18 = (void *)(v10 + v9 + 3 * v7);
  uint64_t v19 = (char *)v18 + *(int *)(v5 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "testingNotifyIdms";
  *((void *)v19 + 1) = 17LL;
  v19[16] = 2;
  v14();
  uint64_t v20 = (void *)(v10 + v9 + 4 * v7);
  uint64_t v21 = (char *)v20 + *(int *)(v5 + 48);
  void *v20 = 5LL;
  *(void *)uint64_t v21 = "accountInfo";
  *((void *)v21 + 1) = 11LL;
  v21[16] = 2;
  v14();
  char v22 = (void *)(v10 + v9 + 5 * v7);
  uint64_t v23 = (char *)v22 + *(int *)(v5 + 48);
  *char v22 = 6LL;
  *(void *)uint64_t v23 = "metrics";
  *((void *)v23 + 1) = 7LL;
  v23[16] = 2;
  v14();
  uint64_t v24 = (void *)(v10 + v9 + 6 * v7);
  uint64_t v25 = (char *)v24 + *(int *)(v5 + 48);
  *uint64_t v24 = 7LL;
  *(void *)uint64_t v25 = "isGuitarfish";
  *((void *)v25 + 1) = 12LL;
  v25[16] = 2;
  v14();
  return _NameMap.init(dictionaryLiteral:)(v10);
}

uint64_t ResetAccountCDPContentsRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E28,  (uint64_t)static ResetAccountCDPContentsRequest._protobuf_nameMap,  (uint64_t)sub_10009C694);
}

uint64_t static ResetAccountCDPContentsRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E28,  (uint64_t)static ResetAccountCDPContentsRequest._protobuf_nameMap,  (uint64_t)sub_10009C694,  a1);
}

uint64_t ResetAccountCDPContentsRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009C964(a1, a2, a3, type metadata accessor for ResetAccountCDPContentsRequest);
}

uint64_t sub_10009C964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v13 = v5;
  if (!v5)
  {
    while ((v12 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          unint64_t v14 = sub_1000B6790();
          uint64_t v15 = v13;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v7, &type metadata for ResetReason, v14, a2, a3);
          goto LABEL_14;
        case 2LL:
          uint64_t v16 = v7 + 16;
          goto LABEL_8;
        case 3LL:
          uint64_t v16 = v7 + 32;
LABEL_8:
          uint64_t v15 = v13;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v16, a2, a3);
          goto LABEL_14;
        case 4LL:
          uint64_t v17 = v7 + 48;
          goto LABEL_13;
        case 5LL:
          uint64_t v15 = v13;
          sub_10009CB08( a1,  v7,  a2,  a3,  a4,  type metadata accessor for AccountInfo,  (unint64_t *)&unk_100256CE0,  (uint64_t)&protocol conformance descriptor for AccountInfo);
          goto LABEL_14;
        case 6LL:
          uint64_t v15 = v13;
          sub_10009CBAC( a1,  v7,  a2,  a3,  a4,  type metadata accessor for Metrics,  (unint64_t *)&unk_100256FE0,  (uint64_t)&protocol conformance descriptor for Metrics);
          goto LABEL_14;
        case 7LL:
          uint64_t v17 = v7 + 49;
LABEL_13:
          uint64_t v15 = v13;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v17, a2, a3);
LABEL_14:
          uint64_t v13 = v15;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10009CB08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 40);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t sub_10009CBAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 44);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t ResetAccountCDPContentsRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009CC7C( a1,  a2,  a3,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_10009CE48,  (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_10009CFBC,  (void (*)(void))type metadata accessor for ResetAccountCDPContentsRequest);
}

uint64_t sub_10009CC7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t *, uint64_t, uint64_t, uint64_t), void (*a6)(void))
{
  uint64_t v11 = v6;
  if (!*v11
    || (char v15 = *((_BYTE *)v11 + 8),
        uint64_t v24 = *v11,
        char v25 = v15,
        unint64_t v16 = sub_1000B6790(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v24,  1LL,  &type metadata for ResetReason,  v16,  a2,  a3),  !v7))
  {
    uint64_t v18 = v11[2];
    unint64_t v19 = v11[3];
    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000LL) == 0) {
      uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (!v20 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v18, v19), !v7))
    {
      uint64_t v21 = v11[4];
      unint64_t v22 = v11[5];
      uint64_t v23 = HIBYTE(v22) & 0xF;
      if ((v22 & 0x2000000000000000LL) == 0) {
        uint64_t v23 = v21 & 0xFFFFFFFFFFFFLL;
      }
      if (!v23 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v21, v22), !v7))
      {
        if (*((_BYTE *)v11 + 48) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 4LL, a2, a3), !v7))
        {
          uint64_t result = a4(v11, a1, a2, a3);
          if (!v7)
          {
            a5(v11, a1, a2, a3);
            if (*((_BYTE *)v11 + 49) == 1) {
              dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 7LL, a2, a3);
            }
            a6(0LL);
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10009CE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100251F50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccountInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 40), (uint64_t)v9, &qword_100251F50);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for AccountInfo);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256CE0,  type metadata accessor for AccountInfo,  (uint64_t)&protocol conformance descriptor for AccountInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 5LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for AccountInfo);
}

uint64_t sub_10009CFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100257000);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Metrics(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ResetAccountCDPContentsRequest(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 44), (uint64_t)v9, &qword_100257000);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for Metrics);
  uint64_t v17 = sub_1000077B8( (unint64_t *)&unk_100256FE0,  type metadata accessor for Metrics,  (uint64_t)&protocol conformance descriptor for Metrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 6LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for Metrics);
}

Swift::Int ResetAccountCDPContentsRequest.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for ResetAccountCDPContentsRequest,  &qword_100252308,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
}

uint64_t sub_10009D150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 1;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0xE000000000000000LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0xE000000000000000LL;
  *(_WORD *)(a2 + 4_Block_object_dispose(va, 8) = 0;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for AccountInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 44);
  uint64_t v7 = type metadata accessor for Metrics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10009D1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10009D234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_10009D274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetAccountCDPContentsRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009D288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetAccountCDPContentsRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009D29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256228,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009D2EC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E28,  (uint64_t)static ResetAccountCDPContentsRequest._protobuf_nameMap,  (uint64_t)sub_10009C694,  a1);
}

uint64_t sub_10009D308(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252930,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009D348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252930,  type metadata accessor for ResetAccountCDPContentsRequest,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *ResetAccountCDPContentsResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static ResetAccountCDPContentsResponse.protoMessageName;
}

unint64_t static ResetAccountCDPContentsResponse.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_10009D3C0(uint64_t a1)
{
  return sub_1000A5830(a1, static ResetAccountCDPContentsResponse._protobuf_nameMap);
}

uint64_t ResetAccountCDPContentsResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E30,  (uint64_t)static ResetAccountCDPContentsResponse._protobuf_nameMap,  (uint64_t)sub_10009D3C0);
}

uint64_t static ResetAccountCDPContentsResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E30,  (uint64_t)static ResetAccountCDPContentsResponse._protobuf_nameMap,  (uint64_t)sub_10009D3C0,  a1);
}

Swift::Int ResetAccountCDPContentsResponse.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for ResetAccountCDPContentsResponse,  &qword_100252310,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
}

uint64_t sub_10009D420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256220,  type metadata accessor for ResetAccountCDPContentsResponse,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009D470@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E30,  (uint64_t)static ResetAccountCDPContentsResponse._protobuf_nameMap,  (uint64_t)sub_10009D3C0,  a1);
}

uint64_t sub_10009D48C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252948,  type metadata accessor for ResetAccountCDPContentsResponse,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009D4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252948,  type metadata accessor for ResetAccountCDPContentsResponse,  (uint64_t)&protocol conformance descriptor for ResetAccountCDPContentsResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *PasscodeGeneration.protoMessageName.unsafeMutableAddressor()
{
  return &static PasscodeGeneration.protoMessageName;
}

unint64_t static PasscodeGeneration.protoMessageName.getter()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10009D544(uint64_t a1)
{
  return sub_10009D55C(a1, static PasscodeGeneration._protobuf_nameMap, (uint64_t)"value", 5LL);
}

uint64_t sub_10009D55C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v7, a2);
  sub_100006BAC(v7, (uint64_t)a2);
  uint64_t v8 = sub_100007578(&qword_1002563F0);
  uint64_t v9 = sub_100007578(&qword_1002563F8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001DE710;
  uint64_t v15 = v14 + v13 + *(int *)(v9 + 48);
  *(void *)(v14 + v13) = 1LL;
  *(void *)uint64_t v15 = a3;
  *(void *)(v15 + _Block_object_dispose(va, 8) = a4;
  *(_BYTE *)(v15 + 16) = 2;
  uint64_t v16 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v17 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v15, v16, v17);
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t PasscodeGeneration._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250E38, (uint64_t)static PasscodeGeneration._protobuf_nameMap, (uint64_t)sub_10009D544);
}

uint64_t static PasscodeGeneration._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E38,  (uint64_t)static PasscodeGeneration._protobuf_nameMap,  (uint64_t)sub_10009D544,  a1);
}

uint64_t PasscodeGeneration.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3, a2, a3);
    }
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t PasscodeGeneration.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*v3, 1LL, a2, a3), !v4))
  {
    type metadata accessor for PasscodeGeneration(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int PasscodeGeneration.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for PasscodeGeneration,  &qword_100252318,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
}

uint64_t sub_10009D7B4@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  return _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
}

uint64_t sub_10009D7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PasscodeGeneration.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009D7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PasscodeGeneration.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009D7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256218,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009D84C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E38,  (uint64_t)static PasscodeGeneration._protobuf_nameMap,  (uint64_t)sub_10009D544,  a1);
}

uint64_t sub_10009D868(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252960,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009D8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252960,  type metadata accessor for PasscodeGeneration,  (uint64_t)&protocol conformance descriptor for PasscodeGeneration);
  return Message.hash(into:)(a1, a2, v4);
}

void *EscrowInformation.protoMessageName.unsafeMutableAddressor()
{
  return &static EscrowInformation.protoMessageName;
}

unint64_t static EscrowInformation.protoMessageName.getter()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10009D920()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static EscrowInformation._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static EscrowInformation._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DEC70;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "creation_date";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "remaining_attempts";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "escrow_information_metadata";
  *((void *)v15 + 1) = 27LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "label";
  *((void *)v17 + 1) = 5LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 9LL;
  *(void *)uint64_t v19 = "silent_attempt_allowed";
  *((void *)v19 + 1) = 22LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 10LL;
  *(void *)uint64_t v21 = "record_status";
  *((void *)v21 + 1) = 13LL;
  v21[16] = 2;
  v12();
  unint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *unint64_t v22 = 11LL;
  *(void *)uint64_t v23 = "viability_status";
  *((void *)v23 + 1) = 16LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  char v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 12LL;
  *(void *)char v25 = "federation_id";
  *((void *)v25 + 1) = 13LL;
  v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 13LL;
  *(void *)uint64_t v26 = "expected_federation_id";
  *(void *)(v26 + _Block_object_dispose(va, 8) = 22LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t EscrowInformation._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4(&qword_100250E40, (uint64_t)static EscrowInformation._protobuf_nameMap, (uint64_t)sub_10009D920);
}

uint64_t static EscrowInformation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E40,  (uint64_t)static EscrowInformation._protobuf_nameMap,  (uint64_t)sub_10009D920,  a1);
}

uint64_t EscrowInformation.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = v11;
          sub_10009DE10( a1,  v5,  a2,  a3,  type metadata accessor for EscrowInformation,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  &qword_100256418,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
          goto LABEL_17;
        case 2LL:
          uint64_t v13 = v5;
          goto LABEL_10;
        case 3LL:
          uint64_t v12 = v11;
          sub_10009DEB4( a1,  v5,  a2,  a3,  type metadata accessor for EscrowInformation,  type metadata accessor for EscrowInformation.Metadata,  &qword_100252988,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
          goto LABEL_17;
        case 4LL:
          uint64_t v14 = v5 + 8;
          goto LABEL_16;
        case 9LL:
          uint64_t v13 = v5 + 24;
LABEL_10:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v13, a2, a3);
          goto LABEL_17;
        case 10LL:
          unint64_t v15 = sub_1000B6884();
          uint64_t v16 = v5 + 32;
          uint64_t v17 = &type metadata for RecordStatus;
          goto LABEL_13;
        case 11LL:
          unint64_t v15 = sub_1000B68C8();
          uint64_t v16 = v5 + 48;
          uint64_t v17 = &type metadata for SOSViability;
LABEL_13:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v16, v17, v15, a2, a3);
          goto LABEL_17;
        case 12LL:
          uint64_t v14 = v5 + 64;
          goto LABEL_16;
        case 13LL:
          uint64_t v14 = v5 + 80;
LABEL_16:
          uint64_t v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v14, a2, a3);
LABEL_17:
          uint64_t v11 = v12;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10009DE10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 48);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t sub_10009DEB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v13 = a2 + *(int *)(a5(0LL) + 52);
  uint64_t v14 = a6(0LL);
  uint64_t v15 = sub_1000077B8(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a3, a4);
}

uint64_t EscrowInformation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10009E198(v3, a1, a2, a3, type metadata accessor for EscrowInformation, 1LL);
  if (!v4)
  {
    if (*(void *)v3) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v3, 2LL, a2, a3);
    }
    sub_10009E314(v3, a1, a2, a3);
    uint64_t v9 = *(void *)(v3 + 8);
    unint64_t v10 = *(void *)(v3 + 16);
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v11) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v9, v10);
    }
    uint64_t v12 = *(void *)(v3 + 24);
    if (v12) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(v12, 9LL, a2, a3);
    }
    if (*(void *)(v3 + 32))
    {
      char v13 = *(_BYTE *)(v3 + 40);
      uint64_t v23 = *(void *)(v3 + 32);
      char v24 = v13;
      unint64_t v14 = sub_1000B6884();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v23,  10LL,  &type metadata for RecordStatus,  v14,  a2,  a3);
    }

    if (*(void *)(v3 + 48))
    {
      char v15 = *(_BYTE *)(v3 + 56);
      uint64_t v23 = *(void *)(v3 + 48);
      char v24 = v15;
      unint64_t v16 = sub_1000B68C8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v23,  11LL,  &type metadata for SOSViability,  v16,  a2,  a3);
    }

    uint64_t v17 = *(void *)(v3 + 64);
    unint64_t v18 = *(void *)(v3 + 72);
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v19) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v17, v18);
    }
    uint64_t v20 = *(void *)(v3 + 80);
    unint64_t v21 = *(void *)(v3 + 88);
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000LL) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v22) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v20, v21);
    }
    type metadata accessor for EscrowInformation(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10009E198( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v8 = sub_100007578((uint64_t *)&unk_100256D30);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  unint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a5(0LL);
  sub_10000FC68(a1 + *(int *)(v17 + 48), (uint64_t)v11, (uint64_t *)&unk_100256D30);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  uint64_t v19 = sub_1000077B8( &qword_100256418,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_Timestamp,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_Timestamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v16, v20, v12, v19, v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_10009E314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = sub_100007578(&qword_100252098);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for EscrowInformation.Metadata(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for EscrowInformation(0LL);
  sub_10000FC68(a1 + *(int *)(v15 + 52), (uint64_t)v9, &qword_100252098);
  sub_100041608((uint64_t)v9, (uint64_t)v14, type metadata accessor for EscrowInformation.Metadata);
  uint64_t v17 = sub_1000077B8( &qword_100252988,  type metadata accessor for EscrowInformation.Metadata,  (uint64_t)&protocol conformance descriptor for EscrowInformation.Metadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v10, v17, a3, v19);
  return sub_1000415CC((uint64_t)v14, type metadata accessor for EscrowInformation.Metadata);
}

Swift::Int EscrowInformation.hashValue.getter()
{
  return sub_1000A5A14( type metadata accessor for EscrowInformation,  &qword_100252330,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
}

uint64_t sub_10009E4A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 16) = 0xE000000000000000LL;
  *(_BYTE *)(a2 + 40) = 1;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a2 + 56) = 1;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0xE000000000000000LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
  _s18TrustedPeersHelper8ViewKeysV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvpfi_0();
  uint64_t v4 = a2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 52);
  uint64_t v7 = type metadata accessor for EscrowInformation.Metadata(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10009E558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10009E598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_10009E5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowInformation.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10009E5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EscrowInformation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10009E600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100256210,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10009E650@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AFB4( &qword_100250E40,  (uint64_t)static EscrowInformation._protobuf_nameMap,  (uint64_t)sub_10009D920,  a1);
}

uint64_t sub_10009E66C(uint64_t a1)
{
  uint64_t v2 = sub_1000077B8( &qword_100252268,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10009E6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000077B8( &qword_100252268,  type metadata accessor for EscrowInformation,  (uint64_t)&protocol conformance descriptor for EscrowInformation);
  return Message.hash(into:)(a1, a2, v4);
}

void *EscrowInformation.Metadata.protoMessageName.unsafeMutableAddressor()
{
  return &static EscrowInformation.Metadata.protoMessageName;
}

unint64_t static EscrowInformation.Metadata.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10009E724()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100006B6C(v0, static EscrowInformation.Metadata._protobuf_nameMap);
  sub_100006BAC(v0, (uint64_t)static EscrowInformation.Metadata._protobuf_nameMap);
  uint64_t v1 = sub_100007578(&qword_1002563F0);
  uint64_t v2 = sub_100007578(&qword_1002563F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 10 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001DECA0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "backup_keybag_digest";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 20LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "client_metadata";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 15LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "secure_backup_uses_multiple_icscs";
  *((void *)v15 + 1) = 33LL;
  v15[16] = 2;
  v12();
  unint64_t v16 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *unint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "bottle_id";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "secure_backup_timestamp";
  *((void *)v19 + 1) = 23LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "escrowed_spki";
  *((void *)v21 + 1) = 13LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v7 + v6 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "peer_info";
  *((void *)v23 + 1) = 9LL;
  v23[16] = 2;
  v12();
  char v24 = (void *)(v7 + v6 + 7 * v4);
  char v25 = (char *)v24 + *(int *)(v2 + 48);
  *char v24 = 8LL;
  *(void *)char v25 = "serial";
  *((void *)v25 + 1) = 6LL;
  v25[16] = 2;
  v12();
  uint64_t v26 = v7 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 9LL;
  *(void *)uint64_t v26 = "build";
  *(void *)(v26 + _Block_object_dispose(va, 8) = 5LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  uint64_t v27 = (void *)(v7 + v6 + 9 * v4);
  uint64_t v28 = (char *)v27 + *(int *)(v2 + 48);
  *uint64_t v27 = 10LL;
  *(void *)uint64_t v28 = "passcodeGeneration";
  *((void *)v28 + 1) = 18LL;
  v28[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t EscrowInformation.Metadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10007AED4( &qword_100250E48,  (uint64_t)static EscrowInformation.Metadata._protobuf_nameMap,  (uint64_t)sub_10009E724);
}

uint64_t static EscrowInformation.Metadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10007AF30( &qword_100250E48,  (uint64_t)static EscrowInformation.Metadata._protobuf_nameMap,  (uint64_t)sub_10009E724,  a1);
}